void sub_23CC9AE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  *(void *)result = &unk_26F0C1C30;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1C30;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>((int *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat5ValueENS0_7LiteralEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1}>,long long ()(operations_research::sat::Model const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<long long,false>::__call[abi:ne180100]<operations_research::sat::Value(operations_research::sat::Literal)::{lambda(operations_research::sat::Model const&)#1} &,operations_research::sat::Model const&>(int *a1, uint64_t a2)
{
  v4 = *(void **)(a2 + 32);
  v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
      v7 = v3;
    }
    else {
      v7 = v3 + 1;
    }
    if (v6) {
      v2 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  unint64_t v8 = *a1;
  uint64_t v9 = *(void *)(v2[5] + 24);
  if (((*(void *)(v9 + (((unint64_t)(2 * ((int)v8 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 & 0x3E)) & 3) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.h", 977);
    v11 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: trail->Assignment().VariableIsAssigned(l.Variable()) ", 67);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  return (*(void *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1;
}

void sub_23CC9B110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::sat::Model::Delete<operations_research::sat::CoreBasedOptimizer>::~Delete(void *a1)
{
  v2 = (void *)a1[1];
  *a1 = &unk_26F0C1CC0;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = (void *)v2[14];
    if (v3 == v2 + 11)
    {
      (*(void (**)(void *))(v2[11] + 32))(v2 + 11);
      v4 = (void *)v2[7];
      if (!v4) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v3) {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
      v4 = (void *)v2[7];
      if (!v4) {
        goto LABEL_7;
      }
    }
    v2[8] = v4;
    operator delete(v4);
LABEL_7:
    MEMORY[0x23ECF2BC0](v2, 0x1020C40A8D2B3AFLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CoreBasedOptimizer>::~Delete(void *a1)
{
  v1 = (void *)a1[1];
  *a1 = &unk_26F0C1CC0;
  a1[1] = 0;
  if (!v1) {
    goto LABEL_8;
  }
  v2 = (void *)v1[14];
  if (v2 == v1 + 11)
  {
    (*(void (**)(void *))(v1[11] + 32))(v1 + 11);
    unint64_t v3 = (void *)v1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    unint64_t v3 = (void *)v1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  v1[8] = v3;
  operator delete(v3);
LABEL_7:
  MEMORY[0x23ECF2BC0](v1, 0x1020C40A8D2B3AFLL);
LABEL_8:

  JUMPOUT(0x23ECF2BC0);
}

uint64_t absl::Cleanup<operations_research::sat::anonymous namespace'::QuickSolveWithHint(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>::~Cleanup(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    operations_research::sat::SatParameters::CopyFrom(*(operations_research::sat::SatParameters **)(a1 + 8), (const operations_research::sat::SatParameters *)(a1 + 16));
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 16));
  return a1;
}

void operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0::operator()(uint64_t a1)
{
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v5, 0);
  unint64_t v3 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    unint64_t v3 = *(google::protobuf::Arena **)v3;
    v4 = v7;
    if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_3;
    }
LABEL_5:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v7, v3, *(long long **)(a1 + 16));
    goto LABEL_6;
  }
  v4 = v7;
  if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
    goto LABEL_5;
  }
LABEL_3:
  std::string::operator=(v4, *(const std::string **)(a1 + 16));
LABEL_6:
  operations_research::sat::SharedResponseManager::NewSolution(**(operations_research::sat::SharedResponseManager ***)(a1 + 24), (const operations_research::sat::CpSolverResponse *)v5, **(operations_research::sat::Model ***)(a1 + 8));
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v5);
}

void sub_23CC9B3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x28uLL);
  *(void *)v2 = &unk_26F0C1CF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedRes"
                     "ponseManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_"
                                "21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_118SolveLoadedCpModelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::anonymous namespace'::SolveLoadedCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      v10 = a2;
    }
    else {
      v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          v17 = v12;
        }
        else {
          v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(void *)v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    std::string *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_23CC9B6C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy(a1, a2[1]);
    if (a2[4]) {
      operator delete((void *)a2[5]);
    }
    operator delete(a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t result, const void **a2)
{
  if ((const void **)result != a2)
  {
    uint64_t v35 = v2;
    uint64_t v36 = v3;
    uint64_t v5 = result;
    char v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      uint64_t v7 = 0;
      int v8 = (const void **)result;
      do
      {
        v10 = v8;
        int v8 = v6;
        int v11 = *((char *)v10 + 23);
        int v12 = *((char *)v10 + 47);
        if (v12 >= 0) {
          size_t v13 = *((unsigned __int8 *)v10 + 47);
        }
        else {
          size_t v13 = (size_t)v10[4];
        }
        if (v12 >= 0) {
          uint64_t v14 = v6;
        }
        else {
          uint64_t v14 = (const void **)v10[3];
        }
        if (v11 >= 0) {
          size_t v15 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          size_t v15 = (size_t)v10[1];
        }
        if (v11 >= 0) {
          unint64_t v16 = v10;
        }
        else {
          unint64_t v16 = *v10;
        }
        if (v15 >= v13) {
          size_t v17 = v13;
        }
        else {
          size_t v17 = v15;
        }
        __n128 result = memcmp(v14, v16, v17);
        BOOL v18 = v13 < v15;
        if (result) {
          BOOL v18 = (int)result < 0;
        }
        if (v18)
        {
          v34 = v8[2];
          unint64_t v19 = (unint64_t)v34;
          long long v33 = *(_OWORD *)v8;
          v8[1] = 0;
          v8[2] = 0;
          *int v8 = 0;
          size_t v20 = HIBYTE(v19);
          if ((v20 & 0x80u) == 0) {
            size_t v21 = v20;
          }
          else {
            size_t v21 = *((void *)&v33 + 1);
          }
          if ((v20 & 0x80u) == 0) {
            int v22 = &v33;
          }
          else {
            int v22 = (long long *)v33;
          }
          uint64_t v23 = v7;
          do
          {
            uint64_t v24 = v5 + v23;
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v5 + v23);
            *(void *)(v24 + 40) = *(void *)(v5 + v23 + 16);
            *(unsigned char *)(v24 + 23) = 0;
            *(unsigned char *)uint64_t v24 = 0;
            if (!v23)
            {
              uint64_t v9 = v5;
              goto LABEL_5;
            }
            size_t v27 = *(const void **)(v24 - 24);
            uint64_t v25 = v24 - 24;
            long long v26 = v27;
            int v28 = *(char *)(v25 + 23);
            if (v28 >= 0) {
              size_t v29 = *(unsigned __int8 *)(v25 + 23);
            }
            else {
              size_t v29 = *(void *)(v25 + 8);
            }
            if (v28 >= 0) {
              v30 = (const void *)v25;
            }
            else {
              v30 = v26;
            }
            if (v29 >= v21) {
              size_t v31 = v21;
            }
            else {
              size_t v31 = v29;
            }
            __n128 result = memcmp(v22, v30, v31);
            BOOL v32 = v21 < v29;
            if (result) {
              BOOL v32 = (int)result < 0;
            }
            v23 -= 24;
          }
          while (v32);
          uint64_t v9 = v5 + v23 + 24;
LABEL_5:
          *(_OWORD *)uint64_t v9 = v33;
          *(void *)(v9 + 16) = v34;
        }
        char v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

const void **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **result, const void **a2)
{
  if (result != a2)
  {
    uint64_t v32 = v2;
    uint64_t v33 = v3;
    uint64_t v5 = result;
    for (i = result + 3; v5 + 3 != a2; i = v5 + 3)
    {
      uint64_t v7 = v5;
      uint64_t v5 = i;
      int v8 = *((char *)v7 + 23);
      int v9 = *((char *)v7 + 47);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)v7 + 47);
      }
      else {
        size_t v10 = (size_t)v7[4];
      }
      if (v9 >= 0) {
        int v11 = i;
      }
      else {
        int v11 = (const void **)v7[3];
      }
      if (v8 >= 0) {
        size_t v12 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v12 = (size_t)v7[1];
      }
      if (v8 >= 0) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = *v7;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      __n128 result = (const void **)memcmp(v11, v13, v14);
      BOOL v15 = v10 < v12;
      if (result) {
        BOOL v15 = (int)result < 0;
      }
      if (v15)
      {
        size_t v31 = v5[2];
        unint64_t v16 = (unint64_t)v31;
        long long v30 = *(_OWORD *)v5;
        v5[1] = 0;
        v5[2] = 0;
        *uint64_t v5 = 0;
        size_t v17 = HIBYTE(v16);
        if ((v17 & 0x80u) == 0) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = *((void *)&v30 + 1);
        }
        if ((v17 & 0x80u) == 0) {
          unint64_t v19 = &v30;
        }
        else {
          unint64_t v19 = (long long *)v30;
        }
        size_t v20 = v5;
        do
        {
          size_t v21 = v20 - 3;
          *(_OWORD *)size_t v20 = *(_OWORD *)(v20 - 3);
          v20[2] = *(v20 - 1);
          *((unsigned char *)v20 - 1) = 0;
          *((unsigned char *)v20 - 24) = 0;
          size_t v22 = *((unsigned __int8 *)v20 - 25);
          uint64_t v23 = v20 - 6;
          uint64_t v24 = (const void **)*(v20 - 6);
          size_t v25 = (size_t)*(v20 - 5);
          if ((v22 & 0x80u) == 0) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v25;
          }
          if ((v22 & 0x80u) == 0) {
            size_t v27 = v23;
          }
          else {
            size_t v27 = v24;
          }
          if (v26 >= v18) {
            size_t v28 = v18;
          }
          else {
            size_t v28 = v26;
          }
          __n128 result = (const void **)memcmp(v19, v27, v28);
          BOOL v29 = (int)result < 0;
          if (!result) {
            BOOL v29 = v18 < v26;
          }
          size_t v20 = v21;
        }
        while (v29);
        *(_OWORD *)size_t v21 = v30;
        v21[2] = v31;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    size_t v17 = a3;
  }
  else {
    size_t v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  int v19 = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v14)
  {
    if (v20)
    {
      size_t v21 = a1[2];
      long long v22 = *(_OWORD *)a1;
      uint64_t v23 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
      return 1;
    }
    unint64_t v39 = (unint64_t)a1[2];
    long long v40 = *(_OWORD *)a1;
    v41 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v41;
    *(_OWORD *)a2 = v40;
    a2[2] = (const void *)v39;
    size_t v42 = HIBYTE(v39);
    int v43 = *((char *)a3 + 23);
    if (v43 >= 0) {
      size_t v44 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v44 = (size_t)a3[1];
    }
    if (v43 >= 0) {
      long long v45 = a3;
    }
    else {
      long long v45 = *a3;
    }
    if ((v42 & 0x80u) == 0) {
      size_t v46 = v42;
    }
    else {
      size_t v46 = (size_t)a2[1];
    }
    if ((v42 & 0x80u) == 0) {
      unint64_t v47 = a2;
    }
    else {
      unint64_t v47 = *a2;
    }
    if (v46 >= v44) {
      size_t v48 = v44;
    }
    else {
      size_t v48 = v46;
    }
    int v49 = memcmp(v45, v47, v48);
    BOOL v50 = v44 < v46;
    if (v49) {
      BOOL v50 = v49 < 0;
    }
    if (!v50) {
      return 1;
    }
    long long v51 = a2[2];
    long long v52 = *(_OWORD *)a2;
    uint64_t v53 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v53;
    *(_OWORD *)a3 = v52;
    a3[2] = v51;
    return 2;
  }
  if (v20)
  {
    uint64_t v24 = a2[2];
    long long v25 = *(_OWORD *)a2;
    size_t v26 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v26;
    *(_OWORD *)a3 = v25;
    a3[2] = v24;
    int v27 = *((char *)a1 + 23);
    int v28 = *((char *)a2 + 23);
    if (v28 >= 0) {
      size_t v29 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v29 = (size_t)a2[1];
    }
    if (v28 >= 0) {
      long long v30 = a2;
    }
    else {
      long long v30 = *a2;
    }
    if (v27 >= 0) {
      size_t v31 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v31 = (size_t)a1[1];
    }
    if (v27 >= 0) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = *a1;
    }
    if (v31 >= v29) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v31;
    }
    int v34 = memcmp(v30, v32, v33);
    BOOL v35 = v29 < v31;
    if (v34) {
      BOOL v35 = v34 < 0;
    }
    if (!v35) {
      return 1;
    }
    uint64_t v36 = a1[2];
    long long v37 = *(_OWORD *)a1;
    size_t v38 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
    return 2;
  }
  return 0;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, const void **a2)
{
  uint64_t v2 = a2;
  v58 = a1[2];
  long long v57 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v4 = *((char *)a2 - 1);
  if (SHIBYTE(v58) >= 0) {
    size_t v5 = HIBYTE(v58);
  }
  else {
    size_t v5 = *((void *)&v57 + 1);
  }
  if (SHIBYTE(v58) >= 0) {
    int v6 = &v57;
  }
  else {
    int v6 = (long long *)v57;
  }
  if (v4 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 - 1);
  }
  else {
    size_t v7 = (size_t)*(a2 - 2);
  }
  if (v4 >= 0) {
    size_t v8 = a2 - 3;
  }
  else {
    size_t v8 = (const void **)*(a2 - 3);
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  BOOL v11 = v5 < v7;
  if (v10) {
    BOOL v11 = v10 < 0;
  }
  if (v11)
  {
    size_t v12 = a1 + 3;
    do
    {
      int v13 = *((char *)v12 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v14 = (size_t)v12[1];
      }
      if (v13 >= 0) {
        int v15 = v12;
      }
      else {
        int v15 = *v12;
      }
      if (v14 >= v5) {
        size_t v16 = v5;
      }
      else {
        size_t v16 = v14;
      }
      int v17 = memcmp(v6, v15, v16);
      BOOL v18 = v5 < v14;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      v12 += 3;
    }
    while (!v18);
    int v19 = v12 - 3;
  }
  else
  {
    BOOL v20 = a1 + 3;
    do
    {
      int v19 = v20;
      if (v20 >= v2) {
        break;
      }
      int v21 = *((char *)v20 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        size_t v22 = (size_t)v20[1];
      }
      if (v21 >= 0) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = *v20;
      }
      if (v22 >= v5) {
        size_t v24 = v5;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v6, v23, v24);
      BOOL v26 = v25 < 0;
      if (!v25) {
        BOOL v26 = v5 < v22;
      }
      BOOL v20 = v19 + 3;
    }
    while (!v26);
  }
  if (v19 < v2)
  {
    int v27 = v2 - 3;
    do
    {
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        size_t v29 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        size_t v29 = (size_t)v27[1];
      }
      if (v28 >= 0) {
        long long v30 = v27;
      }
      else {
        long long v30 = *v27;
      }
      if (v29 >= v5) {
        size_t v31 = v5;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(v6, v30, v31);
      BOOL v33 = v5 < v29;
      if (v32) {
        BOOL v33 = v32 < 0;
      }
      v27 -= 3;
    }
    while (v33);
    uint64_t v2 = v27 + 3;
  }
  for (; v19 < v2; uint64_t v2 = v46 + 3)
  {
    long long v34 = *(_OWORD *)v19;
    v60 = v19[2];
    long long v59 = v34;
    long long v35 = *(_OWORD *)v2;
    v19[2] = v2[2];
    *(_OWORD *)int v19 = v35;
    uint64_t v36 = v19 + 3;
    long long v37 = v59;
    v2[2] = v60;
    *(_OWORD *)uint64_t v2 = v37;
    if (SHIBYTE(v58) >= 0) {
      size_t v38 = HIBYTE(v58);
    }
    else {
      size_t v38 = *((void *)&v57 + 1);
    }
    if (SHIBYTE(v58) >= 0) {
      unint64_t v39 = &v57;
    }
    else {
      unint64_t v39 = (long long *)v57;
    }
    do
    {
      int v40 = *((char *)v36 + 23);
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v36 + 23);
      }
      else {
        size_t v41 = (size_t)v36[1];
      }
      if (v40 >= 0) {
        size_t v42 = v36;
      }
      else {
        size_t v42 = *v36;
      }
      if (v41 >= v38) {
        size_t v43 = v38;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v39, v42, v43);
      BOOL v45 = v38 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      v36 += 3;
    }
    while (!v45);
    int v19 = v36 - 3;
    size_t v46 = v2 - 3;
    do
    {
      int v47 = *((char *)v46 + 23);
      if (v47 >= 0) {
        size_t v48 = *((unsigned __int8 *)v46 + 23);
      }
      else {
        size_t v48 = (size_t)v46[1];
      }
      if (v47 >= 0) {
        int v49 = v46;
      }
      else {
        int v49 = *v46;
      }
      if (v48 >= v38) {
        size_t v50 = v38;
      }
      else {
        size_t v50 = v48;
      }
      int v51 = memcmp(v39, v49, v50);
      BOOL v52 = v38 < v48;
      if (v51) {
        BOOL v52 = v51 < 0;
      }
      v46 -= 3;
    }
    while (v52);
  }
  uint64_t v53 = (void **)(v19 - 3);
  if (v19 - 3 == a1)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*v53);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v54 = *(_OWORD *)v53;
    a1[2] = *(v19 - 1);
    *(_OWORD *)a1 = v54;
    *((unsigned char *)v19 - 1) = 0;
    *((unsigned char *)v19 - 24) = 0;
  }
  long long v55 = v57;
  *(v19 - 1) = v58;
  *(_OWORD *)uint64_t v53 = v55;
  return v19;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v57 = *((void *)a1 + 2);
  unint64_t v5 = v57;
  long long v56 = *a1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  size_t v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = *((void *)&v56 + 1);
  }
  if ((v6 & 0x80u) == 0) {
    size_t v8 = &v56;
  }
  else {
    size_t v8 = (long long *)v56;
  }
  do
  {
    int v9 = *((char *)a1 + v4 + 47);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + v4 + 47);
    }
    else {
      size_t v10 = *(void *)((char *)a1 + v4 + 32);
    }
    if (v9 >= 0) {
      BOOL v11 = (char *)a1 + v4 + 24;
    }
    else {
      BOOL v11 = *(char **)((char *)a1 + v4 + 24);
    }
    if (v7 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v7;
    }
    int v13 = memcmp(v11, v8, v12);
    BOOL v14 = v10 < v7;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    v4 += 24;
  }
  while (v14);
  unint64_t v15 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    size_t v24 = (const void **)(a2 - 24);
    while (1)
    {
      unint64_t v23 = (unint64_t)(v24 + 3);
      if (v15 >= (unint64_t)(v24 + 3)) {
        break;
      }
      int v25 = *((char *)v24 + 23);
      if (v25 >= 0) {
        size_t v26 = *((unsigned __int8 *)v24 + 23);
      }
      else {
        size_t v26 = (size_t)v24[1];
      }
      if (v25 >= 0) {
        int v27 = v24;
      }
      else {
        int v27 = *v24;
      }
      if (v7 >= v26) {
        size_t v28 = v26;
      }
      else {
        size_t v28 = v7;
      }
      int v29 = memcmp(v27, v8, v28);
      BOOL v30 = v26 < v7;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      v24 -= 3;
      if (v30)
      {
        unint64_t v23 = (unint64_t)(v24 + 3);
        break;
      }
    }
  }
  else
  {
    size_t v16 = (const void **)(a2 - 24);
    do
    {
      int v17 = *((char *)v16 + 23);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)v16 + 23);
      }
      else {
        size_t v18 = (size_t)v16[1];
      }
      if (v17 >= 0) {
        int v19 = v16;
      }
      else {
        int v19 = *v16;
      }
      if (v7 >= v18) {
        size_t v20 = v18;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v19, v8, v20);
      BOOL v22 = v18 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      v16 -= 3;
    }
    while (!v22);
    unint64_t v23 = (unint64_t)(v16 + 3);
  }
  if (v15 >= v23)
  {
    unint64_t v31 = v15;
    unint64_t v52 = v15 - 24;
    if ((long long *)(v15 - 24) != a1)
    {
LABEL_84:
      if (*((char *)a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v53 = *(_OWORD *)v52;
      *((void *)a1 + 2) = *(void *)(v52 + 16);
      *a1 = v53;
      *(unsigned char *)(v31 - 1) = 0;
      *(unsigned char *)(v31 - 24) = 0;
      goto LABEL_90;
    }
  }
  else
  {
    unint64_t v31 = v15;
    int v32 = (const void **)v23;
    do
    {
      long long v33 = *(_OWORD *)v31;
      long long v59 = *(const void **)(v31 + 16);
      long long v58 = v33;
      long long v34 = *(_OWORD *)v32;
      *(void *)(v31 + 16) = v32[2];
      *(_OWORD *)unint64_t v31 = v34;
      long long v35 = (const void **)(v31 + 24);
      long long v36 = v58;
      v32[2] = v59;
      *(_OWORD *)int v32 = v36;
      if (v57 >= 0) {
        size_t v37 = HIBYTE(v57);
      }
      else {
        size_t v37 = *((void *)&v56 + 1);
      }
      if (v57 >= 0) {
        size_t v38 = &v56;
      }
      else {
        size_t v38 = (long long *)v56;
      }
      do
      {
        int v39 = *((char *)v35 + 23);
        if (v39 >= 0) {
          size_t v40 = *((unsigned __int8 *)v35 + 23);
        }
        else {
          size_t v40 = (size_t)v35[1];
        }
        if (v39 >= 0) {
          size_t v41 = v35;
        }
        else {
          size_t v41 = *v35;
        }
        if (v37 >= v40) {
          size_t v42 = v40;
        }
        else {
          size_t v42 = v37;
        }
        int v43 = memcmp(v41, v38, v42);
        BOOL v44 = v40 < v37;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        v35 += 3;
      }
      while (v44);
      unint64_t v31 = (unint64_t)(v35 - 3);
      BOOL v45 = v32 - 3;
      do
      {
        int v46 = *((char *)v45 + 23);
        if (v46 >= 0) {
          size_t v47 = *((unsigned __int8 *)v45 + 23);
        }
        else {
          size_t v47 = (size_t)v45[1];
        }
        if (v46 >= 0) {
          size_t v48 = v45;
        }
        else {
          size_t v48 = *v45;
        }
        if (v37 >= v47) {
          size_t v49 = v47;
        }
        else {
          size_t v49 = v37;
        }
        int v50 = memcmp(v48, v38, v49);
        BOOL v51 = v47 < v37;
        if (v50) {
          BOOL v51 = v50 < 0;
        }
        v45 -= 3;
      }
      while (!v51);
      int v32 = v45 + 3;
    }
    while (v31 < (unint64_t)v32);
    unint64_t v52 = v31 - 24;
    if ((long long *)(v31 - 24) != a1) {
      goto LABEL_84;
    }
  }
  if (*(char *)(v31 - 1) < 0) {
    operator delete(*(void **)v52);
  }
LABEL_90:
  long long v54 = v56;
  *(void *)(v52 + 16) = v57;
  *(_OWORD *)unint64_t v52 = v54;
  return v52;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v6 = a2 - 3;
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 1);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      if (v8 >= 0) {
        size_t v10 = a2 - 3;
      }
      else {
        size_t v10 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15)
      {
        size_t v16 = *(const void **)(a1 + 16);
        long long v17 = *(_OWORD *)a1;
        size_t v18 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v18;
        *(_OWORD *)size_t v6 = v17;
        v6[2] = v16;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
      return 1;
    default:
      int v19 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      size_t v20 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    int v24 = *((char *)v19 + 23);
    int v25 = *((char *)v20 + 23);
    if (v25 >= 0) {
      size_t v26 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      size_t v26 = (size_t)v20[1];
    }
    if (v25 >= 0) {
      int v27 = v20;
    }
    else {
      int v27 = *v20;
    }
    if (v24 >= 0) {
      size_t v28 = *((unsigned __int8 *)v19 + 23);
    }
    else {
      size_t v28 = (size_t)v19[1];
    }
    if (v24 >= 0) {
      int v29 = v19;
    }
    else {
      int v29 = *v19;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      long long v46 = *(_OWORD *)v20;
      size_t v47 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *size_t v20 = 0;
      uint64_t v33 = v21;
      do
      {
        uint64_t v34 = a1 + v33;
        *(_OWORD *)(v34 + 72) = *(_OWORD *)(a1 + v33 + 48);
        *(void *)(v34 + 88) = *(void *)(a1 + v33 + 64);
        *(unsigned char *)(v34 + 71) = 0;
        *(unsigned char *)(v34 + 48) = 0;
        if (v33 == -48)
        {
          uint64_t v23 = a1;
          goto LABEL_24;
        }
        size_t v37 = *(const void **)(v34 + 24);
        uint64_t v35 = v34 + 24;
        long long v36 = v37;
        int v38 = *(char *)(v35 + 23);
        if (SHIBYTE(v47) >= 0) {
          size_t v39 = HIBYTE(v47);
        }
        else {
          size_t v39 = *((void *)&v46 + 1);
        }
        if (SHIBYTE(v47) >= 0) {
          size_t v40 = &v46;
        }
        else {
          size_t v40 = (long long *)v46;
        }
        if (v38 >= 0) {
          size_t v41 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          size_t v41 = *(void *)(v35 + 8);
        }
        if (v38 >= 0) {
          size_t v42 = (const void *)v35;
        }
        else {
          size_t v42 = v36;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v33 -= 24;
      }
      while (v45);
      uint64_t v23 = a1 + v33 + 72;
LABEL_24:
      *(_OWORD *)uint64_t v23 = v46;
      *(void *)(v23 + 16) = v47;
      if (++v22 == 8) {
        return v20 + 3 == a2;
      }
    }
    int v19 = v20;
    v21 += 24;
    v20 += 3;
    if (v20 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    size_t v13 = a3;
  }
  else {
    size_t v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    size_t v18 = (const void *)*((void *)a3 + 2);
    long long v19 = *a3;
    size_t v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    int v21 = *((char *)a2 + 23);
    int v22 = *((char *)a3 + 23);
    if (v22 >= 0) {
      size_t v23 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v23 = *((void *)a3 + 1);
    }
    if (v22 >= 0) {
      int v24 = a3;
    }
    else {
      int v24 = *(const void **)a3;
    }
    if (v21 >= 0) {
      size_t v25 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v25 = *((void *)a2 + 1);
    }
    if (v21 >= 0) {
      size_t v26 = a2;
    }
    else {
      size_t v26 = *(const void **)a2;
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v23 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (v29)
    {
      uint64_t v30 = *((void *)a2 + 2);
      long long v31 = *a2;
      uint64_t v32 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v32;
      *a3 = v31;
      *((void *)a3 + 2) = v30;
      int v33 = *(char *)(a1 + 23);
      int v34 = *((char *)a2 + 23);
      if (v34 >= 0) {
        size_t v35 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v35 = *((void *)a2 + 1);
      }
      if (v34 >= 0) {
        long long v36 = a2;
      }
      else {
        long long v36 = *(const void **)a2;
      }
      if (v33 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v37 = *(void *)(a1 + 8);
      }
      if (v33 >= 0) {
        int v38 = (const void *)a1;
      }
      else {
        int v38 = *(const void **)a1;
      }
      if (v37 >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = v37;
      }
      int v40 = memcmp(v36, v38, v39);
      BOOL v41 = v35 < v37;
      if (v40) {
        BOOL v41 = v40 < 0;
      }
      if (v41)
      {
        uint64_t v42 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v43 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(void *)(a1 + 16) = v43;
        *a2 = (__int128)result;
        *((void *)a2 + 2) = v42;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    size_t v13 = a5;
  }
  else {
    size_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v14 = *((void *)a4 + 1);
  }
  if (v10 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = *(long long **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    size_t v20 = (const void *)*((void *)a4 + 2);
    long long v21 = *a4;
    int v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    int v23 = *(char *)(a3 + 23);
    int v24 = *((char *)a4 + 23);
    if (v24 >= 0) {
      size_t v25 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v25 = *((void *)a4 + 1);
    }
    if (v24 >= 0) {
      size_t v26 = a4;
    }
    else {
      size_t v26 = *(long long **)a4;
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v27 = *(void *)(a3 + 8);
    }
    if (v23 >= 0) {
      int v28 = (const void *)a3;
    }
    else {
      int v28 = *(const void **)a3;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      uint64_t v32 = *(void *)(a3 + 16);
      long long v33 = *(_OWORD *)a3;
      uint64_t v34 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(void *)(a3 + 16) = v34;
      *a4 = v33;
      *((void *)a4 + 2) = v32;
      int v35 = *(char *)(a2 + 23);
      int v36 = *(char *)(a3 + 23);
      if (v36 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v37 = *(void *)(a3 + 8);
      }
      if (v36 >= 0) {
        int v38 = (const void *)a3;
      }
      else {
        int v38 = *(const void **)a3;
      }
      if (v35 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v39 = *(void *)(a2 + 8);
      }
      if (v35 >= 0) {
        int v40 = (const void *)a2;
      }
      else {
        int v40 = *(const void **)a2;
      }
      if (v39 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v39;
      }
      int v42 = memcmp(v38, v40, v41);
      BOOL v43 = v37 < v39;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (v43)
      {
        uint64_t v44 = *(void *)(a2 + 16);
        long long v45 = *(_OWORD *)a2;
        uint64_t v46 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v46;
        *(_OWORD *)a3 = v45;
        *(void *)(a3 + 16) = v44;
        int v47 = *(char *)(a1 + 23);
        int v48 = *(char *)(a2 + 23);
        if (v48 >= 0) {
          size_t v49 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v49 = *(void *)(a2 + 8);
        }
        if (v48 >= 0) {
          int v50 = (const void *)a2;
        }
        else {
          int v50 = *(const void **)a2;
        }
        if (v47 >= 0) {
          size_t v51 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v51 = *(void *)(a1 + 8);
        }
        if (v47 >= 0) {
          unint64_t v52 = (const void *)a1;
        }
        else {
          unint64_t v52 = *(const void **)a1;
        }
        if (v51 >= v49) {
          size_t v53 = v49;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v50, v52, v53);
        BOOL v55 = v49 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (v55)
        {
          uint64_t v56 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v57 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v57;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v67 = v4;
    uint64_t v68 = v5;
    int v7 = a4;
    uint64_t v8 = a1;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v10 = a3;
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      size_t v12 = (__n128 *)(a1 + 24 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        size_t v25 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        signed __int8 v14 = v12[2].n128_i8[15];
        signed __int8 v15 = v12[1].n128_i8[7];
        v61 = (__n128 *)v12[1].n128_u64[1];
        v62 = (__n128 *)v12->n128_u64[0];
        if (v15 >= 0) {
          size_t v16 = v12[1].n128_u8[7];
        }
        else {
          size_t v16 = v12->n128_u64[1];
        }
        if (v15 >= 0) {
          int v17 = (const void *)(a1 + 24 * v11);
        }
        else {
          int v17 = (const void *)v12->n128_u64[0];
        }
        unint64_t v18 = v6 >> 1;
        if (v14 >= 0) {
          size_t v19 = v12[2].n128_u8[15];
        }
        else {
          size_t v19 = v12[2].n128_u64[0];
        }
        if (v14 >= 0) {
          size_t v20 = &v12[1].n128_i8[8];
        }
        else {
          size_t v20 = (__int8 *)v12[1].n128_u64[1];
        }
        if (v19 >= v16) {
          size_t v21 = v16;
        }
        else {
          size_t v21 = v19;
        }
        int v22 = memcmp(v17, v20, v21);
        BOOL v23 = v16 >= v19;
        uint64_t v9 = v18;
        BOOL v24 = !v23;
        if (v22) {
          BOOL v24 = v22 < 0;
        }
        BOOL v48 = !v24;
        size_t v25 = v62;
        if (!v48)
        {
          size_t v25 = v61;
          size_t v12 = (__n128 *)((char *)v12 + 24);
          uint64_t v11 = v13;
        }
      }
      int v26 = v7[1].n128_i8[7];
      int v27 = v12[1].n128_i8[7];
      if (v27 >= 0) {
        size_t v28 = v12[1].n128_u8[7];
      }
      else {
        size_t v28 = v12->n128_u64[1];
      }
      if (v27 >= 0) {
        size_t v29 = v12;
      }
      else {
        size_t v29 = v25;
      }
      if (v26 >= 0) {
        size_t v30 = v7[1].n128_u8[7];
      }
      else {
        size_t v30 = v7->n128_u64[1];
      }
      if (v26 >= 0) {
        BOOL v31 = v7;
      }
      else {
        BOOL v31 = (__n128 *)v7->n128_u64[0];
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v29, v31, v32);
      BOOL v35 = v28 < v30;
      if (v33) {
        BOOL v35 = v33 < 0;
      }
      if (!v35)
      {
        __n128 v65 = *v7;
        int64_t v66 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        uint64_t v63 = v9;
        uint64_t v64 = v10;
        do
        {
          long long v58 = v12;
          __n128 v59 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          __n128 *v7 = v59;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v60 = (2 * v11) | 1;
          size_t v12 = (__n128 *)(v8 + 24 * v60);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            int v36 = v12[2].n128_i8[15];
            unint64_t v37 = v12[1].n128_u64[1];
            int v38 = v12[1].n128_i8[7];
            unint64_t v39 = v12->n128_u64[0];
            uint64_t v40 = v8;
            if (v38 >= 0) {
              size_t v41 = v12[1].n128_u8[7];
            }
            else {
              size_t v41 = v12->n128_u64[1];
            }
            if (v38 >= 0) {
              int v42 = v12;
            }
            else {
              int v42 = (__n128 *)v12->n128_u64[0];
            }
            if (v36 >= 0) {
              size_t v43 = v12[2].n128_u8[15];
            }
            else {
              size_t v43 = v12[2].n128_u64[0];
            }
            if (v36 >= 0) {
              uint64_t v44 = &v12[1].n128_i8[8];
            }
            else {
              uint64_t v44 = (__int8 *)v12[1].n128_u64[1];
            }
            if (v43 >= v41) {
              size_t v45 = v41;
            }
            else {
              size_t v45 = v43;
            }
            int v46 = memcmp(v42, v44, v45);
            BOOL v23 = v41 >= v43;
            uint64_t v8 = v40;
            BOOL v47 = !v23;
            if (v46) {
              BOOL v47 = v46 < 0;
            }
            BOOL v48 = !v47;
            if (v47) {
              size_t v49 = (__n128 *)v37;
            }
            else {
              size_t v49 = (__n128 *)v39;
            }
            if (!v48) {
              size_t v12 = (__n128 *)((char *)v12 + 24);
            }
            uint64_t v9 = v63;
            uint64_t v10 = v64;
            if (v48) {
              uint64_t v11 = v60;
            }
          }
          else
          {
            size_t v49 = (__n128 *)v12->n128_u64[0];
            uint64_t v11 = v60;
          }
          int v50 = v12[1].n128_i8[7];
          unint64_t v51 = v50 >= 0 ? v12[1].n128_u8[7] : v12->n128_u64[1];
          unint64_t v52 = v50 >= 0 ? v12 : v49;
          unint64_t v53 = v66 >= 0 ? HIBYTE(v66) : v65.n128_u64[1];
          int v54 = v66 >= 0 ? &v65 : (__n128 *)v65.n128_u64[0];
          size_t v55 = v53 >= v51 ? v51 : v53;
          int v56 = memcmp(v52, v54, v55);
          BOOL v57 = v51 < v53;
          if (v56) {
            BOOL v57 = v56 < 0;
          }
          int v7 = v58;
        }
        while (!v57);
        __n128 result = v65;
        v58[1].n128_u64[0] = v66;
        __n128 *v58 = result;
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v24 = *(void *)a1;
    *(void *)int v27 = *(void *)(a1 + 8);
    *(void *)&v27[7] = *(void *)(a1 + 15);
    char v25 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1;
    do
    {
      uint64_t v9 = v7 + 24 * v5 + 24;
      uint64_t v10 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        int v12 = *(char *)(v9 + 47);
        int v13 = *(char *)(v9 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          size_t v14 = *(void *)(v9 + 8);
        }
        if (v13 >= 0) {
          signed __int8 v15 = (const void *)v9;
        }
        else {
          signed __int8 v15 = *(const void **)v9;
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v9 + 47);
        }
        else {
          size_t v16 = *(void *)(v9 + 32);
        }
        if (v12 >= 0) {
          int v17 = (const void *)(v9 + 24);
        }
        else {
          int v17 = *(const void **)(v9 + 24);
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v15, v17, v18);
        BOOL v20 = v14 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (v20)
        {
          v9 += 24;
          uint64_t v5 = v11;
        }
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)v9;
      *(void *)(v7 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v9 + 23) = 0;
      *(unsigned char *)uint64_t v9 = 0;
      uint64_t v7 = v9;
    }
    while (v5 <= v6);
    if (v9 == a2 - 24)
    {
      *(void *)uint64_t v9 = v24;
      *(void *)(v9 + 8) = *(void *)v27;
      *(void *)(v9 + 15) = *(void *)&v27[7];
      *(unsigned char *)(v9 + 23) = v25;
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 - 24);
      *(void *)(v9 + 16) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v9 = v21;
      *(void *)(a2 - 24) = v24;
      *(void *)(a2 - 16) = *(void *)v27;
      *(void *)(a2 - 9) = *(void *)&v27[7];
      *(unsigned char *)(a2 - 1) = v25;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v9 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 24 - a1) >> 3));
    }
  }
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v35 = v4;
    uint64_t v36 = v5;
    unint64_t v8 = v6 >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * (v6 >> 1));
    uint64_t v10 = (long long *)(a2 - 24);
    int v11 = *(char *)(a2 - 1);
    int v12 = *((char *)v9 + 23);
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      size_t v13 = *((void *)v9 + 1);
    }
    if (v12 >= 0) {
      size_t v14 = (const void *)(a1 + 24 * (v6 >> 1));
    }
    else {
      size_t v14 = *(const void **)v9;
    }
    if (v11 >= 0) {
      size_t v15 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      size_t v15 = *(void *)(a2 - 16);
    }
    if (v11 >= 0) {
      size_t v16 = (const void *)(a2 - 24);
    }
    else {
      size_t v16 = *(const void **)(a2 - 24);
    }
    if (v15 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v15;
    }
    int v18 = memcmp(v14, v16, v17);
    BOOL v20 = v13 < v15;
    if (v18) {
      BOOL v20 = v18 < 0;
    }
    if (v20)
    {
      unint64_t v34 = *((void *)v10 + 2);
      unint64_t v21 = v34;
      long long v33 = *v10;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      unint64_t v22 = HIBYTE(v21);
      if ((v22 & 0x80u) == 0) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = *((void *)&v33 + 1);
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v24 = &v33;
      }
      else {
        uint64_t v24 = (long long *)v33;
      }
      do
      {
        char v25 = v9;
        long long v26 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v26;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        int v27 = *((char *)v9 + 23);
        unint64_t v28 = v27 >= 0 ? *((unsigned __int8 *)v9 + 23) : *((void *)v9 + 1);
        size_t v29 = v27 >= 0 ? (const void *)(a1 + 24 * v8) : *(const void **)v9;
        size_t v30 = v23 >= v28 ? v28 : v23;
        int v31 = memcmp(v29, v24, v30);
        BOOL v32 = v28 < v23;
        if (v31) {
          BOOL v32 = v31 < 0;
        }
        uint64_t v10 = v25;
      }
      while (v32);
      double result = *(double *)&v33;
      long long *v25 = v33;
      *((void *)v25 + 2) = v34;
    }
  }
  return result;
}

char *absl::lts_2020_02_25::strings_internal::JoinAlgorithm<std::__wrap_iter<std::string const*>,void>@<X0>(char *__src@<X0>, char *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (__src == a2) {
    return __src;
  }
  uint64_t v8 = (uint64_t)__src;
  uint64_t v9 = a5;
  if (__src[23] < 0)
  {
    unint64_t v10 = *((void *)__src + 1);
    int v11 = __src + 24;
    if (__src + 24 == a2) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v10 = __src[23];
    int v11 = __src + 24;
    if (__src + 24 == a2) {
      goto LABEL_10;
    }
  }
  int v12 = v11;
  do
  {
    while ((v12[23] & 0x80000000) == 0)
    {
      v10 += a4 + v12[23];
      v12 += 24;
      if (v12 == a2) {
        goto LABEL_10;
      }
    }
    v10 += a4 + *((void *)v12 + 1);
    v12 += 24;
  }
  while (v12 != a2);
LABEL_10:
  if (v10)
  {
    if (v10 >= 0x17
      && (std::string::__grow_by(v9, 0x16uLL, v10 - 22, 0, 0, 0, 0),
          v9->__r_.__value_.__l.__size_ = 0,
          SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0))
    {
      size_t v13 = (std::string *)v9->__r_.__value_.__r.__words[0];
      v9->__r_.__value_.__l.__size_ = v10;
    }
    else
    {
      *((unsigned char *)&v9->__r_.__value_.__s + 23) = v10 & 0x7F;
      size_t v13 = v9;
    }
    v13->__r_.__value_.__s.__data_[v10] = 0;
    if ((v9->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
    }
    if (*(char *)(v8 + 23) < 0)
    {
      __src = (char *)memcpy(v9, *(const void **)v8, *(void *)(v8 + 8));
      LODWORD(v14) = *(char *)(v8 + 23);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_18:
        uint64_t v14 = v14;
        if (v11 == a2) {
          return __src;
        }
        goto LABEL_22;
      }
    }
    else
    {
      __src = (char *)memcpy(v9, (const void *)v8, *(unsigned __int8 *)(v8 + 23));
      LODWORD(v14) = *(char *)(v8 + 23);
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t v14 = *(void *)(v8 + 8);
    if (v11 != a2)
    {
LABEL_22:
      size_t v15 = (char *)v9 + v14;
      while (1)
      {
        memcpy(v15, a3, a4);
        if (v11[23] < 0)
        {
          size_t v16 = &v15[a4];
          __src = (char *)memcpy(v16, *(const void **)v11, *((void *)v11 + 1));
          int v17 = v11[23];
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_23;
          }
LABEL_28:
          size_t v15 = &v16[*((void *)v11 + 1)];
          v11 += 24;
          if (v11 == a2) {
            return __src;
          }
        }
        else
        {
          size_t v16 = &v15[a4];
          __src = (char *)memcpy(v16, v11, v11[23]);
          int v17 = v11[23];
          if (v17 < 0) {
            goto LABEL_28;
          }
LABEL_23:
          size_t v15 = &v16[v17];
          v11 += 24;
          if (v11 == a2) {
            return __src;
          }
        }
      }
    }
  }
  return __src;
}

void sub_23CC9D6AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::SolutionObservers>::~Delete(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26F0C1D78;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = (void *)*v2;
    if (*v2)
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = (void *)*v2;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 4;
        uint64_t v7 = v4 - 4;
        do
        {
          uint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        uint64_t v5 = (void *)*v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x23ECF2BC0](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SolutionObservers>::~Delete(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  *a1 = &unk_26F0C1D78;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = (void *)*v1;
    if (*v1)
    {
      uint64_t v3 = (void *)v1[1];
      uint64_t v4 = (void *)*v1;
      if (v3 != v2)
      {
        uint64_t v5 = v3 - 4;
        unint64_t v6 = v3 - 4;
        do
        {
          BOOL v8 = (void *)v6[3];
          if (v6 == v8)
          {
            (*(void (**)(void *))(*v6 + 32))(v6);
          }
          else if (v8)
          {
            (*(void (**)(void *))(*v8 + 40))(v8);
          }
          v5 -= 4;
          BOOL v7 = v6 == v2;
          v6 -= 4;
        }
        while (!v7);
        uint64_t v4 = (void *)*v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x23ECF2BC0](v1, 0x20C40960023A9);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C1DB0;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 1));
  return a1;
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C1DB0;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 1));

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = (const operations_research::sat::SatParameters *)(a1 + 8);
  uint64_t v2 = operator new(0x248uLL);
  void *v2 = &unk_26F0C1DB0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v2 + 1), v1);
  return v2;
}

void sub_23CC9DA0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C1DB0;
  return operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(a2 + 1), (const operations_research::sat::SatParameters *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::destroy_deallocate(uint64_t a1)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, operations_research::sat::SatParameters *a3@<X8>)
{
  uint64_t v4 = (const operations_research::sat::SatParameters *)(a1 + 8);
  uint64_t v5 = *a2;
  unint64_t v6 = (operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*a2);
  operations_research::sat::SatParameters::CopyFrom(v6, v4);
  BOOL v7 = (operations_research::sat::SatParameters **)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v5);
  operations_research::sat::SatSolver::SetParameters(v7, v4);

  return operations_research::sat::SatParameters::SatParameters(a3, v4);
}

uint64_t std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16NewSatParametersERKNS0_13SatParametersEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0,std::allocator<operations_research::sat::NewSatParameters(operations_research::sat::SatParameters const&)::$_0>,operations_research::sat::SatParameters ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
      {
        uint64_t v6 = *v4 + v2;
        if (*(void *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 32) = 0;
        }
        uint64_t v5 = *(void **)(v6 + 40);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(void *)(a1 + 24));
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v4 = 0;
  }
  BOOL v7 = *(void **)(a1 + 32);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
      {
        uint64_t v6 = *v4 + v2;
        if (*(void *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 32) = 0;
        }
        uint64_t v5 = *(void **)(v6 + 40);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(void *)(a1 + 24));
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    void *v4 = 0;
  }
  BOOL v7 = *(void **)(a1 + 32);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  return a1;
}

void operations_research::sat::DomainDeductions::~DomainDeductions(operations_research::sat::DomainDeductions *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)((char *)this + 136);
    do
    {
      if ((*(char *)(*((void *)this + 16) + v4) & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        if (*(unsigned char *)(v6 + 8))
        {
          operator delete(*(void **)(v6 + 16));
          uint64_t v2 = *((void *)this + 19);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*((void **)this + 16));
    *((void *)this + 16) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 21) = 0;
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    *uint64_t v5 = 0;
  }
  BOOL v7 = (void *)*((void *)this + 20);
  if (v7) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  }
  uint64_t v8 = *((void *)this + 13);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 14);
    unint64_t v10 = (void *)*((void *)this + 13);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 14);
      do
      {
        size_t v13 = *(void **)(v11 - 24);
        v11 -= 24;
        int v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      unint64_t v10 = (void *)*((void *)this + 13);
    }
    *((void *)this + 14) = v8;
    operator delete(v10);
  }
  uint64_t v14 = (void *)*((void *)this + 10);
  if (v14)
  {
    *((void *)this + 11) = v14;
    operator delete(v14);
  }
  size_t v15 = (void *)*((void *)this + 4);
  if (v15)
  {
    *((void *)this + 5) = v15;
    operator delete(v15);
  }
  size_t v16 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v16;
    operator delete(v16);
  }
}

void operations_research::sat::PresolveContext::~PresolveContext(void **this)
{
  if (this[174])
  {
    operator delete(this[171]);
    this[171] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[176] = 0;
    this[172] = 0;
    this[174] = 0;
    this[173] = 0;
  }
  uint64_t v2 = this[175];
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  uint64_t v3 = this[168];
  if (v3)
  {
    this[169] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[165];
  if (v4)
  {
    this[166] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[162];
  if (v5)
  {
    this[163] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[159];
  if (v6)
  {
    this[160] = v6;
    operator delete(v6);
  }
  BOOL v7 = this[156];
  if (v7)
  {
    this[157] = v7;
    operator delete(v7);
  }
  uint64_t v8 = this[153];
  if (v8)
  {
    this[154] = v8;
    operator delete(v8);
  }
  uint64_t v9 = this[149];
  if (v9)
  {
    this[150] = v9;
    operator delete(v9);
  }
  unint64_t v10 = this[146];
  if (v10)
  {
    this[147] = v10;
    operator delete(v10);
  }
  uint64_t v11 = this[143];
  if (v11)
  {
    this[144] = v11;
    operator delete(v11);
  }
  int v12 = this[140];
  if (v12)
  {
    this[141] = v12;
    operator delete(v12);
  }
  size_t v13 = this[137];
  if (v13)
  {
    this[138] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (char *)this[133];
  if (v14)
  {
    size_t v15 = 0;
    uint64_t v16 = 8;
    do
    {
      if ((v15[(void)this[130]] & 0x80000000) == 0)
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this[131] + v16);
        uint64_t v14 = (char *)this[133];
      }
      ++v15;
      v16 += 56;
    }
    while (v15 != v14);
    operator delete(this[130]);
    this[130] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[135] = 0;
    this[132] = 0;
    this[133] = 0;
    this[131] = 0;
  }
  int v17 = this[134];
  if (v17) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  }
  int v18 = (char *)this[127];
  if (v18)
  {
    int v19 = 0;
    uint64_t v20 = 8;
    do
    {
      if ((v19[(void)this[124]] & 0x80000000) == 0)
      {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)this[125] + v20);
        int v18 = (char *)this[127];
      }
      ++v19;
      v20 += 56;
    }
    while (v19 != v18);
    operator delete(this[124]);
    this[124] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[129] = 0;
    this[126] = 0;
    this[127] = 0;
    this[125] = 0;
  }
  unint64_t v21 = this[128];
  if (v21) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v21);
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::~raw_hash_set((uint64_t)(this + 118));
  std::deque<int>::~deque[abi:ne180100]((uint64_t)(this + 112));
  if (this[109])
  {
    operator delete(this[106]);
    this[106] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[111] = 0;
    this[107] = 0;
    this[109] = 0;
    this[108] = 0;
  }
  unint64_t v22 = this[110];
  if (v22) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v22);
  }
  if (this[103])
  {
    operator delete(this[100]);
    this[100] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[105] = 0;
    this[101] = 0;
    this[103] = 0;
    this[102] = 0;
  }
  unint64_t v23 = this[104];
  if (v23) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v23);
  }
  uint64_t v24 = this[97];
  if (v24)
  {
    this[98] = v24;
    operator delete(v24);
  }
  char v25 = (char *)this[94];
  if (v25)
  {
    long long v26 = (char *)this[95];
    int v27 = this[94];
    if (v26 != v25)
    {
      unint64_t v28 = (char *)this[95];
      do
      {
        size_t v30 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        size_t v29 = v30;
        if (v30)
        {
          *((void *)v26 - 2) = v29;
          operator delete(v29);
        }
        long long v26 = v28;
      }
      while (v28 != v25);
      int v27 = this[94];
    }
    this[95] = v25;
    operator delete(v27);
  }
  int v31 = this[91];
  if (v31)
  {
    this[92] = v31;
    operator delete(v31);
  }
  BOOL v32 = this[88];
  if (v32)
  {
    this[89] = v32;
    operator delete(v32);
  }
  long long v33 = (void **)this[85];
  if (v33)
  {
    unint64_t v34 = (void **)this[86];
    uint64_t v35 = this[85];
    if (v34 != v33)
    {
      do
      {
        if (*(v34 - 3))
        {
          operator delete(*(v34 - 6));
          *(v34 - 1) = 0;
          *(v34 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v34 - 5) = 0;
          *(v34 - 4) = 0;
          *(v34 - 3) = 0;
        }
        uint64_t v36 = *(v34 - 2);
        if (v36) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v36);
        }
        v34 -= 6;
      }
      while (v34 != v33);
      uint64_t v35 = this[85];
    }
    this[86] = v33;
    operator delete(v35);
  }
  unint64_t v37 = (char *)this[82];
  if (v37)
  {
    int v38 = (char *)this[83];
    unint64_t v39 = this[82];
    if (v38 != v37)
    {
      uint64_t v40 = (char *)this[83];
      do
      {
        int v42 = (void *)*((void *)v40 - 3);
        v40 -= 24;
        size_t v41 = v42;
        if (v42)
        {
          *((void *)v38 - 2) = v41;
          operator delete(v41);
        }
        int v38 = v40;
      }
      while (v40 != v37);
      unint64_t v39 = this[82];
    }
    this[83] = v37;
    operator delete(v39);
  }
  if ((_BYTE)this[77]) {
    operator delete(this[78]);
  }
  size_t v43 = this[73];
  if (v43)
  {
    this[74] = v43;
    operator delete(v43);
  }
  if (this[70])
  {
    operator delete(this[67]);
    this[67] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[72] = 0;
    this[68] = 0;
    this[70] = 0;
    this[69] = 0;
  }
  uint64_t v44 = this[71];
  if (v44) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v44);
  }
  size_t v45 = (void **)this[64];
  if (v45)
  {
    int v46 = (void **)this[65];
    BOOL v47 = this[64];
    if (v46 != v45)
    {
      BOOL v48 = (void **)this[65];
      do
      {
        char v49 = *((unsigned char *)v48 - 24);
        v48 -= 3;
        if (v49) {
          operator delete(*(v46 - 2));
        }
        int v46 = v48;
      }
      while (v48 != v45);
      BOOL v47 = this[64];
    }
    this[65] = v45;
    operator delete(v47);
  }
  operations_research::sat::DomainDeductions::~DomainDeductions((operations_research::sat::DomainDeductions *)(this + 41));
  int v50 = this[38];
  if (v50)
  {
    this[39] = v50;
    operator delete(v50);
  }
  unint64_t v51 = this[32];
  if (v51)
  {
    this[33] = v51;
    operator delete(v51);
  }
  if (this[28])
  {
    operator delete(this[25]);
    this[30] = 0;
    this[25] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[26] = 0;
    this[27] = 0;
    this[28] = 0;
  }
  unint64_t v52 = this[29];
  if (v52) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v52);
  }
  unint64_t v53 = (void **)this[22];
  if (v53)
  {
    int v54 = (void **)this[23];
    size_t v55 = this[22];
    if (v54 != v53)
    {
      int v56 = (void **)this[23];
      do
      {
        char v57 = *((unsigned char *)v56 - 24);
        v56 -= 3;
        if (v57) {
          operator delete(*(v54 - 2));
        }
        int v54 = v56;
      }
      while (v56 != v53);
      size_t v55 = this[22];
    }
    this[23] = v53;
    operator delete(v55);
  }
  long long v58 = (void **)this[19];
  if (v58)
  {
    __n128 v59 = (void **)this[20];
    uint64_t v60 = this[19];
    if (v59 != v58)
    {
      v61 = (void **)this[20];
      do
      {
        char v62 = *((unsigned char *)v61 - 24);
        v61 -= 3;
        if (v62) {
          operator delete(*(v59 - 2));
        }
        __n128 v59 = v61;
      }
      while (v61 != v58);
      uint64_t v60 = this[19];
    }
    this[20] = v58;
    operator delete(v60);
  }
  uint64_t v63 = this[16];
  if (v63)
  {
    this[17] = v63;
    operator delete(v63);
  }
  uint64_t v64 = (char *)this[12];
  if (v64)
  {
    uint64_t v65 = 0;
    int64_t v66 = 0;
    uint64_t v67 = this + 10;
    do
    {
      if ((v66[(void)this[9]] & 0x80000000) == 0)
      {
        uint64_t v68 = *v67 + v65;
        if (*(char *)(v68 + 23) < 0)
        {
          operator delete(*(void **)v68);
          uint64_t v64 = (char *)this[12];
        }
      }
      ++v66;
      v65 += 32;
    }
    while (v66 != v64);
    operator delete(this[9]);
    this[9] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[14] = 0;
    this[11] = 0;
    this[12] = 0;
    *uint64_t v67 = 0;
  }
  v69 = this[13];
  if (v69) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v69);
  }
  v70 = (void **)this[3];
  if (v70)
  {
    v71 = (void **)this[4];
    v72 = this[3];
    if (v71 != v70)
    {
      do
      {
        if (*(v71 - 3))
        {
          operator delete(*(v71 - 6));
          *(v71 - 1) = 0;
          *(v71 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v71 - 5) = 0;
          *(v71 - 4) = 0;
          *(v71 - 3) = 0;
        }
        v73 = *(v71 - 2);
        if (v73) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v73);
        }
        v71 -= 6;
      }
      while (v71 != v70);
      v72 = this[3];
    }
    this[4] = v70;
    operator delete(v72);
  }
  v74 = (void **)*this;
  if (*this)
  {
    v75 = (void **)this[1];
    v76 = *this;
    if (v75 != v74)
    {
      do
      {
        if (*(v75 - 3))
        {
          operator delete(*(v75 - 6));
          *(v75 - 1) = 0;
          *(v75 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v75 - 5) = 0;
          *(v75 - 4) = 0;
          *(v75 - 3) = 0;
        }
        v77 = *(v75 - 2);
        if (v77) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v77);
        }
        v75 -= 6;
      }
      while (v75 != v74);
      v76 = *this;
    }
    this[1] = v74;
    operator delete(v76);
  }
}

void operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0::operator()()
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v13 = FLAGS_cp_model_dump_prefix;
  size_t v14 = strlen((const char *)FLAGS_cp_model_dump_prefix);
  v12[0] = "response.pbtxt";
  v12[1] = 14;
  absl::lts_2020_02_25::StrCat((uint64_t)&v13, (uint64_t)v12, &__p);
  v0 = google::LogMessage::LogMessage((google::LogMessage *)&v13, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2737);
  uint64_t v1 = (void *)google::LogMessage::stream(v0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Dumping response proto to '", 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"'.", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)&v13);
  std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  uint64_t v8 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v13 = (uint64_t)v8;
  size_t v14 = v7;
  file::SetTextProto(v6, 47802, &v10);
  if (v10)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2738);
    uint64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: (file::SetTextProto(file, final_response, file::Defaults())).ok() ", 80);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23CC9E664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F0C1E40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C1E40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()()
{
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1::operator()(uint64_t a1)
{
  google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2778);
  uint64_t v2 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
  uint64_t v3 = *(void *)(a1 + 8);
  if ((_UNKNOWN *)v3 == &operations_research::sat::_CpModelProto_default_instance_) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (const operations_research::sat::CpSolverResponse *)(*(void *)(v3 + 120) != 0);
  }
  operations_research::sat::CpSolverResponseStats(*(operations_research::sat **)a1, v4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)v8);
}

void sub_23CC9E88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C1EC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1EC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26F0C1F40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C1F40;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::operator()(void *a1, uint64_t *a2)
{
  uint64_t v72 = *a2;
  v79 = (void *)a1[5];
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[3];
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(v2);
  uint64_t v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v2);
  uint64_t v6 = (void **)v5[1];
  std::string::size_type v7 = (void **)v5[2];
  if (v7 == v6)
  {
    uint64_t v31 = v72;
    size_t v30 = a1;
    unint64_t v28 = v5;
    v5[5] = 0;
    unint64_t v39 = 0;
    goto LABEL_40;
  }
  unint64_t v8 = v5[4];
  unint64_t v9 = (unint64_t)v6[v8 / 0xAA] + 24 * (v8 % 0xAA);
  v71 = v5;
  v70 = v5 + 5;
  unint64_t v76 = (unint64_t)v6[(v5[5] + v8) / 0xAA] + 24 * ((v5[5] + v8) % 0xAA);
  if (v9 != v76)
  {
    uint64_t v10 = &v6[v8 / 0xAA];
    v74 = (unsigned int *)(v3 + 40);
    uint64_t v75 = v3;
    while (1)
    {
      uint64_t v11 = *(int **)(v3 + 56);
      v77 = v10;
      if (!v11) {
        break;
      }
      uint64_t v12 = *(int *)(v3 + 48);
      int v13 = *v11;
      if ((int)v12 < *v11)
      {
        *(_DWORD *)(v3 + 48) = v12 + 1;
        unint64_t v14 = *(void *)&v11[2 * v12 + 2];
        if (*(_DWORD *)(v14 + 60) != 3) {
          goto LABEL_8;
        }
        goto LABEL_16;
      }
      if (v13 == *(_DWORD *)(v3 + 52)) {
        goto LABEL_14;
      }
LABEL_15:
      int *v11 = v13 + 1;
      unint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v3 + 40));
      uint64_t v20 = *(void *)(v3 + 56);
      uint64_t v21 = *(int *)(v3 + 48);
      *(_DWORD *)(v3 + 48) = v21 + 1;
      *(void *)(v20 + 8 * v21 + 8) = v14;
      if (*(_DWORD *)(v14 + 60) != 3)
      {
LABEL_8:
        operations_research::sat::ConstraintProto::clear_constraint(v14);
        *(_DWORD *)(v14 + 60) = 3;
        uint64_t v15 = *(void *)(v14 + 8);
        uint64_t v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if (v15) {
          uint64_t v16 = *(google::protobuf::Arena **)v16;
        }
        unint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v16);
        *(void *)(v14 + 48) = v17;
        int v18 = *(int **)v9;
        int v19 = *(int **)(v9 + 8);
        unint64_t v78 = v9;
        if (*(int **)v9 != v19)
        {
          do
          {
LABEL_19:
            int v22 = *v18;
            unint64_t v23 = (uint64_t)*v18 >> 1;
            uint64_t v24 = *(void *)(v4 + 72);
            if (v23 >= (*(void *)(v4 + 80) - v24) >> 2)
            {
              LODWORD(__p) = -1;
              int v83 = -1;
LABEL_23:
              google::MakeCheckOpString<int,int>((int)&__p, (int)&v83, "var != -1");
            }
            int v25 = *(_DWORD *)(v24 + 4 * v23);
            LODWORD(__p) = v25;
            int v83 = -1;
            if (v25 == -1) {
              goto LABEL_23;
            }
            int v26 = *(_DWORD *)(*v79 + 4 * v25);
            uint64_t v27 = *(unsigned int *)(v17 + 16);
            if (v27 == *(_DWORD *)(v17 + 20)) {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v17 + 16), v27 + 1);
            }
            *(_DWORD *)(*(void *)(v17 + 24) + 4 * v27) = v26 ^ -(v22 & 1);
            *(_DWORD *)(v17 + 16) = v27 + 1;
            ++v18;
          }
          while (v18 != v19);
        }
        goto LABEL_26;
      }
LABEL_16:
      unint64_t v17 = *(void *)(v14 + 48);
      int v18 = *(int **)v9;
      int v19 = *(int **)(v9 + 8);
      unint64_t v78 = v9;
      if (*(int **)v9 != v19) {
        goto LABEL_19;
      }
LABEL_26:
      uint64_t v10 = v77;
      unint64_t v9 = v78 + 24;
      if (v78 + 24 - (void)*v77 == 4080)
      {
        uint64_t v10 = v77 + 1;
        unint64_t v9 = (unint64_t)v77[1];
      }
      uint64_t v3 = v75;
      if (v9 == v76)
      {
        size_t v29 = v70;
        unint64_t v28 = v71;
        uint64_t v6 = (void **)v71[1];
        std::string::size_type v7 = (void **)v71[2];
        uint64_t v31 = v72;
        size_t v30 = a1;
        if (v7 != v6) {
          goto LABEL_29;
        }
LABEL_58:
        *size_t v29 = 0;
        unint64_t v39 = 0;
        goto LABEL_40;
      }
    }
    int v13 = *(_DWORD *)(v3 + 52);
LABEL_14:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v74, v13 + 1);
    uint64_t v11 = *(int **)(v3 + 56);
    int v13 = *v11;
    goto LABEL_15;
  }
  size_t v29 = v5 + 5;
  unint64_t v28 = v5;
  uint64_t v31 = v72;
  size_t v30 = a1;
  if (v7 == v6) {
    goto LABEL_58;
  }
LABEL_29:
  unint64_t v32 = v28[4];
  long long v33 = &v6[v32 / 0xAA];
  unint64_t v34 = (unint64_t)*v33;
  unint64_t v35 = (unint64_t)*v33 + 24 * (v32 % 0xAA);
  unint64_t v36 = (unint64_t)v6[(v28[5] + v32) / 0xAA] + 24 * ((v28[5] + v32) % 0xAA);
  if (v35 != v36)
  {
    do
    {
      unint64_t v37 = *(void **)v35;
      if (*(void *)v35)
      {
        *(void *)(v35 + 8) = v37;
        operator delete(v37);
        unint64_t v34 = (unint64_t)*v33;
      }
      v35 += 24;
      if (v35 - v34 == 4080)
      {
        unint64_t v38 = (unint64_t)v33[1];
        ++v33;
        unint64_t v34 = v38;
        unint64_t v35 = v38;
      }
    }
    while (v35 != v36);
    uint64_t v6 = (void **)v28[1];
    std::string::size_type v7 = (void **)v28[2];
  }
  *size_t v29 = 0;
  unint64_t v39 = (char *)v7 - (char *)v6;
  if (v39 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      uint64_t v40 = v28[2];
      uint64_t v6 = (void **)(v28[1] + 8);
      v28[1] = v6;
      unint64_t v39 = v40 - (void)v6;
    }
    while (v39 > 0x10);
  }
LABEL_40:
  if (v39 >> 3 == 1)
  {
    uint64_t v41 = 85;
  }
  else
  {
    if (v39 >> 3 != 2) {
      goto LABEL_45;
    }
    uint64_t v41 = 170;
  }
  v28[4] = v41;
LABEL_45:
  uint64_t v44 = (absl::lts_2020_02_25::Mutex *)*(int *)(v31 + 16);
  if (!v44)
  {
    if (!*(unsigned char *)(v30[2] + 130)
      || ((int v47 = *(_DWORD *)(v30[1] + 24), *(_DWORD *)(v30[3] + 24) >= v47) ? (v48 = v47 < 1) : (v48 = 1), v48))
    {
LABEL_55:
      uint64_t v49 = v30[6];
      if (*(unsigned char *)v49)
      {
        CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
        uint64_t v50 = (uint64_t)CurrentTimeNanos + *(void *)(v49 + 16) - *(void *)(v49 + 8);
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 16);
      }
      *(double *)(v31 + 208) = (double)v50 * 0.000000001;
      uint64_t v51 = v30[7];
      if (*(unsigned char *)v51) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v52 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos) - *(void *)(v51 + 8) + *(void *)(v51 + 16);
      }
      else {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v52 = *(void *)(v51 + 16);
      }
      *(double *)(v31 + 216) = (double)v52 * 0.000000001;
      uint64_t v44 = (absl::lts_2020_02_25::Mutex *)v30[4];
      absl::lts_2020_02_25::Mutex::ReaderLock(v44, v43);
      uint64_t v53 = *(void *)(*((void *)v44 + 1) + 112);
      absl::lts_2020_02_25::Mutex::ReaderUnlock((atomic_ullong *)v44, v54, v55, v56, v57, v58, v59, v60);
      *(void *)(v31 + 224) = v53;
      return v44 & 1;
    }
    uint64_t v62 = 0;
    while (1)
    {
      uint64_t v64 = *(const operations_research::sat::IntegerVariableProto **)(*(void *)(v30[3] + 32) + 8 * v62 + 8);
      uint64_t v65 = *(int **)(v31 + 104);
      if (!v65) {
        break;
      }
      uint64_t v66 = *(int *)(v31 + 96);
      int v67 = *v65;
      if ((int)v66 >= *v65)
      {
        if (v67 != *(_DWORD *)(v31 + 100)) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      *(_DWORD *)(v31 + 96) = v66 + 1;
      uint64_t v63 = *(operations_research::sat::IntegerVariableProto **)&v65[2 * v66 + 2];
LABEL_66:
      operations_research::sat::IntegerVariableProto::CopyFrom(v63, v64);
      if (++v62 >= *(int *)(v30[1] + 24)) {
        goto LABEL_55;
      }
    }
    int v67 = *(_DWORD *)(v31 + 100);
LABEL_72:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v31 + 88), v67 + 1);
    uint64_t v65 = *(int **)(v31 + 104);
    int v67 = *v65;
LABEL_73:
    *uint64_t v65 = v67 + 1;
    uint64_t v63 = (operations_research::sat::IntegerVariableProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v31 + 88));
    uint64_t v68 = *(void *)(v31 + 104);
    uint64_t v69 = *(int *)(v31 + 96);
    *(_DWORD *)(v31 + 96) = v69 + 1;
    *(void *)(v68 + 8 * v69 + 8) = v63;
    goto LABEL_66;
  }
  uint64_t v45 = v30[1];
  int v46 = *(const void **)(v31 + 24);
  v81 = 0;
  v82 = 0;
  std::string __p = 0;
  if ((v44 & 0x80000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  std::string __p = operator new(8 * (void)v44);
  v82 = (char *)__p + 8 * (void)v44;
  memcpy(__p, v46, 8 * (void)v44);
  v81 = v82;
  LOBYTE(v44) = operations_research::sat::SolutionIsFeasible(v45, (uint64_t)&__p, v30[3], (int **)v30[5]);
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  return v44 & 1;
}

void sub_23CC9F0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CC9F104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_2>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::PostsolveClauses>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void *operations_research::sat::Model::Delete<operations_research::sat::PostsolveClauses>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1FC0;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](v2);
    MEMORY[0x23ECF2BC0](v3, 0x1080C40BE8D5F09);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PostsolveClauses>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C1FC0;
  a1[1] = 0;
  if (v2)
  {
    uint64_t v3 = std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](v2);
    MEMORY[0x23ECF2BC0](v3, 0x1080C40BE8D5F09);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__value_func<BOOL ()(operations_research::sat::CpSolverResponse *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    BOOL v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CC9F694(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F0C2008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2008;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::operator()(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a1[1];
  int v5 = *(_DWORD *)(v4 + 24);
  uint64_t v6 = (int *)(*a2 + 16);
  if (*v6 > 0
    || *(int *)(v3 + 40) >= 1
    && (uint64_t v6 = (int *)(v3 + 64), v14 = *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 40) = v5, v14 >= 1))
  {
    *uint64_t v6 = v5;
  }
  std::string::size_type v7 = (absl::lts_2020_02_25::Mutex *)(v4 + 16);
  CurrentTimeNanos = (absl::lts_2020_02_25 *)(v3 + 88);
  if (*(unsigned char *)(a1[2] + 130)) {
    BOOL v9 = CurrentTimeNanos == v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>((uint64_t)CurrentTimeNanos, (uint64_t)v7);
    uint64_t v10 = a1[3];
    if (!*(unsigned char *)v10) {
      goto LABEL_11;
    }
LABEL_9:
    CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    uint64_t v11 = (uint64_t)CurrentTimeNanos + *(void *)(v10 + 16) - *(void *)(v10 + 8);
    goto LABEL_12;
  }
  uint64_t v10 = a1[3];
  if (*(unsigned char *)v10) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v11 = *(void *)(v10 + 16);
LABEL_12:
  *(double *)(v3 + 208) = (double)v11 * 0.000000001;
  uint64_t v12 = a1[5];
  if (*(unsigned char *)v12) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos) - *(void *)(v12 + 8) + *(void *)(v12 + 16);
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = *(void *)(v12 + 16);
  }
  *(double *)(v3 + 216) = (double)v13 * 0.000000001;
  uint64_t v15 = (absl::lts_2020_02_25::Mutex *)a1[4];
  absl::lts_2020_02_25::Mutex::ReaderLock(v15, v7);
  uint64_t v16 = *(void *)(*((void *)v15 + 1) + 112);
  absl::lts_2020_02_25::Mutex::ReaderUnlock((atomic_ullong *)v15, v17, v18, v19, v20, v21, v22, v23);
  *(void *)(v3 + 224) = v16;
  return 1;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_3>,BOOL ()(operations_research::sat::CpSolverResponse *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F0C2088;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2088;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::operator()(void *a1, const operations_research::sat::CpSolverResponse *a2)
{
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v19, a2);
  uint64_t v3 = a1[5];
  std::string __p = v19;
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 48))(v4, &__p);
  uint64_t v5 = v20;
  if (v20) {
    BOOL v6 = FLAGS_cp_model_check_intermediate_solutions == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = a1[1];
    unint64_t v8 = v21;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    std::string __p = 0;
    if (v20 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 8 * v20;
    uint64_t v10 = (char *)operator new(v9);
    uint64_t v11 = &v10[8 * v5];
    std::string __p = v10;
    uint64_t v18 = v11;
    memcpy(v10, v8, v9);
    unint64_t v17 = v11;
    operations_research::sat::SolutionIsFeasible(v7, (uint64_t)&__p, 0, 0);
    if (__p)
    {
      unint64_t v17 = __p;
      operator delete(__p);
    }
  }
  uint64_t v12 = (uint64_t *)a1[2];
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 != v14)
  {
    do
    {
      uint64_t v15 = *(void *)(v13 + 24);
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v15 + 48))(v15, v19);
      v13 += 32;
    }
    while (v13 != v14);
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v19);
}

void sub_23CC9FB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&a12);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_4>,void ()(operations_research::sat::CpSolverResponse const&)>::target_type()
{
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F0C2108;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C2108;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v2, a2);
  atomic_store(1u, v2[3]);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12SolveCpModelERKNS0_12CpModelProtoEPNS0_5ModelEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5,std::allocator<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_5>,void ()(operations_research::sat::CpSolverResponse const&)>::target_type()
{
}

void operations_research::sat::SetToNegatedLinearExpression(operations_research::sat *this, const operations_research::sat::LinearExpressionProto *a2, operations_research::sat::LinearExpressionProto *a3)
{
  operations_research::sat::LinearExpressionProto::Clear(a2);
  if (*((int *)this + 4) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = *(_DWORD *)(*((void *)this + 3) + 4 * v5);
      uint64_t v7 = *((unsigned int *)a2 + 4);
      if (v7 == *((_DWORD *)a2 + 5)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a2 + 4, v7 + 1);
      }
      *(_DWORD *)(*((void *)a2 + 3) + 4 * v7) = ~v6;
      *((_DWORD *)a2 + 4) = v7 + 1;
      uint64_t v8 = *(void *)(*((void *)this + 6) + 8 * v5);
      uint64_t v9 = *((unsigned int *)a2 + 10);
      if (v9 == *((_DWORD *)a2 + 11)) {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a2 + 10, v9 + 1);
      }
      *(void *)(*((void *)a2 + 6) + 8 * v9) = v8;
      *((_DWORD *)a2 + 10) = v9 + 1;
      ++v5;
    }
    while (v5 < *((int *)this + 4));
  }
  *((void *)a2 + 8) = -*((void *)this + 8);
}

void operations_research::sat::GetReferencesUsedByConstraint(operations_research::sat *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  switch(*((_DWORD *)this + 15))
  {
    case 3:
    case 4:
    case 5:
    case 0x1A:
      uint64_t v5 = 0;
      uint64_t v6 = *((void *)this + 6);
      uint64_t v7 = (unint64_t *)(a2 + 24);
      uint64_t v8 = *(int *)(v6 + 16);
      uint64_t v9 = *(char **)(v6 + 24);
      uint64_t v10 = &v9[4 * v8];
      goto LABEL_33;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      uint64_t v31 = *((void *)this + 6);
      int v32 = *(_DWORD *)(v31 + 36);
      long long v33 = operator new(4uLL);
      *long long v33 = v32;
      uint64_t v5 = v33 + 1;
      *(void *)(a2 + 8) = v33 + 1;
      *(void *)(a2 + 16) = v33 + 1;
      *(void *)a2 = v33;
      uint64_t v8 = *(int *)(v31 + 16);
      uint64_t v9 = *(char **)(v31 + 24);
      goto LABEL_32;
    case 0xC:
    case 0xD:
    case 0x10:
    case 0x19:
      uint64_t v5 = 0;
      uint64_t v11 = (uint64_t *)*((void *)this + 6);
      goto LABEL_4;
    case 0xE:
      uint64_t v13 = *((void *)this + 6);
      int v14 = *(_DWORD *)(v13 + 36);
      uint64_t v15 = operator new(4uLL);
      *uint64_t v15 = v14;
      *(void *)(a2 + 8) = v15 + 1;
      *(void *)(a2 + 16) = v15 + 1;
      *(void *)a2 = v15;
      int v16 = *(_DWORD *)(v13 + 40);
      unint64_t v17 = operator new(8uLL);
      uint64_t v5 = v17 + 2;
      _DWORD *v17 = *v15;
      v17[1] = v16;
      *(void *)a2 = v17;
      *(void *)(a2 + 8) = v17 + 2;
      *(void *)(a2 + 16) = v17 + 2;
      operator delete(v15);
      *(void *)(a2 + 8) = v5;
      if (*((_DWORD *)this + 15) == 14) {
        uint64_t v11 = (uint64_t *)*((void *)this + 6);
      }
      else {
        uint64_t v11 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      }
LABEL_4:
      uint64_t v8 = *((int *)v11 + 4);
      uint64_t v9 = (char *)v11[3];
      goto LABEL_32;
    case 0xF:
    case 0x17:
      uint64_t v5 = 0;
      uint64_t v12 = *((void *)this + 6);
      uint64_t v7 = (unint64_t *)(a2 + 24);
      uint64_t v8 = *(int *)(v12 + 64);
      uint64_t v9 = *(char **)(v12 + 72);
      uint64_t v10 = &v9[4 * v8];
      goto LABEL_33;
    case 0x11:
      uint64_t v5 = 0;
      uint64_t v26 = *((void *)this + 6);
      uint64_t v8 = *(int *)(v26 + 112);
      uint64_t v9 = *(char **)(v26 + 120);
      goto LABEL_32;
    case 0x12:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, *(char **)(*((void *)this + 6) + 24), (char *)(*(void *)(*((void *)this + 6) + 24) + 4 * *(int *)(*((void *)this + 6) + 16)), *(int *)(*((void *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 18) {
        uint64_t v27 = (uint64_t *)*((void *)this + 6);
      }
      else {
        uint64_t v27 = &operations_research::sat::_InverseConstraintProto_default_instance_;
      }
      uint64_t v8 = *((int *)v27 + 10);
      uint64_t v9 = (char *)v27[6];
      uint64_t v5 = *(void **)(a2 + 8);
      goto LABEL_32;
    case 0x13:
      uint64_t v34 = *((void *)this + 6);
      int v35 = *(_DWORD *)(v34 + 16);
      unint64_t v36 = operator new(4uLL);
      *unint64_t v36 = v35;
      *(void *)(a2 + 8) = v36 + 1;
      *(void *)(a2 + 16) = v36 + 1;
      *(void *)a2 = v36;
      int v37 = *(_DWORD *)(v34 + 20);
      unint64_t v38 = (char *)operator new(8uLL);
      unint64_t v39 = v38 + 8;
      *(_DWORD *)unint64_t v38 = *v36;
      *((_DWORD *)v38 + 1) = v37;
      *(void *)a2 = v38;
      *(void *)(a2 + 8) = v38 + 8;
      *(void *)(a2 + 16) = v38 + 8;
      operator delete(v36);
      unint64_t v40 = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = v38 + 8;
      if (*((_DWORD *)this + 15) == 19) {
        uint64_t v41 = (uint64_t *)*((void *)this + 6);
      }
      else {
        uint64_t v41 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      }
      int v42 = *((_DWORD *)v41 + 6);
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v45 = *(unsigned char **)a2;
        uint64_t v46 = ((uint64_t)v39 - *(void *)a2) >> 2;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v40 - (void)v45;
        if (v48 >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (v49 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v50 = (char *)operator new(4 * v49);
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = &v50[4 * v46];
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v52 = &v50[4 * v49];
        *(_DWORD *)uint64_t v51 = v42;
        size_t v43 = v51 + 4;
        if (v39 != (_DWORD *)v45)
        {
          unint64_t v53 = v38 - v45 + 4;
          if (v53 < 0x1C) {
            goto LABEL_67;
          }
          uint64_t v54 = (v53 >> 2) + 1;
          uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v39 = (_DWORD *)((char *)v39 - v55);
          v51 -= v55;
          uint64_t v56 = &v50[4 * v46 - 16];
          uint64_t v57 = v38 - 8;
          uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v59 = *(_OWORD *)v57;
            *((_OWORD *)v56 - 1) = *((_OWORD *)v57 - 1);
            *(_OWORD *)uint64_t v56 = v59;
            v56 -= 32;
            v57 -= 32;
            v58 -= 8;
          }
          while (v58);
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_67:
            do
            {
              int v60 = *--v39;
              *((_DWORD *)v51 - 1) = v60;
              v51 -= 4;
            }
            while (v39 != (_DWORD *)v45);
          }
        }
        *(void *)a2 = v51;
        *(void *)(a2 + 8) = v43;
        *(void *)(a2 + 16) = v52;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *((_DWORD *)v38 + 2) = v42;
        size_t v43 = v38 + 12;
      }
      *(void *)(a2 + 8) = v43;
      return;
    case 0x16:
      uint64_t v28 = *((void *)this + 6);
      int v29 = *(_DWORD *)(v28 + 60);
      size_t v30 = operator new(4uLL);
      _DWORD *v30 = v29;
      uint64_t v5 = v30 + 1;
      *(void *)(a2 + 8) = v30 + 1;
      *(void *)(a2 + 16) = v30 + 1;
      *(void *)a2 = v30;
      uint64_t v8 = *(int *)(v28 + 40);
      uint64_t v9 = *(char **)(v28 + 48);
LABEL_32:
      uint64_t v10 = &v9[4 * v8];
      uint64_t v7 = (unint64_t *)a2;
      goto LABEL_33;
    case 0x18:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, *(char **)(*((void *)this + 6) + 24), (char *)(*(void *)(*((void *)this + 6) + 24) + 4 * *(int *)(*((void *)this + 6) + 16)), *(int *)(*((void *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 24) {
        uint64_t v44 = (uint64_t *)*((void *)this + 6);
      }
      else {
        uint64_t v44 = &operations_research::sat::_ReservoirConstraintProto_default_instance_;
      }
      uint64_t v7 = (unint64_t *)(a2 + 24);
      uint64_t v8 = *((int *)v44 + 16);
      uint64_t v9 = (char *)v44[9];
      uint64_t v5 = *(void **)(a2 + 32);
      uint64_t v10 = &v9[4 * v8];
LABEL_33:
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(v7, v5, v9, v10, v8);
      return;
    case 0x1B:
      uint64_t v18 = *(uint64_t **)(*((void *)this + 6) + 40);
      if (!v18) {
        uint64_t v18 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      }
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, (char *)v18[3], (char *)(v18[3] + 4 * *((int *)v18 + 4)), *((int *)v18 + 4));
      uint64_t v19 = 0;
      if (*((_DWORD *)this + 15) != 27) {
        goto LABEL_12;
      }
      while (1)
      {
        int v20 = (int *)*((void *)this + 6);
        if (v19 >= v20[6]) {
          break;
        }
        while (1)
        {
          uint64_t v21 = *(void *)(*((void *)v20 + 4) + 8 * v19 + 8);
          std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, *(void **)(a2 + 8), *(char **)(v21 + 24), (char *)(*(void *)(v21 + 24) + 4 * *(int *)(v21 + 16)), *(int *)(v21 + 16));
          ++v19;
          if (*((_DWORD *)this + 15) == 27) {
            break;
          }
LABEL_12:
          int v20 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
          if (v19 >= dword_26AEE1850) {
            return;
          }
        }
      }
      return;
    case 0x1C:
      uint64_t v22 = *(uint64_t **)(*((void *)this + 6) + 40);
      if (!v22) {
        uint64_t v22 = &operations_research::sat::_LinearExpressionProto_default_instance_;
      }
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, 0, (char *)v22[3], (char *)(v22[3] + 4 * *((int *)v22 + 4)), *((int *)v22 + 4));
      uint64_t v23 = 0;
      if (*((_DWORD *)this + 15) != 28) {
        goto LABEL_20;
      }
      break;
    default:
      return;
  }
  while (1)
  {
    uint64_t v24 = (int *)*((void *)this + 6);
    if (v23 >= v24[6]) {
      break;
    }
    while (1)
    {
      uint64_t v25 = *(void *)(*((void *)v24 + 4) + 8 * v23 + 8);
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)a2, *(void **)(a2 + 8), *(char **)(v25 + 24), (char *)(*(void *)(v25 + 24) + 4 * *(int *)(v25 + 16)), *(int *)(v25 + 16));
      ++v23;
      if (*((_DWORD *)this + 15) == 28) {
        break;
      }
LABEL_20:
      uint64_t v24 = (int *)&operations_research::sat::_LinearArgumentProto_default_instance_;
      if (v23 >= dword_26AEE1850) {
        return;
      }
    }
  }
}

void sub_23CCA0380(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0394(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA03A8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA03BC(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA03D0(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA03E4(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA03F8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA040C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0420(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0434(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0448(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA045C(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0470(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA0484(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ApplyToAllLiteralIndices(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(int *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = 4 * v4;
    do
    {
      uint64_t v43 = v5;
      uint64_t v7 = *(void *)(v3 + 24);
      if (!v7) {
LABEL_41:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v43);
      v5 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  switch(*(_DWORD *)(a2 + 60))
  {
    case 3:
      uint64_t v8 = *(void *)(a2 + 48);
      uint64_t v9 = *(int *)(v8 + 16);
      if (!v9) {
        return result;
      }
      uint64_t v10 = *(void *)(v8 + 24);
      uint64_t v11 = 4 * v9;
      while (1)
      {
        uint64_t v43 = v10;
        uint64_t v12 = *(void *)(v3 + 24);
        if (!v12) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12 + 48))(v12, &v43);
        v10 += 4;
        v11 -= 4;
        if (!v11) {
          return result;
        }
      }
      goto LABEL_41;
    case 4:
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v14 = *(int *)(v13 + 16);
      if (!v14) {
        return result;
      }
      uint64_t v15 = *(void *)(v13 + 24);
      uint64_t v16 = 4 * v14;
      while (1)
      {
        uint64_t v43 = v15;
        uint64_t v17 = *(void *)(v3 + 24);
        if (!v17) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v43);
        v15 += 4;
        v16 -= 4;
        if (!v16) {
          return result;
        }
      }
      goto LABEL_41;
    case 5:
      uint64_t v18 = *(void *)(a2 + 48);
      uint64_t v19 = *(int *)(v18 + 16);
      if (!v19) {
        return result;
      }
      uint64_t v20 = *(void *)(v18 + 24);
      uint64_t v21 = 4 * v19;
      while (1)
      {
        uint64_t v43 = v20;
        uint64_t v22 = *(void *)(v3 + 24);
        if (!v22) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v22 + 48))(v22, &v43);
        v20 += 4;
        v21 -= 4;
        if (!v21) {
          return result;
        }
      }
      goto LABEL_41;
    case 0xF:
      uint64_t v23 = *(void *)(a2 + 48);
      uint64_t v24 = *(int *)(v23 + 64);
      if (!v24) {
        return result;
      }
      uint64_t v25 = *(void *)(v23 + 72);
      uint64_t v26 = 4 * v24;
      while (1)
      {
        uint64_t v43 = v25;
        uint64_t v27 = *(void *)(v3 + 24);
        if (!v27) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v27 + 48))(v27, &v43);
        v25 += 4;
        v26 -= 4;
        if (!v26) {
          return result;
        }
      }
      goto LABEL_41;
    case 0x17:
      uint64_t v28 = *(void *)(a2 + 48);
      uint64_t v29 = *(int *)(v28 + 64);
      if (!v29) {
        return result;
      }
      uint64_t v30 = *(void *)(v28 + 72);
      uint64_t v31 = 4 * v29;
      while (1)
      {
        uint64_t v43 = v30;
        uint64_t v32 = *(void *)(v3 + 24);
        if (!v32) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v32 + 48))(v32, &v43);
        v30 += 4;
        v31 -= 4;
        if (!v31) {
          return result;
        }
      }
      goto LABEL_41;
    case 0x18:
      uint64_t v33 = *(void *)(a2 + 48);
      uint64_t v34 = *(int *)(v33 + 64);
      if (!v34) {
        return result;
      }
      uint64_t v35 = *(void *)(v33 + 72);
      uint64_t v36 = 4 * v34;
      while (1)
      {
        uint64_t v43 = v35;
        uint64_t v37 = *(void *)(v3 + 24);
        if (!v37) {
          break;
        }
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v37 + 48))(v37, &v43);
        v35 += 4;
        v36 -= 4;
        if (!v36) {
          return result;
        }
      }
      goto LABEL_41;
    case 0x1A:
      uint64_t v38 = *(void *)(a2 + 48);
      uint64_t v39 = *(int *)(v38 + 16);
      if (!v39) {
        return result;
      }
      uint64_t v40 = *(void *)(v38 + 24);
      uint64_t v41 = 4 * v39;
      break;
    default:
      return result;
  }
  do
  {
    uint64_t v43 = v40;
    uint64_t v42 = *(void *)(v3 + 24);
    if (!v42) {
      goto LABEL_41;
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v42 + 48))(v42, &v43);
    v40 += 4;
    v41 -= 4;
  }
  while (v41);
  return result;
}

void operations_research::sat::ApplyToAllVariableIndices(uint64_t a1, operations_research::sat::ConstraintProto *this)
{
  switch(*((_DWORD *)this + 15))
  {
    case 7:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v4 + 48))(v4, &v191);
      if (*((_DWORD *)this + 15) != 7)
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 7;
        uint64_t v121 = *((void *)this + 1);
        v122 = (google::protobuf::Arena *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          v122 = *(google::protobuf::Arena **)v122;
        }
        v5.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v122);
        *((void *)this + 6) = v123;
        *(_DWORD *)(v123 + 36) = v190;
        if (*((_DWORD *)this + 15) != 7) {
          goto LABEL_5;
        }
LABEL_134:
        uint64_t v8 = *((void *)this + 6);
        uint64_t v9 = *(int *)(v8 + 16);
        if (v9) {
          goto LABEL_135;
        }
        return;
      }
      *(_DWORD *)(*((void *)this + 6) + 36) = v190;
      if (*((_DWORD *)this + 15) == 7) {
        goto LABEL_134;
      }
LABEL_5:
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
      *((_DWORD *)this + 15) = 7;
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
      if ((v6 & 1) == 0)
      {
        v5.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v7);
        *((void *)this + 6) = v8;
        uint64_t v9 = *(int *)(v8 + 16);
        if (!v9) {
          return;
        }
LABEL_135:
        v124 = *(int **)(v8 + 24);
        uint64_t v125 = 4 * v9;
        while (1)
        {
          v191 = v124;
          uint64_t v126 = *(void *)(a1 + 24);
          if (!v126) {
            break;
          }
          (*(void (**)(uint64_t, int **, __n128))(*(void *)v126 + 48))(v126, &v191, v5);
          ++v124;
          v125 -= 4;
          if (!v125) {
            return;
          }
        }
        goto LABEL_224;
      }
      v5.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*(google::protobuf::Arena **)v7);
      *((void *)this + 6) = v8;
      uint64_t v9 = *(int *)(v8 + 16);
      if (v9) {
        goto LABEL_135;
      }
      return;
    case 8:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v10 + 48))(v10, &v191);
      if (*((_DWORD *)this + 15) == 8)
      {
        *(_DWORD *)(*((void *)this + 6) + 36) = v190;
        if (*((_DWORD *)this + 15) != 8) {
          goto LABEL_11;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 8;
        uint64_t v127 = *((void *)this + 1);
        v128 = (google::protobuf::Arena *)(v127 & 0xFFFFFFFFFFFFFFFELL);
        if (v127) {
          v128 = *(google::protobuf::Arena **)v128;
        }
        v11.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v128);
        *((void *)this + 6) = v129;
        *(_DWORD *)(v129 + 36) = v190;
        if (*((_DWORD *)this + 15) != 8)
        {
LABEL_11:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 8;
          uint64_t v12 = *((void *)this + 1);
          uint64_t v13 = (google::protobuf::Arena **)(v12 & 0xFFFFFFFFFFFFFFFELL);
          if (v12)
          {
            v11.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v13);
            *((void *)this + 6) = v14;
            uint64_t v15 = *(int *)(v14 + 16);
            if (!v15) {
              return;
            }
          }
          else
          {
            v11.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v13);
            *((void *)this + 6) = v14;
            uint64_t v15 = *(int *)(v14 + 16);
            if (!v15) {
              return;
            }
          }
LABEL_143:
          v130 = *(int **)(v14 + 24);
          uint64_t v131 = 4 * v15;
          while (1)
          {
            v191 = v130;
            uint64_t v132 = *(void *)(a1 + 24);
            if (!v132) {
              break;
            }
            (*(void (**)(uint64_t, int **, __n128))(*(void *)v132 + 48))(v132, &v191, v11);
            ++v130;
            v131 -= 4;
            if (!v131) {
              return;
            }
          }
          goto LABEL_224;
        }
      }
      uint64_t v14 = *((void *)this + 6);
      uint64_t v15 = *(int *)(v14 + 16);
      if (!v15) {
        return;
      }
      goto LABEL_143;
    case 9:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v16 = *(void *)(a1 + 24);
      if (!v16) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v16 + 48))(v16, &v191);
      if (*((_DWORD *)this + 15) == 9)
      {
        *(_DWORD *)(*((void *)this + 6) + 36) = v190;
        if (*((_DWORD *)this + 15) != 9) {
          goto LABEL_17;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 9;
        uint64_t v133 = *((void *)this + 1);
        v134 = (google::protobuf::Arena *)(v133 & 0xFFFFFFFFFFFFFFFELL);
        if (v133) {
          v134 = *(google::protobuf::Arena **)v134;
        }
        v17.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v134);
        *((void *)this + 6) = v135;
        *(_DWORD *)(v135 + 36) = v190;
        if (*((_DWORD *)this + 15) != 9)
        {
LABEL_17:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 9;
          uint64_t v18 = *((void *)this + 1);
          uint64_t v19 = (google::protobuf::Arena **)(v18 & 0xFFFFFFFFFFFFFFFELL);
          if (v18)
          {
            v17.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v19);
            *((void *)this + 6) = v20;
            uint64_t v21 = *(int *)(v20 + 16);
            if (!v21) {
              return;
            }
          }
          else
          {
            v17.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v19);
            *((void *)this + 6) = v20;
            uint64_t v21 = *(int *)(v20 + 16);
            if (!v21) {
              return;
            }
          }
LABEL_151:
          v136 = *(int **)(v20 + 24);
          uint64_t v137 = 4 * v21;
          while (1)
          {
            v191 = v136;
            uint64_t v138 = *(void *)(a1 + 24);
            if (!v138) {
              break;
            }
            (*(void (**)(uint64_t, int **, __n128))(*(void *)v138 + 48))(v138, &v191, v17);
            ++v136;
            v137 -= 4;
            if (!v137) {
              return;
            }
          }
          goto LABEL_224;
        }
      }
      uint64_t v20 = *((void *)this + 6);
      uint64_t v21 = *(int *)(v20 + 16);
      if (!v21) {
        return;
      }
      goto LABEL_151;
    case 0xA:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v22 = *(void *)(a1 + 24);
      if (!v22) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v22 + 48))(v22, &v191);
      if (*((_DWORD *)this + 15) == 10)
      {
        *(_DWORD *)(*((void *)this + 6) + 36) = v190;
        if (*((_DWORD *)this + 15) != 10) {
          goto LABEL_23;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 10;
        uint64_t v139 = *((void *)this + 1);
        v140 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          v140 = *(google::protobuf::Arena **)v140;
        }
        v23.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v140);
        *((void *)this + 6) = v141;
        *(_DWORD *)(v141 + 36) = v190;
        if (*((_DWORD *)this + 15) != 10)
        {
LABEL_23:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 10;
          uint64_t v24 = *((void *)this + 1);
          uint64_t v25 = (google::protobuf::Arena **)(v24 & 0xFFFFFFFFFFFFFFFELL);
          if (v24)
          {
            v23.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v25);
            *((void *)this + 6) = v26;
            uint64_t v27 = *(int *)(v26 + 16);
            if (!v27) {
              return;
            }
          }
          else
          {
            v23.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v25);
            *((void *)this + 6) = v26;
            uint64_t v27 = *(int *)(v26 + 16);
            if (!v27) {
              return;
            }
          }
LABEL_159:
          v142 = *(int **)(v26 + 24);
          uint64_t v143 = 4 * v27;
          while (1)
          {
            v191 = v142;
            uint64_t v144 = *(void *)(a1 + 24);
            if (!v144) {
              break;
            }
            (*(void (**)(uint64_t, int **, __n128))(*(void *)v144 + 48))(v144, &v191, v23);
            ++v142;
            v143 -= 4;
            if (!v143) {
              return;
            }
          }
          goto LABEL_224;
        }
      }
      uint64_t v26 = *((void *)this + 6);
      uint64_t v27 = *(int *)(v26 + 16);
      if (!v27) {
        return;
      }
      goto LABEL_159;
    case 0xB:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v28 = *(void *)(a1 + 24);
      if (!v28) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v28 + 48))(v28, &v191);
      if (*((_DWORD *)this + 15) == 11)
      {
        *(_DWORD *)(*((void *)this + 6) + 36) = v190;
        if (*((_DWORD *)this + 15) != 11) {
          goto LABEL_29;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 11;
        uint64_t v145 = *((void *)this + 1);
        v146 = (google::protobuf::Arena *)(v145 & 0xFFFFFFFFFFFFFFFELL);
        if (v145) {
          v146 = *(google::protobuf::Arena **)v146;
        }
        v29.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v146);
        *((void *)this + 6) = v147;
        *(_DWORD *)(v147 + 36) = v190;
        if (*((_DWORD *)this + 15) != 11)
        {
LABEL_29:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 11;
          uint64_t v30 = *((void *)this + 1);
          uint64_t v31 = (google::protobuf::Arena **)(v30 & 0xFFFFFFFFFFFFFFFELL);
          if (v30)
          {
            v29.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v31);
            *((void *)this + 6) = v32;
            uint64_t v33 = *(int *)(v32 + 16);
            if (!v33) {
              return;
            }
          }
          else
          {
            v29.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v31);
            *((void *)this + 6) = v32;
            uint64_t v33 = *(int *)(v32 + 16);
            if (!v33) {
              return;
            }
          }
LABEL_167:
          v148 = *(int **)(v32 + 24);
          uint64_t v149 = 4 * v33;
          while (1)
          {
            v191 = v148;
            uint64_t v150 = *(void *)(a1 + 24);
            if (!v150) {
              break;
            }
            (*(void (**)(uint64_t, int **, __n128))(*(void *)v150 + 48))(v150, &v191, v29);
            ++v148;
            v149 -= 4;
            if (!v149) {
              return;
            }
          }
          goto LABEL_224;
        }
      }
      uint64_t v32 = *((void *)this + 6);
      uint64_t v33 = *(int *)(v32 + 16);
      if (!v33) {
        return;
      }
      goto LABEL_167;
    case 0xC:
      uint64_t v34 = *((void *)this + 6);
      uint64_t v35 = *(int *)(v34 + 16);
      if (!v35) {
        return;
      }
      uint64_t v36 = *(int **)(v34 + 24);
      uint64_t v37 = 4 * v35;
      while (1)
      {
        v191 = v36;
        uint64_t v38 = *(void *)(a1 + 24);
        if (!v38) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v38 + 48))(v38, &v191);
        ++v36;
        v37 -= 4;
        if (!v37) {
          return;
        }
      }
      goto LABEL_224;
    case 0xD:
      uint64_t v39 = *((void *)this + 6);
      uint64_t v40 = *(int *)(v39 + 16);
      if (!v40) {
        return;
      }
      uint64_t v41 = *(int **)(v39 + 24);
      uint64_t v42 = 4 * v40;
      while (1)
      {
        v191 = v41;
        uint64_t v43 = *(void *)(a1 + 24);
        if (!v43) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v43 + 48))(v43, &v191);
        ++v41;
        v42 -= 4;
        if (!v42) {
          return;
        }
      }
      goto LABEL_224;
    case 0xE:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 36);
      v191 = &v190;
      uint64_t v44 = *(void *)(a1 + 24);
      if (!v44) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v44 + 48))(v44, &v191);
      if (*((_DWORD *)this + 15) == 14)
      {
        *(_DWORD *)(*((void *)this + 6) + 36) = v190;
        if (*((_DWORD *)this + 15) != 14)
        {
LABEL_45:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 14;
          uint64_t v45 = *((void *)this + 1);
          uint64_t v46 = (google::protobuf::Arena *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = *(google::protobuf::Arena **)v46;
          }
          unint64_t v47 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v46);
          *((void *)this + 6) = v47;
LABEL_175:
          int v190 = *(_DWORD *)(v47 + 40);
          v191 = &v190;
          uint64_t v154 = *(void *)(a1 + 24);
          if (!v154) {
            goto LABEL_224;
          }
          (*(void (**)(uint64_t, int **))(*(void *)v154 + 48))(v154, &v191);
          if (*((_DWORD *)this + 15) == 14)
          {
            *(_DWORD *)(*((void *)this + 6) + 40) = v190;
            if (*((_DWORD *)this + 15) != 14) {
              goto LABEL_178;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 14;
            uint64_t v172 = *((void *)this + 1);
            v173 = (google::protobuf::Arena *)(v172 & 0xFFFFFFFFFFFFFFFELL);
            if (v172) {
              v173 = *(google::protobuf::Arena **)v173;
            }
            unint64_t v174 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v173);
            *((void *)this + 6) = v174;
            *(_DWORD *)(v174 + 40) = v190;
            if (*((_DWORD *)this + 15) != 14)
            {
LABEL_178:
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
              *((_DWORD *)this + 15) = 14;
              uint64_t v155 = *((void *)this + 1);
              v156 = (google::protobuf::Arena **)(v155 & 0xFFFFFFFFFFFFFFFELL);
              if (v155)
              {
                unint64_t v157 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v156);
                *((void *)this + 6) = v157;
                uint64_t v158 = *(int *)(v157 + 16);
                if (!v158) {
                  return;
                }
              }
              else
              {
                unint64_t v157 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v156);
                *((void *)this + 6) = v157;
                uint64_t v158 = *(int *)(v157 + 16);
                if (!v158) {
                  return;
                }
              }
LABEL_203:
              v175 = *(int **)(v157 + 24);
              uint64_t v176 = 4 * v158;
              while (1)
              {
                v191 = v175;
                uint64_t v177 = *(void *)(a1 + 24);
                if (!v177) {
                  break;
                }
                (*(void (**)(uint64_t, int **))(*(void *)v177 + 48))(v177, &v191);
                ++v175;
                v176 -= 4;
                if (!v176) {
                  return;
                }
              }
              goto LABEL_224;
            }
          }
          unint64_t v157 = *((void *)this + 6);
          uint64_t v158 = *(int *)(v157 + 16);
          if (!v158) {
            return;
          }
          goto LABEL_203;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 14;
        uint64_t v151 = *((void *)this + 1);
        v152 = (google::protobuf::Arena *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          v152 = *(google::protobuf::Arena **)v152;
        }
        unint64_t v153 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(v152);
        *((void *)this + 6) = v153;
        *(_DWORD *)(v153 + 36) = v190;
        if (*((_DWORD *)this + 15) != 14) {
          goto LABEL_45;
        }
      }
      unint64_t v47 = *((void *)this + 6);
      goto LABEL_175;
    case 0x10:
      uint64_t v48 = *((void *)this + 6);
      uint64_t v49 = *(int *)(v48 + 16);
      if (!v49) {
        return;
      }
      uint64_t v50 = *(int **)(v48 + 24);
      uint64_t v51 = 4 * v49;
      while (1)
      {
        v191 = v50;
        uint64_t v52 = *(void *)(a1 + 24);
        if (!v52) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v52 + 48))(v52, &v191);
        ++v50;
        v51 -= 4;
        if (!v51) {
          return;
        }
      }
      goto LABEL_224;
    case 0x11:
      uint64_t v53 = *((void *)this + 6);
      uint64_t v54 = *(int *)(v53 + 112);
      if (!v54) {
        return;
      }
      uint64_t v55 = *(int **)(v53 + 120);
      uint64_t v56 = 4 * v54;
      while (1)
      {
        v191 = v55;
        uint64_t v57 = *(void *)(a1 + 24);
        if (!v57) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v57 + 48))(v57, &v191);
        ++v55;
        v56 -= 4;
        if (!v56) {
          return;
        }
      }
      goto LABEL_224;
    case 0x12:
      uint64_t v58 = *((void *)this + 6);
      uint64_t v59 = *(int *)(v58 + 16);
      if (!v59) {
        goto LABEL_63;
      }
      int v60 = *(int **)(v58 + 24);
      uint64_t v61 = 4 * v59;
      do
      {
        v191 = v60;
        uint64_t v62 = *(void *)(a1 + 24);
        if (!v62) {
          goto LABEL_224;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v62 + 48))(v62, &v191);
        ++v60;
        v61 -= 4;
      }
      while (v61);
      if (*((_DWORD *)this + 15) == 18)
      {
LABEL_63:
        uint64_t v63 = *((void *)this + 6);
        uint64_t v64 = *(int *)(v63 + 40);
        if (!v64) {
          return;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 18;
        uint64_t v185 = *((void *)this + 1);
        v186 = (google::protobuf::Arena **)(v185 & 0xFFFFFFFFFFFFFFFELL);
        if (v185)
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>(*v186);
          *((void *)this + 6) = v63;
          uint64_t v64 = *(int *)(v63 + 40);
          if (!v64) {
            return;
          }
        }
        else
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::InverseConstraintProto>((google::protobuf::Arena *)v186);
          *((void *)this + 6) = v63;
          uint64_t v64 = *(int *)(v63 + 40);
          if (!v64) {
            return;
          }
        }
      }
      v187 = *(int **)(v63 + 48);
      uint64_t v188 = 4 * v64;
      while (1)
      {
        v191 = v187;
        uint64_t v189 = *(void *)(a1 + 24);
        if (!v189) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v189 + 48))(v189, &v191);
        ++v187;
        v188 -= 4;
        if (!v188) {
          return;
        }
      }
      goto LABEL_224;
    case 0x13:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 16);
      v191 = &v190;
      uint64_t v65 = *(void *)(a1 + 24);
      if (!v65) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v65 + 48))(v65, &v191);
      if (*((_DWORD *)this + 15) == 19)
      {
        *(_DWORD *)(*((void *)this + 6) + 16) = v190;
        if (*((_DWORD *)this + 15) != 19)
        {
LABEL_68:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 19;
          uint64_t v66 = *((void *)this + 1);
          int v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
          if (v66) {
            int v67 = *(google::protobuf::Arena **)v67;
          }
          uint64_t v68 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v67);
          *((void *)this + 6) = v68;
LABEL_185:
          int v190 = *((_DWORD *)v68 + 5);
          v191 = &v190;
          uint64_t v162 = *(void *)(a1 + 24);
          if (!v162) {
            goto LABEL_224;
          }
          (*(void (**)(uint64_t, int **))(*(void *)v162 + 48))(v162, &v191);
          if (*((_DWORD *)this + 15) == 19)
          {
            *(_DWORD *)(*((void *)this + 6) + 20) = v190;
            if (*((_DWORD *)this + 15) != 19)
            {
LABEL_188:
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
              *((_DWORD *)this + 15) = 19;
              uint64_t v163 = *((void *)this + 1);
              v164 = (google::protobuf::Arena *)(v163 & 0xFFFFFFFFFFFFFFFELL);
              if (v163) {
                v164 = *(google::protobuf::Arena **)v164;
              }
              v165 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v164);
              *((void *)this + 6) = v165;
              goto LABEL_211;
            }
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 19;
            uint64_t v178 = *((void *)this + 1);
            v179 = (google::protobuf::Arena *)(v178 & 0xFFFFFFFFFFFFFFFELL);
            if (v178) {
              v179 = *(google::protobuf::Arena **)v179;
            }
            v180 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v179);
            *((void *)this + 6) = v180;
            *((_DWORD *)v180 + 5) = v190;
            if (*((_DWORD *)this + 15) != 19) {
              goto LABEL_188;
            }
          }
          v165 = (void *)*((void *)this + 6);
LABEL_211:
          int v190 = *((_DWORD *)v165 + 6);
          v191 = &v190;
          uint64_t v181 = *(void *)(a1 + 24);
          if (!v181) {
            goto LABEL_224;
          }
          (*(void (**)(uint64_t, int **))(*(void *)v181 + 48))(v181, &v191);
          if (*((_DWORD *)this + 15) == 19)
          {
            v182 = (void *)*((void *)this + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
            *((_DWORD *)this + 15) = 19;
            uint64_t v183 = *((void *)this + 1);
            v184 = (google::protobuf::Arena *)(v183 & 0xFFFFFFFFFFFFFFFELL);
            if (v183) {
              v184 = *(google::protobuf::Arena **)v184;
            }
            v182 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v184);
            *((void *)this + 6) = v182;
          }
          *((_DWORD *)v182 + 6) = v190;
          return;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 19;
        uint64_t v159 = *((void *)this + 1);
        v160 = (google::protobuf::Arena *)(v159 & 0xFFFFFFFFFFFFFFFELL);
        if (v159) {
          v160 = *(google::protobuf::Arena **)v160;
        }
        v161 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v160);
        *((void *)this + 6) = v161;
        *((_DWORD *)v161 + 4) = v190;
        if (*((_DWORD *)this + 15) != 19) {
          goto LABEL_68;
        }
      }
      uint64_t v68 = (void *)*((void *)this + 6);
      goto LABEL_185;
    case 0x16:
      int v190 = *(_DWORD *)(*((void *)this + 6) + 60);
      v191 = &v190;
      uint64_t v69 = *(void *)(a1 + 24);
      if (!v69) {
        goto LABEL_224;
      }
      (*(void (**)(uint64_t, int **))(*(void *)v69 + 48))(v69, &v191);
      if (*((_DWORD *)this + 15) == 22)
      {
        *(_DWORD *)(*((void *)this + 6) + 60) = v190;
        if (*((_DWORD *)this + 15) != 22) {
          goto LABEL_74;
        }
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
        *((_DWORD *)this + 15) = 22;
        uint64_t v166 = *((void *)this + 1);
        v167 = (google::protobuf::Arena *)(v166 & 0xFFFFFFFFFFFFFFFELL);
        if (v166) {
          v167 = *(google::protobuf::Arena **)v167;
        }
        v70.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v167);
        *((void *)this + 6) = v168;
        *(_DWORD *)(v168 + 60) = v190;
        if (*((_DWORD *)this + 15) != 22)
        {
LABEL_74:
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 22;
          uint64_t v71 = *((void *)this + 1);
          uint64_t v72 = (google::protobuf::Arena **)(v71 & 0xFFFFFFFFFFFFFFFELL);
          if (v71)
          {
            v70.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v72);
            *((void *)this + 6) = v73;
            uint64_t v74 = *(int *)(v73 + 40);
            if (!v74) {
              return;
            }
          }
          else
          {
            v70.n128_f64[0] = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v72);
            *((void *)this + 6) = v73;
            uint64_t v74 = *(int *)(v73 + 40);
            if (!v74) {
              return;
            }
          }
LABEL_195:
          v169 = *(int **)(v73 + 48);
          uint64_t v170 = 4 * v74;
          while (1)
          {
            v191 = v169;
            uint64_t v171 = *(void *)(a1 + 24);
            if (!v171) {
              break;
            }
            (*(void (**)(uint64_t, int **, __n128))(*(void *)v171 + 48))(v171, &v191, v70);
            ++v169;
            v170 -= 4;
            if (!v170) {
              return;
            }
          }
          goto LABEL_224;
        }
      }
      uint64_t v73 = *((void *)this + 6);
      uint64_t v74 = *(int *)(v73 + 40);
      if (!v74) {
        return;
      }
      goto LABEL_195;
    case 0x18:
      uint64_t v75 = *((void *)this + 6);
      uint64_t v76 = *(int *)(v75 + 16);
      if (!v76) {
        return;
      }
      v77 = *(int **)(v75 + 24);
      uint64_t v78 = 4 * v76;
      while (1)
      {
        v191 = v77;
        uint64_t v79 = *(void *)(a1 + 24);
        if (!v79) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v79 + 48))(v79, &v191);
        ++v77;
        v78 -= 4;
        if (!v78) {
          return;
        }
      }
      goto LABEL_224;
    case 0x19:
      uint64_t v80 = *((void *)this + 6);
      uint64_t v81 = *(int *)(v80 + 16);
      if (!v81) {
        return;
      }
      v82 = *(int **)(v80 + 24);
      uint64_t v83 = 4 * v81;
      while (1)
      {
        v191 = v82;
        uint64_t v84 = *(void *)(a1 + 24);
        if (!v84) {
          break;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v84 + 48))(v84, &v191);
        ++v82;
        v83 -= 4;
        if (!v83) {
          return;
        }
      }
      goto LABEL_224;
    case 0x1B:
      uint64_t v85 = *((void *)this + 6);
      uint64_t v86 = *(void *)(v85 + 40);
      if (!v86)
      {
        uint64_t v87 = *(void *)(v85 + 8);
        v88 = (google::protobuf::Arena *)(v87 & 0xFFFFFFFFFFFFFFFELL);
        if (v87) {
          v88 = *(google::protobuf::Arena **)v88;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v88);
        *(void *)(v85 + 40) = v86;
      }
      uint64_t v89 = *(int *)(v86 + 16);
      if (!v89) {
        goto LABEL_95;
      }
      v90 = *(int **)(v86 + 24);
      uint64_t v91 = 4 * v89;
      do
      {
        v191 = v90;
        uint64_t v92 = *(void *)(a1 + 24);
        if (!v92) {
          goto LABEL_224;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v92 + 48))(v92, &v191);
        ++v90;
        v91 -= 4;
      }
      while (v91);
LABEL_95:
      for (uint64_t i = 0; ; ++i)
      {
        if (*((_DWORD *)this + 15) == 27)
        {
          uint64_t v94 = *((void *)this + 6);
          if (i >= *(int *)(v94 + 24)) {
            return;
          }
          uint64_t v95 = *(void *)(*(void *)(v94 + 32) + 8 * i + 8);
          uint64_t v96 = *(int *)(v95 + 16);
          if (v96) {
            goto LABEL_105;
          }
        }
        else
        {
          if (i >= dword_26AEE1850) {
            return;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 27;
          uint64_t v97 = *((void *)this + 1);
          v98 = (google::protobuf::Arena *)(v97 & 0xFFFFFFFFFFFFFFFELL);
          if (v97) {
            v98 = *(google::protobuf::Arena **)v98;
          }
          v99 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v98);
          *((void *)this + 6) = v99;
          uint64_t v95 = *(void *)(*((void *)v99 + 4) + 8 * i + 8);
          uint64_t v96 = *(int *)(v95 + 16);
          if (v96)
          {
LABEL_105:
            v100 = *(int **)(v95 + 24);
            uint64_t v101 = 4 * v96;
            while (1)
            {
              v191 = v100;
              uint64_t v102 = *(void *)(a1 + 24);
              if (!v102) {
                break;
              }
              (*(void (**)(uint64_t, int **))(*(void *)v102 + 48))(v102, &v191);
              ++v100;
              v101 -= 4;
              if (!v101) {
                goto LABEL_96;
              }
            }
LABEL_224:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
LABEL_96:
        ;
      }
    case 0x1C:
      uint64_t v103 = *((void *)this + 6);
      uint64_t v104 = *(void *)(v103 + 40);
      if (!v104)
      {
        uint64_t v105 = *(void *)(v103 + 8);
        v106 = (google::protobuf::Arena *)(v105 & 0xFFFFFFFFFFFFFFFELL);
        if (v105) {
          v106 = *(google::protobuf::Arena **)v106;
        }
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v106);
        *(void *)(v103 + 40) = v104;
      }
      uint64_t v107 = *(int *)(v104 + 16);
      if (!v107) {
        goto LABEL_117;
      }
      v108 = *(int **)(v104 + 24);
      uint64_t v109 = 4 * v107;
      do
      {
        v191 = v108;
        uint64_t v110 = *(void *)(a1 + 24);
        if (!v110) {
          goto LABEL_224;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v110 + 48))(v110, &v191);
        ++v108;
        v109 -= 4;
      }
      while (v109);
LABEL_117:
      uint64_t v111 = 0;
      while (2)
      {
        if (*((_DWORD *)this + 15) == 28)
        {
          uint64_t v112 = *((void *)this + 6);
          if (v111 >= *(int *)(v112 + 24)) {
            return;
          }
          uint64_t v113 = *(void *)(*(void *)(v112 + 32) + 8 * v111 + 8);
          uint64_t v114 = *(int *)(v113 + 16);
          if (!v114) {
            goto LABEL_118;
          }
        }
        else
        {
          if (v111 >= dword_26AEE1850) {
            return;
          }
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
          *((_DWORD *)this + 15) = 28;
          uint64_t v115 = *((void *)this + 1);
          v116 = (google::protobuf::Arena *)(v115 & 0xFFFFFFFFFFFFFFFELL);
          if (v115) {
            v116 = *(google::protobuf::Arena **)v116;
          }
          v117 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v116);
          *((void *)this + 6) = v117;
          uint64_t v113 = *(void *)(*((void *)v117 + 4) + 8 * v111 + 8);
          uint64_t v114 = *(int *)(v113 + 16);
          if (!v114)
          {
LABEL_118:
            ++v111;
            continue;
          }
        }
        break;
      }
      v118 = *(int **)(v113 + 24);
      uint64_t v119 = 4 * v114;
      do
      {
        v191 = v118;
        uint64_t v120 = *(void *)(a1 + 24);
        if (!v120) {
          goto LABEL_224;
        }
        (*(void (**)(uint64_t, int **))(*(void *)v120 + 48))(v120, &v191);
        ++v118;
        v119 -= 4;
      }
      while (v119);
      goto LABEL_118;
    default:
      return;
  }
}

void operations_research::sat::ApplyToAllIntervalIndices(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 60);
  switch(v4)
  {
    case 22:
      uint64_t v10 = *(void *)(a2 + 48);
      uint64_t v11 = *(int *)(v10 + 16);
      if (!v11) {
        return;
      }
      uint64_t v12 = *(void *)(v10 + 24);
      uint64_t v13 = 4 * v11;
      while (1)
      {
        uint64_t v27 = v12;
        uint64_t v14 = *(void *)(a1 + 24);
        if (!v14) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 48))(v14, &v27);
        v12 += 4;
        v13 -= 4;
        if (!v13) {
          return;
        }
      }
      goto LABEL_29;
    case 21:
      uint64_t v15 = *(void *)(a2 + 48);
      uint64_t v16 = *(int *)(v15 + 16);
      if (!v16) {
        goto LABEL_19;
      }
      uint64_t v17 = *(void *)(v15 + 24);
      uint64_t v18 = 4 * v16;
      do
      {
        uint64_t v27 = v17;
        uint64_t v19 = *(void *)(a1 + 24);
        if (!v19) {
          goto LABEL_29;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v19 + 48))(v19, &v27);
        v17 += 4;
        v18 -= 4;
      }
      while (v18);
      if (*(_DWORD *)(a2 + 60) != 21)
      {
        operations_research::sat::ConstraintProto::clear_constraint(a2);
        *(_DWORD *)(a2 + 60) = 21;
        uint64_t v22 = *(void *)(a2 + 8);
        __n128 v23 = (google::protobuf::Arena **)(v22 & 0xFFFFFFFFFFFFFFFELL);
        if (v22)
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>(*v23);
          *(void *)(a2 + 48) = v20;
          uint64_t v21 = *(int *)(v20 + 40);
          if (!v21) {
            return;
          }
        }
        else
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlap2DConstraintProto>((google::protobuf::Arena *)v23);
          *(void *)(a2 + 48) = v20;
          uint64_t v21 = *(int *)(v20 + 40);
          if (!v21) {
            return;
          }
        }
      }
      else
      {
LABEL_19:
        uint64_t v20 = *(void *)(a2 + 48);
        uint64_t v21 = *(int *)(v20 + 40);
        if (!v21) {
          return;
        }
      }
      uint64_t v24 = *(void *)(v20 + 48);
      uint64_t v25 = 4 * v21;
      while (1)
      {
        uint64_t v27 = v24;
        uint64_t v26 = *(void *)(a1 + 24);
        if (!v26) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 48))(v26, &v27);
        v24 += 4;
        v25 -= 4;
        if (!v25) {
          return;
        }
      }
LABEL_29:
      std::__throw_bad_function_call[abi:ne180100]();
    case 20:
      uint64_t v5 = *(void *)(a2 + 48);
      uint64_t v6 = *(int *)(v5 + 16);
      if (v6)
      {
        uint64_t v7 = *(void *)(v5 + 24);
        uint64_t v8 = 4 * v6;
        while (1)
        {
          uint64_t v27 = v7;
          uint64_t v9 = *(void *)(a1 + 24);
          if (!v9) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v27);
          v7 += 4;
          v8 -= 4;
          if (!v8) {
            return;
          }
        }
        goto LABEL_29;
      }
      break;
  }
}

uint64_t operations_research::sat::ConstraintCaseName@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 6:
      __break(1u);
      JUMPOUT(0x23CCA2128);
    case 3:
      a2[23] = 7;
      strcpy(a2, "kBoolOr");
      break;
    case 4:
      a2[23] = 8;
      strcpy(a2, "kBoolAnd");
      break;
    case 5:
      a2[23] = 8;
      strcpy(a2, "kBoolXor");
      break;
    case 7:
      a2[23] = 7;
      strcpy(a2, "kIntDiv");
      break;
    case 8:
      a2[23] = 7;
      strcpy(a2, "kIntMod");
      break;
    case 9:
      a2[23] = 7;
      strcpy(a2, "kIntMax");
      break;
    case 10:
      a2[23] = 7;
      strcpy(a2, "kIntMin");
      break;
    case 11:
      a2[23] = 8;
      strcpy(a2, "kIntProd");
      break;
    case 12:
      a2[23] = 7;
      strcpy(a2, "kLinear");
      break;
    case 13:
      a2[23] = 8;
      strcpy(a2, "kAllDiff");
      break;
    case 14:
      a2[23] = 8;
      strcpy(a2, "kElement");
      break;
    case 15:
      a2[23] = 8;
      strcpy(a2, "kCircuit");
      break;
    case 16:
      a2[23] = 6;
      strcpy(a2, "kTable");
      break;
    case 17:
      a2[23] = 10;
      strcpy(a2, "kAutomaton");
      break;
    case 18:
      a2[23] = 8;
      strcpy(a2, "kInverse");
      break;
    case 19:
      a2[23] = 9;
      strcpy(a2, "kInterval");
      break;
    case 20:
      a2[23] = 10;
      strcpy(a2, "kNoOverlap");
      break;
    case 21:
      a2[23] = 12;
      strcpy(a2, "kNoOverlap2D");
      break;
    case 22:
      a2[23] = 11;
      strcpy(a2, "kCumulative");
      break;
    case 23:
      a2[23] = 7;
      strcpy(a2, "kRoutes");
      break;
    case 24:
      a2[23] = 10;
      strcpy(a2, "kReservoir");
      break;
    case 25:
      a2[23] = 16;
      strcpy(a2, "kCircuitCovering");
      break;
    case 26:
      a2[23] = 10;
      strcpy(a2, "kAtMostOne");
      break;
    case 27:
      a2[23] = 7;
      strcpy(a2, "kLinMax");
      break;
    case 28:
      a2[23] = 7;
      strcpy(a2, "kLinMin");
      break;
    default:
      a2[23] = 6;
      strcpy(a2, "kEmpty");
      break;
  }
  return result;
}

void operations_research::sat::UsedVariables(operations_research::sat *this@<X0>, void *a2@<X8>)
{
  operations_research::sat::GetReferencesUsedByConstraint(this, (uint64_t)&v71);
  uint64_t v5 = v72;
  if (v71 != v72)
  {
    unint64_t v6 = (char *)v72 - (unsigned char *)v71 - 4;
    uint64_t v7 = (int *)v71;
    if (v6 < 0x1C) {
      goto LABEL_108;
    }
    uint64_t v8 = (v6 >> 2) + 1;
    uint64_t v7 = (int *)((char *)v71 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8));
    uint64_t v9 = (int8x16_t *)((char *)v71 + 16);
    uint64_t v10 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v11 = vmaxq_s32((int32x4_t)vmvnq_s8(*v9), *(int32x4_t *)v9);
      v9[-1] = (int8x16_t)vmaxq_s32((int32x4_t)vmvnq_s8(v9[-1]), (int32x4_t)v9[-1]);
      *uint64_t v9 = (int8x16_t)v11;
      v9 += 2;
      v10 -= 8;
    }
    while (v10);
    if (v8 != (v8 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_108:
      do
      {
        int v12 = *v7;
        if (~*v7 > *v7) {
          int v12 = ~v12;
        }
        *v7++ = v12;
      }
      while (v7 != v5);
    }
  }
  uint64_t v69 = a2;
  __n128 v70 = this;
  uint64_t v13 = (int *)__p;
  uint64_t v14 = v75;
  if (__p != v75)
  {
    while (1)
    {
      int v16 = ~*v13 <= *v13 ? *v13 : ~*v13;
      if (v5 >= v73) {
        break;
      }
      *uint64_t v5 = v16;
      uint64_t v15 = v5 + 1;
LABEL_12:
      uint64_t v72 = v15;
      ++v13;
      uint64_t v5 = v15;
      if (v13 == v14) {
        goto LABEL_44;
      }
    }
    uint64_t v17 = (int *)v71;
    int64_t v18 = (char *)v5 - (unsigned char *)v71;
    uint64_t v19 = ((char *)v5 - (unsigned char *)v71) >> 2;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = (char *)v73 - (unsigned char *)v71;
    if (((char *)v73 - (unsigned char *)v71) >> 1 > v20) {
      unint64_t v20 = v21 >> 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __n128 v23 = operator new(4 * v22);
      uint64_t v24 = (int *)&v23[4 * v19];
      int *v24 = v16;
      uint64_t v15 = v24 + 1;
      if (v5 == v17) {
        goto LABEL_31;
      }
    }
    else
    {
      __n128 v23 = 0;
      uint64_t v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v16;
      uint64_t v15 = (int *)(4 * v19 + 4);
      if (v5 == v17) {
        goto LABEL_31;
      }
    }
    unint64_t v25 = (char *)(v5 - 1) - (char *)v17;
    if (v25 >= 0xBC)
    {
      if (&v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4])
      {
        uint64_t v26 = v5;
      }
      else if ((int *)((char *)v5 - (v25 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v5 - 1)
      {
        uint64_t v26 = v5;
      }
      else if ((unint64_t)((char *)v5 - v23 - v18) >= 0x20)
      {
        uint64_t v28 = (v25 >> 2) + 1;
        uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v26 = &v5[v29 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v24 = (int *)((char *)v24 - v29);
        uint64_t v30 = &v23[4 * v19 - 16];
        uint64_t v31 = v5 - 4;
        uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          _OWORD *v30 = v33;
          v30 -= 2;
          v31 -= 8;
          v32 -= 8;
        }
        while (v32);
        if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_31:
          uint64_t v71 = v24;
          uint64_t v72 = v15;
          uint64_t v73 = (int *)&v23[4 * v22];
          if (v17) {
            operator delete(v17);
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v26 = v5;
      }
    }
    else
    {
      uint64_t v26 = v5;
    }
    do
    {
      int v27 = *--v26;
      *--uint64_t v24 = v27;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v15 = v5;
LABEL_44:
  uint64_t v34 = *((int *)v70 + 4);
  if (v34)
  {
    uint64_t v35 = (int *)*((void *)v70 + 3);
    uint64_t v36 = &v35[v34];
    while (1)
    {
      int v38 = ~*v35 <= *v35 ? *v35 : ~*v35;
      if (v15 >= v73) {
        break;
      }
      *uint64_t v15 = v38;
      uint64_t v37 = (uint64_t)(v15 + 1);
LABEL_47:
      uint64_t v72 = (int *)v37;
      ++v35;
      uint64_t v15 = (int *)v37;
      if (v35 == v36) {
        goto LABEL_78;
      }
    }
    uint64_t v39 = (int *)v71;
    int64_t v40 = (char *)v15 - (unsigned char *)v71;
    uint64_t v41 = ((char *)v15 - (unsigned char *)v71) >> 2;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = (char *)v73 - (unsigned char *)v71;
    if (((char *)v73 - (unsigned char *)v71) >> 1 > v42) {
      unint64_t v42 = v43 >> 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v45 = operator new(4 * v44);
      uint64_t v46 = (int *)&v45[4 * v41];
      *uint64_t v46 = v38;
      uint64_t v37 = (uint64_t)(v46 + 1);
      if (v15 == v39) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v38;
      uint64_t v37 = 4 * v41 + 4;
      if (v15 == v39) {
        goto LABEL_66;
      }
    }
    unint64_t v47 = (char *)(v15 - 1) - (char *)v39;
    if (v47 >= 0xBC)
    {
      if (&v45[v40 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
      {
        uint64_t v48 = v15;
      }
      else if ((int *)((char *)v15 - (v47 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v15 - 1)
      {
        uint64_t v48 = v15;
      }
      else if ((unint64_t)((char *)v15 - v45 - v40) >= 0x20)
      {
        uint64_t v50 = (v47 >> 2) + 1;
        uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v48 = &v15[v51 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v46 = (int *)((char *)v46 - v51);
        uint64_t v52 = &v45[4 * v41 - 16];
        uint64_t v53 = (long long *)(v15 - 4);
        uint64_t v54 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v55 = *v53;
          *(v52 - 1) = *(v53 - 1);
          *uint64_t v52 = v55;
          v52 -= 2;
          v53 -= 2;
          v54 -= 8;
        }
        while (v54);
        if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_66:
          uint64_t v71 = v46;
          uint64_t v72 = (int *)v37;
          uint64_t v73 = (int *)&v45[4 * v44];
          if (v39) {
            operator delete(v39);
          }
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v48 = v15;
      }
    }
    else
    {
      uint64_t v48 = v15;
    }
    do
    {
      int v49 = *--v48;
      *--uint64_t v46 = v49;
    }
    while (v48 != v39);
    goto LABEL_66;
  }
LABEL_78:
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v56 = (char *)v72;
  if (v71 != v72)
  {
    uint64_t v57 = (int *)((char *)v71 + 4);
    while (v57 != v72)
    {
      int v58 = *(v57 - 1);
      int v59 = *v57++;
      if (v58 == v59)
      {
        int v60 = v57 - 2;
        while (v57 != (int *)v56)
        {
          int v61 = v58;
          int v58 = *v57;
          if (v61 != *v57)
          {
            v60[1] = v58;
            ++v60;
          }
          ++v57;
        }
        uint64_t v64 = (char *)(v60 + 1);
        uint64_t v65 = (char *)(v56 - (char *)(v60 + 1));
        if (v56 == (char *)(v60 + 1)) {
          break;
        }
        if (v56 != &v65[(void)v64]) {
          memmove(v60 + 1, &v65[(void)v64], 0);
        }
        uint64_t v56 = v64;
        uint64_t v72 = (int *)v64;
        void *v69 = 0;
        v69[1] = 0;
        v69[2] = 0;
        uint64_t v62 = v71;
        if (v56 != v71) {
          goto LABEL_98;
        }
        goto LABEL_91;
      }
    }
  }
  void *v69 = 0;
  v69[1] = 0;
  v69[2] = 0;
  uint64_t v62 = v71;
  if (v56 == v71)
  {
LABEL_91:
    uint64_t v63 = (int *)__p;
    if (!__p) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }
LABEL_98:
  int64_t v66 = v56 - v62;
  if (v56 - v62 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  int v67 = (char *)operator new(v56 - v62);
  void *v69 = v67;
  uint64_t v68 = &v67[4 * (v66 >> 2)];
  v69[2] = v68;
  memcpy(v67, v62, v66);
  v69[1] = v68;
  uint64_t v63 = (int *)__p;
  if (__p)
  {
LABEL_92:
    uint64_t v75 = v63;
    operator delete(v63);
    uint64_t v62 = v71;
  }
LABEL_93:
  if (v62)
  {
    uint64_t v72 = (int *)v62;
    operator delete(v62);
  }
}

void sub_23CCA2720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::UsedIntervals@<X0>(operations_research::sat *this@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v5 = *((_DWORD *)this + 15);
  if (v5 != 20)
  {
    if (v5 == 21)
    {
      std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a2, 0, *(char **)(*((void *)this + 6) + 24), (char *)(*(void *)(*((void *)this + 6) + 24) + 4 * *(int *)(*((void *)this + 6) + 16)), *(int *)(*((void *)this + 6) + 16));
      if (*((_DWORD *)this + 15) == 21) {
        uint64_t v10 = (uint64_t *)*((void *)this + 6);
      }
      else {
        uint64_t v10 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
      }
      uint64_t v8 = *((int *)v10 + 10);
      uint64_t v9 = (char *)v10[6];
      unint64_t v6 = (void *)a2[1];
      goto LABEL_9;
    }
    if (v5 != 22) {
      goto LABEL_10;
    }
  }
  unint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *(int *)(v7 + 16);
  uint64_t v9 = *(char **)(v7 + 24);
LABEL_9:
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a2, v6, v9, &v9[4 * v8], v8);
LABEL_10:
  uint64_t result = std::__sort<std::__less<int,int> &,int *>();
  int v12 = (char *)a2[1];
  if ((char *)*a2 != v12)
  {
    uint64_t v13 = (char *)(*a2 + 4);
    while (v13 != v12)
    {
      int v14 = *((_DWORD *)v13 - 1);
      int v15 = *(_DWORD *)v13;
      v13 += 4;
      if (v14 == v15)
      {
        int v16 = v13 - 8;
        while (v13 != v12)
        {
          int v17 = v14;
          int v14 = *(_DWORD *)v13;
          if (v17 != *(_DWORD *)v13)
          {
            *((_DWORD *)v16 + 1) = v14;
            v16 += 4;
          }
          v13 += 4;
        }
        unint64_t v18 = (unint64_t)(v16 + 4);
        int64_t v19 = v12 - (v16 + 4);
        if (v12 != v16 + 4)
        {
          if (v12 != (char *)(v18 + v19)) {
            uint64_t result = (uint64_t)memmove(v16 + 4, (const void *)(v18 + v19), 0);
          }
          a2[1] = v18;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_23CCA28D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ComputeInnerObjective(operations_research::sat *this, const operations_research::sat::CpObjectiveProto *a2, const operations_research::sat::CpSolverResponse *a3)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  if ((int)v3 < 1) {
    return 0;
  }
  int v5 = *((_DWORD *)a2 + 4);
  int v4 = (char *)a2 + 16;
  if (v5) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v4 + 24;
  }
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)v6 + 1);
  if (v3 == 1)
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
LABEL_21:
    __n128 v23 = (_DWORD *)(v8 + 4 * v10);
    uint64_t v24 = v3 - v10;
    unint64_t v25 = (uint64_t *)(v7 + 8 * v10);
    do
    {
      uint64_t v27 = *v25++;
      uint64_t v26 = v27;
      LODWORD(v27) = *v23++;
      int v28 = v27;
      if (~v27 <= (int)v27) {
        int v29 = v28;
      }
      else {
        int v29 = ~v28;
      }
      if (v28 < 0) {
        uint64_t v26 = -v26;
      }
      result += v26 * *(void *)(v9 + 8 * v29);
      --v24;
    }
    while (v24);
    return result;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = v3 & 0xFFFFFFFE;
  int v14 = (uint64_t *)(v7 + 8);
  int v15 = (int *)(v8 + 4);
  uint64_t v16 = v10;
  do
  {
    uint64_t v17 = *(v14 - 1);
    uint64_t v18 = *v14;
    int v19 = *(v15 - 1);
    int v20 = *v15;
    if (~v19 <= v19) {
      int v21 = *(v15 - 1);
    }
    else {
      int v21 = ~v19;
    }
    if (~*v15 <= v20) {
      int v22 = *v15;
    }
    else {
      int v22 = ~v20;
    }
    if (v19 < 0) {
      uint64_t v17 = -v17;
    }
    if (v20 < 0) {
      uint64_t v18 = -v18;
    }
    v12 += v17 * *(void *)(v9 + 8 * v21);
    v13 += v18 * *(void *)(v9 + 8 * v22);
    v14 += 2;
    v15 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t result = v13 + v12;
  if (v10 != v3) {
    goto LABEL_21;
  }
  return result;
}

void operations_research::sat::Cumulative(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(const void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int64_t v11 = v9 - *(void *)a1;
  if (v9 == *(void *)a1)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a1);
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    memcpy(v12, v10, v11);
  }
  int v15 = *(const void **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  int64_t v16 = v14 - *(void *)a2;
  if (v14 == *(void *)a2)
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v16 >> 2) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(v16);
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, v16);
  }
  long long v26 = *a3;
  LODWORD(v27) = *((_DWORD *)a3 + 4);
  *((void *)&v27 + 1) = a4;
  *(void *)(a5 + 24) = 0;
  int v19 = (char *)operator new(0x58uLL);
  *(void *)int v19 = &unk_26F0C2188;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  uint64_t v20 = v13 - v12;
  if (v13 != v12)
  {
    if (v20 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v21 = (char *)operator new(v13 - v12);
    *((void *)v19 + 1) = v21;
    int v22 = &v21[4 * (v20 >> 2)];
    *((void *)v19 + 3) = v22;
    memcpy(v21, v12, v13 - v12);
    *((void *)v19 + 2) = v22;
  }
  *((void *)v19 + 4) = 0;
  *((void *)v19 + 5) = 0;
  *((void *)v19 + 6) = 0;
  int64_t v23 = v18 - v17;
  if (v18 != v17)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v23 >> 2) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = (char *)operator new(v23);
    *((void *)v19 + 4) = v24;
    unint64_t v25 = &v24[4 * (v23 >> 2)];
    *((void *)v19 + 6) = v25;
    memcpy(v24, v17, v23);
    *((void *)v19 + 5) = v25;
  }
  *(_OWORD *)(v19 + 56) = v26;
  *(_OWORD *)(v19 + 72) = v27;
  *(void *)(a5 + 24) = v19;
  if (v17) {
    operator delete(v17);
  }
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_23CCA2C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCA2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *v11;
  if (*v11)
  {
    v9[5] = v13;
    operator delete(v13);
  }
  uint64_t v14 = *v10;
  if (*v10)
  {
    v9[2] = v14;
    operator delete(v14);
  }
  operator delete(v9);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a9);
  _Unwind_Resume(a1);
}

void sub_23CCA2CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2188;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2188;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = &unk_26F0C2188;
  std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CCA2E10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C2188;
  return std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    return;
  }
  uint64_t v3 = a1;
  int v4 = (operations_research::sat::LinearConstraint *)*a2;
  int v5 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  uint64_t v73 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v4);
  uint64_t v71 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v4);
  operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)v4);
  uint64_t v6 = *(void *)(v3 + 32);
  __n128 v70 = (void *)(v3 + 32);
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v74 = v2;
  uint64_t v75 = v3;
  uint64_t v79 = v5;
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (void *)((char *)v4 + 32);
    uint64_t v78 = (long long *)(v3 + 56);
    v77 = (void *)((char *)v4 + 32);
    uint64_t v72 = v4;
    do
    {
      uint64_t v10 = *(int *)(*v2 + 4 * v8);
      int v11 = *(_DWORD *)(v5[11] + 4 * v10);
      if (v11 == -1)
      {
        if (*(void *)(v5[14] + 8 * v10))
        {
LABEL_10:
          uint64_t v12 = (void *)*v9;
          if (!*v9) {
            goto LABEL_21;
          }
          uint64_t v13 = v9;
          do
          {
            unint64_t v14 = v12[4];
            BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
            if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
              int64_t v16 = v12;
            }
            else {
              int64_t v16 = v12 + 1;
            }
            if (v15) {
              uint64_t v13 = v12;
            }
            uint64_t v12 = (void *)*v16;
          }
          while (*v16);
          if (v13 != v9
            && v13[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          {
            uint64_t v17 = v13[5];
          }
          else
          {
LABEL_21:
            uint64_t v17 = 0;
          }
          *(void *)&long long v86 = v17;
          *((void *)&v86 + 1) = 0x8000000000000002;
          uint64_t v18 = (long long *)(v6 + 20 * v8);
          long long v87 = 0u;
          long long __p = 0u;
          uint64_t v89 = 0;
          long long v19 = *v18;
          int v85 = *((_DWORD *)v18 + 4);
          long long v84 = v19;
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v86, (int *)&v84, 1);
          long long v82 = *v78;
          int v83 = *((_DWORD *)v78 + 4);
          operations_research::sat::LinearConstraintBuilder::AddTerm(&v86, (int *)&v82, -1);
          operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v86, (uint64_t)v90);
          long long v80 = 0uLL;
          uint64_t v81 = 0;
          uint64_t v21 = *v2;
          uint64_t v22 = *(int *)(*v2 + 4 * v8);
          int v23 = *(_DWORD *)(v5[2] + 4 * v22);
          if (v23 != -1)
          {
            uint64_t v24 = (char *)operator new(4uLL);
            *(_DWORD *)uint64_t v24 = v23;
            unint64_t v25 = v24 + 4;
            *(void *)&long long v80 = v24;
            uint64_t v81 = v24 + 4;
            uint64_t v22 = *(int *)(v21 + 4 * v8);
            *((void *)&v80 + 1) = v24 + 4;
            unsigned int v26 = *(_DWORD *)(v5[11] + 4 * v22);
            if (v26 != -1) {
              goto LABEL_24;
            }
LABEL_28:
            if (!*(void *)(v5[14] + 8 * v22)) {
              goto LABEL_29;
            }
LABEL_25:
            long long v27 = v25;
            int v28 = v24;
            uint64_t v9 = v77;
            if (v24 != v27)
            {
LABEL_26:
              operations_research::sat::LoadConditionalLinearConstraint(v28, (int *)((v27 - v28) >> 2), (operations_research::sat *)v90, v4);
LABEL_43:
              if (v28) {
                operator delete(v28);
              }
              if (v93)
              {
                uint64_t v94 = v93;
                operator delete(v93);
              }
              int v5 = v79;
              if (v91)
              {
                uint64_t v92 = v91;
                operator delete(v91);
              }
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              uint64_t v6 = *(void *)(v3 + 32);
              uint64_t v7 = *(void *)(v3 + 40);
              goto LABEL_5;
            }
LABEL_42:
            operations_research::sat::LoadLinearConstraint((operations_research::sat *)v90, v4, v20);
            goto LABEL_43;
          }
          unint64_t v25 = 0;
          uint64_t v24 = 0;
          unsigned int v26 = *(_DWORD *)(v5[11] + 4 * v22);
          if (v26 == -1) {
            goto LABEL_28;
          }
LABEL_24:
          if (*(void *)(*(void *)(*v5 + 40) + 12 * (int)v26)) {
            goto LABEL_25;
          }
LABEL_29:
          int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v73, (const char *)(v26 | 0x100000000), 0);
          uint64_t v30 = v25 - v24;
          uint64_t v31 = (v25 - v24) >> 2;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          int v33 = AssociatedLiteral;
          if (v30 >> 1 > v32) {
            unint64_t v32 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          v76 &= 0xFFFFFFFF00000000;
          if (v34)
          {
            if (v34 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v35 = (char *)operator new(4 * v34);
            int v28 = &v35[4 * v31];
            *(_DWORD *)int v28 = v33;
            long long v27 = v28 + 4;
            if (v25 != v24)
            {
LABEL_38:
              unint64_t v36 = (v25 - 4 - v24) & 0xFFFFFFFFFFFFFFFCLL;
              int v28 = &v35[v30 - v36 - 4];
              memcpy(v28, &v25[-v36 - 4], v36 + 4);
            }
          }
          else
          {
            uint64_t v35 = 0;
            int v28 = (char *)(4 * v31);
            uint64_t v37 = (_DWORD *)(4 * v31);
            *uint64_t v37 = AssociatedLiteral;
            long long v27 = (char *)(v37 + 1);
            if (v25 != v24) {
              goto LABEL_38;
            }
          }
          int v4 = v72;
          uint64_t v9 = v77;
          *(void *)&long long v80 = v28;
          *((void *)&v80 + 1) = v27;
          uint64_t v81 = &v35[4 * v34];
          if (v24) {
            operator delete(v24);
          }
          uint64_t v2 = v74;
          uint64_t v3 = v75;
          if (v28 != v27) {
            goto LABEL_26;
          }
          goto LABEL_42;
        }
      }
      else if (*(void *)(*(void *)(*v5 + 40) + 12 * (v11 ^ 1)))
      {
        goto LABEL_10;
      }
LABEL_5:
      ++v8;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v7 - v6) >> 2) > v8);
  }
  uint64_t v39 = v70;
  uint64_t v38 = v71;
  if (*(void *)(v3 + 16) - *(void *)(v3 + 8) == 4) {
    return;
  }
  if (!*(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4)
                 + 444))
    goto LABEL_107;
  long long v86 = 0uLL;
  *(void *)&long long v87 = 0;
  uint64_t v41 = *(void *)(v3 + 8);
  uint64_t v40 = *(void *)(v3 + 16);
  if (v40 == v41) {
    goto LABEL_104;
  }
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  do
  {
    int v45 = *(_DWORD *)(v41 + 4 * v43);
    int v46 = *(_DWORD *)(v5[11] + 4 * v45);
    if (v46 == -1)
    {
      if (*(uint64_t *)(v5[14] + 8 * v45) < 1) {
        goto LABEL_60;
      }
    }
    else if (*(uint64_t *)(*(void *)(*v5 + 40) + 12 * v46) < 1)
    {
      goto LABEL_60;
    }
    unint64_t v47 = (int *)(*v39 + 20 * v43);
    uint64_t v48 = *(void *)(v47 + 3);
    if (*v47 != -1) {
      v48 += *(void *)(*(void *)(v38 + 40) + 12 * *v47) * *(void *)(v47 + 1);
    }
    int v49 = *(_DWORD *)(v3 + 56);
    uint64_t v50 = *(void *)(v3 + 68);
    if (v49 != -1) {
      v50 -= *(void *)(*(void *)(v38 + 40) + 12 * (v49 ^ 1)) * *(void *)(v3 + 60);
    }
    if (2 * v48 > v50)
    {
      if ((unint64_t)v42 < (unint64_t)v87)
      {
        *(_DWORD *)unint64_t v42 = v45;
        uint64_t v44 = (uint64_t)(v42 + 4);
      }
      else
      {
        uint64_t v51 = (char *)v86;
        uint64_t v52 = &v42[-v86];
        uint64_t v53 = (uint64_t)&v42[-v86] >> 2;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v87 - v86;
        if ((uint64_t)(v87 - v86) >> 1 > v54) {
          unint64_t v54 = v55 >> 1;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          if (v56 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v57 = operator new(4 * v56);
          int v58 = &v57[4 * v53];
          _DWORD *v58 = *(_DWORD *)(v41 + 4 * v43);
          uint64_t v44 = (uint64_t)(v58 + 1);
          if (v42 != v51)
          {
LABEL_80:
            unint64_t v59 = v42 - 4 - v51;
            if (v59 < 0xBC
              || &v52[(void)v57 - 4 - (v59 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[(void)v57 - 4]
              || &v42[-(v59 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v42 - 4
              || (unint64_t)(v42 - v57 - (void)v52) < 0x20)
            {
              int v60 = v42;
              int v5 = v79;
            }
            else
            {
              uint64_t v62 = (v59 >> 2) + 1;
              uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
              int v60 = &v42[-v63];
              int v58 = (_DWORD *)((char *)v58 - v63);
              uint64_t v64 = &v57[4 * v53 - 16];
              uint64_t v65 = v42 - 16;
              uint64_t v66 = v62 & 0x7FFFFFFFFFFFFFF8;
              int v5 = v79;
              do
              {
                long long v67 = *(_OWORD *)v65;
                *(v64 - 1) = *((_OWORD *)v65 - 1);
                *uint64_t v64 = v67;
                v64 -= 2;
                v65 -= 32;
                v66 -= 8;
              }
              while (v66);
              if (v62 == (v62 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_83:
                *(void *)&long long v86 = v58;
                *((void *)&v86 + 1) = v44;
                *(void *)&long long v87 = &v57[4 * v56];
                if (v51) {
                  goto LABEL_84;
                }
                goto LABEL_85;
              }
            }
            do
            {
              int v61 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--int v58 = v61;
            }
            while (v60 != v51);
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v57 = 0;
          int v58 = (_DWORD *)(4 * v53);
          *(_DWORD *)(4 * v53) = v45;
          uint64_t v44 = 4 * v53 + 4;
          if (v42 != v51) {
            goto LABEL_80;
          }
        }
        int v5 = v79;
        *(void *)&long long v86 = v58;
        *((void *)&v86 + 1) = v44;
        *(void *)&long long v87 = &v57[4 * v56];
        if (v51)
        {
LABEL_84:
          operator delete(v51);
          uint64_t v41 = *(void *)(v75 + 8);
          uint64_t v40 = *(void *)(v75 + 16);
        }
LABEL_85:
        uint64_t v39 = v70;
        uint64_t v38 = v71;
      }
      *((void *)&v86 + 1) = v44;
      unint64_t v42 = (char *)v44;
      uint64_t v3 = v75;
    }
LABEL_60:
    ++v43;
  }
  while (v43 < (v40 - v41) >> 2);
  if ((unint64_t)&v42[-v86] > 4)
  {
    operations_research::sat::Disjunctive((uint64_t)&v86, (uint64_t)v90);
    *(void *)&long long v80 = v4;
    if (!v92) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, long long *))(*v92 + 48))(v92, &v80);
    if (v92 == v90)
    {
      (*(void (**)(void *))(v90[0] + 32))(v90);
    }
    else if (v92)
    {
      (*(void (**)(void *))(*v92 + 40))(v92);
    }
  }
LABEL_104:
  uint64_t v68 = *((void *)&v86 + 1) - v86;
  uint64_t v69 = *(void *)(v3 + 16) - *(void *)(v3 + 8);
  if ((void)v86)
  {
    *((void *)&v86 + 1) = v86;
    operator delete((void *)v86);
  }
  if (v68 != v69)
  {
LABEL_107:
    if (!*(void *)(v3 + 80)) {
      operator new();
    }
    operator new();
  }
}

void sub_23CCA392C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

void sub_23CCA3950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCA3AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a41) {
    JUMPOUT(0x23CCA3AB0);
  }
  JUMPOUT(0x23CCA3A64);
}

uint64_t std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_E"
                     "iEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVar"
                                "iable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26"
                                "SchedulingConstraintHelperEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat10CumulativeERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS0_16AffineExpressionENS7_ISC_EEEESC_PNS0_26SchedulingConstraintHelperEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,std::allocator<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::Cumulative(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<operations_research::sat::AffineExpression> const&,operations_research::sat::AffineExpression,operations_research::sat::SchedulingConstraintHelper *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 2) >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  long long v14 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  return a1;
}

void sub_23CCA3C38(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::LoadLinearConstraint(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, operations_research::sat::Model *a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = (uint64_t *)this;
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v5 = (unsigned int **)((char *)this + 16);
  if (*((void *)this + 2) == *((void *)this + 3))
  {
    if (*(uint64_t *)this > 0 || (*((void *)this + 1) & 0x8000000000000000) != 0) {
      *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2) + 496) = 1;
    }
    return;
  }
  long long __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  int64_t v6 = (uint64_t *)*((void *)this + 6);
  if (v7 == v6)
  {
    long long __p = 0;
    uint64_t v27 = *((void *)this + 1);
    if (v27 >= 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
  uint64_t v30 = (unsigned int **)((char *)this + 16);
  unint64_t v32 = (uint64_t *)*((void *)this + 6);
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v34;
  do
  {
    while (1)
    {
      uint64_t v12 = *v7;
      if (v8 >= v9) {
        break;
      }
      *(void *)unint64_t v8 = v12;
      v8 += 8;
      uint64_t v11 = (uint64_t)v8;
      if (++v7 == v6) {
        goto LABEL_34;
      }
    }
    uint64_t v13 = (v8 - v10) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
    {
      uint64_t v34 = v11;
      uint64_t v35 = v9;
      long long __p = v10;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v9 - v10) >> 2 > v14) {
      unint64_t v14 = (v9 - v10) >> 2;
    }
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 61)
      {
        uint64_t v34 = v11;
        uint64_t v35 = v9;
        long long __p = v10;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v16 = operator new(8 * v15);
      uint64_t v17 = &v16[8 * v13];
      *(void *)uint64_t v17 = v12;
      uint64_t v11 = (uint64_t)(v17 + 8);
      if (v8 == v10) {
        goto LABEL_20;
      }
    }
    else
    {
      int64_t v16 = 0;
      uint64_t v17 = (char *)(8 * v13);
      *(void *)(8 * v13) = v12;
      uint64_t v11 = 8 * v13 + 8;
      if (v8 == v10) {
        goto LABEL_20;
      }
    }
    unint64_t v18 = v8 - 8 - v10;
    if (v18 < 0x168)
    {
      long long v19 = v8;
      goto LABEL_19;
    }
    if (&v16[v8 - v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v8 - v10 - 8])
    {
      long long v19 = v8;
      do
      {
LABEL_19:
        uint64_t v20 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v10);
      goto LABEL_20;
    }
    if (&v8[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
    {
      long long v19 = v8;
      goto LABEL_19;
    }
    if ((unint64_t)(v10 - v16) < 0x20)
    {
      long long v19 = v8;
      goto LABEL_19;
    }
    uint64_t v21 = (v18 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    long long v19 = &v8[-v22];
    v17 -= v22;
    int v23 = &v16[8 * v13 - 16];
    uint64_t v24 = v8 - 16;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
LABEL_20:
    uint64_t v9 = &v16[8 * v15];
    if (v10) {
      operator delete(v10);
    }
    uint64_t v10 = v17;
    int64_t v6 = v32;
    ++v7;
    unint64_t v8 = (char *)v11;
  }
  while (v7 != v32);
LABEL_34:
  uint64_t v34 = v11;
  uint64_t v35 = v9;
  int v5 = v30;
  unint64_t v3 = a2;
  uint64_t v4 = (uint64_t *)this;
  long long __p = v10;
  uint64_t v27 = *((void *)this + 1);
  if (v27 >= 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_44;
  }
LABEL_40:
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(v5, (uint64_t **)&__p, v27, v39);
  unint64_t v36 = v3;
  if (!v40) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, const operations_research::sat::LinearConstraint **))(*v40 + 48))(v40, &v36);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
    uint64_t v28 = *v4;
    if (*v4 >= (uint64_t)0x8000000000000003) {
      goto LABEL_45;
    }
  }
  else
  {
    if (v40) {
      (*(void (**)(void))(*v40 + 40))();
    }
LABEL_44:
    uint64_t v28 = *v4;
    if (*v4 >= (uint64_t)0x8000000000000003)
    {
LABEL_45:
      operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>(v5, (uint64_t)&__p, v28, v37);
      unint64_t v36 = v3;
      if (!v38) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, const operations_research::sat::LinearConstraint **))(*v38 + 48))(v38, &v36);
      if (v38 == v37)
      {
        (*(void (**)(void *))(v37[0] + 32))(v37);
      }
      else if (v38)
      {
        (*(void (**)(void))(*v38 + 40))();
      }
    }
  }
  if (__p)
  {
    uint64_t v34 = (uint64_t)__p;
    operator delete(__p);
  }
}

void sub_23CCA40C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::LoadConditionalLinearConstraint(const void *a1, int *a2, operations_research::sat *this, operations_research::sat::LinearConstraint *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (*((void *)this + 2) != *((void *)this + 3))
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (4 * (void)a2 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int v33 = (char **)((char *)this + 16);
      uint64_t v7 = (char *)operator new(4 * (void)a2);
      unint64_t v8 = &v7[4 * ((4 * (uint64_t)a2) >> 2)];
      uint64_t v38 = v7;
      uint64_t v40 = v8;
      memcpy(v7, a1, 4 * (void)a2);
      uint64_t v39 = v8;
      long long __p = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v9 = (uint64_t *)*((void *)this + 5);
      uint64_t v10 = (uint64_t *)*((void *)this + 6);
      unint64_t v32 = (uint64_t *)this;
      if (v9 != v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        do
        {
          while (1)
          {
            uint64_t v14 = *v9;
            if (v11 >= v12) {
              break;
            }
            *(void *)uint64_t v11 = v14;
            v11 += 8;
            uint64_t v36 = (uint64_t)v11;
            if (++v9 == v10) {
              goto LABEL_36;
            }
          }
          uint64_t v15 = (v11 - v13) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v12 - v13) >> 2 > v16) {
            unint64_t v16 = (v12 - v13) >> 2;
          }
          if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            if (v17 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v18 = operator new(8 * v17);
            long long v19 = &v18[8 * v15];
            *long long v19 = v14;
            uint64_t v20 = (uint64_t)(v19 + 1);
            if (v11 == v13) {
              goto LABEL_22;
            }
          }
          else
          {
            unint64_t v18 = 0;
            long long v19 = (void *)(8 * v15);
            *(void *)(8 * v15) = v14;
            uint64_t v20 = 8 * v15 + 8;
            if (v11 == v13) {
              goto LABEL_22;
            }
          }
          unint64_t v21 = v11 - 8 - v13;
          if (v21 >= 0x168)
          {
            if (&v18[v11 - v13 - 8 - (v21 & 0xFFFFFFFFFFFFFFF8)] > &v18[v11 - v13 - 8])
            {
              uint64_t v22 = v11;
            }
            else if (&v11[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
            {
              uint64_t v22 = v11;
            }
            else if ((unint64_t)(v13 - v18) >= 0x20)
            {
              uint64_t v24 = (v21 >> 3) + 1;
              uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v22 = &v11[-v25];
              long long v19 = (void *)((char *)v19 - v25);
              long long v26 = &v18[8 * v15 - 16];
              uint64_t v27 = v11 - 16;
              uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v29 = *(_OWORD *)v27;
                *(v26 - 1) = *((_OWORD *)v27 - 1);
                *long long v26 = v29;
                v26 -= 2;
                v27 -= 32;
                v28 -= 4;
              }
              while (v28);
              if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_22;
              }
            }
            else
            {
              uint64_t v22 = v11;
            }
          }
          else
          {
            uint64_t v22 = v11;
          }
          do
          {
            uint64_t v23 = *((void *)v22 - 1);
            v22 -= 8;
            *--long long v19 = v23;
          }
          while (v22 != v13);
LABEL_22:
          uint64_t v12 = &v18[8 * v17];
          long long __p = v19;
          uint64_t v37 = v12;
          if (v13) {
            operator delete(v13);
          }
          uint64_t v13 = (char *)v19;
          uint64_t v36 = v20;
          ++v9;
          uint64_t v11 = (char *)v20;
        }
        while (v9 != v10);
      }
LABEL_36:
      uint64_t v30 = v32[1];
      if (v30 < 0x7FFFFFFFFFFFFFFELL)
      {
        operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>((uint64_t)&v38, v33, (uint64_t **)&__p, v30, (uint64_t)v44);
        uint64_t v41 = a4;
        if (!v45) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, operations_research::sat::LinearConstraint **))(*v45 + 48))(v45, &v41);
        if (v45 == v44)
        {
          (*(void (**)(void *))(v44[0] + 32))(v44);
          uint64_t v31 = *v32;
          if (*v32 >= (uint64_t)0x8000000000000003) {
            goto LABEL_42;
          }
          goto LABEL_57;
        }
        if (v45) {
          (*(void (**)(void))(*v45 + 40))();
        }
      }
      uint64_t v31 = *v32;
      if (*v32 >= (uint64_t)0x8000000000000003)
      {
LABEL_42:
        operations_research::sat::ConditionalWeightedSumGreaterOrEqual<std::vector<long long>>((uint64_t)&v38, v33, (uint64_t)&__p, v31, (uint64_t)v42);
        uint64_t v41 = a4;
        if (!v43) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, operations_research::sat::LinearConstraint **))(*v43 + 48))(v43, &v41);
        if (v43 == v42)
        {
          (*(void (**)(void *))(v42[0] + 32))(v42);
        }
        else if (v43)
        {
          (*(void (**)(void))(*v43 + 40))();
        }
      }
LABEL_57:
      if (__p)
      {
        uint64_t v36 = (uint64_t)__p;
        operator delete(__p);
      }
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      return;
    }
    if (*(uint64_t *)this > 0 || (*((void *)this + 1) & 0x8000000000000000) != 0)
    {
      int v46 = (void (**)(void **))&unk_26F0BD480;
      v47[0] = (int *)a1;
      v47[1] = a2;
      uint64_t v48 = (void **)&v46;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v47, (uint64_t)a4);
      if (v48 == (void **)&v46)
      {
        v46[4]((void **)&v46);
      }
      else if (v48)
      {
        (*((void (**)(void **))*v48 + 5))(v48);
      }
    }
  }
  else
  {
    operations_research::sat::LoadLinearConstraint(this, a4, this);
  }
}

void sub_23CCA46A0(_Unwind_Exception *a1)
{
  std::function<void ()(operations_research::sat::Model *)>::~function((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_23CCA46B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::TimeTablingPerTask>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C21F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::TimeTablingPerTask>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C21F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::TimeTableEdgeFinding>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2230;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::TimeTableEdgeFinding>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2230;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::AddCumulativeOverloadChecker(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a4);
  uint64_t v54 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  int v58 = 0;
  unint64_t v59 = 0;
  int v60 = 0;
  unint64_t v7 = a3[5] - a3[4];
  *(void *)uint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v55[0] = v7 >> 2;
  if (*(void *)v57 != v55[0]) {
    google::MakeCheckOpString<unsigned long,int>((int)v57, (int)v55, "demands.size() == num_tasks");
  }
  if ((int)(v7 >> 2) < 1) {
LABEL_81:
  }
    operator new();
  uint64_t v8 = 0;
  uint64_t v9 = (v7 >> 2);
  uint64_t v53 = a1;
  while (1)
  {
    while (1)
    {
      int v13 = *(_DWORD *)(a3[10] + 4 * v8);
      if (v13 == -1)
      {
        uint64_t v14 = (uint64_t *)(a3[13] + 8 * v8);
        goto LABEL_10;
      }
      if (!(*(void *)(*(void *)(v54 + 40) + 12 * v13) + *(void *)(*(void *)(v54 + 40) + 12 * (v13 ^ 1))))
      {
        uint64_t v14 = (uint64_t *)(*(void *)(a3[1] + 40) + 12 * v13);
LABEL_10:
        uint64_t v15 = 0;
        uint64_t v16 = *v14;
        int v13 = -1;
        goto LABEL_12;
      }
      uint64_t v16 = 0;
      uint64_t v15 = 1;
LABEL_12:
      *(_DWORD *)uint64_t v57 = v13;
      *(void *)&v57[4] = v15;
      *(void *)&v57[12] = v16;
      uint64_t v17 = *a1 + 20 * v8;
      int v18 = *(_DWORD *)(v17 + 16);
      *(_OWORD *)unint64_t v56 = *(_OWORD *)v17;
      *(_DWORD *)&v56[16] = v18;
      if (*(_DWORD *)v56 != -1) {
        break;
      }
      if (v13 == -1)
      {
        v55[0] = 0;
        if ((*(void *)&v56[12] & 0x8000000000000000) != 0) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v56[12], (int)v55, "demand.constant >= 0");
        }
        v55[0] = 0;
        if (v16 < 0) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v57[12], (int)v55, "duration.constant >= 0");
        }
        uint64_t v27 = v16 * *(void *)&v56[12];
        uint64_t v28 = v59;
        if (v59 >= v60)
        {
          uint64_t v37 = v58;
          unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((v59 - v58) >> 2);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v60 - v58) >> 2) > v39) {
            unint64_t v39 = 0x999999999999999ALL * ((v60 - v58) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v60 - v58) >> 2) >= 0x666666666666666) {
            unint64_t v40 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40 > 0xCCCCCCCCCCCCCCCLL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v41 = (char *)operator new(20 * v40);
          unint64_t v42 = &v41[4 * ((v59 - v58) >> 2)];
          *(_DWORD *)unint64_t v42 = -1;
          *(void *)(v42 + 4) = 0;
          *(void *)(v42 + 12) = v27;
          if (v28 == v37)
          {
            int v46 = v42 + 20;
            int v58 = &v41[4 * ((v28 - v37) >> 2)];
            unint64_t v59 = v42 + 20;
            int v60 = &v41[20 * v40];
            if (!v37) {
              goto LABEL_63;
            }
          }
          else
          {
            unint64_t v43 = &v41[20 * v38];
            do
            {
              long long v44 = *(_OWORD *)(v28 - 20);
              int v45 = v43 - 20;
              *((_DWORD *)v43 - 1) = *((_DWORD *)v28 - 1);
              *(_OWORD *)(v43 - 20) = v44;
              v28 -= 20;
              v43 -= 20;
            }
            while (v28 != v37);
            int v46 = v42 + 20;
            int v58 = v45;
            unint64_t v59 = v42 + 20;
            int v60 = &v41[20 * v40];
            if (!v37) {
              goto LABEL_63;
            }
          }
          operator delete(v37);
LABEL_63:
          a1 = v53;
          unint64_t v59 = v46;
          if (++v8 == v9) {
            goto LABEL_81;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v59 = -1;
          *(void *)(v28 + 4) = 0;
          *(void *)(v28 + 12) = v27;
          unint64_t v59 = v28 + 20;
          if (++v8 == v9) {
            goto LABEL_81;
          }
        }
      }
      else
      {
        v55[0] = 0;
        if ((*(void *)&v56[12] & 0x8000000000000000) != 0) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v56[12], (int)v55, "demand.constant >= 0");
        }
        uint64_t v24 = v59;
        if (v59 >= v60)
        {
          long long v29 = v58;
          unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((v59 - v58) >> 2) + 1;
          if (v30 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_86:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v60 - v58) >> 2) > v30) {
            unint64_t v30 = 0x999999999999999ALL * ((v60 - v58) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v60 - v58) >> 2) >= 0x666666666666666) {
            unint64_t v31 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31)
          {
            if (v31 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_87:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            unint64_t v32 = (char *)operator new(20 * v31);
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v47 = &v32[4 * ((v59 - v58) >> 2)];
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v57;
          *((_DWORD *)v47 + 4) = *(_DWORD *)&v57[16];
          uint64_t v48 = &v32[4 * ((v24 - v29) >> 2)];
          if (v24 == v29)
          {
            a1 = v53;
          }
          else
          {
            a1 = v53;
            do
            {
              long long v49 = *(_OWORD *)(v24 - 20);
              *((_DWORD *)v48 - 1) = *((_DWORD *)v24 - 1);
              *(_OWORD *)(v48 - 20) = v49;
              v48 -= 20;
              v24 -= 20;
            }
            while (v24 != v29);
            uint64_t v24 = v58;
          }
          uint64_t v50 = &v32[20 * v31];
          long long v26 = v47 + 20;
          int v58 = v48;
          unint64_t v59 = v47 + 20;
          int v60 = v50;
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          long long v25 = *(_OWORD *)v57;
          *((_DWORD *)v59 + 4) = *(_DWORD *)&v57[16];
          *(_OWORD *)uint64_t v24 = v25;
          long long v26 = v24 + 20;
        }
        unint64_t v59 = v26;
        uint64_t v51 = *((void *)v26 - 1);
        *((void *)v26 - 2) *= *(void *)&v56[12];
        *((void *)v26 - 1) = v51 * *(void *)&v56[12];
        if (++v8 == v9) {
          goto LABEL_81;
        }
      }
    }
    if (v13 != -1) {
      break;
    }
    v55[0] = 0;
    if (v16 < 0) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v57[12], (int)v55, "duration.constant >= 0");
    }
    long long v19 = v59;
    if (v59 < v60)
    {
      long long v10 = *(_OWORD *)v56;
      *((_DWORD *)v59 + 4) = *(_DWORD *)&v56[16];
      *(_OWORD *)long long v19 = v10;
      uint64_t v11 = v19 + 20;
    }
    else
    {
      uint64_t v20 = v58;
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v59 - v58) >> 2) + 1;
      if (v21 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_86;
      }
      if (0x999999999999999ALL * ((v60 - v58) >> 2) > v21) {
        unint64_t v21 = 0x999999999999999ALL * ((v60 - v58) >> 2);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v60 - v58) >> 2) >= 0x666666666666666) {
        unint64_t v22 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        if (v22 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_87;
        }
        uint64_t v23 = (char *)operator new(20 * v22);
      }
      else
      {
        uint64_t v23 = 0;
      }
      int v33 = &v23[4 * ((v59 - v58) >> 2)];
      *(_OWORD *)int v33 = *(_OWORD *)v56;
      *((_DWORD *)v33 + 4) = *(_DWORD *)&v56[16];
      uint64_t v34 = &v23[4 * ((v19 - v20) >> 2)];
      if (v19 == v20)
      {
        a1 = v53;
      }
      else
      {
        a1 = v53;
        do
        {
          long long v35 = *(_OWORD *)(v19 - 20);
          *((_DWORD *)v34 - 1) = *((_DWORD *)v19 - 1);
          *(_OWORD *)(v34 - 20) = v35;
          v34 -= 20;
          v19 -= 20;
        }
        while (v19 != v20);
        long long v19 = v58;
      }
      uint64_t v36 = &v23[20 * v22];
      uint64_t v11 = v33 + 20;
      int v58 = v34;
      unint64_t v59 = v33 + 20;
      int v60 = v36;
      if (v19) {
        operator delete(v19);
      }
    }
    unint64_t v59 = v11;
    uint64_t v12 = *((void *)v11 - 1);
    *((void *)v11 - 2) *= *(void *)&v57[12];
    *((void *)v11 - 1) = v12 * *(void *)&v57[12];
    if (++v8 == v9) {
      goto LABEL_81;
    }
  }
  google::LogMessage::LogMessage((google::LogMessage *)v55, (google::glog_internal_namespace_ *)"./ortools/sat/cumulative_energy.cc", 80);
  uint64_t v52 = (void *)google::LogMessage::stream((google::LogMessage *)v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Overload checker with variable demand and varialbe duration is currently not implemented. Skipping.", 99);
  google::LogMessage::~LogMessage((google::LogMessage *)v55);
  if (v58)
  {
    unint64_t v59 = v58;
    operator delete(v58);
  }
}

void sub_23CCA51D0()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 136));
}

void sub_23CCA51D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCA51E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCA51E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  long long v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CumulativeEnergyConstraint::CumulativeEnergyConstraint(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_26F0C2278;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)(a1 + 24) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v6 = *a3;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree(a1 + 72);
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 40) - *(void *)(*(void *)(a1 + 64) + 32);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  int v11 = (unint64_t)v7 >> 2;
  std::vector<int>::size_type v8 = (int)(v7 >> 2);
  if (v10 != v8) {
    google::MakeCheckOpString<unsigned long,int>((int)&v10, (int)&v11, "energies_.size() == num_tasks");
  }
  if ((v7 >> 2)) {
    std::vector<int>::__append((std::vector<int> *)(a1 + 112), v8);
  }
  return a1;
}

void sub_23CCA5414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCA541C(_Unwind_Exception *exception_object)
{
  int v5 = (void *)v1[20];
  if (v5)
  {
    operator delete(v5);
    long long v6 = (void *)v1[17];
    if (!v6)
    {
LABEL_3:
      uint64_t v7 = *v2;
      if (!*v2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    long long v6 = (void *)v1[17];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[18] = v6;
  operator delete(v6);
  uint64_t v7 = *v2;
  if (!*v2)
  {
LABEL_4:
    std::vector<int>::size_type v8 = (void *)v1[11];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v1[15] = v7;
  operator delete(v7);
  std::vector<int>::size_type v8 = (void *)v1[11];
  if (!v8)
  {
LABEL_5:
    uint64_t v9 = *v3;
    if (!*v3) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v1[12] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[2] = v9;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CumulativeEnergyConstraint::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  uint64_t v1 = this;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[8], 1);
  int v2 = *((_DWORD *)v1 + 8);
  v219 = v1 + 4;
  uint64_t v3 = *(uint64_t *)((char *)v1 + 44);
  if (v2 != -1) {
    v3 -= *(void *)(*((void *)v1[7] + 5) + 12 * (v2 ^ 1)) * *(void *)((char *)v1 + 36);
  }
  if (v3 < 1) {
    return 1;
  }
  uint64_t v220 = v3;
  v1[18] = v1[17];
  v218 = (void **)(v1 + 17);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(v1[8]);
  int v5 = *(int **)started;
  long long v6 = (int *)*((void *)started + 1);
  v224 = v1;
  if (*(int **)started != v6)
  {
    int v232 = 0;
    while (1)
    {
      while (1)
      {
        int v7 = *v5;
        uint64_t v8 = *(void *)(v5 + 1);
        uint64_t v9 = v1[8];
        unint64_t v10 = *(int *)(*((void *)v9 + 16) + 4 * *v5);
        if (v10 == -1
          || ((*(void *)(*(void *)(*(void *)v9 + 24) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1)) & 1) == 0)
        {
          uint64_t v11 = (uint64_t)v1[1] + 20 * *v5;
          uint64_t v12 = *(void *)(v11 + 12);
          if (*(_DWORD *)v11 != -1) {
            v12 -= *(void *)(*((void *)v1[7] + 5) + 12 * (*(_DWORD *)v11 ^ 1)) * *(void *)(v11 + 4);
          }
          if (v12) {
            break;
          }
        }
        *((_DWORD *)v1[14] + v7) = -1;
        v5 += 3;
        if (v5 == v6) {
          goto LABEL_32;
        }
      }
      uint64_t v14 = v1[18];
      int v13 = v1[19];
      if (v14 >= v13) {
        break;
      }
      *(_DWORD *)uint64_t v14 = v7;
      *(void *)((char *)v14 + 4) = v8;
      uint64_t v15 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
LABEL_29:
      v1[18] = v15;
      *((_DWORD *)v1[14] + v7) = v232++;
      v5 += 3;
      if (v5 == v6) {
        goto LABEL_32;
      }
    }
    uint64_t v16 = (operations_research::sat::SchedulingConstraintHelper *)*v218;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v218) >> 2);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 2);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x1555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 > 0x1555555555555555) {
LABEL_246:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      unint64_t v21 = (char *)operator new(12 * v20);
      uint64_t v22 = (uint64_t)&v21[12 * v17];
      *(_DWORD *)uint64_t v22 = v7;
      *(void *)(v22 + 4) = v8;
      uint64_t v23 = v22;
      if (v14 == v16) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v21 = 0;
      uint64_t v22 = 4 * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v218) >> 2);
      *(_DWORD *)uint64_t v22 = v7;
      *(void *)(v22 + 4) = v8;
      uint64_t v23 = 12 * v17;
      if (v14 == v16) {
        goto LABEL_27;
      }
    }
    do
    {
      uint64_t v24 = *(void *)((char *)v14 - 12);
      uint64_t v14 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 - 12);
      int v25 = *((_DWORD *)v14 + 2);
      *(void *)(v23 - 12) = v24;
      v23 -= 12;
      *(_DWORD *)(v23 + 8) = v25;
    }
    while (v14 != v16);
    uint64_t v14 = (operations_research::sat::SchedulingConstraintHelper *)*v218;
LABEL_27:
    uint64_t v15 = (operations_research::sat::SchedulingConstraintHelper *)(v22 + 12);
    uint64_t v1 = v224;
    v224[17] = (operations_research::sat::SchedulingConstraintHelper *)v23;
    v224[18] = (operations_research::sat::SchedulingConstraintHelper *)(v22 + 12);
    v224[19] = (operations_research::sat::SchedulingConstraintHelper *)&v21[12 * v20];
    if (v14) {
      operator delete(v14);
    }
    goto LABEL_29;
  }
  int v232 = 0;
LABEL_32:
  LOBYTE(v235[0]) = 0;
  v231 = v1 + 20;
  std::vector<BOOL>::assign((char **)v1 + 20, v232, v235);
  uint64_t v26 = (uint64_t)(v1 + 9);
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)v1 + 18, v232);
  uint64_t v27 = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(v1[8]);
  uint64_t v28 = *((void *)v27 + 1);
  uint64_t v216 = *(void *)v27;
  if (v28 == *(void *)v27) {
    return 1;
  }
  char v29 = 0;
  uint64_t v30 = v220;
  uint64_t v222 = (uint64_t)(v1 + 9);
  while (1)
  {
    uint64_t v32 = *(int *)(v28 - 12);
    v28 -= 12;
    uint64_t v31 = v32;
    unint64_t v33 = *((int *)v1[14] + v32);
    if (v33 == -1) {
      goto LABEL_35;
    }
    int64_t v34 = *(void *)(v28 + 4);
    uint64_t v35 = *(void *)((char *)v1[17] + 12 * (int)v33 + 4);
    uint64_t v36 = v1[8];
    unint64_t v37 = *(int *)(*((void *)v36 + 16) + 4 * v31);
    unint64_t v38 = v33 >> 6;
    uint64_t v217 = v28;
    if (v37 == -1)
    {
      uint64_t v41 = (void *)(*v231 + 8 * v38);
      uint64_t v42 = 1 << v33;
      goto LABEL_45;
    }
    char v39 = *(_DWORD *)(*((void *)v36 + 16) + 4 * v31);
    unint64_t v40 = *(void *)(*(void *)(*(void *)v36 + 24) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8));
    uint64_t v41 = (void *)(*v231 + 8 * v38);
    uint64_t v42 = 1 << v33;
    if (((v40 >> v39) & 1) == 0) {
      break;
    }
LABEL_45:
    *v41 |= v42;
    uint64_t v48 = (uint64_t)v1[1] + 20 * (int)v31;
    int v49 = *(_DWORD *)v48;
    uint64_t v50 = *(void *)(v48 + 12);
    if (*(_DWORD *)v48 == -1)
    {
      uint64_t v53 = *(void *)(v48 + 12);
    }
    else
    {
      uint64_t v51 = *(void *)(v48 + 4);
      uint64_t v52 = *((void *)v1[7] + 5);
      uint64_t v53 = v50 - *(void *)(v52 + 12 * (v49 ^ 1)) * v51;
      v50 += *(void *)(v52 + 12 * v49) * v51;
    }
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v26, v33, v35 * v30, v50, v53);
LABEL_49:
    uint64_t Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v26);
    int MaxEventWithEnvelopeGreaterThan = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v26, Envelope - 1);
    unint64_t v56 = *(void *)((char *)*v218 + 12 * MaxEventWithEnvelopeGreaterThan + 4);
    uint64_t v57 = v34 - v56;
    if (v34 != v56)
    {
      uint64_t v58 = Envelope - v56 * v220;
      if (v58 / v57 * v57 >= v58) {
        uint64_t v59 = v58 / v57;
      }
      else {
        uint64_t v59 = v58 / v57 + 1;
      }
      int v60 = *((_DWORD *)v1 + 8);
      uint64_t v61 = *(uint64_t *)((char *)v1 + 44);
      if (v60 != -1) {
        v61 += *(void *)(*((void *)v1[7] + 5) + 12 * v60) * *(void *)((char *)v1 + 36);
      }
      if (v59 <= v61)
      {
        char v215 = 1;
        Optionaluint64_t Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26);
        uint64_t v30 = v220;
        uint64_t v47 = v34 * v220;
        if (OptionalEnvelope <= v34 * v220) {
          goto LABEL_239;
        }
        goto LABEL_85;
      }
      uint64_t v226 = v59;
      unint64_t v62 = MaxEventWithEnvelopeGreaterThan;
      operations_research::sat::SchedulingConstraintHelper::ClearReason(v1[8]);
      if ((int)v62 < v232)
      {
        int64_t v228 = v34;
        unint64_t v229 = v56;
        do
        {
          if ((*(void *)(*v231 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62))
          {
            int v64 = *((_DWORD *)v1[17] + 3 * v62);
            operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(v1[8], v64);
            int v65 = *((_DWORD *)v1[1] + 5 * v64);
            if (v65 != -1)
            {
              uint64_t v66 = v1;
              long long v67 = v1[8];
              unint64_t v68 = *(void *)(*((void *)v66[7] + 5) + 12 * v65);
              LODWORD(v235[0]) = v65;
              *(void *)((char *)v235 + 4) = v68;
              uint64_t v69 = v235[0];
              unint64_t v70 = HIDWORD(v68);
              uint64_t v72 = (char *)*((void *)v67 + 49);
              unint64_t v71 = *((void *)v67 + 50);
              if ((unint64_t)v72 < v71)
              {
                *(void *)uint64_t v72 = v235[0];
                *((_DWORD *)v72 + 2) = HIDWORD(v68);
                uint64_t v63 = v72 + 12;
              }
              else
              {
                uint64_t v73 = (unsigned char *)*((void *)v67 + 48);
                unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v73) >> 2) + 1;
                if (v74 > 0x1555555555555555) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (void)v73) >> 2);
                if (2 * v75 > v74) {
                  unint64_t v74 = 2 * v75;
                }
                if (v75 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v76 = 0x1555555555555555;
                }
                else {
                  unint64_t v76 = v74;
                }
                if (v76)
                {
                  if (v76 > 0x1555555555555555) {
                    goto LABEL_246;
                  }
                  v77 = (char *)operator new(12 * v76);
                }
                else
                {
                  v77 = 0;
                }
                uint64_t v78 = &v77[4 * ((v72 - v73) >> 2)];
                *(void *)uint64_t v78 = v69;
                *((_DWORD *)v78 + 2) = v70;
                uint64_t v79 = v78;
                if (v72 != v73)
                {
                  do
                  {
                    uint64_t v80 = *(void *)(v72 - 12);
                    v72 -= 12;
                    int v81 = *((_DWORD *)v72 + 2);
                    *(void *)(v79 - 12) = v80;
                    v79 -= 12;
                    *((_DWORD *)v79 + 2) = v81;
                  }
                  while (v72 != v73);
                  uint64_t v72 = (char *)*((void *)v67 + 48);
                }
                uint64_t v63 = v78 + 12;
                *((void *)v67 + 48) = v79;
                *((void *)v67 + 49) = v78 + 12;
                *((void *)v67 + 50) = &v77[12 * v76];
                int64_t v34 = v228;
                if (v72) {
                  operator delete(v72);
                }
              }
              *((void *)v67 + 49) = v63;
              uint64_t v1 = v224;
              unint64_t v56 = v229;
            }
            operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(v1[8], v64, v56);
            operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason(v1[8], v64, v34);
          }
          ++v62;
        }
        while (v232 != v62);
      }
      int v83 = v1[8];
      if (*((_DWORD *)v1 + 8) != -1)
      {
        uint64_t v84 = operations_research::sat::AffineExpression::GreaterOrEqual((uint64_t)v219, v226);
        unint64_t v214 = v214 & 0xFFFFFFFF00000000 | v85;
        uint64_t result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(v83, v84, v214);
        if (!result) {
          return result;
        }
        char v215 = 1;
        uint64_t v26 = v222;
        uint64_t v87 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v222);
        uint64_t v30 = v220;
        uint64_t v47 = v34 * v220;
        if (v87 <= v34 * v220) {
          goto LABEL_239;
        }
        goto LABEL_85;
      }
      return operations_research::sat::SchedulingConstraintHelper::ReportConflict(v1[8]);
    }
    char v29 = 1;
    uint64_t v30 = v220;
    uint64_t v28 = v217;
LABEL_35:
    if (v28 == v216) {
      return 1;
    }
  }
  *v41 &= ~v42;
  uint64_t v43 = (uint64_t)v1[1] + 20 * (int)v31;
  uint64_t v44 = *(void *)(v43 + 12);
  char v45 = v29;
  if (*(_DWORD *)v43 != -1) {
    v44 -= *(void *)(*((void *)v1[7] + 5) + 12 * (*(_DWORD *)v43 ^ 1)) * *(void *)(v43 + 4);
  }
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v26, v33, v35 * v30, v44);
  if (v45) {
    goto LABEL_49;
  }
  char v215 = 0;
  uint64_t v46 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26);
  uint64_t v30 = v220;
  uint64_t v47 = v34 * v220;
  if (v46 <= v34 * v220) {
    goto LABEL_239;
  }
LABEL_85:
  unint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
  if (v34 >= (uint64_t)0x8000000000000002) {
    unint64_t v88 = -v34;
  }
  unint64_t v227 = v88;
  unint64_t v225 = HIDWORD(v88);
  uint64_t v221 = v47;
  while (2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v1[8]);
    uint64_t v233 = 0;
    uint64_t v234 = 0;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v26, v47, (int *)&v234 + 1, (int *)&v234, &v233);
    unint64_t v89 = SHIDWORD(v234);
    uint64_t v230 = *(void *)((char *)v1[17] + 12 * SHIDWORD(v234) + 4);
    if (SHIDWORD(v234) < v232)
    {
      while (1)
      {
        if (((*(void *)(*v231 + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) == 0 || v234 == v89) {
          goto LABEL_95;
        }
        int v98 = *((_DWORD *)v1[17] + 3 * v89);
        v99 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v99, v98);
        int v100 = *(_DWORD *)(*((void *)v99 + 16) + 4 * v98);
        if (v100 != -1) {
          break;
        }
LABEL_119:
        int v121 = v98;
        v122 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v122, v98);
        LODWORD(v235[0]) = *(_DWORD *)(*((void *)v122 + 4) + 4 * v98);
        *(void *)((char *)v235 + 4) = v230;
        uint64_t v123 = v235[0];
        uint64_t v125 = (_DWORD *)*((void *)v122 + 49);
        unint64_t v124 = *((void *)v122 + 50);
        if ((unint64_t)v125 >= v124)
        {
          uint64_t v127 = (_DWORD *)*((void *)v122 + 48);
          unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * (v125 - v127) + 1;
          if (v128 > 0x1555555555555555) {
            goto LABEL_247;
          }
          unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (void)v127) >> 2);
          if (2 * v129 > v128) {
            unint64_t v128 = 2 * v129;
          }
          if (v129 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v130 = 0x1555555555555555;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            if (v130 > 0x1555555555555555) {
              goto LABEL_246;
            }
            uint64_t v131 = (char *)operator new(12 * v130);
          }
          else
          {
            uint64_t v131 = 0;
          }
          uint64_t v132 = &v131[4 * (v125 - v127)];
          *(void *)uint64_t v132 = v123;
          *((_DWORD *)v132 + 2) = HIDWORD(v230);
          uint64_t v133 = v132;
          if (v125 != v127)
          {
            do
            {
              uint64_t v134 = *(void *)(v125 - 3);
              v125 -= 3;
              int v135 = v125[2];
              *(void *)(v133 - 12) = v134;
              v133 -= 12;
              *((_DWORD *)v133 + 2) = v135;
            }
            while (v125 != v127);
            uint64_t v125 = (_DWORD *)*((void *)v122 + 48);
          }
          uint64_t v126 = v132 + 12;
          *((void *)v122 + 48) = v133;
          *((void *)v122 + 49) = v132 + 12;
          *((void *)v122 + 50) = &v131[12 * v130];
          if (v125) {
            operator delete(v125);
          }
        }
        else
        {
          *(void *)uint64_t v125 = v235[0];
          v125[2] = HIDWORD(v230);
          uint64_t v126 = v125 + 3;
        }
        *((void *)v122 + 49) = v126;
        v136 = v1[8];
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v136, v98);
        LODWORD(v235[0]) = *(_DWORD *)(*((void *)v136 + 7) + 4 * v98) ^ 1;
        *(void *)((char *)v235 + 4) = v227;
        uint64_t v137 = v235[0];
        uint64_t v139 = (_DWORD *)*((void *)v136 + 49);
        unint64_t v138 = *((void *)v136 + 50);
        if ((unint64_t)v139 >= v138)
        {
          uint64_t v141 = (_DWORD *)*((void *)v136 + 48);
          unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * (v139 - v141) + 1;
          if (v142 > 0x1555555555555555) {
            goto LABEL_247;
          }
          unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - (void)v141) >> 2);
          if (2 * v143 > v142) {
            unint64_t v142 = 2 * v143;
          }
          if (v143 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v144 = 0x1555555555555555;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            if (v144 > 0x1555555555555555) {
              goto LABEL_246;
            }
            uint64_t v145 = (char *)operator new(12 * v144);
          }
          else
          {
            uint64_t v145 = 0;
          }
          v146 = &v145[4 * (v139 - v141)];
          *(void *)v146 = v137;
          *((_DWORD *)v146 + 2) = v225;
          uint64_t v147 = v146;
          if (v139 != v141)
          {
            do
            {
              uint64_t v148 = *(void *)(v139 - 3);
              v139 -= 3;
              int v149 = v139[2];
              *(void *)(v147 - 12) = v148;
              v147 -= 12;
              *((_DWORD *)v147 + 2) = v149;
            }
            while (v139 != v141);
            uint64_t v139 = (_DWORD *)*((void *)v136 + 48);
          }
          v140 = v146 + 12;
          *((void *)v136 + 48) = v147;
          *((void *)v136 + 49) = v146 + 12;
          *((void *)v136 + 50) = &v145[12 * v144];
          if (v139) {
            operator delete(v139);
          }
        }
        else
        {
          *(void *)uint64_t v139 = v235[0];
          v139[2] = v225;
          v140 = v139 + 3;
        }
        *((void *)v136 + 49) = v140;
        int v150 = *((_DWORD *)v1[1] + 5 * v98);
        if (v150 != -1)
        {
          uint64_t v151 = v1[8];
          unint64_t v152 = *(void *)(*((void *)v1[7] + 5) + 12 * v150);
          LODWORD(v235[0]) = *((_DWORD *)v1[1] + 5 * v121);
          *(void *)((char *)v235 + 4) = v152;
          uint64_t v153 = v235[0];
          unint64_t v154 = HIDWORD(v152);
          v156 = (char *)*((void *)v151 + 49);
          unint64_t v155 = *((void *)v151 + 50);
          if ((unint64_t)v156 < v155)
          {
            *(void *)v156 = v235[0];
            *((_DWORD *)v156 + 2) = HIDWORD(v152);
            uint64_t v97 = v156 + 12;
          }
          else
          {
            unint64_t v157 = (unsigned char *)*((void *)v151 + 48);
            unint64_t v158 = 0xAAAAAAAAAAAAAAABLL * ((v156 - v157) >> 2) + 1;
            if (v158 > 0x1555555555555555) {
              goto LABEL_248;
            }
            unint64_t v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v155 - (void)v157) >> 2);
            if (2 * v159 > v158) {
              unint64_t v158 = 2 * v159;
            }
            if (v159 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v160 = 0x1555555555555555;
            }
            else {
              unint64_t v160 = v158;
            }
            if (v160)
            {
              if (v160 > 0x1555555555555555) {
                goto LABEL_246;
              }
              v161 = (char *)operator new(12 * v160);
            }
            else
            {
              v161 = 0;
            }
            uint64_t v162 = &v161[4 * ((v156 - v157) >> 2)];
            *(void *)uint64_t v162 = v153;
            *((_DWORD *)v162 + 2) = v154;
            uint64_t v163 = v162;
            if (v156 != v157)
            {
              do
              {
                uint64_t v164 = *(void *)(v156 - 12);
                v156 -= 12;
                int v165 = *((_DWORD *)v156 + 2);
                *(void *)(v163 - 12) = v164;
                v163 -= 12;
                *((_DWORD *)v163 + 2) = v165;
              }
              while (v156 != v157);
              v156 = (char *)*((void *)v151 + 48);
            }
            uint64_t v97 = v162 + 12;
            *((void *)v151 + 48) = v163;
            *((void *)v151 + 49) = v162 + 12;
            *((void *)v151 + 50) = &v161[12 * v160];
            if (v156) {
              operator delete(v156);
            }
          }
          *((void *)v151 + 49) = v97;
        }
LABEL_95:
        if (v232 == ++v89) {
          goto LABEL_90;
        }
      }
      int v101 = v100 ^ 1;
      uint64_t v103 = (int *)*((void *)v99 + 46);
      unint64_t v102 = *((void *)v99 + 47);
      if ((unint64_t)v103 < v102)
      {
        *uint64_t v103 = v101;
        uint64_t v104 = (uint64_t)(v103 + 1);
        uint64_t v1 = v224;
LABEL_118:
        *((void *)v99 + 46) = v104;
        goto LABEL_119;
      }
      uint64_t v105 = (int *)*((void *)v99 + 45);
      uint64_t v106 = v103 - v105;
      unint64_t v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v108 = v102 - (void)v105;
      if (v108 >> 1 > v107) {
        unint64_t v107 = v108 >> 1;
      }
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v109 = v107;
      }
      if (v109)
      {
        if (v109 >> 62) {
          goto LABEL_246;
        }
        uint64_t v110 = operator new(4 * v109);
        uint64_t v111 = (int *)&v110[4 * v106];
        *uint64_t v111 = v101;
        uint64_t v104 = (uint64_t)(v111 + 1);
        if (v103 != v105)
        {
LABEL_110:
          unint64_t v112 = (char *)(v103 - 1) - (char *)v105;
          uint64_t v1 = v224;
          if (v112 < 0x2C) {
            goto LABEL_255;
          }
          if ((unint64_t)((char *)v105 - v110) < 0x20) {
            goto LABEL_255;
          }
          uint64_t v113 = (v112 >> 2) + 1;
          uint64_t v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v115 = &v103[v114 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v111 = (int *)((char *)v111 - v114);
          v116 = &v110[4 * v106 - 16];
          v117 = v103 - 4;
          uint64_t v118 = v113 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v119 = *(_OWORD *)v117;
            *(v116 - 1) = *((_OWORD *)v117 - 1);
            _OWORD *v116 = v119;
            v116 -= 2;
            v117 -= 8;
            v118 -= 8;
          }
          while (v118);
          uint64_t v103 = v115;
          if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_255:
            do
            {
              int v120 = *--v103;
              *--uint64_t v111 = v120;
            }
            while (v103 != v105);
          }
          *((void *)v99 + 45) = v111;
          *((void *)v99 + 46) = v104;
          *((void *)v99 + 47) = &v110[4 * v109];
          if (!v105) {
            goto LABEL_118;
          }
LABEL_117:
          operator delete(v105);
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v110 = 0;
        uint64_t v111 = (int *)(4 * v106);
        *(_DWORD *)(4 * v106) = v101;
        uint64_t v104 = 4 * v106 + 4;
        if (v103 != v105) {
          goto LABEL_110;
        }
      }
      uint64_t v1 = v224;
      *((void *)v99 + 45) = v111;
      *((void *)v99 + 46) = v104;
      *((void *)v99 + 47) = &v110[4 * v109];
      if (!v105) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
LABEL_90:
    if (*v219 != -1)
    {
      v90 = v1[8];
      unint64_t v91 = *(void *)(*((void *)v1[7] + 5) + 12 * (*v219 ^ 1));
      LODWORD(v235[0]) = *v219 ^ 1;
      *(void *)((char *)v235 + 4) = v91;
      uint64_t v92 = v235[0];
      unint64_t v93 = HIDWORD(v91);
      uint64_t v95 = (_DWORD *)*((void *)v90 + 49);
      unint64_t v94 = *((void *)v90 + 50);
      if ((unint64_t)v95 >= v94)
      {
        uint64_t v166 = (_DWORD *)*((void *)v90 + 48);
        unint64_t v167 = 0xAAAAAAAAAAAAAAABLL * (v95 - v166) + 1;
        if (v167 > 0x1555555555555555) {
LABEL_248:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        unint64_t v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (void)v166) >> 2);
        if (2 * v168 > v167) {
          unint64_t v167 = 2 * v168;
        }
        if (v168 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v169 = 0x1555555555555555;
        }
        else {
          unint64_t v169 = v167;
        }
        if (v169)
        {
          if (v169 > 0x1555555555555555) {
            goto LABEL_246;
          }
          uint64_t v170 = (char *)operator new(12 * v169);
        }
        else
        {
          uint64_t v170 = 0;
        }
        uint64_t v171 = &v170[4 * (v95 - v166)];
        *(void *)uint64_t v171 = v92;
        *((_DWORD *)v171 + 2) = v93;
        uint64_t v172 = v171;
        if (v95 != v166)
        {
          do
          {
            uint64_t v173 = *(void *)(v95 - 3);
            v95 -= 3;
            int v174 = v95[2];
            *(void *)(v172 - 12) = v173;
            v172 -= 12;
            *((_DWORD *)v172 + 2) = v174;
          }
          while (v95 != v166);
          uint64_t v95 = (_DWORD *)*((void *)v90 + 48);
        }
        uint64_t v96 = v171 + 12;
        *((void *)v90 + 48) = v172;
        *((void *)v90 + 49) = v171 + 12;
        *((void *)v90 + 50) = &v170[12 * v169];
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        *(void *)uint64_t v95 = v235[0];
        v95[2] = HIDWORD(v91);
        uint64_t v96 = v95 + 3;
      }
      *((void *)v90 + 49) = v96;
    }
    int v175 = *((_DWORD *)v1[17] + 3 * (int)v234);
    uint64_t v176 = v1[8];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v176, v175);
    LODWORD(v235[0]) = *(_DWORD *)(*((void *)v176 + 4) + 4 * v175);
    *(void *)((char *)v235 + 4) = v230;
    uint64_t v177 = v235[0];
    v179 = (char *)*((void *)v176 + 49);
    unint64_t v178 = *((void *)v176 + 50);
    if ((unint64_t)v179 < v178)
    {
      *(void *)v179 = v235[0];
      *((_DWORD *)v179 + 2) = HIDWORD(v230);
      v180 = v179 + 12;
      uint64_t v181 = v224;
      goto LABEL_206;
    }
    v182 = (unsigned char *)*((void *)v176 + 48);
    unint64_t v183 = 0xAAAAAAAAAAAAAAABLL * ((v179 - v182) >> 2) + 1;
    if (v183 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - (void)v182) >> 2);
    if (2 * v184 > v183) {
      unint64_t v183 = 2 * v184;
    }
    if (v184 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v185 = 0x1555555555555555;
    }
    else {
      unint64_t v185 = v183;
    }
    if (v185)
    {
      if (v185 > 0x1555555555555555) {
        goto LABEL_246;
      }
      v186 = (char *)operator new(12 * v185);
    }
    else
    {
      v186 = 0;
    }
    v187 = &v186[4 * ((v179 - v182) >> 2)];
    *(void *)v187 = v177;
    *((_DWORD *)v187 + 2) = HIDWORD(v230);
    uint64_t v188 = v187;
    if (v179 == v182)
    {
      uint64_t v181 = v224;
      v180 = v187 + 12;
      *((void *)v176 + 48) = v187;
      *((void *)v176 + 49) = v187 + 12;
      *((void *)v176 + 50) = &v186[12 * v185];
      if (v179) {
        goto LABEL_205;
      }
    }
    else
    {
      uint64_t v181 = v224;
      do
      {
        uint64_t v189 = *(void *)(v179 - 12);
        v179 -= 12;
        int v190 = *((_DWORD *)v179 + 2);
        *(void *)(v188 - 12) = v189;
        v188 -= 12;
        *((_DWORD *)v188 + 2) = v190;
      }
      while (v179 != v182);
      v179 = (char *)*((void *)v176 + 48);
      v180 = v187 + 12;
      *((void *)v176 + 48) = v188;
      *((void *)v176 + 49) = v187 + 12;
      *((void *)v176 + 50) = &v186[12 * v185];
      if (v179) {
LABEL_205:
      }
        operator delete(v179);
    }
LABEL_206:
    uint64_t v47 = v221;
    uint64_t v26 = v222;
    *((void *)v176 + 49) = v180;
    v191 = v181[8];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v191, v175);
    LODWORD(v235[0]) = *(_DWORD *)(*((void *)v191 + 7) + 4 * v175) ^ 1;
    *(void *)((char *)v235 + 4) = v227;
    uint64_t v192 = v235[0];
    v194 = (char *)*((void *)v191 + 49);
    unint64_t v193 = *((void *)v191 + 50);
    if ((unint64_t)v194 < v193)
    {
      *(void *)v194 = v235[0];
      uint64_t v1 = v224;
      *((_DWORD *)v194 + 2) = v225;
      v195 = v194 + 12;
      goto LABEL_226;
    }
    v196 = (unsigned char *)*((void *)v191 + 48);
    unint64_t v197 = 0xAAAAAAAAAAAAAAABLL * ((v194 - v196) >> 2) + 1;
    if (v197 > 0x1555555555555555) {
LABEL_247:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    unint64_t v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v193 - (void)v196) >> 2);
    if (2 * v198 > v197) {
      unint64_t v197 = 2 * v198;
    }
    if (v198 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v199 = 0x1555555555555555;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      if (v199 > 0x1555555555555555) {
        goto LABEL_246;
      }
      v200 = (char *)operator new(12 * v199);
    }
    else
    {
      v200 = 0;
    }
    v201 = &v200[4 * ((v194 - v196) >> 2)];
    *(void *)v201 = v192;
    *((_DWORD *)v201 + 2) = v225;
    v202 = v201;
    if (v194 == v196)
    {
      uint64_t v1 = v224;
      v195 = v201 + 12;
      *((void *)v191 + 48) = v201;
      *((void *)v191 + 49) = v201 + 12;
      *((void *)v191 + 50) = &v200[12 * v199];
      if (v194) {
        goto LABEL_224;
      }
    }
    else
    {
      uint64_t v1 = v224;
      do
      {
        uint64_t v203 = *(void *)(v194 - 12);
        v194 -= 12;
        int v204 = *((_DWORD *)v194 + 2);
        *(void *)(v202 - 12) = v203;
        v202 -= 12;
        *((_DWORD *)v202 + 2) = v204;
      }
      while (v194 != v196);
      v194 = (char *)*((void *)v191 + 48);
      v195 = v201 + 12;
      *((void *)v191 + 48) = v202;
      *((void *)v191 + 49) = v201 + 12;
      *((void *)v191 + 50) = &v200[12 * v199];
      if (v194) {
LABEL_224:
      }
        operator delete(v194);
    }
    uint64_t v47 = v221;
    uint64_t v26 = v222;
LABEL_226:
    *((void *)v191 + 49) = v195;
    v205 = (int *)((char *)v1[1] + 20 * v175);
    uint64_t v206 = *(void *)(v205 + 3);
    if (*v205 != -1) {
      v206 += *(void *)(*((void *)v1[7] + 5) + 12 * *v205) * *(void *)(v205 + 1);
    }
    if (v233 >= v206)
    {
      uint64_t v207 = operations_research::sat::AffineExpression::LowerOrEqual((uint64_t)v205, v233);
      unint64_t v223 = v223 & 0xFFFFFFFF00000000 | v208;
      uint64_t result = operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteralIfTaskPresent((unint64_t *)v1[8], v175, v207, v223);
      if (!result) {
        return result;
      }
      v209 = v1[8];
      unint64_t v210 = *(int *)(*((void *)v209 + 16) + 4 * v175);
      if (v210 == -1
        || ((*(void *)(*(void *)(*(void *)v209 + 24) + ((v210 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*((void *)v209 + 16) + 4 * v175)) & 1) != 0)
      {
        v211 = (int *)((char *)v1[1] + 20 * v175);
        uint64_t v212 = *(void *)(v211 + 3);
        if (*v211 != -1) {
          v212 += *(void *)(*((void *)v1[7] + 5) + 12 * *v211) * *(void *)(v211 + 1);
        }
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v26, *((_DWORD *)v1[14] + v175), *(void *)((char *)v1[17] + 12 * (int)v234 + 4) * v220, v212, v233);
        if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26) <= v47)
        {
LABEL_238:
          uint64_t v30 = v220;
LABEL_239:
          uint64_t v28 = v217;
          char v29 = v215;
          goto LABEL_35;
        }
      }
      else
      {
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v26, v234);
        if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v26) <= v47) {
          goto LABEL_238;
        }
      }
      continue;
    }
    break;
  }
  v213 = v1[8];
  if (*(_DWORD *)(*((void *)v213 + 16) + 4 * v175) == -1) {
    return operations_research::sat::SchedulingConstraintHelper::ReportConflict(v213);
  }
  else {
    return operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(v213, v175);
  }
}

void operations_research::sat::SchedulingConstraintHelper::ClearReason(operations_research::sat::SchedulingConstraintHelper *this)
{
  *((void *)this + 49) = *((void *)this + 48);
  *((void *)this + 46) = *((void *)this + 45);
  int v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 51);
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
    unint64_t v3 = (int)((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2);
    char v4 = 0;
    std::vector<BOOL>::assign((char **)this + 53, v3, &v4);
  }
}

void operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(this, a2);
  int v4 = *(_DWORD *)(*((void *)this + 16) + 4 * a2);
  if (v4 != -1)
  {
    int v5 = v4 ^ 1;
    int v7 = (int *)*((void *)this + 46);
    unint64_t v6 = *((void *)this + 47);
    if ((unint64_t)v7 < v6)
    {
      int *v7 = v5;
      uint64_t v8 = (uint64_t)(v7 + 1);
LABEL_23:
      *((void *)this + 46) = v8;
      return;
    }
    uint64_t v9 = (int *)*((void *)this + 45);
    uint64_t v10 = v7 - v9;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
      uint64_t v15 = (int *)&v14[4 * v10];
      uint64_t v16 = &v14[4 * v13];
      *uint64_t v15 = v5;
      uint64_t v8 = (uint64_t)(v15 + 1);
      int64_t v17 = (char *)v7 - (char *)v9;
      if (v7 == v9) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(4 * v10);
      uint64_t v16 = 0;
      *(_DWORD *)(4 * v10) = v5;
      uint64_t v8 = 4 * v10 + 4;
      int64_t v17 = (char *)v7 - (char *)v9;
      if (v7 == v9)
      {
LABEL_21:
        *((void *)this + 45) = v15;
        *((void *)this + 46) = v8;
        *((void *)this + 47) = v16;
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_23;
      }
    }
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_29;
    }
    if ((unint64_t)((char *)v9 - v14) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v21 = &v7[v20 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v15 = (int *)((char *)v15 - v20);
    uint64_t v22 = &v14[4 * v10 - 16];
    uint64_t v23 = v7 - 4;
    uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    int v7 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        int v26 = *--v7;
        *--uint64_t v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

void operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, unint64_t a3)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  LODWORD(v18) = *(_DWORD *)(*((void *)a1 + 4) + 4 * a2);
  HIDWORD(v18) = a3;
  unint64_t v6 = HIDWORD(a3);
  uint64_t v8 = (_DWORD *)*((void *)a1 + 49);
  unint64_t v7 = *((void *)a1 + 50);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (_DWORD *)*((void *)a1 + 48);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 - v10) + 1;
    if (v11 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = (char *)operator new(12 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * (v8 - v10)];
    *(void *)uint64_t v15 = v18;
    *((_DWORD *)v15 + 2) = v6;
    uint64_t v9 = v15 + 12;
    if (v8 != v10)
    {
      do
      {
        uint64_t v16 = *(void *)(v8 - 3);
        v8 -= 3;
        int v17 = v8[2];
        *(void *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v8 != v10);
      uint64_t v8 = (_DWORD *)*((void *)a1 + 48);
    }
    *((void *)a1 + 48) = v15;
    *((void *)a1 + 49) = v9;
    *((void *)a1 + 50) = &v14[12 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v8 = v18;
    v8[2] = v6;
    uint64_t v9 = v8 + 3;
  }
  *((void *)a1 + 49) = v9;
}

void operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, int64_t a3)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002) {
    unint64_t v6 = -a3;
  }
  LODWORD(v19) = *(_DWORD *)(*((void *)a1 + 7) + 4 * a2) ^ 1;
  HIDWORD(v19) = v6;
  unint64_t v7 = HIDWORD(v6);
  uint64_t v9 = (_DWORD *)*((void *)a1 + 49);
  unint64_t v8 = *((void *)a1 + 50);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = (_DWORD *)*((void *)a1 + 48);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(12 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * (v9 - v11)];
    *(void *)uint64_t v16 = v19;
    *((_DWORD *)v16 + 2) = v7;
    uint64_t v10 = v16 + 12;
    if (v9 != v11)
    {
      do
      {
        uint64_t v17 = *(void *)(v9 - 3);
        v9 -= 3;
        int v18 = v9[2];
        *(void *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v9 != v11);
      uint64_t v9 = (_DWORD *)*((void *)a1 + 48);
    }
    *((void *)a1 + 48) = v16;
    *((void *)a1 + 49) = v10;
    *((void *)a1 + 50) = &v15[12 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v9 = v19;
    v9[2] = v7;
    uint64_t v10 = v9 + 3;
  }
  *((void *)a1 + 49) = v10;
}

void operations_research::sat::CumulativeEnergyConstraint::~CumulativeEnergyConstraint(operations_research::sat::CumulativeEnergyConstraint *this)
{
  *(void *)this = &unk_26F0C2278;
  int v2 = (void *)*((void *)this + 20);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_26F0C2278;
  int v2 = (void *)*((void *)this + 20);
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  JUMPOUT(0x23ECF2BC0);
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCA6D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void *operations_research::sat::Model::Delete<operations_research::sat::CumulativeEnergyConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C22C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CumulativeEnergyConstraint>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C22C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::LiftKnapsackCut(void *a1, void *a2, void *a3, uint64_t a4, operations_research::TimeLimit *a5, void *a6)
{
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  uint64_t v126 = &v127;
  unint64_t v8 = (int *)a6[2];
  uint64_t v9 = (int *)a6[3];
  while (v8 != v9)
  {
    int v10 = *v8;
    unint64_t v11 = &v127;
    unint64_t v12 = &v127;
    if (v127)
    {
      unint64_t v13 = v127;
      while (1)
      {
        while (1)
        {
          unint64_t v12 = (uint64_t **)v13;
          int v14 = *(_DWORD *)((char *)v13 + 25);
          if (v10 >= v14) {
            break;
          }
          unint64_t v13 = *v12;
          unint64_t v11 = v12;
          if (!*v12) {
            goto LABEL_12;
          }
        }
        if (v14 >= v10) {
          break;
        }
        unint64_t v13 = v12[1];
        if (!v13)
        {
          unint64_t v11 = v12 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v15 = (char *)operator new(0x20uLL);
      *(_DWORD *)(v15 + 25) = v10;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v12;
      _DWORD *v11 = (uint64_t *)v15;
      if (*v126)
      {
        uint64_t v126 = (uint64_t **)*v126;
        uint64_t v15 = (char *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v127, (uint64_t *)v15);
      ++v128;
    }
    ++v8;
  }
  unint64_t v124 = 0;
  long long v125 = 0uLL;
  int v121 = 0;
  v122 = 0;
  unint64_t v123 = 0;
  uint64_t v16 = a1[2];
  if (a1[3] != v16)
  {
    unint64_t v17 = 0;
    while (1)
    {
      int v19 = *(_DWORD *)(v16 + 4 * v17);
      uint64_t v20 = *(void *)(a4 + 144);
      if (*(void *)(v20 + 20 * v19) || *(void *)(v20 + 20 * (v19 ^ 1)) != -1) {
        goto LABEL_18;
      }
      unint64_t v21 = v127;
      if (v127)
      {
        uint64_t v22 = &v127;
        do
        {
          uint64_t v23 = v21;
          uint64_t v24 = v22;
          int v25 = *(_DWORD *)((char *)v21 + 25);
          int v26 = (uint64_t **)(v21 + 1);
          if (v25 >= v19)
          {
            int v26 = (uint64_t **)v23;
            uint64_t v22 = (uint64_t **)v23;
          }
          unint64_t v21 = *v26;
        }
        while (v21);
        if (v22 != &v127)
        {
          if (v25 < v19) {
            uint64_t v23 = (uint64_t *)v24;
          }
          if (v19 >= *(_DWORD *)((char *)v23 + 25)) {
            goto LABEL_18;
          }
        }
      }
      uint64_t v27 = *(void *)(a1[5] + 8 * v17);
      if (*(double *)(*a2 + 8 * v19) > 0.000001)
      {
        uint64_t v28 = (_DWORD *)v125;
        if ((unint64_t)v125 < *((void *)&v125 + 1))
        {
          *(void *)long long v125 = v27;
          v28[2] = v19;
          char v29 = v28 + 3;
LABEL_65:
          *(void *)&long long v125 = v29;
          goto LABEL_18;
        }
        char v39 = v124;
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - (void)v124) >> 2);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*((void *)&v125 + 1) - (void)v124) >> 2) > v41) {
          unint64_t v41 = 0x5555555555555556 * ((uint64_t)(*((void *)&v125 + 1) - (void)v124) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v125 + 1) - (void)v124) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v42 = 0x1555555555555555;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          if (v42 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v104 = v42;
          uint64_t v43 = (char *)operator new(12 * v42);
          unint64_t v42 = v104;
          uint64_t v44 = (uint64_t)&v43[4 * ((uint64_t)(v125 - (void)v124) >> 2)];
          *(void *)uint64_t v44 = v27;
          *(_DWORD *)(v44 + 8) = v19;
          uint64_t v45 = (uint64_t)&v43[12 * v40];
          if (v28 == v39) {
            goto LABEL_63;
          }
          do
          {
LABEL_61:
            uint64_t v48 = *(void *)(v28 - 3);
            v28 -= 3;
            int v49 = v28[2];
            *(void *)(v45 - 12) = v48;
            v45 -= 12;
            *(_DWORD *)(v45 + 8) = v49;
          }
          while (v28 != v39);
          uint64_t v28 = v124;
        }
        else
        {
          uint64_t v43 = 0;
          uint64_t v44 = 4 * ((uint64_t)(v125 - (void)v124) >> 2);
          *(void *)uint64_t v44 = v27;
          *(_DWORD *)(v44 + 8) = v19;
          uint64_t v45 = 12 * v40;
          if (v28 != v39) {
            goto LABEL_61;
          }
        }
LABEL_63:
        char v29 = (_DWORD *)(v44 + 12);
        unint64_t v124 = (_DWORD *)v45;
        *((void *)&v125 + 1) = &v43[12 * v42];
        if (v28) {
          operator delete(v28);
        }
        goto LABEL_65;
      }
      uint64_t v30 = v122;
      if ((unint64_t)v122 >= v123) {
        break;
      }
      void *v122 = v27;
      v30[2] = v19;
      int v18 = v30 + 3;
LABEL_17:
      v122 = v18;
LABEL_18:
      ++v17;
      uint64_t v16 = a1[2];
      if (v17 >= (a1[3] - v16) >> 2)
      {
        uint64_t v51 = (uint64_t *)v124;
        uint64_t v50 = v125;
        goto LABEL_68;
      }
    }
    uint64_t v31 = v121;
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 2);
    unint64_t v33 = v32 + 1;
    if (v32 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(v123 - (void)v121) >> 2) > v33) {
      unint64_t v33 = 0x5555555555555556 * ((uint64_t)(v123 - (void)v121) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v121) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v34 = 0x1555555555555555;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34)
    {
      uint64_t v103 = *(void *)(a1[5] + 8 * v17);
      if (v34 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v35 = v34;
      uint64_t v36 = operator new(12 * v34);
      unint64_t v34 = v35;
      uint64_t v37 = (uint64_t)v36 + 4 * (((char *)v122 - (char *)v121) >> 2);
      *(void *)uint64_t v37 = v103;
      *(_DWORD *)(v37 + 8) = v19;
      uint64_t v38 = (uint64_t)v36 + 12 * v32;
      if (v30 == v31) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = 4 * (((char *)v122 - (char *)v121) >> 2);
      *(void *)uint64_t v37 = v27;
      *(_DWORD *)(v37 + 8) = v19;
      uint64_t v38 = 12 * v32;
      if (v30 == v31) {
        goto LABEL_57;
      }
    }
    do
    {
      uint64_t v46 = *(void *)(v30 - 3);
      v30 -= 3;
      int v47 = v30[2];
      *(void *)(v38 - 12) = v46;
      v38 -= 12;
      *(_DWORD *)(v38 + 8) = v47;
    }
    while (v30 != v31);
    uint64_t v30 = v121;
LABEL_57:
    int v18 = (void *)(v37 + 12);
    int v121 = (void *)v38;
    unint64_t v123 = (unint64_t)v36 + 12 * v34;
    if (v30) {
      operator delete(v30);
    }
    goto LABEL_17;
  }
  uint64_t v51 = 0;
  uint64_t v50 = 0;
LABEL_68:
  unint64_t v52 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v51) >> 2));
  if ((uint64_t *)v50 == v51) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v52;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(v50, v50, (uint64_t)v51, (uint64_t)v51, (uint64_t)v111, v53, 1);
  uint64_t v55 = v121;
  uint64_t v54 = v122;
  unint64_t v56 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 2));
  if (v122 == v121) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>((uint64_t)v122, (uint64_t)v122, (uint64_t)v121, (uint64_t)v121, (uint64_t)v111, v57, 1);
  long long v119 = v51;
  uint64_t v58 = v125;
  long long v120 = v125;
  long long v125 = 0uLL;
  unint64_t v124 = 0;
  std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>,std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>>((void **)&v119, v58, v55, v54, 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v55) >> 2));
  v116 = 0;
  v117 = 0;
  uint64_t v118 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  if (a6[3] != a6[2])
  {
    uint64_t v59 = 0;
    unint64_t v60 = 0;
    while (1)
    {
      double v62 = (double)*(uint64_t *)(a6[5] + 8 * v60);
      uint64_t v63 = v117;
      if (v117 < v118)
      {
        double *v117 = v62;
        uint64_t v64 = (uint64_t)(v63 + 1);
        goto LABEL_99;
      }
      int v65 = v116;
      uint64_t v66 = v117 - v116;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v68 = (char *)v118 - (char *)v116;
      if (((char *)v118 - (char *)v116) >> 2 > v67) {
        unint64_t v67 = v68 >> 2;
      }
      unint64_t v69 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v67;
      if (v69) {
        break;
      }
      unint64_t v70 = 0;
      unint64_t v71 = (double *)(8 * v66);
      *(double *)(8 * v66) = v62;
      uint64_t v64 = 8 * v66 + 8;
      if (v63 != v65) {
        goto LABEL_91;
      }
LABEL_97:
      v116 = v71;
      v117 = (double *)v64;
      uint64_t v118 = (double *)&v70[8 * v69];
      if (v65)
      {
        operator delete(v65);
        uint64_t v59 = v114;
      }
LABEL_99:
      v117 = (double *)v64;
      double v81 = (double)*(uint64_t *)(*a3 + 8 * v60);
      if (v59 >= v115)
      {
        long long v82 = v113;
        uint64_t v83 = v59 - v113;
        unint64_t v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v85 = (char *)v115 - (char *)v113;
        if (((char *)v115 - (char *)v113) >> 2 > v84) {
          unint64_t v84 = v85 >> 2;
        }
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v84;
        }
        if (v86)
        {
          if (v86 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v87 = operator new(8 * v86);
          unint64_t v88 = (double *)&v87[8 * v83];
          double *v88 = v81;
          uint64_t v61 = (uint64_t)(v88 + 1);
          if (v59 == v82) {
            goto LABEL_114;
          }
LABEL_111:
          unint64_t v89 = (char *)(v59 - 1) - (char *)v82;
          if (v89 < 0x168)
          {
            v90 = v59;
            goto LABEL_113;
          }
          if (&v87[(char *)v59 - (char *)v82 - 8 - (v89 & 0xFFFFFFFFFFFFFFF8)] > &v87[(char *)v59 - (char *)v82 - 8])
          {
            v90 = v59;
            goto LABEL_113;
          }
          if ((double *)((char *)v59 - (v89 & 0xFFFFFFFFFFFFFFF8) - 8) > v59 - 1)
          {
            v90 = v59;
            goto LABEL_113;
          }
          if ((unint64_t)((char *)v82 - v87) < 0x20)
          {
            v90 = v59;
            goto LABEL_113;
          }
          uint64_t v92 = (v89 >> 3) + 1;
          uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          v90 = &v59[v93 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v88 = (double *)((char *)v88 - v93);
          unint64_t v94 = &v87[8 * v83 - 16];
          uint64_t v95 = v59 - 2;
          uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v97 = *(_OWORD *)v95;
            *(v94 - 1) = *((_OWORD *)v95 - 1);
            *unint64_t v94 = v97;
            v94 -= 2;
            v95 -= 4;
            v96 -= 4;
          }
          while (v96);
          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_113:
              uint64_t v91 = *((void *)v90-- - 1);
              *((void *)v88-- - 1) = v91;
            }
            while (v90 != v82);
          }
        }
        else
        {
          uint64_t v87 = 0;
          unint64_t v88 = (double *)(8 * v83);
          *(double *)(8 * v83) = v81;
          uint64_t v61 = 8 * v83 + 8;
          if (v59 != v82) {
            goto LABEL_111;
          }
        }
LABEL_114:
        uint64_t v113 = v88;
        uint64_t v114 = (double *)v61;
        uint64_t v115 = (double *)&v87[8 * v86];
        if (v82) {
          operator delete(v82);
        }
        goto LABEL_77;
      }
      *uint64_t v59 = v81;
      uint64_t v61 = (uint64_t)(v59 + 1);
LABEL_77:
      uint64_t v114 = (double *)v61;
      ++v60;
      uint64_t v59 = (double *)v61;
      if (v60 >= (uint64_t)(a6[3] - a6[2]) >> 2) {
        goto LABEL_126;
      }
    }
    if (v69 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v70 = operator new(8 * v69);
    unint64_t v71 = (double *)&v70[8 * v66];
    double *v71 = v62;
    uint64_t v64 = (uint64_t)(v71 + 1);
    if (v63 == v65) {
      goto LABEL_97;
    }
LABEL_91:
    unint64_t v72 = (char *)(v63 - 1) - (char *)v65;
    if (v72 < 0x58) {
      goto LABEL_152;
    }
    if ((unint64_t)((char *)v65 - v70) < 0x20) {
      goto LABEL_152;
    }
    uint64_t v73 = (v72 >> 3) + 1;
    uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v75 = &v63[v74 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v71 = (double *)((char *)v71 - v74);
    unint64_t v76 = &v70[8 * v66 - 16];
    v77 = v63 - 2;
    uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      _OWORD *v76 = v79;
      v76 -= 2;
      v77 -= 4;
      v78 -= 4;
    }
    while (v78);
    uint64_t v63 = v75;
    if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_152:
      do
      {
        uint64_t v80 = *((void *)v63-- - 1);
        *((void *)v71-- - 1) = v80;
      }
      while (v63 != v65);
    }
    goto LABEL_97;
  }
LABEL_126:
  BOOL v112 = 0;
  char v110 = 19;
  strcpy(__p, "Knapsack cut lifter");
  operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts((uint64_t)v111, (long long *)__p);
  if (v110 < 0)
  {
    operator delete(*(void **)__p);
    v99 = v119;
    int v98 = (uint64_t *)v120;
    if (v119 == (uint64_t *)v120) {
      goto LABEL_133;
    }
  }
  else
  {
    v99 = v119;
    int v98 = (uint64_t *)v120;
    if (v119 == (uint64_t *)v120) {
      goto LABEL_133;
    }
  }
  do
  {
    uint64_t v100 = *v99;
    BOOL v112 = 0;
    uint64_t v101 = a1[1] - v100;
    if (v101 >= 1)
    {
      operations_research::KnapsackSolverForCuts::Init(v111, &v116, &v113, (double)v101);
      v111[32] = (char *)100;
      operations_research::KnapsackSolverForCuts::Solve((operations_research::KnapsackSolverForCuts *)v111, a5, &v112);
    }
    v99 = (uint64_t *)((char *)v99 + 12);
  }
  while (v99 != v98);
LABEL_133:
  operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)v111);
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v119)
  {
    *(void *)&long long v120 = v119;
    operator delete(v119);
  }
  if (v121) {
    operator delete(v121);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v126, v127);
  return 0;
}

void sub_23CCA7D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v24 = *(void **)(v22 - 184);
  if (v24)
  {
    *(void *)(v22 - 176) = v24;
    operator delete(v24);
    int v25 = *(void **)(v22 - 160);
    if (!v25)
    {
LABEL_4:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v22 - 136, *(void **)(v22 - 128));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v25 = *(void **)(v22 - 160);
    if (!v25) {
      goto LABEL_4;
    }
  }
  *(void *)(v22 - 152) = v25;
  operator delete(v25);
  goto LABEL_4;
}

void *operations_research::sat::GetPreprocessedLinearConstraint@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  uint64_t v6 = result[2];
  uint64_t v5 = result[3];
  uint64_t v7 = result[1];
  if (v5 != v6)
  {
    uint64_t v8 = a3;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v55 = (void **)(a4 + 40);
    unint64_t v56 = (void **)(a4 + 16);
    uint64_t v59 = a2;
    unint64_t v60 = result;
    while (1)
    {
      while (1)
      {
        int v11 = *(_DWORD *)(v6 + 4 * v10);
        uint64_t v12 = *(void *)(v8 + 144);
        uint64_t v13 = *(void *)(result[5] + 8 * v10);
        if ((double)(uint64_t)-*(void *)(v12 + 20 * (v11 ^ 1)) - *(double *)(*a2 + 8 * v11) <= 0.9999) {
          break;
        }
        v7 -= *(void *)(v12 + 20 * v11) * v13;
        if (++v10 >= (unint64_t)((v5 - v6) >> 2)) {
          goto LABEL_55;
        }
      }
      uint64_t v15 = *(char **)(a4 + 24);
      unint64_t v14 = *(void *)(a4 + 32);
      if ((unint64_t)v15 < v14)
      {
        *(_DWORD *)uint64_t v15 = v11;
        *(void *)(a4 + 24) = v15 + 4;
        unint64_t v16 = *(void *)(a4 + 56);
        if ((unint64_t)v9 >= v16) {
          goto LABEL_28;
        }
        goto LABEL_7;
      }
      uint64_t v57 = v7;
      int v18 = (char *)*v56;
      uint64_t v19 = v15 - (unsigned char *)*v56;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v14 - (void)v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      unint64_t v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (!v23) {
        break;
      }
      if (v23 >> 62) {
        goto LABEL_56;
      }
      unint64_t v24 = v23;
      int v25 = operator new(4 * v23);
      unint64_t v23 = v24;
      int v26 = &v25[4 * v20];
      *int v26 = v11;
      uint64_t v27 = (uint64_t)(v26 + 1);
      if (v15 != v18) {
        goto LABEL_19;
      }
LABEL_25:
      *(void *)(a4 + 16) = v26;
      *(void *)(a4 + 24) = v27;
      *(void *)(a4 + 32) = &v25[4 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v9 = *(char **)(a4 + 48);
      }
      a2 = v59;
      uint64_t result = v60;
      uint64_t v7 = v57;
      uint64_t v8 = a3;
      *(void *)(a4 + 24) = v27;
      unint64_t v16 = *(void *)(a4 + 56);
      if ((unint64_t)v9 >= v16)
      {
LABEL_28:
        uint64_t v37 = (char *)*v55;
        uint64_t v38 = v9 - (unsigned char *)*v55;
        uint64_t v39 = v38 >> 3;
        unint64_t v40 = (v38 >> 3) + 1;
        if (v40 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v41 = v7;
        uint64_t v42 = v16 - (void)v37;
        if (v42 >> 2 > v40) {
          unint64_t v40 = v42 >> 2;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v40;
        }
        if (v43)
        {
          if (v43 >> 61) {
LABEL_56:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v44 = operator new(8 * v43);
          uint64_t v45 = &v44[8 * v39];
          *uint64_t v45 = v13;
          uint64_t v17 = (uint64_t)(v45 + 1);
          if (v9 != v37)
          {
LABEL_37:
            unint64_t v46 = v9 - 8 - v37;
            if (v46 < 0x168
              || &v44[v38 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v44[v38 - 8]
              || &v9[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8
              || (unint64_t)(v9 - v44 - v38) < 0x20)
            {
              int v47 = v9;
              uint64_t v8 = a3;
            }
            else
            {
              uint64_t v49 = (v46 >> 3) + 1;
              uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
              int v47 = &v9[-v50];
              uint64_t v45 = (void *)((char *)v45 - v50);
              uint64_t v51 = &v44[8 * v39 - 16];
              unint64_t v52 = v9 - 16;
              uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v8 = a3;
              do
              {
                long long v54 = *(_OWORD *)v52;
                *(v51 - 1) = *((_OWORD *)v52 - 1);
                *uint64_t v51 = v54;
                v51 -= 2;
                v52 -= 32;
                v53 -= 4;
              }
              while (v53);
              if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_40:
                *(void *)(a4 + 40) = v45;
                *(void *)(a4 + 48) = v17;
                *(void *)(a4 + 56) = &v44[8 * v43];
                if (v37) {
                  goto LABEL_41;
                }
                goto LABEL_42;
              }
            }
            do
            {
              uint64_t v48 = *((void *)v47 - 1);
              v47 -= 8;
              *--uint64_t v45 = v48;
            }
            while (v47 != v37);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v44 = 0;
          uint64_t v45 = (void *)(8 * v39);
          *(void *)(8 * v39) = v13;
          uint64_t v17 = 8 * v39 + 8;
          if (v9 != v37) {
            goto LABEL_37;
          }
        }
        uint64_t v8 = a3;
        *(void *)(a4 + 40) = v45;
        *(void *)(a4 + 48) = v17;
        *(void *)(a4 + 56) = &v44[8 * v43];
        if (v37) {
LABEL_41:
        }
          operator delete(v37);
LABEL_42:
        a2 = v59;
        uint64_t result = v60;
        uint64_t v7 = v41;
        goto LABEL_43;
      }
LABEL_7:
      *(void *)uint64_t v9 = v13;
      uint64_t v17 = (uint64_t)(v9 + 8);
LABEL_43:
      *(void *)(a4 + 48) = v17;
      uint64_t v9 = (char *)v17;
      uint64_t v6 = result[2];
      uint64_t v5 = result[3];
      if (++v10 >= (unint64_t)((v5 - v6) >> 2)) {
        goto LABEL_55;
      }
    }
    int v25 = 0;
    int v26 = (_DWORD *)(4 * v20);
    *(_DWORD *)(4 * v20) = v11;
    uint64_t v27 = 4 * v20 + 4;
    if (v15 == v18) {
      goto LABEL_25;
    }
LABEL_19:
    unint64_t v28 = v15 - 4 - v18;
    if (v28 < 0x2C) {
      goto LABEL_61;
    }
    if ((unint64_t)(v15 - &v25[v19]) < 0x20) {
      goto LABEL_61;
    }
    uint64_t v29 = (v28 >> 2) + 1;
    uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v31 = &v15[-v30];
    int v26 = (_DWORD *)((char *)v26 - v30);
    unint64_t v32 = &v25[4 * v20 - 16];
    unint64_t v33 = v15 - 16;
    uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *unint64_t v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 8;
    }
    while (v34);
    uint64_t v15 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        int v36 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--int v26 = v36;
      }
      while (v15 != v18);
    }
    goto LABEL_25;
  }
LABEL_55:
  *(void *)a4 = *result;
  *(void *)(a4 + 8) = v7;
  return result;
}

void sub_23CCA8310(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

void sub_23CCA8324(_Unwind_Exception *a1)
{
  operations_research::sat::LinearConstraint::~LinearConstraint(v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat *this, const operations_research::sat::LinearConstraint *a2, const operations_research::sat::IntegerTrail *a3)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3) - v3;
  if (!v4)
  {
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  unint64_t v5 = v4 >> 2;
  uint64_t v6 = *((void *)a2 + 18);
  uint64_t v7 = *((void *)this + 5);
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  if (v5 < 2)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
LABEL_10:
    uint64_t v15 = (uint64_t *)(v7 + 8 * v8);
    unint64_t v16 = v5 - v8;
    uint64_t v17 = (int *)(v3 + 4 * v8);
    do
    {
      int v18 = *v17++;
      uint64_t v19 = *(void *)(v6 + 20 * (v18 ^ 1));
      uint64_t v20 = *v15++;
      v9 -= v20 * v19;
      --v16;
    }
    while (v16);
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v12 = (_DWORD *)(v3 + 4);
  uint64_t v13 = (void *)(v7 + 8);
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v10 -= *(v13 - 1) * *(void *)(v6 + 20 * (*(v12 - 1) ^ 1));
    v11 -= *v13 * *(void *)(v6 + 20 * (*v12 ^ 1));
    v12 += 2;
    v13 += 2;
    v14 -= 2;
  }
  while (v14);
  uint64_t v9 = v11 + v10;
  if (v5 != v8) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v21 = *((void *)this + 1);
  if (v9 <= v21
    && *operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
    && (operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::ConstraintIsTriviallyTrue(operations_research::sat::LinearConstraint const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 269);
    uint64_t v22 = (void *)google::LogMessage::stream((google::LogMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Filtered by cover filter", 24);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
  return v9 <= v21;
}

void sub_23CCA84B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::CanBeFilteredUsingCutLowerBound(void *a1, void *a2, uint64_t a3)
{
  long long v82 = 0;
  uint64_t v3 = a1;
  uint64_t v83 = 0;
  uint64_t v4 = (int *)a1[2];
  unint64_t v5 = (int *)a1[3];
  if (v4 == v5)
  {
    unint64_t v28 = 0;
    uint64_t v31 = 0;
    uint64_t v27 = a1[1];
    uint64_t v85 = 0;
    unint64_t v86 = 0;
    goto LABEL_66;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  long long v79 = a2;
  do
  {
    while (1)
    {
      double v10 = (double)(uint64_t)-*(void *)(*(void *)(a3 + 144) + 20 * (*v4 ^ 1)) - *(double *)(*a2 + 8 * *v4);
      if (v6 >= v7) {
        break;
      }
      *v6++ = v10;
      uint64_t v9 = (uint64_t)v6;
      if (++v4 == v5) {
        goto LABEL_33;
      }
    }
    uint64_t v11 = v6 - v8;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v7 - (char *)v8) >> 2 > v12) {
      unint64_t v12 = ((char *)v7 - (char *)v8) >> 2;
    }
    if ((unint64_t)((char *)v7 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = operator new(8 * v13);
      uint64_t v15 = (double *)&v14[8 * v11];
      *uint64_t v15 = v10;
      uint64_t v9 = (uint64_t)(v15 + 1);
      if (v6 == v8) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = (double *)(8 * v11);
      *(double *)(8 * v11) = v10;
      uint64_t v9 = 8 * v11 + 8;
      if (v6 == v8) {
        goto LABEL_19;
      }
    }
    unint64_t v16 = (char *)(v6 - 1) - (char *)v8;
    if (v16 < 0x168)
    {
      uint64_t v17 = v6;
      goto LABEL_18;
    }
    if (&v14[(char *)v6 - (char *)v8 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v6 - (char *)v8 - 8])
    {
      uint64_t v17 = v6;
      do
      {
LABEL_18:
        uint64_t v18 = *((void *)v17-- - 1);
        *((void *)v15-- - 1) = v18;
      }
      while (v17 != v8);
      goto LABEL_19;
    }
    if ((double *)((char *)v6 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
    {
      uint64_t v17 = v6;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v8 - v14) < 0x20)
    {
      uint64_t v17 = v6;
      goto LABEL_18;
    }
    uint64_t v19 = (v16 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v17 = &v6[v20 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v15 = (double *)((char *)v15 - v20);
    uint64_t v21 = &v14[8 * v11 - 16];
    uint64_t v22 = v6 - 2;
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_18;
    }
LABEL_19:
    uint64_t v7 = (double *)&v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
    unint64_t v8 = v15;
    a2 = v79;
    ++v4;
    uint64_t v6 = (double *)v9;
  }
  while (v4 != v5);
LABEL_33:
  uint64_t v83 = (double *)v9;
  uint64_t v3 = a1;
  uint64_t v26 = a1[2];
  uint64_t v25 = a1[3];
  long long v82 = v8;
  uint64_t v27 = a1[1];
  long long __p = 0;
  uint64_t v85 = 0;
  unint64_t v86 = 0;
  if (v25 != v26)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v32 = *(void *)(v3[5] + 8 * v29);
          int v33 = *(_DWORD *)(v26 + 4 * v29);
          uint64_t v34 = *(void *)(a3 + 144);
          uint64_t v35 = *(void *)(v34 + 20 * v33);
          uint64_t v36 = -(v32 * (v35 + *(void *)(v34 + 20 * (v33 ^ 1))));
          if (v28 >= v30) {
            break;
          }
          *(void *)unint64_t v28 = v36;
          v28 += 8;
          v27 -= v35 * v32;
          if (++v29 >= (unint64_t)((v25 - v26) >> 2)) {
            goto LABEL_63;
          }
        }
        int64_t v37 = v28 - v31;
        uint64_t v38 = (v28 - v31) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
        {
          uint64_t v85 = v28;
          unint64_t v86 = v30;
          long long __p = v31;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v30 - v31) >> 2 > v39) {
          unint64_t v39 = (v30 - v31) >> 2;
        }
        unint64_t v40 = (unint64_t)(v30 - v31) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v39;
        uint64_t v80 = *(void *)(v3[5] + 8 * v29);
        if (v40) {
          break;
        }
        int v47 = 0;
        uint64_t v48 = (char *)(8 * v38);
        *(void *)(8 * v38) = v36;
        uint64_t v49 = 8 * v38 + 8;
        if (v28 != v31) {
          goto LABEL_46;
        }
LABEL_53:
        uint64_t v3 = a1;
        uint64_t v30 = &v47[8 * v40];
        if (v31) {
          goto LABEL_50;
        }
LABEL_54:
        uint64_t v31 = v48;
        unint64_t v28 = (char *)v49;
        v27 -= v35 * v80;
        if (++v29 >= (unint64_t)((v25 - v26) >> 2))
        {
LABEL_63:
          uint64_t v85 = v28;
          unint64_t v86 = v30;
          goto LABEL_66;
        }
      }
      int64_t v78 = v28 - v31;
      if (v40 >> 61)
      {
        unint64_t v86 = v30;
        long long __p = v31;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v41 = v28;
      uint64_t v42 = v27;
      uint64_t v43 = v35;
      uint64_t v44 = v26;
      uint64_t v45 = v25;
      unint64_t v46 = v40;
      int v47 = operator new(8 * v40);
      uint64_t v25 = v45;
      uint64_t v26 = v44;
      unint64_t v40 = v46;
      uint64_t v35 = v43;
      uint64_t v27 = v42;
      unint64_t v28 = v41;
      int64_t v37 = v78;
      uint64_t v48 = &v47[8 * v38];
      *(void *)uint64_t v48 = v36;
      uint64_t v49 = (uint64_t)(v48 + 8);
      if (v41 == v31) {
        goto LABEL_53;
      }
LABEL_46:
      unint64_t v50 = v28 - 8 - v31;
      if (v50 < 0x168
        || &v47[v37 - 8 - (v50 & 0xFFFFFFFFFFFFFFF8)] > &v47[v37 - 8]
        || &v28[-(v50 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8
        || (unint64_t)(v28 - &v47[v37]) < 0x20)
      {
        uint64_t v51 = v28;
        uint64_t v3 = a1;
        do
        {
LABEL_48:
          uint64_t v52 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v48 - 1) = v52;
          v48 -= 8;
        }
        while (v51 != v31);
        goto LABEL_49;
      }
      uint64_t v54 = (v50 >> 3) + 1;
      uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v51 = &v28[-v55];
      v48 -= v55;
      unint64_t v56 = &v47[8 * v38 - 16];
      uint64_t v57 = v28 - 16;
      uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v3 = a1;
      do
      {
        long long v59 = *(_OWORD *)v57;
        *(v56 - 1) = *((_OWORD *)v57 - 1);
        *unint64_t v56 = v59;
        v56 -= 2;
        v57 -= 32;
        v58 -= 4;
      }
      while (v58);
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_48;
      }
LABEL_49:
      uint64_t v30 = &v47[8 * v40];
      if (!v31) {
        goto LABEL_54;
      }
LABEL_50:
      uint64_t v53 = (char *)v49;
      operator delete(v31);
      uint64_t v26 = v3[2];
      uint64_t v25 = v3[3];
      uint64_t v31 = v48;
      unint64_t v28 = v53;
      v27 -= v35 * v80;
      if (++v29 >= (unint64_t)((v25 - v26) >> 2)) {
        goto LABEL_63;
      }
    }
  }
  unint64_t v28 = 0;
  uint64_t v31 = 0;
LABEL_66:
  unint64_t v60 = 126 - 2 * __clz((v28 - v31) >> 3);
  long long __p = v31;
  if (v28 == v31) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = v60;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>((uint64_t)v31, v28, (uint64_t)&v87, v61, 1);
  if (v27 < 0)
  {
    LODWORD(v65) = 0;
    if (__p) {
LABEL_74:
    }
      operator delete(__p);
  }
  else
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = v3[2];
    while ((v3[3] - v64) >> 2 != v62)
    {
      LODWORD(v65) = v62 + 1;
      v63 += *((void *)__p + v62++);
      if (v63 > v27)
      {
        if (!__p) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
    }
    uint64_t v65 = (v3[3] - v64) >> 2;
    if (__p) {
      goto LABEL_74;
    }
  }
LABEL_75:
  uint64_t v66 = &v82[(int)v65 - 1];
  if (v66 != v83) {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v82, v66, v83);
  }
  if ((int)v65 < 1)
  {
    uint64_t v69 = 0;
    if (v82) {
      goto LABEL_98;
    }
  }
  else
  {
    if (v65 == 1)
    {
      uint64_t v67 = 0;
      double v68 = 0.0;
      goto LABEL_89;
    }
    uint64_t v67 = v65 & 0xFFFFFFFE;
    unint64_t v70 = v82 + 1;
    double v68 = 0.0;
    uint64_t v71 = v67;
    do
    {
      double v68 = v68 + *(v70 - 1) + *v70;
      v70 += 2;
      v71 -= 2;
    }
    while (v71);
    if (v67 != v65)
    {
LABEL_89:
      unint64_t v72 = &v82[v67];
      uint64_t v73 = v65 - v67;
      do
      {
        double v74 = *v72++;
        double v68 = v68 + v74;
        --v73;
      }
      while (v73);
    }
    if (v68 >= 0.9999)
    {
      if (*operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
        && (operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::CanBeFilteredUsingCutLowerBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 297);
        unint64_t v75 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Filtered by kappa heuristic", 27);
        google::LogMessage::~LogMessage((google::LogMessage *)&__p);
      }
      uint64_t v69 = 1;
    }
    else
    {
      uint64_t v69 = 0;
    }
LABEL_98:
    operator delete(v82);
  }
  return v69;
}

void sub_23CCA8B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(void *a1, void *a2, uint64_t a3, __n128 a4)
{
  unint64_t v39 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v4 = a1[2];
  if (a1[3] == v4) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  double v10 = (double)(uint64_t)-a1[1] + -1.0;
  double v11 = 0.0;
  unint64_t v12 = v40;
  uint64_t v36 = a2;
  int64_t v37 = a1;
  do
  {
    uint64_t v13 = *(int *)(v4 + 4 * v7);
    uint64_t v14 = *(void *)(a3 + 144);
    uint64_t v15 = *(void *)(a1[5] + 8 * v7);
    uint64_t v16 = -*(void *)(v14 + 20 * (int)(v13 ^ 1));
    double v17 = (double)v16 - *(double *)(*a2 + 8 * v13);
    double v18 = (double)(v15 * (v16 - *(void *)(v14 + 20 * (int)v13)));
    if (v6 < v8)
    {
      *uint64_t v6 = v17;
      v6[1] = v18;
      unint64_t v12 = (__n128 *)(v6 + 2);
      goto LABEL_4;
    }
    uint64_t v19 = ((char *)v6 - (char *)v9) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
    {
      unint64_t v40 = v12;
      uint64_t v41 = v8;
      unint64_t v39 = v9;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v8 - (char *)v9) >> 3 > v20) {
      unint64_t v20 = ((char *)v8 - (char *)v9) >> 3;
    }
    if ((unint64_t)((char *)v8 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21)
    {
      if (v21 >> 60)
      {
        unint64_t v40 = v12;
        uint64_t v41 = v8;
        unint64_t v39 = v9;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = (char *)operator new(16 * v21);
      uint64_t v23 = (double *)&v22[16 * v19];
      double *v23 = v17;
      v23[1] = v18;
      if (v6 == (double *)v9)
      {
LABEL_21:
        uint64_t v25 = (__n128 *)v23;
        unint64_t v8 = (double *)&v22[16 * v21];
        unint64_t v12 = (__n128 *)(v23 + 2);
        if (!v9) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = (double *)(16 * v19);
      double *v23 = v17;
      v23[1] = v18;
      if (v6 == (double *)v9) {
        goto LABEL_21;
      }
    }
    long long v24 = v23;
    do
    {
      a4 = *(__n128 *)(v6 - 2);
      uint64_t v25 = (__n128 *)(v24 - 2);
      *((__n128 *)v24 - 1) = a4;
      v6 -= 2;
      v24 -= 2;
    }
    while (v6 != (double *)v9);
    unint64_t v8 = (double *)&v22[16 * v21];
    unint64_t v12 = (__n128 *)(v23 + 2);
    if (!v9) {
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v9);
LABEL_19:
    uint64_t v9 = v25;
    a2 = v36;
    a1 = v37;
LABEL_4:
    double v10 = v10 + (double)(v15 * v16);
    double v11 = v11 + v17;
    ++v7;
    uint64_t v4 = a1[2];
    uint64_t v6 = (double *)v12;
  }
  while (v7 < (a1[3] - v4) >> 2);
  unint64_t v40 = v12;
  uint64_t v41 = v8;
  a4.n128_f64[0] = v11 + -1.0;
  double v26 = v11 + -1.0 + 0.0001;
  unint64_t v39 = v9;
  if (v26 >= 0.0)
  {
    unint64_t v28 = 126 - 2 * __clz(v12 - v9);
    unint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    if (v12 == v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(v9, v12, (uint64_t)v38, v29, 1, a4);
    double v30 = 0.0;
    if (v12 == v9)
    {
LABEL_34:
      if (!v9) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v31 = (double *)v9;
      while (1)
      {
        double v32 = *v31;
        double v33 = v31[1];
        if (v33 > v10) {
          break;
        }
        double v30 = v30 + v32;
        double v10 = v10 - v33;
        v31 += 2;
        if (v31 == (double *)v12) {
          goto LABEL_34;
        }
      }
      double v30 = v30 + v10 / v33 * v32;
      if (!v9)
      {
LABEL_36:
        BOOL v27 = v30 < v26;
        if (v30 < v26
          && *operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] >= 2
          && (operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(operations_research::sat::LinearConstraint const&,gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::IntegerTrail const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v38, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 349);
          uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Filtered by knapsack upper bound", 32);
          google::LogMessage::~LogMessage((google::LogMessage *)v38);
        }
        uint64_t v9 = v39;
        if (v39) {
          goto LABEL_42;
        }
        return v27;
      }
    }
    operator delete(v9);
    goto LABEL_36;
  }
  BOOL v27 = 0;
  if (!v9) {
    return v27;
  }
LABEL_42:
  unint64_t v40 = v9;
  operator delete(v9);
  return v27;
}

void sub_23CCA8F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConvertToKnapsackForm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  if (v3 != a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[5];
    uint64_t v6 = *v5;
    if (*v5 < 0) {
      uint64_t v6 = -v6;
    }
    uint64_t v7 = a1[6] - (void)v5;
    if ((unint64_t)v7 >= 9)
    {
      uint64_t v9 = v7 >> 3;
      if ((unint64_t)(v7 >> 3) <= 2) {
        uint64_t v9 = 2;
      }
      uint64_t v10 = 1;
      while (*(void *)(*(void *)(a3 + 144) + 20 * (*(_DWORD *)(v3 + 4 * v10) ^ 1))
            + *(void *)(*(void *)(a3 + 144) + 20 * *(int *)(v3 + 4 * v10))
            - 1 >= -2)
      {
        uint64_t v11 = v5[v10];
        if (v11 < 0) {
          uint64_t v11 = -v11;
        }
        if (v11 != v6) {
          break;
        }
        if (v9 == ++v10) {
          return;
        }
      }
      if (a1[1] <= 0x7FFFFFFFFFFFFFFDLL)
      {
        unint64_t v12 = 0;
        *(_OWORD *)long long __p = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        *(_OWORD *)BOOL v27 = 0u;
        do
        {
          uint64_t v13 = *(void *)(a1[5] + 8 * v12);
          if (v13 >= 0) {
            uint64_t v14 = *(void *)(a1[5] + 8 * v12);
          }
          else {
            uint64_t v14 = -v13;
          }
          operations_research::sat::LinearConstraint::AddTerm(&v26, *(_DWORD *)(v3 + 4 * v12++) ^ (v13 < 1), v14);
          uint64_t v3 = a1[2];
        }
        while (v12 < (a1[3] - v3) >> 2);
        uint64_t v15 = a1[1];
        *(void *)&long long v26 = 0x8000000000000002;
        *((void *)&v26 + 1) = v15;
        unint64_t v16 = *(void *)(a2 + 8);
        if (v16 >= *(void *)(a2 + 16))
        {
          double v17 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>((operations_research::sat::LinearConstraint **)a2, (const operations_research::sat::LinearConstraint *)&v26);
        }
        else
        {
          operations_research::sat::LinearConstraint::LinearConstraint(*(operations_research::sat::LinearConstraint **)(a2 + 8), (const operations_research::sat::LinearConstraint *)&v26);
          double v17 = (char *)(v16 + 64);
          *(void *)(a2 + 8) = v16 + 64;
        }
        *(void *)(a2 + 8) = v17;
        if (__p[1])
        {
          *(void **)&long long v29 = __p[1];
          operator delete(__p[1]);
        }
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
      }
      uint64_t v18 = *a1;
      if (*a1 > (uint64_t)0x8000000000000002)
      {
        *(_OWORD *)long long __p = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        *(_OWORD *)BOOL v27 = 0u;
        uint64_t v19 = a1[2];
        if (a1[3] != v19)
        {
          unint64_t v20 = 0;
          do
          {
            int v21 = *(_DWORD *)(v19 + 4 * v20);
            uint64_t v22 = *(void *)(a1[5] + 8 * v20);
            if (v22 >= 0) {
              uint64_t v23 = *(void *)(a1[5] + 8 * v20);
            }
            else {
              uint64_t v23 = -v22;
            }
            operations_research::sat::LinearConstraint::AddTerm(&v26, v21 ^ (v22 > 0), v23);
            ++v20;
            uint64_t v19 = a1[2];
          }
          while (v20 < (a1[3] - v19) >> 2);
          uint64_t v18 = *a1;
        }
        *(void *)&long long v26 = 0x8000000000000002;
        *((void *)&v26 + 1) = -v18;
        unint64_t v24 = *(void *)(a2 + 8);
        if (v24 >= *(void *)(a2 + 16))
        {
          uint64_t v25 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>((operations_research::sat::LinearConstraint **)a2, (const operations_research::sat::LinearConstraint *)&v26);
        }
        else
        {
          operations_research::sat::LinearConstraint::LinearConstraint(*(operations_research::sat::LinearConstraint **)(a2 + 8), (const operations_research::sat::LinearConstraint *)&v26);
          uint64_t v25 = (char *)(v24 + 64);
          *(void *)(a2 + 8) = v24 + 64;
        }
        *(void *)(a2 + 8) = v25;
        if (__p[1])
        {
          *(void **)&long long v29 = __p[1];
          operator delete(__p[1]);
        }
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
      }
    }
  }
}

void sub_23CCA9230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCA9244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a9);
  _Unwind_Resume(a1);
}

void sub_23CCA9274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCA9288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::LinearConstraint::AddTerm(void *a1, int a2, uint64_t a3)
{
  uint64_t v7 = (char *)a1[3];
  unint64_t v6 = a1[4];
  unint64_t v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *(_DWORD *)uint64_t v7 = a2;
    uint64_t v9 = (uint64_t)(v7 + 4);
    goto LABEL_22;
  }
  uint64_t v10 = (char *)a1[2];
  uint64_t v11 = (v7 - v10) >> 2;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      goto LABEL_44;
    }
    uint64_t v15 = operator new(4 * v14);
    unint64_t v16 = &v15[4 * v11];
    double v17 = &v15[4 * v14];
    *unint64_t v16 = a2;
    uint64_t v9 = (uint64_t)(v16 + 1);
    int64_t v18 = v7 - v10;
    if (v7 == v10) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  unint64_t v16 = (_DWORD *)(4 * v11);
  double v17 = 0;
  *(_DWORD *)(4 * v11) = a2;
  uint64_t v9 = 4 * v11 + 4;
  int64_t v18 = v7 - v10;
  if (v7 != v10)
  {
LABEL_14:
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_49;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v8 = &v7[-v21];
    unint64_t v16 = (_DWORD *)((char *)v16 - v21);
    uint64_t v22 = &v15[4 * v11 - 16];
    uint64_t v23 = v7 - 16;
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        int v26 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--unint64_t v16 = v26;
      }
      while (v8 != v10);
    }
  }
LABEL_20:
  a1[2] = v16;
  a1[3] = v9;
  a1[4] = v17;
  if (v10) {
    operator delete(v10);
  }
LABEL_22:
  a1[3] = v9;
  unint64_t v28 = (char *)a1[6];
  unint64_t v27 = a1[7];
  if ((unint64_t)v28 < v27)
  {
    *(void *)unint64_t v28 = a3;
    uint64_t v29 = (uint64_t)(v28 + 8);
    goto LABEL_43;
  }
  double v30 = (char *)a1[5];
  uint64_t v31 = (v28 - v30) >> 3;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v33 = v27 - (void)v30;
  if (v33 >> 2 > v32) {
    unint64_t v32 = v33 >> 2;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (!v34)
  {
    uint64_t v35 = 0;
    uint64_t v36 = (void *)(8 * v31);
    int64_t v37 = 0;
    *(void *)(8 * v31) = a3;
    uint64_t v29 = 8 * v31 + 8;
    int64_t v38 = v28 - v30;
    if (v28 == v30) {
      goto LABEL_41;
    }
LABEL_35:
    unint64_t v39 = v38 - 8;
    if (v39 < 0x58) {
      goto LABEL_50;
    }
    if ((unint64_t)(v30 - v35) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v40 = (v39 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v42 = &v28[-v41];
    uint64_t v36 = (void *)((char *)v36 - v41);
    uint64_t v43 = &v35[8 * v31 - 16];
    uint64_t v44 = v28 - 16;
    uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *uint64_t v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    unint64_t v28 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        uint64_t v47 = *((void *)v28 - 1);
        v28 -= 8;
        *--uint64_t v36 = v47;
      }
      while (v28 != v30);
    }
    goto LABEL_41;
  }
  if (v34 >> 61) {
LABEL_44:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v35 = operator new(8 * v34);
  uint64_t v36 = &v35[8 * v31];
  int64_t v37 = &v35[8 * v34];
  *uint64_t v36 = a3;
  uint64_t v29 = (uint64_t)(v36 + 1);
  int64_t v38 = v28 - v30;
  if (v28 != v30) {
    goto LABEL_35;
  }
LABEL_41:
  a1[5] = v36;
  a1[6] = v29;
  a1[7] = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_43:
  a1[6] = v29;
}

void operations_research::sat::CreateKnapsackCoverCutGenerator(uint64_t **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[6] = 0;
  if (a4 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *a2, a2[1], (a2[1] - *a2) >> 2);
  }
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  double v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  while (v10 != v9)
  {
    if ((unint64_t)(v10[3] - v10[2]) >= 0xC) {
      operations_research::sat::ConvertToKnapsackForm(v10, (uint64_t)&v68, v8);
    }
    v10 += 8;
  }
  if (*operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] > 0
    && (operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v71, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 441);
    uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#knapsack constraints: ", 23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v71);
  }
  unint64_t v12 = *a2;
  uint64_t v13 = (int *)a2[1];
  uint64_t v14 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(a3);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>((uint64_t)v55, (int *)v12, v13, 0);
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v62 = 0;
  uint64_t v63 = v8;
  uint64_t v64 = v14;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v35, (char **)v55);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(&v47, (uint64_t)v68, (uint64_t)v69, (v69 - (unsigned char *)v68) >> 6);
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v15 = *a2;
  int64_t v16 = a2[1] - *a2;
  if (v16)
  {
    if (v16 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v50 = operator new(v16);
    uint64_t v51 = v50;
    double v17 = (char *)v50 + 4 * (v16 >> 2);
    uint64_t v52 = v17;
    memcpy(v50, v15, v16);
    uint64_t v51 = v17;
  }
  uint64_t v53 = a3;
  uint64_t v54 = v8;
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v71, (uint64_t *)v35);
  int64_t v18 = operator new(0xD0uLL);
  *int64_t v18 = &unk_26F0C22F8;
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v18 + 1), (uint64_t *)v71);
  unint64_t v88 = v18;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v87, a4 + 3);
  if (v88 == v87)
  {
    (*(void (**)(void *))(v87[0] + 32))(v87);
    unint64_t v19 = __p;
    if (__p)
    {
LABEL_19:
      unint64_t v86 = v19;
      operator delete(v19);
    }
  }
  else
  {
    if (v88) {
      (*(void (**)(void *))(*v88 + 40))(v88);
    }
    unint64_t v19 = __p;
    if (__p) {
      goto LABEL_19;
    }
  }
  uint64_t v20 = (char *)v83;
  if (v83)
  {
    uint64_t v21 = v84;
    uint64_t v22 = v83;
    if (v84 != v83)
    {
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        if (v23)
        {
          *((void *)v21 - 2) = v23;
          operator delete(v23);
        }
        uint64_t v24 = (void *)*((void *)v21 - 6);
        if (v24)
        {
          *((void *)v21 - 5) = v24;
          operator delete(v24);
        }
        v21 -= 64;
      }
      while (v21 != v20);
      uint64_t v22 = v83;
    }
    unint64_t v84 = v20;
    operator delete(v22);
  }
  if (v81)
  {
    long long v82 = v81;
    operator delete(v81);
  }
  if (v78)
  {
    operator delete(v75);
    uint64_t v80 = 0;
    unint64_t v75 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
  }
  if (v79) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v79);
  }
  if (v72)
  {
    operator delete(v71[0]);
    uint64_t v74 = 0;
    v71[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v71[1] = 0;
    v71[2] = 0;
    uint64_t v72 = 0;
  }
  if (v73) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v73);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  long long v25 = (char *)v47;
  if (v47)
  {
    int v26 = v48;
    unint64_t v27 = v47;
    if (v48 != v47)
    {
      do
      {
        unint64_t v28 = (void *)*((void *)v26 - 3);
        if (v28)
        {
          *((void *)v26 - 2) = v28;
          operator delete(v28);
        }
        uint64_t v29 = (void *)*((void *)v26 - 6);
        if (v29)
        {
          *((void *)v26 - 5) = v29;
          operator delete(v29);
        }
        v26 -= 64;
      }
      while (v26 != v25);
      unint64_t v27 = v47;
    }
    uint64_t v48 = v25;
    operator delete(v27);
  }
  if (v45)
  {
    long long v46 = v45;
    operator delete(v45);
  }
  if (v42)
  {
    operator delete(v39);
    uint64_t v44 = 0;
    unint64_t v39 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  if (v43) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v43);
  }
  if (v36)
  {
    operator delete(v35[0]);
    uint64_t v38 = 0;
    v35[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v35[1] = 0;
    v35[2] = 0;
    uint64_t v36 = 0;
  }
  if (v37) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v37);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if ((void)v61)
  {
    operator delete(v59);
    long long v59 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v62 = 0;
    *(void *)&long long v61 = 0;
    long long v60 = 0uLL;
  }
  if (*((void *)&v61 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v61 + 1));
  }
  if (v56)
  {
    operator delete(v55[0]);
    uint64_t v58 = 0;
    v55[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v55[1] = 0;
    v55[2] = 0;
    uint64_t v56 = 0;
  }
  if (v57) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v57);
  }
  double v30 = (char *)v68;
  if (v68)
  {
    uint64_t v31 = v69;
    unint64_t v32 = v68;
    if (v69 != v68)
    {
      do
      {
        uint64_t v33 = (void *)*((void *)v31 - 3);
        if (v33)
        {
          *((void *)v31 - 2) = v33;
          operator delete(v33);
        }
        unint64_t v34 = (void *)*((void *)v31 - 6);
        if (v34)
        {
          *((void *)v31 - 5) = v34;
          operator delete(v34);
        }
        v31 -= 64;
      }
      while (v31 != v30);
      unint64_t v32 = v68;
    }
    uint64_t v69 = v30;
    operator delete(v32);
  }
}

void sub_23CCA9AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<operations_research::sat::LinearConstraint>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 6);
        if (v6)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::~$_0(operations_research::sat::ImpliedBoundsProcessor *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 18);
    unint64_t v5 = (void *)*((void *)this + 17);
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(void *)(v4 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(void *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)*((void *)this + 17);
    }
    *((void *)this + 18) = v3;
    operator delete(v5);
  }

  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(this);
}

void *operations_research::sat::GetSuperAdditiveRoundingFunction@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = a3 * (void)result;
  if (0x7FFFFFFFFFFFFFFFLL / a2 >= a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL / a2;
  }
  uint64_t v10 = a2 - v8;
  if (v9 == 1 || v10 == 1)
  {
    *a5 = &unk_26F0C2388;
    a5[1] = a3;
    a5[2] = a2;
    a5[3] = a5;
  }
  else if (v10 <= v9)
  {
    a5[3] = 0;
    uint64_t result = operator new(0x28uLL);
    void *result = &unk_26F0C2418;
    result[1] = v10;
    result[2] = v8;
    result[3] = a3;
    result[4] = a2;
    a5[3] = result;
  }
  else
  {
    a5[3] = 0;
    if (v9 * v8 >= a2)
    {
      uint64_t result = operator new(0x30uLL);
      void *result = &unk_26F0C2518;
      result[1] = v10;
      result[2] = v8;
      result[3] = a3;
      result[4] = a2;
      result[5] = v9;
    }
    else
    {
      uint64_t result = operator new(0x20uLL);
      void *result = &unk_26F0C2498;
      result[1] = a3;
      result[2] = a2;
      result[3] = v9;
    }
    a5[3] = result;
  }
  return result;
}

void operations_research::sat::IntegerRoundingCutHelper::ComputeCut(int **a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v570 = *MEMORY[0x263EF8340];
  unint64_t v7 = a3[1] - *a3;
  if (!(v7 >> 3)) {
    return;
  }
  v568[0] = (a4[1] - *a4) >> 3;
  LODWORD(v563[0]) = v7 >> 3;
  int64_t v555 = (int)((uint64_t)v7 >> 3);
  unint64_t v522 = v7 >> 3;
  unint64_t v526 = v7;
  if (v568[0] != v555) {
    google::MakeCheckOpString<unsigned long,int>((int)v568, (int)v563, "lower_bounds.size() == size");
  }
  v568[0] = (a5[1] - *a5) >> 3;
  LODWORD(v563[0]) = v7 >> 3;
  if (v568[0] != v555) {
    google::MakeCheckOpString<unsigned long,int>((int)v568, (int)v563, "upper_bounds.size() == size");
  }
  v568[0] = (uint64_t)(a7[3] - a7[2]) >> 2;
  LODWORD(v563[0]) = v7 >> 3;
  if (v568[0] != v555) {
    google::MakeCheckOpString<unsigned long,int>((int)v568, (int)v563, "cut->vars.size() == size");
  }
  v525 = a7 + 2;
  v568[0] = (uint64_t)(a7[6] - a7[5]) >> 3;
  LODWORD(v563[0]) = v7 >> 3;
  v533 = a7 + 5;
  if (v568[0] != v555) {
    google::MakeCheckOpString<unsigned long,int>((int)v568, (int)v563, "cut->coeffs.size() == size");
  }
  if (*a7 != 0x8000000000000002) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)a7, (int)&operations_research::sat::kMinIntegerValue, "cut->lb == kMinIntegerValue");
  }
  a1[1] = *a1;
  v558 = (void **)(a1 + 3);
  a1[4] = a1[3];
  v536 = (void **)(a1 + 6);
  uint64_t v8 = a1[9];
  v552 = (void **)(a1 + 9);
  a1[7] = a1[6];
  a1[10] = v8;
  v539 = (uint64_t **)(a1 + 12);
  a1[13] = a1[12];
  v545 = a1 + 15;
  a1[16] = a1[15];
  uint64_t v562 = 0;
  if ((int)(v7 >> 3) > 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a5;
    uint64_t v13 = (v7 >> 3);
    do
    {
      if (*(void *)(v11 + v9) != *(void *)(v12 + v9))
      {
        uint64_t v14 = *(void *)(a7[5] + v9);
        if (v14 < 0) {
          uint64_t v14 = -v14;
        }
        if (v10 <= v14) {
          uint64_t v10 = v14;
        }
        uint64_t v562 = v10;
      }
      v9 += 8;
    }
    while (8 * v13 != v9);
    uint64_t v543 = v13;
    LOBYTE(v568[0]) = 0;
    v528 = a1 + 21;
    std::vector<BOOL>::assign((char **)a1 + 21, v555, v568);
    unint64_t v15 = 0;
    BOOL v16 = 1;
    double v17 = (char **)a1;
    int64_t v18 = a3;
    uint64_t v19 = v543;
    while (1)
    {
      uint64_t v21 = (void *)*v533;
      uint64_t v22 = *(void *)(*v533 + 8 * v15);
      if (!v22) {
        goto LABEL_19;
      }
      if (v22 >= 0) {
        unint64_t v23 = *(void *)(*v533 + 8 * v15);
      }
      else {
        unint64_t v23 = -v22;
      }
      uint64_t v24 = *(void *)(*a4 + 8 * v15);
      double v25 = *(double *)(*v18 + 8 * v15);
      uint64_t v26 = *(void *)(*a5 + 8 * v15);
      if ((((v26 - v24) ^ v26) & (v26 ^ v24)) >= 0) {
        uint64_t v27 = v26 - v24;
      }
      else {
        uint64_t v27 = ((unint64_t)v26 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      }
      double v28 = (double)v24;
      double v29 = -INFINITY;
      if (v24 >= (uint64_t)0x8000000000000003) {
        double v30 = (double)v24;
      }
      else {
        double v30 = -INFINITY;
      }
      double v31 = INFINITY;
      if (v24 > 0x7FFFFFFFFFFFFFFDLL) {
        double v30 = INFINITY;
      }
      double v32 = vabdd_f64(v25, v30);
      double v33 = (double)v26;
      if (v26 < (uint64_t)0x8000000000000003) {
        double v33 = -INFINITY;
      }
      if (v26 > 0x7FFFFFFFFFFFFFFDLL) {
        double v33 = INFINITY;
      }
      double v34 = vabdd_f64(v25, v33);
      if (v562 >= (uint64_t)0x8000000000000003) {
        double v29 = (double)v562 * 0.1;
      }
      if (v562 > 0x7FFFFFFFFFFFFFFDLL) {
        double v29 = INFINITY;
      }
      if (v23 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v31 = (double)(uint64_t)v23;
      }
      double v35 = fmax(v29 / v31, 1.0);
      if (v22 < 0 && v32 * v35 > v34 || v22 >= 1 && v32 > v34 * v35)
      {
        *(void *)(*v528 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        uint64_t v22 = -v22;
        v21[v15] = v22;
        double v25 = -v25;
        uint64_t v24 = -v26;
        double v28 = (double)-v26;
      }
      if (v24 >= 0) {
        unint64_t v36 = v24;
      }
      else {
        unint64_t v36 = -v24;
      }
      int v37 = 63 - __clz(v36);
      if (v24) {
        int v38 = v37;
      }
      else {
        int v38 = 0;
      }
      if (v24 < (uint64_t)0x8000000000000003) {
        double v28 = -INFINITY;
      }
      if (v24 > 0x7FFFFFFFFFFFFFFDLL) {
        double v28 = INFINITY;
      }
      uint64_t v39 = -v22;
      int v40 = v38 - __clz(v23);
      BOOL v41 = __OFADD__(v40, 2);
      if (v40 > -2)
      {
        if (v24)
        {
          uint64_t v44 = ((v24 ^ (unint64_t)v39) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v45 = v23 * v36;
          if (v44 >= 0) {
            unint64_t v46 = v45;
          }
          else {
            unint64_t v46 = -(uint64_t)v45;
          }
          if (v45 < v44) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = v44;
          }
          if (v40 >= 0xFFFFFFC1) {
            unint64_t v42 = v47;
          }
          else {
            unint64_t v42 = v44;
          }
          BOOL v41 = __OFSUB__(v42 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if (v42 - 0x7FFFFFFFFFFFFFFFLL < 2) {
            goto LABEL_190;
          }
        }
        else
        {
          unint64_t v42 = 0;
        }
      }
      else
      {
        unint64_t v42 = v24 * v39;
        unint64_t v43 = v24 * v39 - 0x7FFFFFFFFFFFFFFFLL;
        BOOL v41 = __OFSUB__(v43, 2);
        if (v43 < 2) {
          goto LABEL_190;
        }
      }
      uint64_t v48 = a7[1];
      uint64_t v49 = v48 + v42;
      unint64_t v50 = (v48 + v42) ^ v42;
      unint64_t v51 = (v48 + v42) ^ v48;
      uint64_t v52 = (v42 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v50 & v51 & 0x8000000000000000) != 0) == v41) {
        uint64_t v52 = v49;
      }
      if ((unint64_t)(v52 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_190;
      }
      a7[1] = v52;
      if (v27)
      {
        double v53 = v25 - v28;
        if (fabs(v25 - v28) <= 0.01) {
          goto LABEL_19;
        }
      }
      else
      {
        v21[v15] = 0;
        double v53 = 0.0;
        if (fabs(0.0) <= 0.01) {
          goto LABEL_19;
        }
      }
      uint64_t v55 = v17[7];
      unint64_t v54 = (unint64_t)v17[8];
      if ((unint64_t)v55 < v54)
      {
        *(void *)uint64_t v55 = v21[v15];
        uint64_t v56 = (uint64_t)(v55 + 8);
        goto LABEL_102;
      }
      uint64_t v57 = (char *)*v536;
      uint64_t v58 = v55 - (unsigned char *)*v536;
      uint64_t v59 = v58 >> 3;
      unint64_t v60 = (v58 >> 3) + 1;
      if (v60 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v61 = v54 - (void)v57;
      if (v61 >> 2 > v60) {
        unint64_t v60 = v61 >> 2;
      }
      unint64_t v62 = (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v60;
      if (v62)
      {
        if (v62 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v63 = operator new(8 * v62);
        uint64_t v64 = (int *)&v63[8 * v59];
        *(void *)uint64_t v64 = v21[v15];
        uint64_t v56 = (uint64_t)(v64 + 2);
        if (v55 == v57)
        {
LABEL_94:
          double v17 = (char **)a1;
          goto LABEL_100;
        }
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v64 = (int *)(8 * v59);
        *(void *)(8 * v59) = v21[v15];
        uint64_t v56 = 8 * v59 + 8;
        if (v55 == v57) {
          goto LABEL_94;
        }
      }
      unint64_t v65 = v55 - 8 - v57;
      if (v65 < 0x58) {
        break;
      }
      unint64_t v66 = v55 - &v63[v58];
      double v17 = (char **)a1;
      if (v66 < 0x20) {
        goto LABEL_99;
      }
      uint64_t v67 = (v65 >> 3) + 1;
      uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v69 = &v55[-v68];
      uint64_t v64 = (int *)((char *)v64 - v68);
      uint64_t v70 = &v63[8 * v59 - 16];
      uint64_t v71 = v55 - 16;
      uint64_t v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v73 = *(_OWORD *)v71;
        *(v70 - 1) = *((_OWORD *)v71 - 1);
        _OWORD *v70 = v73;
        v70 -= 2;
        v71 -= 32;
        v72 -= 4;
      }
      while (v72);
      uint64_t v55 = v69;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_99;
      }
LABEL_100:
      v17[6] = (char *)v64;
      v17[7] = (char *)v56;
      v17[8] = &v63[8 * v62];
      if (v57) {
        operator delete(v57);
      }
LABEL_102:
      v17[7] = (char *)v56;
      uint64_t v76 = v17[1];
      unint64_t v75 = (unint64_t)v17[2];
      if ((unint64_t)v76 < v75)
      {
        *(_DWORD *)uint64_t v76 = v15;
        uint64_t v77 = (uint64_t)(v76 + 4);
        goto LABEL_124;
      }
      uint64_t v78 = *v17;
      uint64_t v79 = v76 - *v17;
      uint64_t v80 = v79 >> 2;
      unint64_t v81 = (v79 >> 2) + 1;
      if (v81 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = v75 - (void)v78;
      if (v82 >> 1 > v81) {
        unint64_t v81 = v82 >> 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        if (v83 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v84 = operator new(4 * v83);
        uint64_t v85 = &v84[4 * v80];
        *(_DWORD *)uint64_t v85 = v15;
        uint64_t v77 = (uint64_t)(v85 + 4);
        if (v76 == v78)
        {
LABEL_116:
          double v17 = (char **)a1;
          goto LABEL_122;
        }
      }
      else
      {
        unint64_t v84 = 0;
        uint64_t v85 = (char *)(4 * v80);
        *(_DWORD *)(4 * v80) = v15;
        uint64_t v77 = 4 * v80 + 4;
        if (v76 == v78) {
          goto LABEL_116;
        }
      }
      unint64_t v86 = v76 - 4 - v78;
      if (v86 < 0x2C)
      {
        double v17 = (char **)a1;
        do
        {
LABEL_121:
          int v95 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *((_DWORD *)v85 - 1) = v95;
          v85 -= 4;
        }
        while (v76 != v78);
        goto LABEL_122;
      }
      unint64_t v87 = v76 - &v84[v79];
      double v17 = (char **)a1;
      if (v87 < 0x20) {
        goto LABEL_121;
      }
      uint64_t v88 = (v86 >> 2) + 1;
      uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
      v90 = &v76[-v89];
      v85 -= v89;
      uint64_t v91 = &v84[4 * v80 - 16];
      uint64_t v92 = v76 - 16;
      uint64_t v93 = v88 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v94 = *(_OWORD *)v92;
        *(v91 - 1) = *((_OWORD *)v92 - 1);
        *uint64_t v91 = v94;
        v91 -= 2;
        v92 -= 32;
        v93 -= 8;
      }
      while (v93);
      uint64_t v76 = v90;
      if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_121;
      }
LABEL_122:
      char *v17 = v85;
      v17[1] = (char *)v77;
      v17[2] = &v84[4 * v83];
      if (v78) {
        operator delete(v78);
      }
LABEL_124:
      v17[1] = (char *)v77;
      long long v97 = (double *)v17[4];
      unint64_t v96 = (unint64_t)v17[5];
      if ((unint64_t)v97 < v96)
      {
        *long long v97 = v53;
        uint64_t v98 = (uint64_t)(v97 + 1);
        goto LABEL_146;
      }
      v99 = (double *)*v558;
      uint64_t v100 = (char *)v97 - (unsigned char *)*v558;
      uint64_t v101 = v100 >> 3;
      unint64_t v102 = (v100 >> 3) + 1;
      if (v102 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v103 = v96 - (void)v99;
      if (v103 >> 2 > v102) {
        unint64_t v102 = v103 >> 2;
      }
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v102;
      }
      if (v104)
      {
        if (v104 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v105 = operator new(8 * v104);
        uint64_t v106 = (double *)&v105[8 * v101];
        double *v106 = v53;
        uint64_t v98 = (uint64_t)(v106 + 1);
        if (v97 == v99)
        {
LABEL_138:
          double v17 = (char **)a1;
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v105 = 0;
        uint64_t v106 = (double *)(8 * v101);
        *(double *)(8 * v101) = v53;
        uint64_t v98 = 8 * v101 + 8;
        if (v97 == v99) {
          goto LABEL_138;
        }
      }
      unint64_t v107 = (char *)(v97 - 1) - (char *)v99;
      if (v107 < 0x58)
      {
        double v17 = (char **)a1;
        do
        {
LABEL_143:
          uint64_t v116 = *((void *)v97-- - 1);
          *((void *)v106-- - 1) = v116;
        }
        while (v97 != v99);
        goto LABEL_144;
      }
      unint64_t v108 = (char *)v97 - &v105[v100];
      double v17 = (char **)a1;
      if (v108 < 0x20) {
        goto LABEL_143;
      }
      uint64_t v109 = (v107 >> 3) + 1;
      uint64_t v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v111 = &v97[v110 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v106 = (double *)((char *)v106 - v110);
      BOOL v112 = &v105[8 * v101 - 16];
      uint64_t v113 = v97 - 2;
      uint64_t v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v115 = *(_OWORD *)v113;
        *(v112 - 1) = *((_OWORD *)v113 - 1);
        *BOOL v112 = v115;
        v112 -= 2;
        v113 -= 4;
        v114 -= 4;
      }
      while (v114);
      long long v97 = v111;
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_143;
      }
LABEL_144:
      v17[3] = (char *)v106;
      v17[4] = (char *)v98;
      v17[5] = &v105[8 * v104];
      if (v99) {
        operator delete(v99);
      }
LABEL_146:
      v17[4] = (char *)v98;
      uint64_t v118 = (uint64_t *)v17[10];
      unint64_t v117 = (unint64_t)v17[11];
      if ((unint64_t)v118 < v117)
      {
        uint64_t *v118 = v27;
        uint64_t v119 = (uint64_t)(v118 + 1);
        goto LABEL_168;
      }
      long long v120 = (uint64_t *)*v552;
      uint64_t v121 = (char *)v118 - (unsigned char *)*v552;
      uint64_t v122 = v121 >> 3;
      unint64_t v123 = (v121 >> 3) + 1;
      if (v123 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v124 = v117 - (void)v120;
      if (v124 >> 2 > v123) {
        unint64_t v123 = v124 >> 2;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v123;
      }
      if (v125)
      {
        if (v125 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v126 = operator new(8 * v125);
        uint64_t v127 = (uint64_t *)&v126[8 * v122];
        *uint64_t v127 = v27;
        uint64_t v119 = (uint64_t)(v127 + 1);
        if (v118 == v120)
        {
LABEL_160:
          double v17 = (char **)a1;
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v126 = 0;
        uint64_t v127 = (uint64_t *)(8 * v122);
        *(void *)(8 * v122) = v27;
        uint64_t v119 = 8 * v122 + 8;
        if (v118 == v120) {
          goto LABEL_160;
        }
      }
      unint64_t v128 = (char *)(v118 - 1) - (char *)v120;
      if (v128 < 0x58)
      {
        double v17 = (char **)a1;
        do
        {
LABEL_165:
          uint64_t v137 = *--v118;
          *--uint64_t v127 = v137;
        }
        while (v118 != v120);
        goto LABEL_166;
      }
      unint64_t v129 = (char *)v118 - &v126[v121];
      double v17 = (char **)a1;
      if (v129 < 0x20) {
        goto LABEL_165;
      }
      uint64_t v130 = (v128 >> 3) + 1;
      uint64_t v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v132 = &v118[v131 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v127 = (uint64_t *)((char *)v127 - v131);
      uint64_t v133 = &v126[8 * v122 - 16];
      uint64_t v134 = v118 - 2;
      uint64_t v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v136 = *(_OWORD *)v134;
        *(v133 - 1) = *((_OWORD *)v134 - 1);
        *uint64_t v133 = v136;
        v133 -= 2;
        v134 -= 4;
        v135 -= 4;
      }
      while (v135);
      uint64_t v118 = v132;
      if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_165;
      }
LABEL_166:
      v17[9] = (char *)v127;
      v17[10] = (char *)v119;
      v17[11] = &v126[8 * v125];
      if (v120) {
        operator delete(v120);
      }
LABEL_168:
      v17[10] = (char *)v119;
      uint64_t v139 = (unint64_t *)v17[13];
      unint64_t v138 = (unint64_t)v17[14];
      if ((unint64_t)v139 >= v138)
      {
        v140 = *v539;
        uint64_t v141 = (char *)v139 - (char *)*v539;
        uint64_t v142 = v141 >> 3;
        unint64_t v143 = (v141 >> 3) + 1;
        if (v143 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v144 = v138 - (void)v140;
        if (v144 >> 2 > v143) {
          unint64_t v143 = v144 >> 2;
        }
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v145 = v143;
        }
        if (v145)
        {
          if (v145 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v146 = operator new(8 * v145);
          uint64_t v147 = (unint64_t *)&v146[8 * v142];
          *uint64_t v147 = v23;
          uint64_t v20 = (uint64_t)(v147 + 1);
          if (v139 != (unint64_t *)v140)
          {
LABEL_178:
            unint64_t v148 = (char *)(v139 - 1) - (char *)v140;
            if (v148 < 0x58)
            {
              double v17 = (char **)a1;
              goto LABEL_186;
            }
            unint64_t v149 = (char *)v139 - &v146[v141];
            double v17 = (char **)a1;
            if (v149 < 0x20) {
              goto LABEL_764;
            }
            uint64_t v150 = (v148 >> 3) + 1;
            uint64_t v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v152 = &v139[v151 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v147 = (unint64_t *)((char *)v147 - v151);
            uint64_t v153 = &v146[8 * v142 - 16];
            unint64_t v154 = v139 - 2;
            uint64_t v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v156 = *(_OWORD *)v154;
              *(v153 - 1) = *((_OWORD *)v154 - 1);
              *uint64_t v153 = v156;
              v153 -= 2;
              v154 -= 4;
              v155 -= 4;
            }
            while (v155);
            uint64_t v139 = v152;
            if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_764:
              do
              {
LABEL_186:
                unint64_t v157 = *--v139;
                *--uint64_t v147 = v157;
              }
              while (v139 != (unint64_t *)v140);
            }
LABEL_187:
            v17[12] = (char *)v147;
            v17[13] = (char *)v20;
            v17[14] = &v146[8 * v145];
            if (v140) {
              operator delete(v140);
            }
            goto LABEL_18;
          }
        }
        else
        {
          v146 = 0;
          uint64_t v147 = (unint64_t *)(8 * v142);
          *(void *)(8 * v142) = v23;
          uint64_t v20 = 8 * v142 + 8;
          if (v139 != (unint64_t *)v140) {
            goto LABEL_178;
          }
        }
        double v17 = (char **)a1;
        goto LABEL_187;
      }
      *uint64_t v139 = v23;
      uint64_t v20 = (uint64_t)(v139 + 1);
LABEL_18:
      int64_t v18 = a3;
      uint64_t v19 = v543;
      v17[13] = (char *)v20;
LABEL_19:
      BOOL v16 = (uint64_t)++v15 < v555;
      if (v15 == v19) {
        goto LABEL_190;
      }
    }
    double v17 = (char **)a1;
    do
    {
LABEL_99:
      uint64_t v74 = *((void *)v55 - 1);
      v55 -= 8;
      *((void *)v64 - 1) = v74;
      v64 -= 2;
    }
    while (v55 != v57);
    goto LABEL_100;
  }
  LOBYTE(v568[0]) = 0;
  v528 = a1 + 21;
  std::vector<BOOL>::assign((char **)a1 + 21, v555, v568);
  BOOL v16 = 0;
  double v17 = (char **)a1;
LABEL_190:
  if (v17[6] == v17[7])
  {
    uint64_t v166 = a7;
    if (*_MergedGlobals_9[0] >= 2)
    {
      if (_MergedGlobals_9[0] != &google::kLogSiteUninitialized
        || (uint64_t v166 = a7,
            google::InitVLOG3__((google *)_MergedGlobals_9, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        unint64_t v167 = google::LogMessage::LogMessage((google::LogMessage *)v568, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 793);
        unint64_t v168 = (void *)google::LogMessage::stream(v167);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"Issue, nothing to cut.", 22);
        google::LogMessage::~LogMessage((google::LogMessage *)v568);
        uint64_t v166 = a7;
      }
    }
    *uint64_t v166 = 0;
    v166[1] = 0;
    unint64_t v169 = (void *)v166[2];
    if (v169)
    {
      v166[3] = v169;
      operator delete(v169);
      void *v525 = 0;
      v525[1] = 0;
      v525[2] = 0;
    }
    void *v525 = 0;
    v525[1] = 0;
    v525[2] = 0;
    uint64_t v170 = (void **)(a7 + 5);
    uint64_t v171 = (void *)*v533;
    if (!*v533) {
      goto LABEL_215;
    }
LABEL_214:
    v166[6] = v171;
    operator delete(v171);
    *uint64_t v170 = 0;
    v170[1] = 0;
    v170[2] = 0;
LABEL_215:
    *uint64_t v170 = 0;
    v170[1] = 0;
    v170[2] = 0;
    return;
  }
  LODWORD(v568[0]) = 0;
  uint64_t v158 = v562;
  unint64_t v159 = a7;
  if (!v562) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v562, (int)v568, "max_magnitude != 0");
  }
  uint64_t v160 = a7[1];
  if (v160 < 0) {
    uint64_t v160 = -v160;
  }
  if (v562 <= v160) {
    unint64_t v161 = v160;
  }
  else {
    unint64_t v161 = v562;
  }
  uint64_t v562 = v161;
  if (v16 || v161 > 0x3FFFFFFFFFFFFFFELL)
  {
    if (*off_26AECFF48[0] >= 2)
    {
      if (off_26AECFF48[0] != &google::kLogSiteUninitialized
        || (unint64_t v159 = a7,
            google::InitVLOG3__((google *)off_26AECFF48, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
      {
        uint64_t v162 = google::LogMessage::LogMessage((google::LogMessage *)v568, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 826);
        uint64_t v163 = (void *)google::LogMessage::stream(v162);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Issue, overflow.", 16);
        google::LogMessage::~LogMessage((google::LogMessage *)v568);
        unint64_t v159 = a7;
      }
    }
    *unint64_t v159 = 0;
    v159[1] = 0;
    uint64_t v164 = (void *)v159[2];
    if (v164)
    {
      v159[3] = v164;
      operator delete(v164);
      void *v525 = 0;
      v525[1] = 0;
      v525[2] = 0;
    }
    void *v525 = 0;
    v525[1] = 0;
    v525[2] = 0;
    int v165 = (void *)*v533;
    if (*v533)
    {
      v159[6] = v165;
      operator delete(v165);
      void *v533 = 0;
      a7[6] = 0;
      a7[7] = 0;
    }
    void *v533 = 0;
    a7[6] = 0;
    a7[7] = 0;
    return;
  }
  uint64_t v172 = (int *)v17[12];
  unint64_t v173 = (v17[13] - (char *)v172) >> 3;
  int v174 = 0;
  if (v17[13] != (char *)v172)
  {
    if (v173 <= 1) {
      uint64_t v175 = 1;
    }
    else {
      uint64_t v175 = (v17[13] - (char *)v172) >> 3;
    }
    uint64_t v176 = (int64_t *)v17[12];
    do
    {
      int64_t v178 = *v176++;
      int64_t v177 = v178;
      if (v178 > (uint64_t)(v161 / 0xA)) {
        *(void *)&v172[2 * v174++] = v177;
      }
      --v175;
    }
    while (v175);
  }
  if (v174 <= v173)
  {
    if (v174 < v173) {
      v17[13] = (char *)&v172[2 * v174];
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v539, v174 - v173);
    double v17 = (char **)a1;
  }
  v180 = v17 + 13;
  v179 = v17[13];
  uint64_t v181 = (uint64_t)v17[12];
  unint64_t v182 = 126 - 2 * __clz((uint64_t)&v179[-v181] >> 3);
  if (v179 == (char *)v181) {
    uint64_t v183 = 0;
  }
  else {
    uint64_t v183 = v182;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(v181, v179, (uint64_t)v568, v183, 1);
  unint64_t v184 = (char **)a1;
  unint64_t v185 = a1[12];
  v186 = *v180;
  if (v185 == (int *)*v180)
  {
LABEL_241:
    uint64_t v170 = (void **)(a7 + 5);
    v191 = (uint64_t **)(a1 + 9);
    goto LABEL_248;
  }
  v187 = (char *)(v185 + 2);
  do
  {
    if (v187 == v186) {
      goto LABEL_241;
    }
    uint64_t v189 = *((void *)v187 - 1);
    uint64_t v188 = *(void *)v187;
    v187 += 8;
  }
  while (v189 != v188);
  int v190 = v187 - 16;
  if (v187 == v186)
  {
    uint64_t v170 = (void **)(a7 + 5);
    v191 = (uint64_t **)(a1 + 9);
  }
  else
  {
    uint64_t v170 = (void **)(a7 + 5);
    v191 = (uint64_t **)(a1 + 9);
    do
    {
      uint64_t v192 = v188;
      uint64_t v188 = *(void *)v187;
      if (v192 != *(void *)v187)
      {
        *((void *)v190 + 1) = v188;
        v190 += 8;
      }
      v187 += 8;
    }
    while (v187 != v186);
  }
  v195 = (uint64_t *)(v190 + 8);
  int64_t v196 = v186 - (v190 + 8);
  if (v186 == v190 + 8)
  {
LABEL_248:
    unint64_t v193 = (uint64_t *)a1[13];
    v194 = *v539;
    if (*v539 == v193) {
      goto LABEL_407;
    }
    goto LABEL_249;
  }
  if (v186 != (char *)v195 + v196) {
    memmove(v190 + 8, (char *)v195 + v196, 0);
  }
  unint64_t v193 = v195;
  a1[13] = (int *)v195;
  uint64_t v170 = (void **)(a7 + 5);
  v194 = *v539;
  if (*v539 == v195) {
    goto LABEL_407;
  }
LABEL_249:
  uint64_t v540 = 0;
  uint64_t v197 = v158 / 1000;
  double v198 = 0.01;
  int64_t v523 = 0x3FFFFFFFFFFFFFFFLL / v161;
  v534 = v193;
  uint64_t v537 = v158 / 1000;
  do
  {
    uint64_t v199 = *v194;
    uint64_t v200 = a7[1];
    uint64_t v201 = v200 / *v194;
    uint64_t v202 = v201 * *v194;
    uint64_t v203 = v200 - (v201 - (v202 > v200)) * *v194;
    if (v203 <= v197) {
      goto LABEL_251;
    }
    int v204 = (int *)v184[15];
    v184[16] = (char *)v204;
    uint64_t v205 = (v199 + ~v203) / v555;
    if (v205 >= 1)
    {
      double v206 = (double)v203;
      if (v203 < (uint64_t)0x8000000000000003) {
        double v206 = -INFINITY;
      }
      double v207 = v203 <= 0x7FFFFFFFFFFFFFFDLL ? v206 : INFINITY;
      v209 = (int *)v184[6];
      unsigned int v208 = (int *)v184[7];
      if (v208 != v209)
      {
        v531 = v194;
        uint64_t v210 = 0;
        double v211 = 0.0;
        while (1)
        {
          uint64_t v213 = *(void *)&v209[2 * v210];
          uint64_t v214 = v213 / v199;
          if (v213 / v199 * v199 < v213) {
            ++v214;
          }
          uint64_t v215 = v214 * v199;
          int64_t v216 = v214 * v199 - v213;
          uint64_t v217 = v199 - v216;
          if (v199 - v216 <= v203)
          {
            double v218 = (double)v217;
            if (v217 < (uint64_t)0x8000000000000003) {
              double v218 = -INFINITY;
            }
            if (v217 > 0x7FFFFFFFFFFFFFFDLL) {
              double v218 = INFINITY;
            }
            double v211 = v211 + v218 * *((double *)*v558 + v210);
            if (v211 >= v207)
            {
              unint64_t v193 = v534;
              uint64_t v197 = v537;
              v194 = v531;
              goto LABEL_251;
            }
          }
          char v219 = v216 >= 1 && v216 <= v205;
          if (v219)
          {
            uint64_t v220 = (*v191)[v210];
            if (v220 >= 0) {
              unint64_t v221 = (*v191)[v210];
            }
            else {
              unint64_t v221 = -v220;
            }
            int v222 = 63 - __clz(v221);
            if (!v220) {
              int v222 = 0;
            }
            int v223 = v222 + (__clz(v216) ^ 0x3F);
            if (v223 > 61)
            {
              if (v220)
              {
                uint64_t v224 = ((v220 ^ (unint64_t)v216) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v225 = v221 * v216;
                if (v223 <= 0x3E && v225 < v224)
                {
                  if (v224 >= 0) {
                    uint64_t v224 = v225;
                  }
                  else {
                    uint64_t v224 = -(uint64_t)v225;
                  }
                }
              }
              else
              {
                uint64_t v224 = 0;
              }
            }
            else
            {
              uint64_t v224 = v220 * v216;
            }
            if (v205 >= v224) {
              break;
            }
          }
LABEL_263:
          if (++v210 >= (unint64_t)(((char *)v208 - (char *)v209) >> 3))
          {
            uint64_t v201 = v200 / v199;
            uint64_t v202 = v200 / v199 * v199;
            unint64_t v193 = v534;
            v194 = v531;
            goto LABEL_312;
          }
        }
        unint64_t v227 = (unint64_t)v184[17];
        if ((unint64_t)v204 < v227)
        {
          *int v204 = v210;
          *(void *)(v204 + 1) = v215;
          uint64_t v212 = v204 + 3;
LABEL_262:
          v200 += v220 * v216;
          a1[16] = v212;
          int v204 = v212;
          unint64_t v184 = (char **)a1;
          unsigned int v208 = a1[7];
          v209 = a1[6];
          goto LABEL_263;
        }
        int64_t v228 = *v545;
        unint64_t v229 = 0xAAAAAAAAAAAAAAABLL * (v204 - *v545);
        unint64_t v230 = v229 + 1;
        if (v229 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v231 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - (void)v228) >> 2);
        if (2 * v231 > v230) {
          unint64_t v230 = 2 * v231;
        }
        if (v231 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v232 = 0x1555555555555555;
        }
        else {
          unint64_t v232 = v230;
        }
        uint64_t v549 = v200;
        if (v232)
        {
          if (v232 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v233 = (char *)operator new(12 * v232);
          uint64_t v234 = (uint64_t)&v233[12 * v229];
          *(_DWORD *)uint64_t v234 = v210;
          *(void *)(v234 + 4) = v215;
          uint64_t v235 = v234;
          if (v204 == v228) {
            goto LABEL_308;
          }
        }
        else
        {
          uint64_t v233 = 0;
          uint64_t v234 = 4 * (v204 - *v545);
          *(_DWORD *)uint64_t v234 = v210;
          *(void *)(v234 + 4) = v215;
          uint64_t v235 = 12 * v229;
          if (v204 == v228)
          {
LABEL_308:
            v238 = &v233[12 * v232];
            uint64_t v212 = (int *)(v234 + 12);
            a1[15] = (int *)v235;
            a1[16] = (int *)(v234 + 12);
            a1[17] = (int *)v238;
            v191 = (uint64_t **)(a1 + 9);
            if (v204) {
              operator delete(v204);
            }
            uint64_t v200 = v549;
            uint64_t v205 = (v199 + ~v203) / v555;
            goto LABEL_262;
          }
        }
        do
        {
          uint64_t v236 = *(void *)(v204 - 3);
          v204 -= 3;
          int v237 = v204[2];
          *(void *)(v235 - 12) = v236;
          v235 -= 12;
          *(_DWORD *)(v235 + 8) = v237;
        }
        while (v204 != v228);
        int v204 = *v545;
        goto LABEL_308;
      }
    }
LABEL_312:
    uint64_t v239 = (v201 - (v202 > v200)) * v199;
    uint64_t v240 = v200 - v239;
    if (v200 == v239)
    {
      uint64_t v197 = v537;
    }
    else
    {
      uint64_t v241 = v200;
      if (v199 >= 0) {
        uint64_t v242 = v199;
      }
      else {
        uint64_t v242 = v199 + 1;
      }
      uint64_t v243 = v242 >> 1;
      if (v243 / v240 * v240 >= v243) {
        uint64_t v244 = v243 / v240;
      }
      else {
        uint64_t v244 = v243 / v240 + 1;
      }
      if (v244 >= v523) {
        uint64_t v245 = v523;
      }
      else {
        uint64_t v245 = v244;
      }
      operations_research::sat::GetSuperAdditiveRoundingFunction((void *)v240, v199, v245, a2, v568);
      v566[0] = v199;
      if (!v569) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v246 = (*(uint64_t (**)(void *, void *))(*v569 + 48))(v569, v566);
      v247.n128_f64[0] = (double)v246;
      if (v246 < (uint64_t)0x8000000000000003) {
        v247.n128_f64[0] = -INFINITY;
      }
      if (v246 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v248 = v247.n128_f64[0];
      }
      else {
        double v248 = INFINITY;
      }
      double v249 = (double)v199;
      if (v199 < (uint64_t)0x8000000000000003) {
        double v249 = -INFINITY;
      }
      if (v199 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v250 = v249;
      }
      else {
        double v250 = INFINITY;
      }
      v247.n128_f64[0] = (double)v240;
      if (v240 < (uint64_t)0x8000000000000003) {
        v247.n128_f64[0] = -INFINITY;
      }
      if (v240 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v251 = v247.n128_f64[0];
      }
      else {
        double v251 = INFINITY;
      }
      v566[0] = v241;
      unint64_t v184 = (char **)a1;
      if (!v569) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v252 = (*(uint64_t (**)(void *, void *, __n128))(*v569 + 48))(v569, v566, v247);
      v191 = (uint64_t **)(a1 + 9);
      unint64_t v193 = v534;
      double v253 = (double)v252;
      if (v252 < (uint64_t)0x8000000000000003) {
        double v253 = -INFINITY;
      }
      if (v252 > 0x7FFFFFFFFFFFFFFDLL) {
        double v253 = INFINITY;
      }
      double v254 = -v253;
      v256 = a1[6];
      v255 = a1[7];
      if (v255 != v256)
      {
        uint64_t v257 = 0;
        int v258 = 0;
        double v259 = v248 / v250;
        double v260 = v251 * v259;
        double v261 = 0.0;
        double v262 = 0.0;
        while (1)
        {
          uint64_t v263 = *(void *)&v256[2 * v257];
          v264 = a1[15];
          if (0xAAAAAAAAAAAAAAABLL * (a1[16] - v264) > v258 && v257 == v264[3 * v258]) {
            uint64_t v263 = *(void *)&v264[3 * v258++ + 1];
          }
          if (v263)
          {
            v566[0] = v263;
            if (!v569) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t v265 = (*(uint64_t (**)(void *, void *))(*v569 + 48))(v569, v566);
            double v266 = (double)v265;
            double v267 = -INFINITY;
            if (v265 < (uint64_t)0x8000000000000003) {
              double v266 = -INFINITY;
            }
            if (v265 > 0x7FFFFFFFFFFFFFFDLL) {
              double v266 = INFINITY;
            }
            double v268 = *((double *)*v558 + v257);
            if (v263 >= (uint64_t)0x8000000000000003) {
              double v267 = (double)v263;
            }
            if (v263 > 0x7FFFFFFFFFFFFFFDLL) {
              double v267 = INFINITY;
            }
            double v261 = v261 + -(v266 - v259 * v267) * v268;
            if (v261 >= v260) {
              goto LABEL_364;
            }
            double v254 = v254 + v266 * v268;
            double v262 = v262 + v266 * v266;
            v256 = a1[6];
            v255 = a1[7];
          }
          if (++v257 >= (unint64_t)(((char *)v255 - (char *)v256) >> 3)) {
            goto LABEL_362;
          }
        }
      }
      double v262 = 0.0;
LABEL_362:
      double v269 = v254 / sqrt(v262);
      if (v269 > v198)
      {
        uint64_t v540 = v199;
        double v198 = v269;
      }
LABEL_364:
      uint64_t v197 = v537;
      if (v569 == v568)
      {
        (*(void (**)(void *))(v568[0] + 32))(v568);
      }
      else if (v569)
      {
        (*(void (**)(void))(*v569 + 40))();
      }
    }
LABEL_251:
    ++v194;
  }
  while (v194 != v193);
  uint64_t v170 = (void **)(a7 + 5);
  if (!v540)
  {
LABEL_407:
    uint64_t v166 = a7;
    *a7 = 0;
    a7[1] = 0;
    v296 = (void *)a7[2];
    if (v296)
    {
      a7[3] = v296;
      operator delete(v296);
      void *v525 = 0;
      v525[1] = 0;
      v525[2] = 0;
    }
    void *v525 = 0;
    v525[1] = 0;
    v525[2] = 0;
    uint64_t v171 = *v170;
    if (!*v170) {
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  uint64_t v270 = a7[1];
  uint64_t v271 = v270 / v540;
  uint64_t v272 = v270 / v540 * v540;
  uint64_t v273 = (v540 + ~v270 + (v270 / v540 - (v272 > v270)) * v540) / v555;
  if (v273 >= 1)
  {
    v274 = *v184;
    uint64_t v275 = v184[1] - *v184;
    if (v275)
    {
      uint64_t v276 = v275 >> 2;
      v277 = *v191;
      if ((unint64_t)(v275 >> 2) <= 1) {
        uint64_t v276 = 1;
      }
      while (1)
      {
        uint64_t v279 = *v277++;
        uint64_t v278 = v279;
        if (v279 <= v273)
        {
          uint64_t v280 = *(int *)v274;
          v281 = (void *)*v533;
          uint64_t v282 = *(void *)(*v533 + 8 * v280);
          uint64_t v283 = v282 / v540;
          if (v282 / v540 * v540 < v282) {
            ++v283;
          }
          uint64_t v284 = v283 * v540;
          uint64_t v285 = v283 * v540 - v282;
          if (v285 >= 0) {
            unint64_t v286 = v285;
          }
          else {
            unint64_t v286 = -v285;
          }
          int v287 = 63 - __clz(v286);
          uint64_t v288 = v284 - v282;
          if (v284 == v282) {
            int v287 = 0;
          }
          if (v278 >= 0) {
            unint64_t v289 = v278;
          }
          else {
            unint64_t v289 = -v278;
          }
          int v290 = 63 - __clz(v289);
          if (!v278) {
            int v290 = 0;
          }
          int v291 = v287 + v290;
          if (v291 > 61)
          {
            uint64_t v292 = 0;
            if (v278 && v284 != v282)
            {
              uint64_t v292 = ((v288 ^ (unint64_t)v278) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              unint64_t v293 = v286 * v289;
              if (v291 <= 0x3E && v293 < v292)
              {
                if (v292 >= 0) {
                  uint64_t v295 = v293;
                }
                else {
                  uint64_t v295 = -(uint64_t)v293;
                }
                if (v273 < v295) {
                  goto LABEL_376;
                }
LABEL_401:
                a7[1] += v288 * v278;
                v281[v280] += v288;
                goto LABEL_376;
              }
            }
            if (v273 >= v292) {
              goto LABEL_401;
            }
          }
          else if (v273 >= v288 * v278)
          {
            goto LABEL_401;
          }
        }
LABEL_376:
        v274 += 4;
        if (!--v276)
        {
          uint64_t v270 = a7[1];
          uint64_t v271 = v270 / v540;
          uint64_t v272 = v270 / v540 * v540;
          break;
        }
      }
    }
  }
  uint64_t v297 = (v271 - (v272 > v270)) * v540;
  uint64_t v298 = v523;
  uint64_t v299 = v270 - v297;
  if (v270 != v297)
  {
    if (v540 >= 0) {
      uint64_t v300 = v540;
    }
    else {
      uint64_t v300 = v540 + 1;
    }
    uint64_t v301 = v300 >> 1;
    if (v301 / v299 * v299 >= v301) {
      uint64_t v302 = v301 / v299;
    }
    else {
      uint64_t v302 = v301 / v299 + 1;
    }
    if (v302 >= v523) {
      uint64_t v298 = v523;
    }
    else {
      uint64_t v298 = v302;
    }
  }
  unint64_t v532 = v298;
  operations_research::sat::GetSuperAdditiveRoundingFunction((void *)(v270 - v297), v540, v298, a2, v566);
  uint64_t v546 = v297;
  uint64_t v550 = v270;
  v303 = a1;
  v304 = (char *)a1[18];
  v553 = (uint64_t *)(a1 + 18);
  a1[19] = (int *)v304;
  uint64_t v527 = (v526 >> 3);
  uint64_t v538 = v299;
  if ((int)v522 > 0)
  {
    uint64_t v305 = 0;
    v306 = a7;
    uint64_t v307 = v540;
    while (1)
    {
      uint64_t v309 = *(void *)(*v533 + 8 * v305)
           - (*(void *)(*v533 + 8 * v305) / v307
            - (*(void *)(*v533 + 8 * v305) / v307 * v307 > *(void *)(*v533 + 8 * v305)))
           * v307;
      if (v309 <= v299) {
        goto LABEL_426;
      }
      unint64_t v310 = (unint64_t)v303[20];
      if ((unint64_t)v304 >= v310) {
        break;
      }
      *(void *)v304 = v309;
      uint64_t v308 = (uint64_t)(v304 + 8);
LABEL_425:
      v303[19] = (int *)v308;
      v304 = (char *)v308;
      uint64_t v299 = v538;
      uint64_t v307 = v540;
LABEL_426:
      if (++v305 == v527)
      {
        uint64_t v328 = *v553;
        goto LABEL_456;
      }
    }
    v311 = (char *)*v553;
    uint64_t v312 = (uint64_t)&v304[-*v553];
    uint64_t v313 = v312 >> 3;
    unint64_t v314 = (v312 >> 3) + 1;
    if (v314 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v315 = v310 - (void)v311;
    if (v315 >> 2 > v314) {
      unint64_t v314 = v315 >> 2;
    }
    if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v316 = v314;
    }
    if (v316)
    {
      if (v316 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v317 = operator new(8 * v316);
      v318 = (uint64_t *)&v317[8 * v313];
      uint64_t *v318 = v309;
      uint64_t v308 = (uint64_t)(v318 + 1);
      if (v304 != v311)
      {
LABEL_438:
        unint64_t v319 = v304 - 8 - v311;
        if (v319 < 0x168
          || &v317[v312 - 8 - (v319 & 0xFFFFFFFFFFFFFFF8)] > &v317[v312 - 8]
          || &v304[-(v319 & 0xFFFFFFFFFFFFFFF8) - 8] > v304 - 8
          || (unint64_t)(v304 - v317 - v312) < 0x20)
        {
          v320 = v304;
          v303 = a1;
        }
        else
        {
          uint64_t v322 = (v319 >> 3) + 1;
          uint64_t v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
          v320 = &v304[-v323];
          v318 = (uint64_t *)((char *)v318 - v323);
          v324 = &v317[8 * v313 - 16];
          v325 = v304 - 16;
          uint64_t v326 = v322 & 0x3FFFFFFFFFFFFFFCLL;
          v303 = a1;
          do
          {
            long long v327 = *(_OWORD *)v325;
            *(v324 - 1) = *((_OWORD *)v325 - 1);
            _OWORD *v324 = v327;
            v324 -= 2;
            v325 -= 32;
            v326 -= 4;
          }
          while (v326);
          if (v322 == (v322 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_441:
            v303[18] = (int *)v318;
            v303[19] = (int *)v308;
            v303[20] = (int *)&v317[8 * v316];
            if (!v311)
            {
LABEL_443:
              v306 = a7;
              goto LABEL_425;
            }
LABEL_442:
            operator delete(v311);
            goto LABEL_443;
          }
        }
        do
        {
          uint64_t v321 = *((void *)v320 - 1);
          v320 -= 8;
          *--v318 = v321;
        }
        while (v320 != v311);
        goto LABEL_441;
      }
    }
    else
    {
      v317 = 0;
      v318 = (uint64_t *)(8 * v313);
      *(void *)(8 * v313) = v309;
      uint64_t v308 = 8 * v313 + 8;
      if (v304 != v311) {
        goto LABEL_438;
      }
    }
    v303 = a1;
    a1[18] = (int *)v318;
    a1[19] = (int *)v308;
    a1[20] = (int *)&v317[8 * v316];
    if (!v311) {
      goto LABEL_443;
    }
    goto LABEL_442;
  }
  uint64_t v328 = (uint64_t)v304;
  v306 = a7;
LABEL_456:
  unint64_t v329 = 126 - 2 * __clz((uint64_t)&v304[-v328] >> 3);
  if (v304 == (char *)v328) {
    uint64_t v330 = 0;
  }
  else {
    uint64_t v330 = v329;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v328, v304, (uint64_t)v568, v330, 1);
  v332 = (char *)v303[18];
  v331 = (char *)v303[19];
  if (v332 != v331)
  {
    v333 = v332 + 8;
    while (v333 != v331)
    {
      uint64_t v334 = *((void *)v333 - 1);
      uint64_t v335 = *(void *)v333;
      v333 += 8;
      if (v334 == v335)
      {
        v336 = v333 - 16;
        while (v333 != v331)
        {
          uint64_t v337 = v334;
          uint64_t v334 = *(void *)v333;
          if (v337 != *(void *)v333)
          {
            *((void *)v336 + 1) = v334;
            v336 += 8;
          }
          v333 += 8;
        }
        v338 = v336 + 8;
        int64_t v339 = v331 - (v336 + 8);
        if (v331 != v336 + 8)
        {
          if (v331 != &v338[v339]) {
            memmove(v336 + 8, &v338[v339], 0);
          }
          v331 = v338;
          v303[19] = (int *)v338;
          v332 = (char *)v303[18];
        }
        break;
      }
    }
  }
  if ((unint64_t)(v331 - v332) <= 0x327)
  {
    v559 = (uint64_t **)(v303 + 27);
    v303[28] = v303[27];
    if (v332 != v331)
    {
      while (1)
      {
        v568[0] = *(void *)v332;
        if (!v567) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v341 = (*(uint64_t (**)(void *, void *))(*v567 + 48))(v567, v568);
        uint64_t v342 = v341;
        v303 = a1;
        v344 = (uint64_t *)a1[28];
        unint64_t v343 = (unint64_t)a1[29];
        if ((unint64_t)v344 >= v343) {
          break;
        }
        uint64_t *v344 = v341;
        uint64_t v340 = (uint64_t)(v344 + 1);
LABEL_477:
        v306 = a7;
        v303[28] = (int *)v340;
        v332 += 8;
        if (v332 == v331) {
          goto LABEL_500;
        }
      }
      v345 = *v559;
      uint64_t v346 = (char *)v344 - (char *)*v559;
      uint64_t v347 = v346 >> 3;
      unint64_t v348 = (v346 >> 3) + 1;
      if (v348 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v349 = v343 - (void)v345;
      if (v349 >> 2 > v348) {
        unint64_t v348 = v349 >> 2;
      }
      if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v350 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v350 = v348;
      }
      if (v350)
      {
        if (v350 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v351 = operator new(8 * v350);
        v352 = (uint64_t *)&v351[8 * v347];
        uint64_t *v352 = v342;
        uint64_t v340 = (uint64_t)(v352 + 1);
        if (v344 != v345)
        {
LABEL_489:
          unint64_t v353 = (char *)(v344 - 1) - (char *)v345;
          if (v353 >= 0x58)
          {
            unint64_t v354 = (char *)v344 - &v351[v346];
            v303 = a1;
            if (v354 >= 0x20)
            {
              uint64_t v355 = (v353 >> 3) + 1;
              uint64_t v356 = 8 * (v355 & 0x3FFFFFFFFFFFFFFCLL);
              v357 = &v344[v356 / 0xFFFFFFFFFFFFFFF8];
              v352 = (uint64_t *)((char *)v352 - v356);
              v358 = &v351[8 * v347 - 16];
              v359 = v344 - 2;
              uint64_t v360 = v355 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v361 = *(_OWORD *)v359;
                *(v358 - 1) = *((_OWORD *)v359 - 1);
                _OWORD *v358 = v361;
                v358 -= 2;
                v359 -= 4;
                v360 -= 4;
              }
              while (v360);
              v344 = v357;
              if (v355 == (v355 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_498:
                v303[27] = (int *)v352;
                v303[28] = (int *)v340;
                v303[29] = (int *)&v351[8 * v350];
                if (v345) {
                  operator delete(v345);
                }
                goto LABEL_477;
              }
            }
          }
          else
          {
            v303 = a1;
          }
          do
          {
            uint64_t v362 = *--v344;
            *--v352 = v362;
          }
          while (v344 != v345);
          goto LABEL_498;
        }
      }
      else
      {
        v351 = 0;
        v352 = (uint64_t *)(8 * v347);
        *(void *)(8 * v347) = v342;
        uint64_t v340 = 8 * v347 + 8;
        if (v344 != v345) {
          goto LABEL_489;
        }
      }
      v303 = a1;
      goto LABEL_498;
    }
LABEL_500:
    uint64_t v363 = v540;
    uint64_t v556 = std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()((uint64_t)v566, v540);
    v565[0] = 1;
    v364 = (void *)v538;
    if (v550 != v546)
    {
      if (v540 >= 0) {
        uint64_t v365 = v540;
      }
      else {
        uint64_t v365 = v540 + 1;
      }
      uint64_t v366 = v365 >> 1;
      if (v366 / v538 * v538 >= v366) {
        uint64_t v367 = v366 / v538;
      }
      else {
        uint64_t v367 = v366 / v538 + 1;
      }
      int64_t v368 = v523;
      if (v367 < v523) {
        int64_t v368 = v367;
      }
      int64_t v523 = v368;
    }
    v565[1] = v523;
    if (a2 >= 2)
    {
      uint64_t v490 = 0;
      v551 = (void **)(v303 + 24);
      do
      {
        uint64_t v544 = v565[v490];
        uint64_t v491 = 2;
        uint64_t v535 = v490;
        operations_research::sat::GetSuperAdditiveRoundingFunction(v364, v363, v544, 2, v563);
        while (2)
        {
          v303[25] = v303[24];
          v568[0] = v363;
          if (!v564) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t v492 = (*(uint64_t (**)(void *, void *))(*v564 + 48))(v564, v568);
          uint64_t v547 = v491;
          v493 = (uint64_t *)v303[28];
          if (v493 == (uint64_t *)v303[27])
          {
            int v495 = 0;
            v497 = v303[28];
            goto LABEL_704;
          }
          unint64_t v494 = 0;
          int v495 = 0;
          while (1)
          {
            v568[0] = *(void *)(*v553 + 8 * v494);
            if (!v564) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t v498 = (*(uint64_t (**)(void *, void *))(*v564 + 48))(v564, v568);
            uint64_t v499 = v498;
            v493 = *v559;
            uint64_t v500 = (*v559)[v494] * v492;
            if (v498 * v556 < v500) {
              break;
            }
            if (v498 * v556 > v500) {
              ++v495;
            }
            v303 = a1;
            v502 = (uint64_t *)a1[25];
            unint64_t v501 = (unint64_t)a1[26];
            if ((unint64_t)v502 >= v501)
            {
              v503 = (uint64_t *)*v551;
              uint64_t v504 = (char *)v502 - (unsigned char *)*v551;
              uint64_t v505 = v504 >> 3;
              unint64_t v506 = (v504 >> 3) + 1;
              if (v506 >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v507 = v501 - (void)v503;
              if (v507 >> 2 > v506) {
                unint64_t v506 = v507 >> 2;
              }
              if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v508 = v506;
              }
              if (v508)
              {
                if (v508 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v509 = operator new(8 * v508);
                v510 = (uint64_t *)&v509[8 * v505];
                uint64_t *v510 = v499;
                uint64_t v496 = (uint64_t)(v510 + 1);
                if (v502 == v503) {
                  goto LABEL_699;
                }
LABEL_693:
                unint64_t v511 = (char *)(v502 - 1) - (char *)v503;
                if (v511 < 0x58) {
                  goto LABEL_765;
                }
                if ((unint64_t)((char *)v502 - &v509[v504]) < 0x20) {
                  goto LABEL_765;
                }
                uint64_t v512 = (v511 >> 3) + 1;
                uint64_t v513 = 8 * (v512 & 0x3FFFFFFFFFFFFFFCLL);
                v514 = &v502[v513 / 0xFFFFFFFFFFFFFFF8];
                v510 = (uint64_t *)((char *)v510 - v513);
                v515 = &v509[8 * v505 - 16];
                v516 = v502 - 2;
                uint64_t v517 = v512 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v518 = *(_OWORD *)v516;
                  *(v515 - 1) = *((_OWORD *)v516 - 1);
                  _OWORD *v515 = v518;
                  v515 -= 2;
                  v516 -= 4;
                  v517 -= 4;
                }
                while (v517);
                v502 = v514;
                if (v512 != (v512 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_765:
                  do
                  {
                    uint64_t v519 = *--v502;
                    *--v510 = v519;
                  }
                  while (v502 != v503);
                }
              }
              else
              {
                v509 = 0;
                v510 = (uint64_t *)(8 * v505);
                *(void *)(8 * v505) = v499;
                uint64_t v496 = 8 * v505 + 8;
                if (v502 != v503) {
                  goto LABEL_693;
                }
              }
LABEL_699:
              v303 = a1;
              a1[24] = (int *)v510;
              a1[25] = (int *)v496;
              a1[26] = (int *)&v509[8 * v508];
              if (v503) {
                operator delete(v503);
              }
              goto LABEL_676;
            }
            uint64_t *v502 = v498;
            uint64_t v496 = (uint64_t)(v502 + 1);
LABEL_676:
            v303[25] = (int *)v496;
            ++v494;
            v493 = (uint64_t *)v303[27];
            v497 = v303[28];
            if (v494 >= ((char *)v497 - (char *)v493) >> 3) {
              goto LABEL_703;
            }
          }
          v303 = a1;
          v497 = a1[28];
LABEL_703:
          v306 = a7;
LABEL_704:
          BOOL v520 = (char *)v303[25] - (char *)v303[24] != (char *)v497 - (char *)v493 || v495 < 1;
          v364 = (void *)v538;
          uint64_t v363 = v540;
          if (!v520)
          {
            uint64_t v521 = (uint64_t)v564;
            if (!v564) {
              goto LABEL_711;
            }
            if (v564 == v563)
            {
              v569 = v568;
              (*(void (**)(void *, void *))(v563[0] + 24))(v563, v568);
            }
            else
            {
              uint64_t v521 = (*(uint64_t (**)(void))(*v564 + 16))();
LABEL_711:
              v569 = (void *)v521;
            }
            std::__function::__value_func<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::swap[abi:ne180100](v568, v566);
            if (v569 == v568)
            {
              (*(void (**)(void *))(v568[0] + 32))(v568);
            }
            else if (v569)
            {
              (*(void (**)(void))(*v569 + 40))();
            }
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v559, (char *)v303[24], (char *)v303[25], ((char *)v303[25] - (char *)v303[24]) >> 3);
            unint64_t v532 = v544;
            uint64_t v556 = v492;
          }
          if (v564 == v563)
          {
            (*(void (**)(void *))(v563[0] + 32))(v563);
          }
          else if (v564)
          {
            (*(void (**)(void))(*v564 + 40))();
          }
          uint64_t v491 = v547 + 1;
          if (v547 != a2)
          {
            operations_research::sat::GetSuperAdditiveRoundingFunction((void *)v538, v540, v544, v491, v563);
            continue;
          }
          break;
        }
        uint64_t v490 = v535 + 1;
      }
      while (v535 != 1);
    }
  }
  v568[0] = v306[1];
  if (!v567) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v306[1] = (*(uint64_t (**)(void *, void *))(*v567 + 48))(v567, v568);
  v303[32] = v303[31];
  v560 = (uint64_t *)(v303 + 31);
  *((_DWORD *)v303 + 60) = 0;
  if (a6 && (int)v522 >= 1)
  {
    unint64_t v369 = 0;
    if ((v532 & 0x8000000000000000) == 0) {
      unint64_t v370 = v532;
    }
    else {
      unint64_t v370 = -(uint64_t)v532;
    }
    unint64_t v554 = v370;
    int v371 = 63 - __clz(v370);
    if (v532) {
      int v372 = v371;
    }
    else {
      int v372 = 0;
    }
    uint64_t v557 = (v532 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v374 = *(void *)(*v533 + 8 * v369);
      if (v374)
      {
        uint64_t v375 = 0;
        int v376 = *(_DWORD *)(*v525 + 4 * v369) ^ (*(void *)(*v528 + ((v369 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v369) & 1;
        unint64_t v377 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v376)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v376));
        unint64_t v378 = a6[6];
        unint64_t v379 = (v377 >> 7) ^ (v378 >> 12);
        uint64_t v380 = a6[9];
        uint64_t v381 = 0x101010101010101 * (v377 & 0x7F);
        while (1)
        {
          uint64_t v382 = v379 & v380;
          uint64_t v383 = *(void *)(v378 + v382);
          unint64_t v384 = ((v383 ^ v381) - 0x101010101010101) & ~(v383 ^ v381) & 0x8080808080808080;
          if (v384) {
            break;
          }
LABEL_529:
          if ((v383 & (~v383 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_532;
          }
          v375 += 8;
          unint64_t v379 = v375 + v382;
        }
        while (1)
        {
          unint64_t v385 = (v382 + (__clz(__rbit64(v384)) >> 3)) & v380;
          uint64_t v386 = a6[7] + 40 * v385;
          if (*(_DWORD *)v386 == v376) {
            break;
          }
          v384 &= v384 - 1;
          if (!v384) {
            goto LABEL_529;
          }
        }
        if (v385 == v380)
        {
LABEL_532:
          int v387 = 0;
          uint64_t v388 = 0;
          int v389 = -1;
          goto LABEL_534;
        }
        int v387 = *(unsigned __int8 *)(v386 + 24);
        uint64_t v388 = *(void *)(v386 + 25);
        int v389 = *(_DWORD *)(v386 + 33);
LABEL_534:
        if (v374 >= 0) {
          unint64_t v390 = *(void *)(*v533 + 8 * v369);
        }
        else {
          unint64_t v390 = -v374;
        }
        int v391 = (__clz(v390) ^ 0x3F) + v372;
        if (v391 > 61)
        {
          uint64_t v392 = v532;
          if (v532)
          {
            uint64_t v392 = (v532 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if (v391 <= 0x3E)
            {
              unint64_t v393 = v390 * v554;
              if (v557 >= 0) {
                uint64_t v394 = v390 * v554;
              }
              else {
                uint64_t v394 = -(uint64_t)v393;
              }
              if (v393 < v557) {
                uint64_t v392 = v394;
              }
              else {
                uint64_t v392 = (v532 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              }
            }
          }
        }
        else
        {
          uint64_t v392 = v390 * v532;
        }
        if (v388 >= 0) {
          unint64_t v395 = v388;
        }
        else {
          unint64_t v395 = -v388;
        }
        int v396 = 63 - __clz(v395);
        if (v388) {
          int v397 = v396;
        }
        else {
          int v397 = 0;
        }
        if (v392 >= 0) {
          unint64_t v398 = v392;
        }
        else {
          unint64_t v398 = -v392;
        }
        int v399 = 63 - __clz(v398);
        if (!v392) {
          int v399 = 0;
        }
        int v400 = v399 + v397;
        if (v400 > 61)
        {
          if (v388 && v392)
          {
            uint64_t v401 = ((v392 ^ (unint64_t)v388) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            unint64_t v402 = v398 * v395;
            if (v401 >= 0) {
              unint64_t v403 = v402;
            }
            else {
              unint64_t v403 = -(uint64_t)v402;
            }
            if (v402 < v401) {
              uint64_t v404 = v403;
            }
            else {
              uint64_t v404 = v401;
            }
            if (v400 <= 0x3E) {
              uint64_t v401 = v404;
            }
            if (v401 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_523;
            }
          }
LABEL_572:
          v568[0] = v388 * v374;
          if (!v567
            || (uint64_t v405 = (*(uint64_t (**)(void *, void *))(*v567 + 48))(v567, v568), v568[0] = v374, !v567))
          {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t v406 = v405 - (*(uint64_t (**)(void *, void *))(*v567 + 48))(v567, v568) * v388;
          v563[0] = v406;
          LODWORD(v568[0]) = 0;
          if (v406 < 0) {
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v563, (int)v568, "coeff_b >= 0");
          }
          if (v406)
          {
            ++*((_DWORD *)v303 + 60);
            if (v387)
            {
              v408 = (char *)v303[32];
              unint64_t v407 = (unint64_t)v303[33];
              if ((unint64_t)v408 < v407)
              {
                *(_DWORD *)v408 = v389;
                *(void *)(v408 + 4) = v406;
                v373 = v408 + 12;
              }
              else
              {
                uint64_t v409 = *v560;
                unint64_t v410 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v408[-*v560] >> 2);
                unint64_t v411 = v410 + 1;
                if (v410 + 1 > 0x1555555555555555) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v412 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - v409) >> 2);
                if (2 * v412 > v411) {
                  unint64_t v411 = 2 * v412;
                }
                if (v412 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v413 = 0x1555555555555555;
                }
                else {
                  unint64_t v413 = v411;
                }
                if (v413)
                {
                  if (v413 > 0x1555555555555555) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v414 = (char *)operator new(12 * v413);
                }
                else
                {
                  v414 = 0;
                }
                v426 = &v414[12 * v410];
                *(_DWORD *)v426 = v389;
                *(void *)(v426 + 4) = v406;
                v427 = v426;
                if (v408 != (char *)v409)
                {
                  do
                  {
                    uint64_t v428 = *(void *)(v408 - 12);
                    v408 -= 12;
                    int v429 = *((_DWORD *)v408 + 2);
                    *(void *)(v427 - 12) = v428;
                    v427 -= 12;
                    *((_DWORD *)v427 + 2) = v429;
                  }
                  while (v408 != (char *)v409);
                  v408 = (char *)*v560;
                }
                v430 = &v414[12 * v413];
                v373 = v426 + 12;
                v303 = a1;
                a1[31] = (int *)v427;
                a1[32] = (int *)(v426 + 12);
                a1[33] = (int *)v430;
                if (v408) {
                  operator delete(v408);
                }
              }
              v303[32] = (int *)v373;
            }
            else
            {
              uint64_t v415 = -v406;
              v417 = v303[32];
              unint64_t v416 = (unint64_t)v303[33];
              BOOL v418 = __OFSUB__(v417, v416);
              if ((unint64_t)v417 >= v416)
              {
                v420 = (int *)*v560;
                unint64_t v421 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v417 - *v560) >> 2);
                unint64_t v422 = v421 + 1;
                if (v421 + 1 > 0x1555555555555555) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v423 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v416 - (void)v420) >> 2);
                if (2 * v423 > v422) {
                  unint64_t v422 = 2 * v423;
                }
                if (v423 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v424 = 0x1555555555555555;
                }
                else {
                  unint64_t v424 = v422;
                }
                if (v424)
                {
                  if (v424 > 0x1555555555555555) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v425 = (char *)operator new(12 * v424);
                }
                else
                {
                  v425 = 0;
                }
                v431 = &v425[12 * v421];
                *(_DWORD *)v431 = v389;
                *(void *)(v431 + 4) = v415;
                v432 = v431;
                BOOL v418 = __OFSUB__(v417, v420);
                if (v417 != v420)
                {
                  do
                  {
                    uint64_t v433 = *(void *)(v417 - 3);
                    v417 -= 3;
                    int v434 = v417[2];
                    *(void *)(v432 - 12) = v433;
                    v432 -= 12;
                    *((_DWORD *)v432 + 2) = v434;
                    BOOL v418 = __OFSUB__(v417, v420);
                  }
                  while (v417 != v420);
                  v417 = (int *)*v560;
                }
                v435 = &v425[12 * v424];
                v419 = (int *)(v431 + 12);
                v303 = a1;
                a1[31] = (int *)v432;
                a1[32] = (int *)(v431 + 12);
                a1[33] = (int *)v435;
                if (v417) {
                  operator delete(v417);
                }
              }
              else
              {
                int *v417 = v389;
                *(void *)(v417 + 1) = v415;
                v419 = v417 + 3;
              }
              v303[32] = v419;
              uint64_t v436 = a7[1];
              uint64_t v437 = v436 - v563[0];
              if ((((v436 - v563[0]) ^ -v563[0]) & ((v436 - v563[0]) ^ v436)) < 0 != v418) {
                uint64_t v437 = (v563[0] > 0) + 0x7FFFFFFFFFFFFFFFLL;
              }
              a7[1] = v437;
            }
          }
          goto LABEL_523;
        }
        if (v392 * v388 != 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_572;
        }
      }
LABEL_523:
      ++v369;
    }
    while (v369 != v527);
  }
  v438 = (operations_research::sat *)a7;
  if ((int)v522 >= 1)
  {
    unint64_t v439 = 0;
    while (1)
    {
      if (!*(void *)(*v533 + 8 * v439)) {
        goto LABEL_618;
      }
      v568[0] = *(void *)(*v533 + 8 * v439);
      if (!v567) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v442 = (*(uint64_t (**)(void *, void *))(*v567 + 48))(v567, v568);
      uint64_t v443 = v442;
      if (!v442) {
        goto LABEL_618;
      }
      if ((*(void *)(*v528 + ((v439 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v439))
      {
        uint64_t v444 = *(void *)(*a5 + 8 * v439);
        unint64_t v445 = -(v444 * v442);
        uint64_t v446 = *((void *)v438 + 1);
        uint64_t v447 = *((void *)v438 + 2);
        uint64_t v448 = v446 - v444 * v442;
        char v219 = (((v448 ^ v445) & (v448 ^ v446) & 0x8000000000000000) != 0) ^ v441;
        uint64_t v449 = (v445 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if (v219) {
          uint64_t v448 = v449;
        }
        *((void *)v438 + 1) = v448;
        uint64_t v450 = -v442;
        int v451 = *(_DWORD *)(v447 + 4 * v439);
        v453 = (char *)v303[32];
        unint64_t v452 = (unint64_t)v303[33];
        if ((unint64_t)v453 < v452)
        {
          *(_DWORD *)v453 = v451;
          *(void *)(v453 + 4) = v450;
          uint64_t v440 = (uint64_t)(v453 + 12);
        }
        else
        {
          uint64_t v454 = *v560;
          unint64_t v455 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v453[-*v560] >> 2);
          unint64_t v456 = v455 + 1;
          if (v455 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v457 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v452 - v454) >> 2);
          if (2 * v457 > v456) {
            unint64_t v456 = 2 * v457;
          }
          if (v457 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v458 = 0x1555555555555555;
          }
          else {
            unint64_t v458 = v456;
          }
          if (v458)
          {
            if (v458 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v459 = (char *)operator new(12 * v458);
            uint64_t v460 = (uint64_t)&v459[12 * v455];
            *(_DWORD *)uint64_t v460 = v451;
            *(void *)(v460 + 4) = v450;
            uint64_t v461 = v460;
            if (v453 != (char *)v454)
            {
              do
              {
LABEL_651:
                uint64_t v480 = *(void *)(v453 - 12);
                v453 -= 12;
                int v481 = *((_DWORD *)v453 + 2);
                *(void *)(v461 - 12) = v480;
                v461 -= 12;
                *(_DWORD *)(v461 + 8) = v481;
              }
              while (v453 != (char *)v454);
              v453 = (char *)*v560;
              v482 = &v459[12 * v458];
              uint64_t v440 = v460 + 12;
              v303 = a1;
              a1[31] = (int *)v461;
              a1[32] = (int *)(v460 + 12);
              a1[33] = (int *)v482;
              if (!v453) {
                goto LABEL_617;
              }
LABEL_655:
              v484 = v453;
LABEL_661:
              operator delete(v484);
              goto LABEL_617;
            }
          }
          else
          {
            v459 = 0;
            uint64_t v460 = 4 * ((uint64_t)&v453[-*v560] >> 2);
            *(_DWORD *)uint64_t v460 = v451;
            *(void *)(v460 + 4) = v450;
            uint64_t v461 = 12 * v455;
            if (v453 != (char *)v454) {
              goto LABEL_651;
            }
          }
          v483 = &v459[12 * v458];
          uint64_t v440 = v460 + 12;
          v303 = a1;
          a1[31] = (int *)v461;
          a1[32] = (int *)(v460 + 12);
          a1[33] = (int *)v483;
          if (v453) {
            goto LABEL_655;
          }
        }
        goto LABEL_617;
      }
      unint64_t v462 = *(void *)(*a4 + 8 * v439) * v442;
      uint64_t v463 = *((void *)v438 + 1);
      uint64_t v464 = *((void *)v438 + 2);
      uint64_t v465 = v463 + v462;
      unint64_t v466 = (v463 + v462) ^ v462;
      unint64_t v467 = (v463 + v462) ^ v463;
      uint64_t v468 = (v462 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v466 & v467 & 0x8000000000000000) != 0) == v441) {
        uint64_t v468 = v465;
      }
      *((void *)v438 + 1) = v468;
      int v469 = *(_DWORD *)(v464 + 4 * v439);
      v471 = v303[32];
      unint64_t v470 = (unint64_t)v303[33];
      if ((unint64_t)v471 < v470)
      {
        int *v471 = v469;
        *(void *)(v471 + 1) = v442;
        uint64_t v440 = (uint64_t)(v471 + 3);
        goto LABEL_617;
      }
      uint64_t v472 = *v560;
      unint64_t v473 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v471 - *v560) >> 2);
      unint64_t v474 = v473 + 1;
      if (v473 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v470 - v472) >> 2);
      if (2 * v475 > v474) {
        unint64_t v474 = 2 * v475;
      }
      unint64_t v476 = v475 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v474;
      if (!v476) {
        break;
      }
      if (v476 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v477 = (char *)operator new(12 * v476);
      uint64_t v478 = (uint64_t)&v477[12 * v473];
      *(_DWORD *)uint64_t v478 = v469;
      *(void *)(v478 + 4) = v443;
      uint64_t v479 = v478;
      if (v471 != (int *)v472) {
        goto LABEL_657;
      }
LABEL_659:
      v487 = &v477[12 * v476];
      uint64_t v440 = v478 + 12;
      v303 = a1;
      a1[31] = (int *)v479;
      a1[32] = (int *)(v478 + 12);
      a1[33] = (int *)v487;
      if (v471)
      {
        v484 = (char *)v471;
        goto LABEL_661;
      }
LABEL_617:
      v303[32] = (int *)v440;
      v438 = (operations_research::sat *)a7;
LABEL_618:
      if (++v439 == v527) {
        goto LABEL_662;
      }
    }
    v477 = 0;
    uint64_t v478 = 4 * (((uint64_t)v471 - *v560) >> 2);
    *(_DWORD *)uint64_t v478 = v469;
    *(void *)(v478 + 4) = v443;
    uint64_t v479 = 12 * v473;
    if (v471 == (int *)v472) {
      goto LABEL_659;
    }
    do
    {
LABEL_657:
      uint64_t v485 = *(void *)(v471 - 3);
      v471 -= 3;
      int v486 = v471[2];
      *(void *)(v479 - 12) = v485;
      v479 -= 12;
      *(_DWORD *)(v479 + 8) = v486;
    }
    while (v471 != (int *)v472);
    v471 = (int *)*v560;
    goto LABEL_659;
  }
LABEL_662:
  operations_research::sat::CleanTermsAndFillConstraint(v560, v438);
  operations_research::sat::RemoveZeroTerms(v438, v488);
  operations_research::sat::DivideByGCD((uint64_t *)v438, v489);
  if (v567 == v566)
  {
    (*(void (**)(void *))(v566[0] + 32))(v566);
  }
  else if (v567)
  {
    (*(void (**)(void))(*v567 + 40))();
  }
}

void sub_23CCACAFC()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB04()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB0C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB14()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB1C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB24()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB2C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 176));
}

void sub_23CCACB34(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACB48(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACB5C(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACB70(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACB84(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACB98(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACBAC(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACBC0(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACBD4(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACBE8(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACBFC(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACC10(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACC24(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACC38(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACC4C(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACC60(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACC74(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACC88(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACC9C(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACCB0(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACCC4(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACCD8(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACCEC(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACD00(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACD14(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACD28(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACD3C(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_23CCACD50(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACD64(_Unwind_Exception *a1)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23CCACD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function(&a33);
  std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function((void *)(v33 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::function<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t operations_research::sat::CreatePositiveMultiplicationCutGenerator@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  unint64_t __src = __PAIR64__(a2, a1);
  int v14 = a3;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, v15, 3uLL);
  uint64_t v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  uint64_t v11 = operator new(0x20uLL);
  *(void *)uint64_t v11 = &unk_26F0C2598;
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  *((void *)v11 + 3) = v10;
  BOOL v16 = (unint64_t *)v11;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](&__src, a5 + 3);
  uint64_t result = (uint64_t)v16;
  if (v16 == &__src) {
    return (*(uint64_t (**)(unint64_t *))(__src + 32))(&__src);
  }
  if (v16) {
    return (*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

void sub_23CCACFEC(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAD000(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAD014(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CreateSquareCutGenerator@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[6] = 0;
  unint64_t __src = (uint64_t (**)(void **))__PAIR64__(a2, a1);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, (char *)&__src, (char *)v11, 2uLL);
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  unint64_t __src = (uint64_t (**)(void **))&unk_26F0C2618;
  v11[0] = a1 | ((unint64_t)a2 << 32);
  v11[1] = v8;
  p_src = (void **)&__src;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](&__src, a4 + 3);
  uint64_t result = (uint64_t)p_src;
  if (p_src == (void **)&__src) {
    return __src[4]((void **)&__src);
  }
  if (p_src) {
    return (*((uint64_t (**)(void))*p_src + 5))();
  }
  return result;
}

void sub_23CCAD154(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAD168(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(uint64_t a1, int a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v213 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  unint64_t v7 = a5[3] - a5[2];
  if ((int)(v7 >> 2) < 1) {
    return;
  }
  uint64_t v8 = a6;
  uint64_t v9 = 0;
  char v202 = 0;
  uint64_t v10 = 0;
  uint64_t v212 = a5[1];
  uint64_t v208 = (v7 >> 2);
  v209 = a5;
  uint64_t v217 = (void *)a1;
  do
  {
    uint64_t v215 = v9;
    uint64_t v12 = *(void *)(a5[5] + 8 * v9);
    signed int v13 = *(_DWORD *)(a5[2] + 4 * v9) ^ ((unint64_t)v12 >> 63);
    uint64_t v14 = a1;
    operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound(a1, v13, a4, a7, (uint64_t)v222);
    operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound(v14, v13 ^ 1, a4, a7, (uint64_t)__p);
    if (v225 >= 0) {
      unint64_t v15 = v225;
    }
    else {
      unint64_t v15 = -v225;
    }
    int v16 = 63 - __clz(v15);
    if (!v225) {
      int v16 = 0;
    }
    if (v12 >= 0) {
      unint64_t v17 = v12;
    }
    else {
      unint64_t v17 = -v12;
    }
    int v18 = 63 - __clz(v17);
    if (v12) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    unsigned int v20 = v16 + v19;
    if (v16 + v19 <= 61)
    {
      uint64_t v21 = v225 * v17;
LABEL_18:
      uint64_t v22 = v217;
      goto LABEL_28;
    }
    uint64_t v21 = 0;
    if (!v12) {
      goto LABEL_18;
    }
    uint64_t v22 = v217;
    if (v225)
    {
      uint64_t v21 = ((unint64_t)v225 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v23 = v15 * v17;
      if (v20 <= 0x3E && v23 < v21)
      {
        if (v21 >= 0) {
          uint64_t v21 = v23;
        }
        else {
          uint64_t v21 = -(uint64_t)v23;
        }
      }
    }
LABEL_28:
    double v25 = (char *)v22[14];
    uint64_t v26 = (char *)v22[15];
    int v27 = v226;
    BOOL v29 = v21 == 0x7FFFFFFFFFFFFFFFLL || v226 == -1;
    if (a2)
    {
      uint64_t v30 = *(void *)(v22[12] + 144);
      uint64_t v31 = *(void *)(v30 + 20 * v13);
      double v32 = *(double *)(*a4 + 8 * v13);
      double v33 = (double)v31;
      if (v31 < (uint64_t)0x8000000000000003) {
        double v33 = -INFINITY;
      }
      if (v31 > 0x7FFFFFFFFFFFFFFDLL) {
        double v33 = INFINITY;
      }
      if (v32 - v33 < 0.01) {
        BOOL v29 = 1;
      }
      uint64_t v34 = *(void *)(v30 + 20 * (v13 ^ 1));
      double v35 = (double)-v34;
      if (v34 > 0x7FFFFFFFFFFFFFFDLL) {
        double v35 = -INFINITY;
      }
      if (v34 < (uint64_t)0x8000000000000003) {
        double v35 = INFINITY;
      }
      if (v35 - v32 < 0.01) {
        BOOL v29 = 1;
      }
    }
    uint64_t v216 = (v26 - v25) / 12;
    BOOL v36 = v223 > 0.000001 && v8 == 0;
    if (v36 || v29)
    {
      unint64_t v43 = v22[16];
      if ((unint64_t)v26 >= v43)
      {
        unint64_t v45 = v216 + 1;
        if ((unint64_t)(v216 + 1) > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)v25) >> 2);
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v47 = 0x1555555555555555;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          if (v47 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v48 = (char *)operator new(12 * v47);
        }
        else
        {
          uint64_t v48 = 0;
        }
        unint64_t v60 = &v48[12 * v216];
        *(_DWORD *)unint64_t v60 = v13;
        *(void *)(v60 + 4) = v17;
        uint64_t v61 = v60;
        if (v26 != v25)
        {
          do
          {
            uint64_t v62 = *(void *)(v26 - 12);
            v26 -= 12;
            int v63 = *((_DWORD *)v26 + 2);
            *(void *)(v61 - 12) = v62;
            v61 -= 12;
            *((_DWORD *)v61 + 2) = v63;
          }
          while (v26 != v25);
          uint64_t v26 = (char *)*v213;
        }
        uint64_t v64 = &v48[12 * v47];
        uint64_t v44 = v60 + 12;
        v217[14] = v61;
        v217[15] = v60 + 12;
        v217[16] = v64;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v26 = v13;
        *(void *)(v26 + 4) = v17;
        uint64_t v44 = v26 + 12;
      }
      v217[15] = v44;
      goto LABEL_203;
    }
    uint64_t v37 = *(void *)(v22[12] + 144);
    uint64_t v38 = *(void *)(v37 + 20 * v13);
    uint64_t v39 = *(void *)(v37 + 20 * (v13 ^ 1));
    *(_OWORD *)long long __p = 0u;
    memset(v220, 0, sizeof(v220));
    *((double *)&v221 + 1) = v223;
    *(void *)&long long v221 = -v38 - v39;
    if (v224)
    {
      unint64_t v40 = v225 * v17;
      unint64_t v41 = v22[16];
      if ((unint64_t)v26 >= v41)
      {
        unint64_t v52 = v216 + 1;
        if ((unint64_t)(v216 + 1) > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (void)v25) >> 2);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v54 = 0x1555555555555555;
        }
        else {
          unint64_t v54 = v52;
        }
        uint64_t v205 = v38;
        if (v54)
        {
          if (v54 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v55 = (char *)operator new(12 * v54);
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v65 = &v55[12 * v216];
        *(_DWORD *)unint64_t v65 = v27;
        *(void *)(v65 + 4) = v40;
        unint64_t v66 = v65;
        if (v26 == v25)
        {
          uint64_t v8 = a6;
        }
        else
        {
          uint64_t v8 = a6;
          do
          {
            uint64_t v67 = *(void *)(v26 - 12);
            v26 -= 12;
            int v68 = *((_DWORD *)v26 + 2);
            *(void *)(v66 - 12) = v67;
            v66 -= 12;
            *((_DWORD *)v66 + 2) = v68;
          }
          while (v26 != v25);
          uint64_t v26 = (char *)*v213;
        }
        uint64_t v69 = &v55[12 * v54];
        unint64_t v42 = v65 + 12;
        uint64_t v22 = v217;
        v217[14] = v66;
        v217[15] = v65 + 12;
        v217[16] = v69;
        if (v26) {
          operator delete(v26);
        }
        uint64_t v38 = v205;
      }
      else
      {
        *(_DWORD *)uint64_t v26 = v226;
        *(void *)(v26 + 4) = v40;
        unint64_t v42 = v26 + 12;
        uint64_t v8 = a6;
      }
      if (v38 >= 0) {
        unint64_t v70 = v38;
      }
      else {
        unint64_t v70 = -v38;
      }
      int v71 = 63 - __clz(v70);
      v22[15] = v42;
      if (!v38) {
        int v71 = 0;
      }
      uint64_t v72 = -(uint64_t)v17;
      unsigned int v73 = v71 + v19;
      BOOL v74 = __OFSUB__(v71 + v19, 61);
      if (v71 + v19 > 61)
      {
        uint64_t v75 = 0;
        if (!v12 || !v38)
        {
LABEL_120:
          uint64_t v78 = v75 + v212;
          uint64_t v79 = (v75 + v212) ^ v75;
          uint64_t v80 = (v75 + v212) ^ v212;
          uint64_t v81 = ((unint64_t)v75 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if ((v79 & v80) < 0 == v74) {
            uint64_t v81 = v78;
          }
          uint64_t v204 = v81;
          if ((unint64_t)(v81 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v8)
            {
              unint64_t v82 = v22[16];
              if ((unint64_t)v42 < v82)
              {
                *(_DWORD *)unint64_t v42 = a3;
                *(void *)(v42 + 4) = v17;
                v217[15] = v42 + 12;
                unint64_t v84 = (signed int *)__p[1];
                unint64_t v83 = *(void *)v220;
                if (__p[1] < (void *)*(void *)v220) {
                  goto LABEL_126;
                }
LABEL_217:
                unint64_t v149 = (signed int *)__p[0];
                unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)__p[0]) >> 2);
                unint64_t v151 = v150 + 1;
                if (v150 + 1 > 0x1555555555555555) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (unint64_t)__p[0]) >> 2);
                if (2 * v152 > v151) {
                  unint64_t v151 = 2 * v152;
                }
                if (v152 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v153 = 0x1555555555555555;
                }
                else {
                  unint64_t v153 = v151;
                }
                if (v153)
                {
                  if (v153 > 0x1555555555555555) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v154 = v38;
                  uint64_t v155 = (char *)operator new(12 * v153);
                }
                else
                {
                  uint64_t v154 = v38;
                  uint64_t v155 = 0;
                }
                long long v156 = &v155[12 * v150];
                *(_DWORD *)long long v156 = v13;
                *(void *)(v156 + 4) = 1;
                unint64_t v157 = v156;
                if (v84 != v149)
                {
                  do
                  {
                    uint64_t v158 = *(void *)(v84 - 3);
                    v84 -= 3;
                    signed int v159 = v84[2];
                    *(void *)(v157 - 12) = v158;
                    v157 -= 12;
                    *((_DWORD *)v157 + 2) = v159;
                  }
                  while (v84 != v149);
                  unint64_t v84 = (signed int *)__p[0];
                }
                unint64_t v83 = (unint64_t)&v155[12 * v153];
                uint64_t v85 = v156 + 12;
                __p[0] = v157;
                __p[1] = v156 + 12;
                *(void *)uint64_t v220 = v83;
                if (v84)
                {
                  operator delete(v84);
                  unint64_t v83 = *(void *)v220;
                }
                uint64_t v38 = v154;
                __p[1] = v85;
                uint64_t v86 = -v225;
                int v87 = v226;
                if ((unint64_t)v85 < v83)
                {
LABEL_127:
                  *uint64_t v85 = v87;
                  *(void *)(v85 + 1) = v86;
                  __p[1] = v85 + 3;
                  *(void *)&v220[8] = -v38;
                  unint64_t v88 = *(void *)(v8 + 8);
                  if (v88 < *(void *)(v8 + 16)) {
                    goto LABEL_128;
                  }
                  goto LABEL_300;
                }
LABEL_233:
                uint64_t v160 = __p[0];
                unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)__p[0]) >> 2);
                unint64_t v162 = v161 + 1;
                if (v161 + 1 > 0x1555555555555555) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (unint64_t)__p[0]) >> 2);
                if (2 * v163 > v162) {
                  unint64_t v162 = 2 * v163;
                }
                if (v163 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v164 = 0x1555555555555555;
                }
                else {
                  unint64_t v164 = v162;
                }
                if (v164)
                {
                  if (v164 > 0x1555555555555555) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v165 = v38;
                  uint64_t v166 = (char *)operator new(12 * v164);
                }
                else
                {
                  uint64_t v165 = v38;
                  uint64_t v166 = 0;
                }
                unint64_t v167 = &v166[12 * v161];
                *(_DWORD *)unint64_t v167 = v87;
                *(void *)(v167 + 4) = v86;
                unint64_t v168 = v167 + 12;
                if (v85 == v160)
                {
                  __p[0] = &v166[12 * v161];
                  __p[1] = v167 + 12;
                  *(void *)uint64_t v220 = &v166[12 * v164];
                }
                else
                {
                  do
                  {
                    uint64_t v169 = *(void *)(v85 - 3);
                    v85 -= 3;
                    int v170 = v85[2];
                    *(void *)(v167 - 12) = v169;
                    v167 -= 12;
                    *((_DWORD *)v167 + 2) = v170;
                  }
                  while (v85 != v160);
                  uint64_t v85 = __p[0];
                  __p[0] = v167;
                  __p[1] = v168;
                  *(void *)uint64_t v220 = &v166[12 * v164];
                  if (!v85)
                  {
LABEL_252:
                    __p[1] = v168;
                    *(void *)&v220[8] = -v165;
                    unint64_t v88 = *(void *)(v8 + 8);
                    if (v88 < *(void *)(v8 + 16))
                    {
LABEL_128:
                      *(void *)unint64_t v88 = 0;
                      *(void *)(v88 + 8) = 0;
                      *(void *)(v88 + 16) = 0;
                      uint64_t v89 = __p[0];
                      int64_t v90 = (char *)__p[1] - (char *)__p[0];
                      if (__p[1] != __p[0])
                      {
                        unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 2);
                        if (v91 > 0x1555555555555555) {
                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                        }
LABEL_298:
                        uint64_t v197 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
                        *(void *)unint64_t v88 = v197;
                        *(void *)(v88 + 8) = v197;
                        *(void *)(v88 + 16) = &v197[12 * v91];
                        size_t v198 = 12 * ((v90 - 12) / 0xCuLL) + 12;
                        memcpy(v197, v89, v198);
                        *(void *)(v88 + 8) = &v197[v198];
                        goto LABEL_299;
                      }
                      goto LABEL_299;
                    }
LABEL_300:
                    uint64_t v200 = std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::__push_back_slow_path<operations_research::sat::ImpliedBoundsProcessor::SlackInfo const&>((void **)v8, (uint64_t)__p);
                    uint64_t v22 = v217;
LABEL_301:
                    uint64_t v121 = v204;
                    a3 += 2;
                    *(void *)(v8 + 8) = v200;
                    int v120 = 1;
                    char v202 = 1;
                    uint64_t v122 = __p[0];
                    if (!__p[0]) {
                      goto LABEL_201;
                    }
LABEL_200:
                    __p[1] = v122;
                    operator delete(v122);
                    goto LABEL_201;
                  }
                }
                operator delete(v85);
                goto LABEL_252;
              }
              unint64_t v123 = (char *)*v213;
              unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v42[-*v213] >> 2);
              unint64_t v125 = v124 + 1;
              if (v124 + 1 > 0x1555555555555555) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)v123) >> 2);
              if (2 * v126 > v125) {
                unint64_t v125 = 2 * v126;
              }
              if (v126 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v127 = 0x1555555555555555;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                if (v127 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v128 = v38;
                unint64_t v129 = (char *)operator new(12 * v127);
              }
              else
              {
                uint64_t v128 = v38;
                unint64_t v129 = 0;
              }
              uint64_t v144 = &v129[12 * v124];
              unint64_t v145 = &v129[12 * v127];
              *(_DWORD *)uint64_t v144 = a3;
              *(void *)(v144 + 4) = v17;
              v146 = v144 + 12;
              if (v42 == v123)
              {
                v217[14] = v144;
                v217[15] = v146;
                v217[16] = v145;
              }
              else
              {
                do
                {
                  uint64_t v147 = *(void *)(v42 - 12);
                  v42 -= 12;
                  int v148 = *((_DWORD *)v42 + 2);
                  *(void *)(v144 - 12) = v147;
                  v144 -= 12;
                  *((_DWORD *)v144 + 2) = v148;
                }
                while (v42 != v123);
                unint64_t v42 = (char *)v217[14];
                v217[14] = v144;
                v217[15] = v146;
                v217[16] = v145;
                if (!v42)
                {
                  uint64_t v38 = v128;
                  v217[15] = v146;
                  unint64_t v84 = (signed int *)__p[1];
                  unint64_t v83 = *(void *)v220;
                  if (__p[1] >= (void *)*(void *)v220) {
                    goto LABEL_217;
                  }
                  goto LABEL_126;
                }
              }
              operator delete(v42);
              uint64_t v38 = v128;
              v217[15] = v146;
              unint64_t v84 = (signed int *)__p[1];
              unint64_t v83 = *(void *)v220;
              if (__p[1] >= (void *)*(void *)v220) {
                goto LABEL_217;
              }
LABEL_126:
              *unint64_t v84 = v13;
              *(void *)(v84 + 1) = 1;
              uint64_t v85 = v84 + 3;
              __p[1] = v84 + 3;
              uint64_t v86 = -v225;
              int v87 = v226;
              if ((unint64_t)(v84 + 3) < v83) {
                goto LABEL_127;
              }
              goto LABEL_233;
            }
LABEL_168:
            int v120 = 1;
            char v202 = 1;
            uint64_t v121 = v204;
            uint64_t v122 = __p[0];
            if (!__p[0]) {
              goto LABEL_201;
            }
            goto LABEL_200;
          }
LABEL_131:
          if (*off_26AECFF50[0] >= 2)
          {
            if (off_26AECFF50[0] != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_26AECFF50, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v218, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1476);
              uint64_t v92 = (void *)google::LogMessage::stream((google::LogMessage *)v218);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Overflow", 8);
LABEL_196:
              google::LogMessage::~LogMessage((google::LogMessage *)v218);
              goto LABEL_197;
            }
            goto LABEL_197;
          }
          goto LABEL_199;
        }
        uint64_t v75 = ((v38 ^ (unint64_t)v72) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        if (v73 <= 0x3E)
        {
          unint64_t v76 = v70 * v17;
          uint64_t v77 = v75 >= 0 ? v76 : -(uint64_t)v76;
          if (v76 < v75) {
            uint64_t v75 = v77;
          }
        }
      }
      else
      {
        uint64_t v75 = v38 * v72;
      }
      BOOL v74 = __OFSUB__(v75 - 0x7FFFFFFFFFFFFFFFLL, 2);
      if ((unint64_t)(v75 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
        goto LABEL_131;
      }
      goto LABEL_120;
    }
    uint64_t v49 = -(uint64_t)(v17 * v225);
    unint64_t v50 = v22[16];
    if ((unint64_t)v26 >= v50)
    {
      unint64_t v56 = v216 + 1;
      if ((unint64_t)(v216 + 1) > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v25) >> 2);
      if (2 * v57 > v56) {
        unint64_t v56 = 2 * v57;
      }
      if (v57 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v58 = 0x1555555555555555;
      }
      else {
        unint64_t v58 = v56;
      }
      uint64_t v206 = v38;
      if (v58)
      {
        if (v58 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v59 = (char *)operator new(12 * v58);
      }
      else
      {
        uint64_t v59 = 0;
      }
      uint64_t v93 = &v59[12 * v216];
      *(_DWORD *)uint64_t v93 = v27;
      *(void *)(v93 + 4) = v49;
      long long v94 = v93;
      if (v26 == v25)
      {
        uint64_t v8 = a6;
      }
      else
      {
        uint64_t v8 = a6;
        do
        {
          uint64_t v95 = *(void *)(v26 - 12);
          v26 -= 12;
          int v96 = *((_DWORD *)v26 + 2);
          *(void *)(v94 - 12) = v95;
          v94 -= 12;
          *((_DWORD *)v94 + 2) = v96;
        }
        while (v26 != v25);
        uint64_t v26 = (char *)*v213;
      }
      long long v97 = &v59[12 * v58];
      unint64_t v51 = v93 + 12;
      uint64_t v22 = v217;
      v217[14] = v94;
      v217[15] = v93 + 12;
      v217[16] = v97;
      if (v26) {
        operator delete(v26);
      }
      uint64_t v38 = v206;
    }
    else
    {
      *(_DWORD *)uint64_t v26 = v226;
      *(void *)(v26 + 4) = v49;
      unint64_t v51 = v26 + 12;
      uint64_t v8 = a6;
    }
    uint64_t v98 = -(uint64_t)v17;
    uint64_t v100 = v225 + v38;
    BOOL v99 = v225 + v38 == 0;
    if (v225 + v38 >= 0) {
      unint64_t v101 = v225 + v38;
    }
    else {
      unint64_t v101 = -v100;
    }
    int v102 = 63 - __clz(v101);
    v22[15] = v51;
    if (v99) {
      int v102 = 0;
    }
    unsigned int v103 = v102 + v19;
    BOOL v104 = __OFSUB__(v102 + v19, 61);
    if (v102 + v19 > 61)
    {
      uint64_t v105 = 0;
      if (v12 && v100)
      {
        uint64_t v105 = ((v100 ^ (unint64_t)v98) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v107 = v101 * v17;
        if (v103 > 0x3E || v107 >= v105)
        {
          BOOL v104 = __OFSUB__(v105 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v105 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
            goto LABEL_192;
          }
        }
        else
        {
          if (v105 >= 0) {
            uint64_t v105 = v101 * v17;
          }
          else {
            uint64_t v105 = -(uint64_t)v107;
          }
          BOOL v104 = __OFSUB__(v105 - 0x7FFFFFFFFFFFFFFFLL, 2);
          if ((unint64_t)(v105 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
            goto LABEL_192;
          }
        }
      }
    }
    else
    {
      uint64_t v105 = v100 * v98;
      unint64_t v106 = v100 * v98 - 0x7FFFFFFFFFFFFFFFLL;
      BOOL v104 = __OFSUB__(v106, 2);
      if (v106 < 2) {
        goto LABEL_192;
      }
    }
    uint64_t v109 = v105 + v212;
    uint64_t v110 = (v105 + v212) ^ v105;
    uint64_t v111 = (v105 + v212) ^ v212;
    uint64_t v112 = ((unint64_t)v105 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if ((v110 & v111) < 0 == v104) {
      uint64_t v112 = v109;
    }
    uint64_t v204 = v112;
    if ((unint64_t)(v112 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    {
      if (!v8) {
        goto LABEL_168;
      }
      unint64_t v113 = v22[16];
      if ((unint64_t)v51 < v113)
      {
        *(_DWORD *)unint64_t v51 = a3;
        *(void *)(v51 + 4) = v17;
        v217[15] = v51 + 12;
        long long v115 = (signed int *)__p[1];
        unint64_t v114 = *(void *)v220;
        if (__p[1] < (void *)*(void *)v220) {
          goto LABEL_166;
        }
LABEL_259:
        uint64_t v176 = (signed int *)__p[0];
        unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)__p[0]) >> 2);
        unint64_t v178 = v177 + 1;
        if (v177 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (unint64_t)__p[0]) >> 2);
        if (2 * v179 > v178) {
          unint64_t v178 = 2 * v179;
        }
        if (v179 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v180 = 0x1555555555555555;
        }
        else {
          unint64_t v180 = v178;
        }
        if (v180)
        {
          if (v180 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v181 = v38;
          unint64_t v182 = (char *)operator new(12 * v180);
        }
        else
        {
          uint64_t v181 = v38;
          unint64_t v182 = 0;
        }
        uint64_t v183 = &v182[12 * v177];
        *(_DWORD *)uint64_t v183 = v13;
        *(void *)(v183 + 4) = 1;
        unint64_t v184 = v183;
        if (v115 != v176)
        {
          do
          {
            uint64_t v185 = *(void *)(v115 - 3);
            v115 -= 3;
            signed int v186 = v115[2];
            *(void *)(v184 - 12) = v185;
            v184 -= 12;
            *((_DWORD *)v184 + 2) = v186;
          }
          while (v115 != v176);
          long long v115 = (signed int *)__p[0];
        }
        unint64_t v114 = (unint64_t)&v182[12 * v180];
        uint64_t v116 = v183 + 12;
        __p[0] = v184;
        __p[1] = v183 + 12;
        *(void *)uint64_t v220 = v114;
        if (v115)
        {
          operator delete(v115);
          unint64_t v114 = *(void *)v220;
        }
        uint64_t v38 = v181;
        __p[1] = v116;
        uint64_t v117 = v225;
        int v118 = v226;
        if ((unint64_t)v116 < v114) {
          goto LABEL_167;
        }
        goto LABEL_275;
      }
      uint64_t v130 = (char *)*v213;
      unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v51[-*v213] >> 2);
      unint64_t v132 = v131 + 1;
      if (v131 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (void)v130) >> 2);
      if (2 * v133 > v132) {
        unint64_t v132 = 2 * v133;
      }
      if (v133 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v134 = 0x1555555555555555;
      }
      else {
        unint64_t v134 = v132;
      }
      if (v134)
      {
        if (v134 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v135 = v38;
        long long v136 = (char *)operator new(12 * v134);
      }
      else
      {
        uint64_t v135 = v38;
        long long v136 = 0;
      }
      uint64_t v171 = &v136[12 * v131];
      uint64_t v172 = &v136[12 * v134];
      *(_DWORD *)uint64_t v171 = a3;
      *(void *)(v171 + 4) = v17;
      unint64_t v173 = v171 + 12;
      if (v51 == v130)
      {
        v217[14] = v171;
        v217[15] = v173;
        v217[16] = v172;
      }
      else
      {
        do
        {
          uint64_t v174 = *(void *)(v51 - 12);
          v51 -= 12;
          int v175 = *((_DWORD *)v51 + 2);
          *(void *)(v171 - 12) = v174;
          v171 -= 12;
          *((_DWORD *)v171 + 2) = v175;
        }
        while (v51 != v130);
        unint64_t v51 = (char *)v217[14];
        v217[14] = v171;
        v217[15] = v173;
        v217[16] = v172;
        if (!v51)
        {
          uint64_t v38 = v135;
          v217[15] = v173;
          long long v115 = (signed int *)__p[1];
          unint64_t v114 = *(void *)v220;
          if (__p[1] >= (void *)*(void *)v220) {
            goto LABEL_259;
          }
          goto LABEL_166;
        }
      }
      operator delete(v51);
      uint64_t v38 = v135;
      v217[15] = v173;
      long long v115 = (signed int *)__p[1];
      unint64_t v114 = *(void *)v220;
      if (__p[1] >= (void *)*(void *)v220) {
        goto LABEL_259;
      }
LABEL_166:
      *long long v115 = v13;
      *(void *)(v115 + 1) = 1;
      uint64_t v116 = v115 + 3;
      __p[1] = v115 + 3;
      uint64_t v117 = v225;
      int v118 = v226;
      if ((unint64_t)(v115 + 3) < v114)
      {
LABEL_167:
        _DWORD *v116 = v118;
        *(void *)(v116 + 1) = v117;
        uint64_t v119 = v116 + 3;
        goto LABEL_295;
      }
LABEL_275:
      v187 = __p[0];
      unint64_t v188 = 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)__p[0]) >> 2);
      unint64_t v189 = v188 + 1;
      if (v188 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (unint64_t)__p[0]) >> 2);
      if (2 * v190 > v189) {
        unint64_t v189 = 2 * v190;
      }
      if (v190 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v191 = 0x1555555555555555;
      }
      else {
        unint64_t v191 = v189;
      }
      if (v191)
      {
        if (v191 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v192 = v38;
        unint64_t v193 = (char *)operator new(12 * v191);
      }
      else
      {
        uint64_t v192 = v38;
        unint64_t v193 = 0;
      }
      v194 = &v193[12 * v188];
      *(_DWORD *)v194 = v118;
      *(void *)(v194 + 4) = v117;
      uint64_t v119 = v194 + 12;
      if (v116 == v187)
      {
        __p[0] = &v193[12 * v188];
        __p[1] = v194 + 12;
        *(void *)uint64_t v220 = &v193[12 * v191];
      }
      else
      {
        do
        {
          uint64_t v195 = *(void *)(v116 - 3);
          v116 -= 3;
          int v196 = v116[2];
          *(void *)(v194 - 12) = v195;
          v194 -= 12;
          *((_DWORD *)v194 + 2) = v196;
        }
        while (v116 != v187);
        uint64_t v116 = __p[0];
        __p[0] = v194;
        __p[1] = v119;
        *(void *)uint64_t v220 = &v193[12 * v191];
        if (!v116) {
          goto LABEL_294;
        }
      }
      operator delete(v116);
LABEL_294:
      uint64_t v38 = v192;
LABEL_295:
      __p[1] = v119;
      *(void *)&v220[8] = -(v38 + v225);
      unint64_t v88 = *(void *)(v8 + 8);
      if (v88 < *(void *)(v8 + 16))
      {
        *(void *)unint64_t v88 = 0;
        *(void *)(v88 + 8) = 0;
        *(void *)(v88 + 16) = 0;
        uint64_t v89 = __p[0];
        int64_t v90 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] != __p[0])
        {
          unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (v90 >> 2);
          if (v91 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          goto LABEL_298;
        }
LABEL_299:
        long long v199 = *(_OWORD *)&v220[8];
        *(_OWORD *)(v88 + 40) = v221;
        *(_OWORD *)(v88 + 24) = v199;
        uint64_t v200 = (void *)(v88 + 56);
        *(void *)(v8 + 8) = v88 + 56;
        uint64_t v22 = v217;
        goto LABEL_301;
      }
      goto LABEL_300;
    }
LABEL_192:
    if (*off_26AECFF58[0] >= 2)
    {
      if (off_26AECFF58[0] != &google::kLogSiteUninitialized
        || google::InitVLOG3__((google *)off_26AECFF58, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v218, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1494);
        uint64_t v137 = (void *)google::LogMessage::stream((google::LogMessage *)v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"Overflow", 8);
        goto LABEL_196;
      }
LABEL_197:
      int v120 = 0;
      uint64_t v121 = v212;
      uint64_t v122 = __p[0];
      if (!__p[0]) {
        goto LABEL_201;
      }
      goto LABEL_200;
    }
LABEL_199:
    int v120 = 0;
    uint64_t v121 = v212;
    uint64_t v122 = __p[0];
    if (__p[0]) {
      goto LABEL_200;
    }
LABEL_201:
    if (!v120) {
      return;
    }
    uint64_t v44 = (_DWORD *)v22[15];
    uint64_t v212 = v121;
LABEL_203:
    unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v44 - *v213) >> 2);
    unint64_t v139 = (int)v216;
    if (v138 <= (int)v216)
    {
      a1 = (uint64_t)v217;
      uint64_t v11 = v215;
    }
    else
    {
      v140 = (uint64_t *)(*v213 + 12 * (int)v216 + 4);
      a1 = (uint64_t)v217;
      uint64_t v11 = v215;
      do
      {
        uint64_t v142 = *v140;
        v140 = (uint64_t *)((char *)v140 + 12);
        uint64_t v141 = v142;
        if (v142 < 0) {
          uint64_t v141 = -v141;
        }
        uint64_t v143 = v141 + v10;
        if ((v143 & ~v10) >= 0) {
          uint64_t v10 = v143;
        }
        else {
          uint64_t v10 = ((unint64_t)v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
        }
        ++v139;
      }
      while (v138 > v139);
    }
    uint64_t v9 = v11 + 1;
    a5 = v209;
  }
  while (v9 != v208);
  if (v10 <= 0x7FFFFFFFFFFFFFFDLL)
  {
    if (v202)
    {
      void *v209 = 0x8000000000000002;
      v209[1] = v212;
      operations_research::sat::CleanTermsAndFillConstraint(v213, v209);
    }
  }
  else if (*off_26AECFF60[0] >= 2 {
         && (off_26AECFF60[0] != &google::kLogSiteUninitialized
  }
          || google::InitVLOG3__((google *)off_26AECFF60, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1520);
    uint64_t v201 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Overflow", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
}

void sub_23CCAE4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v30 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + 8) = v30;
    operator delete(v30);
  }
  *(void *)(a14 + 8) = v28;
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::ImpliedBoundsProcessor::ComputeBestImpliedBound@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = 0;
  v72[0] = a2;
  uint64_t v10 = (uint64_t *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 48);
  unint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a2));
  unint64_t v13 = (v12 >> 7) ^ (v11 >> 12);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = 0x101010101010101 * (v12 & 0x7F);
  while (1)
  {
    uint64_t v16 = v13 & v14;
    uint64_t v17 = *(void *)(v11 + v16);
    unint64_t v18 = ((v17 ^ v15) - 0x101010101010101) & ~(v17 ^ v15) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_5:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v9 += 8;
    unint64_t v13 = v9 + v16;
  }
  while (1)
  {
    unint64_t result = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    uint64_t v20 = *(void *)(a1 + 56) + 40 * result;
    if (*(_DWORD *)v20 == a2) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_5;
    }
  }
  if (result != v14)
  {
    long long v59 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)a5 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(a5 + 16) = v59;
    return result;
  }
LABEL_8:
  unint64_t v60 = v10;
  *(_OWORD *)a5 = xmmword_23CE7ED00;
  *(void *)(a5 + 17) = 0;
  *(_DWORD *)(a5 + 25) = -1;
  uint64_t v64 = *(void *)(*(void *)(*(void *)(a1 + 96) + 144) + 20 * a2);
  ImpliedBounds = operations_research::sat::ImpliedBounds::GetImpliedBounds(*(void **)(a1 + 104), a2);
  unint64_t v23 = (int *)*ImpliedBounds;
  uint64_t v22 = (int *)ImpliedBounds[1];
  if (*ImpliedBounds != (char *)v22)
  {
    double v24 = (double)v64;
    if (v64 < (uint64_t)0x8000000000000003) {
      double v24 = -INFINITY;
    }
    if (v64 <= 0x7FFFFFFFFFFFFFFDLL) {
      double v25 = v24;
    }
    else {
      double v25 = INFINITY;
    }
    double v26 = *(double *)(a5 + 8);
    uint64_t v63 = *(void *)(a5 + 17);
    uint64_t v61 = a3;
    uint64_t v62 = a4;
    do
    {
      uint64_t v31 = 0;
      unint64_t v54 = *v23 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v55 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v54)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v54));
      unint64_t v32 = (v55 >> 7) ^ (*(void *)a1 >> 12);
      uint64_t v56 = *(void *)(a1 + 24);
      uint64_t v57 = 0x101010101010101 * (v55 & 0x7F);
      while (1)
      {
        uint64_t v27 = v32 & v56;
        uint64_t v28 = *(void *)(*(void *)a1 + v27);
        unint64_t v29 = ((v28 ^ v57) - 0x101010101010101) & ~(v28 ^ v57) & 0x8080808080808080;
        if (v29) {
          break;
        }
LABEL_18:
        if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_52;
        }
        v31 += 8;
        unint64_t v32 = v31 + v27;
      }
      while (1)
      {
        unint64_t v30 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v56;
        if (*(_DWORD *)(*(void *)(a1 + 8) + 4 * v30) == v54) {
          break;
        }
        v29 &= v29 - 1;
        if (!v29) {
          goto LABEL_18;
        }
      }
      if (v30 != v56)
      {
        uint64_t v33 = *(void *)(v23 + 1);
        LODWORD(v68) = 0;
        uint64_t v71 = v33 - v64;
        if (v33 - v64 < 0) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)&v71, (int)&v68, "diff >= 0");
        }
        char v34 = *((unsigned char *)v23 + 12);
        uint64_t v35 = *v23;
        double v36 = *(double *)(*a3 + 8 * v35);
        if (!v34) {
          double v36 = 1.0 - v36;
        }
        int v37 = v72[0];
        uint64_t v38 = v71;
        double v39 = (double)v71;
        if (v71 < (uint64_t)0x8000000000000003) {
          double v39 = -INFINITY;
        }
        if (v71 > 0x7FFFFFFFFFFFFFFDLL) {
          double v39 = INFINITY;
        }
        double v40 = *(double *)(*a3 + 8 * v72[0]) - v25 - v36 * v39;
        if (v40 >= -0.000001)
        {
          if (v40 + 0.0001 < v26 || (v40 < v26 + 0.0001 ? (BOOL v47 = v71 <= v63) : (BOOL v47 = 1), !v47))
          {
            *(double *)a5 = v36;
            *(double *)(a5 + 8) = v40;
            *(void *)(a5 + 17) = v38;
            *(unsigned char *)(a5 + 16) = v34;
            uint64_t v63 = v38;
            double v26 = v40;
            *(_DWORD *)(a5 + 25) = v35;
          }
        }
        else if (a4)
        {
          memset(v70, 0, sizeof(v70));
          *(_OWORD *)uint64_t v69 = 0u;
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          long long __p = 0;
          long long v68 = xmmword_23CE88DB0;
          int v41 = *v23;
          if (*((unsigned char *)v23 + 12))
          {
            unint64_t v42 = operator new(0xCuLL);
            *unint64_t v42 = v41;
            *(void *)(v42 + 1) = v38;
            long long __p = v42;
            uint64_t v67 = v42 + 3;
            unint64_t v43 = operator new(0x18uLL);
            uint64_t v44 = (char *)(v43 + 3);
            v43[2] = -1;
            *unint64_t v43 = *(void *)v42;
            *((_DWORD *)v43 + 2) = v42[2];
            *((_DWORD *)v43 + 3) = v37;
            unint64_t v45 = __p;
            long long __p = v43;
            unint64_t v66 = v43 + 3;
            uint64_t v67 = v43 + 3;
            a3 = v61;
            a4 = v62;
            if (v45) {
              operator delete(v45);
            }
            unint64_t v66 = v44;
            uint64_t v46 = v64;
          }
          else
          {
            uint64_t v48 = operator new(0xCuLL);
            _DWORD *v48 = v41;
            *(void *)(v48 + 1) = -v38;
            long long __p = v48;
            uint64_t v67 = v48 + 3;
            uint64_t v49 = operator new(0x18uLL);
            unint64_t v50 = (char *)(v49 + 3);
            v49[2] = -1;
            *uint64_t v49 = *(void *)v48;
            *((_DWORD *)v49 + 2) = v48[2];
            *((_DWORD *)v49 + 3) = v37;
            unint64_t v51 = __p;
            long long __p = v49;
            unint64_t v66 = v49 + 3;
            uint64_t v67 = v49 + 3;
            a3 = v61;
            a4 = v62;
            if (v51) {
              operator delete(v51);
            }
            unint64_t v66 = v50;
            uint64_t v46 = *(void *)(v23 + 1);
          }
          *((void *)&v68 + 1) = -v46;
          operations_research::sat::CleanTermsAndFillConstraint((uint64_t *)&__p, &v68);
          unint64_t v52 = *(void *)(a4 + 8);
          if (v52 >= *(void *)(a4 + 16))
          {
            unint64_t v53 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)a4, (uint64_t)&v68);
          }
          else
          {
            *(_OWORD *)unint64_t v52 = v68;
            *(void *)(v52 + 16) = 0;
            *(void *)(v52 + 24) = 0;
            *(void *)(v52 + 32) = 0;
            *(void *)(v52 + 40) = 0;
            *(_OWORD *)(v52 + 16) = *(_OWORD *)v69;
            *(void *)(v52 + 32) = v70[0];
            v69[0] = 0;
            v69[1] = 0;
            v70[0] = 0;
            *(void *)(v52 + 48) = 0;
            *(void *)(v52 + 56) = 0;
            *(_OWORD *)(v52 + 40) = *(_OWORD *)&v70[1];
            *(void *)(v52 + 56) = v70[3];
            memset(&v70[1], 0, 24);
            unint64_t v53 = (char *)(v52 + 64);
          }
          *(void *)(a4 + 8) = v53;
          if (__p)
          {
            unint64_t v66 = __p;
            operator delete(__p);
          }
          if (v70[1])
          {
            v70[2] = v70[1];
            operator delete((void *)v70[1]);
          }
          if (v69[0])
          {
            v69[1] = v69[0];
            operator delete(v69[0]);
          }
        }
      }
LABEL_52:
      unint64_t v23 = (int *)((char *)v23 + 13);
    }
    while (v23 != v22);
  }
  unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::try_emplace_impl<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const&>(v60, v72, (uint64_t)&v68);
  uint64_t v58 = *((void *)&v68 + 1);
  *(_OWORD *)(*((void *)&v68 + 1) + 8) = *(_OWORD *)a5;
  *(_OWORD *)(v58 + 21) = *(_OWORD *)(a5 + 13);
  return result;
}

void sub_23CCAEB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCAEB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearConstraint::DebugString(operations_research::sat::LinearConstraint *this@<X0>, char *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = *(void *)this;
  if (v5 >= (uint64_t)0x8000000000000003)
  {
    uint64_t v27 = v29;
    int64_t v28 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v29, a2) - v29;
    double v24 = " <= ";
    uint64_t v25 = 4;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24);
  }
  unint64_t v6 = (_DWORD *)*((void *)this + 2);
  if (*((_DWORD **)this + 3) != v6)
  {
    uint64_t v7 = (*v6 & 1) != 0 ? -**((void **)this + 5) : **((void **)this + 5);
    uint64_t v27 = "";
    int64_t v28 = 0;
    uint64_t v8 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v26, a2);
    double v24 = v26;
    uint64_t v25 = v8 - v26;
    uint64_t v22 = "*X";
    uint64_t v23 = 2;
    int v9 = **((_DWORD **)this + 2);
    int v19 = v21;
    int64_t v20 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(v9 / 2), v21, v10)- v21;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v22, (uint64_t)&v19);
    uint64_t v11 = *((void *)this + 2);
    if ((unint64_t)(*((void *)this + 3) - v11) >= 5)
    {
      unint64_t v12 = 1;
      do
      {
        if (*(_DWORD *)(v11 + 4 * v12)) {
          uint64_t v13 = -*(void *)(*((void *)this + 5) + 8 * v12);
        }
        else {
          uint64_t v13 = *(void *)(*((void *)this + 5) + 8 * v12);
        }
        uint64_t v27 = " ";
        int64_t v28 = 1;
        uint64_t v14 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v13, v26, a2);
        double v24 = v26;
        uint64_t v25 = v14 - v26;
        uint64_t v22 = "*X";
        uint64_t v23 = 2;
        uint64_t v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)(*(_DWORD *)(*((void *)this + 2) + 4 * v12) / 2), v21, v15);
        int v19 = v21;
        int64_t v20 = v16 - v21;
        absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24, (uint64_t)&v22, (uint64_t)&v19);
        ++v12;
        uint64_t v11 = *((void *)this + 2);
      }
      while (v12 < (*((void *)this + 3) - v11) >> 2);
    }
  }
  uint64_t v17 = *((void *)this + 1);
  if (v17 < 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v27 = " <= ";
    int64_t v28 = 4;
    unint64_t v18 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v17, v26, a2);
    double v24 = v26;
    uint64_t v25 = v18 - v26;
    absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v27, (uint64_t)&v24);
  }
}

void sub_23CCAEDE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CreateAllDifferentCutGenerator(char **a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[6] = 0;
  if (a3 != a1) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *a1, a1[1], (a1[1] - *a1) >> 2);
  }
  uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a2);
  uint64_t v8 = v7;
  uint64_t v10 = *a1;
  int v9 = a1[1];
  int64_t v11 = v9 - *a1;
  if (v9 == *a1)
  {
    unint64_t v12 = 0;
    *(void *)&long long v22 = v6;
    *((void *)&v22 + 1) = v7;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
LABEL_9:
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  if (v11 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v12 = (char *)operator new(v9 - *a1);
  uint64_t v13 = &v12[4 * (v11 >> 2)];
  memcpy(v12, v10, v11);
  *(void *)&long long v22 = v6;
  *((void *)&v22 + 1) = v8;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v14 = 4 * (v11 >> 2);
  if (v13 == v12) {
    goto LABEL_9;
  }
  if (v14 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = (char *)operator new(4 * (v11 >> 2));
  uint64_t v16 = &v15[4 * (v14 >> 2)];
  memcpy(v15, v12, v13 - v12);
LABEL_10:
  uint64_t v17 = operator new(0x30uLL);
  void *v17 = &unk_26F0C2698;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = 0;
  int64_t v18 = v16 - v15;
  if (v18)
  {
    if (v18 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v19 = (char *)operator new(v18);
    v17[1] = v19;
    int64_t v20 = &v19[4 * (v18 >> 2)];
    v17[3] = v20;
    memcpy(v19, v15, v18);
    v17[2] = v20;
  }
  *((_OWORD *)v17 + 2) = v22;
  uint64_t v27 = v17;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v26, a3 + 3);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    if (v15) {
LABEL_17:
    }
      operator delete(v15);
  }
  else
  {
    if (v27) {
      (*(void (**)(void))(*v27 + 40))();
    }
    if (v15) {
      goto LABEL_17;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  if (*operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] >= 1
    && (operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v23, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1657);
    uint64_t v21 = (void *)google::LogMessage::stream((google::LogMessage *)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Created all_diff cut generator of size: ", 40);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&v23);
  }
}

void sub_23CCAF120(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAF134(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAF148(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCAF15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v18) {
    operator delete(v18);
  }
  if (v17)
  {
    operator delete(v17);
    operations_research::sat::CutGenerator::~CutGenerator(v16);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CutGenerator::~CutGenerator(v16);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreateLinMaxCutGenerator(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = a5;
  uint64_t v94 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  unint64_t v84 = 0;
  *(void *)uint64_t v85 = 0;
  uint64_t v86 = 0;
  LODWORD(__src[0]) = a1;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)__src, (char *)__src + 4, 1uLL);
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  int v68 = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v67 = a4;
    uint64_t v10 = 0;
    uint64_t v11 = v9;
    unint64_t v70 = v8;
    while (1)
    {
      unint64_t v12 = (_DWORD *)*a3;
      uint64_t v14 = (char *)v8[1];
      unint64_t v13 = v8[2];
      if ((unint64_t)v14 >= v13) {
        break;
      }
      *(_DWORD *)uint64_t v14 = v12[v10];
      uint64_t v15 = (uint64_t)(v14 + 4);
LABEL_25:
      v8[1] = v15;
      std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>((unint64_t *)&v84, *(void **)v85, *(char **)(*a2 + 56 * v10), *(char **)(*a2 + 56 * v10 + 8), (uint64_t)(*(void *)(*a2 + 56 * v10 + 8) - *(void *)(*a2 + 56 * v10)) >> 2);
      if (++v10 == v11)
      {
        uint64_t v38 = (int *)v84;
        double v39 = *(char **)v85;
        a4 = v67;
        goto LABEL_28;
      }
    }
    uint64_t v16 = v11;
    uint64_t v17 = a2;
    int64_t v18 = a3;
    int v19 = (char *)*v8;
    uint64_t v20 = (uint64_t)&v14[-*v8];
    uint64_t v21 = v20 >> 2;
    unint64_t v22 = (v20 >> 2) + 1;
    if (v22 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v13 - (void)v19;
    if (v23 >> 1 > v22) {
      unint64_t v22 = v23 >> 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(4 * v24);
      double v26 = &v25[4 * v21];
      *double v26 = v12[v10];
      uint64_t v15 = (uint64_t)(v26 + 1);
      if (v14 != v19)
      {
LABEL_14:
        unint64_t v27 = v14 - 4 - v19;
        if (v27 >= 0x2C)
        {
          unint64_t v28 = v14 - &v25[v20];
          a3 = v18;
          a2 = v17;
          uint64_t v11 = v16;
          if (v28 >= 0x20)
          {
            uint64_t v29 = (v27 >> 2) + 1;
            uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v31 = &v14[-v30];
            double v26 = (_DWORD *)((char *)v26 - v30);
            unint64_t v32 = &v25[4 * v21 - 16];
            uint64_t v33 = v14 - 16;
            uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *unint64_t v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 8;
            }
            while (v34);
            uint64_t v14 = v31;
            if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_23:
              int v37 = &v25[4 * v24];
              uint64_t v8 = v70;
              void *v70 = v26;
              v70[1] = v15;
              v70[2] = v37;
              if (v19) {
                operator delete(v19);
              }
              goto LABEL_25;
            }
          }
        }
        else
        {
          a3 = v18;
          a2 = v17;
          uint64_t v11 = v16;
        }
        do
        {
          int v36 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *--double v26 = v36;
        }
        while (v14 != v19);
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v25 = 0;
      double v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12[v10];
      uint64_t v15 = 4 * v21 + 4;
      if (v14 != v19) {
        goto LABEL_14;
      }
    }
    a3 = v18;
    a2 = v17;
    uint64_t v11 = v16;
    goto LABEL_23;
  }
  double v39 = 0;
  uint64_t v38 = 0;
LABEL_28:
  unint64_t v40 = 126 - 2 * __clz((v39 - (char *)v38) >> 2);
  if (v39 == (char *)v38) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(v38, v39, (uint64_t)__src, v41, 1);
  unint64_t v42 = (char *)v84;
  unint64_t v43 = *(char **)v85;
  if (v84 != *(void **)v85)
  {
    uint64_t v44 = (char *)v84 + 4;
    while (v44 != *(char **)v85)
    {
      int v45 = *((_DWORD *)v44 - 1);
      int v46 = *(_DWORD *)v44;
      v44 += 4;
      if (v45 == v46)
      {
        BOOL v47 = v44 - 8;
        while (v44 != v43)
        {
          int v48 = v45;
          int v45 = *(_DWORD *)v44;
          if (v48 != *(_DWORD *)v44)
          {
            *((_DWORD *)v47 + 1) = v45;
            v47 += 4;
          }
          v44 += 4;
        }
        uint64_t v49 = v47 + 4;
        unint64_t v50 = (char *)(v43 - (v47 + 4));
        if (v43 != v47 + 4)
        {
          if (v43 != &v50[(void)v49])
          {
            memmove(v47 + 4, &v50[(void)v49], 0);
            unint64_t v42 = (char *)v84;
          }
          unint64_t v43 = v49;
          *(void *)uint64_t v85 = v49;
        }
        break;
      }
    }
  }
  std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v8, (void *)v8[1], v42, v43, (v43 - v42) >> 2);
  uint64_t v51 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  unsigned int v73 = 0;
  unint64_t v52 = v84;
  int64_t v53 = *(void *)v85 - (void)v84;
  if (*(void **)v85 != v84)
  {
    if (v53 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(*(void *)v85 - (void)v84);
    unsigned int v73 = (char *)v71 + 4 * (v53 >> 2);
    memcpy(v71, v52, v53);
    uint64_t v72 = v73;
  }
  BOOL v74 = 0;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  unint64_t v54 = (const void *)*a3;
  int64_t v55 = a3[1] - *a3;
  if (v55)
  {
    if (v55 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v74 = operator new(v55);
    unint64_t v76 = (char *)v74 + 4 * (v55 >> 2);
    memcpy(v74, v54, v55);
    uint64_t v75 = v76;
  }
  int v77 = a1;
  int v78 = v68;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>(&v79, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v82 = v51;
  uint64_t v83 = a4;
  operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1((uint64_t)__src, (uint64_t)&v71);
  uint64_t v56 = operator new(0x68uLL);
  *uint64_t v56 = &unk_26F0C2718;
  operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1((uint64_t)(v56 + 1), (uint64_t)__src);
  uint64_t v93 = v56;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v92, v8 + 3);
  if (v93 == v92)
  {
    (*(void (**)(void *))(v92[0] + 32))(v92);
    uint64_t v57 = (char *)__p;
    if (__p) {
      goto LABEL_55;
    }
LABEL_66:
    long long v59 = v88;
    if (!v88) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v93) {
    (*(void (**)(void))(*v93 + 40))();
  }
  uint64_t v57 = (char *)__p;
  if (!__p) {
    goto LABEL_66;
  }
LABEL_55:
  uint64_t v58 = v91;
  if (v91 == v57)
  {
    unint64_t v91 = v57;
    operator delete(v57);
    long long v59 = v88;
    if (!v88) {
      goto LABEL_68;
    }
LABEL_67:
    uint64_t v89 = v59;
    operator delete(v59);
    goto LABEL_68;
  }
  do
  {
    unint64_t v60 = (void *)*((void *)v58 - 4);
    if (v60)
    {
      *((void *)v58 - 3) = v60;
      operator delete(v60);
    }
    uint64_t v61 = (void *)*((void *)v58 - 7);
    if (v61)
    {
      *((void *)v58 - 6) = v61;
      operator delete(v61);
    }
    v58 -= 56;
  }
  while (v58 != v57);
  unint64_t v91 = v57;
  operator delete(__p);
  long long v59 = v88;
  if (v88) {
    goto LABEL_67;
  }
LABEL_68:
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  uint64_t v62 = (char *)v79;
  if (v79)
  {
    uint64_t v63 = v80;
    uint64_t v64 = v79;
    if (v80 != v79)
    {
      do
      {
        unint64_t v65 = (void *)*((void *)v63 - 4);
        if (v65)
        {
          *((void *)v63 - 3) = v65;
          operator delete(v65);
        }
        unint64_t v66 = (void *)*((void *)v63 - 7);
        if (v66)
        {
          *((void *)v63 - 6) = v66;
          operator delete(v66);
        }
        v63 -= 56;
      }
      while (v63 != v62);
      uint64_t v64 = v79;
    }
    uint64_t v80 = v62;
    operator delete(v64);
  }
  if (v74)
  {
    uint64_t v75 = v74;
    operator delete(v74);
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
  if (v84)
  {
    *(void *)uint64_t v85 = v84;
    operator delete(v84);
  }
}

void sub_23CCAF86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, operations_research::sat::CutGenerator *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  operator delete(v29);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a29);
  operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a14);
  if (!__p)
  {
    operations_research::sat::CutGenerator::~CutGenerator(v30);
    _Unwind_Resume(a1);
  }
  a27 = (uint64_t)__p;
  operator delete(__p);
  operations_research::sat::CutGenerator::~CutGenerator(v30);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreateCumulativeCutGenerator(int **a1@<X0>, int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[6] = 0;
  if (a5 != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, *a3, a3[1], (a3[1] - *a3) >> 2);
  }
  int v85 = a2;
  uint64_t v86 = a3;
  uint64_t v88 = a4;
  uint64_t v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(a4);
  uint64_t v11 = (void *)v10;
  unint64_t v12 = *a1;
  int v87 = a1;
  int64_t v90 = a1[1];
  if (*a1 != v90)
  {
    unint64_t v13 = a5[1];
    uint64_t v89 = (void *)v10;
    do
    {
      uint64_t v14 = *v12;
      int v15 = *(_DWORD *)(v11[5] + 4 * v14);
      uint64_t v16 = a5[2];
      if (v13 < v16)
      {
        *(_DWORD *)unint64_t v13 = v15;
        uint64_t v17 = v13 + 4;
        goto LABEL_23;
      }
      int64_t v18 = *a5;
      uint64_t v19 = v13 - *a5;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v16 - v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v24 = operator new(4 * v23);
        uint64_t v25 = &v24[4 * v20];
        *(_DWORD *)uint64_t v25 = v15;
        uint64_t v17 = v25 + 4;
        if (v13 != v18)
        {
LABEL_18:
          unint64_t v26 = v13 - 4 - v18;
          if (v26 < 0xBC
            || &v24[v19 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v19 - 4]
            || &v13[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
            || (unint64_t)(v13 - &v24[v19]) < 0x20)
          {
            unint64_t v27 = v13;
            uint64_t v11 = v89;
          }
          else
          {
            uint64_t v54 = (v26 >> 2) + 1;
            uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v27 = &v13[-v55];
            v25 -= v55;
            uint64_t v56 = &v24[4 * v20 - 16];
            uint64_t v57 = v13 - 16;
            uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v11 = v89;
            do
            {
              long long v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *uint64_t v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 8;
            }
            while (v58);
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_21:
              uint64_t v16 = &v24[4 * v23];
              *a5 = v25;
              a5[1] = v17;
              a5[2] = v16;
              if (!v18) {
                goto LABEL_23;
              }
LABEL_22:
              operator delete(v18);
              uint64_t v16 = a5[2];
              goto LABEL_23;
            }
          }
          do
          {
            int v28 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v25 - 1) = v28;
            v25 -= 4;
          }
          while (v27 != v18);
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (char *)(4 * v20);
        *(_DWORD *)(4 * v20) = v15;
        uint64_t v17 = (char *)(4 * v20 + 4);
        if (v13 != v18) {
          goto LABEL_18;
        }
      }
      uint64_t v11 = v89;
      uint64_t v16 = &v24[4 * v23];
      *a5 = v25;
      a5[1] = v17;
      a5[2] = v16;
      if (v18) {
        goto LABEL_22;
      }
LABEL_23:
      a5[1] = v17;
      int v29 = *(_DWORD *)(v11[8] + 4 * v14);
      if (v17 < v16)
      {
        *(_DWORD *)uint64_t v17 = v29;
        uint64_t v30 = v17 + 4;
        goto LABEL_39;
      }
      uint64_t v31 = *a5;
      uint64_t v32 = v17 - *a5;
      uint64_t v33 = v32 >> 2;
      unint64_t v34 = (v32 >> 2) + 1;
      if (v34 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v16 - v31;
      if (v35 >> 1 > v34) {
        unint64_t v34 = v35 >> 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v37 = operator new(4 * v36);
        uint64_t v38 = &v37[4 * v33];
        *(_DWORD *)uint64_t v38 = v29;
        uint64_t v30 = v38 + 4;
        if (v17 != v31)
        {
LABEL_34:
          unint64_t v39 = v17 - 4 - v31;
          if (v39 < 0xBC
            || &v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4]
            || &v17[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v17 - 4
            || (unint64_t)(v17 - v37 - v32) < 0x20)
          {
            unint64_t v40 = v17;
            uint64_t v11 = v89;
          }
          else
          {
            uint64_t v60 = (v39 >> 2) + 1;
            uint64_t v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v40 = &v17[-v61];
            v38 -= v61;
            uint64_t v62 = &v37[4 * v33 - 16];
            uint64_t v63 = v17 - 16;
            uint64_t v64 = v60 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v11 = v89;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              _OWORD *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            if (v60 == (v60 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_37:
              uint64_t v16 = &v37[4 * v36];
              *a5 = v38;
              a5[1] = v30;
              a5[2] = v16;
              if (!v31) {
                goto LABEL_39;
              }
LABEL_38:
              operator delete(v31);
              uint64_t v16 = a5[2];
              goto LABEL_39;
            }
          }
          do
          {
            int v41 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v38 - 1) = v41;
            v38 -= 4;
          }
          while (v40 != v31);
          goto LABEL_37;
        }
      }
      else
      {
        int v37 = 0;
        uint64_t v38 = (char *)(4 * v33);
        *(_DWORD *)(4 * v33) = v29;
        uint64_t v30 = (char *)(4 * v33 + 4);
        if (v17 != v31) {
          goto LABEL_34;
        }
      }
      uint64_t v11 = v89;
      uint64_t v16 = &v37[4 * v36];
      *a5 = v38;
      a5[1] = v30;
      a5[2] = v16;
      if (v31) {
        goto LABEL_38;
      }
LABEL_39:
      a5[1] = v30;
      int v42 = *(_DWORD *)(v11[11] + 4 * v14);
      if (v30 >= v16)
      {
        unint64_t v43 = *a5;
        uint64_t v44 = v30 - *a5;
        uint64_t v45 = v44 >> 2;
        unint64_t v46 = (v44 >> 2) + 1;
        if (v46 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v47 = v16 - v43;
        if (v47 >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          if (v48 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v49 = operator new(4 * v48);
          unint64_t v50 = &v49[4 * v45];
          *(_DWORD *)unint64_t v50 = v42;
          unint64_t v13 = v50 + 4;
          if (v30 == v43) {
            goto LABEL_60;
          }
LABEL_57:
          unint64_t v51 = v30 - 4 - v43;
          if (v51 < 0xBC)
          {
            unint64_t v52 = v30;
            goto LABEL_59;
          }
          if (&v49[v44 - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v49[v44 - 4])
          {
            unint64_t v52 = v30;
            goto LABEL_59;
          }
          if (&v30[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v30 - 4)
          {
            unint64_t v52 = v30;
            goto LABEL_59;
          }
          if ((unint64_t)(v30 - v49 - v44) < 0x20)
          {
            unint64_t v52 = v30;
            goto LABEL_59;
          }
          uint64_t v66 = (v51 >> 2) + 1;
          uint64_t v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v52 = &v30[-v67];
          v50 -= v67;
          int v68 = &v49[4 * v45 - 16];
          uint64_t v69 = v30 - 16;
          uint64_t v70 = v66 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *int v68 = v71;
            v68 -= 2;
            v69 -= 32;
            v70 -= 8;
          }
          while (v70);
          if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_59:
              int v53 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *((_DWORD *)v50 - 1) = v53;
              v50 -= 4;
            }
            while (v52 != v43);
          }
        }
        else
        {
          uint64_t v49 = 0;
          unint64_t v50 = (char *)(4 * v45);
          *(_DWORD *)(4 * v45) = v42;
          unint64_t v13 = (char *)(4 * v45 + 4);
          if (v30 != v43) {
            goto LABEL_57;
          }
        }
LABEL_60:
        *a5 = v50;
        a5[1] = v13;
        a5[2] = &v49[4 * v48];
        if (v43) {
          operator delete(v43);
        }
        goto LABEL_6;
      }
      *(_DWORD *)uint64_t v30 = v42;
      unint64_t v13 = v30 + 4;
LABEL_6:
      a5[1] = v13;
      ++v12;
    }
    while (v12 != v90);
  }
  uint64_t v72 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v88);
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  BOOL v74 = *v87;
  unsigned int v73 = v87[1];
  int64_t v75 = (char *)v73 - (char *)*v87;
  if (v73 != *v87)
  {
    if (v75 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v76 = (char *)operator new((char *)v73 - (char *)*v87);
    int v77 = &v76[4 * (v75 >> 2)];
    unint64_t v91 = v76;
    uint64_t v93 = v77;
    memcpy(v76, v74, v75);
    uint64_t v92 = v77;
  }
  int v94 = v85;
  int v96 = 0;
  long long v97 = 0;
  uint64_t v95 = 0;
  uint64_t v79 = *v86;
  int v78 = v86[1];
  int64_t v80 = v78 - *v86;
  if (v78 != *v86)
  {
    if (v80 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v81 = (char *)operator new(v78 - *v86);
    uint64_t v82 = &v81[4 * (v80 >> 2)];
    uint64_t v95 = v81;
    long long v97 = v82;
    memcpy(v81, v79, v80);
    int v96 = v82;
  }
  uint64_t v98 = v72;
  BOOL v99 = v11;
  uint64_t v100 = v88;
  operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)v101, (uint64_t)&v91);
  uint64_t v83 = operator new(0x58uLL);
  *uint64_t v83 = &unk_26F0C2798;
  operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((uint64_t)(v83 + 1), (uint64_t)v101);
  uint64_t v105 = v83;
  std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](v104, a5 + 3);
  if (v105 == v104)
  {
    (*(void (**)(void *))(v104[0] + 32))(v104);
    unint64_t v84 = __p;
    if (__p)
    {
LABEL_96:
      unsigned int v103 = v84;
      operator delete(v84);
    }
  }
  else
  {
    if (v105) {
      (*(void (**)(void))(*v105 + 40))();
    }
    unint64_t v84 = __p;
    if (__p) {
      goto LABEL_96;
    }
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
  if (v95)
  {
    int v96 = v95;
    operator delete(v95);
  }
  if (v91)
  {
    uint64_t v92 = v91;
    operator delete(v91);
  }
}

void sub_23CCB00CC(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  operator delete(v26);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a25);
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model((uint64_t)&a15);
  operations_research::sat::CutGenerator::~CutGenerator(v25);
  _Unwind_Resume(a1);
}

void sub_23CCB011C(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB0130(_Unwind_Exception *a1)
{
  operations_research::sat::CutGenerator::~CutGenerator(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB0144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15)
  {
    operator delete(a15);
    operations_research::sat::CutGenerator::~CutGenerator(v20);
    _Unwind_Resume(a1);
  }
  operations_research::sat::CutGenerator::~CutGenerator(v20);
  _Unwind_Resume(a1);
}

void operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts(operations_research::KnapsackSolverForCuts *this)
{
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    uint64_t v2 = (void *)*((void *)this + 24);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)this + 27));
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2) {
LABEL_3:
  }
    operator delete(v2);
LABEL_4:
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 17);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    uint64_t v6 = (void *)*((void *)this + 15);
    uint64_t v7 = (void *)*((void *)this + 14);
    if (v6 != v5)
    {
      do
      {
        uint64_t v9 = *--v6;
        uint64_t v8 = v9;
        *uint64_t v6 = 0;
        if (v9) {
          MEMORY[0x23ECF2BC0](v8, 0x1060C40B86F7F5DLL);
        }
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v5;
    operator delete(v7);
  }

  operations_research::KnapsackPropagatorForCuts::~KnapsackPropagatorForCuts(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 3;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v71 = *((void *)a2 - 1);
          uint64_t v72 = *v12;
          if (v71 > *v12)
          {
            uint64_t *v12 = v71;
            *((void *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          uint64_t v73 = *v12;
          uint64_t v74 = v12[1];
          uint64_t v75 = *((void *)a2 - 1);
          if (v74 <= *v12)
          {
            if (v75 > v74)
            {
              v12[1] = v75;
              *((void *)a2 - 1) = v74;
              uint64_t v93 = *v12;
              uint64_t v92 = v12[1];
              if (v92 > *v12)
              {
                uint64_t *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 <= v74)
            {
              uint64_t *v12 = v74;
              v12[1] = v73;
              uint64_t v100 = *((void *)a2 - 1);
              if (v100 <= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              uint64_t *v12 = v75;
            }
            *((void *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          unint64_t v76 = v12 + 1;
          int v77 = (uint64_t *)v12[1];
          int v78 = v12 + 2;
          uint64_t v79 = v12[2];
          int64_t v80 = (uint64_t *)*v12;
          if ((uint64_t)v77 <= *v12)
          {
            if (v79 <= (uint64_t)v77)
            {
LABEL_149:
              int v77 = (uint64_t *)v79;
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 <= (uint64_t)v77) {
                return result;
              }
LABEL_150:
              *int v78 = v94;
              *((void *)a2 - 1) = v77;
              uint64_t v97 = *v78;
              uint64_t v98 = *v76;
              if (v97 > v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                uint64_t v99 = *v12;
                if (v97 > *v12)
                {
                  uint64_t *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            uint64_t *v76 = v79;
            *int v78 = (uint64_t)v77;
            uint64_t v81 = v12;
            uint64_t v82 = (uint64_t **)(v12 + 1);
            unint64_t result = (uint64_t)v77;
            if (v79 <= (uint64_t)v80)
            {
LABEL_141:
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 <= (uint64_t)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v81 = v12;
            uint64_t v82 = (uint64_t **)(v12 + 2);
            unint64_t result = *v12;
            if (v79 <= (uint64_t)v77)
            {
              uint64_t *v12 = (uint64_t)v77;
              v12[1] = (uint64_t)v80;
              uint64_t v81 = v12 + 1;
              uint64_t v82 = (uint64_t **)(v12 + 2);
              unint64_t result = (uint64_t)v80;
              if (v79 <= (uint64_t)v80) {
                goto LABEL_149;
              }
            }
          }
          uint64_t *v81 = v79;
          char *v82 = v80;
          int v77 = (uint64_t *)result;
          goto LABEL_141;
        case 5uLL:
          return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[v14 >> 1];
    uint64_t v17 = *((void *)a2 - 1);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v20 = *v12;
      uint64_t v21 = *v16;
      if (*v12 > *v16)
      {
        if (v17 > v20)
        {
          *uint64_t v16 = v17;
          goto LABEL_32;
        }
        *uint64_t v16 = v20;
        uint64_t *v12 = v21;
        uint64_t v33 = *((void *)a2 - 1);
        if (v33 > v21)
        {
          uint64_t *v12 = v33;
LABEL_32:
          *((void *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 <= v20) {
        goto LABEL_33;
      }
      uint64_t *v12 = v17;
      *((void *)a2 - 1) = v20;
      uint64_t v23 = *v16;
      if (*v12 <= *v16) {
        goto LABEL_33;
      }
      *uint64_t v16 = *v12;
      uint64_t *v12 = v23;
      --a4;
      uint64_t v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) > v24) {
        goto LABEL_57;
      }
      if (v24 > *((void *)a2 - 1))
      {
        do
        {
          uint64_t v62 = v12[1];
          ++v12;
        }
        while (v24 <= v62);
      }
      else
      {
        uint64_t v63 = v12 + 1;
        do
        {
          unint64_t v12 = v63;
          if (v63 >= (uint64_t *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 <= *v12);
      }
      uint64_t v64 = (uint64_t *)a2;
      if (v12 < (uint64_t *)a2)
      {
        uint64_t v64 = (uint64_t *)a2;
        do
          uint64_t v65 = *--v64;
        while (v24 > v65);
      }
      if (v12 < v64)
      {
        uint64_t v66 = *v12;
        uint64_t v67 = *v64;
        do
        {
          uint64_t *v12 = v67;
          *uint64_t v64 = v66;
          do
          {
            uint64_t v68 = v12[1];
            ++v12;
            uint64_t v66 = v68;
          }
          while (v24 <= v68);
          do
          {
            uint64_t v69 = *--v64;
            uint64_t v67 = v69;
          }
          while (v24 > v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        uint64_t *v11 = *v70;
      }
      a5 = 0;
      uint64_t *v70 = v24;
    }
    else
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *v12;
      if (*v16 <= *v12)
      {
        if (v17 > v18)
        {
          *uint64_t v16 = v17;
          *((void *)a2 - 1) = v18;
          uint64_t v22 = *v12;
          if (*v16 > *v12)
          {
            uint64_t *v12 = *v16;
            *uint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 <= v18)
        {
          uint64_t *v12 = v18;
          *uint64_t v16 = v19;
          uint64_t v25 = *((void *)a2 - 1);
          if (v25 <= v19) {
            goto LABEL_24;
          }
          *uint64_t v16 = v25;
        }
        else
        {
          uint64_t *v12 = v17;
        }
        *((void *)a2 - 1) = v19;
      }
LABEL_24:
      unint64_t v26 = &v12[v15];
      uint64_t v29 = *(v26 - 1);
      unint64_t v27 = v26 - 1;
      uint64_t v28 = v29;
      uint64_t v30 = v12[1];
      uint64_t v31 = *((void *)a2 - 2);
      if (v29 <= v30)
      {
        if (v31 > v28)
        {
          uint64_t *v27 = v31;
          *((void *)a2 - 2) = v28;
          uint64_t v32 = v12[1];
          if (*v27 > v32)
          {
            v12[1] = *v27;
            uint64_t *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 <= v28)
        {
          v12[1] = v28;
          uint64_t *v27 = v30;
          uint64_t v34 = *((void *)a2 - 2);
          if (v34 <= v30) {
            goto LABEL_38;
          }
          uint64_t *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((void *)a2 - 2) = v30;
      }
LABEL_38:
      uint64_t v35 = &v12[v15];
      uint64_t v38 = v35[1];
      unint64_t v36 = v35 + 1;
      uint64_t v37 = v38;
      uint64_t v39 = v12[2];
      uint64_t v40 = *((void *)a2 - 3);
      if (v38 <= v39)
      {
        if (v40 > v37)
        {
          *unint64_t v36 = v40;
          *((void *)a2 - 3) = v37;
          uint64_t v41 = v12[2];
          if (*v36 > v41)
          {
            v12[2] = *v36;
            *unint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 <= v37)
        {
          v12[2] = v37;
          *unint64_t v36 = v39;
          uint64_t v42 = *((void *)a2 - 3);
          if (v42 <= v39) {
            goto LABEL_47;
          }
          *unint64_t v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((void *)a2 - 3) = v39;
      }
LABEL_47:
      uint64_t v43 = *v16;
      uint64_t v44 = *v27;
      uint64_t v45 = *v36;
      if (*v16 <= *v27)
      {
        if (v45 <= v43) {
          goto LABEL_55;
        }
        *uint64_t v16 = v45;
        *unint64_t v36 = v43;
        unint64_t v36 = &v12[v14 >> 1];
        uint64_t v43 = v44;
        if (v45 > v44)
        {
LABEL_54:
          uint64_t *v27 = v45;
          *unint64_t v36 = v44;
LABEL_55:
          uint64_t v47 = *v12;
          uint64_t *v12 = v43;
          *uint64_t v16 = v47;
          --a4;
          uint64_t v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v61 = *v12;
        uint64_t *v12 = v45;
        *uint64_t v16 = v61;
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 > v43) {
        goto LABEL_54;
      }
      uint64_t *v27 = v43;
      *uint64_t v16 = v44;
      unint64_t v27 = &v12[v14 >> 1];
      uint64_t v43 = v45;
      if (v45 > v44) {
        goto LABEL_54;
      }
      uint64_t v46 = *v12;
      uint64_t *v12 = v44;
      *uint64_t v16 = v46;
      --a4;
      uint64_t v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        uint64_t v49 = v12[++v48];
      while (v49 > v24);
      unint64_t v50 = &v12[v48];
      unint64_t v51 = a2;
      if (v48 == 1)
      {
        unint64_t v51 = a2;
        do
        {
          if (v50 >= (uint64_t *)v51) {
            break;
          }
          uint64_t v53 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v53 <= v24);
      }
      else
      {
        do
        {
          uint64_t v52 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v52 <= v24);
      }
      if (v50 >= (uint64_t *)v51)
      {
        long long v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        uint64_t *v12 = *v59;
        goto LABEL_75;
      }
      uint64_t v54 = *(void *)v51;
      uint64_t v55 = &v12[v48];
      uint64_t v56 = (uint64_t *)v51;
      do
      {
        *uint64_t v55 = v54;
        *uint64_t v56 = v49;
        do
        {
          uint64_t v57 = v55[1];
          ++v55;
          uint64_t v49 = v57;
        }
        while (v57 > v24);
        do
        {
          uint64_t v58 = *--v56;
          uint64_t v54 = v58;
        }
        while (v58 <= v24);
      }
      while (v55 < v56);
      long long v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *long long v59 = v24;
      if (v50 < (uint64_t *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v12, v59);
      unint64_t v12 = v59 + 1;
      unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(v59 + 1, (uint64_t *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v59 + 1;
      }
    }
  }
  uint64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (uint64_t *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      int v87 = v12;
      do
      {
        uint64_t v90 = *v87;
        uint64_t v89 = v87[1];
        int v87 = (uint64_t *)v83;
        if (v89 > v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(uint64_t *)((char *)v12 + v91 + 8) = v90;
            if (!v91)
            {
              uint64_t v88 = v12;
              goto LABEL_124;
            }
            uint64_t v90 = *(uint64_t *)((char *)v12 + v91 - 8);
            v91 -= 8;
          }
          while (v89 > v90);
          uint64_t v88 = (uint64_t *)((char *)v12 + v91 + 8);
LABEL_124:
          uint64_t *v88 = v89;
        }
        uint64_t v83 = (char *)(v87 + 1);
        v86 += 8;
      }
      while (v87 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      uint64_t v96 = *v11;
      uint64_t v95 = v11[1];
      uint64_t v11 = (uint64_t *)v83;
      if (v95 > v96)
      {
        do
        {
          *(void *)uint64_t v83 = v96;
          uint64_t v96 = *((void *)v83 - 2);
          v83 -= 8;
        }
        while (v95 > v96);
        *(void *)uint64_t v83 = v95;
      }
      uint64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (uint64_t *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(uint64_t *a1, uint64_t *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *a1;
      if (v9 <= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v13 = *(a2 - 1);
      if (v12 <= *a1)
      {
        if (v13 <= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        uint64_t v30 = *a1;
        uint64_t v29 = a1[1];
        if (v29 <= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 <= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v35 = *(a2 - 1);
        if (v35 <= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      uint64_t v15 = a1[1];
      uint64_t v16 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v18 = *a1;
      if (v15 > *a1)
      {
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 2;
        uint64_t v21 = *a1;
        if (v17 <= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          uint64_t v19 = a1 + 1;
          uint64_t v20 = a1 + 2;
          uint64_t v21 = v18;
          if (v17 <= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *uint64_t v19 = v17;
        *uint64_t v20 = v18;
        uint64_t v15 = v21;
LABEL_36:
        uint64_t v31 = *(a2 - 1);
        if (v31 <= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 > v15)
      {
        uint64_t *v14 = v17;
        *uint64_t v16 = v15;
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 1;
        uint64_t v21 = v15;
        if (v17 <= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v15 = v17;
      uint64_t v31 = *(a2 - 1);
      if (v31 <= v15) {
        return 1;
      }
LABEL_39:
      *uint64_t v16 = v31;
      *(a2 - 1) = v15;
      uint64_t v32 = *v16;
      uint64_t v33 = *v14;
      if (v32 <= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      uint64_t v34 = *a1;
      if (v32 <= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      uint64_t v3 = a1[2];
      uint64_t v5 = a1[1];
      uint64_t v6 = *a1;
      if (v5 <= *a1)
      {
        if (v3 <= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        uint64_t *v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 > v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 <= v6) {
        goto LABEL_20;
      }
LABEL_19:
      uint64_t *v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      uint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v25 = *v22;
        uint64_t v26 = *v4;
        if (*v22 > v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        uint64_t v26 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 > v26);
      *(uint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  uint64_t v7 = *a3;
  if (*a2 <= *result)
  {
    if (v7 <= v5)
    {
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 <= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    uint64_t v8 = *result;
    if (*a2 > *result)
    {
      void *result = *a2;
      *a2 = v8;
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 <= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 <= v5)
    {
      void *result = v5;
      *a2 = v6;
      uint64_t v5 = *a3;
      if (*a3 <= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      void *result = v7;
    }
    *a3 = v6;
    uint64_t v5 = v6;
  }
LABEL_11:
  uint64_t v9 = *a4;
  if (*a4 <= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  uint64_t v10 = *a2;
  if (*a3 > *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    uint64_t v11 = *result;
    if (*a2 > *result)
    {
      void *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  uint64_t v12 = *a4;
  if (*a5 > *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    if (*a4 > *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = *a2;
      if (*a3 > *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        uint64_t v15 = *result;
        if (*a2 > *result)
        {
          void *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>*>(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        uint64_t v37 = &a1[8 * v36];
        if (2 * v35 + 2 >= v4)
        {
          uint64_t v38 = *(void *)v37;
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (*(void *)v37 <= *(void *)v40) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v38 = *((void *)v37 + 1);
          BOOL v39 = *(void *)v37 <= v38;
          if (*(void *)v37 < v38) {
            uint64_t v38 = *(void *)v37;
          }
          if (!v39)
          {
            v37 += 8;
            uint64_t v36 = 2 * v35 + 2;
          }
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (v38 <= *(void *)v40)
          {
LABEL_78:
            while (1)
            {
              *(void *)uint64_t v40 = v38;
              uint64_t v40 = v37;
              if (v34 < v36) {
                break;
              }
              uint64_t v43 = (2 * v36) | 1;
              uint64_t v37 = &a1[8 * v43];
              uint64_t v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v42 = *((void *)v37 + 1);
                if (*(void *)v37 >= v42) {
                  uint64_t v38 = *((void *)v37 + 1);
                }
                if (*(void *)v37 <= v42) {
                  uint64_t v36 = v43;
                }
                else {
                  v37 += 8;
                }
                if (v38 > v41) {
                  break;
                }
              }
              else
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v36 = v43;
                if (*(void *)v37 > v41) {
                  break;
                }
              }
            }
            *(void *)uint64_t v40 = v41;
          }
        }
      }
      BOOL v15 = v35-- <= 0;
    }
    while (!v15);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = a2;
      do
      {
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7 > v6)
        {
          *(void *)uint64_t v7 = v6;
          *(void *)a1 = v8;
          uint64_t v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      uint64_t v5 = a3;
      goto LABEL_38;
    }
    uint64_t v9 = (uint64_t *)(a1 + 16);
    uint64_t v10 = a2;
    while (1)
    {
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 > *(void *)a1)
      {
        *(void *)uint64_t v10 = *(void *)a1;
        *(void *)a1 = v11;
        uint64_t v12 = *((void *)a1 + 1);
        if (v3 == 16)
        {
          uint64_t v13 = a1 + 8;
          uint64_t v14 = 1;
          if (v12 <= v11) {
            goto LABEL_26;
          }
        }
        else
        {
          BOOL v15 = v12 <= *v9;
          if (v12 >= *v9) {
            uint64_t v12 = *v9;
          }
          if (v15) {
            uint64_t v13 = a1 + 8;
          }
          else {
            uint64_t v13 = a1 + 16;
          }
          if (v15) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = 2;
          }
          if (v12 <= v11)
          {
LABEL_26:
            uint64_t v16 = a1;
            while (1)
            {
              *(void *)uint64_t v16 = v12;
              uint64_t v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v18 = (2 * v14) | 1;
              uint64_t v13 = &a1[8 * v18];
              uint64_t v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v17 = *((void *)v13 + 1);
                if (*(void *)v13 >= v17) {
                  uint64_t v12 = *((void *)v13 + 1);
                }
                if (*(void *)v13 <= v17) {
                  uint64_t v14 = v18;
                }
                else {
                  v13 += 8;
                }
                if (v12 > v11) {
                  break;
                }
              }
              else
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v14 = v18;
                if (*(void *)v13 > v11) {
                  break;
                }
              }
            }
            *(void *)uint64_t v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v19 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          uint64_t v26 = &v23[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(void *)int v23 = *(void *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        uint64_t v24 = *(void *)v26;
        uint64_t v25 = *((void *)v26 + 1);
        if (*(void *)v26 >= v25) {
          uint64_t v24 = *((void *)v26 + 1);
        }
        if (*(void *)v26 <= v25) {
          uint64_t v20 = v27;
        }
        else {
          v26 += 8;
        }
        *(void *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 == a2)
      {
        *(void *)uint64_t v26 = v21;
      }
      else
      {
        *(void *)uint64_t v26 = *(void *)a2;
        *(void *)a2 = v21;
        uint64_t v28 = v26 - a1 + 8;
        if (v28 >= 9)
        {
          unint64_t v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
          uint64_t v30 = &a1[8 * v29];
          uint64_t v31 = *(void *)v30;
          uint64_t v32 = *(void *)v26;
          if (*(void *)v30 > *(void *)v26)
          {
            do
            {
              *(void *)uint64_t v26 = v31;
              uint64_t v26 = v30;
              if (!v29) {
                break;
              }
              unint64_t v29 = (v29 - 1) >> 1;
              uint64_t v30 = &a1[8 * v29];
              uint64_t v31 = *(void *)v30;
            }
            while (*(void *)v30 > v32);
            *(void *)uint64_t v26 = v32;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v7 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  if (a4)
  {
    unint64_t v8 = __clz(a4);
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> v8;
    if (v8 == 61) {
      unint64_t v10 = 6;
    }
    else {
      unint64_t v10 = (0xFFFFFFFFFFFFFFFFLL >> v8) - (0x1FFFFFFFFFFFFFFFuLL >> v8);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 24) = v9;
    uint64_t v11 = (char *)operator new(v9 + 9 + 4 * v9);
    uint64_t v12 = &v11[v9 + 9];
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    memset(v11, 128, v9 + 8);
    v11[v9] = -1;
    *(void *)(a1 + 40) = v10;
    if (v5 == a3) {
      return a1;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (a2 == a3) {
      return a1;
    }
  }
  do
  {
    uint64_t v16 = 0;
    uint64_t v19 = *v5;
    unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v19));
    unint64_t v17 = (v20 >> 7) ^ (*(void *)a1 >> 12);
    uint64_t v21 = *(void *)(a1 + 24);
    while (1)
    {
      unint64_t v13 = v17 & v21;
      uint64_t v14 = *(void *)(*(void *)a1 + v13);
      unint64_t v15 = ((v14 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                          * (v20 & 0x7F))) & 0x8080808080808080;
      if (v15) {
        break;
      }
LABEL_12:
      if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v18 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert((uint64_t *)a1, v20);
        uint64_t v12 = *v7;
        *(_DWORD *)&(*v7)[4 * v18] = *v5;
        goto LABEL_15;
      }
      v16 += 8;
      unint64_t v17 = v16 + v13;
    }
    while (*(_DWORD *)&v12[4 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v21)] != v19)
    {
      v15 &= v15 - 1;
      if (!v15) {
        goto LABEL_12;
      }
    }
LABEL_15:
    ++v5;
  }
  while (v5 != a3);
  return a1;
}

void sub_23CCB14A8(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::HashtablezInfoHandle::~HashtablezInfoHandle(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB14BC(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

operations_research::sat::ImpliedBoundsProcessor *operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor(operations_research::sat::ImpliedBoundsProcessor *this, char **a2)
{
  uint64_t v4 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set((uint64_t)this, a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::raw_hash_set(v4 + 48, a2 + 6);
  long long v5 = *((_OWORD *)a2 + 6);
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 6) = v5;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v7 = a2[14];
  uint64_t v6 = a2[15];
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v8);
    *((void *)this + 14) = v9;
    *((void *)this + 15) = v9;
    *((void *)this + 16) = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, 12 * ((v8 - 12) / 0xCuLL) + 12);
    *((void *)this + 15) = &v9[12 * ((v8 - 12) / 0xCuLL) + 12];
  }
  return this;
}

void sub_23CCB162C(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB1640(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 120) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~flat_hash_map(v2);
  absl::lts_2020_02_25::flat_hash_set<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~flat_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::raw_hash_set(uint64_t a1, char **a2)
{
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a2[2];
  if (v4 == (char *)7)
  {
    unint64_t v5 = 8;
  }
  else
  {
    unint64_t v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5) {
      goto LABEL_5;
    }
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  if (**a2 <= -2)
  {
    do
    {
      unint64_t v8 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v7 = (void *)((char *)v7 + v8);
      v6 += 4 * v8;
    }
    while (*(char *)v7 < -1);
  }
  unint64_t v9 = &a2[3][(void)*a2];
  while (v7 != (void *)v9)
  {
    unint64_t v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v6)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v6));
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = *(void *)(a1 + 24);
    unint64_t v13 = ((v10 >> 7) ^ (*(void *)a1 >> 12)) & v12;
    unint64_t v14 = 0;
    for (unint64_t i = *(void *)(*(void *)a1 + v13) & (~*(void *)(*(void *)a1 + v13) << 7) & 0x8080808080808080;
          !i;
          unint64_t i = *(void *)&v11[v13] & (~*(void *)&v11[v13] << 7) & 0x8080808080808080)
    {
      v14 += 8;
      unint64_t v13 = (v14 + v13) & v12;
    }
    unint64_t v16 = (v13 + (__clz(__rbit64(i)) >> 3)) & v12;
    v11[v16] = v10 & 0x7F;
    *(unsigned char *)((*(void *)(a1 + 24) & 7) + *(void *)a1 + ((v16 - 8) & *(void *)(a1 + 24)) + 1) = v10 & 0x7F;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v16) = *(_DWORD *)v6;
    unint64_t v17 = *(atomic_ullong **)(a1 + 32);
    if (v17) {
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v17, v10, v14);
    }
    int v18 = *((char *)v7 + 1);
    uint64_t v7 = (void *)((char *)v7 + 1);
    v6 += 4;
    if (v18 <= -2)
    {
      do
      {
        unint64_t v19 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v7 = (void *)((char *)v7 + v19);
        v6 += 4 * v19;
      }
      while (*(char *)v7 < -1);
    }
  }
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_23CCB1918(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB192C(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::raw_hash_set(uint64_t a1, char **a2)
{
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a2[2];
  if (v4 == (char *)7)
  {
    unint64_t v5 = 8;
  }
  else
  {
    unint64_t v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5) {
      goto LABEL_5;
    }
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (**a2 > -2)
  {
    unint64_t v8 = *a2;
    uint64_t v11 = a2[3];
    unint64_t v10 = &v11[(void)v6];
    if (v6 == &v11[(void)v6]) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v8 = *a2;
    do
    {
      unint64_t v9 = (__clz(__rbit64(((*(void *)v8 >> 7) & ~*(void *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 += v9;
      v7 += 40 * v9;
    }
    while (*v8 < -1);
    unint64_t v10 = &a2[3][(void)v6];
    if (v8 == v10) {
      goto LABEL_20;
    }
  }
  do
  {
    unint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v7)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v7));
    unint64_t v13 = *(char **)a1;
    uint64_t v14 = *(void *)(a1 + 24);
    unint64_t v15 = ((v12 >> 7) ^ (*(void *)a1 >> 12)) & v14;
    unint64_t v16 = 0;
    for (unint64_t i = *(void *)(*(void *)a1 + v15) & (~*(void *)(*(void *)a1 + v15) << 7) & 0x8080808080808080;
          !i;
          unint64_t i = *(void *)&v13[v15] & (~*(void *)&v13[v15] << 7) & 0x8080808080808080)
    {
      v16 += 8;
      unint64_t v15 = (v16 + v15) & v14;
    }
    unint64_t v18 = (v15 + (__clz(__rbit64(i)) >> 3)) & v14;
    v13[v18] = v12 & 0x7F;
    *(unsigned char *)((*(void *)(a1 + 24) & 7) + *(void *)a1 + ((v18 - 8) & *(void *)(a1 + 24)) + 1) = v12 & 0x7F;
    uint64_t v19 = *(void *)(a1 + 8) + 40 * v18;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v7;
    long long v20 = *(_OWORD *)(v7 + 8);
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(v7 + 24);
    *(_OWORD *)(v19 + 8) = v20;
    uint64_t v21 = *(atomic_ullong **)(a1 + 32);
    if (v21) {
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v21, v12, v16);
    }
    int v22 = *++v8;
    v7 += 40;
    if (v22 <= -2)
    {
      do
      {
        unint64_t v23 = (__clz(__rbit64(((*(void *)v8 >> 7) & ~*(void *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v8 += v23;
        v7 += 40 * v23;
      }
      while (*v8 < -1);
    }
  }
  while (v8 != v10);
LABEL_20:
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_23CCB1BCC(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB1BE0(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    uint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 40 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v27 = a1[4];
    if (!v27) {
      return;
    }
LABEL_21:
    *((void *)v27 + 4) = v14 >> 3;
    *((void *)v27 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v21 = &v5[40 * (void)v13];
      unint64_t v22 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v21)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v21));
      unint64_t v23 = *a1;
      uint64_t v24 = a1[3];
      unint64_t v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v25 = (v15 + v25) & (unint64_t)v24;
          unint64_t v26 = *(void *)&v23[v25] & (~*(void *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      char v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = (uint64_t)&a1[1][40 * v16];
      long long v19 = *(_OWORD *)v21;
      long long v20 = *((_OWORD *)v21 + 1);
      *(void *)(v18 + 32) = *((void *)v21 + 4);
      *(_OWORD *)uint64_t v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v27 = a1[4];
  if (v27) {
    goto LABEL_21;
  }
}

void operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(operations_research::sat::ImpliedBoundsProcessor *this)
{
  unint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  if (*((void *)this + 9))
  {
    operator delete(*((void **)this + 6));
    *((void *)this + 11) = 0;
    *((void *)this + 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
  }
  if (*((void *)this + 3))
  {
    operator delete(*(void **)this);
    *((void *)this + 5) = 0;
    *(void *)this = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a4 - 12);
  uint64_t v7 = *(void *)(a2 - 12);
  if (v6 < v7 || v7 >= v6 && *(_DWORD *)(a4 - 4) < *(_DWORD *)(a2 - 4))
  {
    uint64_t v8 = *(void *)(a6 - 12);
    if (v8 < v6)
    {
      int v9 = *(_DWORD *)(a6 - 4);
LABEL_16:
      *(void *)(a2 - 12) = v8;
      *(void *)(a6 - 12) = v7;
      int v19 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v9;
      *(_DWORD *)(a6 - 4) = v19;
      return 1;
    }
    if (v6 >= v8)
    {
      int v9 = *(_DWORD *)(a6 - 4);
      int v13 = *(_DWORD *)(a4 - 4);
      if (v9 < v13) {
        goto LABEL_16;
      }
    }
    else
    {
      int v13 = *(_DWORD *)(a4 - 4);
    }
    *(void *)(a2 - 12) = v6;
    *(void *)(a4 - 12) = v7;
    int v20 = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = v13;
    *(_DWORD *)(a4 - 4) = v20;
    uint64_t v21 = *(void *)(a6 - 12);
    if (v21 >= v7)
    {
      if (v7 < v21) {
        return 1;
      }
      int v22 = *(_DWORD *)(a6 - 4);
      if (v22 >= v20) {
        return 1;
      }
    }
    else
    {
      int v22 = *(_DWORD *)(a6 - 4);
    }
    *(void *)(a4 - 12) = v21;
    *(void *)(a6 - 12) = v7;
    *(_DWORD *)(a4 - 4) = v22;
    uint64_t result = 2;
    *(_DWORD *)(a6 - 4) = v20;
    return result;
  }
  uint64_t v10 = *(void *)(a6 - 12);
  if (v10 >= v6)
  {
    if (v6 < v10) {
      return 0;
    }
    int v12 = *(_DWORD *)(a6 - 4);
    int v11 = *(_DWORD *)(a4 - 4);
    if (v12 >= v11) {
      return 0;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a4 - 4);
    int v12 = *(_DWORD *)(a6 - 4);
  }
  *(void *)(a4 - 12) = v10;
  *(void *)(a6 - 12) = v6;
  *(_DWORD *)(a4 - 4) = v12;
  *(_DWORD *)(a6 - 4) = v11;
  uint64_t v14 = *(void *)(a4 - 12);
  uint64_t v15 = *(void *)(a2 - 12);
  if (v14 < v15)
  {
    int v16 = *(_DWORD *)(a2 - 4);
    int v17 = *(_DWORD *)(a4 - 4);
LABEL_14:
    *(void *)(a2 - 12) = v14;
    *(void *)(a4 - 12) = v15;
    *(_DWORD *)(a2 - 4) = v17;
    uint64_t result = 2;
    *(_DWORD *)(a4 - 4) = v16;
    return result;
  }
  if (v15 >= v14)
  {
    int v17 = *(_DWORD *)(a4 - 4);
    int v16 = *(_DWORD *)(a2 - 4);
    if (v17 < v16) {
      goto LABEL_14;
    }
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *i)
{
  unint64_t v5 = a2 - 12;
  uint64_t v4 = *(void *)(a2 - 12);
  int v6 = *(_DWORD *)(a2 - 4);
  uint64_t v7 = *i;
  if (v4 >= *i && (v7 < v4 || v6 >= *((_DWORD *)i + 2)))
  {
    while (v5 > (unint64_t)i)
    {
      uint64_t v19 = *(void *)(v5 - 12);
      if (v4 < v19 || v19 >= v4 && v6 < *(_DWORD *)(v5 - 4)) {
        break;
      }
      v5 -= 12;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a2 - 24);
    if (v4 >= v8)
    {
      int v9 = (uint64_t *)(a2 - 36);
      do
      {
        if (v8 >= v4 && v6 < *((_DWORD *)v9 + 5)) {
          break;
        }
        uint64_t v10 = *v9;
        int v9 = (uint64_t *)((char *)v9 - 12);
        uint64_t v8 = v10;
      }
      while (v4 >= v10);
      unint64_t v5 = (unint64_t)(v9 + 3);
    }
  }
  if (v5 > (unint64_t)i)
  {
    for (uint64_t i = (uint64_t *)((char *)i + 12); v4 < v7 || v7 >= v4 && v6 < *((_DWORD *)i - 1); uint64_t i = (uint64_t *)((char *)i + 12))
    {
      uint64_t v11 = *i;
      uint64_t v7 = v11;
    }
  }
  if ((unint64_t)i >= v5)
  {
    unint64_t v12 = v5;
  }
  else
  {
    unint64_t v12 = v5;
    do
    {
      uint64_t v13 = *(void *)(v12 - 12);
      v12 -= 12;
      *(void *)unint64_t v12 = *(uint64_t *)((char *)i - 12);
      *(uint64_t *)((char *)i - 12) = v13;
      int v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *((_DWORD *)i - 1);
      *((_DWORD *)i - 1) = v14;
      uint64_t v15 = *(void *)(v12 - 12);
      if (v4 >= v15)
      {
        int v16 = (uint64_t *)(v5 - 36);
        do
        {
          if (v15 >= v4 && v6 < *((_DWORD *)v16 + 5)) {
            break;
          }
          uint64_t v17 = *v16;
          int v16 = (uint64_t *)((char *)v16 - 12);
          uint64_t v15 = v17;
        }
        while (v4 >= v17);
        unint64_t v12 = (unint64_t)(v16 + 3);
      }
      do
      {
        do
        {
          uint64_t i = (uint64_t *)((char *)i + 12);
          uint64_t v18 = *(uint64_t *)((char *)i - 12);
        }
        while (v4 < v18);
      }
      while (v18 >= v4 && v6 < *((_DWORD *)i - 1));
      unint64_t v5 = v12;
    }
    while ((unint64_t)i < v12);
  }
  if (v12 + 12 != a2)
  {
    *(void *)(a2 - 12) = *(void *)v12;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(v12 + 8);
  }
  *(void *)unint64_t v12 = v4;
  *(_DWORD *)(v12 + 8) = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::__less<void,void> &>(uint64_t a1@<X1>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 - 12);
  int v5 = *(_DWORD *)(a1 - 4);
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + v3 - 24);
    if (v6 >= v4 && (v4 < v6 || *(_DWORD *)(a1 + v3 - 16) >= v5)) {
      break;
    }
    v3 -= 12;
  }
  unint64_t v7 = a1 + v3 - 12;
  if (v3)
  {
    do
    {
      uint64_t v9 = *a2;
      a2 = (void *)((char *)a2 + 12);
      uint64_t v8 = v9;
    }
    while (v9 >= v4 && (v4 < v8 || *((_DWORD *)a2 - 1) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      uint64_t v11 = *a2;
      a2 = (void *)((char *)a2 + 12);
      uint64_t v10 = v11;
      if (v11 < v4) {
        break;
      }
      if (v4 < v10)
      {
        if ((unint64_t)a2 >= v7) {
          break;
        }
      }
      else if (*((_DWORD *)a2 - 1) < v5 || (unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  unint64_t v13 = v7;
  if ((unint64_t)a2 < v7)
  {
    int v14 = a2;
    do
    {
      uint64_t v15 = *(void *)(v13 - 12);
      v13 -= 12;
      *(void *)unint64_t v13 = *(void *)((char *)v14 - 12);
      *(void *)((char *)v14 - 12) = v15;
      int v16 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v14 - 1);
      *((_DWORD *)v14 - 1) = v16;
      while (1)
      {
        uint64_t v17 = *(void *)(v13 - 12);
        if (v17 >= v4 && (v4 < v17 || *(_DWORD *)(v13 - 4) >= v5)) {
          break;
        }
        v13 -= 12;
      }
      do
      {
        uint64_t v19 = *v14;
        int v14 = (void *)((char *)v14 + 12);
        uint64_t v18 = v19;
      }
      while (v19 >= v4 && (v4 < v18 || *((_DWORD *)v14 - 1) >= v5));
    }
    while ((unint64_t)v14 < v13);
  }
  unint64_t v20 = v13 + 12;
  if (v13 + 12 != a1)
  {
    *(void *)(a1 - 12) = *(void *)v13;
    *(_DWORD *)(a1 - 4) = *(_DWORD *)(v13 + 8);
  }
  *(void *)unint64_t v13 = v4;
  *(_DWORD *)(v13 + 8) = v5;
  *(void *)a3 = v20;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a4) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      uint64_t v21 = *a4;
      uint64_t v22 = *(void *)(a2 - 12);
      if (*a4 >= v22)
      {
        if (v22 < v21) {
          return 1;
        }
        int v24 = *((_DWORD *)a4 + 2);
        int v23 = *(_DWORD *)(a2 - 4);
        if (v24 >= v23) {
          return 1;
        }
      }
      else
      {
        int v23 = *(_DWORD *)(a2 - 4);
        int v24 = *((_DWORD *)a4 + 2);
      }
      *(void *)(a2 - 12) = v21;
      *a4 = v22;
      *(_DWORD *)(a2 - 4) = v24;
      *((_DWORD *)a4 + 2) = v23;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a3, (uint64_t)a4 + 12);
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
      uint64_t v25 = *a4;
      uint64_t v26 = *(void *)(a2 - 36);
      if (*a4 >= v26)
      {
        if (v26 < v25) {
          return 1;
        }
        int v28 = *((_DWORD *)a4 + 2);
        int v27 = *(_DWORD *)(a2 - 28);
        if (v28 >= v27) {
          return 1;
        }
      }
      else
      {
        int v27 = *(_DWORD *)(a2 - 28);
        int v28 = *((_DWORD *)a4 + 2);
      }
      *(void *)(a2 - 36) = v25;
      *a4 = v26;
      *(_DWORD *)(a2 - 28) = v28;
      *((_DWORD *)a4 + 2) = v27;
      uint64_t v29 = *(void *)(a2 - 36);
      uint64_t v30 = *(void *)(a2 - 24);
      if (v29 >= v30)
      {
        if (v30 < v29) {
          return 1;
        }
        int v32 = *(_DWORD *)(a2 - 28);
        int v31 = *(_DWORD *)(a2 - 16);
        if (v32 >= v31) {
          return 1;
        }
      }
      else
      {
        int v31 = *(_DWORD *)(a2 - 16);
        int v32 = *(_DWORD *)(a2 - 28);
      }
      *(void *)(a2 - 24) = v29;
      *(void *)(a2 - 36) = v30;
      *(_DWORD *)(a2 - 16) = v32;
      *(_DWORD *)(a2 - 28) = v31;
      uint64_t v33 = *(void *)(a2 - 12);
      if (v29 < v33)
      {
        int v34 = *(_DWORD *)(a2 - 4);
LABEL_31:
        *(void *)(a2 - 12) = v29;
        *(void *)(a2 - 24) = v33;
        *(_DWORD *)(a2 - 4) = v32;
        *(_DWORD *)(a2 - 16) = v34;
        return 1;
      }
      if (v33 >= v29)
      {
        int v34 = *(_DWORD *)(a2 - 4);
        if (v32 < v34) {
          goto LABEL_31;
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24, a2 - 36, a2 - 36, a3, (uint64_t)a4 + 12);
      return 1;
    default:
      uint64_t v7 = a2 - 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a2 - 12, a2 - 12, a2 - 24, a2 - 24);
      uint64_t v9 = a2 - 36;
      if ((uint64_t *)(a2 - 36) == a4) {
        goto LABEL_34;
      }
      uint64_t v8 = 0;
      int v10 = 0;
      uint64_t v11 = a2 - 36;
      while (2)
      {
        uint64_t v13 = *(void *)(v11 - 12);
        v11 -= 12;
        uint64_t v12 = v13;
        uint64_t v14 = *(void *)(v7 - 12);
        if (v13 >= v14)
        {
          if (v14 < v12) {
            goto LABEL_7;
          }
          int v15 = *(_DWORD *)(v9 - 4);
          int v16 = *(_DWORD *)(v7 - 4);
          if (v15 >= v16) {
            goto LABEL_7;
          }
        }
        else
        {
          int v15 = *(_DWORD *)(v9 - 4);
          int v16 = *(_DWORD *)(v7 - 4);
        }
        *(void *)(v9 - 12) = v14;
        *(_DWORD *)(v9 - 4) = v16;
        if (v7 == a2)
        {
LABEL_5:
          uint64_t v7 = a2;
          goto LABEL_6;
        }
        uint64_t v17 = v8;
        while (2)
        {
          uint64_t v20 = *(void *)(a2 + v17 - 24);
          if (v12 < v20)
          {
            int v18 = *(_DWORD *)(a2 + v17 - 16);
LABEL_13:
            v7 += 12;
            uint64_t v19 = a2 + v17;
            *(void *)(v19 - 36) = v20;
            *(_DWORD *)(v19 - 28) = v18;
            v17 += 12;
            if (v17 == 24) {
              goto LABEL_5;
            }
            continue;
          }
          break;
        }
        if (v20 < v12) {
          goto LABEL_6;
        }
        int v18 = *(_DWORD *)(a2 + v17 - 16);
        if (v15 < v18) {
          goto LABEL_13;
        }
        uint64_t v7 = a2 + v17 - 24;
LABEL_6:
        *(void *)(v7 - 12) = v12;
        *(_DWORD *)(v7 - 4) = v15;
        if (++v10 == 8)
        {
          int v35 = 0;
          LODWORD(v8) = v11 == (void)a4;
        }
        else
        {
LABEL_7:
          v8 -= 12;
          uint64_t v7 = v9;
          uint64_t v9 = v11;
          if ((uint64_t *)v11 != a4) {
            continue;
          }
LABEL_34:
          int v35 = 1;
        }
        return (v35 | v8) & 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, a4, a5, a6);
  uint64_t v15 = *(void *)(a8 - 12);
  uint64_t v16 = *(void *)(a6 - 12);
  if (v15 >= v16)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v18 = *(_DWORD *)(a8 - 4);
    int v17 = *(_DWORD *)(a6 - 4);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a6 - 4);
    int v18 = *(_DWORD *)(a8 - 4);
  }
  *(void *)(a6 - 12) = v15;
  *(void *)(a8 - 12) = v16;
  *(_DWORD *)(a6 - 4) = v18;
  *(_DWORD *)(a8 - 4) = v17;
  uint64_t v19 = *(void *)(a6 - 12);
  uint64_t v20 = *(void *)(a4 - 12);
  if (v19 >= v20)
  {
    if (v20 < v19) {
      goto LABEL_16;
    }
    int v22 = *(_DWORD *)(a6 - 4);
    int v21 = *(_DWORD *)(a4 - 4);
    if (v22 >= v21) {
      goto LABEL_16;
    }
  }
  else
  {
    int v21 = *(_DWORD *)(a4 - 4);
    int v22 = *(_DWORD *)(a6 - 4);
  }
  *(void *)(a4 - 12) = v19;
  *(void *)(a6 - 12) = v20;
  *(_DWORD *)(a4 - 4) = v22;
  *(_DWORD *)(a6 - 4) = v21;
  uint64_t v23 = *(void *)(a4 - 12);
  uint64_t v24 = *(void *)(a2 - 12);
  if (v23 < v24)
  {
    int v25 = *(_DWORD *)(a2 - 4);
    int v26 = *(_DWORD *)(a4 - 4);
LABEL_7:
    *(void *)(a2 - 12) = v23;
    *(void *)(a4 - 12) = v24;
    *(_DWORD *)(a2 - 4) = v26;
    *(_DWORD *)(a4 - 4) = v25;
    goto LABEL_16;
  }
  if (v24 >= v23)
  {
    int v26 = *(_DWORD *)(a4 - 4);
    int v25 = *(_DWORD *)(a2 - 4);
    if (v26 < v25) {
      goto LABEL_7;
    }
  }
LABEL_16:
  uint64_t v27 = *(void *)(a10 - 12);
  uint64_t v28 = *(void *)(a8 - 12);
  if (v27 >= v28)
  {
    if (v28 < v27) {
      return result;
    }
    int v30 = *(_DWORD *)(a10 - 4);
    int v29 = *(_DWORD *)(a8 - 4);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a8 - 4);
    int v30 = *(_DWORD *)(a10 - 4);
  }
  *(void *)(a8 - 12) = v27;
  *(void *)(a10 - 12) = v28;
  *(_DWORD *)(a8 - 4) = v30;
  *(_DWORD *)(a10 - 4) = v29;
  uint64_t v31 = *(void *)(a8 - 12);
  uint64_t v32 = *(void *)(a6 - 12);
  if (v31 >= v32)
  {
    if (v32 < v31) {
      return result;
    }
    int v34 = *(_DWORD *)(a8 - 4);
    int v33 = *(_DWORD *)(a6 - 4);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a6 - 4);
    int v34 = *(_DWORD *)(a8 - 4);
  }
  *(void *)(a6 - 12) = v31;
  *(void *)(a8 - 12) = v32;
  *(_DWORD *)(a6 - 4) = v34;
  *(_DWORD *)(a8 - 4) = v33;
  uint64_t v35 = *(void *)(a6 - 12);
  uint64_t v36 = *(void *)(a4 - 12);
  if (v35 >= v36)
  {
    if (v36 < v35) {
      return result;
    }
    int v38 = *(_DWORD *)(a6 - 4);
    int v37 = *(_DWORD *)(a4 - 4);
    if (v38 >= v37) {
      return result;
    }
  }
  else
  {
    int v37 = *(_DWORD *)(a4 - 4);
    int v38 = *(_DWORD *)(a6 - 4);
  }
  *(void *)(a4 - 12) = v35;
  *(void *)(a6 - 12) = v36;
  *(_DWORD *)(a4 - 4) = v38;
  *(_DWORD *)(a6 - 4) = v37;
  uint64_t v39 = *(void *)(a4 - 12);
  uint64_t v40 = *(void *)(a2 - 12);
  if (v39 < v40)
  {
    int v41 = *(_DWORD *)(a2 - 4);
    int v42 = *(_DWORD *)(a4 - 4);
LABEL_24:
    *(void *)(a2 - 12) = v39;
    *(void *)(a4 - 12) = v40;
    *(_DWORD *)(a2 - 4) = v42;
    *(_DWORD *)(a4 - 4) = v41;
    return result;
  }
  if (v40 >= v39)
  {
    int v42 = *(_DWORD *)(a4 - 4);
    int v41 = *(_DWORD *)(a2 - 4);
    if (v42 < v41) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2 - a4;
  if (a2 == a4) {
    return a5;
  }
  uint64_t v10 = a4;
  if (v8 >= 13)
  {
    unint64_t v14 = (unint64_t)(v8 / 12 - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = a2 - 12 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a7, v8 / 12, v16, v16);
      v16 += 12;
      --v15;
    }
    while (v15);
  }
  if (v10 != a6)
  {
    uint64_t v17 = v10;
    uint64_t v18 = v10;
    do
    {
      uint64_t v22 = *(void *)(v18 - 12);
      v18 -= 12;
      uint64_t v21 = v22;
      uint64_t v23 = *(void *)(a2 - 12);
      if (v22 < v23)
      {
        int v19 = *(_DWORD *)(v17 - 4);
        int v20 = *(_DWORD *)(a2 - 4);
      }
      else
      {
        if (v23 < v21) {
          goto LABEL_9;
        }
        int v19 = *(_DWORD *)(v17 - 4);
        int v20 = *(_DWORD *)(a2 - 4);
        if (v19 >= v20) {
          goto LABEL_9;
        }
      }
      *(void *)(v17 - 12) = v23;
      *(void *)(a2 - 12) = v21;
      *(_DWORD *)(v17 - 4) = v20;
      *(_DWORD *)(a2 - 4) = v19;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a7, v8 / 12, a1, a2);
LABEL_9:
      uint64_t v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 13)
  {
    unint64_t v24 = v8 / 0xCuLL;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(a1, a2, a3, v10, a7, v24);
      v10 += 12;
    }
    while (v24-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int64_t v6 = (unint64_t)(a4 - 2) >> 1;
    if (v6 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a2 - a6) >> 2)))
    {
      uint64_t v7 = (0x5555555555555556 * ((a2 - a6) >> 2)) | 1;
      uint64_t v8 = a2 - 12 * v7;
      if (0x5555555555555556 * ((a2 - a6) >> 2) + 2 < a4)
      {
        uint64_t v9 = *(void *)(v8 - 12);
        uint64_t v10 = *(void *)(v8 - 24);
        if (v9 < v10 || v10 >= v9 && *(_DWORD *)(v8 - 4) < *(_DWORD *)(v8 - 16))
        {
          v8 -= 12;
          uint64_t v7 = 0x5555555555555556 * ((a2 - a6) >> 2) + 2;
        }
      }
      uint64_t v11 = *(void *)(v8 - 12);
      uint64_t v12 = *(void *)(a6 - 12);
      if (v11 >= v12)
      {
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(v8 - 4);
          int v13 = *(_DWORD *)(a6 - 4);
          if (v14 < v13) {
            return;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(a6 - 4);
          int v14 = *(_DWORD *)(v8 - 4);
        }
        *(void *)(a6 - 12) = v11;
        *(_DWORD *)(a6 - 4) = v14;
        if (v6 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = a2 - 12 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a4)
            {
              uint64_t v18 = *(void *)(v15 - 12);
              uint64_t v19 = *(void *)(v15 - 24);
              if (v18 < v19 || v19 >= v18 && *(_DWORD *)(v15 - 4) < *(_DWORD *)(v15 - 16))
              {
                v15 -= 12;
                uint64_t v7 = v17;
              }
            }
            uint64_t v20 = *(void *)(v15 - 12);
            if (v20 < v12) {
              break;
            }
            int v21 = *(_DWORD *)(v15 - 4);
            if (v12 >= v20 && v21 < v13) {
              break;
            }
            *(void *)(v8 - 12) = v20;
            *(_DWORD *)(v8 - 4) = v21;
            uint64_t v8 = v15;
            if (v6 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(void *)(v15 - 12) = v12;
        *(_DWORD *)(v15 - 4) = v13;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::reverse_iterator<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 - 12);
    int v8 = *(_DWORD *)(a2 - 4);
    uint64_t v9 = a2;
    do
    {
      uint64_t v10 = v9;
      v9 += 12 * ~v6;
      uint64_t v11 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v12 = v11 + 2;
      if (v12 < a6)
      {
        uint64_t v13 = *(void *)(v9 - 12);
        uint64_t v14 = *(void *)(v9 - 24);
        if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v9 - 4) < *(_DWORD *)(v9 - 16))
        {
          v9 -= 12;
          uint64_t v6 = v12;
        }
      }
      *(void *)(v10 - 12) = *(void *)(v9 - 12);
      *(_DWORD *)(v10 - 4) = *(_DWORD *)(v9 - 4);
    }
    while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
    if (v9 == a4 + 12)
    {
      *(void *)(v9 - 12) = v7;
      *(_DWORD *)(v9 - 4) = v8;
      return;
    }
    uint64_t v15 = (uint64_t *)(v9 - 12);
    *(void *)(v9 - 12) = *(void *)a4;
    *(_DWORD *)(v9 - 4) = *(_DWORD *)(a4 + 8);
    *(void *)a4 = v7;
    *(_DWORD *)(a4 + 8) = v8;
    uint64_t v16 = a2 - (v9 - 12);
    if (v16 >= 13)
    {
      unint64_t v17 = v16 / 0xCuLL - 2;
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = a2 - 12 * (v17 >> 1);
      uint64_t v20 = *(void *)(v19 - 12);
      uint64_t v21 = *v15;
      if (v20 >= *v15)
      {
        if (v21 < v20) {
          return;
        }
        int v23 = *(_DWORD *)(v19 - 4);
        int v22 = *(_DWORD *)(v9 - 4);
        if (v23 >= v22) {
          return;
        }
      }
      else
      {
        int v22 = *(_DWORD *)(v9 - 4);
        int v23 = *(_DWORD *)(v19 - 4);
      }
      *(void *)(v9 - 12) = v20;
      *(_DWORD *)(v9 - 4) = v23;
      if (v17 >= 2)
      {
        while (1)
        {
          unint64_t v26 = v18 - 1;
          unint64_t v18 = (v18 - 1) >> 1;
          uint64_t v24 = a2 - 12 * v18;
          uint64_t v27 = *(void *)(v24 - 12);
          if (v27 < v21)
          {
            int v25 = *(_DWORD *)(v24 - 4);
          }
          else
          {
            if (v21 < v27) {
              break;
            }
            int v25 = *(_DWORD *)(v24 - 4);
            if (v25 >= v22) {
              break;
            }
          }
          *(void *)(v19 - 12) = v27;
          *(_DWORD *)(v19 - 4) = v25;
          uint64_t v19 = a2 - 12 * v18;
          if (v26 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v24 = v19;
LABEL_19:
      *(void *)(v24 - 12) = v21;
      *(_DWORD *)(v24 - 4) = v22;
    }
  }
}

uint64_t std::vector<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>,std::__wrap_iter<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>*>>(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 12;
  uint64_t v7 = (uint64_t)*a1 + 12 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v12 = (uint64_t *)a1[1];
  uint64_t v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 2)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 2)) >= a5)
    {
      unint64_t v18 = (uint64_t *)((char *)a3 + 12 * a5);
      uint64_t v19 = (char *)a1[1];
    }
    else
    {
      unint64_t v18 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
      uint64_t v19 = (char *)a1[1];
      if (v18 != a4)
      {
        uint64_t v20 = (uint64_t *)((char *)a3 + 4 * (((uint64_t)v12 - v7) >> 2));
        uint64_t v21 = a1[1];
        do
        {
          uint64_t v22 = *v20;
          v21[2] = *((_DWORD *)v20 + 2);
          *(void *)uint64_t v21 = v22;
          v21 += 3;
          uint64_t v20 = (uint64_t *)((char *)v20 + 12);
          v19 += 12;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)v12 - v7 < 1) {
        return v7;
      }
    }
    uint64_t v23 = v7 + 12 * a5;
    uint64_t v24 = (uint64_t *)&v19[-12 * a5];
    int v25 = v19;
    if (v24 < v12)
    {
      int v25 = v19;
      do
      {
        uint64_t v26 = *v24;
        *((_DWORD *)v25 + 2) = *((_DWORD *)v24 + 2);
        *(void *)int v25 = v26;
        v25 += 12;
        uint64_t v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 < v12);
    }
    a1[1] = v25;
    if (v19 != (char *)v23)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v23] >> 2);
      uint64_t v28 = v19 - 4;
      uint64_t v29 = 12 * v27;
      do
      {
        *((void *)v28 - 1) = *(void *)(v7 + v29 - 12);
        *(_DWORD *)uint64_t v28 = *(_DWORD *)(v7 + v29 - 4);
        v28 -= 12;
        v29 -= 12;
      }
      while (v29);
    }
    if (v18 != a3)
    {
      uint64_t v30 = v7;
      do
      {
        *(void *)uint64_t v30 = *v9;
        *(_DWORD *)(v30 + 8) = *((_DWORD *)v9 + 2);
        uint64_t v9 = (uint64_t *)((char *)v9 + 12);
        v30 += 12;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 2);
  if (v13 > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 2);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v16 = 0x1555555555555555;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = (char *)operator new(12 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  uint64_t v31 = &v17[12 * v6];
  uint64_t v32 = 12 * a5;
  int v33 = &v31[12 * a5];
  int v34 = v31;
  do
  {
    uint64_t v35 = *v9;
    *((_DWORD *)v34 + 2) = *((_DWORD *)v9 + 2);
    *(void *)int v34 = v35;
    v34 += 12;
    uint64_t v9 = (uint64_t *)((char *)v9 + 12);
    v32 -= 12;
  }
  while (v32);
  uint64_t v36 = *a1;
  int v37 = v31;
  if (*a1 != (void *)v7)
  {
    uint64_t v38 = v7;
    int v37 = v31;
    do
    {
      uint64_t v39 = *(void *)(v38 - 12);
      v38 -= 12;
      int v40 = *(_DWORD *)(v38 + 8);
      *(void *)(v37 - 12) = v39;
      v37 -= 12;
      *((_DWORD *)v37 + 2) = v40;
    }
    while ((void *)v38 != v36);
    uint64_t v12 = (uint64_t *)a1[1];
  }
  for (uint64_t i = &v17[12 * v16]; (uint64_t *)v7 != v12; v7 += 12)
  {
    uint64_t v42 = *(void *)v7;
    *((_DWORD *)v33 + 2) = *(_DWORD *)(v7 + 8);
    *(void *)int v33 = v42;
    v33 += 12;
  }
  uint64_t v43 = *a1;
  *a1 = v37;
  a1[1] = v33;
  a1[2] = i;
  if (v43) {
    operator delete(v43);
  }
  return (uint64_t)v31;
}

double *std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *result, double *a2, double *a3)
{
  while (a3 != a2)
  {
    unint64_t v3 = a3 - result;
    if (v3 < 2) {
      break;
    }
    if (v3 == 3)
    {
      double v38 = *result;
      double v39 = result[1];
      double v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          double v50 = *result;
          double v49 = result[1];
          if (v49 < *result)
          {
            void *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        void *result = v39;
        result[1] = v38;
        double v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        void *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      double v36 = *(a3 - 1);
      double v37 = *result;
      if (v36 < *result)
      {
        void *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        int v41 = result++;
        if (v41 != a3 && result != a3)
        {
          double v42 = *v41;
          double v43 = *v41;
          uint64_t v44 = result;
          uint64_t v45 = v41;
          uint64_t v46 = result;
          do
          {
            double v47 = *v46++;
            double v48 = v47;
            if (v47 < v43)
            {
              double v43 = v48;
              uint64_t v45 = v44;
            }
            uint64_t v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            double *v41 = *v45;
            *uint64_t v45 = v42;
          }
        }
      }
      return result;
    }
    uint64_t v4 = &result[v3 >> 1];
    int v5 = a3 - 1;
    double v6 = *(a3 - 1);
    double v7 = *v4;
    double v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        int v9 = 0;
        double v10 = *result;
        double v11 = *v4;
        if (*result >= *v4) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
      double *v4 = v6;
      *int v5 = v7;
      double v21 = *result;
      if (*v4 < *result)
      {
        void *result = *v4;
        double *v4 = v21;
        int v9 = 2;
        double v10 = *result;
        double v11 = *v4;
        if (*result >= *v4) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
LABEL_49:
      int v9 = 1;
      double v10 = *result;
      double v11 = *v4;
      if (*result >= *v4) {
        goto LABEL_27;
      }
LABEL_9:
      uint64_t v12 = a3 - 1;
      unint64_t v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        unint64_t v18 = v13;
      }
      else
      {
LABEL_10:
        unint64_t v14 = v13;
        while (1)
        {
          double v15 = *v4;
          do
          {
            double v16 = *v14++;
            double v17 = v16;
          }
          while (v16 < v15);
          unint64_t v18 = v14 - 1;
          do
          {
            double v19 = *--v12;
            double v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12) {
            break;
          }
          *unint64_t v18 = v20;
          double *v12 = v17;
          ++v9;
          if (v18 == v4) {
            uint64_t v4 = v12;
          }
        }
      }
      if (v18 != v4)
      {
        double v22 = *v18;
        if (*v4 < *v18)
        {
          *unint64_t v18 = *v4;
          double *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2) {
        return result;
      }
      if (!v9)
      {
        if (v18 <= a2)
        {
          unint64_t v27 = v18 + 1;
          while (v27 != a3)
          {
            double v29 = *(v27 - 1);
            double v28 = *v27++;
            if (v28 < v29) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          while (v13 != v18)
          {
            double v24 = *(v13 - 1);
            double v23 = *v13++;
            if (v23 < v24) {
              goto LABEL_37;
            }
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2) {
        uint64_t result = v18 + 1;
      }
      else {
        a3 = v18;
      }
    }
    else
    {
      if (v6 >= v7)
      {
        void *result = v7;
        double *v4 = v8;
        if (*v5 < v8)
        {
          double *v4 = *v5;
          *int v5 = v8;
          int v9 = 2;
          double v10 = *result;
          double v11 = *v4;
          if (*result >= *v4) {
            goto LABEL_27;
          }
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      void *result = v6;
      *int v5 = v8;
      int v9 = 1;
      double v10 = *result;
      double v11 = *v4;
      if (*result < *v4) {
        goto LABEL_9;
      }
LABEL_27:
      uint64_t v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          void *result = *v12;
          double *v12 = v10;
          ++v9;
          unint64_t v13 = result + 1;
          if (result + 1 < v12) {
            goto LABEL_10;
          }
          goto LABEL_31;
        }
      }
      int v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5) {
          return result;
        }
        while (1)
        {
          double v26 = *v25;
          if (v10 < *v25) {
            break;
          }
          if (++v25 == v5) {
            return result;
          }
        }
        *v25++ = *v5;
        *int v5 = v26;
      }
      if (v25 == v5) {
        return result;
      }
      while (1)
      {
        double v30 = *result;
        do
        {
          double v31 = *v25++;
          double v32 = v31;
        }
        while (v30 >= v31);
        int v33 = v25 - 1;
        do
        {
          double v34 = *--v5;
          double v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5) {
          break;
        }
        *int v33 = v35;
        *int v5 = v32;
      }
      uint64_t result = v25 - 1;
      if (v33 > a2) {
        return result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  while (2)
  {
    unint64_t v13 = a2 - 1;
    int v120 = a2 - 2;
    unint64_t v14 = a2 - 3;
    double v15 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v15;
          uint64_t v16 = (char *)a2 - (char *)v15;
          unint64_t v17 = a2 - v15;
          if (v7 || !v6)
          {
            switch(v17)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v83 = a2[-1].n128_f64[0];
                int v82 = a2 - 1;
                if (v83 * v15->n128_f64[1] > v15->n128_f64[0] * v82->n128_f64[1])
                {
                  __n128 v140 = *v15;
                  *double v15 = *v82;
                  __n128 *v82 = v140;
                }
                return;
              case 3uLL:
                uint64_t v84 = v15 + 1;
                double v85 = v15[1].n128_f64[0];
                uint64_t v86 = a2 - 1;
                double v87 = v85 * v15->n128_f64[1];
                double v88 = v15[1].n128_f64[1];
                double v89 = v88 * a2[-1].n128_f64[0];
                double v90 = v85 * a2[-1].n128_f64[1];
                if (v87 <= v15->n128_f64[0] * v88)
                {
                  if (v89 > v90)
                  {
                    __n128 v112 = *v84;
                    *uint64_t v84 = *v86;
                    *uint64_t v86 = v112;
                    if (v15[1].n128_f64[0] * v15->n128_f64[1] > v15->n128_f64[0] * v15[1].n128_f64[1])
                    {
                      __n128 v143 = *v15;
                      *double v15 = *v84;
                      *uint64_t v84 = v143;
                    }
                  }
                }
                else
                {
                  if (v89 <= v90)
                  {
                    __n128 v144 = *v15;
                    *double v15 = *v84;
                    *uint64_t v84 = v144;
                    if (a2[-1].n128_f64[0] * v15[1].n128_f64[1] <= v15[1].n128_f64[0] * a2[-1].n128_f64[1]) {
                      return;
                    }
                    __n128 v91 = *v84;
                    *uint64_t v84 = *v86;
                  }
                  else
                  {
                    __n128 v141 = *v15;
                    *double v15 = *v86;
                    __n128 v91 = v141;
                  }
                  *uint64_t v86 = v91;
                }
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v15, v15[1].n128_f64, v15[2].n128_f64, a2[-1].n128_f64, a6);
                return;
              case 5uLL:
                uint64_t v92 = v15 + 1;
                uint64_t v93 = v15 + 2;
                uint64_t v94 = v15 + 3;
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v15, v15[1].n128_f64, v15[2].n128_f64, v15[3].n128_f64, a6);
                double v96 = a2[-1].n128_f64[0];
                uint64_t v95 = a2 - 1;
                if (v96 * v15[3].n128_f64[1] > v15[3].n128_f64[0] * v95->n128_f64[1])
                {
                  __n128 v97 = *v94;
                  *uint64_t v94 = *v95;
                  *uint64_t v95 = v97;
                  if (v15[3].n128_f64[0] * v15[2].n128_f64[1] > v15[2].n128_f64[0] * v15[3].n128_f64[1])
                  {
                    __n128 v98 = *v93;
                    __n128 *v93 = *v94;
                    *uint64_t v94 = v98;
                    if (v15[2].n128_f64[0] * v15[1].n128_f64[1] > v15[1].n128_f64[0] * v15[2].n128_f64[1])
                    {
                      __n128 v99 = *v92;
                      *uint64_t v92 = *v93;
                      __n128 *v93 = v99;
                      if (v15[1].n128_f64[0] * v15->n128_f64[1] > v15->n128_f64[0] * v15[1].n128_f64[1])
                      {
                        __n128 v142 = *v15;
                        *double v15 = *v92;
                        *uint64_t v92 = v142;
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v16 <= 383)
          {
            uint64_t v100 = v15 + 1;
            BOOL v102 = v15 == a2 || v100 == a2;
            if (a5)
            {
              if (!v102)
              {
                uint64_t v103 = 0;
                BOOL v104 = (double *)v15;
                do
                {
                  double v107 = *v104;
                  double v106 = v104[1];
                  double v109 = v104[2];
                  double v108 = v104[3];
                  BOOL v104 = (double *)v100;
                  if (v109 * v106 > v107 * v108)
                  {
                    uint64_t v110 = v103;
                    do
                    {
                      uint64_t v111 = (double *)((char *)v15->n128_f64 + v110);
                      *(__n128 *)((char *)v15 + v110 + 16) = *(__n128 *)((char *)v15 + v110);
                      if (!v110)
                      {
                        uint64_t v105 = (double *)v15;
                        goto LABEL_119;
                      }
                      v110 -= 16;
                    }
                    while (v109 * *(v111 - 1) > v108 * *(v111 - 2));
                    uint64_t v105 = (double *)((char *)v15[1].n128_f64 + v110);
LABEL_119:
                    *uint64_t v105 = v109;
                    v105[1] = v108;
                  }
                  uint64_t v100 = (__n128 *)(v104 + 2);
                  v103 += 16;
                }
                while (v104 + 2 != (double *)a2);
              }
            }
            else if (!v102)
            {
              do
              {
                double v114 = a1->n128_f64[0];
                double v113 = a1->n128_f64[1];
                double v116 = a1[1].n128_f64[0];
                double v115 = a1[1].n128_f64[1];
                a1 = v100;
                if (v116 * v113 > v114 * v115)
                {
                  uint64_t v117 = v100;
                  do
                  {
                    __n128 *v117 = v117[-1];
                    double v119 = v117[-2].n128_f64[0];
                    double v118 = v117[-2].n128_f64[1];
                    --v117;
                  }
                  while (v116 * v118 > v115 * v119);
                  v117->n128_f64[0] = v116;
                  v117->n128_f64[1] = v115;
                }
                ++v100;
              }
              while (&a1[1] != a2);
            }
            return;
          }
          if (!a4)
          {
            if (v15 != a2)
            {
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,operations_research::sat::KnapsackItem*>(v15->n128_f64, a2->n128_f64, a2->n128_f64);
            }
            return;
          }
          unint64_t v18 = v17 >> 1;
          double v19 = &v15[v17 >> 1];
          double v21 = a2[-1].n128_f64[0];
          double v20 = a2[-1].n128_f64[1];
          if ((unint64_t)v16 >= 0x801) {
            break;
          }
          double v25 = v15->n128_f64[1];
          double v26 = &v15[v18].n128_f64[1];
          double v27 = v25 * v21;
          double v28 = v15->n128_f64[0] * v20;
          if (v15->n128_f64[0] * *v26 > v19->n128_f64[0] * v25)
          {
            if (v27 <= v28)
            {
              __n128 v129 = *v19;
              *double v19 = *v15;
              a6.n128_u64[1] = v129.n128_u64[1];
              *double v15 = v129;
              if (a2[-1].n128_f64[0] * v15->n128_f64[1] <= v15->n128_f64[0] * a2[-1].n128_f64[1]) {
                goto LABEL_32;
              }
              __n128 v122 = *v15;
              *double v15 = *v13;
            }
            else
            {
              __n128 v122 = *v19;
              *double v19 = *v13;
            }
            a6.n128_u64[1] = v122.n128_u64[1];
            __n128 *v13 = v122;
LABEL_32:
            --a4;
            a6.n128_u64[0] = v15->n128_u64[0];
            if ((a5 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_33;
          }
          if (v27 <= v28) {
            goto LABEL_32;
          }
          __n128 v125 = *v15;
          *double v15 = *v13;
          a6.n128_u64[1] = v125.n128_u64[1];
          __n128 *v13 = v125;
          if (v15->n128_f64[0] * *v26 <= v19->n128_f64[0] * v15->n128_f64[1]) {
            goto LABEL_32;
          }
          __n128 v126 = *v19;
          *double v19 = *v15;
          a6.n128_u64[1] = v126.n128_u64[1];
          *double v15 = v126;
          --a4;
          a6.n128_u64[0] = v15->n128_u64[0];
          if (a5) {
            goto LABEL_33;
          }
LABEL_55:
          double v39 = v15->n128_f64[1];
          if (v15[-1].n128_f64[0] * v39 > a6.n128_f64[0] * v15[-1].n128_f64[1]) {
            goto LABEL_56;
          }
          if (a6.n128_f64[0] * a2[-1].n128_f64[1] > v39 * a2[-1].n128_f64[0])
          {
            do
            {
              double v70 = v15[1].n128_f64[0];
              double v71 = v15[1].n128_f64[1];
              ++v15;
            }
            while (a6.n128_f64[0] * v71 <= v39 * v70);
          }
          else
          {
            n128_f64 = v15[1].n128_f64;
            do
            {
              double v15 = (__n128 *)n128_f64;
              if (n128_f64 >= (double *)a2) {
                break;
              }
              double v73 = a6.n128_f64[0] * n128_f64[1];
              double v74 = v39 * *n128_f64;
              n128_f64 += 2;
            }
            while (v73 <= v74);
          }
          uint64_t v75 = a2;
          if (v15 < a2)
          {
            uint64_t v75 = a2;
            do
            {
              double v76 = v75[-1].n128_f64[0];
              double v77 = v75[-1].n128_f64[1];
              --v75;
            }
            while (a6.n128_f64[0] * v77 > v39 * v76);
          }
          while (v15 < v75)
          {
            __n128 v139 = *v15;
            *double v15 = *v75;
            *uint64_t v75 = v139;
            do
            {
              double v78 = v15[1].n128_f64[0];
              double v79 = v15[1].n128_f64[1];
              ++v15;
            }
            while (a6.n128_f64[0] * v79 <= v39 * v78);
            do
            {
              double v80 = v75[-1].n128_f64[0];
              double v81 = v75[-1].n128_f64[1];
              --v75;
            }
            while (a6.n128_f64[0] * v81 > v39 * v80);
          }
          BOOL v6 = &v15[-1] >= a1;
          BOOL v7 = &v15[-1] == a1;
          if (&v15[-1] != a1) {
            *a1 = v15[-1];
          }
          a5 = 0;
          v15[-1].n128_u64[0] = a6.n128_u64[0];
          v15[-1].n128_f64[1] = v39;
        }
        double v22 = &v15[v18].n128_f64[1];
        double v23 = *v22 * v21;
        double v24 = v19->n128_f64[0] * v20;
        if (v19->n128_f64[0] * v15->n128_f64[1] <= v15->n128_f64[0] * *v22)
        {
          if (v23 > v24)
          {
            __n128 v123 = *v19;
            *double v19 = *v13;
            __n128 *v13 = v123;
            if (v19->n128_f64[0] * v15->n128_f64[1] > v15->n128_f64[0] * *v22)
            {
              __n128 v124 = *v15;
              *double v15 = *v19;
              *double v19 = v124;
            }
          }
        }
        else
        {
          if (v23 <= v24)
          {
            __n128 v127 = *v15;
            *double v15 = *v19;
            *double v19 = v127;
            if (a2[-1].n128_f64[0] * *v22 <= v19->n128_f64[0] * a2[-1].n128_f64[1]) {
              goto LABEL_23;
            }
            __n128 v121 = *v19;
            *double v19 = *v13;
          }
          else
          {
            __n128 v121 = *v15;
            *double v15 = *v13;
          }
          __n128 *v13 = v121;
        }
LABEL_23:
        double v29 = v15 + 1;
        double v30 = &v15[v18];
        double v32 = v30[-1].n128_f64[0];
        double v31 = v30 - 1;
        int v33 = &v31->n128_f64[1];
        double v34 = v31->n128_f64[1];
        double v35 = v34 * a2[-2].n128_f64[0];
        double v36 = v32 * a2[-2].n128_f64[1];
        if (v32 * v15[1].n128_f64[1] <= v15[1].n128_f64[0] * v34)
        {
          if (v35 > v36)
          {
            __n128 v128 = *v31;
            *double v31 = *v120;
            *int v120 = v128;
            if (v31->n128_f64[0] * v15[1].n128_f64[1] > v15[1].n128_f64[0] * *v33)
            {
              __n128 v38 = *v29;
              *double v29 = *v31;
              *double v31 = v38;
            }
          }
        }
        else if (v35 <= v36)
        {
          __n128 v40 = *v29;
          *double v29 = *v31;
          *double v31 = v40;
          if (a2[-2].n128_f64[0] * *v33 > v31->n128_f64[0] * a2[-2].n128_f64[1])
          {
            __n128 v130 = *v31;
            *double v31 = *v120;
            *int v120 = v130;
          }
        }
        else
        {
          __n128 v37 = *v29;
          *double v29 = *v120;
          *int v120 = v37;
        }
        int v41 = v15 + 2;
        double v42 = &v15[v18];
        double v44 = v42[1].n128_f64[0];
        double v43 = v42 + 1;
        uint64_t v45 = &v43->n128_f64[1];
        double v46 = v43->n128_f64[1];
        double v47 = v46 * a2[-3].n128_f64[0];
        double v48 = v44 * a2[-3].n128_f64[1];
        if (v44 * v15[2].n128_f64[1] <= v15[2].n128_f64[0] * v46)
        {
          if (v47 > v48)
          {
            __n128 v131 = *v43;
            *double v43 = *v14;
            __n128 *v14 = v131;
            if (v43->n128_f64[0] * v15[2].n128_f64[1] > v15[2].n128_f64[0] * *v45)
            {
              __n128 v50 = *v41;
              __n128 *v41 = *v43;
              *double v43 = v50;
            }
          }
        }
        else
        {
          if (v47 <= v48)
          {
            __n128 v51 = *v41;
            __n128 *v41 = *v43;
            *double v43 = v51;
            if (a2[-3].n128_f64[0] * *v45 <= v43->n128_f64[0] * a2[-3].n128_f64[1]) {
              goto LABEL_45;
            }
            __n128 v132 = *v43;
            *double v43 = *v14;
            __n128 v49 = v132;
          }
          else
          {
            __n128 v49 = *v41;
            __n128 *v41 = *v14;
          }
          __n128 *v14 = v49;
        }
LABEL_45:
        double v52 = *v22 * v43->n128_f64[0];
        double v53 = v19->n128_f64[0] * *v45;
        if (v19->n128_f64[0] * *v33 <= v31->n128_f64[0] * *v22)
        {
          if (v52 > v53)
          {
            __n128 v134 = *v19;
            *double v19 = *v43;
            *double v43 = v134;
            if (v19->n128_f64[0] * *v33 > v31->n128_f64[0] * *v22)
            {
              __n128 v135 = *v31;
              *double v31 = *v19;
              *double v19 = v135;
            }
          }
        }
        else
        {
          if (v52 <= v53)
          {
            __n128 v136 = *v31;
            *double v31 = *v19;
            *double v19 = v136;
            if (v43->n128_f64[0] * *v22 <= v19->n128_f64[0] * *v45) {
              goto LABEL_54;
            }
            __n128 v133 = *v19;
            *double v19 = *v43;
          }
          else
          {
            __n128 v133 = *v31;
            *double v31 = *v43;
          }
          *double v43 = v133;
        }
LABEL_54:
        __n128 v137 = *v15;
        *double v15 = *v19;
        a6.n128_u64[1] = v137.n128_u64[1];
        *double v19 = v137;
        --a4;
        a6.n128_u64[0] = v15->n128_u64[0];
        if ((a5 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_33:
        double v39 = v15->n128_f64[1];
LABEL_56:
        uint64_t v54 = 0;
        do
        {
          double v55 = v39 * v15[v54 + 1].n128_f64[0];
          double v56 = a6.n128_f64[0] * v15[++v54].n128_f64[1];
        }
        while (v55 > v56);
        int v57 = &v15[v54];
        int v58 = a2;
        if (v54 == 1)
        {
          int v58 = a2;
          do
          {
            if (v57 >= v58) {
              break;
            }
            double v61 = v58[-1].n128_f64[0];
            double v62 = v58[-1].n128_f64[1];
            --v58;
          }
          while (v39 * v61 <= a6.n128_f64[0] * v62);
        }
        else
        {
          do
          {
            double v59 = v58[-1].n128_f64[0];
            double v60 = v58[-1].n128_f64[1];
            --v58;
          }
          while (v39 * v59 <= a6.n128_f64[0] * v60);
        }
        double v15 = (__n128 *)((char *)v15 + v54 * 16);
        if (v57 < v58)
        {
          BOOL v63 = v58;
          do
          {
            __n128 v138 = *v15;
            *double v15 = *v63;
            *BOOL v63 = v138;
            do
            {
              double v64 = v15[1].n128_f64[0];
              double v65 = v15[1].n128_f64[1];
              ++v15;
            }
            while (v39 * v64 > a6.n128_f64[0] * v65);
            do
            {
              double v66 = v63[-1].n128_f64[0];
              double v67 = v63[-1].n128_f64[1];
              --v63;
            }
            while (v39 * v66 <= a6.n128_f64[0] * v67);
          }
          while (v15 < v63);
        }
        if (&v15[-1] != a1) {
          *a1 = v15[-1];
        }
        v15[-1].n128_u64[0] = a6.n128_u64[0];
        v15[-1].n128_f64[1] = v39;
        if (v57 >= v58) {
          break;
        }
LABEL_75:
        std::__introsort<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,false>(a1, &v15[-1], a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v68 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, v15 - 1, a6);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(v15, a2, v69))
      {
        break;
      }
      if (!v68) {
        goto LABEL_75;
      }
    }
    a2 = v15 - 1;
    if (!v68) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v7 = a2 - 1;
      if (a2[-1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a2[-1].n128_f64[1])
      {
        __n128 v8 = *a1;
        *a1 = *v7;
        __n128 *v7 = v8;
      }
      return result;
    case 3:
      int v9 = a1 + 1;
      double v10 = a1[1].n128_f64[0];
      double v11 = a2 - 1;
      double v12 = v10 * a1->n128_f64[1];
      double v13 = a1[1].n128_f64[1];
      double v14 = v13 * a2[-1].n128_f64[0];
      double v15 = v10 * a2[-1].n128_f64[1];
      if (v12 <= a1->n128_f64[0] * v13)
      {
        if (v14 > v15)
        {
          __n128 v39 = *v9;
          *int v9 = *v11;
          __n128 *v11 = v39;
          if (a1[1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a1[1].n128_f64[1])
          {
            __n128 v40 = *a1;
            *a1 = *v9;
            *int v9 = v40;
          }
        }
      }
      else
      {
        if (v14 <= v15)
        {
          __n128 v43 = *a1;
          *a1 = *v9;
          *int v9 = v43;
          if (a2[-1].n128_f64[0] * a1[1].n128_f64[1] <= a1[1].n128_f64[0] * a2[-1].n128_f64[1]) {
            return result;
          }
          __n128 v16 = *v9;
          *int v9 = *v11;
        }
        else
        {
          __n128 v16 = *a1;
          *a1 = *v11;
        }
        __n128 *v11 = v16;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, a1[1].n128_f64, a1[2].n128_f64, a2[-1].n128_f64, a3);
      return 1;
    case 5:
      double v30 = a1 + 1;
      double v31 = a1 + 2;
      double v32 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(a1, a1[1].n128_f64, a1[2].n128_f64, a1[3].n128_f64, a3);
      double v34 = a2[-1].n128_f64[0];
      int v33 = a2 - 1;
      if (v34 * a1[3].n128_f64[1] > a1[3].n128_f64[0] * v33->n128_f64[1])
      {
        __n128 v35 = *v32;
        *double v32 = *v33;
        *int v33 = v35;
        if (a1[3].n128_f64[0] * a1[2].n128_f64[1] > a1[2].n128_f64[0] * a1[3].n128_f64[1])
        {
          __n128 v36 = *v31;
          *double v31 = *v32;
          *double v32 = v36;
          if (a1[2].n128_f64[0] * a1[1].n128_f64[1] > a1[1].n128_f64[0] * a1[2].n128_f64[1])
          {
            __n128 v37 = *v30;
            __n128 *v30 = *v31;
            *double v31 = v37;
            if (a1[1].n128_f64[0] * a1->n128_f64[1] > a1->n128_f64[0] * a1[1].n128_f64[1])
            {
              __n128 v38 = *a1;
              *a1 = *v30;
              __n128 *v30 = v38;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v17 = a1 + 2;
      double v18 = a1[2].n128_f64[0];
      double v19 = a1 + 1;
      double v20 = a1[1].n128_f64[0];
      double v22 = a1->n128_f64[0];
      double v21 = a1->n128_f64[1];
      double v23 = v20 * v21;
      double v24 = a1[1].n128_f64[1];
      double v25 = a1->n128_f64[0] * v24;
      double v26 = v24 * v18;
      double v27 = a1[2].n128_f64[1];
      double v28 = v20 * v27;
      if (v23 <= v25)
      {
        if (v26 > v28)
        {
          __n128 v41 = *v19;
          *double v19 = *v17;
          __n128 *v17 = v41;
          if (v21 * a1[1].n128_f64[0] > v22 * a1[1].n128_f64[1])
          {
            __n128 v42 = *a1;
            *a1 = *v19;
            *double v19 = v42;
          }
        }
      }
      else
      {
        if (v26 <= v28)
        {
          __n128 v44 = *a1;
          *a1 = *v19;
          *double v19 = v44;
          if (v18 * a1[1].n128_f64[1] <= v27 * a1[1].n128_f64[0]) {
            goto LABEL_29;
          }
          __n128 v29 = *v19;
          *double v19 = *v17;
        }
        else
        {
          __n128 v29 = *a1;
          *a1 = *v17;
        }
        __n128 *v17 = v29;
      }
LABEL_29:
      n128_f64 = a1[3].n128_f64;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v46 = 0;
      int v47 = 0;
      break;
  }
  while (1)
  {
    double v49 = *n128_f64;
    double v48 = n128_f64[1];
    if (*n128_f64 * v17->n128_f64[1] > v17->n128_f64[0] * v48) {
      break;
    }
LABEL_32:
    unint64_t v17 = (__n128 *)n128_f64;
    v46 += 16;
    n128_f64 += 2;
    if (n128_f64 == (double *)a2) {
      return 1;
    }
  }
  uint64_t v50 = v46;
  do
  {
    __n128 v51 = (double *)((char *)a1->n128_f64 + v50);
    *(__n128 *)((char *)a1 + v50 + 48) = *(__n128 *)((char *)a1 + v50 + 32);
    if (v50 == -32)
    {
      a1->n128_f64[0] = v49;
      a1->n128_f64[1] = v48;
      if (++v47 != 8) {
        goto LABEL_32;
      }
      return n128_f64 + 2 == (double *)a2;
    }
    v50 -= 16;
  }
  while (v49 * v51[3] > v48 * v51[2]);
  double v52 = (double *)((char *)a1->n128_f64 + v50);
  v52[6] = v49;
  v52[7] = v48;
  if (++v47 != 8) {
    goto LABEL_32;
  }
  return n128_f64 + 2 == (double *)a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*>(__n128 *a1, double *a2, double *a3, double *a4, __n128 result)
{
  double v5 = a2[1];
  double v6 = v5 * *a3;
  double v7 = *a2 * a3[1];
  if (*a2 * a1->n128_f64[1] <= a1->n128_f64[0] * v5)
  {
    if (v6 > v7)
    {
      BOOL result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 * a1->n128_f64[1] > a1->n128_f64[0] * a2[1])
      {
        BOOL result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v6 > v7)
    {
      BOOL result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    BOOL result = *a1;
    *a1 = *(__n128 *)a2;
    *(__n128 *)a2 = result;
    if (*a3 * a2[1] > *a2 * a3[1])
    {
      BOOL result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_f64[0] = *a4 * a3[1];
  if (result.n128_f64[0] > *a3 * a4[1])
  {
    BOOL result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3 * a2[1];
    if (result.n128_f64[0] > *a2 * a3[1])
    {
      BOOL result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2 * a1->n128_f64[1];
      if (result.n128_f64[0] > a1->n128_f64[0] * a2[1])
      {
        BOOL result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<operations_research::sat::KnapsackItem> &,operations_research::sat::KnapsackItem*,operations_research::sat::KnapsackItem*>(double *a1, double *a2, double *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = (char *)a2 - (char *)a1;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  if ((char *)a2 - (char *)a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        __n128 v37 = &a1[2 * v36];
        if (2 * v35 + 2 < v4)
        {
          float64x2_t v38 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v37 + 2), *(int8x16_t *)(v37 + 2), 8uLL), *(float64x2_t *)v37);
          if (vmovn_s64(vcgtq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1))).u8[0])
          {
            v37 += 2;
            uint64_t v36 = 2 * v35 + 2;
          }
        }
        __n128 v39 = (int8x16_t *)&a1[2 * v35];
        int8x16_t v40 = *v39;
        float64x2_t v41 = (float64x2_t)vextq_s8(v40, v40, 8uLL);
        float64x2_t v42 = vmulq_f64(*(float64x2_t *)v37, v41);
        if ((vmovn_s64(vcgtq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1))).u8[0] & 1) == 0)
        {
          do
          {
            __n128 v44 = v39;
            __n128 v39 = (int8x16_t *)v37;
            *__n128 v44 = *(int8x16_t *)v37;
            if (v34 < v36) {
              break;
            }
            uint64_t v45 = (2 * v36) | 1;
            __n128 v37 = &a1[2 * v45];
            uint64_t v46 = 2 * v36 + 2;
            if (v46 < v4)
            {
              float64x2_t v47 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v37 + 2), *(int8x16_t *)(v37 + 2), 8uLL), *(float64x2_t *)v37);
              if (vmovn_s64(vcgtq_f64(v47, (float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1))).u8[0])
              {
                v37 += 2;
                uint64_t v45 = v46;
              }
            }
            float64x2_t v43 = vmulq_f64(v41, *(float64x2_t *)v37);
            uint64_t v36 = v45;
          }
          while ((vmovn_s64(vcgtq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1))).u8[0] & 1) == 0);
          *__n128 v39 = v40;
        }
      }
      BOOL v20 = v35-- <= 0;
    }
    while (!v20);
  }
  double v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 32)
    {
      double v6 = a2;
      do
      {
        if (*v6 * a1[1] > *a1 * v6[1])
        {
          long long v7 = *(_OWORD *)v6;
          *(_OWORD *)double v6 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v7;
        }
        v6 += 2;
      }
      while (v6 != a3);
LABEL_26:
      double v5 = a3;
      goto LABEL_27;
    }
    __n128 v8 = a2;
    while (1)
    {
      if (*v8 * a1[1] > *a1 * v8[1])
      {
        long long v9 = *(_OWORD *)v8;
        *(_OWORD *)__n128 v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v9;
        if (v3 == 32 || a1[2] * a1[5] <= a1[4] * a1[3])
        {
          double v10 = a1 + 2;
          int64_t v11 = 1;
          double v13 = *a1;
          double v12 = a1[1];
          if (a1[2] * v12 <= *a1 * a1[3])
          {
LABEL_19:
            double v14 = a1;
            do
            {
              double v15 = v14;
              double v14 = v10;
              *(_OWORD *)double v15 = *(_OWORD *)v10;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v11) {
                break;
              }
              uint64_t v16 = (2 * v11) | 1;
              double v10 = &a1[2 * v16];
              uint64_t v17 = 2 * v11 + 2;
              if (v17 < v4)
              {
                float64x2_t v18 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v10 + 2), *(int8x16_t *)(v10 + 2), 8uLL), *(float64x2_t *)v10);
                if (vmovn_s64(vcgtq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1))).u8[0])
                {
                  v10 += 2;
                  uint64_t v16 = v17;
                }
              }
              int64_t v11 = v16;
            }
            while (v12 * *v10 <= v13 * v10[1]);
            double *v14 = v13;
            v14[1] = v12;
          }
        }
        else
        {
          double v10 = a1 + 4;
          int64_t v11 = 2;
          double v13 = *a1;
          double v12 = a1[1];
          if (a1[4] * v12 <= *a1 * a1[5]) {
            goto LABEL_19;
          }
        }
      }
      v8 += 2;
      if (v8 == a3) {
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  if (v3 >= 17)
  {
    uint64_t v19 = (unint64_t)v3 >> 4;
    do
    {
      uint64_t v21 = 0;
      long long v48 = *(_OWORD *)a1;
      double v22 = a1;
      do
      {
        uint64_t v23 = (uint64_t)&v22[v21 + 1];
        uint64_t v24 = (2 * v21) | 1;
        uint64_t v25 = 2 * v21 + 2;
        if (v25 < v19)
        {
          float64x2_t v26 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v23 + 16), *(int8x16_t *)(v23 + 16), 8uLL), *(float64x2_t *)v23);
          if (vmovn_s64(vcgtq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1))).u8[0])
          {
            v23 += 16;
            uint64_t v24 = v25;
          }
        }
        *double v22 = *(_OWORD *)v23;
        double v22 = (_OWORD *)v23;
        uint64_t v21 = v24;
      }
      while (v24 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      a2 -= 2;
      if ((double *)v23 == a2)
      {
        *(_OWORD *)uint64_t v23 = v48;
      }
      else
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v48;
        uint64_t v27 = v23 - (void)a1 + 16;
        if (v27 >= 17)
        {
          unint64_t v28 = (((unint64_t)v27 >> 4) - 2) >> 1;
          uint64_t v29 = (uint64_t)&a1[2 * v28];
          double v31 = *(double *)v23;
          double v30 = *(double *)(v23 + 8);
          if (*(double *)v29 * v30 > *(double *)v23 * *(double *)(v29 + 8))
          {
            do
            {
              double v32 = (_OWORD *)v23;
              uint64_t v23 = v29;
              *double v32 = *(_OWORD *)v29;
              if (!v28) {
                break;
              }
              unint64_t v28 = (v28 - 1) >> 1;
              uint64_t v29 = (uint64_t)&a1[2 * v28];
            }
            while (v30 * *(double *)v29 > v31 * *(double *)(v29 + 8));
            *(double *)uint64_t v23 = v31;
            *(double *)(v23 + 8) = v30;
          }
        }
      }
      BOOL v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

void *std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v5 = result;
    if (a4 >> 58) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = operator new(a4 << 6);
    __n128 v8 = result;
    *double v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        BOOL result = operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v8[v9 / 8], (const operations_research::sat::LinearConstraint *)(a2 + v9));
        v9 += 64;
      }
      while (a2 + v9 != a3);
      __n128 v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_23CCB51E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_23CCB51FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearConstraint>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<operations_research::sat::LinearConstraint>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      double v5 = **result;
      if (v4 != v3)
      {
        do
        {
          double v6 = (void *)*((void *)v4 - 3);
          if (v6)
          {
            *((void *)v4 - 2) = v6;
            operator delete(v6);
          }
          long long v7 = (void *)*((void *)v4 - 6);
          if (v7)
          {
            *((void *)v4 - 5) = v7;
            operator delete(v7);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        double v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  a2[4] = 0;
  *(void *)(a1 + 40) = a2[5];
  uint64_t v9 = a2[6];
  a2[5] = 0;
  a2[6] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  a2[7] = 0;
  a2[8] = 0;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = a2[9];
  uint64_t v13 = a2[10];
  a2[9] = 0;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  a2[10] = 0;
  *(void *)(a1 + 88) = a2[11];
  a2[11] = 0;
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(void *)(a1 + 128) = a2[16];
  a2[14] = 0;
  a2[15] = 0;
  a2[16] = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(void *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  double v15 = (unsigned char *)a2[20];
  double v14 = (unsigned char *)a2[21];
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 160) = v17;
    *(void *)(a1 + 168) = v17;
    float64x2_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 176) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 168) = v18;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
  return a1;
}

void sub_23CCB5410(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 168) = v4;
    operator delete(v4);
  }
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0((void **)(v1 + 136), (void **)(v1 + 144));
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C22F8;
  unint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[18];
  if (v3)
  {
    uint64_t v4 = a1[19];
    uint64_t v5 = (void *)a1[18];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(void *)(v4 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(void *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[18];
    }
    a1[19] = v3;
    operator delete(v5);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 1));
  return a1;
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C22F8;
  unint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[18];
  if (v3)
  {
    uint64_t v4 = a1[19];
    uint64_t v5 = (void *)a1[18];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(void *)(v4 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(void *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v4 -= 64;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[18];
    }
    a1[19] = v3;
    operator delete(v5);
  }
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 1));

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0xD0uLL);
  void *v2 = &unk_26F0C22F8;
  std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CCB5624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C22F8;
  return std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(uint64_t a1)
{
  operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::~$_0((operations_research::sat::ImpliedBoundsProcessor *)(a1 + 8));

  operator delete((void *)a1);
}

void std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  __n128 v138 = 0;
  __n128 v139 = 0;
  __n128 v137 = 0;
  uint64_t v5 = *(unsigned char **)(a1 + 168);
  uint64_t v4 = *(unsigned char **)(a1 + 176);
  int64_t v6 = v4 - v5;
  if (v4 == v5) {
    return;
  }
  if (v6 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (char *)operator new(v4 - v5);
  uint64_t v10 = 4 * (v6 >> 2);
  __n128 v137 = v9;
  __n128 v139 = &v9[v10];
  memcpy(v9, v5, v6);
  uint64_t v11 = 0;
  while (1)
  {
    double v12 = *(double *)(*a2 + 8 * *(int *)&v9[v11]);
    if (vabdd_f64(v12, round(v12)) > 0.000001) {
      break;
    }
    v11 += 4;
    if (v10 == v11)
    {
      operator delete(v9);
      return;
    }
  }
  __n128 v138 = v9;
  operator delete(v9);
  long long __p = operator new(0x28uLL);
  long long v135 = xmmword_23CE85CF0;
  strcpy((char *)__p, "Knapsack on demand cover cut generator");
  operations_research::KnapsackSolverForCuts::KnapsackSolverForCuts((uint64_t)v136, (long long *)&__p);
  if (SHIBYTE(v135) < 0)
  {
    operator delete(__p);
    *(_OWORD *)__n128 v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    *(_OWORD *)__n128 v131 = 0u;
    unint64_t v13 = *(void *)(a1 + 80);
    if (v13 >= 0x80) {
      goto LABEL_11;
    }
  }
  else
  {
    *(_OWORD *)__n128 v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    *(_OWORD *)__n128 v131 = 0u;
    unint64_t v13 = *(void *)(a1 + 80);
    if (v13 >= 0x80)
    {
LABEL_11:
      operator delete(*(void **)(a1 + 56));
      unint64_t v13 = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 56) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      goto LABEL_17;
    }
  }
  if (v13)
  {
    *(void *)(a1 + 72) = 0;
    memset(*(void **)(a1 + 56), 128, v13 + 8);
    *(unsigned char *)(*(void *)(a1 + 56) + *(void *)(a1 + 80)) = -1;
    unint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = v13 - (v13 >> 3);
    if (v13 == 7) {
      uint64_t v14 = 6;
    }
    *(void *)(a1 + 96) = v14 - *(void *)(a1 + 72);
  }
LABEL_17:
  double v15 = *(unint64_t **)(a1 + 88);
  if (v15)
  {
    v15[1] = 0;
    *double v15 = v13;
    v15[4] = 0;
    v15[2] = 0;
    int64_t v16 = *(char ***)(a1 + 144);
    double v109 = *(char ***)(a1 + 152);
    if (v16 != v109) {
      goto LABEL_19;
    }
  }
  else
  {
    int64_t v16 = *(char ***)(a1 + 144);
    double v109 = *(char ***)(a1 + 152);
    if (v16 != v109)
    {
LABEL_19:
      uint64_t v110 = 0;
      double v17 = 0.0001;
      double v18 = -1.0;
      *(double *)&uint64_t v19 = 0.0001;
      uint64_t v20 = 0x3E112E0BE826D695;
      double v21 = -0.000000001;
      while (1)
      {
        uint64_t v22 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(void *)(a1 + 192));
        uint64_t v23 = v22;
        uint64_t v24 = *(unsigned __int8 **)(v22 + 120);
        if (v24)
        {
          unsigned __int8 v25 = atomic_load(v24);
          if (v25) {
            goto LABEL_137;
          }
        }
        if (fmax(*(double *)(v22 + 104) - *(double *)(v22 + 112), 0.0) <= 0.0) {
          goto LABEL_137;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v22);
        if (*(void *)(v23 + 24) <= CurrentTimeNanos - *(void *)(v23 + 8)) {
          uint64_t v27 = CurrentTimeNanos - *(void *)(v23 + 8);
        }
        else {
          uint64_t v27 = *(void *)(v23 + 24);
        }
        operations_research::RunningMax<long long>::Add((int *)(v23 + 32), v27);
        *(void *)(v23 + 8) = CurrentTimeNanos;
        if (*(void *)(*(void *)(v23 + 40) + 8 * *(int *)(v23 + 68)) + CurrentTimeNanos >= *(void *)(v23 + 16))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_136;
          }
          double v29 = *(double *)(v23 + 96);
          if (*(unsigned char *)(v23 + 72))
          {
            double v30 = v29
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v28) - *(void *)(v23 + 80) + *(void *)(v23 + 88))
                * v21;
            if (v30 <= v17) {
              goto LABEL_136;
            }
          }
          else
          {
            double v30 = v29 + (double)*(uint64_t *)(v23 + 88) * v21;
            if (v30 <= v17)
            {
LABEL_136:
              *(void *)(v23 + 16) = 0;
LABEL_137:
              if (v110 >= 1
                && *off_26AECFF88[0] >= 2
                && (off_26AECFF88[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_26AECFF88, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)&v126, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 590);
                BOOL v104 = (void *)google::LogMessage::stream((google::LogMessage *)&v126);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Skipped constraints: ", 21);
                std::ostream::operator<<();
                google::LogMessage::~LogMessage((google::LogMessage *)&v126);
              }
              break;
            }
          }
          *(void *)(v23 + 16) = *(void *)(v23 + 8) + (uint64_t)(v30 * 1000000000.0);
        }
        if (*off_26AECFF68[0] >= 2
          && (off_26AECFF68[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_26AECFF68, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v112, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 470);
          double v31 = (void *)google::LogMessage::stream((google::LogMessage *)&v112);
          double v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Processing constraint: ", 23);
          operations_research::sat::LinearConstraint::DebugString((operations_research::sat::LinearConstraint *)v16, v33, &v126);
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t v34 = &v126;
          }
          else {
            int64_t v34 = (std::string *)v126.__r_.__value_.__r.__words[0];
          }
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v126.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, size);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v126.__r_.__value_.__l.__data_);
          }
          google::LogMessage::~LogMessage((google::LogMessage *)&v112);
        }
        long long v130 = *(_OWORD *)v16;
        if (&v130 != (long long *)v16)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v131, v16[2], v16[3], (v16[3] - v16[2]) >> 2);
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v132[1], v16[5], v16[6], (v16[6] - v16[5]) >> 3);
        }
        operations_research::sat::ImpliedBoundsProcessor::ProcessUpperBoundedConstraintWithSlackCreation(a1 + 8, 0, 0, a2, &v130, 0, 0);
        operations_research::sat::MakeAllCoefficientsPositive(&v130, v36);
        operations_research::sat::GetPreprocessedLinearConstraint(&v130, a2, *(void *)(a1 + 200), (uint64_t)&v126);
        uint64_t v111 = v16;
        if (v126.__r_.__value_.__r.__words[2] != v127)
        {
          float64x2_t v38 = *(const operations_research::sat::LinearConstraint **)(a1 + 200);
          if (!operations_research::sat::ConstraintIsTriviallyTrue((operations_research::sat *)&v126, v38, v37)
            && (operations_research::sat::CanBeFilteredUsingCutLowerBound(&v126, a2, (uint64_t)v38) & 1) == 0
            && !operations_research::sat::CanBeFilteredUsingKnapsackUpperBound(&v126, a2, (uint64_t)v38, v39))
          {
            __n128 v123 = 0;
            __n128 v124 = 0;
            __n128 v125 = 0;
            std::string::size_type v40 = v126.__r_.__value_.__r.__words[2];
            uint64_t v41 = v127 - v126.__r_.__value_.__r.__words[2];
            uint64_t v108 = v3;
            uint64_t v105 = v20;
            double v106 = *(double *)&v19;
            double v107 = v21;
            if (v127 == v126.__r_.__value_.__r.__words[2])
            {
              double v44 = v17;
              int v120 = 0;
              __n128 v121 = 0;
              __n128 v122 = 0;
              double v48 = (double)(uint64_t)-v126.__r_.__value_.__l.__size_ + v18;
              double v49 = 0.0;
LABEL_121:
              if (v48 >= 0.0)
              {
                uint64_t v117 = 0;
                uint64_t v118 = 0;
                uint64_t v119 = 0;
                double v114 = 0;
                uint64_t v115 = 0;
                uint64_t v116 = 0;
                if (*off_26AECFF70[0] >= 2
                  && (off_26AECFF70[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_26AECFF70, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)2)))
                {
                  google::LogMessage::LogMessage((google::LogMessage *)&v112, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 525);
                  __n128 v99 = (void *)google::LogMessage::stream((google::LogMessage *)&v112);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Knapsack size: ", 15);
                  std::ostream::operator<<();
                  google::LogMessage::~LogMessage((google::LogMessage *)&v112);
                }
                operations_research::KnapsackSolverForCuts::Init(v136, &v123, &v120, v48);
                uint64_t v100 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(void *)(a1 + 192));
                unint64_t v101 = v100;
                uint64_t v102 = *((void *)v100 + 2);
                if (v102 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  uint64_t v103 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v100);
                  if (v102 - (uint64_t)v103 >= 0 && FLAGS_time_limit_use_usertime && *((unsigned char *)v101 + 72)) {
                    absl::lts_2020_02_25::GetCurrentTimeNanos(v103);
                  }
                }
                BOOL v113 = 0;
                *(double *)&v136[31] = v49 + -1.0 + v106;
                operator new();
              }
              uint64_t v3 = v108;
              double v17 = v44;
              uint64_t v20 = v105;
              *(double *)&uint64_t v19 = v106;
              double v21 = v107;
              if (v120)
              {
                __n128 v121 = (double *)v120;
                operator delete(v120);
              }
              double v18 = -1.0;
              if (v123)
              {
                __n128 v124 = (double *)v123;
                operator delete(v123);
              }
              goto LABEL_53;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFDLL) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            size_t v42 = 2 * v41;
            float64x2_t v43 = (char *)operator new(2 * v41);
            double v44 = v17;
            uint64_t v45 = v41 >> 2;
            __n128 v123 = v43;
            __n128 v124 = (double *)v43;
            __n128 v125 = &v43[8 * v45];
            uint64_t v46 = (double *)operator new(v42);
            unint64_t v47 = 0;
            int v120 = v46;
            __n128 v121 = v46;
            __n128 v122 = &v46[v45];
            double v48 = (double)(uint64_t)-v126.__r_.__value_.__l.__size_ + v18;
            double v49 = 0.0;
            while (2)
            {
              uint64_t v51 = *(int *)(v40 + 4 * v47);
              uint64_t v52 = *((void *)v128 + v47);
              uint64_t v53 = *(void *)(*(void *)(a1 + 200) + 144);
              uint64_t v54 = *(void *)(v53 + 20 * (int)(v51 ^ 1));
              double v55 = (double)-v54;
              if (v54 > 0x7FFFFFFFFFFFFFFDLL) {
                double v55 = -INFINITY;
              }
              uint64_t v56 = *(void *)(v53 + 20 * (int)v51);
              if (v54 >= (uint64_t)0x8000000000000003) {
                double v57 = v55;
              }
              else {
                double v57 = INFINITY;
              }
              if (v56 >= (uint64_t)0x8000000000000003) {
                double v58 = (double)v56;
              }
              else {
                double v58 = -INFINITY;
              }
              if (v56 <= 0x7FFFFFFFFFFFFFFDLL) {
                double v59 = v58;
              }
              else {
                double v59 = INFINITY;
              }
              double v60 = v57 - *(double *)(*a2 + 8 * v51);
              double v61 = v124;
              if (v124 < (double *)v125)
              {
                double *v124 = v60;
                uint64_t v62 = (uint64_t)(v61 + 1);
                goto LABEL_95;
              }
              BOOL v63 = (double *)v123;
              int64_t v64 = (char *)v124 - (unsigned char *)v123;
              uint64_t v65 = ((char *)v124 - (unsigned char *)v123) >> 3;
              unint64_t v66 = v65 + 1;
              if ((unint64_t)(v65 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v67 = v125 - (unsigned char *)v123;
              if ((v125 - (unsigned char *)v123) >> 2 > v66) {
                unint64_t v66 = v67 >> 2;
              }
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v66;
              }
              if (v68)
              {
                if (v68 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                __n128 v69 = (char *)operator new(8 * v68);
                double v70 = (double *)&v69[8 * v65];
                double *v70 = v60;
                uint64_t v62 = (uint64_t)(v70 + 1);
                if (v61 == v63) {
                  goto LABEL_93;
                }
LABEL_87:
                unint64_t v71 = (char *)(v61 - 1) - (char *)v63;
                if (v71 < 0x58) {
                  goto LABEL_158;
                }
                if ((unint64_t)((char *)v61 - &v69[v64]) < 0x20) {
                  goto LABEL_158;
                }
                uint64_t v72 = (v71 >> 3) + 1;
                uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
                double v74 = &v61[v73 / 0xFFFFFFFFFFFFFFF8];
                double v70 = (double *)((char *)v70 - v73);
                uint64_t v75 = &v69[8 * v65 - 16];
                double v76 = v61 - 2;
                uint64_t v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v78 = *(_OWORD *)v76;
                  *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
                  *(_OWORD *)uint64_t v75 = v78;
                  v75 -= 32;
                  v76 -= 4;
                  v77 -= 4;
                }
                while (v77);
                double v61 = v74;
                if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_158:
                  do
                  {
                    uint64_t v79 = *((void *)v61-- - 1);
                    *((void *)v70-- - 1) = v79;
                  }
                  while (v61 != v63);
                }
              }
              else
              {
                __n128 v69 = 0;
                double v70 = (double *)(8 * v65);
                *(double *)(8 * v65) = v60;
                uint64_t v62 = 8 * v65 + 8;
                if (v61 != v63) {
                  goto LABEL_87;
                }
              }
LABEL_93:
              __n128 v123 = v70;
              __n128 v124 = (double *)v62;
              __n128 v125 = &v69[8 * v68];
              if (v63)
              {
                operator delete(v63);
                uint64_t v46 = v121;
              }
LABEL_95:
              double v80 = (double)v52;
              __n128 v124 = (double *)v62;
              double v81 = (v57 - v59) * v80;
              if (v46 < v122)
              {
                *uint64_t v46 = v81;
                uint64_t v50 = (uint64_t)(v46 + 1);
                goto LABEL_62;
              }
              int v82 = (double *)v120;
              int64_t v83 = (char *)v46 - (unsigned char *)v120;
              uint64_t v84 = ((char *)v46 - (unsigned char *)v120) >> 3;
              unint64_t v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v86 = (char *)v122 - (unsigned char *)v120;
              if (((char *)v122 - (unsigned char *)v120) >> 2 > v85) {
                unint64_t v85 = v86 >> 2;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v85;
              }
              if (v87)
              {
                if (v87 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                double v88 = operator new(8 * v87);
                double v89 = (double *)&v88[8 * v84];
                *double v89 = v81;
                uint64_t v50 = (uint64_t)(v89 + 1);
                if (v46 != v82)
                {
LABEL_105:
                  unint64_t v90 = (char *)(v46 - 1) - (char *)v82;
                  if (v90 < 0x168
                    || &v88[v83 - 8 - (v90 & 0xFFFFFFFFFFFFFFF8)] > &v88[v83 - 8]
                    || (double *)((char *)v46 - (v90 & 0xFFFFFFFFFFFFFFF8) - 8) > v46 - 1
                    || (unint64_t)((char *)v46 - v88 - v83) < 0x20)
                  {
                    __n128 v91 = v46;
                  }
                  else
                  {
                    uint64_t v93 = (v90 >> 3) + 1;
                    uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
                    __n128 v91 = &v46[v94 / 0xFFFFFFFFFFFFFFF8];
                    double v89 = (double *)((char *)v89 - v94);
                    uint64_t v95 = &v88[8 * v84 - 16];
                    double v96 = v46 - 2;
                    uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v98 = *(_OWORD *)v96;
                      *(v95 - 1) = *((_OWORD *)v96 - 1);
                      *uint64_t v95 = v98;
                      v95 -= 2;
                      v96 -= 4;
                      v97 -= 4;
                    }
                    while (v97);
                    if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_108:
                      int v120 = v89;
                      __n128 v121 = (double *)v50;
                      __n128 v122 = (double *)&v88[8 * v87];
                      if (!v82)
                      {
LABEL_62:
                        __n128 v121 = (double *)v50;
                        double v49 = v49 + v60;
                        double v48 = v48 + v81 + v80 * v59;
                        ++v47;
                        std::string::size_type v40 = v126.__r_.__value_.__r.__words[2];
                        uint64_t v46 = (double *)v50;
                        if (v47 >= (int64_t)(v127 - v126.__r_.__value_.__r.__words[2]) >> 2) {
                          goto LABEL_121;
                        }
                        continue;
                      }
LABEL_112:
                      operator delete(v82);
                      goto LABEL_62;
                    }
                  }
                  do
                  {
                    uint64_t v92 = *((void *)v91-- - 1);
                    *((void *)v89-- - 1) = v92;
                  }
                  while (v91 != v82);
                  goto LABEL_108;
                }
              }
              else
              {
                double v88 = 0;
                double v89 = (double *)(8 * v84);
                *(double *)(8 * v84) = v81;
                uint64_t v50 = 8 * v84 + 8;
                if (v46 != v82) {
                  goto LABEL_105;
                }
              }
              break;
            }
            int v120 = v89;
            __n128 v121 = (double *)v50;
            __n128 v122 = (double *)&v88[8 * v87];
            if (!v82) {
              goto LABEL_62;
            }
            goto LABEL_112;
          }
          ++v110;
        }
LABEL_53:
        if (v128)
        {
          __n128 v129 = v128;
          operator delete(v128);
        }
        if (v126.__r_.__value_.__r.__words[2])
        {
          uint64_t v127 = v126.__r_.__value_.__r.__words[2];
          operator delete((void *)v126.__r_.__value_.__r.__words[2]);
        }
        int64_t v16 = v111 + 8;
        if (v111 + 8 == v109) {
          goto LABEL_137;
        }
      }
    }
  }
  if (v132[1])
  {
    *(void **)&long long v133 = v132[1];
    operator delete(v132[1]);
  }
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)v136);
}

void sub_23CCB72AC()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_23CCB72B4()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_23CCB72BC()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 200));
}

void sub_23CCB72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v72 = a51;
    if (!a51) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v72 = a51;
    if (!a51)
    {
LABEL_6:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a57, (void *)a58);
      uint64_t v73 = *a11;
      if (*a11)
      {
        *(void *)(a10 + 48) = v73;
        operator delete(v73);
      }
      MEMORY[0x23ECF2BC0](a10, 0x1030C40021678CBLL);
      if (a61)
      {
        a62 = (uint64_t)a61;
        operator delete(a61);
        double v74 = a64;
        if (!a64)
        {
LABEL_10:
          uint64_t v75 = a67;
          if (!a67) {
            goto LABEL_11;
          }
          goto LABEL_19;
        }
      }
      else
      {
        double v74 = a64;
        if (!a64) {
          goto LABEL_10;
        }
      }
      a65 = (uint64_t)v74;
      operator delete(v74);
      uint64_t v75 = a67;
      if (!a67)
      {
LABEL_11:
        double v76 = a70;
        if (!a70) {
          goto LABEL_12;
        }
        goto LABEL_20;
      }
LABEL_19:
      a68 = (uint64_t)v75;
      operator delete(v75);
      double v76 = a70;
      if (!a70)
      {
LABEL_12:
        uint64_t v77 = (void *)STACK[0x228];
        if (!STACK[0x228]) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
LABEL_20:
      a71 = (uint64_t)v76;
      operator delete(v76);
      uint64_t v77 = (void *)STACK[0x228];
      if (!STACK[0x228])
      {
LABEL_13:
        long long v78 = (void *)STACK[0x210];
        if (!STACK[0x210]) {
          goto LABEL_14;
        }
        goto LABEL_22;
      }
LABEL_21:
      STACK[0x230] = (unint64_t)v77;
      operator delete(v77);
      long long v78 = (void *)STACK[0x210];
      if (!STACK[0x210])
      {
LABEL_14:
        uint64_t v79 = (void *)STACK[0x268];
        if (!STACK[0x268]) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
LABEL_22:
      STACK[0x218] = (unint64_t)v78;
      operator delete(v78);
      uint64_t v79 = (void *)STACK[0x268];
      if (!STACK[0x268])
      {
LABEL_15:
        double v80 = (void *)STACK[0x250];
        if (!STACK[0x250]) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
LABEL_23:
      STACK[0x270] = (unint64_t)v79;
      operator delete(v79);
      double v80 = (void *)STACK[0x250];
      if (!STACK[0x250])
      {
LABEL_16:
        operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)&STACK[0x298]);
        _Unwind_Resume(a1);
      }
LABEL_24:
      STACK[0x258] = (unint64_t)v80;
      operator delete(v80);
      operations_research::KnapsackSolverForCuts::~KnapsackSolverForCuts((operations_research::KnapsackSolverForCuts *)&STACK[0x298]);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v72);
  goto LABEL_6;
}

uint64_t std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstrain"
                     "tENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16Line"
                                "arConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS"
                                "4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat31CreateKnapsackCoverCutGeneratorERKNSt3__16vectorINS0_16LinearConstraintENS1_9allocatorIS3_EEEERKNS2_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISC_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operations_research::sat::ImpliedBoundsProcessor::ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)a1, (char **)a2);
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  uint64_t v4 = (operations_research::sat::ImpliedBoundsProcessor *)((char *)v4 + 136);
  *((void *)v4 + 2) = 0;
  std::vector<operations_research::sat::LinearConstraint>::__init_with_size[abi:ne180100]<operations_research::sat::LinearConstraint*,operations_research::sat::LinearConstraint*>(v4, *(void *)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 6);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  int64_t v6 = *(unsigned char **)(a2 + 160);
  uint64_t v5 = *(unsigned char **)(a2 + 168);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 160) = v8;
    *(void *)(a1 + 168) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 176) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 168) = v9;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  return a1;
}

void sub_23CCB78A8(_Unwind_Exception *a1)
{
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor(v1);
  _Unwind_Resume(a1);
}

void sub_23CCB78BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v11 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 168) = v11;
    operator delete(v11);
  }
  std::__compressed_pair_elem<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateKnapsackCoverCutGenerator(std::vector<operations_research::sat::LinearConstraint> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((void **)(v9 + 136), v9);
  operations_research::sat::ImpliedBoundsProcessor::~ImpliedBoundsProcessor((operations_research::sat::ImpliedBoundsProcessor *)v9);
  _Unwind_Resume(a9);
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,double>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCB796C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CCB7C0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26F0C2388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(uint64_t a1, void *a2)
{
  return *a2 * *(void *)(a1 + 8) / *(uint64_t *)(a1 + 16)
       - (*a2 * *(void *)(a1 + 8) / *(uint64_t *)(a1 + 16) * *(void *)(a1 + 16) > *a2 * *(void *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_0>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26F0C2418;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[3] * *a2;
  return ((v3 - (a1[2] + (v3 / v2 - (v3 / v2 * v2 > v3)) * v2)) & ~((v3 - (a1[2] + (v3 / v2 - (v3 / v2 * v2 > v3)) * v2)) >> 63))
       + (v3 / v2 - (v3 / v2 * v2 > v3)) * a1[1];
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_1>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C2498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1] * *a2;
  uint64_t v4 = v3 / v2 - (v3 / v2 * v2 > v3);
  return (v3 - v4 * v2) * a1[3] / v2 + v4 * a1[3] - ((v3 - v4 * v2) * a1[3] / v2 * v2 > (v3 - v4 * v2) * a1[3]);
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_2>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

void std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F0C2518;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2518;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[3] * *a2;
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v5 = v2 / v4 - (v2 / v4 * v4 > v2);
  uint64_t v6 = v2 - (a1[2] + v5 * v4);
  if (v6 < 1) {
    return v5 * v3;
  }
  uint64_t v7 = v6 * (v3 - 1);
  uint64_t v8 = a1[1];
  if (v7 / v8 * v8 >= v7) {
    uint64_t v9 = v7 / v8;
  }
  else {
    uint64_t v9 = v7 / v8 + 1;
  }
  return v9 + v5 * v3;
}

uint64_t std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_"
                     "ExEES4_S4_S4_E3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17Intege"
                                "rValue_tag_ExEES4_S4_S4_E3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat32GetSuperAdditiveRoundingFunctionEN3gtl7IntTypeINS0_17IntegerValue_tag_ExEES4_S4_S4_E3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3,std::allocator<operations_research::sat::GetSuperAdditiveRoundingFunction(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::$_3>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  double v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 3;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v71 = *((void *)a2 - 1);
          uint64_t v72 = *v12;
          if (v71 < *v12)
          {
            uint64_t *v12 = v71;
            *((void *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          uint64_t v73 = *v12;
          uint64_t v74 = v12[1];
          uint64_t v75 = *((void *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((void *)a2 - 1) = v74;
              uint64_t v93 = *v12;
              uint64_t v92 = v12[1];
              if (v92 < *v12)
              {
                uint64_t *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              uint64_t *v12 = v74;
              v12[1] = v73;
              uint64_t v100 = *((void *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              uint64_t *v12 = v75;
            }
            *((void *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          double v76 = v12 + 1;
          uint64_t v77 = (uint64_t *)v12[1];
          long long v78 = v12 + 2;
          uint64_t v79 = v12[2];
          double v80 = (uint64_t *)*v12;
          if ((uint64_t)v77 >= *v12)
          {
            if (v79 >= (uint64_t)v77)
            {
LABEL_149:
              uint64_t v77 = (uint64_t *)v79;
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 >= (uint64_t)v77) {
                return result;
              }
LABEL_150:
              *long long v78 = v94;
              *((void *)a2 - 1) = v77;
              uint64_t v97 = *v78;
              uint64_t v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                uint64_t v99 = *v12;
                if (v97 < *v12)
                {
                  uint64_t *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            uint64_t *v76 = v79;
            *long long v78 = (uint64_t)v77;
            double v81 = v12;
            int v82 = (uint64_t **)(v12 + 1);
            __n128 result = (uint64_t)v77;
            if (v79 >= (uint64_t)v80)
            {
LABEL_141:
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 >= (uint64_t)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            double v81 = v12;
            int v82 = (uint64_t **)(v12 + 2);
            __n128 result = *v12;
            if (v79 >= (uint64_t)v77)
            {
              uint64_t *v12 = (uint64_t)v77;
              v12[1] = (uint64_t)v80;
              double v81 = v12 + 1;
              int v82 = (uint64_t **)(v12 + 2);
              __n128 result = (uint64_t)v80;
              if (v79 >= (uint64_t)v80) {
                goto LABEL_149;
              }
            }
          }
          uint64_t *v81 = v79;
          double *v82 = v80;
          uint64_t v77 = (uint64_t *)result;
          goto LABEL_141;
        case 5uLL:
          return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    int64_t v16 = &v12[v14 >> 1];
    uint64_t v17 = *((void *)a2 - 1);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v20 = *v12;
      uint64_t v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *int64_t v16 = v17;
          goto LABEL_32;
        }
        *int64_t v16 = v20;
        uint64_t *v12 = v21;
        uint64_t v33 = *((void *)a2 - 1);
        if (v33 < v21)
        {
          uint64_t *v12 = v33;
LABEL_32:
          *((void *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      uint64_t *v12 = v17;
      *((void *)a2 - 1) = v20;
      uint64_t v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *int64_t v16 = *v12;
      uint64_t *v12 = v23;
      --a4;
      uint64_t v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((void *)a2 - 1))
      {
        do
        {
          uint64_t v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        BOOL v63 = v12 + 1;
        do
        {
          double v12 = v63;
          if (v63 >= (uint64_t *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      int64_t v64 = (uint64_t *)a2;
      if (v12 < (uint64_t *)a2)
      {
        int64_t v64 = (uint64_t *)a2;
        do
          uint64_t v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        uint64_t v66 = *v12;
        uint64_t v67 = *v64;
        do
        {
          uint64_t *v12 = v67;
          *int64_t v64 = v66;
          do
          {
            uint64_t v68 = v12[1];
            ++v12;
            uint64_t v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            uint64_t v69 = *--v64;
            uint64_t v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      double v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        uint64_t *v11 = *v70;
      }
      a5 = 0;
      uint64_t *v70 = v24;
    }
    else
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *int64_t v16 = v17;
          *((void *)a2 - 1) = v18;
          uint64_t v22 = *v12;
          if (*v16 < *v12)
          {
            uint64_t *v12 = *v16;
            *int64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          uint64_t *v12 = v18;
          *int64_t v16 = v19;
          uint64_t v25 = *((void *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *int64_t v16 = v25;
        }
        else
        {
          uint64_t *v12 = v17;
        }
        *((void *)a2 - 1) = v19;
      }
LABEL_24:
      float64x2_t v26 = &v12[v15];
      uint64_t v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      uint64_t v28 = v29;
      uint64_t v30 = v12[1];
      uint64_t v31 = *((void *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          uint64_t *v27 = v31;
          *((void *)a2 - 2) = v28;
          uint64_t v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            uint64_t *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          uint64_t *v27 = v30;
          uint64_t v34 = *((void *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          uint64_t *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((void *)a2 - 2) = v30;
      }
LABEL_38:
      int64_t v35 = &v12[v15];
      uint64_t v38 = v35[1];
      uint64_t v36 = v35 + 1;
      uint64_t v37 = v38;
      uint64_t v39 = v12[2];
      uint64_t v40 = *((void *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *uint64_t v36 = v40;
          *((void *)a2 - 3) = v37;
          uint64_t v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *uint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *uint64_t v36 = v39;
          uint64_t v42 = *((void *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *uint64_t v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((void *)a2 - 3) = v39;
      }
LABEL_47:
      uint64_t v43 = *v16;
      uint64_t v44 = *v27;
      uint64_t v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *int64_t v16 = v45;
        *uint64_t v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        uint64_t v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          uint64_t *v27 = v45;
          *uint64_t v36 = v44;
LABEL_55:
          uint64_t v47 = *v12;
          uint64_t *v12 = v43;
          *int64_t v16 = v47;
          --a4;
          uint64_t v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v61 = *v12;
        uint64_t *v12 = v45;
        *int64_t v16 = v61;
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      uint64_t *v27 = v43;
      *int64_t v16 = v44;
      uint64_t v27 = &v12[v14 >> 1];
      uint64_t v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      uint64_t v46 = *v12;
      uint64_t *v12 = v44;
      *int64_t v16 = v46;
      --a4;
      uint64_t v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        uint64_t v49 = v12[++v48];
      while (v49 < v24);
      uint64_t v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (uint64_t *)v51) {
            break;
          }
          uint64_t v53 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          uint64_t v52 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v52 >= v24);
      }
      if (v50 >= (uint64_t *)v51)
      {
        double v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        uint64_t *v12 = *v59;
        goto LABEL_75;
      }
      uint64_t v54 = *(void *)v51;
      double v55 = &v12[v48];
      uint64_t v56 = (uint64_t *)v51;
      do
      {
        *double v55 = v54;
        *uint64_t v56 = v49;
        do
        {
          uint64_t v57 = v55[1];
          ++v55;
          uint64_t v49 = v57;
        }
        while (v57 < v24);
        do
        {
          uint64_t v58 = *--v56;
          uint64_t v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      double v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *double v59 = v24;
      if (v50 < (uint64_t *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v12, v59);
      double v12 = v59 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(v59 + 1, (uint64_t *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        double v12 = v59 + 1;
      }
    }
  }
  int64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (uint64_t *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v12;
      do
      {
        uint64_t v90 = *v87;
        uint64_t v89 = v87[1];
        unint64_t v87 = (uint64_t *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(uint64_t *)((char *)v12 + v91 + 8) = v90;
            if (!v91)
            {
              double v88 = v12;
              goto LABEL_124;
            }
            uint64_t v90 = *(uint64_t *)((char *)v12 + v91 - 8);
            v91 -= 8;
          }
          while (v89 < v90);
          double v88 = (uint64_t *)((char *)v12 + v91 + 8);
LABEL_124:
          uint64_t *v88 = v89;
        }
        int64_t v83 = (char *)(v87 + 1);
        v86 += 8;
      }
      while (v87 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      uint64_t v96 = *v11;
      uint64_t v95 = v11[1];
      uint64_t v11 = (uint64_t *)v83;
      if (v95 < v96)
      {
        do
        {
          *(void *)int64_t v83 = v96;
          uint64_t v96 = *((void *)v83 - 2);
          v83 -= 8;
        }
        while (v95 < v96);
        *(void *)int64_t v83 = v95;
      }
      int64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (uint64_t *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(uint64_t *a1, uint64_t *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        uint64_t v30 = *a1;
        uint64_t v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      uint64_t v15 = a1[1];
      int64_t v16 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v18 = *a1;
      if (v15 < *a1)
      {
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 2;
        uint64_t v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          uint64_t v19 = a1 + 1;
          uint64_t v20 = a1 + 2;
          uint64_t v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *uint64_t v19 = v17;
        *uint64_t v20 = v18;
        uint64_t v15 = v21;
LABEL_36:
        uint64_t v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        uint64_t *v14 = v17;
        *int64_t v16 = v15;
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 1;
        uint64_t v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v15 = v17;
      uint64_t v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *int64_t v16 = v31;
      *(a2 - 1) = v15;
      uint64_t v32 = *v16;
      uint64_t v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      uint64_t v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      uint64_t v3 = a1[2];
      uint64_t v5 = a1[1];
      uint64_t v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        uint64_t *v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      uint64_t *v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      uint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v25 = *v22;
        uint64_t v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        uint64_t v26 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(uint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  uint64_t v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    uint64_t v8 = *result;
    if (*a2 < *result)
    {
      void *result = *a2;
      *a2 = v8;
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      void *result = v5;
      *a2 = v6;
      uint64_t v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      void *result = v7;
    }
    *a3 = v6;
    uint64_t v5 = v6;
  }
LABEL_11:
  uint64_t v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  uint64_t v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    uint64_t v11 = *result;
    if (*a2 < *result)
    {
      void *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  uint64_t v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        uint64_t v15 = *result;
        if (*a2 < *result)
        {
          void *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *>(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        uint64_t v37 = &a1[8 * v36];
        if (2 * v35 + 2 >= v4)
        {
          uint64_t v38 = *(void *)v37;
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (*(void *)v37 >= *(void *)v40) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v38 = *((void *)v37 + 1);
          BOOL v39 = *(void *)v37 < v38;
          if (*(void *)v37 > v38) {
            uint64_t v38 = *(void *)v37;
          }
          if (v39)
          {
            v37 += 8;
            uint64_t v36 = 2 * v35 + 2;
          }
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (v38 >= *(void *)v40)
          {
LABEL_78:
            while (1)
            {
              *(void *)uint64_t v40 = v38;
              uint64_t v40 = v37;
              if (v34 < v36) {
                break;
              }
              uint64_t v43 = (2 * v36) | 1;
              uint64_t v37 = &a1[8 * v43];
              uint64_t v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v42 = *((void *)v37 + 1);
                if (*(void *)v37 <= v42) {
                  uint64_t v38 = *((void *)v37 + 1);
                }
                if (*(void *)v37 >= v42) {
                  uint64_t v36 = v43;
                }
                else {
                  v37 += 8;
                }
                if (v38 < v41) {
                  break;
                }
              }
              else
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v36 = v43;
                if (*(void *)v37 < v41) {
                  break;
                }
              }
            }
            *(void *)uint64_t v40 = v41;
          }
        }
      }
      BOOL v15 = v35-- <= 0;
    }
    while (!v15);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = a2;
      do
      {
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7 < v6)
        {
          *(void *)uint64_t v7 = v6;
          *(void *)a1 = v8;
          uint64_t v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      uint64_t v5 = a3;
      goto LABEL_38;
    }
    uint64_t v9 = (uint64_t *)(a1 + 16);
    uint64_t v10 = a2;
    while (1)
    {
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 < *(void *)a1)
      {
        *(void *)uint64_t v10 = *(void *)a1;
        *(void *)a1 = v11;
        uint64_t v12 = *((void *)a1 + 1);
        if (v3 == 16)
        {
          uint64_t v13 = a1 + 8;
          uint64_t v14 = 1;
          if (v12 >= v11) {
            goto LABEL_26;
          }
        }
        else
        {
          BOOL v15 = v12 < *v9;
          if (v12 <= *v9) {
            uint64_t v12 = *v9;
          }
          if (v15) {
            uint64_t v13 = a1 + 16;
          }
          else {
            uint64_t v13 = a1 + 8;
          }
          if (v15) {
            uint64_t v14 = 2;
          }
          else {
            uint64_t v14 = 1;
          }
          if (v12 >= v11)
          {
LABEL_26:
            int64_t v16 = a1;
            while (1)
            {
              *(void *)int64_t v16 = v12;
              int64_t v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v18 = (2 * v14) | 1;
              uint64_t v13 = &a1[8 * v18];
              uint64_t v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v17 = *((void *)v13 + 1);
                if (*(void *)v13 <= v17) {
                  uint64_t v12 = *((void *)v13 + 1);
                }
                if (*(void *)v13 >= v17) {
                  uint64_t v14 = v18;
                }
                else {
                  v13 += 8;
                }
                if (v12 < v11) {
                  break;
                }
              }
              else
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v14 = v18;
                if (*(void *)v13 < v11) {
                  break;
                }
              }
            }
            *(void *)int64_t v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v19 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          uint64_t v26 = &v23[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(void *)int v23 = *(void *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        uint64_t v24 = *(void *)v26;
        uint64_t v25 = *((void *)v26 + 1);
        if (*(void *)v26 <= v25) {
          uint64_t v24 = *((void *)v26 + 1);
        }
        if (*(void *)v26 >= v25) {
          uint64_t v20 = v27;
        }
        else {
          v26 += 8;
        }
        *(void *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 == a2)
      {
        *(void *)uint64_t v26 = v21;
      }
      else
      {
        *(void *)uint64_t v26 = *(void *)a2;
        *(void *)a2 = v21;
        uint64_t v28 = v26 - a1 + 8;
        if (v28 >= 9)
        {
          unint64_t v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
          uint64_t v30 = &a1[8 * v29];
          uint64_t v31 = *(void *)v30;
          uint64_t v32 = *(void *)v26;
          if (*(void *)v30 < *(void *)v26)
          {
            do
            {
              *(void *)uint64_t v26 = v31;
              uint64_t v26 = v30;
              if (!v29) {
                break;
              }
              unint64_t v29 = (v29 - 1) >> 1;
              uint64_t v30 = &a1[8 * v29];
              uint64_t v31 = *(void *)v30;
            }
            while (*(void *)v30 < v32);
            *(void *)uint64_t v26 = v32;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

void *std::__function::__value_func<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> ()(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CCB93E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F0C2598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, char **a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 144);
  int v5 = *(_DWORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(v3 + 20 * (v4 ^ 1));
  if (v6 >= 0) {
    unint64_t v7 = *(void *)(v3 + 20 * (v4 ^ 1));
  }
  else {
    unint64_t v7 = -v6;
  }
  int v8 = 63 - __clz(v7);
  uint64_t v9 = *(void *)(v3 + 20 * (v5 ^ 1));
  if (v6) {
    int v10 = v8;
  }
  else {
    int v10 = 0;
  }
  if (v9 >= 0) {
    unint64_t v11 = *(void *)(v3 + 20 * (v5 ^ 1));
  }
  else {
    unint64_t v11 = -v9;
  }
  int v12 = 63 - __clz(v11);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v15 = *a3;
  uint64_t v16 = *(void *)(v3 + 20 * v5);
  if (!v9) {
    int v12 = 0;
  }
  uint64_t v17 = -v9;
  uint64_t v18 = *(void *)(v3 + 20 * v4);
  uint64_t v19 = -v6;
  int v20 = v10 + v12;
  uint64_t v21 = v6 * v9;
  if (v20 > 61)
  {
    if (v9) {
      BOOL v22 = v6 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      goto LABEL_33;
    }
    uint64_t v23 = ((v19 ^ (unint64_t)v17) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v24 = v7 * v11;
    if (v20 > 0x3E || v24 >= v23)
    {
      if (v23 < 0x1FFFFFFFFFFFFFLL)
      {
LABEL_33:
        uint64_t v39 = v21;
        uint64_t v40 = v19;
        uint64_t v28 = *(void *)&v14[8 * v5];
        uint64_t v29 = *(void *)&v14[8 * v4];
        uint64_t v30 = *(int *)(a1 + 8);
        uint64_t v31 = *(void *)&v14[8 * v30];
        v50[0] = *a3;
        v50[1] = v31;
        v50[2] = v28;
        v50[3] = v29;
        int v51 = v5;
        int v52 = v4;
        int v53 = v30;
        double v55 = 0;
        uint64_t v56 = 0;
        uint64_t v54 = 0;
        uint64_t v32 = v13;
        size_t v33 = v13 - v14;
        uint64_t v41 = v18;
        uint64_t v42 = (v13 - v14) >> 3;
        if (v13 != v14)
        {
          if ((v33 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = -v9;
          int64_t v35 = (char *)operator new(v13 - v14);
          uint64_t v36 = &v35[8 * v42];
          uint64_t v54 = v35;
          uint64_t v56 = v36;
          memcpy(v35, v14, v33);
          double v55 = v36;
          uint64_t v17 = v34;
        }
        v43[0] = v15;
        v43[1] = v31;
        v43[2] = v28;
        v43[3] = v29;
        int v44 = v5;
        int v45 = v4;
        int v46 = v30;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        long long __p = 0;
        if (v32 != v14)
        {
          if ((v33 & 0x8000000000000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = (char *)operator new(v33);
          uint64_t v38 = &v37[8 * v42];
          long long __p = v37;
          uint64_t v49 = v38;
          memcpy(v37, v14, v33);
          uint64_t v48 = v38;
        }
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()((uint64_t)v50, v41, v16, v41 * v16);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()((uint64_t)v50, v40, v17, v39);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()((uint64_t)v43, v40, v16, v16 * v40);
        operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()((uint64_t)v43, v41, v17, v41 * v17);
        if (__p)
        {
          uint64_t v48 = __p;
          operator delete(__p);
        }
        if (v54)
        {
          double v55 = v54;
          operator delete(v54);
        }
        return;
      }
    }
    else
    {
      if (v23 >= 0) {
        uint64_t v27 = v24;
      }
      else {
        uint64_t v27 = -(uint64_t)v24;
      }
      if (v27 < 0x1FFFFFFFFFFFFFLL) {
        goto LABEL_33;
      }
    }
  }
  else if (v21 < 0x1FFFFFFFFFFFFFLL)
  {
    goto LABEL_33;
  }
  if (*operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__ >= 3
    && (operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cuts.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v50, (google::glog_internal_namespace_ *)"./ortools/sat/cuts.cc", 1161);
    uint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Potential overflow in PositiveMultiplicationCutGenerator", 56);
    google::LogMessage::~LogMessage((google::LogMessage *)v50);
  }
}

void sub_23CCB97B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CCB97CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVa"
                     "riable_tag_EiEES4_S4_PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_"
                                "20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat40CreatePositiveMultiplicationCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_PNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

void operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(double *)(a1 + 24) * (double)a3 - (*(double *)(a1 + 8) - *(double *)(a1 + 16) * (double)a2) < (double)a4 + 0.0001) {
    return;
  }
  *(_OWORD *)int64_t v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  *(_OWORD *)BOOL v63 = 0u;
  int v8 = (char *)operator new(4uLL);
  *(_DWORD *)int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = v8 + 4;
  v63[1] = v8 + 4;
  v64[0] = v8 + 4;
  v63[0] = v8;
  int v10 = (char *)operator new(8uLL);
  *(void *)int v10 = -1;
  unint64_t v11 = v10 + 8;
  *(void *)&long long v65 = v10 + 8;
  *((void *)&v65 + 1) = v10 + 8;
  v64[1] = v10;
  if (a2)
  {
    int v12 = (char *)operator new(8uLL);
    uint64_t v9 = v12 + 8;
    int v13 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)int v12 = *(_DWORD *)v8;
    *((_DWORD *)v12 + 1) = v13;
    v63[0] = v12;
    v64[0] = v12 + 8;
    operator delete(v8);
    v63[1] = v12 + 8;
    uint64_t v14 = (char *)operator new(0x10uLL);
    unint64_t v11 = v14 + 16;
    *(void *)uint64_t v14 = *(void *)v10;
    *((void *)v14 + 1) = a2;
    v64[1] = v14;
    *((void *)&v65 + 1) = v14 + 16;
    operator delete(v10);
    *(void *)&long long v65 = v14 + 16;
    int v10 = v14;
    int v8 = v12;
  }
  if (a3)
  {
    uint64_t v15 = v9 - v8;
    uint64_t v16 = (v9 - v8) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (v15 >> 1 > v17) {
      unint64_t v17 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = (char *)operator new(4 * v18);
      int v20 = &v19[4 * v16];
      uint64_t v21 = &v19[4 * v18];
      *(_DWORD *)int v20 = *(_DWORD *)(a1 + 36);
      int64_t v22 = v9 - v8;
      if (v9 != v8)
      {
LABEL_14:
        unint64_t v23 = v22 - 4;
        if (v23 >= 0x1C)
        {
          uint64_t v26 = (v23 >> 2) + 1;
          uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v24 = &v9[-v27];
          uint64_t v25 = &v20[-v27];
          uint64_t v28 = &v19[4 * v16 - 16];
          uint64_t v29 = v9 - 16;
          uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)uint64_t v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            v63[0] = v25;
            v64[0] = v21;
            operator delete(v8);
            v63[1] = v20 + 4;
            uint64_t v33 = v11 - v10;
            uint64_t v34 = (v11 - v10) >> 3;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (v33 >> 2 > v35) {
              unint64_t v35 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36)
            {
              if (v36 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v37 = (char *)operator new(8 * v36);
              uint64_t v38 = (uint64_t *)&v37[8 * v34];
              uint64_t v39 = &v37[8 * v36];
              *uint64_t v38 = a3;
              int64_t v40 = v11 - v10;
              if (v11 != v10) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v37 = 0;
              uint64_t v38 = (uint64_t *)(8 * v34);
              uint64_t v39 = 0;
              *(void *)(8 * v34) = a3;
              int64_t v40 = v11 - v10;
              if (v11 != v10)
              {
LABEL_31:
                unint64_t v41 = v40 - 8;
                if (v41 >= 0x18)
                {
                  uint64_t v44 = (v41 >> 3) + 1;
                  uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v42 = &v11[-v45];
                  uint64_t v43 = &v38[v45 / 0xFFFFFFFFFFFFFFF8];
                  int v46 = &v37[8 * v34 - 16];
                  uint64_t v47 = v11 - 16;
                  uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v49 = *(_OWORD *)v47;
                    *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                    *(_OWORD *)int v46 = v49;
                    v46 -= 32;
                    v47 -= 32;
                    v48 -= 4;
                  }
                  while (v48);
                  if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_39;
                  }
                }
                else
                {
                  uint64_t v42 = v11;
                  uint64_t v43 = v38;
                }
                do
                {
                  uint64_t v50 = *((void *)v42 - 1);
                  v42 -= 8;
                  *--uint64_t v43 = v50;
                }
                while (v42 != v10);
LABEL_39:
                v64[1] = v43;
                *((void *)&v65 + 1) = v39;
                operator delete(v10);
                *(void *)&long long v65 = v38 + 1;
                goto LABEL_40;
              }
            }
            uint64_t v43 = v38;
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v24 = v9;
          uint64_t v25 = v20;
        }
        do
        {
          int v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v25 - 1) = v32;
          v25 -= 4;
        }
        while (v24 != v8);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = (char *)(4 * v16);
      uint64_t v21 = 0;
      *(_DWORD *)(4 * v16) = *(_DWORD *)(a1 + 36);
      int64_t v22 = v9 - v8;
      if (v9 != v8) {
        goto LABEL_14;
      }
    }
    uint64_t v25 = v20;
    goto LABEL_22;
  }
LABEL_40:
  *(void *)&long long v62 = 0x8000000000000002;
  *((void *)&v62 + 1) = a4;
  uint64_t v51 = *(void *)a1;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v57, (const operations_research::sat::LinearConstraint *)&v62);
  char v56 = 15;
  strcpy((char *)v55, "PositiveProduct");
  char v54 = 0;
  LOBYTE(v53) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v51, &v57, (uint64_t)v55, (uint64_t *)(a1 + 48), (uint64_t)&v53);
  if ((v54 & 0x80000000) == 0)
  {
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_42;
    }
LABEL_52:
    operator delete(v55[0]);
    int v52 = __p;
    if (!__p) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  operator delete(v53);
  if (v56 < 0) {
    goto LABEL_52;
  }
LABEL_42:
  int v52 = __p;
  if (__p)
  {
LABEL_43:
    uint64_t v61 = v52;
    operator delete(v52);
  }
LABEL_44:
  if (v58)
  {
    double v59 = v58;
    operator delete(v58);
  }
  if (v64[1])
  {
    *(void **)&long long v65 = v64[1];
    operator delete(v64[1]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
}

void sub_23CCB9CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCB9CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a29);
  _Unwind_Resume(a1);
}

void sub_23CCB9D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCB9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCB9D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CreatePositiveMultiplicationCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(long long,long long,long long)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(double *)(a1 + 24) * (double)a3 - (*(double *)(a1 + 8) - *(double *)(a1 + 16) * (double)a2) > (double)a4 + -0.0001) {
    return;
  }
  *(_OWORD *)int64_t v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  *(_OWORD *)BOOL v63 = 0u;
  int v8 = (char *)operator new(4uLL);
  *(_DWORD *)int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = v8 + 4;
  v63[1] = v8 + 4;
  v64[0] = v8 + 4;
  v63[0] = v8;
  int v10 = (char *)operator new(8uLL);
  *(void *)int v10 = -1;
  unint64_t v11 = v10 + 8;
  *(void *)&long long v65 = v10 + 8;
  *((void *)&v65 + 1) = v10 + 8;
  v64[1] = v10;
  if (a2)
  {
    int v12 = (char *)operator new(8uLL);
    uint64_t v9 = v12 + 8;
    int v13 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)int v12 = *(_DWORD *)v8;
    *((_DWORD *)v12 + 1) = v13;
    v63[0] = v12;
    v64[0] = v12 + 8;
    operator delete(v8);
    v63[1] = v12 + 8;
    uint64_t v14 = (char *)operator new(0x10uLL);
    unint64_t v11 = v14 + 16;
    *(void *)uint64_t v14 = *(void *)v10;
    *((void *)v14 + 1) = a2;
    v64[1] = v14;
    *((void *)&v65 + 1) = v14 + 16;
    operator delete(v10);
    *(void *)&long long v65 = v14 + 16;
    int v10 = v14;
    int v8 = v12;
  }
  if (a3)
  {
    uint64_t v15 = v9 - v8;
    uint64_t v16 = (v9 - v8) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (v15 >> 1 > v17) {
      unint64_t v17 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = (char *)operator new(4 * v18);
      int v20 = &v19[4 * v16];
      uint64_t v21 = &v19[4 * v18];
      *(_DWORD *)int v20 = *(_DWORD *)(a1 + 36);
      int64_t v22 = v9 - v8;
      if (v9 != v8)
      {
LABEL_14:
        unint64_t v23 = v22 - 4;
        if (v23 >= 0x1C)
        {
          uint64_t v26 = (v23 >> 2) + 1;
          uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v24 = &v9[-v27];
          uint64_t v25 = &v20[-v27];
          uint64_t v28 = &v19[4 * v16 - 16];
          uint64_t v29 = v9 - 16;
          uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)uint64_t v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            v63[0] = v25;
            v64[0] = v21;
            operator delete(v8);
            v63[1] = v20 + 4;
            uint64_t v33 = v11 - v10;
            uint64_t v34 = (v11 - v10) >> 3;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (v33 >> 2 > v35) {
              unint64_t v35 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36)
            {
              if (v36 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v37 = (char *)operator new(8 * v36);
              uint64_t v38 = (uint64_t *)&v37[8 * v34];
              uint64_t v39 = &v37[8 * v36];
              *uint64_t v38 = a3;
              int64_t v40 = v11 - v10;
              if (v11 != v10) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v37 = 0;
              uint64_t v38 = (uint64_t *)(8 * v34);
              uint64_t v39 = 0;
              *(void *)(8 * v34) = a3;
              int64_t v40 = v11 - v10;
              if (v11 != v10)
              {
LABEL_31:
                unint64_t v41 = v40 - 8;
                if (v41 >= 0x18)
                {
                  uint64_t v44 = (v41 >> 3) + 1;
                  uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v42 = &v11[-v45];
                  uint64_t v43 = &v38[v45 / 0xFFFFFFFFFFFFFFF8];
                  int v46 = &v37[8 * v34 - 16];
                  uint64_t v47 = v11 - 16;
                  uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v49 = *(_OWORD *)v47;
                    *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
                    *(_OWORD *)int v46 = v49;
                    v46 -= 32;
                    v47 -= 32;
                    v48 -= 4;
                  }
                  while (v48);
                  if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_39;
                  }
                }
                else
                {
                  uint64_t v42 = v11;
                  uint64_t v43 = v38;
                }
                do
                {
                  uint64_t v50 = *((void *)v42 - 1);
                  v42 -= 8;
                  *--uint64_t v43 = v50;
                }
                while (v42 != v10);
LABEL_39:
                v64[1] = v43;
                *((void *)&v65 + 1) = v39;
                operator delete(v10);
                *(void *)&long long v65 = v38 + 1;
                goto LABEL_40;
              }
            }
            uint64_t v43 = v38;
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v24 = v9;
          uint64_t v25 = v20;
        }
        do
        {
          int v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v25 - 1) = v32;
          v25 -= 4;
        }
        while (v24 != v8);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = (char *)(4 * v16);
      uint64_t v21 = 0;
      *(_DWORD *)(4 * v16) = *(_DWORD *)(a1 + 36);
      int64_t v22 = v9 - v8;
      if (v9 != v8) {
        goto LABEL_14;
      }
    }
    uint64_t v25 = v20;
    goto LABEL_22;
  }
LABEL_40:
  *(void *)&long long v62 = a4;
  *((void *)&v62 + 1) = 0x7FFFFFFFFFFFFFFELL;
  uint64_t v51 = *(void *)a1;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v57, (const operations_research::sat::LinearConstraint *)&v62);
  char v56 = 15;
  strcpy((char *)v55, "PositiveProduct");
  char v54 = 0;
  LOBYTE(v53) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v51, &v57, (uint64_t)v55, (uint64_t *)(a1 + 48), (uint64_t)&v53);
  if ((v54 & 0x80000000) == 0)
  {
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_42;
    }
LABEL_52:
    operator delete(v55[0]);
    int v52 = __p;
    if (!__p) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  operator delete(v53);
  if (v56 < 0) {
    goto LABEL_52;
  }
LABEL_42:
  int v52 = __p;
  if (__p)
  {
LABEL_43:
    uint64_t v61 = v52;
    operator delete(v52);
  }
LABEL_44:
  if (v58)
  {
    double v59 = v58;
    operator delete(v58);
  }
  if (v64[1])
  {
    *(void **)&long long v65 = v64[1];
    operator delete(v64[1]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
}

void sub_23CCBA198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCBA1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a21);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)&a29);
  _Unwind_Resume(a1);
}

void sub_23CCBA1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCBA1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void sub_23CCBA210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operations_research::sat::LinearConstraint::~LinearConstraint((operations_research::sat::LinearConstraint *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func()
{
}

__n128 std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F0C2618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 144);
  int64_t v5 = *(void *)(v4 + 20 * (v3 ^ 1));
  uint64_t v6 = *(void *)(v4 + 20 * v3);
  if (v5 < (uint64_t)0xFFFFFFFF80000000 || v6 == -v5) {
    return;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = *(int *)(a1 + 8);
  double v12 = *(double *)(*a2 + 8 * v11);
  double v13 = *(double *)(*a2 + 8 * v3);
  if (v12 >= (double)(v6 * v6) + (double)(v6 - v5) * (v13 - (double)v6) + 0.0001)
  {
    long long v69 = 0u;
    uint64_t v14 = operator new(4uLL);
    _DWORD *v14 = v11;
    uint64_t v15 = operator new(8uLL);
    *uint64_t v15 = 1;
    *(void *)&long long v72 = v15 + 1;
    *((void *)&v72 + 1) = v15 + 1;
    *((void *)&v71 + 1) = v15;
    uint64_t v16 = operator new(8uLL);
    *uint64_t v16 = v11;
    v16[1] = v3;
    unint64_t v17 = v16 + 2;
    *(void *)&long long v70 = v16;
    *(void *)&long long v71 = v16 + 2;
    operator delete(v14);
    *((void *)&v70 + 1) = v17;
    unint64_t v18 = operator new(0x10uLL);
    *unint64_t v18 = *v15;
    v18[1] = v5 - v6;
    uint64_t v19 = v18 + 2;
    *((void *)&v71 + 1) = v18;
    *((void *)&v72 + 1) = v18 + 2;
    operator delete(v15);
    *(void *)&long long v72 = v19;
    *(void *)&long long v69 = 0x8000000000000002;
    *((void *)&v69 + 1) = v6 * v5;
    operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v64, (const operations_research::sat::LinearConstraint *)&v69);
    char v63 = 11;
    strcpy((char *)v62, "SquareUpper");
    char v61 = 0;
    LOBYTE(v60) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(v10, &v64, (uint64_t)v62, a2, (uint64_t)&v60);
    if (v61 < 0)
    {
      operator delete(v60);
      if ((v63 & 0x80000000) == 0)
      {
LABEL_8:
        int v20 = __p;
        if (!__p)
        {
LABEL_10:
          if (v65)
          {
            uint64_t v66 = v65;
            operator delete(v65);
          }
          if (*((void *)&v71 + 1))
          {
            *(void *)&long long v72 = *((void *)&v71 + 1);
            operator delete(*((void **)&v71 + 1));
          }
          if ((void)v70)
          {
            *((void *)&v70 + 1) = v70;
            operator delete((void *)v70);
          }
          goto LABEL_16;
        }
LABEL_9:
        uint64_t v68 = v20;
        operator delete(v20);
        goto LABEL_10;
      }
    }
    else if ((v63 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v62[0]);
    int v20 = __p;
    if (!__p) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_16:
  unint64_t v21 = vcvtmd_s64_f64(v13);
  uint64_t v22 = (2 * v21) | 1;
  if (-((double)(uint64_t)floor(v13) - (double)v22 * v13) - (double)(uint64_t)(v21 * v21) < v12 + 0.0001) {
    return;
  }
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  unint64_t v23 = operator new(4uLL);
  int v24 = *(_DWORD *)(a1 + 8);
  _DWORD *v23 = v24;
  *((void *)&v70 + 1) = v23 + 1;
  *(void *)&long long v71 = v23 + 1;
  *(void *)&long long v70 = v23;
  uint64_t v25 = operator new(8uLL);
  void *v25 = 1;
  *(void *)&long long v72 = v25 + 1;
  *((void *)&v72 + 1) = v25 + 1;
  *((void *)&v71 + 1) = v25;
  uint64_t v26 = operator new(8uLL);
  int v27 = *(_DWORD *)(a1 + 12);
  *uint64_t v26 = v24;
  v26[1] = v27;
  uint64_t v28 = v26 + 2;
  *(void *)&long long v70 = v26;
  *((void *)&v70 + 1) = v26 + 2;
  *(void *)&long long v71 = v26 + 2;
  operator delete(v23);
  uint64_t v29 = (unsigned char *)v72;
  *((void *)&v70 + 1) = v28;
  uint64_t v30 = -v22;
  if ((unint64_t)v72 < *((void *)&v72 + 1))
  {
    *(void *)long long v72 = v30;
    uint64_t v31 = (uint64_t)(v29 + 8);
    goto LABEL_41;
  }
  int v32 = (unsigned char *)*((void *)&v71 + 1);
  uint64_t v33 = (uint64_t)(v72 - *((void *)&v71 + 1)) >> 3;
  unint64_t v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v35 = *((void *)&v72 + 1) - *((void *)&v71 + 1);
  if ((uint64_t)(*((void *)&v72 + 1) - *((void *)&v71 + 1)) >> 2 > v34) {
    unint64_t v34 = v35 >> 2;
  }
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v36)
  {
    if (v36 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v37 = operator new(8 * v36);
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    *uint64_t v38 = v30;
    uint64_t v31 = (uint64_t)(v38 + 1);
    uint64_t v40 = v29 - v32;
    if (v29 == v32) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  uint64_t v37 = 0;
  uint64_t v38 = (uint64_t *)(8 * v33);
  uint64_t v39 = 0;
  *(void *)(8 * v33) = v30;
  uint64_t v31 = 8 * v33 + 8;
  uint64_t v40 = v29 - v32;
  if (v29 != v32)
  {
LABEL_33:
    unint64_t v41 = v40 - 8;
    if (v41 < 0x58) {
      goto LABEL_59;
    }
    if ((unint64_t)(v32 - v37) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v42 = (v41 >> 3) + 1;
    uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v44 = &v29[-v43];
    uint64_t v38 = (uint64_t *)((char *)v38 - v43);
    uint64_t v45 = &v37[8 * v33 - 16];
    int v46 = (long long *)(v29 - 16);
    uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *uint64_t v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    uint64_t v29 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v49 = *((void *)v29 - 1);
        v29 -= 8;
        *--uint64_t v38 = v49;
      }
      while (v29 != v32);
    }
  }
LABEL_39:
  *((void *)&v71 + 1) = v38;
  *(void *)&long long v72 = v31;
  *((void *)&v72 + 1) = v39;
  if (v32) {
    operator delete(v32);
  }
LABEL_41:
  *(void *)&long long v72 = v31;
  *(void *)&long long v69 = -(uint64_t)(v21 * v21 + v21);
  *((void *)&v69 + 1) = 0x7FFFFFFFFFFFFFFELL;
  operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v55, (const operations_research::sat::LinearConstraint *)&v69);
  char v54 = 11;
  strcpy((char *)v53, "SquareLower");
  char v52 = 0;
  LOBYTE(v51) = 0;
  operations_research::sat::LinearConstraintManager::AddCut(v10, &v55, (uint64_t)v53, a2, (uint64_t)&v51);
  if ((v52 & 0x80000000) == 0)
  {
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_53:
    operator delete(v53[0]);
    uint64_t v50 = v58;
    if (!v58) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  operator delete(v51);
  if (v54 < 0) {
    goto LABEL_53;
  }
LABEL_43:
  uint64_t v50 = v58;
  if (v58)
  {
LABEL_44:
    double v59 = v50;
    operator delete(v50);
  }
LABEL_45:
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  if (*((void *)&v71 + 1))
  {
    *(void *)&long long v72 = *((void *)&v71 + 1);
    operator delete(*((void **)&v71 + 1));
  }
  if ((void)v70)
  {
    *((void *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
}

void sub_23CCBA7CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()();
  unint64_t v36 = *(_Unwind_Exception **)(v35 - 136);
  uint64_t v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(void *)(v35 - 160) = v37;
    operator delete(v37);
    uint64_t v38 = *(void **)(v35 - 192);
    if (!v38) {
LABEL_5:
    }
      _Unwind_Resume(v36);
  }
  else
  {
    uint64_t v38 = *(void **)(v35 - 192);
    if (!v38) {
      goto LABEL_5;
    }
  }
  *(void *)(v35 - 184) = v38;
  operator delete(v38);
  _Unwind_Resume(v36);
}

uint64_t std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES"
                     "4_PNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariabl"
                                "e_tag_EiEES4_PNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_PNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24CreateSquareCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_PNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateSquareCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::try_emplace_impl<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 40 * result;
      *(_DWORD *)uint64_t v18 = *a2;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *(void *)(v18 + 16) = 0x7FF0000000000000;
      *(_DWORD *)(v18 + 33) = -1;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 40 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 40 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,operations_research::sat::ImpliedBoundsProcessor::BestImpliedBoundInfo>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v41 = *(void *)(result + 32);
    if (!v41) {
      return result;
    }
LABEL_26:
    *(void *)(v41 + 32) = v15 >> 3;
    *(void *)(v41 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v19 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(result + 8) + 40 * v14);
      unint64_t v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      unint64_t v21 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      uint64_t v22 = 0;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v18->i64 + v21) & (~*(uint64_t *)((char *)v18->i64 + v21) << 7) & 0x8080808080808080;
      if (v23)
      {
        unint64_t v16 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        unint64_t v16 = ((v20 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v22 += 8;
          unint64_t v16 = (v22 + v16) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v17 = (v16 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v22;
      if ((((v17 - v21) ^ (v14 - v21)) & v13) > 7)
      {
        int v24 = v18->u8[v17];
        v18->i8[v17] = v20 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v17 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 40 * v17;
          int v27 = (long long *)(v25 + 40 * v14);
          long long v28 = *v27;
          long long v29 = v27[1];
          *(void *)(v26 + 32) = *((void *)v27 + 4);
          *(_OWORD *)uint64_t v26 = v28;
          *(_OWORD *)(v26 + 16) = v29;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v30 = (long long *)(v25 + 40 * v14);
          long long v31 = *v30;
          long long v42 = v30[1];
          uint64_t v32 = *((void *)v30 + 4);
          uint64_t v33 = 40 * v17;
          unint64_t v34 = (long long *)(v25 + 40 * v17);
          uint64_t v35 = *((void *)v34 + 4);
          long long v36 = v34[1];
          long long *v30 = *v34;
          v30[1] = v36;
          *((void *)v30 + 4) = v35;
          uint64_t v37 = *(void *)(result + 8) + v33;
          *(_OWORD *)uint64_t v37 = v31;
          *(_OWORD *)(v37 + 16) = v42;
          *(void *)(v37 + 32) = v32;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v20 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v38 = v14 - (v14 >> 3);
  BOOL v39 = v14 == 7;
  uint64_t v40 = 6;
  if (!v39) {
    uint64_t v40 = v38;
  }
  *(void *)(result + 40) = v40 - *(void *)(result + 16);
  uint64_t v41 = *(void *)(result + 32);
  if (v41) {
    goto LABEL_26;
  }
  return result;
}

void *std::vector<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::__push_back_slow_path<operations_research::sat::ImpliedBoundsProcessor::SlackInfo const&>(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - v4) >> 3)) >= 0x249249249249249) {
    unint64_t v8 = 0x492492492492492;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x16_t v9 = (char *)operator new(56 * v8);
  }
  else
  {
    int8x16_t v9 = 0;
  }
  uint64_t v10 = &v9[56 * v5];
  int8x16_t v11 = &v9[56 * v8];
  uint64_t v30 = v11;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int64_t v14 = v12 - *(void *)a2;
  if (v12 != *(void *)a2)
  {
    long long v28 = v11;
    uint64_t v29 = v5;
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = (char *)operator new(v14);
    *(void *)uint64_t v10 = v15;
    *((void *)v10 + 1) = v15;
    *((void *)v10 + 2) = &v15[4 * (v14 >> 2)];
    size_t v16 = 12 * ((v14 - 12) / 0xCuLL) + 12;
    memcpy(v15, v13, v16);
    *((void *)v10 + 1) = &v15[v16];
    int8x16_t v11 = v28;
    uint64_t v5 = v29;
  }
  unint64_t v17 = &v9[56 * v5];
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v18 = v10 + 56;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v18;
    a1[2] = v11;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v10[v19];
      unint64_t v21 = &v3[v19];
      *((void *)v20 - 6) = 0;
      *((void *)v20 - 5) = 0;
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v3[v19 - 56];
      *((void *)v20 - 5) = *(void *)&v3[v19 - 40];
      *((void *)v21 - 7) = 0;
      *((void *)v21 - 6) = 0;
      *((void *)v21 - 5) = 0;
      long long v22 = *(_OWORD *)&v3[v19 - 16];
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((_OWORD *)v20 - 1) = v22;
      v19 -= 56;
    }
    while (&v3[v19] != v4);
    unint64_t v23 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v18 = v10 + 56;
    *a1 = &v10[v19];
    a1[1] = v10 + 56;
    a1[2] = v30;
    if (v3 != v23)
    {
      int v24 = v3;
      do
      {
        uint64_t v26 = (void *)*((void *)v24 - 7);
        v24 -= 56;
        uint64_t v25 = v26;
        if (v26)
        {
          *((void *)v3 - 6) = v25;
          operator delete(v25);
        }
        uint64_t v3 = v24;
      }
      while (v24 != v23);
      uint64_t v3 = v23;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

void sub_23CCBB184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  std::__split_buffer<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::ImpliedBoundsProcessor::SlackInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 56;
        uint64_t v4 = *(void **)(v2 - 56);
        *(void *)(a1 + 16) = v2 - 56;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 48) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 56;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2698;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2698;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  void *v2 = &unk_26F0C2698;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    unint64_t v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_23CCBB38C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(__n128 *a1, __n128 *a2)
{
  a2->n128_u64[1] = 0;
  a2->n128_u64[0] = (unint64_t)&unk_26F0C2698;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  int64_t v5 = (unsigned char *)a1->n128_u64[1];
  uint64_t v4 = (unsigned char *)a1[1].n128_u64[0];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    a2->n128_u64[1] = (unint64_t)v7;
    a2[1].n128_u64[0] = (unint64_t)v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    a2[1].n128_u64[1] = (unint64_t)v8;
    memcpy(v7, v5, v6);
    a2[1].n128_u64[0] = (unint64_t)v8;
  }
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

void sub_23CCBB458(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(void *a1, uint64_t *a2, uint64_t *a3)
{
  if ((*(_DWORD *)(a1[5] + 8) & 0xFFFFFFE) == 0)
  {
    uint64_t v27 = *a3;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int64_t v5 = (unsigned int *)a1[1];
    int64_t v6 = (int *)a1[2];
    if (v5 != (unsigned int *)v6)
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = (int)*v5;
        if (!(*(void *)(*(void *)(a1[4] + 144) + 20 * (int)v9)
             + *(void *)(*(void *)(a1[4] + 144) + 20 * (int)(v9 ^ 1))))
          goto LABEL_6;
        uint64_t v10 = *v5;
        uint64_t v11 = *(void *)(*a2 + 8 * v9);
        if (v7 >= v29) {
          break;
        }
        *(void *)unint64_t v7 = v11;
        *((void *)v7 + 1) = v10;
        v7 += 16;
LABEL_5:
        uint64_t v28 = (uint64_t)v7;
LABEL_6:
        if (++v5 == (unsigned int *)v6) {
          goto LABEL_27;
        }
      }
      uint64_t v12 = a2;
      uint64_t v13 = (v7 - v8) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v29 - v8;
      if ((v29 - v8) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v17 = (char *)operator new(16 * v16);
        uint64_t v18 = &v17[16 * v13];
        *(void *)uint64_t v18 = v11;
        *((void *)v18 + 1) = v10;
        if (v7 != v8)
        {
LABEL_18:
          uint64_t v19 = v18;
          do
          {
            unint64_t v20 = v19 - 16;
            *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
            v7 -= 16;
            v19 -= 16;
          }
          while (v7 != v8);
          unint64_t v7 = v18 + 16;
          uint64_t v29 = &v17[16 * v16];
          if (!v8) {
            goto LABEL_22;
          }
LABEL_21:
          operator delete(v8);
LABEL_22:
          unint64_t v8 = v20;
          a2 = v12;
          goto LABEL_5;
        }
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = (char *)(16 * v13);
        *(void *)uint64_t v18 = v11;
        *((void *)v18 + 1) = v10;
        if (v7 != v8) {
          goto LABEL_18;
        }
      }
      unint64_t v20 = v18;
      unint64_t v7 = v18 + 16;
      uint64_t v29 = &v17[16 * v16];
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    unint64_t v7 = 0;
    unint64_t v8 = 0;
LABEL_27:
    unint64_t v21 = 126 - 2 * __clz((v7 - v8) >> 4);
    if (v7 == v8) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>((uint64_t)v8, (unint64_t)v7, (uint64_t)&v30, v22, 1);
    if (v8 != (char *)v28)
    {
      unint64_t v23 = v28 - 16;
      if (v28 - 16 > (unint64_t)v8)
      {
        int v24 = v8;
        do
        {
          uint64_t v25 = *(void *)v24;
          *(void *)int v24 = *(void *)v23;
          *(void *)unint64_t v23 = v25;
          int v26 = *((_DWORD *)v24 + 2);
          *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
          *(_DWORD *)(v23 + 8) = v26;
          v24 += 16;
          v23 -= 16;
        }
        while ((unint64_t)v24 < v23);
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_23CCBB760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20In"
                     "tegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTy"
                                "peINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat30CreateAllDifferentCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateAllDifferentCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

void operations_research::sat::anonymous namespace'::TryToGenerateAllDiffCut(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double v59 = 0;
  uint64_t v60 = 0;
  long long v57 = 0;
  uint64_t v58 = 0;
  if (a1 == a2) {
    goto LABEL_72;
  }
  uint64_t v6 = a1;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  double v10 = 0.0;
  do
  {
    double v11 = *(double *)v6;
    int v12 = *(_DWORD *)(v6 + 8);
    uint64_t v13 = operations_research::sat::IntegerTrail::InitialVariableDomain(a3, v12);
    uint64_t v55 = 0;
    unint64_t v14 = *(void *)v13;
    if ((*(void *)v13 & 1) == 0)
    {
      uint64_t v55 = *(void *)v13;
      long long v56 = *(_OWORD *)(v13 + 8);
      goto LABEL_15;
    }
    uint64_t v15 = *(long long **)(v13 + 8);
    unint64_t v16 = v14 >> 1;
    if (v14 >= 4)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = (long long *)operator new(16 * v16);
      *(void *)&long long v56 = v17;
      *((void *)&v56 + 1) = v14 >> 1;
      uint64_t v55 = 1;
      do
      {
LABEL_12:
        long long v19 = *v15++;
        *v17++ = v19;
        --v16;
      }
      while (v16);
      uint64_t v18 = v55;
      goto LABEL_14;
    }
    unint64_t v17 = &v56;
    if (v14 >= 2) {
      goto LABEL_12;
    }
    uint64_t v18 = 0;
LABEL_14:
    uint64_t v55 = v18 + (v14 & 0xFFFFFFFFFFFFFFFELL);
LABEL_15:
    operations_research::Domain::UnionWith((operations_research::Domain *)&v60, (const operations_research::Domain *)&v55, (unint64_t *)v52);
    if (v60) {
      operator delete((void *)v61);
    }
    uint64_t v60 = *(void *)&v52[0];
    long long v61 = *(_OWORD *)((char *)v52 + 8);
    if (v9 < v8)
    {
      *(_DWORD *)uint64_t v9 = v12;
      uint64_t v20 = (uint64_t)(v9 + 4);
      goto LABEL_35;
    }
    uint64_t v21 = (v9 - (char *)v7) >> 2;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v8 - (char *)v7) >> 1 > v22) {
      unint64_t v22 = (v8 - (char *)v7) >> 1;
    }
    if ((unint64_t)(v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      if (v23 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v24 = operator new(4 * v23);
      uint64_t v25 = (int *)&v24[4 * v21];
      int *v25 = v12;
      uint64_t v20 = (uint64_t)(v25 + 1);
      if (v9 == (char *)v7) {
        goto LABEL_33;
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = (int *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12;
      uint64_t v20 = 4 * v21 + 4;
      if (v9 == (char *)v7) {
        goto LABEL_33;
      }
    }
    unint64_t v26 = v9 - 4 - (char *)v7;
    if (v26 < 0xBC)
    {
      uint64_t v27 = v9;
      goto LABEL_32;
    }
    if (&v24[v9 - (char *)v7 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v9 - (char *)v7 - 4])
    {
      uint64_t v27 = v9;
      do
      {
LABEL_32:
        int v28 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--uint64_t v25 = v28;
      }
      while (v27 != (char *)v7);
      goto LABEL_33;
    }
    if (&v9[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
    {
      uint64_t v27 = v9;
      goto LABEL_32;
    }
    if ((unint64_t)((char *)v7 - v24) < 0x20)
    {
      uint64_t v27 = v9;
      goto LABEL_32;
    }
    uint64_t v34 = (v26 >> 2) + 1;
    uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v27 = &v9[-v35];
    uint64_t v25 = (int *)((char *)v25 - v35);
    long long v36 = &v24[4 * v21 - 16];
    uint64_t v37 = v9 - 16;
    uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *long long v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_32;
    }
LABEL_33:
    unint64_t v8 = &v24[4 * v23];
    long long v57 = v25;
    double v59 = v8;
    if (v7) {
      operator delete(v7);
    }
LABEL_35:
    uint64_t v58 = (unsigned char *)v20;
    unint64_t v7 = v57;
    uint64_t v29 = operations_research::SumOfKMinValueInDomain((operations_research *)&v60, (const operations_research::Domain *)((unint64_t)(v20 - (void)v57) >> 2));
    uint64_t v30 = operations_research::SumOfKMaxValueInDomain((operations_research *)&v60, (const operations_research::Domain *)((unint64_t)(v20 - (void)v7) >> 2));
    double v10 = v10 + v11;
    if (v10 >= (double)v29 && v10 <= (double)v30)
    {
      uint64_t v9 = (char *)v20;
      if (v55) {
        goto LABEL_3;
      }
      goto LABEL_4;
    }
    *(_OWORD *)int v53 = 0u;
    long long v54 = 0u;
    uint64_t v32 = v7;
    memset(v52, 0, sizeof(v52));
    if (v7 != (int *)v20)
    {
      do
        operations_research::sat::LinearConstraint::AddTerm(v52, *v32++, 1);
      while (v32 != (int *)v20);
    }
    *(void *)&v52[0] = v29;
    *((void *)&v52[0] + 1) = v30;
    operations_research::sat::LinearConstraint::LinearConstraint((operations_research::sat::LinearConstraint *)&v47, (const operations_research::sat::LinearConstraint *)v52);
    char v46 = 8;
    strcpy((char *)v45, "all_diff");
    char v44 = 0;
    LOBYTE(v43) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(a5, &v47, (uint64_t)v45, a4, (uint64_t)&v43);
    if (v44 < 0)
    {
      operator delete(v43);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_43:
        uint64_t v33 = __p;
        if (!__p) {
          goto LABEL_45;
        }
LABEL_44:
        uint64_t v51 = v33;
        operator delete(v33);
        goto LABEL_45;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_43;
    }
    operator delete(v45[0]);
    uint64_t v33 = __p;
    if (__p) {
      goto LABEL_44;
    }
LABEL_45:
    if (v48)
    {
      uint64_t v49 = v48;
      operator delete(v48);
    }
    uint64_t v58 = v7;
    if (v60) {
      operator delete((void *)v61);
    }
    uint64_t v60 = 0;
    if (v53[1])
    {
      *(void **)&long long v54 = v53[1];
      operator delete(v53[1]);
    }
    if (*(void *)&v52[1])
    {
      *((void *)&v52[1] + 1) = *(void *)&v52[1];
      operator delete(*(void **)&v52[1]);
    }
    double v10 = 0.0;
    uint64_t v9 = (char *)v7;
    if (v55) {
LABEL_3:
    }
      operator delete((void *)v56);
LABEL_4:
    v6 += 16;
  }
  while (v6 != a2);
  if (v7) {
    operator delete(v7);
  }
LABEL_72:
  if (v60) {
    operator delete((void *)v61);
  }
}

void sub_23CCBBC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v37 = *(void **)(v35 - 152);
  if (v37)
  {
    *(void *)(v35 - 144) = v37;
    operator delete(v37);
    if ((*(unsigned char *)(v35 - 128) & 1) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(unsigned char *)(v35 - 128) & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v35 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 16;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v67 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v27 = *(double *)(a2 - 16);
          double v28 = *(double *)v10;
          if (v27 >= *(double *)v10)
          {
            if (v28 < v27) {
              return result;
            }
            int v30 = *(_DWORD *)(a2 - 8);
            int v29 = *(_DWORD *)(v10 + 8);
            if (v30 >= v29) {
              return result;
            }
          }
          else
          {
            int v29 = *(_DWORD *)(v10 + 8);
            int v30 = *(_DWORD *)(a2 - 8);
          }
          *(double *)unint64_t v10 = v27;
          *(double *)(a2 - 16) = v28;
          *(_DWORD *)(v10 + 8) = v30;
          *(_DWORD *)(a2 - 8) = v29;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v11);
        case 4uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v10 + 32);
          double v31 = *(double *)(a2 - 16);
          double v32 = *(double *)(v10 + 32);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              return result;
            }
            int v34 = *(_DWORD *)(a2 - 8);
            int v33 = *(_DWORD *)(v10 + 40);
            if (v34 >= v33) {
              return result;
            }
          }
          else
          {
            int v33 = *(_DWORD *)(v10 + 40);
            int v34 = *(_DWORD *)(a2 - 8);
          }
          *(double *)(v10 + 32) = v31;
          *(double *)(a2 - 16) = v32;
          *(_DWORD *)(v10 + 40) = v34;
          *(_DWORD *)(a2 - 8) = v33;
          double v35 = *(double *)(v10 + 32);
          double v36 = *(double *)(v10 + 16);
          if (v35 >= v36)
          {
            if (v36 < v35) {
              return result;
            }
            int v38 = *(_DWORD *)(v10 + 40);
            int v37 = *(_DWORD *)(v10 + 24);
            if (v38 >= v37) {
              return result;
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 24);
            int v38 = *(_DWORD *)(v10 + 40);
          }
          *(double *)(v10 + 16) = v35;
          *(double *)(v10 + 32) = v36;
          *(_DWORD *)(v10 + 24) = v38;
          *(_DWORD *)(v10 + 40) = v37;
          double v39 = *(double *)v10;
          if (v35 >= *(double *)v10)
          {
            if (v39 < v35) {
              return result;
            }
            int v40 = *(_DWORD *)(v10 + 8);
            if (v38 >= v40) {
              return result;
            }
          }
          else
          {
            int v40 = *(_DWORD *)(v10 + 8);
          }
          *(double *)unint64_t v10 = v35;
          *(double *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 8) = v38;
          *(_DWORD *)(v10 + 24) = v40;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v56 = (v15 - 2) >> 1;
        unint64_t v57 = v56 + 1;
        uint64_t v58 = v10 + 16 * v56;
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, a3, v14 >> 4, v58);
          v58 -= 16;
          --v57;
        }
        while (v57);
        unint64_t v59 = (unint64_t)v14 >> 4;
        do
        {
          __n128 result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t *)v10, a2, a3, v59);
          a2 -= 16;
        }
        while (v59-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    uint64_t v18 = (uint64_t *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t)v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, (uint64_t)v18, v11);
      uint64_t v19 = v11;
      unint64_t v20 = v10 + 16 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10 + 16, v20 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10 + 32, v10 + 16 + 16 * v17, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v20 - 16, (uint64_t)v18, v10 + 16 + 16 * v17);
      uint64_t v21 = *(void *)v10;
      *(void *)unint64_t v10 = *v18;
      *uint64_t v18 = v21;
      int v22 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v20 + 8);
      *(_DWORD *)(v20 + 8) = v22;
      uint64_t v11 = v19;
      a5 = v67;
      if (v67) {
        goto LABEL_15;
      }
    }
    double v23 = *(double *)(v10 - 16);
    if (v23 >= *(double *)v10 && (*(double *)v10 < v23 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 8)))
    {
      __n128 result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v10, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v24);
    unint64_t v12 = v24 + 16;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v24 + 16, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,false>(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 16;
      goto LABEL_20;
    }
  }
  unint64_t v41 = v10 + 16;
  BOOL v43 = v10 == a2 || v41 == a2;
  if (a5)
  {
    if (v43) {
      return result;
    }
    uint64_t v44 = 0;
    unint64_t v45 = v10;
LABEL_50:
    unint64_t v46 = v45;
    unint64_t v45 = v41;
    double v47 = *(double *)(v46 + 16);
    double v48 = *(double *)v46;
    if (v47 >= *(double *)v46)
    {
      if (v48 < v47) {
        goto LABEL_49;
      }
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
      if (v49 >= v50) {
        goto LABEL_49;
      }
    }
    else
    {
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
    }
    *(double *)(v46 + 16) = v48;
    *(_DWORD *)(v45 + 8) = v50;
    unint64_t v51 = v10;
    if (v46 == v10) {
      goto LABEL_48;
    }
    uint64_t v52 = v44;
    while (1)
    {
      double v55 = *(double *)(v10 + v52 - 16);
      if (v47 >= v55)
      {
        if (v55 < v47)
        {
          unint64_t v51 = v10 + v52;
          goto LABEL_48;
        }
        int v53 = *(_DWORD *)(v10 + v52 - 8);
        if (v49 >= v53)
        {
          unint64_t v51 = v46;
LABEL_48:
          *(double *)unint64_t v51 = v47;
          *(_DWORD *)(v51 + 8) = v49;
LABEL_49:
          unint64_t v41 = v45 + 16;
          v44 += 16;
          if (v45 + 16 == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v53 = *(_DWORD *)(v10 + v52 - 8);
      }
      v46 -= 16;
      uint64_t v54 = v10 + v52;
      *(double *)uint64_t v54 = v55;
      *(_DWORD *)(v54 + 8) = v53;
      v52 -= 16;
      if (!v52)
      {
        unint64_t v51 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v43)
  {
    for (unint64_t i = v10 + 8; ; i += 16)
    {
      unint64_t v62 = v10;
      unint64_t v10 = v41;
      double v63 = *(double *)(v62 + 16);
      double v64 = *(double *)v62;
      if (v63 < *(double *)v62) {
        break;
      }
      if (v64 >= v63)
      {
        int v65 = *(_DWORD *)(v62 + 24);
        if (v65 < *(_DWORD *)(v62 + 8)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      v41 += 16;
      if (v10 + 16 == a2) {
        return result;
      }
    }
    int v65 = *(_DWORD *)(v62 + 24);
LABEL_84:
    for (unint64_t j = i; ; j -= 16)
    {
      *(double *)(j + 8) = v64;
      *(_DWORD *)(j + 16) = *(_DWORD *)j;
      double v64 = *(double *)(j - 24);
      if (v63 >= v64 && (v64 < v63 || v65 >= *(_DWORD *)(j - 16))) {
        break;
      }
    }
    *(double *)(j - 8) = v63;
    *(_DWORD *)unint64_t j = v65;
    goto LABEL_79;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1 || v4 >= v3 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
  {
    double v5 = *(double *)a3;
    if (*(double *)a3 < v3)
    {
      int v6 = *(_DWORD *)(a3 + 8);
LABEL_16:
      *(double *)a1 = v5;
      *(double *)a3 = v4;
      int v16 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a3 + 8) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      int v6 = *(_DWORD *)(a3 + 8);
      int v10 = *(_DWORD *)(a2 + 8);
      if (v6 < v10) {
        goto LABEL_16;
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v3;
    *(double *)a2 = v4;
    int v17 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a2 + 8) = v17;
    double v18 = *(double *)a3;
    if (*(double *)a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      int v19 = *(_DWORD *)(a3 + 8);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v18;
    *(double *)a3 = v4;
    *(_DWORD *)(a2 + 8) = v19;
    uint64_t result = 2;
    *(_DWORD *)(a3 + 8) = v17;
    return result;
  }
  double v7 = *(double *)a3;
  if (*(double *)a3 >= v3)
  {
    if (v3 < v7) {
      return 0;
    }
    int v9 = *(_DWORD *)(a3 + 8);
    int v8 = *(_DWORD *)(a2 + 8);
    if (v9 >= v8) {
      return 0;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v7;
  *(double *)a3 = v3;
  *(_DWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a3 + 8) = v8;
  double v11 = *(double *)a2;
  double v12 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a2 + 8);
LABEL_14:
    *(double *)a1 = v11;
    *(double *)a2 = v12;
    *(_DWORD *)(a1 + 8) = v14;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 8) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    int v14 = *(_DWORD *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 8);
    if (v14 < v13) {
      goto LABEL_14;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  double v2 = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  double v4 = *(double *)(a2 - 16);
  if (*(double *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 8)))
  {
    for (unint64_t i = a1 + 16; i < a2 && v2 >= *(double *)i && (*(double *)i < v2 || v3 >= *(_DWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      double v6 = *(double *)(i + 16);
      i += 16;
      double v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 8); a2 -= 16)
    {
      double v8 = *(double *)(a2 - 16);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *(double *)i;
    double v10 = *(double *)a2;
    do
    {
      *(double *)unint64_t i = v10;
      *(double *)a2 = v9;
      double v11 = *(double *)(i + 16);
      i += 16;
      double v9 = v11;
      int v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 8)))
      {
        double v13 = *(double *)(i + 16);
        i += 16;
        double v9 = v13;
      }
      do
      {
        do
        {
          double v14 = *(double *)(a2 - 16);
          a2 -= 16;
          double v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(void *)a1 = *(void *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    double v5 = *(double *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 24) >= v4)) {
      break;
    }
    v2 += 16;
  }
  unint64_t v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      double v7 = *(double *)(a2 - 16);
      a2 -= 16;
      double v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        double v9 = *(double *)(a2 - 16);
        a2 -= 16;
        double v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 16;
  }
  else
  {
    double v12 = *(double *)a2;
    unint64_t v13 = a1 + v2 + 16;
    unint64_t v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *(double *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        double v17 = *(double *)(v14 - 16);
        v14 -= 16;
        double v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v19 = *(double *)(a2 - 16);
      double v20 = *(double *)a1;
      if (v19 < *(double *)a1)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v19;
        *(double *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v22 = *(_DWORD *)(a2 - 8);
        int v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      double v23 = *(double *)(a2 - 16);
      double v24 = *(double *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v26 = *(_DWORD *)(a2 - 8);
        int v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v23;
      *(double *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      double v27 = *(double *)(a1 + 32);
      double v28 = *(double *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v30 = *(_DWORD *)(a1 + 40);
        int v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 24);
        int v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v27;
      *(double *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      double v31 = *(double *)a1;
      if (v27 < *(double *)a1)
      {
        int v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v27;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        int v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        double v11 = *(double *)v7;
        double v12 = *(double *)v6;
        if (*(double *)v7 >= *(double *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)uint64_t v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          double v18 = *(double *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            int v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(double *)uint64_t v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a2, a3);
  double v11 = *(double *)a4;
  double v12 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    int v14 = *(_DWORD *)(a4 + 8);
    int v13 = *(_DWORD *)(a3 + 8);
    if (v14 >= v13) {
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a3 + 8);
    int v14 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v11;
  *(double *)a4 = v12;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a4 + 8) = v13;
  double v15 = *(double *)a3;
  double v16 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    int v18 = *(_DWORD *)(a3 + 8);
    int v17 = *(_DWORD *)(a2 + 8);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 8);
    int v18 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v15;
  *(double *)a3 = v16;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  double v19 = *(double *)a2;
  double v20 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    int v21 = *(_DWORD *)(a1 + 8);
    int v22 = *(_DWORD *)(a2 + 8);
LABEL_7:
    *(double *)a1 = v19;
    *(double *)a2 = v20;
    *(_DWORD *)(a1 + 8) = v22;
    *(_DWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    int v22 = *(_DWORD *)(a2 + 8);
    int v21 = *(_DWORD *)(a1 + 8);
    if (v22 < v21) {
      goto LABEL_7;
    }
  }
LABEL_16:
  double v23 = *(double *)a5;
  double v24 = *(double *)a4;
  if (*(double *)a5 >= *(double *)a4)
  {
    if (v24 < v23) {
      return result;
    }
    int v26 = *(_DWORD *)(a5 + 8);
    int v25 = *(_DWORD *)(a4 + 8);
    if (v26 >= v25) {
      return result;
    }
  }
  else
  {
    int v25 = *(_DWORD *)(a4 + 8);
    int v26 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v23;
  *(double *)a5 = v24;
  *(_DWORD *)(a4 + 8) = v26;
  *(_DWORD *)(a5 + 8) = v25;
  double v27 = *(double *)a4;
  double v28 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v28 < v27) {
      return result;
    }
    int v30 = *(_DWORD *)(a4 + 8);
    int v29 = *(_DWORD *)(a3 + 8);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a3 + 8);
    int v30 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v27;
  *(double *)a4 = v28;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a4 + 8) = v29;
  double v31 = *(double *)a3;
  double v32 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v32 < v31) {
      return result;
    }
    int v34 = *(_DWORD *)(a3 + 8);
    int v33 = *(_DWORD *)(a2 + 8);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v31;
  *(double *)a3 = v32;
  *(_DWORD *)(a2 + 8) = v34;
  *(_DWORD *)(a3 + 8) = v33;
  double v35 = *(double *)a2;
  double v36 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    int v37 = *(_DWORD *)(a1 + 8);
    int v38 = *(_DWORD *)(a2 + 8);
LABEL_24:
    *(double *)a1 = v35;
    *(double *)a2 = v36;
    *(_DWORD *)(a1 + 8) = v38;
    *(_DWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    int v38 = *(_DWORD *)(a2 + 8);
    int v37 = *(_DWORD *)(a1 + 8);
    if (v38 < v37) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = *(double *)(v8 + 16);
        if (*(double *)v8 < v10 || v10 >= *(double *)v8 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v8 + 24))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      double v11 = *(double *)v8;
      double v12 = *(double *)a4;
      if (*(double *)v8 >= *(double *)a4)
      {
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(v8 + 8);
          int v13 = *(_DWORD *)(a4 + 8);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(a4 + 8);
          int v14 = *(_DWORD *)(v8 + 8);
        }
        *(double *)a4 = v11;
        *(_DWORD *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 16 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              double v18 = *(double *)(v15 + 16);
              if (*(double *)v15 < v18
                || v18 >= *(double *)v15 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v15 + 24))
              {
                v15 += 16;
                uint64_t v7 = v17;
              }
            }
            double v19 = *(double *)v15;
            if (*(double *)v15 < v12) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 8);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *(double *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(double *)uint64_t v15 = v12;
        *(_DWORD *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    int v6 = *((_DWORD *)result + 2);
    uint64_t v7 = (double *)result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        double v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && SLODWORD(v8[2 * v9 + 1]) < *((_DWORD *)v7 + 6))
        {
          v7 += 2;
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (double *)(a2 - 16))
    {
      *(void *)uint64_t v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    double *v7 = *(double *)(a2 - 16);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 8);
    *(void *)(a2 - 16) = v5;
    *(_DWORD *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &result[2 * (v14 >> 1)];
      double v17 = *(double *)v16;
      double v18 = *v7;
      if (*(double *)v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        int v20 = result[2 * v15 + 1];
        int v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19) {
          return result;
        }
      }
      else
      {
        int v19 = *((_DWORD *)v7 + 2);
        int v20 = *((_DWORD *)v16 + 2);
      }
      double *v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          int v21 = &result[2 * v15];
          double v24 = *(double *)v21;
          if (*(double *)v21 < v18)
          {
            int v22 = *((_DWORD *)v21 + 2);
          }
          else
          {
            if (v18 < v24) {
              break;
            }
            int v22 = result[2 * v15 + 1];
            if (v22 >= v19) {
              break;
            }
          }
          *(double *)uint64_t v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          uint64_t v16 = &result[2 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      int v21 = v16;
LABEL_19:
      *(double *)int v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

char *std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 2;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v20 = v18;
      int v21 = operator new(4 * v18);
      unint64_t v18 = v20;
      uint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 2;
      uint64_t v11 = __src;
    }
    else
    {
      int v21 = 0;
    }
    BOOL v43 = &v21[4 * v13];
    uint64_t v44 = &v43[4 * a5];
    unint64_t v45 = v43;
    unint64_t v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    unint64_t v45 = &v21[4 * v13];
    unint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v45 = &v43[v48];
    unint64_t v46 = &v11[v48];
    int v49 = (long long *)(v11 + 16);
    int v50 = &v21[4 * v13 + 16];
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *int v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        int v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)unint64_t v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    uint64_t v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      double v55 = v8;
      uint64_t v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_58;
      }
      double v55 = v8;
      uint64_t v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      double v55 = &v8[-v57];
      uint64_t v54 = &v43[-v57];
      uint64_t v58 = 4 * v13 - 16;
      unint64_t v59 = &v21[v58];
      uint64_t v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *unint64_t v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          int v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    double v64 = &v21[4 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[4 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 2;
  if (v23 >= a5)
  {
    double v24 = &__src[4 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    double v24 = &__src[4 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      uint64_t v13 = v7 >> 2;
      uint64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  double v27 = &v8[4 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 2;
  int v30 = (int *)(v26 - 4 * a5);
  double v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    int v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 4;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      double v31 = (_DWORD *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      double v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 2) + 1;
        uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        int v30 = (int *)((char *)v30 + v38);
        double v31 = (_DWORD *)(v26 + v38);
        double v39 = (_OWORD *)(v26 + 16);
        int v40 = (long long *)(4 * v29 + 4 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *double v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      int v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    int v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    uint64_t v8 = v67;
  }
  if (v24 != v11)
  {
    BOOL v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  double v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            int *v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                int *v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              int *v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              int *v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          double v76 = v12 + 1;
          uint64_t v77 = (int *)v12[1];
          long long v78 = v12 + 2;
          int v79 = v12[2];
          double v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              *long long v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  int *v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            *long long v78 = (int)v77;
            double v81 = v12;
            int v82 = v12 + 1;
            uint64_t result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            double v81 = v12;
            int v82 = v12 + 2;
            uint64_t result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              int *v12 = (int)v77;
              v12[1] = (int)v80;
              double v81 = v12 + 1;
              int v82 = v12 + 2;
              uint64_t result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          int *v81 = v79;
          _DWORD *v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *unint64_t v16 = v17;
          goto LABEL_32;
        }
        *unint64_t v16 = v20;
        int *v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          int *v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      int *v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unint64_t v16 = *v12;
      int *v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        int v63 = v12 + 1;
        do
        {
          double v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      double v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        double v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          int *v12 = v67;
          *double v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      unint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        int *v11 = *v70;
      }
      a5 = 0;
      int *v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *unint64_t v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            int *v12 = *v16;
            *unint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          int *v12 = v18;
          *unint64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *unint64_t v16 = v25;
        }
        else
        {
          int *v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      unint64_t v26 = &v12[v15];
      int v29 = *(v26 - 1);
      double v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          int *v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            int *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          int *v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          int *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      unint64_t v35 = &v12[v15];
      int v38 = v35[1];
      unint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *unint64_t v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *unint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *unint64_t v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *unint64_t v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *unint64_t v16 = v45;
        *unint64_t v36 = v43;
        unint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          int *v27 = v45;
          *unint64_t v36 = v44;
LABEL_55:
          int v47 = *v12;
          int *v12 = v43;
          *unint64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        int *v12 = v45;
        *unint64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      int *v27 = v43;
      *unint64_t v16 = v44;
      double v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      int *v12 = v44;
      *unint64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      int v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        unint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        int *v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      double v55 = &v12[v48];
      unint64_t v56 = (int *)v51;
      do
      {
        *double v55 = v54;
        *unint64_t v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      unint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *unint64_t v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(v12, v59);
      double v12 = v59 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *,false>(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        double v12 = v59 + 1;
      }
    }
  }
  int64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        unint64_t v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              double v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          double v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          int *v88 = v89;
        }
        int64_t v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      uint64_t v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)int64_t v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)int64_t v83 = v95;
      }
      int64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> *>(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        *int v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        int *v14 = v17;
        *unint64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unint64_t v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        int *v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      int *v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v5 = *(unsigned char **)(a2 + 24);
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 32) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

void sub_23CCBDF50(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    int v5 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v5 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2718;
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        int v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        int64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2718;
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        int v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        int64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x68uLL);
  void *v2 = &unk_26F0C2718;
  std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CCBE184(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C2718;
  return std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(uint64_t a1)
{
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMinOf(operations_research::sat::LinearExpression const&,std::vector<operations_research::sat::LinearExpression> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  long long v78 = 0;
  int v79 = 0;
  uint64_t v77 = 0;
  int64_t v7 = v5 - v6;
  uint64_t v58 = v4;
  if (v5 == v6)
  {
    int v11 = *(_DWORD *)(a1 + 60);
    unint64_t v59 = 0;
    if (v11 < 1) {
      goto LABEL_26;
    }
    goto LABEL_6;
  }
  if (v7 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = operator new((unint64_t)v7 >> 1);
  size_t v9 = v7 >> 3;
  uint64_t v77 = v8;
  int v79 = (char *)&v8[v9];
  memset(v8, 255, v9 * 4);
  long long v78 = v79;
  int v10 = operator new(v7);
  memset_pattern16(v10, &unk_23CE7EE40, v7 & 0xFFFFFFFFFFFFFFF8);
  int v11 = *(_DWORD *)(a1 + 60);
  unint64_t v59 = (double *)v10;
  if (v11 >= 1)
  {
LABEL_6:
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
    {
      for (unint64_t i = 0; (uint64_t)i < v11; ++i)
      {
        int v13 = *(int **)(a1 + 8);
        BOOL v60 = *(int **)(a1 + 16);
        if (v13 != v60)
        {
          uint64_t v14 = *(void *)(a1 + 64);
          uint64_t v15 = *(void *)(a1 + 72);
          do
          {
            int v16 = *v13;
            uint64_t v17 = *(void *)(a1 + 88);
            LODWORD(v66[0]) = i;
            *(void *)&long long v68 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3);
            if ((unint64_t)v68 <= i) {
              google::MakeCheckOpString<int,unsigned long>((int)v66, (int)&v68, "target_index < exprs.size()");
            }
            double v18 = *(double *)(*a2 + 8 * v16);
            uint64_t CoefficientOfPositiveVar = operations_research::sat::GetCoefficientOfPositiveVar(v16, (void *)(v14 + 56 * i));
            int v61 = v13;
            double v20 = v18 * (double)CoefficientOfPositiveVar;
            uint64_t v14 = *(void *)(a1 + 64);
            uint64_t v15 = *(void *)(a1 + 72);
            if (v15 == v14)
            {
              uint64_t v14 = *(void *)(a1 + 72);
            }
            else
            {
              uint64_t v21 = 0;
              unint64_t v22 = 0;
              do
              {
                if (i != v22)
                {
                  double v23 = *(double *)(*a2 + 8 * *(int *)(*(void *)(a1 + 32) + 4 * v22));
                  uint64_t v24 = operations_research::sat::GetCoefficientOfPositiveVar(v16, (void *)(v14 + v21));
                  uint64_t v25 = *(void *)(v17 + 144);
                  uint64_t v26 = (v24 - CoefficientOfPositiveVar) * *(void *)(v25 + 20 * (v16 ^ 1));
                  if (*(void *)(v25 + 20 * v16) * (v24 - CoefficientOfPositiveVar) <= -v26) {
                    uint64_t v27 = -v26;
                  }
                  else {
                    uint64_t v27 = *(void *)(v25 + 20 * v16) * (v24 - CoefficientOfPositiveVar);
                  }
                  double v20 = v20 + (double)v27 * v23;
                  uint64_t v14 = *(void *)(a1 + 64);
                  uint64_t v15 = *(void *)(a1 + 72);
                }
                ++v22;
                v21 += 56;
              }
              while (0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 3) > v22);
            }
            if (v20 < v59[v16])
            {
              v77[v16] = i;
              v59[v16] = v20;
            }
            ++v13;
          }
          while (v61 + 1 != v60);
          int v11 = *(_DWORD *)(a1 + 60);
        }
      }
    }
  }
LABEL_26:
  uint64_t v28 = *(void *)(a1 + 96);
  int v31 = *(void **)(v28 + 32);
  int v29 = (void *)(v28 + 32);
  int v30 = v31;
  if (!v31) {
    goto LABEL_37;
  }
  int v32 = v29;
  do
  {
    unint64_t v33 = v30[4];
    BOOL v34 = v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v33 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
      int v35 = v30;
    }
    else {
      int v35 = v30 + 1;
    }
    if (v34) {
      int v32 = v30;
    }
    int v30 = (void *)*v35;
  }
  while (*v35);
  if (v32 != v29 && v32[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
    uint64_t v36 = v32[5];
  }
  else {
LABEL_37:
  }
    uint64_t v36 = 0;
  uint64_t v73 = v36;
  long long v74 = xmmword_23CE88DC0;
  long long v75 = 0u;
  long long v76 = 0u;
  double v37 = *(double *)(*a2 + 8 * *(int *)(a1 + 56));
  operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, *(_DWORD *)(a1 + 56), -1);
  int v38 = *(int **)(a1 + 8);
  int v39 = *(int **)(a1 + 16);
  if (v38 != v39)
  {
    int v40 = v77;
    do
    {
      uint64_t v41 = *v38;
      int v42 = *v38;
      uint64_t v43 = operations_research::sat::GetCoefficientOfPositiveVar(*v38, (void *)(*(void *)(a1 + 64) + 56 * (int)v40[v41]));
      if (v43) {
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, v42, v43);
      }
      double v37 = v37 - (double)v43 * *(double *)(*a2 + 8 * v41);
      ++v38;
    }
    while (v38 != v39);
  }
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v44 = 0;
    do
    {
      int v62 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v44);
      int v46 = *(int **)(a1 + 8);
      int v45 = *(int **)(a1 + 16);
      uint64_t v47 = *(void *)(*(void *)(a1 + 64) + 56 * v44 + 48);
      if (v46 != v45)
      {
        uint64_t v48 = *(void *)(a1 + 88);
        int v49 = v77;
        do
        {
          uint64_t v50 = *v46;
          uint64_t v51 = v49[v50];
          if (v44 != v51)
          {
            uint64_t v52 = operations_research::sat::GetCoefficientOfPositiveVar(v50, (void *)(*(void *)(a1 + 64) + 56 * (int)v51));
            uint64_t v53 = operations_research::sat::GetCoefficientOfPositiveVar(v50, (void *)(*(void *)(a1 + 64) + 56 * v44));
            uint64_t v54 = *(void *)(v48 + 144);
            uint64_t v55 = (v53 - v52) * *(void *)(v54 + 20 * (int)(v50 ^ 1));
            if (*(void *)(v54 + 20 * (int)v50) * (v53 - v52) <= -v55) {
              uint64_t v56 = -v55;
            }
            else {
              uint64_t v56 = *(void *)(v54 + 20 * (int)v50) * (v53 - v52);
            }
            v47 += v56;
          }
          ++v46;
        }
        while (v46 != v45);
      }
      if (v47) {
        operations_research::sat::LinearConstraintBuilder::AddTerm(&v73, v62, v47);
      }
      double v37 = v37 - (double)v47 * *(double *)(*a2 + 8 * v62);
      ++v44;
    }
    while (v44 < *(int *)(a1 + 60));
  }
  if (v37 > 0.01)
  {
    operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v73, (uint64_t)&v68);
    char v67 = 6;
    strcpy((char *)v66, "LinMax");
    char v65 = 0;
    LOBYTE(v64) = 0;
    operations_research::sat::LinearConstraintManager::AddCut(v58, &v68, (uint64_t)v66, a2, (uint64_t)&v64);
    if (v65 < 0)
    {
      operator delete(v64);
      if ((v67 & 0x80000000) == 0)
      {
LABEL_59:
        int v57 = __p;
        if (!__p) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
    }
    else if ((v67 & 0x80000000) == 0)
    {
      goto LABEL_59;
    }
    operator delete(v66[0]);
    int v57 = __p;
    if (!__p)
    {
LABEL_61:
      if (v69)
      {
        unint64_t v70 = v69;
        operator delete(v69);
      }
      goto LABEL_63;
    }
LABEL_60:
    int v72 = v57;
    operator delete(v57);
    goto LABEL_61;
  }
LABEL_63:
  if (*((void *)&v75 + 1))
  {
    *(void *)&long long v76 = *((void *)&v75 + 1);
    operator delete(*((void **)&v75 + 1));
  }
  if (v59) {
    operator delete(v59);
  }
  if (v77) {
    operator delete(v77);
  }
}

void sub_23CCBE7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCBE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (v36)
  {
    operator delete(v36);
    int v39 = *(void **)(v37 - 144);
    if (!v39) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v39 = *(void **)(v37 - 144);
    if (!v39) {
      goto LABEL_3;
    }
  }
  operator delete(v39);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEER"
                     "KNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariabl"
                                "e_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS"
                                "4_EEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24CreateLinMaxCutGeneratorEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorINS0_16LinearExpressionENS5_9allocatorIS7_EEEERKNS6_IS4_NS8_IS4_EEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateLinMaxCutGenerator(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::LinearExpression> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *(unsigned char **)(a2 + 24);
  size_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    int v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  uint64_t v14 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<operations_research::sat::LinearExpression>::__init_with_size[abi:ne180100]<operations_research::sat::LinearExpression*,operations_research::sat::LinearExpression*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

void sub_23CCBEA0C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int64_t v11 = *(unsigned char **)(a2 + 32);
  int v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  return a1;
}

void sub_23CCBEB30(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2798;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2798;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = &unk_26F0C2798;
  std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CCBEC98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C2798;
  return std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *a3;
  if ((*(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(*(void *)(a1 + 80))
                  + 8) & 0xFFFFFFE) == 0)
  {
    uint64_t v80 = v5;
    double v81 = a2;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(v4 + 16);
    uint64_t v82 = v4;
    if (v6 != v7)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(int *)(v7 + 4 * v8);
        int v13 = *(void **)(v4 + 72);
        uint64_t v14 = *(void *)(*(void *)(v4 + 64) + 144);
        int64_t v15 = -*(void *)(v14 + 20 * (*(_DWORD *)(v13[5] + 4 * v12) ^ 1));
        int64_t v16 = *(void *)(v14 + 20 * *(int *)(v13[8] + 4 * v12));
        if (v16 <= v15) {
          goto LABEL_6;
        }
        unsigned __int32 v17 = *(_DWORD *)(*(void *)(v4 + 40) + 4 * v8);
        if (*(_DWORD *)(v13[2] + 4 * v12) >= 0xFFFFFFFE) {
          int v18 = -2;
        }
        else {
          int v18 = *(_DWORD *)(v13[2] + 4 * v12);
        }
        if ((unint64_t)v10 < v11)
        {
          v10->n128_u32[0] = v8;
          *(unint64_t *)((char *)v10->n128_u64 + 4) = v15;
          v10->n128_u8[12] = 1;
          *(unsigned __int32 *)((char *)&v10->n128_u32[3] + 1) = v17;
          int v19 = (__n128 *)((char *)v10 + 24);
          v10[1].n128_u32[1] = v18;
          if ((unint64_t)&v10[1].n128_u64[1] >= v11) {
            goto LABEL_30;
          }
          goto LABEL_4;
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3) + 1;
        if (v20 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3) > v20) {
          unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v9) >> 3) >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v22 = (char *)operator new(24 * v21);
        }
        else
        {
          unint64_t v22 = 0;
        }
        double v23 = &v22[8 * (((char *)v10 - (char *)v9) >> 3)];
        *(_DWORD *)double v23 = v8;
        *(void *)(v23 + 4) = v15;
        v23[12] = 1;
        *(_DWORD *)(v23 + 13) = v17;
        *((_DWORD *)v23 + 5) = v18;
        if (v10 == v9)
        {
          uint64_t v26 = &v22[8 * (((char *)v10 - (char *)v9) >> 3)];
          unint64_t v11 = (unint64_t)&v22[24 * v21];
          int v19 = (__n128 *)(v23 + 24);
          if (v9) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v24 = &v22[8 * (((char *)v10 - (char *)v9) >> 3)];
          do
          {
            long long v25 = *(long long *)((char *)&v10[-2] + 8);
            uint64_t v26 = v24 - 24;
            *((void *)v24 - 1) = v10[-1].n128_u64[1];
            *(_OWORD *)(v24 - 24) = v25;
            int v10 = (__n128 *)((char *)v10 - 24);
            v24 -= 24;
          }
          while (v10 != v9);
          unint64_t v11 = (unint64_t)&v22[24 * v21];
          int v19 = (__n128 *)(v23 + 24);
          if (v9) {
LABEL_28:
          }
            operator delete(v9);
        }
        int v9 = (__n128 *)v26;
        uint64_t v4 = v82;
        if ((unint64_t)v19 >= v11)
        {
LABEL_30:
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v9) >> 3) + 1;
          if (v27 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3) > v27) {
            unint64_t v27 = 0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v9) >> 3) >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28)
          {
            if (v28 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v29 = (char *)operator new(24 * v28);
          }
          else
          {
            int v29 = 0;
          }
          int v30 = &v29[8 * (((char *)v19 - (char *)v9) >> 3)];
          unint64_t v11 = (unint64_t)&v29[24 * v28];
          *(_DWORD *)int v30 = v8;
          *(void *)(v30 + 4) = v16;
          v30[12] = 0;
          *(_DWORD *)(v30 + 13) = v17;
          *(_WORD *)(v30 + 17) = v87;
          v30[19] = BYTE2(v87);
          *((_DWORD *)v30 + 5) = v18;
          int v10 = (__n128 *)(v30 + 24);
          if (v19 == v9) {
            goto LABEL_43;
          }
          do
          {
            long long v31 = *(long long *)((char *)&v19[-2] + 8);
            *((void *)v30 - 1) = v19[-1].n128_u64[1];
            *(_OWORD *)(v30 - 24) = v31;
            v30 -= 24;
            int v19 = (__n128 *)((char *)v19 - 24);
          }
          while (v19 != v9);
          if (v9) {
LABEL_43:
          }
            operator delete(v9);
          int v9 = (__n128 *)v30;
          uint64_t v4 = v82;
          goto LABEL_5;
        }
LABEL_4:
        v19->n128_u32[0] = v8;
        *(unint64_t *)((char *)v19->n128_u64 + 4) = v16;
        v19->n128_u8[12] = 0;
        *(unsigned __int32 *)((char *)&v19->n128_u32[3] + 1) = v17;
        *(unsigned __int16 *)((char *)v19[1].n128_u16 + 1) = v87;
        v19[1].n128_u8[3] = BYTE2(v87);
        v19[1].n128_u32[1] = v18;
        int v10 = (__n128 *)((char *)v19 + 24);
LABEL_5:
        uint64_t v7 = *(void *)(v4 + 8);
        uint64_t v6 = *(void *)(v4 + 16);
LABEL_6:
        if (++v8 >= (unint64_t)((v6 - v7) >> 2)) {
          goto LABEL_48;
        }
      }
    }
    int v10 = 0;
    int v9 = 0;
LABEL_48:
    unint64_t v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    if (v10 == v9) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>((unint64_t)v9, v10, v33, 1);
    if (v10 != v9)
    {
      BOOL v34 = 0;
      int v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      int v38 = v9;
      while (1)
      {
        BOOL v41 = v38->n128_u8[12] != 0;
        if (!v38->n128_u8[12]) {
          break;
        }
        if (v36 < (int *)v35)
        {
          __n128 v39 = *v38;
          *((void *)v36 + 2) = v38[1].n128_u64[0];
          *(__n128 *)uint64_t v36 = v39;
          int v40 = (char *)(v36 + 6);
        }
        else
        {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - v37) >> 3) + 1;
          if (v42 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v35 - v37) >> 3) > v42) {
            unint64_t v42 = 0x5555555555555556 * ((v35 - v37) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v35 - v37) >> 3) >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43)
          {
            if (v43 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v44 = (char *)operator new(24 * v43);
          }
          else
          {
            uint64_t v44 = 0;
          }
          __n128 v73 = *v38;
          long long v74 = &v44[8 * (((char *)v36 - v37) >> 3)];
          *((void *)v74 + 2) = v38[1].n128_u64[0];
          *(__n128 *)long long v74 = v73;
          if (v36 == (int *)v37)
          {
            uint64_t v37 = &v44[8 * (((char *)v36 - v37) >> 3)];
            uint64_t v4 = v82;
            int v35 = &v44[24 * v43];
            int v40 = v74 + 24;
            if (!v36) {
              goto LABEL_54;
            }
          }
          else
          {
            long long v75 = &v44[8 * (((char *)v36 - v37) >> 3)];
            uint64_t v4 = v82;
            do
            {
              long long v76 = *(_OWORD *)(v36 - 6);
              *((void *)v75 - 1) = *((void *)v36 - 1);
              *(_OWORD *)(v75 - 24) = v76;
              v75 -= 24;
              v36 -= 6;
            }
            while (v36 != (int *)v37);
            uint64_t v36 = (int *)v37;
            uint64_t v37 = v75;
            int v35 = &v44[24 * v43];
            int v40 = v74 + 24;
            if (!v36) {
              goto LABEL_54;
            }
          }
          uint64_t v77 = v35;
          operator delete(v36);
          int v35 = v77;
        }
LABEL_54:
        int v38 = (__n128 *)((char *)v38 + 24);
        BOOL v34 = v41;
        uint64_t v36 = (int *)v40;
        if (v38 == v10)
        {
          if (v37) {
            operator delete(v37);
          }
          goto LABEL_139;
        }
      }
      unint64_t v45 = ((char *)v36 - v37) / 24;
      if (!v34 || v45 <= 1)
      {
LABEL_93:
        if (v36 == (int *)v37)
        {
          LODWORD(v59) = 0;
        }
        else
        {
          LODWORD(v59) = 0;
          if (v45 <= 1) {
            uint64_t v60 = 1;
          }
          else {
            uint64_t v60 = ((char *)v36 - v37) / 24;
          }
          int v61 = v37;
          do
          {
            if (*(_DWORD *)v61 != v38->n128_u32[0])
            {
              long long v62 = *(_OWORD *)v61;
              int v63 = &v37[24 * (int)v59];
              *((void *)v63 + 2) = *((void *)v61 + 2);
              *(_OWORD *)int v63 = v62;
              LODWORD(v59) = v59 + 1;
            }
            v61 += 24;
            --v60;
          }
          while (v60);
        }
        uint64_t v59 = (int)v59;
        unint64_t v64 = (int)v59 - v45;
        if ((int)v59 <= v45)
        {
          if ((int)v59 >= v45) {
            int v40 = (char *)v36;
          }
          else {
            int v40 = &v37[24 * (int)v59];
          }
          goto LABEL_130;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - (char *)v36) >> 3) >= v64)
        {
          size_t v78 = 24 * ((24 * v64 - 24) / 0x18) + 24;
          int v79 = v35;
          bzero(v36, v78);
          int v35 = v79;
          int v40 = (char *)v36 + v78;
          goto LABEL_130;
        }
        if ((v59 & 0x80000000) != 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v35 - v37) >> 3) > (unint64_t)(int)v59) {
          uint64_t v59 = 0x5555555555555556 * ((v35 - v37) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - v37) >> 3) >= 0x555555555555555) {
          unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v65 = v59;
        }
        if (v65 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v66 = (char *)operator new(24 * v65);
        char v67 = &v66[24 * v45];
        size_t v68 = 24 * ((24 * v64 - 24) / 0x18) + 24;
        bzero(v67, v68);
        if (v36 == (int *)v37)
        {
          int v71 = v67;
          int v35 = &v66[24 * v65];
          int v40 = &v67[v68];
          if (!v37) {
            goto LABEL_116;
          }
        }
        else
        {
          int v69 = v67;
          do
          {
            long long v70 = *(_OWORD *)(v36 - 6);
            int v71 = v69 - 24;
            *((void *)v69 - 1) = *((void *)v36 - 1);
            *(_OWORD *)(v69 - 24) = v70;
            v36 -= 6;
            v69 -= 24;
          }
          while (v36 != (int *)v37);
          int v35 = &v66[24 * v65];
          int v40 = &v67[v68];
          if (!v37) {
            goto LABEL_116;
          }
        }
        int v72 = v35;
        operator delete(v37);
        int v35 = v72;
LABEL_116:
        uint64_t v37 = v71;
        uint64_t v4 = v82;
LABEL_130:
        BOOL v41 = 0;
        goto LABEL_54;
      }
      uint64_t v46 = *(void *)(v4 + 80);
      int v49 = *(void **)(v46 + 32);
      uint64_t v47 = (void *)(v46 + 32);
      uint64_t v48 = v49;
      if (!v49) {
        goto LABEL_78;
      }
      uint64_t v50 = v47;
      do
      {
        unint64_t v51 = v48[4];
        BOOL v52 = v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
        if (v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d) {
          uint64_t v53 = v48;
        }
        else {
          uint64_t v53 = v48 + 1;
        }
        if (v52) {
          uint64_t v50 = v48;
        }
        uint64_t v48 = (void *)*v53;
      }
      while (*v53);
      if (v50 != v47 && v50[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      {
        uint64_t v54 = v35;
        uint64_t v55 = v50[5];
      }
      else
      {
LABEL_78:
        uint64_t v54 = v35;
        uint64_t v55 = 0;
      }
      v92[0] = v55;
      v92[1] = 0x8000000000000002;
      long long v93 = 0u;
      long long v94 = 0u;
      uint64_t v95 = 0;
      operations_research::sat::LinearConstraintBuilder::AddTerm(v92, *(_DWORD *)(v4 + 32), -1);
      uint64_t v56 = (int *)v37;
      if (v37 != (char *)v36)
      {
        do
        {
          int v58 = v56[5];
          if (v58 == -2)
          {
            operations_research::sat::LinearConstraintBuilder::AddTerm(v92, *(int *)((char *)v56 + 13), 1);
          }
          else if (!operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(v92, v58, *(void *)(*(void *)(*(void *)(v4 + 64) + 144)+ 20 * *(int *)((char *)v56 + 13))))
          {
            goto LABEL_90;
          }
          v56 += 6;
        }
        while (v56 != v36);
      }
      operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)v92, (uint64_t)&v87);
      char v86 = 10;
      strcpy((char *)v85, "Cumulative");
      char v84 = 0;
      LOBYTE(v83) = 0;
      operations_research::sat::LinearConstraintManager::AddCut(v80, &v87, (uint64_t)v85, v81, (uint64_t)&v83);
      if (v84 < 0)
      {
        operator delete(v83);
        if ((v86 & 0x80000000) == 0)
        {
LABEL_82:
          int v57 = __p;
          if (!__p)
          {
LABEL_84:
            if (v88)
            {
              int v89 = v88;
              operator delete(v88);
            }
LABEL_90:
            if ((void)v94)
            {
              *((void *)&v94 + 1) = v94;
              operator delete((void *)v94);
            }
            int v35 = v54;
            goto LABEL_93;
          }
LABEL_83:
          uint64_t v91 = v57;
          operator delete(v57);
          goto LABEL_84;
        }
      }
      else if ((v86 & 0x80000000) == 0)
      {
        goto LABEL_82;
      }
      operator delete(v85[0]);
      int v57 = __p;
      if (!__p) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
LABEL_139:
    if (v9) {
      operator delete(v9);
    }
  }
}

void sub_23CCBF698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (v34)
  {
    operator delete(v34);
    if (v33)
    {
LABEL_6:
      operator delete(v33);
      _Unwind_Resume(exception_object);
    }
  }
  else if (v33)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21Inte"
                     "rvalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEE"
                     "EPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntType"
                                "INS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiE"
                                "ERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat28CreateCumulativeCutGeneratorERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEENS4_INS0_20IntegerVariable_tag_EiEERKNS2_ISD_NS7_ISD_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0>,void ()(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v11 = *(unsigned char **)(a2 + 32);
  int v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v15;
  return a1;
}

void sub_23CCBF8E8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)(a5 + 4);
  uint64_t v12 = *(void *)(a4 + 4);
  if (v11 == v12)
  {
    if (*(unsigned __int8 *)(a5 + 12) == *(unsigned __int8 *)(a4 + 12))
    {
      if (*(_DWORD *)a5 >= *(_DWORD *)a4) {
        return result;
      }
    }
    else if (*(unsigned char *)(a5 + 12))
    {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  __n128 result = *(__n128 *)a4;
  uint64_t v14 = *(void *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v14;
  *(__n128 *)a5 = result;
  *(void *)(a5 + 16) = v13;
  uint64_t v15 = *(void *)(a4 + 4);
  uint64_t v16 = *(void *)(a3 + 4);
  BOOL v17 = v15 < v16;
  if (v15 != v16) {
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a3 + 12))
  {
    BOOL v17 = *(_DWORD *)a4 < *(_DWORD *)a3;
LABEL_11:
    if (!v17) {
      return result;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a4 + 12)) {
    return result;
  }
LABEL_15:
  uint64_t v18 = *(void *)(a3 + 16);
  __n128 result = *(__n128 *)a3;
  uint64_t v19 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v19;
  *(__n128 *)a4 = result;
  *(void *)(a4 + 16) = v18;
  uint64_t v20 = *(void *)(a3 + 4);
  uint64_t v21 = *(void *)(a2 + 4);
  BOOL v22 = v20 < v21;
  if (v20 == v21)
  {
    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      if (*(unsigned char *)(a3 + 12)) {
        return result;
      }
      goto LABEL_20;
    }
    BOOL v22 = *(_DWORD *)a3 < *(_DWORD *)a2;
  }
  if (!v22) {
    return result;
  }
LABEL_20:
  uint64_t v23 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  uint64_t v24 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v24;
  *(__n128 *)a3 = result;
  *(void *)(a3 + 16) = v23;
  uint64_t v25 = *(void *)(a2 + 4);
  uint64_t v26 = *(void *)(a1 + 4);
  BOOL v27 = v25 < v26;
  if (v25 != v26) {
    goto LABEL_23;
  }
  if (*(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    BOOL v27 = *(_DWORD *)a2 < *(_DWORD *)a1;
LABEL_23:
    if (!v27) {
      return result;
    }
LABEL_30:
    uint64_t v28 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v29 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v29;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v28;
    return result;
  }
  if (!*(unsigned char *)(a2 + 12)) {
    goto LABEL_30;
  }
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a2 + 1);
  int v5 = *((unsigned __int8 *)a2 + 12);
  uint64_t v6 = *(void *)(a1 + 4);
  BOOL v7 = v4 < v6;
  if (v4 != v6)
  {
LABEL_4:
    if (!v7) {
      goto LABEL_13;
    }
LABEL_6:
    uint64_t v8 = *(void *)(a3 + 4);
    BOOL v9 = v8 < v4;
    if (v8 == v4)
    {
      if (*(unsigned __int8 *)(a3 + 12) != v5)
      {
        if (*(unsigned char *)(a3 + 12)) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
      BOOL v9 = *(_DWORD *)a3 < v3;
    }
    if (!v9)
    {
LABEL_25:
      uint64_t v18 = *(void *)(a1 + 16);
      __n128 result = *(__n128 *)a1;
      uint64_t v19 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v19;
      *(__n128 *)a2 = result;
      *((void *)a2 + 2) = v18;
      uint64_t v20 = *(void *)(a3 + 4);
      uint64_t v21 = *(void *)(a2 + 1);
      if (v20 == v21)
      {
        if (*(unsigned __int8 *)(a3 + 12) == *((unsigned __int8 *)a2 + 12))
        {
          if (*(_DWORD *)a3 >= *a2) {
            return result;
          }
        }
        else if (*(unsigned char *)(a3 + 12))
        {
          return result;
        }
      }
      else if (v20 >= v21)
      {
        return result;
      }
      uint64_t v24 = *((void *)a2 + 2);
      __n128 result = *(__n128 *)a2;
      uint64_t v25 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v25;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v24;
      return result;
    }
LABEL_11:
    uint64_t v10 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v12 = *(void *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(void *)(a1 + 16) = v12;
    *(__n128 *)a3 = result;
    *(void *)(a3 + 16) = v10;
    return result;
  }
  if (v5 == *(unsigned __int8 *)(a1 + 12))
  {
    BOOL v7 = v3 < *(_DWORD *)a1;
    goto LABEL_4;
  }
  if (!*((unsigned char *)a2 + 12)) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v13 = *(void *)(a3 + 4);
  if (v13 == v4)
  {
    if (*(unsigned __int8 *)(a3 + 12) == v5)
    {
      if (*(_DWORD *)a3 >= v3) {
        return result;
      }
    }
    else if (*(unsigned char *)(a3 + 12))
    {
      return result;
    }
  }
  else if (v13 >= v4)
  {
    return result;
  }
  uint64_t v14 = *((void *)a2 + 2);
  __n128 result = *(__n128 *)a2;
  uint64_t v15 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((void *)a2 + 2) = v15;
  *(__n128 *)a3 = result;
  *(void *)(a3 + 16) = v14;
  uint64_t v16 = *(void *)(a2 + 1);
  uint64_t v17 = *(void *)(a1 + 4);
  if (v16 != v17)
  {
    if (v16 >= v17) {
      return result;
    }
    goto LABEL_34;
  }
  if (*((unsigned __int8 *)a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    if (*a2 < *(_DWORD *)a1) {
      goto LABEL_34;
    }
  }
  else if (!*((unsigned char *)a2 + 12))
  {
LABEL_34:
    uint64_t v22 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v23 = *((void *)a2 + 2);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v23;
    *(__n128 *)a2 = result;
    *((void *)a2 + 2) = v22;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v26 = (_OWORD *)(a2 - 24);
      uint64_t v27 = *(void *)(a2 - 20);
      uint64_t v28 = *(void *)(a1 + 4);
      if (v27 == v28)
      {
        if (*(unsigned __int8 *)(a2 - 12) == *(unsigned __int8 *)(a1 + 12))
        {
          if (*(_DWORD *)(a2 - 24) >= *(_DWORD *)a1) {
            return result;
          }
        }
        else if (*(unsigned char *)(a2 - 12))
        {
          return result;
        }
      }
      else if (v27 >= v28)
      {
        return result;
      }
      uint64_t v29 = *(void *)(a1 + 16);
      long long v30 = *(_OWORD *)a1;
      uint64_t v31 = *(void *)(a2 - 8);
      *(_OWORD *)a1 = *v26;
      *(void *)(a1 + 16) = v31;
      *uint64_t v26 = v30;
      *(void *)(a2 - 8) = v29;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24), a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)(a1 + 24), a1 + 48);
      uint64_t v7 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    int v11 = *(_DWORD *)v7;
    uint64_t v12 = *(void *)(v7 + 4);
    unsigned __int8 v13 = *(unsigned char *)(v7 + 12);
    uint64_t v14 = (void *)(v7 + 13);
    uint64_t v15 = *(void *)(v6 + 4);
    BOOL v16 = v12 < v15;
    if (v12 != v15) {
      goto LABEL_11;
    }
    if (*(unsigned __int8 *)(v6 + 12) == v13)
    {
      BOOL v16 = v11 < *(_DWORD *)v6;
LABEL_11:
      if (!v16) {
        goto LABEL_7;
      }
      *(void *)uint64_t v32 = *v14;
      *(_DWORD *)&v32[7] = *(_DWORD *)(v7 + 20);
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
      uint64_t v10 = a1;
      if (v6 == a1) {
        goto LABEL_6;
      }
      if (v13)
      {
        uint64_t v17 = v8;
        while (1)
        {
          uint64_t v18 = a1 + v17;
          uint64_t v19 = (_DWORD *)(a1 + v17 + 24);
          uint64_t v20 = *(void *)(a1 + v17 + 28);
          if (v12 == v20)
          {
            if (*(unsigned __int8 *)(v18 + 36) != v13 || v11 >= *v19) {
              goto LABEL_34;
            }
          }
          else if (v12 >= v20)
          {
            goto LABEL_35;
          }
          v6 -= 24;
          *(_OWORD *)(v18 + 48) = *(_OWORD *)v19;
          *(void *)(v18 + 64) = *(void *)(a1 + v17 + 40);
          v17 -= 24;
          if (v17 == -48) {
            goto LABEL_5;
          }
        }
      }
      goto LABEL_26;
    }
    if (*(unsigned char *)(v7 + 12)) {
      goto LABEL_7;
    }
    *(void *)uint64_t v32 = *v14;
    *(_DWORD *)&v32[7] = *(_DWORD *)(v7 + 20);
    *(void *)(v7 + 16) = *(void *)(v6 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v17 = v8;
    while (1)
    {
      uint64_t v22 = a1 + v17;
      uint64_t v23 = (_DWORD *)(a1 + v17 + 24);
      uint64_t v24 = *(void *)(a1 + v17 + 28);
      if (v12 != v24) {
        break;
      }
      if (*(unsigned char *)(v22 + 36)) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = v11 < *v23;
      }
      if (!v25)
      {
LABEL_34:
        uint64_t v10 = v6;
        goto LABEL_6;
      }
LABEL_28:
      v6 -= 24;
      *(_OWORD *)(v22 + 48) = *(_OWORD *)v23;
      *(void *)(v22 + 64) = *(void *)(a1 + v17 + 40);
      v17 -= 24;
      if (v17 == -48)
      {
LABEL_5:
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    if (v12 < v24) {
      goto LABEL_28;
    }
LABEL_35:
    uint64_t v10 = a1 + v17 + 48;
LABEL_6:
    *(_DWORD *)uint64_t v10 = v11;
    *(void *)(v10 + 4) = v12;
    *(unsigned char *)(v10 + 12) = v13;
    *(void *)(v10 + 13) = *(void *)v32;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)&v32[7];
    if (++v9 == 8) {
      return v7 + 24 == a2;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::$_0::operator() const(gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,double,std::allocator<double>> const&,operations_research::sat::LinearConstraintManager *)::{lambda(operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event)#1} &,operations_research::sat::CreateCumulativeCutGenerator(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,operations_research::sat::Model *)::Event*>(a1, (int *)a2, a3).n128_u64[0];
  uint64_t v9 = *(void *)(a4 + 4);
  uint64_t v10 = *(void *)(a3 + 4);
  if (v9 == v10)
  {
    if (*(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a3 + 12))
    {
      if (*(_DWORD *)a4 >= *(_DWORD *)a3) {
        return result;
      }
    }
    else if (*(unsigned char *)(a4 + 12))
    {
      return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  uint64_t v11 = *(void *)(a3 + 16);
  __n128 result = *(__n128 *)a3;
  uint64_t v12 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v12;
  *(__n128 *)a4 = result;
  *(void *)(a4 + 16) = v11;
  uint64_t v13 = *(void *)(a3 + 4);
  uint64_t v14 = *(void *)(a2 + 4);
  BOOL v15 = v13 < v14;
  if (v13 == v14)
  {
    if (*(unsigned __int8 *)(a3 + 12) != *(unsigned __int8 *)(a2 + 12))
    {
      if (*(unsigned char *)(a3 + 12)) {
        return result;
      }
      goto LABEL_13;
    }
    BOOL v15 = *(_DWORD *)a3 < *(_DWORD *)a2;
  }
  if (!v15) {
    return result;
  }
LABEL_13:
  uint64_t v16 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  uint64_t v17 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v17;
  *(__n128 *)a3 = result;
  *(void *)(a3 + 16) = v16;
  uint64_t v18 = *(void *)(a2 + 4);
  uint64_t v19 = *(void *)(a1 + 4);
  BOOL v20 = v18 < v19;
  if (v18 != v19) {
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12))
  {
    BOOL v20 = *(_DWORD *)a2 < *(_DWORD *)a1;
LABEL_16:
    if (!v20) {
      return result;
    }
LABEL_23:
    uint64_t v21 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v22 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v22;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v21;
    return result;
  }
  if (!*(unsigned char *)(a2 + 12)) {
    goto LABEL_23;
  }
  return result;
}

void OUTLINED_FUNCTION_1_1()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void operations_research::sat::AddCumulativeRelaxation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v71 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  unint64_t v78 = 0;
  signed __int32 v79 = 0;
  uint64_t v80 = 0;
  uint64_t v70 = (void *)v4;
  if ((int)((a3[5] - a3[4]) >> 2) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    int64_t v10 = 0x8000000000000000;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      int v15 = *(_DWORD *)(a3[10] + 4 * v7);
      if (v15 == -1)
      {
        uint64_t v16 = *(void *)(a3[13] + 8 * v7);
        if (v6 >= v8)
        {
LABEL_15:
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v9) >> 2) + 1;
          if (v17 > 0xCCCCCCCCCCCCCCCLL)
          {
            signed __int32 v79 = v6;
            uint64_t v80 = v8;
            unint64_t v78 = v9;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v8 - v9) >> 2) > v17) {
            unint64_t v17 = 0x999999999999999ALL * ((v8 - v9) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2) >= 0x666666666666666) {
            unint64_t v18 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            if (v18 > 0xCCCCCCCCCCCCCCCLL)
            {
              signed __int32 v79 = v6;
              uint64_t v80 = v8;
              unint64_t v78 = v9;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v19 = (char *)operator new(20 * v18);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v23 = &v19[4 * ((v6 - v9) >> 2)];
          *(_DWORD *)uint64_t v23 = -1;
          *(void *)(v23 + 4) = 0;
          *(void *)(v23 + 12) = v16;
          if (v6 == v9)
          {
            uint64_t v26 = &v19[4 * ((v6 - v9) >> 2)];
            uint64_t v8 = &v19[20 * v18];
            uint64_t v6 = v23 + 20;
            if (v9) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v24 = &v19[4 * ((v6 - v9) >> 2)];
            do
            {
              long long v25 = *(_OWORD *)(v6 - 20);
              uint64_t v26 = v24 - 20;
              *((_DWORD *)v24 - 1) = *((_DWORD *)v6 - 1);
              *(_OWORD *)(v24 - 20) = v25;
              v6 -= 20;
              v24 -= 20;
            }
            while (v6 != v9);
            uint64_t v8 = &v19[20 * v18];
            uint64_t v6 = v23 + 20;
            if (v9) {
LABEL_40:
            }
              operator delete(v9);
          }
          uint64_t v9 = v26;
          goto LABEL_5;
        }
      }
      else
      {
        if (*(void *)(*(void *)(v71 + 40) + 12 * v15) + *(void *)(*(void *)(v71 + 40) + 12 * (v15 ^ 1)))
        {
          if (v6 >= v8)
          {
            unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v9) >> 2) + 1;
            if (v20 > 0xCCCCCCCCCCCCCCCLL)
            {
              signed __int32 v79 = v6;
              uint64_t v80 = v8;
              unint64_t v78 = v9;
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((v8 - v9) >> 2) > v20) {
              unint64_t v20 = 0x999999999999999ALL * ((v8 - v9) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2) >= 0x666666666666666) {
              unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21)
            {
              if (v21 > 0xCCCCCCCCCCCCCCCLL)
              {
                signed __int32 v79 = v6;
                uint64_t v80 = v8;
                unint64_t v78 = v9;
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v22 = (char *)operator new(20 * v21);
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v27 = &v22[4 * ((v6 - v9) >> 2)];
            *(_DWORD *)uint64_t v27 = v15;
            *(_OWORD *)(v27 + 4) = xmmword_23CE7E610;
            if (v6 == v9)
            {
              long long v30 = &v22[4 * ((v6 - v9) >> 2)];
              uint64_t v8 = &v22[20 * v21];
              uint64_t v6 = v27 + 20;
              if (v9) {
                goto LABEL_49;
              }
            }
            else
            {
              uint64_t v28 = &v22[4 * ((v6 - v9) >> 2)];
              do
              {
                long long v29 = *(_OWORD *)(v6 - 20);
                long long v30 = v28 - 20;
                *((_DWORD *)v28 - 1) = *((_DWORD *)v6 - 1);
                *(_OWORD *)(v28 - 20) = v29;
                v6 -= 20;
                v28 -= 20;
              }
              while (v6 != v9);
              uint64_t v8 = &v22[20 * v21];
              uint64_t v6 = v27 + 20;
              if (v9) {
LABEL_49:
              }
                operator delete(v9);
            }
            uint64_t v9 = v30;
            goto LABEL_5;
          }
          *(_DWORD *)uint64_t v6 = v15;
          *(_OWORD *)(v6 + 4) = xmmword_23CE7E610;
          goto LABEL_4;
        }
        uint64_t v16 = *(void *)(*(void *)(a3[1] + 40) + 12 * v15);
        if (v6 >= v8) {
          goto LABEL_15;
        }
      }
      *(_DWORD *)uint64_t v6 = -1;
      *(void *)(v6 + 4) = 0;
      *(void *)(v6 + 12) = v16;
LABEL_4:
      v6 += 20;
LABEL_5:
      uint64_t v12 = a3[4];
      uint64_t v13 = *(void *)(a3[1] + 40);
      if (*(void *)(v13 + 12 * *(int *)(v12 + 4 * v7)) < v11) {
        uint64_t v11 = *(void *)(v13 + 12 * *(int *)(v12 + 4 * v7));
      }
      uint64_t v14 = *(void *)(v13 + 12 * (*(_DWORD *)(a3[7] + 4 * v7) ^ 1));
      if (v10 <= -v14) {
        int64_t v10 = -v14;
      }
      if (++v7 >= (int)((unint64_t)(a3[5] - v12) >> 2))
      {
        signed __int32 v79 = v6;
        uint64_t v80 = v8;
        uint64_t v4 = (uint64_t)v70;
        goto LABEL_55;
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v10 = 0x8000000000000000;
LABEL_55:
  unint64_t v78 = v9;
  unint64_t v102 = (void (**)(void **))&unk_26F0C0D38;
  uint64_t v103 = v11;
  uint64_t v104 = v10;
  uint64_t v105 = (void **)&v102;
  unsigned __int8 v81 = (void *)v11;
  int64_t v85 = v10;
  if (v10 < v11) {
    google::MakeCheckOpString<long long,long long>((int)&v81, (int)&v85, "lb <= ub");
  }
  uint64_t v31 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v4);
  int v32 = operations_research::sat::IntegerTrail::AddIntegerVariable(v31, v103, v104);
  if (v105 != (void **)&v102)
  {
    if (v105) {
      (*((void (**)(void))*v105 + 5))();
    }
    unsigned __int8 v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v34 = (unsigned char *)a3[4];
    uint64_t v33 = (unsigned char *)a3[5];
    int64_t v35 = v33 - v34;
    if (v33 != v34) {
      goto LABEL_60;
    }
LABEL_63:
    unint64_t v37 = 0;
    long long v36 = 0;
    goto LABEL_64;
  }
  v102[4]((void **)&v102);
  unsigned __int8 v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v34 = (unsigned char *)a3[4];
  uint64_t v38 = (unsigned char *)a3[5];
  int64_t v35 = v38 - v34;
  if (v38 == v34) {
    goto LABEL_63;
  }
LABEL_60:
  if (v35 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  long long v36 = (char *)operator new(v35);
  unint64_t v37 = &v36[4 * (v35 >> 2)];
  unsigned __int8 v81 = v36;
  uint64_t v83 = v37;
  memcpy(v36, v34, v35);
  uint64_t v82 = v37;
LABEL_64:
  int v72 = v32;
  int v84 = v32;
  BOOL v101 = 0;
  unint64_t v39 = operator new(0x28uLL);
  uint64_t v40 = (void (**)(void *, void **))&unk_26F0C0240;
  *unint64_t v39 = &unk_26F0C0240;
  v39[1] = 0;
  v39[2] = 0;
  void v39[3] = 0;
  int64_t v41 = v37 - v36;
  if (v37 != v36)
  {
    if (v41 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v42 = (char *)operator new(v37 - v36);
    v39[1] = v42;
    uint64_t v43 = &v42[4 * (v41 >> 2)];
    void v39[3] = v43;
    memcpy(v42, v36, v41);
    v39[2] = v43;
  }
  *((_DWORD *)v39 + 8) = v32;
  BOOL v101 = v39;
  if (v36)
  {
    operator delete(v36);
    unint64_t v39 = v101;
    uint64_t v44 = (uint64_t)v70;
    unsigned __int8 v81 = v70;
    if (!v101) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v40 = (void (**)(void *, void **))*v101;
  }
  else
  {
    uint64_t v44 = (uint64_t)v70;
    unsigned __int8 v81 = v70;
  }
  v40[6](v39, &v81);
  if (v101 == v100)
  {
    (*(void (**)(void *))(v100[0] + 32))(v100);
  }
  else if (v101)
  {
    (*(void (**)(void))(*v101 + 40))();
  }
  unint64_t v96 = (void (**)(void **))&unk_26F0C0D38;
  uint64_t v97 = v11;
  uint64_t v98 = v10;
  uint64_t v99 = (void **)&v96;
  unsigned __int8 v81 = (void *)v11;
  int64_t v85 = v10;
  if (v10 < v11) {
    google::MakeCheckOpString<long long,long long>((int)&v81, (int)&v85, "lb <= ub");
  }
  uint64_t v45 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v44);
  int v46 = operations_research::sat::IntegerTrail::AddIntegerVariable(v45, v97, v98);
  if (v99 != (void **)&v96)
  {
    if (v99) {
      (*((void (**)(void))*v99 + 5))();
    }
    unsigned __int8 v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    BOOL v48 = (unsigned char *)a3[7];
    uint64_t v47 = (unsigned char *)a3[8];
    int64_t v49 = v47 - v48;
    if (v47 != v48) {
      goto LABEL_80;
    }
LABEL_83:
    BOOL v51 = 0;
    uint64_t v50 = 0;
    goto LABEL_84;
  }
  v96[4]((void **)&v96);
  unsigned __int8 v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  BOOL v48 = (unsigned char *)a3[7];
  uint64_t v52 = (unsigned char *)a3[8];
  int64_t v49 = v52 - v48;
  if (v52 == v48) {
    goto LABEL_83;
  }
LABEL_80:
  if (v49 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v50 = (char *)operator new(v49);
  BOOL v51 = &v50[4 * (v49 >> 2)];
  unsigned __int8 v81 = v50;
  uint64_t v83 = v51;
  memcpy(v50, v48, v49);
  uint64_t v82 = v51;
LABEL_84:
  int v84 = v46;
  int64_t v95 = 0;
  uint64_t v53 = operator new(0x28uLL);
  uint64_t v54 = (void (**)(void *, void **))&unk_26F0C0430;
  *uint64_t v53 = &unk_26F0C0430;
  v53[1] = 0;
  v53[2] = 0;
  v53[3] = 0;
  int64_t v55 = v51 - v50;
  if (v55)
  {
    if (v55 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v56 = (char *)operator new(v55);
    v53[1] = v56;
    BOOL v57 = &v56[4 * (v55 >> 2)];
    v53[3] = v57;
    memcpy(v56, v50, v55);
    v53[2] = v57;
  }
  *((_DWORD *)v53 + 8) = v46;
  int64_t v95 = v53;
  if (v50)
  {
    operator delete(v50);
    uint64_t v53 = v95;
    uint64_t v58 = v70;
    unsigned __int8 v81 = v70;
    int v59 = v72;
    if (!v95) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v54 = (void (**)(void *, void **))*v95;
  }
  else
  {
    uint64_t v58 = v70;
    unsigned __int8 v81 = v70;
    int v59 = v72;
  }
  v54[6](v53, &v81);
  BOOL v60 = __OFSUB__(v95, v94);
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
  }
  else if (v95)
  {
    (*(void (**)(void))(*v95 + 40))();
  }
  BOOL v90 = (void (**)(void **))&unk_26F0C0D38;
  uint64_t v91 = 0;
  if ((((v10 - v11) ^ v10) & (v11 ^ v10)) < 0 != v60) {
    uint64_t v61 = ((unint64_t)v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v61 = v10 - v11;
  }
  uint64_t v92 = v61;
  uint64_t v93 = (void **)&v90;
  unsigned __int8 v81 = 0;
  int64_t v85 = v61;
  if (v61 < 0) {
    google::MakeCheckOpString<long long,long long>((int)&v81, (int)&v85, "lb <= ub");
  }
  uint64_t v62 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v58);
  int v63 = operations_research::sat::IntegerTrail::AddIntegerVariable(v62, v91, v92);
  if (v93 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v93)
  {
    (*((void (**)(void))*v93 + 5))();
  }
  BOOL v64 = (char *)operator new(0x18uLL);
  uint64_t v82 = v64 + 24;
  uint64_t v83 = v64 + 24;
  *(void *)BOOL v64 = -1;
  *((void *)v64 + 1) = -1;
  *((void *)v64 + 2) = 1;
  unsigned __int8 v81 = v64;
  uint64_t v65 = operator new(0xCuLL);
  unint64_t v76 = v65 + 3;
  unint64_t v77 = v65 + 3;
  *uint64_t v65 = v63;
  v65[1] = v59;
  v65[2] = v46;
  long long __p = v65;
  operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)&__p, (uint64_t)&v81, 0, v88);
  int64_t v85 = (int64_t)v58;
  if (!v89) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, int64_t *))(*v89 + 48))(v89, &v85);
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
    signed __int32 v66 = __p;
    if (__p)
    {
LABEL_108:
      unint64_t v76 = v66;
      operator delete(v66);
    }
  }
  else
  {
    if (v89) {
      (*(void (**)(void))(*v89 + 40))();
    }
    signed __int32 v66 = __p;
    if (__p) {
      goto LABEL_108;
    }
  }
  int v73 = v63;
  long long v74 = xmmword_23CE7E610;
  operations_research::sat::Cumulative(a1, (uint64_t)&v78, (long long *)&v73, a2, (uint64_t)v86);
  long long __p = v58;
  if (!v87) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void *, void **))(*v87 + 48))(v87, &__p);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
    char v67 = (char *)v81;
    if (v81)
    {
LABEL_114:
      uint64_t v82 = v67;
      operator delete(v67);
    }
  }
  else
  {
    if (v87) {
      (*(void (**)(void))(*v87 + 40))();
    }
    char v67 = (char *)v81;
    if (v81) {
      goto LABEL_114;
    }
  }
  if (v78)
  {
    signed __int32 v79 = v78;
    operator delete(v78);
  }
}

void sub_23CCC1CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_23CCC1D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_23CCC1D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_23CCC1D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectanglesEnergyPropagator::~NonOverlappingRectanglesEnergyPropagator(operations_research::sat::NonOverlappingRectanglesEnergyPropagator *this)
{
  *(void *)this = &unk_26F0C2818;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  uint64_t vars8;

  operations_research::sat::NonOverlappingRectanglesEnergyPropagator::~NonOverlappingRectanglesEnergyPropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Propagate(operations_research::sat::NonOverlappingRectanglesEnergyPropagator *this)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 1);
  uint64_t v3 = *((void *)v2 + 5) - *((void *)v2 + 4);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v2, 1);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 2), 1);
  int v5 = (void *)((char *)this + 96);
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 10) = *((void *)this + 9);
  unint64_t v6 = (int)(v3 >> 2);
  unint64_t v76 = (void **)((char *)this + 72);
  unint64_t v7 = (*((void *)this + 13) - v4) >> 3;
  if (v6 <= v7)
  {
    if (v6 < v7) {
      *((void *)this + 13) = v4 + 8 * v6;
    }
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)this + 96, v6 - v7);
  }
  uint64_t v8 = *((void *)this + 15);
  uint64_t v9 = (uint64_t *)((char *)this + 120);
  unint64_t v10 = (*((void *)this + 16) - v8) >> 5;
  if (v6 <= v10)
  {
    if (v6 < v10) {
      *((void *)this + 16) = v8 + 32 * v6;
    }
  }
  else
  {
    std::vector<operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Dimension>::__append((char **)this + 15, v6 - v10);
  }
  if ((int)((unint64_t)v3 >> 2) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = ((unint64_t)v3 >> 2);
    uint64_t v75 = v12;
    do
    {
      uint64_t v14 = (void *)*((void *)this + 1);
      int v15 = *(_DWORD *)(v14[10] + 4 * v11);
      if (v15 == -1)
      {
        uint64_t v16 = (void *)(v14[13] + 8 * v11);
        unint64_t v17 = (void *)*((void *)this + 2);
        int v18 = *(_DWORD *)(v17[10] + 4 * v11);
        if (v18 != -1)
        {
LABEL_16:
          uint64_t v19 = *(void *)(*(void *)(v17[1] + 40) + 12 * v18) * *v16;
          *(void *)(*v5 + 8 * v11) = v19;
          if (!v19) {
            goto LABEL_13;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = (void *)(*(void *)(v14[1] + 40) + 12 * v15);
        unint64_t v17 = (void *)*((void *)this + 2);
        int v18 = *(_DWORD *)(v17[10] + 4 * v11);
        if (v18 != -1) {
          goto LABEL_16;
        }
      }
      uint64_t v20 = *(void *)(v17[13] + 8 * v11) * *v16;
      *(void *)(*v5 + 8 * v11) = v20;
      if (!v20) {
        goto LABEL_13;
      }
LABEL_20:
      uint64_t v21 = *(void *)(v14[1] + 40);
      if (v15 == -1) {
        uint64_t v22 = (void *)(v14[13] + 8 * v11);
      }
      else {
        uint64_t v22 = (void *)(v21 + 12 * v15);
      }
      uint64_t v23 = *v9;
      uint64_t v24 = *(void *)(v21 + 12 * *(int *)(v14[4] + 4 * v11));
      int v25 = *(_DWORD *)(v14[7] + 4 * v11);
      uint64_t v26 = *(void *)(v21 + 12 * v25) - *v22;
      if (v24 > v26) {
        uint64_t v26 = v24;
      }
      *(void *)(*v9 + 32 * v11) = v26;
      *(void *)(v23 + 32 * v11 + 8) = -*(void *)(v21 + 12 * (v25 ^ 1));
      uint64_t v27 = *(void *)(v17[1] + 40);
      if (v18 == -1) {
        uint64_t v28 = (void *)(v17[13] + 8 * v11);
      }
      else {
        uint64_t v28 = (void *)(v27 + 12 * v18);
      }
      uint64_t v29 = *(void *)(v27 + 12 * *(int *)(v17[4] + 4 * v11));
      int v30 = *(_DWORD *)(v17[7] + 4 * v11);
      uint64_t v31 = *(void *)(v27 + 12 * v30) - *v28;
      if (v29 > v31) {
        uint64_t v31 = v29;
      }
      uint64_t v32 = v23 + 32 * v11;
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = -*(void *)(v27 + 12 * (v30 ^ 1));
      uint64_t v34 = (char *)*((void *)this + 10);
      unint64_t v33 = *((void *)this + 11);
      if ((unint64_t)v34 >= v33)
      {
        int64_t v35 = (char *)*v76;
        uint64_t v36 = v34 - (unsigned char *)*v76;
        uint64_t v37 = v36 >> 2;
        unint64_t v38 = (v36 >> 2) + 1;
        if (v38 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v33 - (void)v35;
        if (v39 >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int64_t v41 = operator new(4 * v40);
          BOOL v42 = &v41[4 * v37];
          *BOOL v42 = v11;
          uint64_t v13 = (uint64_t)(v42 + 1);
          if (v34 == v35) {
            goto LABEL_48;
          }
LABEL_42:
          unint64_t v43 = v34 - 4 - v35;
          if (v43 < 0x2C) {
            goto LABEL_77;
          }
          if ((unint64_t)(v34 - &v41[v36]) < 0x20) {
            goto LABEL_77;
          }
          uint64_t v44 = (v43 >> 2) + 1;
          uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
          int v46 = &v34[-v45];
          BOOL v42 = (_DWORD *)((char *)v42 - v45);
          uint64_t v47 = &v41[4 * v37 - 16];
          BOOL v48 = v34 - 16;
          uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *uint64_t v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          uint64_t v34 = v46;
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_77:
            do
            {
              int v51 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *--BOOL v42 = v51;
            }
            while (v34 != v35);
          }
        }
        else
        {
          int64_t v41 = 0;
          BOOL v42 = (_DWORD *)(4 * v37);
          *(_DWORD *)(4 * v37) = v11;
          uint64_t v13 = 4 * v37 + 4;
          if (v34 != v35) {
            goto LABEL_42;
          }
        }
LABEL_48:
        *((void *)this + 9) = v42;
        *((void *)this + 10) = v13;
        *((void *)this + 11) = &v41[4 * v40];
        if (v35) {
          operator delete(v35);
        }
        int v5 = (void *)((char *)this + 96);
        uint64_t v12 = v75;
        goto LABEL_12;
      }
      *(_DWORD *)uint64_t v34 = v11;
      uint64_t v13 = (uint64_t)(v34 + 4);
LABEL_12:
      *((void *)this + 10) = v13;
LABEL_13:
      ++v11;
    }
    while (v11 != v12);
  }
  uint64_t v52 = (int *)*((void *)this + 9);
  uint64_t v53 = *((void *)this + 10) - (void)v52;
  if ((unint64_t)v53 < 8) {
    return 1;
  }
  uint64_t v54 = *((void *)this + 3);
  uint64_t v55 = *((void *)this + 4);
  if (v54 == v55) {
    return 1;
  }
  uint64_t v56 = (int ***)((char *)this + 48);
  while (2)
  {
    BOOL v57 = (int **)*((void *)this + 6);
    uint64_t v58 = (int **)*((void *)this + 7);
    while (v57 != v58)
    {
      uint64_t v59 = (uint64_t)v57[1];
      if (v59)
      {
        BOOL v60 = *v57;
        uint64_t v61 = *((void *)this + 12);
        uint64_t v62 = (v59 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v62)
        {
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          uint64_t v65 = v62 + 1;
          uint64_t v66 = (v62 + 1) & 0x7FFFFFFFFFFFFFFELL;
          char v67 = &v60[v66];
          unsigned __int32 v68 = v60 + 1;
          uint64_t v69 = v66;
          do
          {
            v63 += *(void *)(v61 + 8 * *(v68 - 1));
            v64 += *(void *)(v61 + 8 * *v68);
            v68 += 2;
            v69 -= 2;
          }
          while (v69);
          uint64_t v70 = v64 + v63;
          if (v65 == v66)
          {
LABEL_65:
            uint64_t v72 = 4 * v59;
            int v73 = *v57;
            while ((operations_research::sat::NonOverlappingRectanglesEnergyPropagator::FailWhenEnergyIsTooLarge(this, *v73, v60, v59, v70) & 1) != 0)
            {
              ++v73;
              v72 -= 4;
              if (!v72) {
                goto LABEL_55;
              }
            }
            return 0;
          }
        }
        else
        {
          uint64_t v70 = 0;
          char v67 = *v57;
        }
        do
        {
          uint64_t v71 = *v67++;
          v70 += *(void *)(v61 + 8 * v71);
        }
        while (v67 != &v60[v59]);
        goto LABEL_65;
      }
LABEL_55:
      v57 += 2;
    }
    v54 += 16;
    uint64_t result = 1;
    uint64_t v56 = (int ***)((char *)this + 48);
    if (v54 != v55) {
      continue;
    }
    return result;
  }
}

void operations_research::sat::anonymous namespace'::SplitDisjointBoxes(void *a1, int *a2, unint64_t a3, int ***a4)
{
  unint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  a4[1] = *a4;
  uint64_t v8 = &a2[a3];
  uint64_t v52 = a1;
  unint64_t v9 = 126 - 2 * __clz((uint64_t)(4 * a3) >> 2);
  if (a3) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v5 < 2) {
    return;
  }
  int v11 = 0;
  uint64_t v12 = v7[1];
  uint64_t v13 = v7[7];
  uint64_t v14 = -*(void *)(*(void *)(v12 + 40) + 12 * (*(_DWORD *)(v13 + 4 * *v6) ^ 1));
  uint64_t v15 = 1;
  unint64_t v16 = 1;
  long long v50 = v7;
  int v51 = v6;
  do
  {
    while (1)
    {
      uint64_t v18 = v6[v15];
      uint64_t v19 = *(void *)(v12 + 40);
      if (*(void *)(v19 + 12 * *(int *)(v7[4] + 4 * v18)) < v14) {
        break;
      }
      if (v16 >= 2)
      {
        uint64_t v20 = &v6[v11];
        uint64_t v22 = a4[1];
        unint64_t v21 = (unint64_t)a4[2];
        if ((unint64_t)v22 < v21)
        {
          *uint64_t v22 = v20;
          v22[1] = (int *)v16;
          uint64_t v23 = v22 + 2;
LABEL_25:
          a4[1] = v23;
          uint64_t v12 = v7[1];
          uint64_t v13 = v7[7];
          goto LABEL_26;
        }
        unint64_t v24 = v5;
        int v25 = *a4;
        uint64_t v26 = ((char *)v22 - (char *)*a4) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          goto LABEL_47;
        }
        uint64_t v28 = v21 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        if (!v29) {
          unint64_t v30 = v27;
        }
        if (v30 >> 60) {
          goto LABEL_48;
        }
        uint64_t v31 = 16 * v30;
        uint64_t v32 = (char *)operator new(16 * v30);
        unint64_t v33 = (int **)&v32[16 * v26];
        *unint64_t v33 = v20;
        v33[1] = (int *)v16;
        if (v22 == v25)
        {
          unint64_t v5 = v24;
          uint64_t v23 = v33 + 2;
          *a4 = v33;
          a4[1] = v33 + 2;
          a4[2] = (int **)&v32[v31];
          unint64_t v7 = v50;
          if (!v25) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v34 = &v32[16 * v26];
          unint64_t v5 = v24;
          do
          {
            int64_t v35 = v34 - 16;
            *((_OWORD *)v34 - 1) = *((_OWORD *)v22 - 1);
            v22 -= 2;
            v34 -= 16;
          }
          while (v22 != v25);
          uint64_t v23 = v33 + 2;
          *a4 = (int **)v35;
          a4[1] = v33 + 2;
          a4[2] = (int **)&v32[v31];
          unint64_t v7 = v50;
          if (!v25) {
            goto LABEL_24;
          }
        }
        operator delete(v25);
LABEL_24:
        unint64_t v6 = v51;
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v14 = -*(void *)(*(void *)(v12 + 40) + 12 * (*(_DWORD *)(v13 + 4 * v18) ^ 1));
      unint64_t v16 = 1;
      int v11 = v15++;
      if (v15 == v5) {
        goto LABEL_30;
      }
    }
    ++v16;
    uint64_t v17 = *(void *)(v19 + 12 * (*(_DWORD *)(v13 + 4 * v18) ^ 1));
    if (v14 <= -v17) {
      uint64_t v14 = -v17;
    }
    ++v15;
  }
  while (v15 != v5);
LABEL_30:
  if (v16 > 1)
  {
    uint64_t v36 = &v6[v11];
    unint64_t v38 = a4[1];
    unint64_t v37 = (unint64_t)a4[2];
    if ((unint64_t)v38 < v37)
    {
      *unint64_t v38 = v36;
      v38[1] = (int *)v16;
      uint64_t v39 = v38 + 2;
      goto LABEL_43;
    }
    unint64_t v40 = *a4;
    uint64_t v41 = ((char *)v38 - (char *)*a4) >> 4;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60) {
LABEL_47:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v43 = v37 - (void)v40;
    if (v43 >> 3 > v42) {
      unint64_t v42 = v43 >> 3;
    }
    BOOL v29 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
    if (!v29) {
      unint64_t v44 = v42;
    }
    if (v44 >> 60) {
LABEL_48:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v45 = 16 * v44;
    int v46 = (char *)operator new(16 * v44);
    uint64_t v47 = (int **)&v46[16 * v41];
    BOOL v48 = &v46[v45];
    *uint64_t v47 = v36;
    v47[1] = (int *)v16;
    uint64_t v39 = v47 + 2;
    if (v38 == v40)
    {
      *a4 = v47;
      a4[1] = v39;
      a4[2] = (int **)v48;
      if (v40) {
        goto LABEL_42;
      }
    }
    else
    {
      do
      {
        uint64_t v49 = v47 - 2;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
        v38 -= 2;
        v47 -= 2;
      }
      while (v38 != v40);
      *a4 = v49;
      a4[1] = v39;
      a4[2] = (int **)v48;
      if (v40) {
LABEL_42:
      }
        operator delete(v40);
    }
LABEL_43:
    a4[1] = v39;
  }
}

uint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::FailWhenEnergyIsTooLarge(void *a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = a1;
  operations_research::sat::NonOverlappingRectanglesEnergyPropagator::SortBoxesIntoNeighbors(a1, a2, a3, a4, a5);
  uint64_t v8 = v7[18];
  if (v7[19] == v8) {
    return 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v7[12];
  uint64_t v11 = *(void *)(v10 + 8 * a2);
  uint64_t v12 = v7[15];
  uint64_t v75 = a2;
  int v77 = a2;
  uint64_t v13 = (int64_t *)(v12 + 32 * a2);
  int64_t v14 = v13[2];
  int64_t v15 = v13[3];
  int64_t v16 = *v13;
  int64_t v17 = v13[1];
  unint64_t v18 = 1;
  while (1)
  {
    uint64_t v19 = *(int *)(v8 + v9);
    uint64_t v20 = (uint64_t *)(v10 + 8 * v19);
    LODWORD(v81[0]) = 0;
    if (*v20 < 1) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v20, (int)v81, "cached_areas_[other_box] > 0");
    }
    unint64_t v21 = (int64_t *)(v12 + 32 * v19);
    int64_t v22 = v21[1];
    if (*v21 < v16) {
      int64_t v16 = *v21;
    }
    int64_t v24 = v21[2];
    int64_t v23 = v21[3];
    if (v24 < v14) {
      int64_t v14 = v24;
    }
    if (v17 <= v22) {
      int64_t v17 = v22;
    }
    if (v15 <= v23) {
      int64_t v15 = v23;
    }
    uint64_t v25 = (v15 - v14) * (v17 - v16);
    if (v25 >= a5) {
      return 1;
    }
    v11 += *(void *)(v10 + 8 * v19);
    if (v11 > v25) {
      break;
    }
    uint64_t v8 = v7[18];
    v9 += 12;
    if (0xAAAAAAAAAAAAAAABLL * ((v7[19] - v8) >> 2) <= v18++) {
      return 1;
    }
  }
  unint64_t v80 = v14;
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v7[1]);
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v7[2]);
  uint64_t v28 = v7[1];
  int v29 = *(_DWORD *)(*(void *)(v28 + 80) + 4 * v75);
  if (v29 == -1) {
    unint64_t v30 = (unint64_t *)(*(void *)(v28 + 104) + 8 * v75);
  }
  else {
    unint64_t v30 = (unint64_t *)(*(void *)(*(void *)(v28 + 8) + 40) + 12 * v29);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v28, v77, *v30, v16);
  operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason((operations_research::sat::SchedulingConstraintHelper *)v7[1], v77, v17);
  uint64_t v31 = v7[2];
  int v32 = *(_DWORD *)(*(void *)(v31 + 80) + 4 * v75);
  if (v32 == -1) {
    unint64_t v33 = (unint64_t *)(*(void *)(v31 + 104) + 8 * v75);
  }
  else {
    unint64_t v33 = (unint64_t *)(*(void *)(*(void *)(v31 + 8) + 40) + 12 * v32);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v31, v77, *v33, v80);
  operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason((operations_research::sat::SchedulingConstraintHelper *)v7[2], v77, v15);
  uint64_t v34 = 0;
  if (v17 >= (uint64_t)0x8000000000000002) {
    unint64_t v35 = -v17;
  }
  else {
    unint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v78 = v35;
  unint64_t v79 = v18;
  unint64_t v36 = HIDWORD(v35);
  if (v15 >= (uint64_t)0x8000000000000002) {
    unint64_t v37 = -v15;
  }
  else {
    unint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
  }
  int v74 = v36;
  unint64_t v76 = v37;
  uint64_t v72 = v7;
  unint64_t v73 = HIDWORD(v37);
  do
  {
    uint64_t v39 = *(int *)(v7[18] + 12 * v34);
    uint64_t v40 = v7[1];
    int v41 = *(_DWORD *)(*(void *)(v40 + 80) + 4 * v39);
    if (v41 == -1) {
      unint64_t v42 = (unint64_t *)(*(void *)(v40 + 104) + 8 * v39);
    }
    else {
      unint64_t v42 = (unint64_t *)(*(void *)(*(void *)(v40 + 8) + 40) + 12 * v41);
    }
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v40, *(_DWORD *)(v7[18] + 12 * v34), *v42, v16);
    uint64_t v43 = (operations_research::sat::SchedulingConstraintHelper *)v7[1];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v43, v39);
    LODWORD(v81[0]) = *(_DWORD *)(*((void *)v43 + 7) + 4 * v39) ^ 1;
    *(void *)((char *)v81 + 4) = v78;
    uint64_t v45 = (char *)*((void *)v43 + 49);
    unint64_t v44 = *((void *)v43 + 50);
    if ((unint64_t)v45 < v44)
    {
      *(void *)uint64_t v45 = v81[0];
      *((_DWORD *)v45 + 2) = v74;
      unint64_t v46 = v80;
      *((void *)v43 + 49) = v45 + 12;
      uint64_t v47 = v7[2];
      int v48 = *(_DWORD *)(*(void *)(v47 + 80) + 4 * v39);
      if (v48 != -1) {
        goto LABEL_38;
      }
      goto LABEL_55;
    }
    long long v50 = (unsigned char *)*((void *)v43 + 48);
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v50) >> 2) + 1;
    if (v51 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)v50) >> 2);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v53 = 0x1555555555555555;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      if (v53 > 0x1555555555555555) {
        goto LABEL_77;
      }
      uint64_t v54 = (char *)operator new(12 * v53);
    }
    else
    {
      uint64_t v54 = 0;
    }
    uint64_t v55 = &v54[4 * ((v45 - v50) >> 2)];
    *(void *)uint64_t v55 = v81[0];
    *((_DWORD *)v55 + 2) = v74;
    uint64_t v56 = v55;
    if (v45 == v50)
    {
      unint64_t v7 = v72;
      uint64_t v59 = v55 + 12;
      *((void *)v43 + 48) = v55;
      *((void *)v43 + 49) = v55 + 12;
      *((void *)v43 + 50) = &v54[12 * v53];
      if (v45) {
        goto LABEL_53;
      }
    }
    else
    {
      unint64_t v7 = v72;
      do
      {
        uint64_t v57 = *(void *)(v45 - 12);
        v45 -= 12;
        int v58 = *((_DWORD *)v45 + 2);
        *(void *)(v56 - 12) = v57;
        v56 -= 12;
        *((_DWORD *)v56 + 2) = v58;
      }
      while (v45 != v50);
      uint64_t v45 = (char *)*((void *)v43 + 48);
      uint64_t v59 = v55 + 12;
      *((void *)v43 + 48) = v56;
      *((void *)v43 + 49) = v55 + 12;
      *((void *)v43 + 50) = &v54[12 * v53];
      if (v45) {
LABEL_53:
      }
        operator delete(v45);
    }
    unint64_t v46 = v80;
    *((void *)v43 + 49) = v59;
    uint64_t v47 = v7[2];
    int v48 = *(_DWORD *)(*(void *)(v47 + 80) + 4 * v39);
    if (v48 != -1)
    {
LABEL_38:
      uint64_t v49 = (unint64_t *)(*(void *)(*(void *)(v47 + 8) + 40) + 12 * v48);
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v49 = (unint64_t *)(*(void *)(v47 + 104) + 8 * v39);
LABEL_56:
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v47, v39, *v49, v46);
    BOOL v60 = (operations_research::sat::SchedulingConstraintHelper *)v7[2];
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v60, v39);
    LODWORD(v81[0]) = *(_DWORD *)(*((void *)v60 + 7) + 4 * v39) ^ 1;
    *(void *)((char *)v81 + 4) = v76;
    uint64_t v62 = (_DWORD *)*((void *)v60 + 49);
    unint64_t v61 = *((void *)v60 + 50);
    if ((unint64_t)v62 < v61)
    {
      *(void *)uint64_t v62 = v81[0];
      v62[2] = v73;
      unint64_t v38 = v62 + 3;
      goto LABEL_32;
    }
    uint64_t v63 = (_DWORD *)*((void *)v60 + 48);
    unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (v62 - v63) + 1;
    if (v64 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)v63) >> 2);
    if (2 * v65 > v64) {
      unint64_t v64 = 2 * v65;
    }
    if (v65 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v66 = 0x1555555555555555;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      if (v66 > 0x1555555555555555) {
LABEL_77:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      char v67 = (char *)operator new(12 * v66);
    }
    else
    {
      char v67 = 0;
    }
    unsigned __int32 v68 = &v67[4 * (v62 - v63)];
    *(void *)unsigned __int32 v68 = v81[0];
    *((_DWORD *)v68 + 2) = v73;
    uint64_t v69 = v68;
    if (v62 == v63)
    {
      unint64_t v7 = v72;
      unint64_t v38 = v68 + 12;
      *((void *)v60 + 48) = v68;
      *((void *)v60 + 49) = v68 + 12;
      *((void *)v60 + 50) = &v67[12 * v66];
      if (!v62) {
        goto LABEL_32;
      }
LABEL_75:
      operator delete(v62);
      goto LABEL_32;
    }
    unint64_t v7 = v72;
    do
    {
      uint64_t v70 = *(void *)(v62 - 3);
      v62 -= 3;
      int v71 = v62[2];
      *(void *)(v69 - 12) = v70;
      v69 -= 12;
      *((_DWORD *)v69 + 2) = v71;
    }
    while (v62 != v63);
    uint64_t v62 = (_DWORD *)*((void *)v60 + 48);
    unint64_t v38 = v68 + 12;
    *((void *)v60 + 48) = v69;
    *((void *)v60 + 49) = v68 + 12;
    *((void *)v60 + 50) = &v67[12 * v66];
    if (v62) {
      goto LABEL_75;
    }
LABEL_32:
    *((void *)v60 + 49) = v38;
    ++v34;
  }
  while (v79 != v34);
  operations_research::sat::SchedulingConstraintHelper::ImportOtherReasons((operations_research::sat::SchedulingConstraintHelper *)v7[1], (char **)v7[2]);
  return operations_research::sat::SchedulingConstraintHelper::ReportConflict((operations_research::sat::SchedulingConstraintHelper *)v7[1]);
}

void sub_23CCC2DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::RegisterWith(operations_research::sat::SchedulingConstraintHelper **this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unint64_t v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(this[1], v4, a2, 0, 1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(this[2], v4, a2, 0, 1);
  return v4;
}

unint64_t operations_research::sat::NonOverlappingRectanglesEnergyPropagator::SortBoxesIntoNeighbors(void *a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = (void **)(a1 + 18);
  unint64_t v5 = (char *)a1[18];
  uint64_t v7 = a1[15];
  a1[19] = v5;
  if (a4)
  {
    uint64_t v9 = a3;
    int v10 = a2;
    uint64_t v12 = (uint64_t *)(v7 + 32 * a2);
    uint64_t v13 = &a3[a4];
    int64_t v14 = v12 + 1;
    int64_t v15 = v12 + 3;
    int64_t v16 = v12 + 2;
    unint64_t v46 = v13;
    uint64_t v47 = v12;
    unint64_t v44 = v12 + 3;
    uint64_t v45 = v12 + 1;
    uint64_t v43 = v12 + 2;
    do
    {
      int v18 = *v9;
      if (*v9 != v10)
      {
        uint64_t v19 = (uint64_t *)(a1[15] + 32 * v18);
        uint64_t v20 = *v14;
        if (*v14 <= v19[1]) {
          uint64_t v20 = v19[1];
        }
        uint64_t v21 = *v12;
        if (*v19 < *v12) {
          uint64_t v21 = *v19;
        }
        uint64_t v22 = v20 - v21;
        uint64_t v23 = *v15;
        uint64_t v26 = v19 + 2;
        uint64_t v24 = v19[2];
        uint64_t v25 = v26[1];
        if (*v15 <= v25) {
          uint64_t v23 = v25;
        }
        if (v24 >= *v16) {
          uint64_t v24 = *v16;
        }
        uint64_t v27 = (v23 - v24) * v22;
        if (v27 < a5)
        {
          unint64_t v28 = a1[20];
          if ((unint64_t)v5 < v28)
          {
            *(_DWORD *)unint64_t v5 = v18;
            *(void *)(v5 + 4) = v27;
            int64_t v17 = v5 + 12;
          }
          else
          {
            int v29 = v6;
            unint64_t v30 = *v6;
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v30) >> 2) + 1;
            if (v31 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v30) >> 2);
            if (2 * v32 > v31) {
              unint64_t v31 = 2 * v32;
            }
            if (v32 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v33 = 0x1555555555555555;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              if (v33 > 0x1555555555555555) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v34 = (char *)operator new(12 * v33);
            }
            else
            {
              uint64_t v34 = 0;
            }
            unint64_t v35 = &v34[4 * ((v5 - v30) >> 2)];
            *(_DWORD *)unint64_t v35 = v18;
            *(void *)(v35 + 4) = v27;
            unint64_t v36 = v35;
            if (v5 == v30)
            {
              unint64_t v6 = v29;
            }
            else
            {
              do
              {
                uint64_t v37 = *(void *)(v5 - 12);
                v5 -= 12;
                int v38 = *((_DWORD *)v5 + 2);
                *(void *)(v36 - 12) = v37;
                v36 -= 12;
                *((_DWORD *)v36 + 2) = v38;
              }
              while (v5 != v30);
              unint64_t v6 = v29;
              unint64_t v5 = (char *)*v29;
            }
            int v10 = a2;
            int64_t v17 = v35 + 12;
            a1[18] = v36;
            a1[19] = v35 + 12;
            a1[20] = &v34[12 * v33];
            if (v5) {
              operator delete(v5);
            }
            uint64_t v13 = v46;
            uint64_t v12 = v47;
            int64_t v15 = v44;
            int64_t v14 = v45;
            int64_t v16 = v43;
          }
          a1[19] = v17;
          unint64_t v5 = v17;
        }
      }
      ++v9;
    }
    while (v9 != v13);
    unint64_t v39 = (unint64_t)*v6;
  }
  else
  {
    unint64_t v39 = (unint64_t)v5;
  }
  unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v39] >> 2));
  if (v5 == (char *)v39) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(v39, v5, (uint64_t)&v49, v41, 1);
}

operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::NonOverlappingRectanglesDisjunctivePropagator(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3, operations_research::sat::SchedulingConstraintHelper *a4, operations_research::sat::Model *a5)
{
  *(void *)this = &unk_26F0C2848;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  uint64_t v9 = (operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24);
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24), (*((void *)a3 + 5) - *((void *)a3 + 4)) >> 2, a5);
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 472), (*((void *)a4 + 5) - *((void *)a4 + 4)) >> 2, a5);
  *((unsigned char *)this + 920) = a2;
  *((void *)this + 116) = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)a5);
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((void *)this + 126) = 0;
  *((void *)this + 127) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((void *)this + 138) = 0;
  operations_research::sat::DisjunctiveOverloadChecker::DisjunctiveOverloadChecker((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1112), v9);
  operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1240), 1, v9);
  operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1392), 0, v9);
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1544), 1, v9);
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 1648), 0, v9);
  *((void *)this + 219) = &unk_26F0C2A80;
  *((unsigned char *)this + 1760) = 1;
  *((void *)this + 221) = v9;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 1824);
  *((void *)this + 241) = 0;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *((void *)this + 242) = &unk_26F0C2A80;
  *((unsigned char *)this + 1944) = 0;
  *((void *)this + 244) = v9;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 2008);
  *((void *)this + 264) = 0;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  return this;
}

void sub_23CCC3298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v20 = *(void **)(v11 + 1984);
  if (v20)
  {
    *(void *)(v11 + 1992) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v15;
  if (*v15)
  {
    *(void *)(v11 + 1968) = v21;
    operator delete(v21);
  }
  operations_research::sat::DisjunctiveEdgeFinding::~DisjunctiveEdgeFinding(v19);
  operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(v18);
  operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(v17);
  operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(v16);
  operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(v14);
  operations_research::sat::DisjunctiveOverloadChecker::~DisjunctiveOverloadChecker(v13);
  uint64_t v22 = *(void **)(v11 + 1088);
  if (v22)
  {
    *(void *)(v11 + 1096) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v11 + 1064);
  if (v23)
  {
    *(void *)(v11 + 1072) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void **)(v11 + 944);
  absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<int>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::~flat_hash_set(v11 + 1016);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v11 + 992));
  uint64_t v25 = *(void **)(v11 + 968);
  if (v25)
  {
    *(void *)(v11 + 976) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v24;
  if (*v24)
  {
    *(void *)(v11 + 952) = v26;
    operator delete(v26);
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v12);
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
    _Unwind_Resume(a1);
  }
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v12);
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
  _Unwind_Resume(a1);
}

void sub_23CCC33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v10);
  _Unwind_Resume(a1);
}

void operations_research::sat::DisjunctiveEdgeFinding::~DisjunctiveEdgeFinding(operations_research::sat::DisjunctiveEdgeFinding *this)
{
  *(void *)this = &unk_26F0C2A80;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26F0C2A80;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::DisjunctiveNotLast::~DisjunctiveNotLast(operations_research::sat::DisjunctiveNotLast *this)
{
  *(void *)this = &unk_26F0C2A38;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26F0C2A38;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::DisjunctiveDetectablePrecedences::~DisjunctiveDetectablePrecedences(operations_research::sat::DisjunctiveDetectablePrecedences *this)
{
  *(void *)this = &unk_26F0C29F0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_26F0C29F0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::DisjunctiveOverloadChecker::~DisjunctiveOverloadChecker(operations_research::sat::DisjunctiveOverloadChecker *this)
{
  *(void *)this = &unk_26F0C29A8;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26F0C29A8;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }

  JUMPOUT(0x23ECF2BC0);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<absl::lts_2020_02_25::Span<int>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::~NonOverlappingRectanglesDisjunctivePropagator(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this)
{
  *(void *)this = &unk_26F0C2848;
  *((void *)this + 242) = &unk_26F0C2A80;
  uint64_t v2 = (void *)*((void *)this + 262);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 259);
  if (v3)
  {
    *((void *)this + 260) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 256);
  if (v4)
  {
    *((void *)this + 257) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 253);
  if (v5)
  {
    *((void *)this + 254) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 248);
  if (v6)
  {
    *((void *)this + 249) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 245);
  if (v7)
  {
    *((void *)this + 246) = v7;
    operator delete(v7);
  }
  *((void *)this + 219) = &unk_26F0C2A80;
  uint64_t v8 = (void *)*((void *)this + 239);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 236);
  if (v9)
  {
    *((void *)this + 237) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 233);
  if (v10)
  {
    *((void *)this + 234) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 230);
  if (v11)
  {
    *((void *)this + 231) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 225);
  if (v12)
  {
    *((void *)this + 226) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 222);
  if (v13)
  {
    *((void *)this + 223) = v13;
    operator delete(v13);
  }
  *((void *)this + 206) = &unk_26F0C2A38;
  int64_t v14 = (void *)*((void *)this + 215);
  if (v14)
  {
    *((void *)this + 216) = v14;
    operator delete(v14);
  }
  int64_t v15 = (void *)*((void *)this + 210);
  if (v15)
  {
    *((void *)this + 211) = v15;
    operator delete(v15);
  }
  int64_t v16 = (void *)*((void *)this + 207);
  if (v16)
  {
    *((void *)this + 208) = v16;
    operator delete(v16);
  }
  *((void *)this + 193) = &unk_26F0C2A38;
  int64_t v17 = (void *)*((void *)this + 202);
  if (v17)
  {
    *((void *)this + 203) = v17;
    operator delete(v17);
  }
  int v18 = (void *)*((void *)this + 197);
  if (v18)
  {
    *((void *)this + 198) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 194);
  if (v19)
  {
    *((void *)this + 195) = v19;
    operator delete(v19);
  }
  *((void *)this + 174) = &unk_26F0C29F0;
  uint64_t v20 = (void *)*((void *)this + 189);
  if (v20)
  {
    *((void *)this + 190) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 184);
  if (v21)
  {
    *((void *)this + 185) = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)*((void *)this + 181);
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 178);
  if (v23)
  {
    *((void *)this + 179) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 175);
  if (v24)
  {
    *((void *)this + 176) = v24;
    operator delete(v24);
  }
  *((void *)this + 155) = &unk_26F0C29F0;
  uint64_t v25 = (void *)*((void *)this + 170);
  if (v25)
  {
    *((void *)this + 171) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 165);
  if (v26)
  {
    *((void *)this + 166) = v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)*((void *)this + 162);
  if (v27) {
    operator delete(v27);
  }
  unint64_t v28 = (void *)*((void *)this + 159);
  if (v28)
  {
    *((void *)this + 160) = v28;
    operator delete(v28);
  }
  int v29 = (void *)*((void *)this + 156);
  if (v29)
  {
    *((void *)this + 157) = v29;
    operator delete(v29);
  }
  *((void *)this + 139) = &unk_26F0C29A8;
  unint64_t v30 = (void *)*((void *)this + 152);
  if (v30)
  {
    *((void *)this + 153) = v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)*((void *)this + 149);
  if (v31)
  {
    *((void *)this + 150) = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)*((void *)this + 144);
  if (v32)
  {
    *((void *)this + 145) = v32;
    operator delete(v32);
  }
  unint64_t v33 = (void *)*((void *)this + 141);
  if (v33)
  {
    *((void *)this + 142) = v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)*((void *)this + 136);
  if (v34)
  {
    *((void *)this + 137) = v34;
    operator delete(v34);
  }
  unint64_t v35 = (void *)*((void *)this + 133);
  if (v35)
  {
    *((void *)this + 134) = v35;
    operator delete(v35);
  }
  if (*((void *)this + 130))
  {
    operator delete(*((void **)this + 127));
    *((void *)this + 127) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 132) = 0;
    *((void *)this + 128) = 0;
    *((void *)this + 130) = 0;
    *((void *)this + 129) = 0;
  }
  unint64_t v36 = (void *)*((void *)this + 131);
  if (v36) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v36);
  }
  uint64_t v37 = *((void *)this + 124);
  if (v37)
  {
    uint64_t v38 = *((void *)this + 125);
    unint64_t v39 = (void *)*((void *)this + 124);
    if (v38 != v37)
    {
      uint64_t v40 = *((void *)this + 125);
      do
      {
        unint64_t v42 = *(void **)(v40 - 24);
        v40 -= 24;
        uint64_t v41 = v42;
        if (v42)
        {
          *(void *)(v38 - 16) = v41;
          operator delete(v41);
        }
        uint64_t v38 = v40;
      }
      while (v40 != v37);
      unint64_t v39 = (void *)*((void *)this + 124);
    }
    *((void *)this + 125) = v37;
    operator delete(v39);
  }
  uint64_t v43 = (void *)*((void *)this + 121);
  if (v43)
  {
    *((void *)this + 122) = v43;
    operator delete(v43);
  }
  unint64_t v44 = (void *)*((void *)this + 118);
  if (v44)
  {
    *((void *)this + 119) = v44;
    operator delete(v44);
  }
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 472));
  operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24));
}

{
  uint64_t vars8;

  operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::~NonOverlappingRectanglesDisjunctivePropagator(this);

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Register(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this, int a2, int a3)
{
  int v6 = operations_research::sat::GenericLiteralWatcher::Register(*((void *)this + 116), (uint64_t)this);
  *((_DWORD *)this + 234) = v6;
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 116), v6, a2);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), *((_DWORD *)this + 234), *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 2), *((_DWORD *)this + 234), *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  unsigned int v7 = operations_research::sat::GenericLiteralWatcher::Register(*((void *)this + 116), (uint64_t)this);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(*((operations_research::sat::GenericLiteralWatcher **)this + 116), v7, a3);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v7, *((operations_research::sat::GenericLiteralWatcher **)this + 116), 1, 1);
  uint64_t v8 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 2);
  uint64_t v9 = (operations_research::sat::GenericLiteralWatcher *)*((void *)this + 116);

  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(v8, v7, v9, 1, 1);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(void *a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v4 = a1;
  unint64_t v5 = (char *)a1[118];
  a1[119] = v5;
  __s2 = (void **)(a1 + 121);
  a1[122] = a1[121];
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  v194 = a3;
  uint64_t v195 = (uint64_t)a2;
  if ((int)((unint64_t)(v6 - v7) >> 2) < 1) {
    return 1;
  }
  uint64_t v8 = 0;
  uint64_t v204 = (void **)(a1 + 118);
  do
  {
    if (!*((unsigned char *)v4 + 920))
    {
      int v15 = *(_DWORD *)(a2[10] + 4 * v8);
      if (v15 == -1)
      {
        if (!*(void *)(a2[13] + 8 * v8)) {
          goto LABEL_5;
        }
      }
      else if (!*(void *)(*(void *)(a2[1] + 40) + 12 * v15))
      {
        goto LABEL_5;
      }
      int v25 = *(_DWORD *)(a3[10] + 4 * v8);
      if (v25 == -1)
      {
        if (!*(void *)(a3[13] + 8 * v8)) {
          goto LABEL_5;
        }
      }
      else if (!*(void *)(*(void *)(a3[1] + 40) + 12 * v25))
      {
        goto LABEL_5;
      }
    }
    uint64_t v10 = *(void *)(a3[1] + 40);
    uint64_t v11 = -*(void *)(v10 + 12 * (*(_DWORD *)(a3[4] + 4 * v8) ^ 1));
    if (*(void *)(v10 + 12 * *(int *)(a3[7] + 4 * v8)) > v11)
    {
      uint64_t v12 = (char *)v4[122];
      unint64_t v13 = v4[123];
      if ((unint64_t)v12 < v13)
      {
        *(void *)uint64_t v12 = v11;
        v4[122] = v12 + 8;
        unint64_t v14 = v4[120];
        if ((unint64_t)v5 >= v14) {
          goto LABEL_40;
        }
LABEL_3:
        *(_DWORD *)unint64_t v5 = v8;
        uint64_t v9 = (uint64_t)(v5 + 4);
LABEL_4:
        v4[119] = v9;
        uint64_t v7 = a2[4];
        uint64_t v6 = a2[5];
        unint64_t v5 = (char *)v9;
        a3 = v194;
        goto LABEL_5;
      }
      int64_t v16 = (char *)*__s2;
      uint64_t v17 = v12 - (unsigned char *)*__s2;
      uint64_t v18 = v17 >> 3;
      unint64_t v19 = (v17 >> 3) + 1;
      if (v19 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v13 - (void)v16;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          goto LABEL_230;
        }
        uint64_t v22 = operator new(8 * v21);
        unint64_t v4 = a1;
        uint64_t v23 = &v22[8 * v18];
        void *v23 = v11;
        uint64_t v24 = (uint64_t)(v23 + 1);
        if (v12 == v16)
        {
LABEL_37:
          v4[121] = v23;
          v4[122] = v24;
          v4[123] = &v22[8 * v21];
          if (v16)
          {
            operator delete(v16);
            unint64_t v4 = a1;
            unint64_t v5 = (char *)a1[119];
          }
          a2 = (void *)v195;
          v4[122] = v24;
          unint64_t v14 = v4[120];
          if ((unint64_t)v5 < v14) {
            goto LABEL_3;
          }
LABEL_40:
          unint64_t v35 = (char *)*v204;
          uint64_t v36 = v5 - (unsigned char *)*v204;
          uint64_t v37 = v36 >> 2;
          unint64_t v38 = (v36 >> 2) + 1;
          if (v38 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v14 - (void)v35;
          if (v39 >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 >> 62) {
              goto LABEL_230;
            }
            uint64_t v41 = operator new(4 * v40);
            unint64_t v4 = a1;
            unint64_t v42 = &v41[4 * v37];
            *unint64_t v42 = v8;
            uint64_t v9 = (uint64_t)(v42 + 1);
            if (v5 == v35) {
              goto LABEL_54;
            }
LABEL_51:
            unint64_t v43 = v5 - 4 - v35;
            if (v43 < 0xBC)
            {
              unint64_t v44 = v5;
              goto LABEL_53;
            }
            if (&v41[v36 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v36 - 4])
            {
              unint64_t v44 = v5;
              goto LABEL_53;
            }
            if (&v5[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
            {
              unint64_t v44 = v5;
              goto LABEL_53;
            }
            if ((unint64_t)(v5 - v41 - v36) < 0x20)
            {
              unint64_t v44 = v5;
              goto LABEL_53;
            }
            uint64_t v46 = (v43 >> 2) + 1;
            uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v44 = &v5[-v47];
            unint64_t v42 = (_DWORD *)((char *)v42 - v47);
            int v48 = &v41[4 * v37 - 16];
            char v49 = v5 - 16;
            uint64_t v50 = v46 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              _OWORD *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_53:
                int v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *--unint64_t v42 = v45;
              }
              while (v44 != v35);
            }
          }
          else
          {
            uint64_t v41 = 0;
            unint64_t v42 = (_DWORD *)(4 * v37);
            *(_DWORD *)(4 * v37) = v8;
            uint64_t v9 = 4 * v37 + 4;
            if (v5 != v35) {
              goto LABEL_51;
            }
          }
LABEL_54:
          v4[118] = v42;
          v4[119] = v9;
          v4[120] = &v41[4 * v40];
          if (v35)
          {
            operator delete(v35);
            unint64_t v4 = a1;
          }
          a2 = (void *)v195;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (void *)(8 * v18);
        *(void *)(8 * v18) = v11;
        uint64_t v24 = 8 * v18 + 8;
        if (v12 == v16) {
          goto LABEL_37;
        }
      }
      unint64_t v26 = v12 - 8 - v16;
      if (v26 < 0x58) {
        goto LABEL_238;
      }
      if ((unint64_t)(v12 - &v22[v17]) < 0x20) {
        goto LABEL_238;
      }
      uint64_t v27 = (v26 >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      int v29 = &v12[-v28];
      uint64_t v23 = (void *)((char *)v23 - v28);
      unint64_t v30 = &v22[8 * v18 - 16];
      unint64_t v31 = v12 - 16;
      uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        _OWORD *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 4;
      }
      while (v32);
      uint64_t v12 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_238:
        do
        {
          uint64_t v34 = *((void *)v12 - 1);
          v12 -= 8;
          *--uint64_t v23 = v34;
        }
        while (v12 != v16);
      }
      goto LABEL_37;
    }
LABEL_5:
    ++v8;
  }
  while (v8 < (int)((unint64_t)(v6 - v7) >> 2));
  if ((unint64_t)(v5 - (unsigned char *)*v204) < 8) {
    return 1;
  }
  uint64_t v52 = v4[121];
  unint64_t v53 = (char *)v4[122];
  unint64_t v54 = 126 - 2 * __clz((uint64_t)&v53[-v52] >> 3);
  if (v53 == (char *)v52) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v54;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>(v52, v53, (uint64_t)v211, v55, 1);
  uint64_t v56 = a1;
  uint64_t v57 = (char *)a1[121];
  int v58 = (char *)a1[122];
  if (v57 != v58)
  {
    uint64_t v59 = v57 + 8;
    while (v59 != v58)
    {
      uint64_t v60 = *((void *)v59 - 1);
      uint64_t v61 = *(void *)v59;
      v59 += 8;
      if (v60 == v61)
      {
        uint64_t v62 = v59 - 16;
        while (v59 != v58)
        {
          uint64_t v63 = v60;
          uint64_t v60 = *(void *)v59;
          if (v63 != *(void *)v59)
          {
            *((void *)v62 + 1) = v60;
            v62 += 8;
          }
          v59 += 8;
        }
        unint64_t v65 = v62 + 8;
        int64_t v66 = v58 - (v62 + 8);
        if (v58 == v62 + 8) {
          break;
        }
        if (v58 != (char *)v65 + v66)
        {
          memmove(v62 + 8, (char *)v65 + v66, 0);
          uint64_t v56 = a1;
        }
        unint64_t v64 = v65;
        v56[122] = v65;
        goto LABEL_88;
      }
    }
  }
  unint64_t v64 = (void *)a1[122];
LABEL_88:
  char v67 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v56 + 124);
  unint64_t v68 = ((uint64_t)v64 - v56[121]) >> 3;
  uint64_t v69 = v56[125];
  uint64_t v70 = v56[124];
  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3);
  if (v68 <= v71)
  {
    if (v68 < v71)
    {
      uint64_t v72 = v70 + 24 * v68;
      if (v69 != v72)
      {
        uint64_t v73 = v56[125];
        do
        {
          uint64_t v75 = *(void **)(v73 - 24);
          v73 -= 24;
          int v74 = v75;
          if (v75)
          {
            *(void *)(v69 - 16) = v74;
            operator delete(v74);
            uint64_t v56 = a1;
          }
          uint64_t v69 = v73;
        }
        while (v73 != v72);
      }
      v56[125] = v72;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)(v56 + 124), v68 - v71);
    uint64_t v56 = a1;
  }
  unint64_t v76 = (void *)v56[122];
  uint64_t v77 = (uint64_t)v76 - v56[121];
  if (v77)
  {
    unint64_t v78 = v77 >> 3;
    uint64_t v79 = *(void *)v67;
    if (v78 <= 1) {
      unint64_t v78 = 1;
    }
    if (v78 < 2)
    {
      unint64_t v80 = 0;
      goto LABEL_105;
    }
    unint64_t v80 = v78 & 0xFFFFFFFFFFFFFFFELL;
    unsigned __int8 v81 = (uint64_t *)(v79 + 24);
    unint64_t v82 = v78 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v83 = *v81;
      *(v81 - 2) = *(v81 - 3);
      v81[1] = v83;
      v81 += 6;
      v82 -= 2;
    }
    while (v82);
    if (v78 != v80)
    {
LABEL_105:
      int v84 = (void *)(v79 + 24 * v80 + 8);
      unint64_t v85 = v78 - v80;
      do
      {
        *int v84 = *(v84 - 1);
        v84 += 3;
        --v85;
      }
      while (v85);
    }
  }
  uint64_t v197 = (int *)v56[119];
  long long v199 = (int *)v56[118];
  if (v199 != v197)
  {
    char v86 = *__s2;
    long long v87 = v76;
    uint64_t v201 = v67;
    while (v87 == v86)
    {
      long long v87 = v86;
LABEL_110:
      if (++v199 == v197) {
        goto LABEL_139;
      }
    }
    unint64_t v88 = 0;
    __s2a = (void *)*v199;
    uint64_t v89 = *(void *)(v194[1] + 40);
    uint64_t v90 = -*(void *)(v89 + 12 * (*(_DWORD *)(v194[4] + 4 * (void)__s2a) ^ 1));
    uint64_t v91 = *(void *)(v89 + 12 * *(int *)(v194[7] + 4 * (void)__s2a));
    uint64_t v202 = v91;
    uint64_t v205 = v90;
    while (2)
    {
      uint64_t v93 = v86[v88];
      if (v93 < v90) {
        goto LABEL_115;
      }
      if (v93 >= v91) {
        goto LABEL_110;
      }
      uint64_t v94 = *(void *)v67 + 24 * v88;
      unint64_t v96 = (uint64_t *)(v94 + 8);
      int64_t v95 = *(char **)(v94 + 8);
      unint64_t v97 = *(void *)(v94 + 16);
      if ((unint64_t)v95 < v97)
      {
        *(_DWORD *)int64_t v95 = __s2a;
        uint64_t v92 = (uint64_t)(v95 + 4);
        goto LABEL_114;
      }
      uint64_t v98 = *(char **)v94;
      uint64_t v99 = (uint64_t)&v95[-*(void *)v94];
      uint64_t v100 = v99 >> 2;
      unint64_t v101 = (v99 >> 2) + 1;
      if (v101 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v102 = v97 - (void)v98;
      if (v102 >> 1 > v101) {
        unint64_t v101 = v102 >> 1;
      }
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v103 = v101;
      }
      if (v103)
      {
        if (v103 >> 62) {
          goto LABEL_230;
        }
        uint64_t v104 = operator new(4 * v103);
        uint64_t v56 = a1;
        uint64_t v105 = &v104[4 * v100];
        *uint64_t v105 = __s2a;
        uint64_t v92 = (uint64_t)(v105 + 1);
        if (v95 == v98)
        {
LABEL_136:
          *(void *)uint64_t v94 = v105;
          *unint64_t v96 = v92;
          *(void *)(v94 + 16) = &v104[4 * v103];
          if (v98)
          {
            operator delete(v98);
            uint64_t v56 = a1;
          }
          char v67 = v201;
          uint64_t v91 = v202;
          uint64_t v90 = v205;
LABEL_114:
          *unint64_t v96 = v92;
          unint64_t v76 = (void *)v56[122];
          char v86 = (void *)v56[121];
LABEL_115:
          ++v88;
          long long v87 = v76;
          if (v88 >= v76 - v86) {
            goto LABEL_110;
          }
          continue;
        }
      }
      else
      {
        uint64_t v104 = 0;
        uint64_t v105 = (_DWORD *)(4 * v100);
        *(_DWORD *)(4 * v100) = __s2a;
        uint64_t v92 = 4 * v100 + 4;
        if (v95 == v98) {
          goto LABEL_136;
        }
      }
      break;
    }
    unint64_t v106 = v95 - 4 - v98;
    if (v106 < 0x2C) {
      goto LABEL_239;
    }
    if ((unint64_t)(v95 - &v104[v99]) < 0x20) {
      goto LABEL_239;
    }
    uint64_t v107 = (v106 >> 2) + 1;
    uint64_t v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v109 = &v95[-v108];
    uint64_t v105 = (_DWORD *)((char *)v105 - v108);
    uint64_t v110 = &v104[4 * v100 - 16];
    uint64_t v111 = v95 - 16;
    uint64_t v112 = v107 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v113 = *(_OWORD *)v111;
      *(v110 - 1) = *((_OWORD *)v111 - 1);
      *uint64_t v110 = v113;
      v110 -= 2;
      v111 -= 32;
      v112 -= 8;
    }
    while (v112);
    int64_t v95 = v109;
    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_239:
      do
      {
        int v114 = *((_DWORD *)v95 - 1);
        v95 -= 4;
        *--uint64_t v105 = v114;
      }
      while (v95 != v98);
    }
    goto LABEL_136;
  }
LABEL_139:
  int64_t v115 = (uint64_t *)v56[124];
  uint64_t v116 = (uint64_t *)v56[125];
  if (v115 == v116)
  {
    int v117 = 0;
  }
  else
  {
    int v117 = 0;
    do
    {
      uint64_t v122 = *v115;
      uint64_t v123 = v115[1];
      if ((unint64_t)(v123 - *v115) >= 8)
      {
        uint64_t v124 = *(void *)v67;
        if (v117 >= 1)
        {
          uint64_t v125 = v124 + 24 * (v117 - 1);
          unint64_t v126 = *(_DWORD **)v125;
          unint64_t v127 = *(_DWORD **)(v125 + 8);
          BOOL v128 = v126 == v127;
          if (v122 == v123 || v126 == v127)
          {
LABEL_141:
            if (v128) {
              --v117;
            }
          }
          else
          {
            uint64_t v130 = v122 + 4;
            while (1)
            {
              int v131 = *(_DWORD *)(v130 - 4);
              if (*v126 < v131) {
                break;
              }
              v126 += v131 >= *v126;
              BOOL v128 = v126 == v127;
              BOOL v132 = v126 == v127 || v130 == v123;
              v130 += 4;
              if (v132) {
                goto LABEL_141;
              }
            }
          }
        }
        long long v118 = (uint64_t *)(v124 + 24 * v117);
        uint64_t v119 = *v118;
        uint64_t *v118 = v122;
        *int64_t v115 = v119;
        uint64_t v120 = v118[1];
        v118[1] = v115[1];
        v115[1] = v120;
        uint64_t v121 = v118[2];
        v118[2] = v115[2];
        v115[2] = v121;
        ++v117;
      }
      v115 += 3;
    }
    while (v115 != v116);
  }
  v56[134] = v56[133];
  unint64_t v133 = v56[130];
  if (v133 < 0x80)
  {
    if (v133)
    {
      v56[129] = 0;
      memset((void *)v56[127], 128, v133 + 8);
      uint64_t v56 = a1;
      *(unsigned char *)(a1[127] + a1[130]) = -1;
      unint64_t v133 = a1[130];
      uint64_t v134 = v133 - (v133 >> 3);
      if (v133 == 7) {
        uint64_t v134 = 6;
      }
      a1[132] = v134 - a1[129];
    }
  }
  else
  {
    operator delete((void *)v56[127]);
    uint64_t v56 = a1;
    unint64_t v133 = 0;
    a1[127] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a1[132] = 0;
    a1[128] = 0;
    a1[130] = 0;
    a1[129] = 0;
  }
  unint64_t v135 = (unint64_t *)v56[131];
  uint64_t v136 = (void *)v195;
  if (v135)
  {
    v135[1] = 0;
    *unint64_t v135 = v133;
    v135[4] = 0;
    v135[2] = 0;
    if (v117 >= 1) {
      goto LABEL_168;
    }
  }
  else if (v117 >= 1)
  {
LABEL_168:
    uint64_t v137 = 0;
    int v196 = (absl::lts_2020_02_25::hash_internal ***)(v56 + 133);
    size_t v198 = v56 + 127;
    unint64_t v191 = (int ***)(v56 + 136);
    uint64_t v190 = v117;
    while (1)
    {
      uint64_t v193 = v137;
      uint64_t v56 = a1;
      int v138 = (absl::lts_2020_02_25::hash_internal **)a1[136];
      uint64_t v203 = (absl::lts_2020_02_25::hash_internal **)a1[137];
      if (v138 != v203) {
        break;
      }
LABEL_169:
      uint64_t v137 = v193 + 1;
      uint64_t v136 = (void *)v195;
      if (v193 + 1 == v190) {
        goto LABEL_210;
      }
    }
    while (2)
    {
      uint64_t v160 = *v138;
      uint64_t v161 = v138[1];
      size_t v162 = 4 * (void)v161;
      __s2b = *v138;
      if ((unint64_t)(4 * (void)v161) < 0x11)
      {
        if (v162 < 9)
        {
          if (!v162)
          {
            unint64_t v165 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
            goto LABEL_206;
          }
          unint64_t v163 = ((unint64_t)*(unsigned int *)((char *)v160 + v162 - 4) << (32 * v161 - 32)) | *(unsigned int *)v160;
          uint64_t v164 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
        }
        else
        {
          unint64_t v163 = *(void *)((char *)v160 + v162 - 8) >> (-32 * v161);
          uint64_t v164 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                + *(void *)v160)
                               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                   + *(void *)v160)));
        }
LABEL_205:
        unint64_t v165 = (_UNKNOWN **)(((((unint64_t)v164 + v163) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)v164 + v163)));
      }
      else
      {
        if (v162 < 0x401)
        {
          unint64_t v163 = absl::lts_2020_02_25::hash_internal::CityHash64(v160, 4 * (void)v161);
          uint64_t v164 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
          uint64_t v56 = a1;
          goto LABEL_205;
        }
        unint64_t v165 = (_UNKNOWN **)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v160, (char *)(4 * (void)v161));
        uint64_t v56 = a1;
      }
LABEL_206:
      uint64_t v145 = 0;
      uint64_t v206 = v161;
      unint64_t v166 = ((((unint64_t)v161 + (unint64_t)v165) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((unint64_t)v161 + (void)v165));
      unint64_t v167 = v56[127];
      unint64_t v146 = (v166 >> 7) ^ (v167 >> 12);
      uint64_t v168 = v56[130];
      while (1)
      {
        unint64_t v139 = v146 & v168;
        uint64_t v140 = *(void *)(v167 + (v146 & v168));
        unint64_t v141 = ((v140 ^ (0x101010101010101 * (v166 & 0x7F))) - 0x101010101010101) & ~(v140 ^ (0x101010101010101
                                                                                                * (v166 & 0x7F))) & 0x8080808080808080;
        if (v141)
        {
          uint64_t v142 = v56[128];
          uint64_t v200 = v145;
          do
          {
            uint64_t v143 = v142 + 16 * ((v139 + (__clz(__rbit64(v141)) >> 3)) & v168);
            if (v162 == 4 * *(void *)(v143 + 8))
            {
              int v144 = memcmp(*(const void **)v143, __s2b, v162);
              uint64_t v56 = a1;
              if (!v144) {
                goto LABEL_197;
              }
            }
            v141 &= v141 - 1;
            uint64_t v145 = v200;
          }
          while (v141);
        }
        if ((v140 & (~v140 << 6) & 0x8080808080808080) != 0) {
          break;
        }
        v145 += 8;
        unint64_t v146 = v145 + v139;
      }
      unint64_t v147 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::prepare_insert(v198, v166);
      uint64_t v56 = a1;
      BOOL v148 = (absl::lts_2020_02_25::hash_internal **)(a1[128] + 16 * v147);
      int *v148 = __s2b;
      v148[1] = v206;
      unint64_t v149 = (absl::lts_2020_02_25::hash_internal **)a1[134];
      unint64_t v150 = a1[135];
      if ((unint64_t)v149 < v150)
      {
        *unint64_t v149 = __s2b;
        v149[1] = v206;
        unint64_t v151 = v149 + 2;
        goto LABEL_196;
      }
      unint64_t v152 = *v196;
      uint64_t v153 = ((char *)v149 - (char *)*v196) >> 4;
      unint64_t v154 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v155 = v150 - (void)v152;
      if (v155 >> 3 > v154) {
        unint64_t v154 = v155 >> 3;
      }
      if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v156 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v156 = v154;
      }
      if (v156)
      {
        if (!(v156 >> 60))
        {
          unint64_t v157 = (char *)operator new(16 * v156);
          uint64_t v56 = a1;
          uint64_t v158 = (absl::lts_2020_02_25::hash_internal **)&v157[16 * v153];
          *uint64_t v158 = __s2b;
          v158[1] = v206;
          uint64_t v159 = (uint64_t)v158;
          if (v149 == v152) {
            goto LABEL_194;
          }
          goto LABEL_192;
        }
LABEL_230:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v157 = 0;
      uint64_t v158 = (absl::lts_2020_02_25::hash_internal **)(16 * v153);
      *uint64_t v158 = __s2b;
      v158[1] = v206;
      uint64_t v159 = 16 * v153;
      if (v149 == v152) {
        goto LABEL_194;
      }
      do
      {
LABEL_192:
        *(_OWORD *)(v159 - 16) = *((_OWORD *)v149 - 1);
        v159 -= 16;
        v149 -= 2;
      }
      while (v149 != v152);
      unint64_t v149 = *v196;
LABEL_194:
      v56[133] = v159;
      unint64_t v151 = v158 + 2;
      v56[134] = v158 + 2;
      v56[135] = &v157[16 * v156];
      if (v149)
      {
        operator delete(v149);
        uint64_t v56 = a1;
      }
LABEL_196:
      v56[134] = v151;
LABEL_197:
      v138 += 2;
      if (v138 == v203) {
        goto LABEL_169;
      }
      continue;
    }
  }
LABEL_210:
  uint64_t v169 = v56[133];
  uint64_t v170 = v56[134];
  if (v169 == v170) {
    return 1;
  }
  uint64_t v171 = (std::vector<int> *)(v56 + 3);
  uint64_t v172 = (std::vector<int> *)(v56 + 59);
  do
  {
    unint64_t v173 = *(int **)v169;
    uint64_t v174 = *(void *)(v169 + 8);
    operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(v171, v195, *(int **)v169, v174);
    operations_research::sat::SchedulingConstraintHelper::ResetFromSubset(v172, (uint64_t)v194, v173, v174);
    uint64_t v212 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v213 = 0x8000000000000000;
    int v175 = (int *)a1[63];
    unint64_t v176 = a1[64] - (void)v175;
    if ((int)(v176 >> 2) <= 0)
    {
      uint64_t v181 = 0x8000000000000000;
      uint64_t v180 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v177 = *(void *)(a1[60] + 40);
      unint64_t v178 = (int *)a1[66];
      uint64_t v179 = (v176 >> 2);
      uint64_t v180 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v181 = 0x8000000000000000;
      do
      {
        int v182 = *v175++;
        uint64_t v183 = *(void *)(v177 + 12 * (v182 ^ 1));
        if (v181 <= -v183) {
          uint64_t v181 = -v183;
        }
        unint64_t v213 = v181;
        int v184 = *v178++;
        uint64_t v185 = *(void *)(v177 + 12 * v184) - 1;
        if (v185 < v180) {
          uint64_t v180 = v185;
        }
        uint64_t v212 = v180;
        --v179;
      }
      while (v179);
      if (v181 > v180) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v213, (int)&v212, "lb <= ub");
      }
    }
    a1[54] = v172;
    a1[55] = CanonicalValue;
    uint64_t v187 = *(void *)(a4 + 24);
    if (!v187) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v187 + 48))(v187);
    v169 += 16;
    if (result) {
      BOOL v189 = v169 == v170;
    }
    else {
      BOOL v189 = 1;
    }
  }
  while (!v189);
  return result;
}

void sub_23CCC4A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::anonymous namespace'::FindCanonicalValue(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    if (result > 0) {
      goto LABEL_3;
    }
    if (a2 > 0) {
      return 0;
    }
    if (result < 0)
    {
    }
    else
    {
LABEL_3:
      int64_t v2 = a2 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(a2 & 0xFFFFFFFFFFFFFFFELL) >= result)
      {
        uint64_t v3 = 0;
        int v4 = 62;
        while (--v4)
        {
          uint64_t v3 = (2 * v3) | 2;
          int64_t v5 = v2;
          int64_t v2 = (v3 ^ 0xFFFFFFFFFFFFFFFELL) & a2;
          if (v2 < result) {
            return v5;
          }
        }
        return v2;
      }
      else
      {
        return a2;
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[1], 1);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[2], 1);
  uint64_t v18 = 0;
  if (*((_DWORD *)this[116] + 128) == *((_DWORD *)this + 234)) {
    int64_t v2 = &unk_26F0C28A8;
  }
  else {
    int64_t v2 = &unk_26F0C2928;
  }
  v19[0] = v2;
  v19[1] = this;
  uint64_t v20 = v19;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v19, v17);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    uint64_t v3 = this[1];
    int v4 = this[2];
    int64_t v5 = v18;
    if (!v18)
    {
LABEL_12:
      int64_t v16 = v5;
      goto LABEL_14;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void *))(*v20 + 40))(v20);
    }
    uint64_t v3 = this[1];
    int v4 = this[2];
    int64_t v5 = v18;
    if (!v18) {
      goto LABEL_12;
    }
  }
  if (v5 != v17)
  {
    int64_t v5 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    goto LABEL_12;
  }
  int64_t v16 = v15;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v15);
LABEL_14:
  char MustOverlapAHorizontalLineAndPropagate = operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(this, v3, v4, (uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
    if (MustOverlapAHorizontalLineAndPropagate) {
      goto LABEL_18;
    }
LABEL_23:
    uint64_t v10 = 0;
    uint64_t v11 = v18;
    if (v18 == v17) {
      goto LABEL_24;
    }
    goto LABEL_30;
  }
  if (v16) {
    (*(void (**)(void))(*v16 + 40))();
  }
  if ((MustOverlapAHorizontalLineAndPropagate & 1) == 0) {
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v8 = this[1];
  uint64_t v7 = this[2];
  uint64_t v9 = (uint64_t)v18;
  if (v18)
  {
    if (v18 == v17)
    {
      unint64_t v14 = v13;
      (*(void (**)(void *, void *))(v17[0] + 24))(v17, v13);
      goto LABEL_26;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*v18 + 16))();
  }
  unint64_t v14 = (void *)v9;
LABEL_26:
  uint64_t v10 = operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::FindBoxesThatMustOverlapAHorizontalLineAndPropagate(this, v7, v8, (uint64_t)v13);
  if (v14 != v13)
  {
    if (v14) {
      (*(void (**)(void))(*v14 + 40))();
    }
    uint64_t v11 = v18;
    if (v18 != v17) {
      goto LABEL_30;
    }
LABEL_24:
    (*(void (**)(void *))(v17[0] + 32))(v17);
    return v10;
  }
  (*(void (**)(void *))(v13[0] + 32))(v13);
  uint64_t v11 = v18;
  if (v18 == v17) {
    goto LABEL_24;
  }
LABEL_30:
  if (v11) {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  return v10;
}

void sub_23CCC4EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::function<BOOL ()(void)>::~function((uint64_t *)va);
  std::function<BOOL ()(void)>::~function((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23CCC4F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::function<BOOL ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CCC4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::function<BOOL ()(void)>::~function((uint64_t *)va);
  std::function<BOOL ()(void)>::~function((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *this)
{
  int v1 = (int *)*((void *)this + 10);
  uint64_t v2 = *(void *)(*((void *)this + 4) + 40);
  uint64_t v3 = *(void *)(v2 + 12 * *v1);
  uint64_t v4 = -*(void *)(v2 + 12 * (*(_DWORD *)(*((void *)this + 7) + 4) ^ 1));
  BOOL v5 = v3 + *(void *)(v2 + 12 * (*(_DWORD *)(*((void *)this + 7) + 4) ^ 1)) < 0;
  uint64_t v6 = *(void *)(v2 + 12 * v1[1]);
  uint64_t v7 = *(void *)(v2 + 12 * (**((_DWORD **)this + 7) ^ 1));
  if (v5 ^ __OFSUB__(v3, v4) | (v3 == v4)) {
    int v8 = 1;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | (2 * (v6 <= -v7));
  if (v9 == 2)
  {
    int v12 = 1;
    int v13 = 0;
    return operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(this, v12, v13);
  }
  if (v9 == 1)
  {
    int v12 = 0;
    int v13 = 1;
    return operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(this, v12, v13);
  }
  if (v9) {
    return 1;
  }
  uint64_t v10 = (void **)((char *)this + 24);
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)((char *)this + 24));
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v10, 0, 1);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v10, 1, 0);

  return operations_research::sat::SchedulingConstraintHelper::ReportConflict((operations_research::sat::SchedulingConstraintHelper *)v10);
}

uint64_t operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(void)::$_0::operator()(void *a1, int a2, int a3)
{
  BOOL v5 = (void **)(a1 + 3);
  int v6 = *(_DWORD *)(a1[10] + 4 * a2);
  uint64_t v7 = *(void *)(a1[4] + 40);
  int64_t v8 = *(void *)(v7 + 12 * v6);
  int v9 = *(_DWORD *)(a1[7] + 4 * a3);
  if (v8 > *(void *)(v7 + 12 * v9))
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)(a1 + 3));
    operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v5, a2, a3);
    operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(v5, a2, v8);
    uint64_t result = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin((unint64_t *)v5, a3, v8);
    if (!result) {
      return result;
    }
    int v9 = *(_DWORD *)(a1[7] + 4 * a3);
    uint64_t v7 = *(void *)(a1[4] + 40);
    int v6 = *(_DWORD *)(a1[10] + 4 * a2);
  }
  uint64_t v12 = *(void *)(v7 + 12 * (v9 ^ 1));
  if (*(void *)(v7 + 12 * (v6 ^ 1)) >= v12) {
    return 1;
  }
  int64_t v13 = -v12;
  operations_research::sat::SchedulingConstraintHelper::ClearReason((operations_research::sat::SchedulingConstraintHelper *)v5);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(v5, a2, a3);
  operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason((operations_research::sat::SchedulingConstraintHelper *)v5, a3, v13);
  uint64_t result = operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax((unint64_t *)v5, a2, v13);
  if (result) {
    return 1;
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        uint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v92 = *(a2 - 1);
              uint64_t v93 = *v12;
              uint64_t v94 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
              if (*(void *)(v94 + 12 * *(int *)(*(void *)(*(void *)a3 + 32) + 4 * v92)) < *(void *)(v94 + 12 * *(int *)(*(void *)(*(void *)a3 + 32) + 4 * v93)))
              {
                int *v12 = v92;
                *(a2 - 1) = v93;
              }
              return result;
            case 3:
              uint64_t v95 = *(void *)(*(void *)a3 + 32);
              uint64_t v96 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
              int v97 = *v12;
              uint64_t v98 = v12[1];
              uint64_t v99 = *(void *)(v96 + 12 * *(int *)(v95 + 4 * v98));
              uint64_t v100 = *(a2 - 1);
              uint64_t v101 = *(void *)(v96 + 12 * *(int *)(v95 + 4 * v100));
              if (v99 >= *(void *)(v96 + 12 * *(int *)(v95 + 4 * *v12)))
              {
                if (v101 < v99)
                {
                  v12[1] = v100;
                  *(a2 - 1) = v98;
                  uint64_t v158 = *v12;
                  uint64_t v157 = v12[1];
                  if (*(void *)(v96 + 12 * *(int *)(v95 + 4 * v157)) < *(void *)(v96
                                                                                      + 12 * *(int *)(v95 + 4 * v158)))
                  {
                    int *v12 = v157;
                    v12[1] = v158;
                  }
                }
              }
              else
              {
                if (v101 >= v99)
                {
                  int *v12 = v98;
                  v12[1] = v97;
                  uint64_t v164 = *(a2 - 1);
                  if (*(void *)(v96 + 12 * *(int *)(v95 + 4 * v164)) >= *(void *)(v96
                                                                                       + 12
                                                                                       * *(int *)(v95 + 4 * v97)))
                    return result;
                  v12[1] = v164;
                }
                else
                {
                  int *v12 = v100;
                }
                *(a2 - 1) = v97;
              }
              break;
            case 4:
              uint64_t v102 = *(void *)(*(void *)a3 + 32);
              uint64_t v103 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
            case 5:
              uint64_t v104 = v12 + 2;
              uint64_t v105 = v12 + 3;
              uint64_t v106 = *(a2 - 1);
              uint64_t v107 = v11[3];
              uint64_t v108 = *(void *)(*(void *)a3 + 32);
              uint64_t v109 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
              if (*(void *)(v109 + 12 * *(int *)(v108 + 4 * v106)) < *(void *)(v109
                                                                                    + 12 * *(int *)(v108 + 4 * v107)))
              {
                *uint64_t v105 = v106;
                *(a2 - 1) = v107;
                int v110 = *v105;
                uint64_t v111 = *v104;
                if (*(void *)(v109 + 12 * *(int *)(v108 + 4 * *v105)) < *(void *)(v109
                                                                                         + 12
                                                                                         * *(int *)(v108 + 4 * v111)))
                {
                  *uint64_t v104 = v110;
                  *uint64_t v105 = v111;
                  uint64_t v112 = v11[1];
                  if (*(void *)(v109 + 12 * *(int *)(v108 + 4 * v110)) < *(void *)(v109
                                                                                          + 12
                                                                                          * *(int *)(v108 + 4 * v112)))
                  {
                    v11[1] = v110;
                    void v11[2] = v112;
                    uint64_t v113 = *v11;
                    if (*(void *)(v109 + 12 * *(int *)(v108 + 4 * v110)) < *(void *)(v109
                                                                                            + 12
                                                                                            * *(int *)(v108 + 4 * v113)))
                    {
                      int *v11 = v110;
                      v11[1] = v113;
                    }
                  }
                }
              }
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 95)
        {
          uint64_t v114 = *(void *)a3;
          if (a5)
          {
            if (v12 != a2)
            {
              int64_t v115 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v116 = 0;
                uint64_t v117 = *(void *)(v114 + 8);
                uint64_t v118 = *(void *)(v114 + 32);
                uint64_t v119 = *(void *)(v117 + 40);
                uint64_t v120 = v12;
                do
                {
                  int v122 = v120[1];
                  uint64_t v123 = *v120;
                  uint64_t v120 = v115;
                  if (*(void *)(v119 + 12 * *(int *)(v118 + 4 * v122)) < *(void *)(v119
                                                                                          + 12
                                                                                          * *(int *)(v118 + 4 * v123)))
                  {
                    uint64_t v124 = v116;
                    do
                    {
                      *(int *)((char *)v12 + v124 + 4) = v123;
                      if (!v124)
                      {
                        uint64_t v121 = v12;
                        goto LABEL_118;
                      }
                      uint64_t v123 = *(int *)((char *)v12 + v124 - 4);
                      uint64_t result = *(int **)(v119 + 12 * *(int *)(v118 + 4 * v123));
                      v124 -= 4;
                    }
                    while (*(void *)(v119 + 12 * *(int *)(v118 + 4 * v122)) < (uint64_t)result);
                    uint64_t v121 = (int *)((char *)v12 + v124 + 4);
LABEL_118:
                    *uint64_t v121 = v122;
                  }
                  int64_t v115 = v120 + 1;
                  v116 += 4;
                }
                while (v120 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            uint64_t v159 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v160 = *(void *)(v114 + 32);
              uint64_t v161 = *(void *)(*(void *)(v114 + 8) + 40);
              do
              {
                int v162 = v11[1];
                uint64_t v163 = *v11;
                uint64_t v11 = v159;
                if (*(void *)(v161 + 12 * *(int *)(v160 + 4 * v162)) < *(void *)(v161
                                                                                        + 12
                                                                                        * *(int *)(v160 + 4 * v163)))
                {
                  do
                  {
                    *uint64_t v159 = v163;
                    uint64_t v163 = *(v159 - 2);
                    --v159;
                  }
                  while (*(void *)(v161 + 12 * *(int *)(v160 + 4 * v162)) < *(void *)(v161
                                                                                             + 12
                                                                                             * *(int *)(v160 + 4 * v163)));
                  *uint64_t v159 = v162;
                }
                uint64_t v159 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v125 = (unint64_t)(v14 - 2) >> 1;
            uint64_t v126 = *(void *)a3;
            int64_t v127 = v125;
            do
            {
              int64_t v128 = v127;
              if (v125 >= v127)
              {
                uint64_t v129 = (2 * v127) | 1;
                uint64_t v130 = &v12[v129];
                int v131 = *v130;
                if (2 * v128 + 2 < v14)
                {
                  uint64_t v132 = *(void *)(v126 + 32);
                  uint64_t v133 = *(void *)(*(void *)(v126 + 8) + 40);
                  if (*(void *)(v133 + 12 * *(int *)(v132 + 4 * v131)) < *(void *)(v133
                                                                                          + 12
                                                                                          * *(int *)(v132 + 4 * v130[1])))
                  {
                    int v131 = v130[1];
                    ++v130;
                    uint64_t v129 = 2 * v128 + 2;
                  }
                }
                else
                {
                  uint64_t v132 = *(void *)(v126 + 32);
                  uint64_t v133 = *(void *)(*(void *)(v126 + 8) + 40);
                }
                uint64_t v134 = &v12[v128];
                int v135 = *v134;
                if (*(void *)(v133 + 12 * *(int *)(v132 + 4 * v131)) >= *(void *)(v133
                                                                                         + 12
                                                                                         * *(int *)(v132 + 4 * *v134)))
                {
                  do
                  {
                    uint64_t v136 = v130;
                    int *v134 = v131;
                    if (v125 < v129) {
                      break;
                    }
                    uint64_t v137 = (2 * v129) | 1;
                    uint64_t v130 = &v12[v137];
                    uint64_t v129 = 2 * v129 + 2;
                    int v131 = *v130;
                    if (v129 < v14)
                    {
                      if (*(void *)(v133 + 12 * *(int *)(v132 + 4 * v131)) >= *(void *)(v133
                                                                                               + 12
                                                                                               * *(int *)(v132 + 4 * v130[1])))
                      {
                        uint64_t v129 = v137;
                      }
                      else
                      {
                        int v131 = v130[1];
                        ++v130;
                      }
                    }
                    else
                    {
                      uint64_t v129 = v137;
                    }
                    uint64_t v134 = v136;
                  }
                  while (*(void *)(v133 + 12 * *(int *)(v132 + 4 * v131)) >= *(void *)(v133
                                                                                              + 12
                                                                                              * *(int *)(v132 + 4 * v135)));
                  int *v136 = v135;
                  uint64_t v126 = *(void *)a3;
                }
              }
              int64_t v127 = v128 - 1;
            }
            while (v128);
            uint64_t v138 = (unint64_t)v13 >> 2;
            do
            {
              uint64_t v140 = 0;
              int v141 = *v12;
              uint64_t v142 = *(void *)a3;
              int64_t v143 = (unint64_t)(v138 - 2) >> 1;
              int v144 = v12;
              do
              {
                while (1)
                {
                  unint64_t v147 = &v144[v140];
                  int v148 = v147[1];
                  unint64_t v146 = v147 + 1;
                  int v145 = v148;
                  uint64_t result = (int *)(2 * v140);
                  uint64_t v149 = (2 * v140) | 1;
                  uint64_t v140 = 2 * v140 + 2;
                  if (v140 < v138) {
                    break;
                  }
                  uint64_t v140 = v149;
                  *int v144 = v145;
                  int v144 = v146;
                  if (v149 > v143) {
                    goto LABEL_153;
                  }
                }
                uint64_t result = v146 + 1;
                if (*(void *)(*(void *)(*(void *)(v142 + 8) + 40)
                               + 12 * *(int *)(*(void *)(v142 + 32) + 4 * v145)) >= *(void *)(*(void *)(*(void *)(v142 + 8) + 40) + 12 * *(int *)(*(void *)(v142 + 32) + 4 * v146[1])))
                {
                  uint64_t v140 = v149;
                }
                else
                {
                  int v145 = v146[1];
                  ++v146;
                }
                *int v144 = v145;
                int v144 = v146;
              }
              while (v140 <= v143);
LABEL_153:
              if (v146 == --a2)
              {
                int *v146 = v141;
              }
              else
              {
                int *v146 = *a2;
                *a2 = v141;
                uint64_t v150 = (char *)v146 - (char *)v12 + 4;
                if (v150 >= 5)
                {
                  unint64_t v151 = (((unint64_t)v150 >> 2) - 2) >> 1;
                  unint64_t v152 = &v12[v151];
                  uint64_t result = (int *)*v152;
                  int v153 = *v146;
                  uint64_t v154 = *(void *)(*(void *)a3 + 32);
                  uint64_t v155 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
                  if (*(void *)(v155 + 12 * *(int *)(v154 + 4 * (void)result)) < *(void *)(v155 + 12 * *(int *)(v154 + 4 * *v146)))
                  {
                    do
                    {
                      unint64_t v156 = v152;
                      int *v146 = (int)result;
                      if (!v151) {
                        break;
                      }
                      unint64_t v151 = (v151 - 1) >> 1;
                      unint64_t v152 = &v12[v151];
                      uint64_t result = (int *)*v152;
                      unint64_t v146 = v156;
                    }
                    while (*(void *)(v155 + 12 * *(int *)(v154 + 4 * (void)result)) < *(void *)(v155 + 12 * *(int *)(v154 + 4 * v153)));
                    int *v156 = v153;
                  }
                }
              }
            }
            while (v138-- > 2);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        int64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = *(void *)(*(void *)a3 + 32);
        uint64_t v18 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
        uint64_t v19 = *(a2 - 1);
        uint64_t v20 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v19));
        if ((unint64_t)v13 >= 0x201) {
          break;
        }
        uint64_t v24 = *v12;
        int v25 = *v16;
        uint64_t v26 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v24));
        if (v26 < *(void *)(v18 + 12 * *(int *)(v17 + 4 * *v16)))
        {
          if (v20 >= v26)
          {
            *int64_t v16 = v24;
            int *v12 = v25;
            uint64_t v44 = *(a2 - 1);
            if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v44)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v25))) {
              goto LABEL_33;
            }
            int *v12 = v44;
          }
          else
          {
            *int64_t v16 = v19;
          }
          *(a2 - 1) = v25;
LABEL_33:
          --a4;
          int v31 = *v12;
          uint64_t v32 = *v12;
          if (a5) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if (v20 >= v26) {
          goto LABEL_33;
        }
        int *v12 = v19;
        *(a2 - 1) = v24;
        uint64_t v29 = *v12;
        uint64_t v30 = *v16;
        if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v29)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v30))) {
          goto LABEL_33;
        }
        *int64_t v16 = v29;
        int *v12 = v30;
        --a4;
        int v31 = v30;
        uint64_t v32 = (int)v30;
        if (a5) {
          goto LABEL_56;
        }
LABEL_55:
        uint64_t v63 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v32));
        if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * *(v12 - 1))) < v63) {
          goto LABEL_56;
        }
        if (v63 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * *(a2 - 1))))
        {
          uint64_t v83 = v12 + 1;
          do
          {
            uint64_t v12 = v83;
            if (v83 >= a2) {
              break;
            }
            ++v83;
          }
          while (v63 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * *v12)));
        }
        else
        {
          do
          {
            uint64_t v82 = v12[1];
            ++v12;
          }
          while (v63 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v82)));
        }
        int v84 = a2;
        if (v12 < a2)
        {
          int v84 = a2;
          do
            uint64_t v85 = *--v84;
          while (v63 < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v85)));
        }
        if (v12 < v84)
        {
          int v86 = *v12;
          int v87 = *v84;
          do
          {
            int *v12 = v87;
            *int v84 = v86;
            uint64_t v88 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v32));
            do
            {
              uint64_t v89 = v12[1];
              ++v12;
              int v86 = v89;
            }
            while (v88 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v89)));
            do
            {
              uint64_t v90 = *--v84;
              int v87 = v90;
            }
            while (v88 < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v90)));
          }
          while (v12 < v84);
        }
        uint64_t v91 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          int *v11 = *v91;
        }
        a5 = 0;
        *uint64_t v91 = v31;
      }
      uint64_t v21 = *v16;
      int v22 = *v12;
      uint64_t v23 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v21));
      if (v23 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * *v12)))
      {
        if (v20 < v23)
        {
          *int64_t v16 = v19;
          *(a2 - 1) = v21;
          uint64_t v27 = *v16;
          uint64_t v28 = *v12;
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v27)) < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v28)))
          {
            int *v12 = v27;
            *int64_t v16 = v28;
          }
        }
      }
      else
      {
        if (v20 >= v23)
        {
          int *v12 = v21;
          *int64_t v16 = v22;
          uint64_t v33 = *(a2 - 1);
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v33)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v22))) {
            goto LABEL_24;
          }
          *int64_t v16 = v33;
        }
        else
        {
          int *v12 = v19;
        }
        *(a2 - 1) = v22;
      }
LABEL_24:
      uint64_t v34 = &v12[v15];
      uint64_t v37 = *(v34 - 1);
      unint64_t v35 = v34 - 1;
      int v36 = v37;
      int v38 = v12[1];
      uint64_t v39 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v37));
      uint64_t v40 = *(a2 - 2);
      uint64_t v41 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v40));
      if (v39 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v38)))
      {
        if (v41 < v39)
        {
          *unint64_t v35 = v40;
          *(a2 - 2) = v36;
          uint64_t v42 = *v35;
          uint64_t v43 = v12[1];
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v42)) < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v43)))
          {
            v12[1] = v42;
            *unint64_t v35 = v43;
          }
        }
      }
      else
      {
        if (v41 >= v39)
        {
          v12[1] = v36;
          *unint64_t v35 = v38;
          uint64_t v45 = *(a2 - 2);
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v45)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v38))) {
            goto LABEL_38;
          }
          *unint64_t v35 = v45;
        }
        else
        {
          v12[1] = v40;
        }
        *(a2 - 2) = v38;
      }
LABEL_38:
      uint64_t v46 = &v12[v15];
      uint64_t v49 = v46[1];
      uint64_t v47 = v46 + 1;
      int v48 = v49;
      int v50 = v12[2];
      uint64_t v51 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v49));
      uint64_t v52 = *(a2 - 3);
      uint64_t v53 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v52));
      if (v51 >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v50)))
      {
        if (v53 < v51)
        {
          *uint64_t v47 = v52;
          *(a2 - 3) = v48;
          uint64_t v54 = *v47;
          uint64_t v55 = v12[2];
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v54)) < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v55)))
          {
            v12[2] = v54;
            *uint64_t v47 = v55;
          }
        }
      }
      else
      {
        if (v53 >= v51)
        {
          v12[2] = v48;
          *uint64_t v47 = v50;
          uint64_t v56 = *(a2 - 3);
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v56)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v50))) {
            goto LABEL_47;
          }
          *uint64_t v47 = v56;
        }
        else
        {
          v12[2] = v52;
        }
        *(a2 - 3) = v50;
      }
LABEL_47:
      uint64_t v57 = *v16;
      int v58 = *v35;
      uint64_t v59 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * v57));
      int v60 = *v47;
      uint64_t result = (int *)*v47;
      uint64_t v61 = *(void *)(v18 + 12 * *(int *)(v17 + 4 * (void)result));
      if (v59 < *(void *)(v18 + 12 * *(int *)(v17 + 4 * *v35)))
      {
        if (v61 >= v59)
        {
          *unint64_t v35 = v57;
          *int64_t v16 = v58;
          unint64_t v35 = v16;
          LODWORD(v57) = v60;
          if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v60)) >= *(void *)(v18 + 12 * *(int *)(v17 + 4 * v58)))
          {
            LODWORD(v57) = v58;
            goto LABEL_54;
          }
        }
LABEL_53:
        *unint64_t v35 = v60;
        *uint64_t v47 = v58;
        goto LABEL_54;
      }
      if (v61 >= v59) {
        goto LABEL_54;
      }
      *int64_t v16 = v60;
      *uint64_t v47 = v57;
      uint64_t v47 = v16;
      LODWORD(v57) = v58;
      if (*(void *)(v18 + 12 * *(int *)(v17 + 4 * v60)) < *(void *)(v18 + 12 * *(int *)(v17 + 4 * v58))) {
        goto LABEL_53;
      }
      LODWORD(v57) = v60;
LABEL_54:
      int v62 = *v12;
      int *v12 = v57;
      *int64_t v16 = v62;
      --a4;
      int v31 = *v12;
      uint64_t v32 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v64 = 0;
      uint64_t v65 = *(void *)(*(void *)a3 + 32);
      uint64_t v66 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
      uint64_t v67 = *(void *)(v66 + 12 * *(int *)(v65 + 4 * v32));
      do
        uint64_t v68 = v12[++v64];
      while (*(void *)(v66 + 12 * *(int *)(v65 + 4 * v68)) < v67);
      uint64_t v69 = &v12[v64];
      uint64_t v70 = a2;
      if (v64 == 1)
      {
        uint64_t v70 = a2;
        do
        {
          if (v69 >= v70) {
            break;
          }
          uint64_t v72 = *--v70;
        }
        while (*(void *)(v66 + 12 * *(int *)(v65 + 4 * v72)) >= v67);
      }
      else
      {
        do
          uint64_t v71 = *--v70;
        while (*(void *)(v66 + 12 * *(int *)(v65 + 4 * v71)) >= v67);
      }
      if (v69 >= v70)
      {
        unint64_t v80 = v69 - 1;
        if (v69 - 1 == v12) {
          goto LABEL_74;
        }
LABEL_73:
        int *v12 = *v80;
        goto LABEL_74;
      }
      int v73 = *v70;
      int v74 = v68;
      uint64_t v75 = v69;
      unint64_t v76 = v70;
      do
      {
        *uint64_t v75 = v73;
        int *v76 = v74;
        uint64_t v77 = *(void *)(v66 + 12 * *(int *)(v65 + 4 * v32));
        do
        {
          uint64_t v78 = v75[1];
          ++v75;
          int v74 = v78;
        }
        while (*(void *)(v66 + 12 * *(int *)(v65 + 4 * v78)) < v77);
        do
        {
          uint64_t v79 = *--v76;
          int v73 = v79;
        }
        while (*(void *)(v66 + 12 * *(int *)(v65 + 4 * v79)) >= v77);
      }
      while (v75 < v76);
      unint64_t v80 = v75 - 1;
      if (v75 - 1 != v12) {
        goto LABEL_73;
      }
LABEL_74:
      *unint64_t v80 = v31;
      if (v69 < v70) {
        goto LABEL_77;
      }
      uint64_t v12 = v80 + 1;
      if (result) {
        break;
      }
      if (!v81)
      {
LABEL_77:
        a5 = 0;
        uint64_t v12 = v80 + 1;
      }
    }
    a2 = v80;
    if (!v81) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
      if (*(void *)(v10 + 12 * *(int *)(*(void *)(*(void *)a3 + 32) + 4 * v8)) < *(void *)(v10 + 12 * *(int *)(*(void *)(*(void *)a3 + 32) + 4 * v9)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v11 = *(void *)(*(void *)a3 + 32);
      uint64_t v12 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
      int v13 = *a1;
      uint64_t v14 = a1[1];
      uint64_t v15 = *(void *)(v12 + 12 * *(int *)(v11 + 4 * v14));
      uint64_t v16 = *(a2 - 1);
      uint64_t v17 = *(void *)(v12 + 12 * *(int *)(v11 + 4 * v16));
      if (v15 >= *(void *)(v12 + 12 * *(int *)(v11 + 4 * *a1)))
      {
        if (v17 < v15)
        {
          a1[1] = v16;
          *(a2 - 1) = v14;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(void *)(v12 + 12 * *(int *)(v11 + 4 * v40)) < *(void *)(v12 + 12 * *(int *)(v11 + 4 * v41)))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v17 >= v15)
      {
        *a1 = v14;
        a1[1] = v13;
        uint64_t v49 = *(a2 - 1);
        if (*(void *)(v12 + 12 * *(int *)(v11 + 4 * v49)) < *(void *)(v12 + 12 * *(int *)(v11 + 4 * v13)))
        {
          a1[1] = v49;
          *(a2 - 1) = v13;
        }
      }
      else
      {
        *a1 = v16;
        *(a2 - 1) = v13;
      }
      return result;
    case 4:
      return 1;
    case 5:
      uint64_t v30 = a1 + 2;
      int v31 = a1 + 3;
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = a1[3];
      uint64_t v34 = *(void *)(*(void *)a3 + 32);
      uint64_t v35 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
      if (*(void *)(v35 + 12 * *(int *)(v34 + 4 * v32)) >= *(void *)(v35 + 12 * *(int *)(v34 + 4 * v33))) {
        return 1;
      }
      *int v31 = v32;
      *(a2 - 1) = v33;
      int v36 = *v31;
      uint64_t v37 = *v30;
      if (*(void *)(v35 + 12 * *(int *)(v34 + 4 * *v31)) >= *(void *)(v35 + 12 * *(int *)(v34 + 4 * v37))) {
        return 1;
      }
      int *v30 = v36;
      *int v31 = v37;
      uint64_t v38 = a1[1];
      if (*(void *)(v35 + 12 * *(int *)(v34 + 4 * v36)) >= *(void *)(v35 + 12 * *(int *)(v34 + 4 * v38))) {
        return 1;
      }
      a1[1] = v36;
      a1[2] = v38;
      uint64_t v39 = *a1;
      if (*(void *)(v35 + 12 * *(int *)(v34 + 4 * v36)) >= *(void *)(v35 + 12 * *(int *)(v34 + 4 * v39))) {
        return 1;
      }
      *a1 = v36;
      a1[1] = v39;
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      int v19 = a1[2];
      uint64_t v20 = a1[1];
      uint64_t v21 = *(void *)(*(void *)a3 + 32);
      uint64_t v22 = *(void *)(*(void *)(*(void *)a3 + 8) + 40);
      int v23 = *a1;
      uint64_t v24 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v20));
      uint64_t v25 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v19));
      if (v24 >= *(void *)(v22 + 12 * *(int *)(v21 + 4 * *a1)))
      {
        if (v25 >= v24) {
          goto LABEL_25;
        }
        a1[1] = v19;
        *uint64_t v18 = v20;
        uint64_t v28 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v19));
        uint64_t v29 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v23));
        uint64_t v26 = a1;
        uint64_t v27 = a1 + 1;
      }
      else
      {
        uint64_t v26 = a1;
        uint64_t v27 = a1 + 2;
        if (v25 < v24) {
          goto LABEL_24;
        }
        *a1 = v20;
        a1[1] = v23;
        uint64_t v28 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v19));
        uint64_t v29 = *(void *)(v22 + 12 * *(int *)(v21 + 4 * v23));
        uint64_t v26 = a1 + 1;
        uint64_t v27 = a1 + 2;
      }
      if (v28 >= v29) {
        goto LABEL_25;
      }
LABEL_24:
      *uint64_t v26 = v19;
      int *v27 = v23;
LABEL_25:
      uint64_t v42 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v43 = 0;
      uint64_t v44 = 12;
      break;
  }
  while (1)
  {
    int v45 = *v42;
    uint64_t v46 = *v18;
    if (*(void *)(v22 + 12 * *(int *)(v21 + 4 * *v42)) < *(void *)(v22 + 12 * *(int *)(v21 + 4 * v46))) {
      break;
    }
LABEL_34:
    uint64_t v18 = v42;
    v44 += 4;
    if (++v42 == a2) {
      return 1;
    }
  }
  uint64_t v47 = v44;
  do
  {
    *(int *)((char *)a1 + v47) = v46;
    uint64_t v48 = v47 - 4;
    if (v47 == 4)
    {
      *a1 = v45;
      if (++v43 != 8) {
        goto LABEL_34;
      }
      return v42 + 1 == a2;
    }
    uint64_t v46 = *(int *)((char *)a1 + v47 - 8);
    v47 -= 4;
  }
  while (*(void *)(v22 + 12 * *(int *)(v21 + 4 * v45)) < *(void *)(v22 + 12 * *(int *)(v21 + 4 * v46)));
  *(int *)((char *)a1 + v48) = v45;
  if (++v43 != 8) {
    goto LABEL_34;
  }
  return v42 + 1 == a2;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::SplitDisjointBoxes(operations_research::sat::SchedulingConstraintHelper const&,absl::lts_2020_02_25::Span<int>,std::vector<absl::lts_2020_02_25::Span<int>> *)::$_0 &,int *>(int *result, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v6 = *a2;
  int v7 = *result;
  uint64_t v8 = *(void *)(a5 + 12 * *(int *)(a6 + 4 * *a2));
  int v9 = *a3;
  uint64_t v10 = *(void *)(a5 + 12 * *(int *)(a6 + 4 * *a3));
  if (v8 >= *(void *)(a5 + 12 * *(int *)(a6 + 4 * *result)))
  {
    if (v10 >= v8)
    {
      uint64_t v11 = v9;
      goto LABEL_13;
    }
    *a2 = v9;
    *a3 = v6;
    uint64_t v12 = *a2;
    uint64_t v13 = *result;
    if (*(void *)(a5 + 12 * *(int *)(a6 + 4 * v12)) >= *(void *)(a5 + 12 * *(int *)(a6 + 4 * v13)))
    {
      uint64_t v11 = v6;
      int v9 = v6;
      goto LABEL_13;
    }
    void *result = v12;
    *a2 = v13;
    int v9 = *a3;
    goto LABEL_11;
  }
  uint64_t v11 = v7;
  if (v10 >= v8)
  {
    void *result = v6;
    *a2 = v7;
    int v9 = *a3;
    if (*(void *)(a5 + 12 * *(int *)(a6 + 4 * *a3)) < *(void *)(a5 + 12 * *(int *)(a6 + 4 * v7)))
    {
      *a2 = v9;
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v11 = v9;
    goto LABEL_13;
  }
  void *result = v9;
LABEL_9:
  *a3 = v7;
  int v9 = v7;
LABEL_13:
  uint64_t v14 = *a4;
  if (*(void *)(a5 + 12 * *(int *)(a6 + 4 * v14)) < *(void *)(a5 + 12 * *(int *)(a6 + 4 * v11)))
  {
    *a3 = v14;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = *a2;
    if (*(void *)(a5 + 12 * *(int *)(a6 + 4 * v15)) < *(void *)(a5 + 12 * *(int *)(a6 + 4 * v16)))
    {
      *a2 = v15;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v18 = *result;
      if (*(void *)(a5 + 12 * *(int *)(a6 + 4 * v17)) < *(void *)(a5 + 12 * *(int *)(a6 + 4 * v18)))
      {
        void *result = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

void operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(void **a1, int a2, unint64_t a3, unint64_t a4)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  uint64_t v8 = a2;
  unsigned int v9 = *((_DWORD *)a1[4] + a2);
  uint64_t v10 = a1 + 48;
  if (*(void *)(*((void *)a1[1] + 5) + 12 * (int)v9) >= (int64_t)a4)
  {
    unint64_t v50 = __PAIR64__(a4, v9);
    unint64_t v11 = __PAIR64__(a4, v9);
    unint64_t v12 = HIDWORD(a4);
    uint64_t v14 = (char *)a1[49];
    unint64_t v21 = (unint64_t)a1[50];
    if ((unint64_t)v14 >= v21)
    {
      int v23 = (char *)*v10;
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*v10) >> 2);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555) {
        goto LABEL_54;
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v23) >> 2);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v27 = 0x1555555555555555;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 > 0x1555555555555555) {
          goto LABEL_55;
        }
        uint64_t v28 = (char *)operator new(12 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = &v28[12 * v24];
      uint64_t v30 = &v28[12 * v27];
      *(void *)uint64_t v29 = v50;
      *((_DWORD *)v29 + 2) = v12;
      uint64_t v22 = v29 + 12;
      if (v14 == v23) {
        goto LABEL_31;
      }
      do
      {
        uint64_t v33 = *(void *)(v14 - 12);
        v14 -= 12;
        int v34 = *((_DWORD *)v14 + 2);
        *(void *)(v29 - 12) = v33;
        v29 -= 12;
        *((_DWORD *)v29 + 2) = v34;
      }
      while (v14 != v23);
      goto LABEL_30;
    }
LABEL_13:
    *(void *)uint64_t v14 = v11;
    *((_DWORD *)v14 + 2) = v12;
    uint64_t v22 = v14 + 12;
    goto LABEL_33;
  }
  LODWORD(v49) = *((_DWORD *)a1[7] + v8);
  HIDWORD(v49) = a4 + a3;
  unint64_t v11 = v49;
  unint64_t v12 = (a4 + a3) >> 32;
  uint64_t v14 = (char *)a1[49];
  unint64_t v13 = (unint64_t)a1[50];
  if ((unint64_t)v14 < v13) {
    goto LABEL_13;
  }
  uint64_t v15 = (char *)*v10;
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*v10) >> 2);
  unint64_t v17 = v16 + 1;
  if (v16 + 1 > 0x1555555555555555) {
    goto LABEL_54;
  }
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v15) >> 2);
  if (2 * v18 > v17) {
    unint64_t v17 = 2 * v18;
  }
  if (v18 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v19 = 0x1555555555555555;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 > 0x1555555555555555) {
      goto LABEL_55;
    }
    uint64_t v20 = (char *)operator new(12 * v19);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v29 = &v20[12 * v16];
  uint64_t v30 = &v20[12 * v19];
  *(void *)uint64_t v29 = v49;
  *((_DWORD *)v29 + 2) = v12;
  uint64_t v22 = v29 + 12;
  if (v14 == v15) {
    goto LABEL_31;
  }
  do
  {
    uint64_t v31 = *(void *)(v14 - 12);
    v14 -= 12;
    int v32 = *((_DWORD *)v14 + 2);
    *(void *)(v29 - 12) = v31;
    v29 -= 12;
    *((_DWORD *)v29 + 2) = v32;
  }
  while (v14 != v15);
LABEL_30:
  uint64_t v14 = (char *)*v10;
LABEL_31:
  a1[48] = v29;
  a1[49] = v22;
  a1[50] = v30;
  if (v14) {
    operator delete(v14);
  }
LABEL_33:
  a1[49] = v22;
  unsigned int v35 = *((_DWORD *)a1[10] + v8);
  if (v35 == -1) {
    return;
  }
  unint64_t v51 = __PAIR64__(a3, v35);
  unint64_t v36 = HIDWORD(a3);
  unint64_t v37 = (unint64_t)a1[50];
  if ((unint64_t)v22 < v37)
  {
    *(void *)uint64_t v22 = __PAIR64__(a3, v35);
    *((_DWORD *)v22 + 2) = HIDWORD(a3);
    uint64_t v38 = v22 + 12;
    goto LABEL_52;
  }
  uint64_t v39 = (char *)*v10;
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)*v10) >> 2);
  unint64_t v41 = v40 + 1;
  if (v40 + 1 > 0x1555555555555555) {
LABEL_54:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v39) >> 2);
  if (2 * v42 > v41) {
    unint64_t v41 = 2 * v42;
  }
  if (v42 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v43 = 0x1555555555555555;
  }
  else {
    unint64_t v43 = v41;
  }
  if (!v43)
  {
    uint64_t v44 = 0;
    goto LABEL_46;
  }
  if (v43 > 0x1555555555555555) {
LABEL_55:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v44 = (char *)operator new(12 * v43);
LABEL_46:
  int v45 = &v44[12 * v40];
  uint64_t v46 = &v44[12 * v43];
  *(void *)int v45 = v51;
  *((_DWORD *)v45 + 2) = v36;
  uint64_t v38 = v45 + 12;
  if (v22 == v39)
  {
    a1[48] = v45;
    a1[49] = v38;
    a1[50] = v46;
  }
  else
  {
    do
    {
      uint64_t v47 = *(void *)(v22 - 12);
      v22 -= 12;
      int v48 = *((_DWORD *)v22 + 2);
      *(void *)(v45 - 12) = v47;
      v45 -= 12;
      *((_DWORD *)v45 + 2) = v48;
    }
    while (v22 != v39);
    uint64_t v22 = (char *)a1[48];
    a1[48] = v45;
    a1[49] = v38;
    a1[50] = v46;
    if (!v22) {
      goto LABEL_52;
    }
  }
  operator delete(v22);
LABEL_52:
  a1[49] = v38;
}

operations_research::sat::DisjunctiveOverloadChecker *operations_research::sat::DisjunctiveOverloadChecker::DisjunctiveOverloadChecker(operations_research::sat::DisjunctiveOverloadChecker *this, operations_research::sat::SchedulingConstraintHelper *a2)
{
  *(void *)this = &unk_26F0C29A8;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree((uint64_t)this + 64);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  uint64_t v3 = *(void *)(*((void *)this + 1) + 40) - *(void *)(*((void *)this + 1) + 32);
  if (((unint64_t)v3 >> 2)) {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 104), (int)(v3 >> 2));
  }
  return this;
}

void sub_23CCC6A6C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2;
  int v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
    int v7 = (void *)v1[10];
    if (!v7)
    {
LABEL_3:
      uint64_t v8 = (void *)v1[5];
      if (!v8) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int v7 = (void *)v1[10];
    if (!v7) {
      goto LABEL_3;
    }
  }
  v1[11] = v7;
  operator delete(v7);
  uint64_t v8 = (void *)v1[5];
  if (!v8)
  {
LABEL_4:
    unsigned int v9 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[6] = v8;
  operator delete(v8);
  unsigned int v9 = *v3;
  if (!*v3) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[3] = v9;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

operations_research::sat::DisjunctiveDetectablePrecedences *operations_research::sat::DisjunctiveDetectablePrecedences::DisjunctiveDetectablePrecedences(operations_research::sat::DisjunctiveDetectablePrecedences *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26F0C29F0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = a2;
  uint64_t v5 = *((void *)a3 + 4);
  uint64_t v4 = *((void *)a3 + 5);
  *((void *)this + 15) = 0;
  *((void *)this + 14) = a3;
  uint64_t v6 = v4 - v5;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  if (((unint64_t)v6 >> 2))
  {
    if ((((unint64_t)v6 >> 2) & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (int)(v6 >> 2);
    uint64_t v8 = (char *)operator new(20 * v7);
    *((void *)this + 15) = v8;
    *((void *)this + 16) = v8;
    *((void *)this + 17) = &v8[20 * (int)v7];
  }
  return this;
}

void sub_23CCC6BAC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v4;
  if (*v4)
  {
    v1[16] = v6;
    operator delete(v6);
    uint64_t v7 = (void *)v1[10];
    if (!v7)
    {
LABEL_3:
      uint64_t v8 = (void *)v1[7];
      if (!v8) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = (void *)v1[10];
    if (!v7) {
      goto LABEL_3;
    }
  }
  v1[11] = v7;
  operator delete(v7);
  uint64_t v8 = (void *)v1[7];
  if (!v8)
  {
LABEL_4:
    unsigned int v9 = (void *)v1[4];
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v8);
  unsigned int v9 = (void *)v1[4];
  if (!v9)
  {
LABEL_5:
    uint64_t v10 = *v3;
    if (!*v3) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v1[5] = v9;
  operator delete(v9);
  uint64_t v10 = *v3;
  if (!*v3) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[2] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

operations_research::sat::DisjunctiveNotLast *operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast(operations_research::sat::DisjunctiveNotLast *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3)
{
  *(void *)this = &unk_26F0C2A38;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((unsigned char *)this + 56) = a2;
  uint64_t v5 = *((void *)a3 + 4);
  uint64_t v4 = *((void *)a3 + 5);
  *((void *)this + 9) = 0;
  *((void *)this + 8) = a3;
  uint64_t v6 = v4 - v5;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (((unint64_t)v6 >> 2))
  {
    if ((((unint64_t)v6 >> 2) & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (int)(v6 >> 2);
    uint64_t v8 = (char *)operator new(20 * v7);
    *((void *)this + 9) = v8;
    *((void *)this + 10) = v8;
    *((void *)this + 11) = &v8[20 * (int)v7];
  }
  return this;
}

void sub_23CCC6CE0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  operations_research::sat::DisjunctiveNotLast::DisjunctiveNotLast((void **)(v1 + 32), (void **)(v1 + 8), v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(void *a1, int a2, unint64_t a3)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason((operations_research::sat::SchedulingConstraintHelper *)a1, a2);
  uint64_t v6 = *(void *)(a1[1] + 40);
  if (*(void *)(v6 + 12 * *(int *)(a1[7] + 4 * a2)) < (int64_t)a3)
  {
    uint64_t v7 = a2;
    int v8 = *(_DWORD *)(a1[10] + 4 * a2);
    if (v8 == -1)
    {
      uint64_t v9 = *(void *)(a1[13] + 8 * a2);
      unint64_t v12 = (_DWORD *)a1[49];
    }
    else
    {
      uint64_t v9 = *(void *)(v6 + 12 * v8);
      LODWORD(v45) = *(_DWORD *)(a1[10] + 4 * a2);
      HIDWORD(v45) = v9;
      unint64_t v11 = (_DWORD *)a1[49];
      unint64_t v10 = a1[50];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v22 = (_DWORD **)(a1 + 48);
        int v23 = (_DWORD *)a1[48];
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v11 - v23) + 1;
        if (v24 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v23) >> 2);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v26 = 0x1555555555555555;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 > 0x1555555555555555) {
            goto LABEL_58;
          }
          unint64_t v27 = (char *)operator new(12 * v26);
          uint64_t v22 = (_DWORD **)(a1 + 48);
        }
        else
        {
          unint64_t v27 = 0;
        }
        int v32 = &v27[4 * (v11 - v23)];
        *(void *)int v32 = v45;
        *((_DWORD *)v32 + 2) = HIDWORD(v9);
        unint64_t v12 = v32 + 12;
        if (v11 != v23)
        {
          do
          {
            uint64_t v33 = *(void *)(v11 - 3);
            v11 -= 3;
            int v34 = v11[2];
            *(void *)(v32 - 12) = v33;
            v32 -= 12;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v11 != v23);
          unint64_t v11 = *v22;
        }
        a1[48] = v32;
        a1[49] = v12;
        a1[50] = &v27[12 * v26];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)unint64_t v11 = v45;
        void v11[2] = HIDWORD(v9);
        unint64_t v12 = v11 + 3;
      }
      a1[49] = v12;
    }
    LODWORD(v47) = *(_DWORD *)(a1[4] + 4 * v7);
    HIDWORD(v47) = a3 - v9;
    unint64_t v35 = (a3 - v9) >> 32;
    unint64_t v36 = a1[50];
    if ((unint64_t)v12 < v36)
    {
      *(void *)unint64_t v12 = v47;
      v12[2] = v35;
      unint64_t v16 = (char *)(v12 + 3);
      goto LABEL_57;
    }
    unint64_t v37 = (_DWORD *)a1[48];
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v12 - v37) + 1;
    if (v38 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v37) >> 2);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v40 = 0x1555555555555555;
    }
    else {
      unint64_t v40 = v38;
    }
    if (!v40)
    {
      unint64_t v41 = 0;
LABEL_51:
      unint64_t v42 = &v41[4 * (v12 - v37)];
      *(void *)unint64_t v42 = v47;
      *((_DWORD *)v42 + 2) = v35;
      unint64_t v16 = v42 + 12;
      if (v12 != v37)
      {
        do
        {
          uint64_t v43 = *(void *)(v12 - 3);
          v12 -= 3;
          int v44 = v12[2];
          *(void *)(v42 - 12) = v43;
          v42 -= 12;
          *((_DWORD *)v42 + 2) = v44;
        }
        while (v12 != v37);
        unint64_t v12 = (_DWORD *)a1[48];
      }
      a1[48] = v42;
      a1[49] = v16;
      a1[50] = &v41[12 * v40];
      if (v12)
      {
        uint64_t v31 = v12;
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v40 <= 0x1555555555555555)
    {
      unint64_t v41 = (char *)operator new(12 * v40);
      goto LABEL_51;
    }
LABEL_58:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  LODWORD(v46) = *(_DWORD *)(a1[7] + 4 * a2);
  HIDWORD(v46) = a3;
  unint64_t v13 = HIDWORD(a3);
  uint64_t v15 = (char *)a1[49];
  unint64_t v14 = a1[50];
  if ((unint64_t)v15 < v14)
  {
    *(void *)uint64_t v15 = v46;
    *((_DWORD *)v15 + 2) = v13;
    unint64_t v16 = v15 + 12;
    goto LABEL_57;
  }
  unint64_t v17 = (unsigned char *)a1[48];
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v17) >> 2) + 1;
  if (v18 > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v17) >> 2);
  if (2 * v19 > v18) {
    unint64_t v18 = 2 * v19;
  }
  if (v19 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v20 = 0x1555555555555555;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 > 0x1555555555555555) {
      goto LABEL_58;
    }
    unint64_t v21 = (char *)operator new(12 * v20);
  }
  else
  {
    unint64_t v21 = 0;
  }
  uint64_t v28 = &v21[4 * ((v15 - v17) >> 2)];
  *(void *)uint64_t v28 = v46;
  *((_DWORD *)v28 + 2) = v13;
  unint64_t v16 = v28 + 12;
  if (v15 != v17)
  {
    do
    {
      uint64_t v29 = *(void *)(v15 - 12);
      v15 -= 12;
      int v30 = *((_DWORD *)v15 + 2);
      *(void *)(v28 - 12) = v29;
      v28 -= 12;
      *((_DWORD *)v28 + 2) = v30;
    }
    while (v15 != v17);
    uint64_t v15 = (char *)a1[48];
  }
  a1[48] = v28;
  a1[49] = v16;
  a1[50] = &v21[12 * v20];
  if (v15)
  {
    uint64_t v31 = v15;
LABEL_56:
    operator delete(v31);
  }
LABEL_57:
  a1[49] = v16;
}

void operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, int64_t a3)
{
  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (a3 >= (uint64_t)0x8000000000000002) {
    unint64_t v6 = -a3;
  }
  LODWORD(v19) = *(_DWORD *)(*((void *)a1 + 4) + 4 * a2) ^ 1;
  HIDWORD(v19) = v6;
  unint64_t v7 = HIDWORD(v6);
  uint64_t v9 = (_DWORD *)*((void *)a1 + 49);
  unint64_t v8 = *((void *)a1 + 50);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = (_DWORD *)*((void *)a1 + 48);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11) + 1;
    if (v12 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x1555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(12 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[4 * (v9 - v11)];
    *(void *)unint64_t v16 = v19;
    *((_DWORD *)v16 + 2) = v7;
    unint64_t v10 = v16 + 12;
    if (v9 != v11)
    {
      do
      {
        uint64_t v17 = *(void *)(v9 - 3);
        v9 -= 3;
        int v18 = v9[2];
        *(void *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v9 != v11);
      uint64_t v9 = (_DWORD *)*((void *)a1 + 48);
    }
    *((void *)a1 + 48) = v16;
    *((void *)a1 + 49) = v10;
    *((void *)a1 + 50) = &v15[12 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v9 = v19;
    v9[2] = v7;
    unint64_t v10 = v9 + 3;
  }
  *((void *)a1 + 49) = v10;
}

void std::vector<operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Dimension>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      uint64_t v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 5;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 59) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(32 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v13 = &v11[32 * v7];
    size_t v14 = 32 * a2;
    uint64_t v15 = &v11[32 * v10];
    bzero(v13, v14);
    unint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(unint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = result;
  while (2)
  {
    uint64_t v12 = (uint64_t *)(a2 - 12);
    unint64_t v139 = a2 - 36;
    uint64_t v140 = a2 - 24;
    unint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = (uint64_t)&a2[-v13];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v13] >> 2);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((void *)a2 - 1) < *(void *)(v13 + 4))
                {
                  int v186 = *(_DWORD *)(v13 + 8);
                  uint64_t v160 = *(void *)v13;
                  uint64_t v100 = *(void *)(a2 - 12);
                  *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
                  *(void *)unint64_t v13 = v100;
                  *((_DWORD *)a2 - 1) = v186;
                  *(void *)(a2 - 12) = v160;
                }
                return result;
              case 3uLL:
                unint64_t v101 = v13 + 12;
                uint64_t v102 = *(void *)(v13 + 16);
                uint64_t v103 = *((void *)a2 - 1);
                if (v102 < *(void *)(v13 + 4))
                {
                  if (v103 >= v102)
                  {
                    int v190 = *(_DWORD *)(v13 + 8);
                    uint64_t v164 = *(void *)v13;
                    *(void *)unint64_t v13 = *(void *)v101;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                    *(void *)unint64_t v101 = v164;
                    *(_DWORD *)(v13 + 20) = v190;
                    if (*((void *)a2 - 1) < *(void *)(v13 + 16))
                    {
                      uint64_t v130 = *(void *)v101;
                      int v131 = *(_DWORD *)(v13 + 20);
                      int v132 = *((_DWORD *)a2 - 1);
                      *(void *)unint64_t v101 = *v12;
                      *(_DWORD *)(v13 + 20) = v132;
                      *((_DWORD *)a2 - 1) = v131;
                      uint64_t *v12 = v130;
                    }
                  }
                  else
                  {
                    int v187 = *(_DWORD *)(v13 + 8);
                    uint64_t v161 = *(void *)v13;
                    uint64_t v104 = *v12;
                    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
                    *(void *)unint64_t v13 = v104;
                    *((_DWORD *)a2 - 1) = v187;
                    uint64_t *v12 = v161;
                  }
                  return result;
                }
                if (v103 >= v102) {
                  return result;
                }
                uint64_t v120 = *(void *)v101;
                int v121 = *(_DWORD *)(v13 + 20);
                int v122 = *((_DWORD *)a2 - 1);
                *(void *)unint64_t v101 = *v12;
                *(_DWORD *)(v13 + 20) = v122;
                *((_DWORD *)a2 - 1) = v121;
                uint64_t *v12 = v120;
                goto LABEL_151;
              case 4uLL:
                unint64_t v101 = v13 + 12;
                uint64_t v105 = (uint64_t *)(v13 + 24);
                uint64_t v106 = *(void *)(v13 + 16);
                uint64_t v107 = *(void *)(v13 + 28);
                if (v106 >= *(void *)(v13 + 4))
                {
                  if (v107 < v106)
                  {
                    int v123 = *(_DWORD *)(v13 + 20);
                    uint64_t v124 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v124;
                    *(_DWORD *)(v13 + 32) = v123;
                    if (*(void *)(v13 + 16) < *(void *)(v13 + 4))
                    {
                      int v189 = *(_DWORD *)(v13 + 8);
                      uint64_t v163 = *(void *)v13;
                      *(void *)unint64_t v13 = *(void *)v101;
                      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                      *(void *)unint64_t v101 = v163;
                      *(_DWORD *)(v13 + 20) = v189;
                    }
                  }
                }
                else
                {
                  if (v107 >= v106)
                  {
                    int v191 = *(_DWORD *)(v13 + 8);
                    uint64_t v165 = *(void *)v13;
                    *(void *)unint64_t v13 = *(void *)v101;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                    *(void *)unint64_t v101 = v165;
                    *(_DWORD *)(v13 + 20) = v191;
                    if (v107 >= *(void *)(v13 + 16)) {
                      goto LABEL_148;
                    }
                    int v108 = *(_DWORD *)(v13 + 20);
                    uint64_t v133 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v133;
                  }
                  else
                  {
                    int v188 = *(_DWORD *)(v13 + 8);
                    uint64_t v162 = *(void *)v13;
                    *(void *)unint64_t v13 = *v105;
                    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v162;
                    int v108 = v188;
                  }
                  *(_DWORD *)(v13 + 32) = v108;
                }
LABEL_148:
                if (*((void *)a2 - 1) < *(void *)(v13 + 28))
                {
                  uint64_t v134 = *v105;
                  int v135 = *(_DWORD *)(v13 + 32);
                  int v136 = *((_DWORD *)a2 - 1);
                  *uint64_t v105 = *v12;
                  *(_DWORD *)(v13 + 32) = v136;
                  *((_DWORD *)a2 - 1) = v135;
                  uint64_t *v12 = v134;
                  if (*(void *)(v13 + 28) < *(void *)(v13 + 16))
                  {
                    int v137 = *(_DWORD *)(v13 + 20);
                    uint64_t v138 = *(void *)v101;
                    *(void *)unint64_t v101 = *v105;
                    *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                    *uint64_t v105 = v138;
                    *(_DWORD *)(v13 + 32) = v137;
LABEL_151:
                    if (*(void *)(v13 + 16) < *(void *)(v13 + 4))
                    {
                      int v192 = *(_DWORD *)(v13 + 8);
                      uint64_t v166 = *(void *)v13;
                      *(void *)unint64_t v13 = *(void *)v101;
                      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v101 + 8);
                      *(void *)unint64_t v101 = v166;
                      *(_DWORD *)(v101 + 8) = v192;
                    }
                  }
                }
                break;
              case 5uLL:
                return (unint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)v13, (uint64_t *)(v13 + 12), (uint64_t *)(v13 + 24), (uint64_t *)(v13 + 36), (uint64_t *)(a2 - 12));
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 287)
          {
            uint64_t v109 = (char *)(v13 + 12);
            BOOL v111 = (char *)v13 == a2 || v109 == a2;
            if (a5)
            {
              if (!v111)
              {
                uint64_t v112 = 0;
                unint64_t v113 = v13;
                do
                {
                  uint64_t v115 = *(void *)(v113 + 16);
                  uint64_t v116 = *(void *)(v113 + 4);
                  unint64_t v113 = (unint64_t)v109;
                  if (v115 < v116)
                  {
                    int v117 = *(_DWORD *)v109;
                    uint64_t v118 = v112;
                    do
                    {
                      uint64_t v119 = v13 + v118;
                      *(void *)(v119 + 12) = *(void *)(v13 + v118);
                      *(_DWORD *)(v119 + 20) = *(_DWORD *)(v13 + v118 + 8);
                      if (!v118)
                      {
                        uint64_t v114 = v13;
                        goto LABEL_120;
                      }
                      v118 -= 12;
                    }
                    while (v115 < *(void *)(v119 - 8));
                    uint64_t v114 = v13 + v118 + 12;
LABEL_120:
                    *(_DWORD *)uint64_t v114 = v117;
                    *(void *)(v114 + 4) = v115;
                  }
                  uint64_t v109 = (char *)(v113 + 12);
                  v112 += 12;
                }
                while ((char *)(v113 + 12) != a2);
              }
            }
            else if (!v111)
            {
              do
              {
                uint64_t v125 = *(void *)(v11 + 16);
                uint64_t v126 = *(void *)(v11 + 4);
                unint64_t v11 = (unint64_t)v109;
                if (v125 < v126)
                {
                  int v127 = *(_DWORD *)v109;
                  do
                  {
                    int64_t v128 = v109;
                    uint64_t v129 = *(void *)(v109 - 12);
                    v109 -= 12;
                    *(void *)int64_t v128 = v129;
                    *((_DWORD *)v128 + 2) = *((_DWORD *)v128 - 1);
                  }
                  while (v125 < *(void *)(v128 - 20));
                  *(_DWORD *)uint64_t v109 = v127;
                  *(void *)(v109 + 4) = v125;
                }
                uint64_t v109 = (char *)(v11 + 12);
              }
              while ((char *)(v11 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((char *)v13 != a2)
            {
              return (unint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((char *)v13, a2, (uint64_t *)a2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          unint64_t v17 = v13 + 12 * (v15 >> 1);
          uint64_t v18 = *((void *)a2 - 1);
          if ((unint64_t)v14 >= 0x601) {
            break;
          }
          uint64_t v22 = *(void *)(v13 + 4);
          int v23 = (void *)(v13 + 4 + 12 * v16);
          if (v22 < *v23)
          {
            if (v18 >= v22)
            {
              int v175 = *(_DWORD *)(v17 + 8);
              uint64_t v149 = *(void *)v17;
              uint64_t v45 = *(void *)v13;
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
              *(void *)unint64_t v17 = v45;
              *(_DWORD *)(v13 + 8) = v175;
              *(void *)unint64_t v13 = v149;
              if (*((void *)a2 - 1) >= *(void *)(v13 + 4)) {
                goto LABEL_33;
              }
              int v168 = *(_DWORD *)(v13 + 8);
              uint64_t v142 = *(void *)v13;
              uint64_t v46 = *v12;
              *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v13 = v46;
            }
            else
            {
              int v168 = *(_DWORD *)(v17 + 8);
              uint64_t v142 = *(void *)v17;
              uint64_t v24 = *v12;
              *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v17 = v24;
            }
            *((_DWORD *)a2 - 1) = v168;
            uint64_t *v12 = v142;
LABEL_33:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_34;
          }
          if (v18 >= v22) {
            goto LABEL_33;
          }
          int v171 = *(_DWORD *)(v13 + 8);
          uint64_t v145 = *(void *)v13;
          uint64_t v27 = *v12;
          *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
          *(void *)unint64_t v13 = v27;
          *((_DWORD *)a2 - 1) = v171;
          uint64_t *v12 = v145;
          if (*(void *)(v13 + 4) >= *v23) {
            goto LABEL_33;
          }
          int v172 = *(_DWORD *)(v17 + 8);
          uint64_t v146 = *(void *)v17;
          uint64_t v28 = *(void *)v13;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)unint64_t v17 = v28;
          *(_DWORD *)(v13 + 8) = v172;
          *(void *)unint64_t v13 = v146;
          --a4;
          if (a5) {
            goto LABEL_34;
          }
LABEL_55:
          uint64_t v47 = *(void *)(v13 + 4);
          if (*(void *)(v13 - 8) < v47) {
            goto LABEL_56;
          }
          if (v47 < *((void *)a2 - 1))
          {
            unint64_t v88 = v13;
            do
            {
              unint64_t v13 = v88 + 12;
              uint64_t v89 = *(void *)(v88 + 16);
              v88 += 12;
            }
            while (v47 >= v89);
          }
          else
          {
            unint64_t v90 = v13 + 12;
            do
            {
              unint64_t v13 = v90;
              if (v90 >= (unint64_t)a2) {
                break;
              }
              uint64_t v91 = *(void *)(v90 + 4);
              v90 += 12;
            }
            while (v47 >= v91);
          }
          uint64_t v92 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v93 = a2;
            do
            {
              uint64_t v92 = v93 - 12;
              uint64_t v94 = *((void *)v93 - 1);
              v93 -= 12;
            }
            while (v47 < v94);
          }
          int v95 = *(_DWORD *)v11;
          while (v13 < (unint64_t)v92)
          {
            int v185 = *(_DWORD *)(v13 + 8);
            uint64_t v159 = *(void *)v13;
            uint64_t v96 = *(void *)v92;
            *(_DWORD *)(v13 + 8) = *((_DWORD *)v92 + 2);
            *(void *)unint64_t v13 = v96;
            *((_DWORD *)v92 + 2) = v185;
            *(void *)uint64_t v92 = v159;
            do
            {
              uint64_t v97 = *(void *)(v13 + 16);
              v13 += 12;
            }
            while (v47 >= v97);
            do
            {
              uint64_t v98 = *((void *)v92 - 1);
              v92 -= 12;
            }
            while (v47 < v98);
          }
          BOOL v5 = v13 - 12 >= v11;
          BOOL v6 = v13 - 12 == v11;
          if (v13 - 12 != v11)
          {
            uint64_t v99 = *(void *)(v13 - 12);
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 - 4);
            *(void *)unint64_t v11 = v99;
          }
          a5 = 0;
          *(_DWORD *)(v13 - 12) = v95;
          *(void *)(v13 - 8) = v47;
        }
        uint64_t v19 = (uint64_t *)(v13 + 4 + 12 * v16);
        uint64_t v20 = *v19;
        if (*v19 >= *(void *)(v13 + 4))
        {
          if (v18 < v20)
          {
            int v169 = *(_DWORD *)(v17 + 8);
            uint64_t v143 = *(void *)v17;
            uint64_t v25 = *v12;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v17 = v25;
            *((_DWORD *)a2 - 1) = v169;
            uint64_t *v12 = v143;
            if (*v19 < *(void *)(v13 + 4))
            {
              int v170 = *(_DWORD *)(v13 + 8);
              uint64_t v144 = *(void *)v13;
              uint64_t v26 = *(void *)v17;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
              *(void *)unint64_t v13 = v26;
              *(_DWORD *)(v17 + 8) = v170;
              *(void *)unint64_t v17 = v144;
            }
          }
        }
        else
        {
          if (v18 >= v20)
          {
            int v173 = *(_DWORD *)(v13 + 8);
            uint64_t v147 = *(void *)v13;
            uint64_t v29 = *(void *)v17;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
            *(void *)unint64_t v13 = v29;
            *(_DWORD *)(v17 + 8) = v173;
            *(void *)unint64_t v17 = v147;
            if (*((void *)a2 - 1) >= *v19) {
              goto LABEL_24;
            }
            int v167 = *(_DWORD *)(v17 + 8);
            uint64_t v141 = *(void *)v17;
            uint64_t v30 = *v12;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v17 = v30;
          }
          else
          {
            int v167 = *(_DWORD *)(v13 + 8);
            uint64_t v141 = *(void *)v13;
            uint64_t v21 = *v12;
            *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v13 = v21;
          }
          *((_DWORD *)a2 - 1) = v167;
          uint64_t *v12 = v141;
        }
LABEL_24:
        uint64_t v31 = (uint64_t *)(v13 + 12);
        unint64_t v32 = v13 + 12 * v16;
        uint64_t v35 = *(void *)(v32 - 8);
        unint64_t v33 = v32 - 8;
        uint64_t v34 = v35;
        unint64_t v36 = (uint64_t *)(v33 - 4);
        uint64_t v37 = *(void *)(a2 - 20);
        if (v35 >= *(void *)(v13 + 16))
        {
          if (v37 < v34)
          {
            int v174 = *(_DWORD *)(v33 + 4);
            uint64_t v148 = *v36;
            uint64_t v41 = *(void *)v140;
            *(_DWORD *)(v33 + 4) = *((_DWORD *)a2 - 4);
            *unint64_t v36 = v41;
            *((_DWORD *)a2 - 4) = v174;
            *(void *)uint64_t v140 = v148;
            if (*(void *)v33 < *(void *)(v13 + 16))
            {
              uint64_t v42 = *v31;
              int v43 = *(_DWORD *)(v13 + 20);
              int v44 = *(_DWORD *)(v33 + 4);
              *uint64_t v31 = *v36;
              *(_DWORD *)(v13 + 20) = v44;
              *(_DWORD *)(v33 + 4) = v43;
              *unint64_t v36 = v42;
            }
          }
        }
        else if (v37 >= v34)
        {
          uint64_t v48 = *v31;
          int v49 = *(_DWORD *)(v13 + 20);
          int v50 = *(_DWORD *)(v33 + 4);
          *uint64_t v31 = *v36;
          *(_DWORD *)(v13 + 20) = v50;
          *(_DWORD *)(v33 + 4) = v49;
          *unint64_t v36 = v48;
          if (*(void *)(a2 - 20) < *(void *)v33)
          {
            int v176 = *(_DWORD *)(v33 + 4);
            uint64_t v150 = *v36;
            uint64_t v51 = *(void *)v140;
            *(_DWORD *)(v33 + 4) = *((_DWORD *)a2 - 4);
            *unint64_t v36 = v51;
            *((_DWORD *)a2 - 4) = v176;
            *(void *)uint64_t v140 = v150;
          }
        }
        else
        {
          uint64_t v38 = *v31;
          int v39 = *(_DWORD *)(v13 + 20);
          BOOL result = (unint64_t)(a2 - 24);
          int v40 = *((_DWORD *)a2 - 4);
          *uint64_t v31 = *(void *)v140;
          *(_DWORD *)(v13 + 20) = v40;
          *((_DWORD *)a2 - 4) = v39;
          *(void *)uint64_t v140 = v38;
        }
        uint64_t v52 = (unint64_t *)(v13 + 24);
        unint64_t v53 = v13 + 12 * v16;
        uint64_t v56 = *(void *)(v53 + 16);
        unint64_t v54 = v53 + 16;
        uint64_t v55 = v56;
        uint64_t v57 = (unint64_t *)(v54 - 4);
        uint64_t v58 = *((void *)a2 - 4);
        if (v56 >= *(void *)(v13 + 28))
        {
          if (v58 < v55)
          {
            int v177 = *(_DWORD *)(v54 + 4);
            unint64_t v151 = *v57;
            unint64_t v62 = *(void *)v139;
            *(_DWORD *)(v54 + 4) = *((_DWORD *)a2 - 7);
            *uint64_t v57 = v62;
            *((_DWORD *)a2 - 7) = v177;
            *(void *)unint64_t v139 = v151;
            if (*(void *)v54 < *(void *)(v13 + 28))
            {
              unint64_t v63 = *v52;
              int v64 = *(_DWORD *)(v13 + 32);
              int v65 = *(_DWORD *)(v54 + 4);
              BOOL result = *v57;
              *uint64_t v52 = *v57;
              *(_DWORD *)(v13 + 32) = v65;
              *(_DWORD *)(v54 + 4) = v64;
              *uint64_t v57 = v63;
            }
          }
        }
        else if (v58 >= v55)
        {
          unint64_t v66 = *v52;
          int v67 = *(_DWORD *)(v13 + 32);
          int v68 = *(_DWORD *)(v54 + 4);
          BOOL result = *v57;
          *uint64_t v52 = *v57;
          *(_DWORD *)(v13 + 32) = v68;
          *(_DWORD *)(v54 + 4) = v67;
          *uint64_t v57 = v66;
          if (*((void *)a2 - 4) < *(void *)v54)
          {
            int v178 = *(_DWORD *)(v54 + 4);
            unint64_t v152 = *v57;
            unint64_t v69 = *(void *)v139;
            *(_DWORD *)(v54 + 4) = *((_DWORD *)a2 - 7);
            *uint64_t v57 = v69;
            *((_DWORD *)a2 - 7) = v178;
            *(void *)unint64_t v139 = v152;
          }
        }
        else
        {
          unint64_t v59 = *v52;
          int v60 = *(_DWORD *)(v13 + 32);
          int v61 = *((_DWORD *)a2 - 7);
          BOOL result = *(void *)v139;
          *uint64_t v52 = *(void *)v139;
          *(_DWORD *)(v13 + 32) = v61;
          *((_DWORD *)a2 - 7) = v60;
          *(void *)unint64_t v139 = v59;
        }
        uint64_t v70 = *v19;
        uint64_t v71 = *(void *)v54;
        if (*v19 >= *(void *)v33)
        {
          if (v71 < v70)
          {
            int v180 = *(_DWORD *)(v17 + 8);
            uint64_t v154 = *(void *)v17;
            *(void *)unint64_t v17 = *v57;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v54 + 4);
            *(_DWORD *)(v54 + 4) = v180;
            *uint64_t v57 = v154;
            if (*v19 < *(void *)v33)
            {
              int v181 = *(_DWORD *)(v33 + 4);
              uint64_t v155 = *v36;
              *unint64_t v36 = *(void *)v17;
              *(_DWORD *)(v33 + 4) = *(_DWORD *)(v17 + 8);
              *(_DWORD *)(v17 + 8) = v181;
              *(void *)unint64_t v17 = v155;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            int v182 = *(_DWORD *)(v33 + 4);
            uint64_t v156 = *v36;
            *unint64_t v36 = *(void *)v17;
            *(_DWORD *)(v33 + 4) = *(_DWORD *)(v17 + 8);
            *(_DWORD *)(v17 + 8) = v182;
            *(void *)unint64_t v17 = v156;
            if (*(void *)v54 >= *v19) {
              goto LABEL_54;
            }
            int v179 = *(_DWORD *)(v17 + 8);
            uint64_t v153 = *(void *)v17;
            *(void *)unint64_t v17 = *v57;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v54 + 4);
          }
          else
          {
            int v179 = *(_DWORD *)(v33 + 4);
            uint64_t v153 = *v36;
            *unint64_t v36 = *v57;
            *(_DWORD *)(v33 + 4) = *(_DWORD *)(v54 + 4);
          }
          *(_DWORD *)(v54 + 4) = v179;
          *uint64_t v57 = v153;
        }
LABEL_54:
        int v183 = *(_DWORD *)(v13 + 8);
        uint64_t v157 = *(void *)v13;
        uint64_t v72 = *(void *)v17;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
        *(void *)unint64_t v13 = v72;
        *(_DWORD *)(v17 + 8) = v183;
        *(void *)unint64_t v17 = v157;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_34:
        uint64_t v47 = *(void *)(v13 + 4);
LABEL_56:
        uint64_t v73 = 0;
        int v74 = *(_DWORD *)v13;
        do
        {
          uint64_t v75 = *(void *)(v13 + v73 + 16);
          v73 += 12;
        }
        while (v75 < v47);
        unint64_t v76 = v13 + v73;
        uint64_t v77 = a2;
        if (v73 == 12)
        {
          unint64_t v80 = a2;
          while (v76 < (unint64_t)v80)
          {
            uint64_t v78 = v80 - 12;
            uint64_t v81 = *((void *)v80 - 1);
            v80 -= 12;
            if (v81 < v47) {
              goto LABEL_64;
            }
          }
          uint64_t v78 = v80;
          unint64_t v13 = v76;
        }
        else
        {
          do
          {
            uint64_t v78 = v77 - 12;
            uint64_t v79 = *((void *)v77 - 1);
            v77 -= 12;
          }
          while (v79 >= v47);
LABEL_64:
          unint64_t v13 = v76;
          if (v76 < (unint64_t)v78)
          {
            unint64_t v82 = (unint64_t)v78;
            do
            {
              int v184 = *(_DWORD *)(v13 + 8);
              uint64_t v158 = *(void *)v13;
              uint64_t v83 = *(void *)v82;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(v82 + 8);
              *(void *)unint64_t v13 = v83;
              *(_DWORD *)(v82 + 8) = v184;
              *(void *)unint64_t v82 = v158;
              do
              {
                uint64_t v84 = *(void *)(v13 + 16);
                v13 += 12;
              }
              while (v84 < v47);
              do
              {
                uint64_t v85 = *(void *)(v82 - 8);
                v82 -= 12;
              }
              while (v85 >= v47);
            }
            while (v13 < v82);
          }
        }
        if (v13 - 12 != v11)
        {
          uint64_t v86 = *(void *)(v13 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 - 4);
          *(void *)unint64_t v11 = v86;
        }
        *(_DWORD *)(v13 - 12) = v74;
        *(void *)(v13 - 8) = v47;
        if (v76 >= (unint64_t)v78) {
          break;
        }
LABEL_75:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,false>(v11, v13 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v87 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(v11, (uint64_t *)(v13 - 12));
      BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(v13, (uint64_t *)a2);
      if (result) {
        break;
      }
      if (!v87) {
        goto LABEL_75;
      }
    }
    a2 = (char *)(v13 - 12);
    if (!v87) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(uint64_t a1, uint64_t *a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(a2 - 1) < *(void *)(a1 + 4))
      {
        int v10 = *(_DWORD *)(a1 + 8);
        uint64_t v11 = *(void *)a1;
        int v12 = *((_DWORD *)a2 - 1);
        *(void *)a1 = *(uint64_t *)((char *)a2 - 12);
        *(_DWORD *)(a1 + 8) = v12;
        *(uint64_t *)((char *)a2 - 12) = v11;
        *((_DWORD *)a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      unint64_t v13 = (uint64_t *)(a1 + 12);
      uint64_t v14 = (uint64_t *)((char *)a2 - 12);
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = *(a2 - 1);
      if (v15 >= *(void *)(a1 + 4))
      {
        if (v16 >= v15) {
          return 1;
        }
        int v29 = *(_DWORD *)(a1 + 20);
        uint64_t v30 = *v13;
        int v31 = *((_DWORD *)a2 - 1);
        uint64_t *v13 = *v14;
        goto LABEL_45;
      }
      if (v16 < v15)
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *((_DWORD *)a2 - 1);
        *(void *)a1 = *v14;
        *(_DWORD *)(a1 + 8) = v19;
        uint64_t *v14 = v18;
        *((_DWORD *)a2 - 1) = v17;
        return 1;
      }
      int v48 = *(_DWORD *)(a1 + 8);
      uint64_t v49 = *(void *)a1;
      *(void *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      uint64_t *v13 = v49;
      *(_DWORD *)(a1 + 20) = v48;
      if (*(a2 - 1) < *(void *)(a1 + 16))
      {
        int v50 = *(_DWORD *)(a1 + 20);
        uint64_t v51 = *v13;
        int v52 = *((_DWORD *)a2 - 1);
        uint64_t *v13 = *v14;
        *(_DWORD *)(a1 + 20) = v52;
        uint64_t *v14 = v51;
        *((_DWORD *)a2 - 1) = v50;
        return 1;
      }
      return 1;
    case 4uLL:
      unint64_t v13 = (uint64_t *)(a1 + 12);
      uint64_t v14 = (uint64_t *)(a1 + 24);
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 4);
      uint64_t v22 = *(void *)(a1 + 28);
      if (v20 >= v21)
      {
        if (v22 < v20)
        {
          int v32 = *(_DWORD *)(a1 + 20);
          uint64_t v33 = *v13;
          uint64_t *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          uint64_t *v14 = v33;
          *(_DWORD *)(a1 + 32) = v32;
          if (*(void *)(a1 + 16) < v21)
          {
            int v34 = *(_DWORD *)(a1 + 8);
            uint64_t v35 = *(void *)a1;
            *(void *)a1 = *v13;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            uint64_t *v13 = v35;
            *(_DWORD *)(a1 + 20) = v34;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          int v53 = *(_DWORD *)(a1 + 8);
          uint64_t v54 = *(void *)a1;
          *(void *)a1 = *v13;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
          uint64_t *v13 = v54;
          *(_DWORD *)(a1 + 20) = v53;
          if (v22 >= *(void *)(a1 + 16)) {
            goto LABEL_42;
          }
          int v23 = *(_DWORD *)(a1 + 20);
          uint64_t v24 = *v13;
          uint64_t *v13 = *v14;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
        }
        else
        {
          int v23 = *(_DWORD *)(a1 + 8);
          uint64_t v24 = *(void *)a1;
          *(void *)a1 = *v14;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        }
        uint64_t *v14 = v24;
        *(_DWORD *)(a1 + 32) = v23;
      }
LABEL_42:
      if (*(a2 - 1) >= *(void *)(a1 + 28)) {
        return 1;
      }
      uint64_t v55 = (uint64_t)a2 - 12;
      int v56 = *(_DWORD *)(a1 + 32);
      uint64_t v57 = *v14;
      int v58 = *((_DWORD *)a2 - 1);
      uint64_t *v14 = *(uint64_t *)((char *)a2 - 12);
      *(_DWORD *)(a1 + 32) = v58;
      *(void *)uint64_t v55 = v57;
      *(_DWORD *)(v55 + 8) = v56;
      if (*(void *)(a1 + 28) >= *(void *)(a1 + 16)) {
        return 1;
      }
      int v29 = *(_DWORD *)(a1 + 20);
      uint64_t v30 = *v13;
      uint64_t *v13 = *v14;
      int v31 = *(_DWORD *)(a1 + 32);
LABEL_45:
      *((_DWORD *)v13 + 2) = v31;
      uint64_t *v14 = v30;
      *((_DWORD *)v14 + 2) = v29;
      if (*(void *)(a1 + 16) >= *(void *)(a1 + 4)) {
        return 1;
      }
      int v59 = *(_DWORD *)(a1 + 8);
      uint64_t v60 = *(void *)a1;
      *(void *)a1 = *v13;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)v13 + 2);
      uint64_t *v13 = v60;
      *((_DWORD *)v13 + 2) = v59;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      uint64_t v3 = (uint64_t *)(a1 + 24);
      uint64_t v4 = (uint64_t *)(a1 + 12);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 4);
      uint64_t v7 = *(void *)(a1 + 28);
      if (v5 >= v6)
      {
        if (v7 < v5)
        {
          int v25 = *(_DWORD *)(a1 + 20);
          uint64_t v26 = *v4;
          uint64_t *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *uint64_t v3 = v26;
          *(_DWORD *)(a1 + 32) = v25;
          if (*(void *)(a1 + 16) < v6)
          {
            int v27 = *(_DWORD *)(a1 + 8);
            uint64_t v28 = *(void *)a1;
            *(void *)a1 = *v4;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
            uint64_t *v4 = v28;
            *(_DWORD *)(a1 + 20) = v27;
          }
        }
      }
      else if (v7 >= v5)
      {
        int v36 = *(_DWORD *)(a1 + 8);
        uint64_t v37 = *(void *)a1;
        *(void *)a1 = *v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
        uint64_t *v4 = v37;
        *(_DWORD *)(a1 + 20) = v36;
        if (v7 < *(void *)(a1 + 16))
        {
          int v38 = *(_DWORD *)(a1 + 20);
          uint64_t v39 = *v4;
          uint64_t *v4 = *v3;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
          *uint64_t v3 = v39;
          *(_DWORD *)(a1 + 32) = v38;
        }
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 8);
        uint64_t v9 = *(void *)a1;
        *(void *)a1 = *v3;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 32);
        *uint64_t v3 = v9;
        *(_DWORD *)(a1 + 32) = v8;
      }
      int v40 = (uint64_t *)(a1 + 36);
      if ((uint64_t *)(a1 + 36) == a2) {
        return 1;
      }
      uint64_t v41 = 0;
      int v42 = 0;
      break;
  }
  while (1)
  {
    uint64_t v43 = *(uint64_t *)((char *)v40 + 4);
    if (v43 < *(uint64_t *)((char *)v3 + 4)) {
      break;
    }
LABEL_35:
    uint64_t v3 = v40;
    v41 += 12;
    int v40 = (uint64_t *)((char *)v40 + 12);
    if (v40 == a2) {
      return 1;
    }
  }
  int v44 = *(_DWORD *)v40;
  uint64_t v45 = v41;
  do
  {
    uint64_t v46 = a1 + v45;
    *(void *)(v46 + 36) = *(void *)(a1 + v45 + 24);
    *(_DWORD *)(v46 + 44) = *(_DWORD *)(a1 + v45 + 32);
    if (v45 == -24)
    {
      *(_DWORD *)a1 = v44;
      *(void *)(a1 + 4) = v43;
      if (++v42 != 8) {
        goto LABEL_35;
      }
      return (uint64_t *)((char *)v40 + 12) == a2;
    }
    v45 -= 12;
  }
  while (v43 < *(void *)(v46 + 16));
  uint64_t v47 = a1 + v45;
  *(_DWORD *)(v47 + 36) = v44;
  *(void *)(v47 + 40) = v43;
  if (++v42 != 8) {
    goto LABEL_35;
  }
  return (uint64_t *)((char *)v40 + 12) == a2;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *(uint64_t *)((char *)a2 + 4);
  uint64_t v6 = *(uint64_t *)((char *)a3 + 4);
  if (v5 >= *(uint64_t *)((char *)result + 4))
  {
    if (v6 < v5)
    {
      int v10 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *a2;
      int v12 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v12;
      *a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
      {
        int v13 = *((_DWORD *)result + 2);
        uint64_t v14 = *result;
        int v15 = *((_DWORD *)a2 + 2);
        void *result = *a2;
        *((_DWORD *)result + 2) = v15;
        *a2 = v14;
        *((_DWORD *)a2 + 2) = v13;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      int v7 = *((_DWORD *)result + 2);
      uint64_t v8 = *result;
      int v9 = *((_DWORD *)a3 + 2);
      void *result = *a3;
      *((_DWORD *)result + 2) = v9;
LABEL_9:
      *a3 = v8;
      *((_DWORD *)a3 + 2) = v7;
      goto LABEL_10;
    }
    int v16 = *((_DWORD *)result + 2);
    uint64_t v17 = *result;
    int v18 = *((_DWORD *)a2 + 2);
    void *result = *a2;
    *((_DWORD *)result + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
    {
      int v7 = *((_DWORD *)a2 + 2);
      uint64_t v8 = *a2;
      int v19 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v19;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)a3 + 4))
  {
    int v20 = *((_DWORD *)a3 + 2);
    uint64_t v21 = *a3;
    int v22 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v22;
    *a4 = v21;
    *((_DWORD *)a4 + 2) = v20;
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
    {
      int v23 = *((_DWORD *)a2 + 2);
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v25;
      *a3 = v24;
      *((_DWORD *)a3 + 2) = v23;
      if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
      {
        int v26 = *((_DWORD *)result + 2);
        uint64_t v27 = *result;
        int v28 = *((_DWORD *)a2 + 2);
        void *result = *a2;
        *((_DWORD *)result + 2) = v28;
        *a2 = v27;
        *((_DWORD *)a2 + 2) = v26;
      }
    }
  }
  if (*(uint64_t *)((char *)a5 + 4) < *(uint64_t *)((char *)a4 + 4))
  {
    int v29 = *((_DWORD *)a4 + 2);
    uint64_t v30 = *a4;
    int v31 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v31;
    *a5 = v30;
    *((_DWORD *)a5 + 2) = v29;
    if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)a3 + 4))
    {
      int v32 = *((_DWORD *)a3 + 2);
      uint64_t v33 = *a3;
      int v34 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v34;
      *a4 = v33;
      *((_DWORD *)a4 + 2) = v32;
      if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)a2 + 4))
      {
        int v35 = *((_DWORD *)a2 + 2);
        uint64_t v36 = *a2;
        int v37 = *((_DWORD *)a3 + 2);
        *a2 = *a3;
        *((_DWORD *)a2 + 2) = v37;
        *a3 = v36;
        *((_DWORD *)a3 + 2) = v35;
        if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)result + 4))
        {
          int v38 = *((_DWORD *)result + 2);
          uint64_t v39 = *result;
          int v40 = *((_DWORD *)a2 + 2);
          void *result = *a2;
          *((_DWORD *)result + 2) = v40;
          *a2 = v39;
          *((_DWORD *)a2 + 2) = v38;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *,operations_research::sat::NonOverlappingRectanglesEnergyPropagator::Neighbor *>(char *a1, char *a2, uint64_t *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  if (a2 - a1 >= 13 && (unint64_t)v3 >= 0x18)
  {
    int64_t v44 = (unint64_t)(v4 - 2) >> 1;
    int64_t v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        uint64_t v46 = (2 * v45) | 1;
        uint64_t v47 = (int *)&a1[12 * v46];
        if (2 * v45 + 2 < v4)
        {
          uint64_t v48 = *(void *)&a1[12 * v46 + 4];
          uint64_t v49 = *((void *)v47 + 2);
          v47 += 3 * (v48 < v49);
          if (v48 < v49) {
            uint64_t v46 = 2 * v45 + 2;
          }
        }
        uint64_t v50 = *(void *)&a1[12 * v45 + 4];
        if (*(void *)(v47 + 1) >= v50)
        {
          uint64_t v51 = (int *)&a1[12 * v45];
          int v52 = *v51;
          do
          {
            int v53 = v51;
            uint64_t v51 = v47;
            uint64_t v54 = *(void *)v47;
            v53[2] = v51[2];
            *(void *)int v53 = v54;
            if (v44 < v46) {
              break;
            }
            uint64_t v55 = (2 * v46) | 1;
            uint64_t v47 = (int *)&a1[12 * v55];
            uint64_t v56 = 2 * v46 + 2;
            if (v56 < v4)
            {
              uint64_t v57 = *(void *)&a1[12 * v55 + 4];
              uint64_t v58 = *((void *)v47 + 2);
              v47 += 3 * (v57 < v58);
              if (v57 < v58) {
                uint64_t v55 = v56;
              }
            }
            uint64_t v46 = v55;
          }
          while (*(void *)(v47 + 1) >= v50);
          *uint64_t v51 = v52;
          *(void *)(v51 + 1) = v50;
        }
      }
      BOOL v26 = v45-- <= 0;
    }
    while (!v26);
  }
  uint64_t v5 = (uint64_t *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 24)
    {
      uint64_t v6 = (uint64_t *)a2;
      do
      {
        if (*(uint64_t *)((char *)v6 + 4) < *(void *)(a1 + 4))
        {
          int v7 = *((_DWORD *)v6 + 2);
          uint64_t v8 = *v6;
          int v9 = *((_DWORD *)a1 + 2);
          *uint64_t v6 = *(void *)a1;
          *((_DWORD *)v6 + 2) = v9;
          *(void *)a1 = v8;
          *((_DWORD *)a1 + 2) = v7;
        }
        uint64_t v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
LABEL_28:
      uint64_t v5 = a3;
      goto LABEL_29;
    }
    int v10 = (uint64_t *)a2;
    while (1)
    {
      if (*(uint64_t *)((char *)v10 + 4) < *(void *)(a1 + 4))
      {
        int v11 = *((_DWORD *)v10 + 2);
        uint64_t v12 = *v10;
        int v13 = *((_DWORD *)a1 + 2);
        uint64_t *v10 = *(void *)a1;
        *((_DWORD *)v10 + 2) = v13;
        *(void *)a1 = v12;
        *((_DWORD *)a1 + 2) = v11;
        if ((unint64_t)v4 < 3)
        {
          uint64_t v14 = (int *)(a1 + 12);
          int64_t v15 = 1;
          uint64_t v16 = *(void *)(a1 + 4);
          if (*((void *)a1 + 2) >= v16) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v14 = (int *)&a1[12 * (*((void *)a1 + 2) < *(void *)(a1 + 28)) + 12];
          if (*((void *)a1 + 2) >= *(void *)(a1 + 28)) {
            int64_t v15 = 1;
          }
          else {
            int64_t v15 = 2;
          }
          uint64_t v16 = *(void *)(a1 + 4);
          if (*(void *)(v14 + 1) >= v16)
          {
LABEL_21:
            int v17 = *(_DWORD *)a1;
            int v18 = (int *)a1;
            do
            {
              int v19 = v18;
              int v18 = v14;
              uint64_t v20 = *(void *)v14;
              v19[2] = v18[2];
              *(void *)int v19 = v20;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15) {
                break;
              }
              uint64_t v21 = (2 * v15) | 1;
              uint64_t v14 = (int *)&a1[12 * v21];
              uint64_t v22 = 2 * v15 + 2;
              if (v22 < v4)
              {
                uint64_t v23 = *(void *)&a1[12 * v21 + 4];
                uint64_t v24 = *((void *)v14 + 2);
                v14 += 3 * (v23 < v24);
                if (v23 < v24) {
                  uint64_t v21 = v22;
                }
              }
              int64_t v15 = v21;
            }
            while (*(void *)(v14 + 1) >= v16);
            *int v18 = v17;
            *(void *)(v18 + 1) = v16;
          }
        }
      }
      int v10 = (uint64_t *)((char *)v10 + 12);
      if (v10 == a3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v3 >= 13)
  {
    int64_t v25 = v3 / 0xCuLL;
    do
    {
      uint64_t v27 = 0;
      uint64_t v59 = *(void *)a1;
      int v60 = *((_DWORD *)a1 + 2);
      int v28 = (uint64_t *)a1;
      do
      {
        uint64_t v30 = v27 + 1;
        int v31 = (int *)v28 + 3 * v27 + 3;
        uint64_t v32 = (2 * v27) | 1;
        uint64_t v33 = 2 * v27 + 2;
        if (v33 < v25)
        {
          uint64_t v34 = *(uint64_t *)((char *)v28 + 12 * v30 + 4);
          uint64_t v35 = *((void *)v31 + 2);
          v31 += 3 * (v34 < v35);
          if (v34 < v35) {
            uint64_t v32 = v33;
          }
        }
        uint64_t v29 = *(void *)v31;
        *((_DWORD *)v28 + 2) = v31[2];
        uint64_t *v28 = v29;
        int v28 = (uint64_t *)v31;
        uint64_t v27 = v32;
      }
      while (v32 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
      a2 -= 12;
      if (v31 == (int *)a2)
      {
        v31[2] = v60;
        *(void *)int v31 = v59;
      }
      else
      {
        uint64_t v36 = *(void *)a2;
        v31[2] = *((_DWORD *)a2 + 2);
        *(void *)int v31 = v36;
        *(void *)a2 = v59;
        *((_DWORD *)a2 + 2) = v60;
        uint64_t v37 = (char *)v31 - a1 + 12;
        if (v37 >= 13)
        {
          unint64_t v38 = (v37 / 0xCuLL - 2) >> 1;
          uint64_t v39 = *(void *)(v31 + 1);
          if (*(void *)&a1[12 * v38 + 4] < v39)
          {
            int v40 = *v31;
            do
            {
              uint64_t v41 = v31;
              int v31 = (int *)&a1[12 * v38];
              uint64_t v42 = *(void *)v31;
              v41[2] = v31[2];
              *(void *)uint64_t v41 = v42;
              if (!v38) {
                break;
              }
              unint64_t v38 = (v38 - 1) >> 1;
            }
            while (*(void *)&a1[12 * v38 + 4] < v39);
            *int v31 = v40;
            *(void *)(v31 + 1) = v39;
          }
        }
      }
      BOOL v26 = v25-- <= 2;
    }
    while (!v26);
  }
  return v5;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  int v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  int v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  int v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    BOOL v26 = a1[4];
    if (!v26) {
      return;
    }
LABEL_21:
    *((void *)v26 + 4) = v14 >> 3;
    *((void *)v26 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      int v18 = &v5[16 * (void)v13];
      uint64_t v19 = *((void *)v18 + 1);
      uint64_t v20 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v18, 4 * v19);
      unint64_t v21 = ((((unint64_t)v20 + v19) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((void)v20 + v19));
      uint64_t v22 = *a1;
      uint64_t v23 = a1[3];
      unint64_t v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v24 = (v15 + v24) & (unint64_t)v23;
          unint64_t v25 = *(void *)&v22[v24] & (~*(void *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      unint64_t v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      char v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  BOOL v26 = a1[4];
  if (v26) {
    goto LABEL_21;
  }
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<int>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<int>>,std::equal_to<absl::lts_2020_02_25::Span<int>>,std::allocator<absl::lts_2020_02_25::Span<int>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  unint64_t v1 = result;
  unint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *((void *)result + 3);
  uint64_t v4 = *(void *)result + v3;
  if (v4 + 1 != *(void *)result)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)result;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  if (!*((void *)result + 3))
  {
    unint64_t v15 = 0;
    *((void *)result + 5) = -*((void *)result + 2);
    uint64_t v32 = *((void *)result + 4);
    if (!v32) {
      return result;
    }
LABEL_26:
    *(void *)(v32 + 32) = v15 >> 3;
    *(void *)(v32 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)v1 + v14) == 254)
    {
      uint64_t v20 = *((void *)v1 + 1) + 16 * v14;
      uint64_t v21 = *(void *)(v20 + 8);
      BOOL result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v20, 4 * v21);
      unint64_t v22 = ((((unint64_t)result + v21) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((void)result + v21));
      uint64_t v23 = *(void *)v1;
      uint64_t v24 = *((void *)v1 + 3);
      unint64_t v25 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
      unint64_t v26 = *(void *)(*(void *)v1 + v25) & (~*(void *)(*(void *)v1 + v25) << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ (*(void *)v1 >> 12)) & v24;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v24;
          unint64_t v26 = *(void *)(v23 + v17) & (~*(void *)(v23 + v17) << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v26)) >> 3)) & v24;
      v15 += v16;
      if ((((v18 - v25) ^ (v14 - v25)) & v24) > 7)
      {
        int v27 = *(unsigned __int8 *)(v23 + v18);
        char v28 = v22 & 0x7F;
        *(unsigned char *)(v23 + v18) = v28;
        *(unsigned char *)((*((void *)v1 + 3) & (v18 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v28;
        uint64_t v29 = *((void *)v1 + 1);
        if (v27 == 128)
        {
          *(_OWORD *)(v29 + 16 * v18) = *(_OWORD *)(v29 + 16 * v14);
          *(unsigned char *)(*(void *)v1 + v14) = 0x80;
          *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = 0x80;
        }
        else
        {
          long long v30 = *(_OWORD *)(v29 + 16 * v14);
          *(_OWORD *)(v29 + 16 * v14) = *(_OWORD *)(v29 + 16 * v18);
          *(_OWORD *)(*((void *)v1 + 1) + 16 * v18) = v30;
          --v14;
        }
      }
      else
      {
        char v19 = v22 & 0x7F;
        *(unsigned char *)(v23 + v14) = v19;
        *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v19;
      }
    }
    ++v14;
  }
  while (v14 != *((void *)v1 + 3));
  uint64_t v31 = v14 - (v14 >> 3);
  if (v14 == 7) {
    uint64_t v31 = 6;
  }
  *((void *)v1 + 5) = v31 - *((void *)v1 + 2);
  uint64_t v32 = *((void *)v1 + 4);
  if (v32) {
    goto LABEL_26;
  }
  return result;
}

void std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F0C28A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C28A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (((*(void *)(v1 + 64) - *(void *)(v1 + 56)) & 0x3FFFFFFFCLL) == 8) {
    return (operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::PropagateTwoBoxes(*(operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator **)(a1 + 8)) & 1) != 0;
  }
  uint64_t result = operations_research::sat::DisjunctiveOverloadChecker::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1112));
  if (result)
  {
    uint64_t result = operations_research::sat::DisjunctiveDetectablePrecedences::Propagate((operations_research::sat::DisjunctiveDetectablePrecedences *)(v1 + 1240));
    if (result)
    {
      uint64_t result = operations_research::sat::DisjunctiveDetectablePrecedences::Propagate((operations_research::sat::DisjunctiveDetectablePrecedences *)(v1 + 1392));
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_0>,BOOL ()(void)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CCC97DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F0C2928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F0C2928;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((int)((*(void *)(v1 + 64) - *(void *)(v1 + 56)) >> 2) < 3) {
    return 1;
  }
  uint64_t result = operations_research::sat::DisjunctiveNotLast::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1544));
  if (result)
  {
    uint64_t result = operations_research::sat::DisjunctiveNotLast::Propagate((operations_research::sat::SchedulingConstraintHelper **)(v1 + 1648));
    if (result)
    {
      uint64_t result = operations_research::sat::DisjunctiveEdgeFinding::Propagate((operations_research::sat::DisjunctiveEdgeFinding *)(v1 + 1936));
      if (result)
      {
        return operations_research::sat::DisjunctiveEdgeFinding::Propagate((operations_research::sat::DisjunctiveEdgeFinding *)(v1 + 1752));
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat45NonOverlappingRectanglesDisjunctivePropagator9PropagateEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1,std::allocator<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Propagate(void)::$_1>,BOOL ()(void)>::target_type()
{
}

void operations_research::sat::Disjunctive(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - *(void *)a1);
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(a2 + 24) = 0;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = &unk_26F0C2B58;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  int64_t v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int8x16_t v10 = (char *)operator new(v9);
    v8[1] = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(void *)(a2 + 24) = v8;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_23CCC9AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TaskSet::AddEntry(uint64_t a1, long long *a2)
{
  int64_t v5 = *(_DWORD **)a1;
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  uint64_t v6 = ((uint64_t)v4 - *(void *)a1) / 20;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v4 >= v7)
  {
    unint64_t v10 = v6 + 1;
    if ((unint64_t)(v6 + 1) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v5) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x666666666666666) {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xCCCCCCCCCCCCCCCLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int8x16_t v13 = (char *)operator new(20 * v12);
    }
    else
    {
      int8x16_t v13 = 0;
    }
    unint64_t v14 = &v13[20 * v6];
    unint64_t v15 = &v13[20 * v12];
    *(_OWORD *)unint64_t v14 = *a2;
    *((_DWORD *)v14 + 4) = *((_DWORD *)a2 + 4);
    int64_t v9 = v14 + 20;
    if (v4 != v5)
    {
      do
      {
        long long v16 = *(_OWORD *)(v4 - 5);
        *((_DWORD *)v14 - 1) = *(v4 - 1);
        *(_OWORD *)(v14 - 20) = v16;
        v14 -= 20;
        v4 -= 5;
      }
      while (v4 != v5);
      uint64_t v4 = *(_DWORD **)a1;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v15;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    long long v8 = *a2;
    v4[4] = *((_DWORD *)a2 + 4);
    *(_OWORD *)uint64_t v4 = v8;
    int64_t v9 = v4 + 5;
  }
  *(void *)(a1 + 8) = v9;
  if ((int)v6 >= 1)
  {
    unint64_t v17 = v6 + 1;
    uint64_t v18 = 5 * v6;
    while (1)
    {
      char v19 = *(_DWORD **)a1;
      if (*(void *)(*(void *)a1 + 20 * (v17 - 2) + 4) <= *(void *)((char *)a2 + 4)) {
        break;
      }
      uint64_t v20 = (long long *)&v19[5 * (v17 - 2)];
      uint64_t v21 = &v19[v18];
      long long v22 = *v20;
      v21[4] = *((_DWORD *)v20 + 4);
      *(_OWORD *)uint64_t v21 = v22;
      LODWORD(v6) = v6 - 1;
      --v17;
      v18 -= 5;
      if (v17 <= 1)
      {
        LODWORD(v6) = 0;
        break;
      }
    }
  }
  uint64_t v23 = *(void *)a1 + 20 * (int)v6;
  long long v24 = *a2;
  *(_DWORD *)(v23 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t v23 = v24;
  if ((int)v6 <= *(_DWORD *)(a1 + 24)) {
    *(_DWORD *)(a1 + 24) = 0;
  }
}

void operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  unint64_t v4 = (unint64_t)&v2[-*(void *)a1];
  uint64_t v5 = -858993459 * (v4 >> 2);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 20 * v5;
    while (*(_DWORD *)&v3[v8] != *a2)
    {
      v8 += 20;
      if (v9 == v8) {
        return;
      }
    }
    unint64_t v10 = &v3[v8 + 20];
    uint64_t v11 = v4 - v8 - 20;
    if (v10 == v2)
    {
      unint64_t v12 = *(char **)a1;
    }
    else
    {
      memmove(&v3[v8], v10, v4 - v8 - 20);
      unint64_t v12 = *(char **)a1;
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 2);
    unint64_t v14 = &v3[v11 + v8];
    *(void *)(a1 + 8) = v14;
    uint64_t v15 = (uint64_t)&v3[v8 + v11 - (void)v12] / 20;
    *(_DWORD *)(a1 + 24) = v15;
    unint64_t v16 = *(void *)(a1 + 16);
    if ((unint64_t)v14 >= v16)
    {
      unint64_t v19 = v15 + 1;
      if ((unint64_t)(v15 + 1) > 0xCCCCCCCCCCCCCCCLL) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (void)v12) >> 2);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x666666666666666) {
        unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v22 = (char *)operator new(20 * v21);
      }
      else
      {
        long long v22 = 0;
      }
      uint64_t v23 = &v22[20 * v15];
      *(_OWORD *)uint64_t v23 = *(_OWORD *)a2;
      *((_DWORD *)v23 + 4) = a2[4];
      uint64_t v18 = (uint64_t)(v23 + 20);
      if (v14 != v12)
      {
        uint64_t v24 = 0;
        unint64_t v25 = &v3[20 * v13];
        do
        {
          unint64_t v26 = &v25[v24 + v8];
          int v27 = &v23[v24];
          long long v28 = *(_OWORD *)(v26 - 20);
          *((_DWORD *)v27 - 1) = *((_DWORD *)v26 - 1);
          *(_OWORD *)(v27 - 20) = v28;
          v24 -= 20;
        }
        while (&v25[v8 + v24] != v12);
        unint64_t v12 = *(char **)a1;
        v23 += v24;
      }
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = &v22[20 * v21];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v17 = *(_OWORD *)a2;
      *((_DWORD *)v14 + 4) = a2[4];
      *(_OWORD *)unint64_t v14 = v17;
      uint64_t v18 = (uint64_t)&v3[4 * (v11 >> 2) + 20 + v8];
    }
    *(void *)(a1 + 8) = v18;
  }
}

BOOL operations_research::sat::DisjunctiveWithTwoItems::Propagate(operations_research::sat::DisjunctiveWithTwoItems *this)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 1);
  uint64_t v3 = (int *)*((void *)v2 + 16);
  int v4 = *v3;
  if (*v3 != -1
    && ((*(void *)(*(void *)(*(void *)v2 + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4 & 0x3F ^ 1u)) & 1) != 0)
  {
    return 1;
  }
  int v5 = v3[1];
  if (v5 != -1
    && ((*(void *)(*(void *)(*(void *)v2 + 24) + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v5 & 0x3F ^ 1u)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v6 = (_DWORD *)*((void *)v2 + 4);
  uint64_t v7 = *(void *)(*((void *)v2 + 1) + 40);
  unint64_t v8 = (int *)*((void *)v2 + 7);
  if (*(void *)(v7 + 12 * v8[1]) <= -*(void *)(v7 + 12 * (*v6 ^ 1)))
  {
    if (*(void *)(v7 + 12 * *v8) <= -*(void *)(v7 + 12 * (v6[1] ^ 1))) {
      return 1;
    }
    unsigned int v9 = 0;
    int v4 = v3[1];
    uint64_t v10 = 1;
    if (v5 == -1) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v9 = 1;
    uint64_t v10 = 0;
    if (v4 == -1) {
      goto LABEL_11;
    }
  }
  if (((*(void *)(*(void *)(*(void *)v2 + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
  {
    uint64_t v12 = v9;
    unint64_t v13 = v3[v9];
    if (v13 == -1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_11:
  int64_t v11 = *(void *)(v7 + 12 * v8[v10]);
  uint64_t v12 = v9;
  if (*(void *)(v7 + 12 * (int)v6[v9]) < v11)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
    operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)this + 1), v10, v9);
    operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v10);
    operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*((void **)this + 1), v10, v11);
    if (!operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*((unint64_t **)this + 1), v9, v11))return 0; {
    uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 1);
    }
    uint64_t v3 = (int *)*((void *)v2 + 16);
  }
  unint64_t v13 = v3[v9];
  if (v13 != -1)
  {
LABEL_17:
    if ((*(void *)(*(void *)(*(void *)v2 + 24) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13)) {
      goto LABEL_18;
    }
    return 1;
  }
LABEL_18:
  uint64_t v14 = *(void *)(*((void *)v2 + 1) + 40);
  uint64_t v15 = *(void *)(v14 + 12 * (*(_DWORD *)(*((void *)v2 + 4) + 4 * v12) ^ 1));
  if (v15 <= *(void *)(v14 + 12 * (*(_DWORD *)(*((void *)v2 + 7) + 4 * v10) ^ 1))) {
    return 1;
  }
  int64_t v16 = -v15;
  operations_research::sat::SchedulingConstraintHelper::ClearReason(v2);
  operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)this + 1), v10, v9);
  operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v9);
  operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 1), v9, v16);
  return operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(*((unint64_t **)this + 1), v10, v16) != 0;
}

uint64_t operations_research::sat::DisjunctiveOverloadChecker::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[1], 1);
  uint64_t v2 = (void **)(this + 2);
  this[3] = this[2];
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[1]);
  int v5 = *(int **)started;
  int v4 = *(int **)(started + 8);
  if (*(int **)started != v4)
  {
    uint64_t v6 = 0;
    uint64_t v46 = *(int **)(started + 8);
    uint64_t v47 = 0;
    uint64_t v7 = this[1];
    int64_t v8 = 0x8000000000000002;
    while (1)
    {
      int v10 = *v5;
      int64_t v11 = *(void *)(v5 + 1);
      unint64_t v12 = *(int *)(*((void *)v7 + 16) + 4 * *v5);
      if (v12 == -1
        || ((*(void *)(*(void *)(*(void *)v7 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 & 0x3F ^ 1)) & 1) == 0)
      {
        if (v11 < v8)
        {
          uint64_t v14 = this[3];
          unint64_t v13 = this[4];
          if (v14 < v13)
          {
            *(_DWORD *)uint64_t v14 = v10;
            *(void *)((char *)v14 + 4) = v11;
            uint64_t v15 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
            this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 + 12);
            uint64_t v7 = this[1];
            int v16 = *(_DWORD *)(*((void *)v7 + 10) + 4 * v10);
            if (v16 != -1) {
              goto LABEL_11;
            }
LABEL_28:
            uint64_t v18 = (void *)(*((void *)v7 + 13) + 8 * v10);
            uint64_t v17 = *(void *)(*((void *)v7 + 1) + 40);
            goto LABEL_29;
          }
          long long v22 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (operations_research::sat::SchedulingConstraintHelper *)*v2) >> 2);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v22) >> 2);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v26 = 0x1555555555555555;
          }
          else {
            unint64_t v26 = v24;
          }
          uint64_t v45 = v6;
          if (v26)
          {
            if (v26 > 0x1555555555555555) {
              goto LABEL_60;
            }
            int v27 = (char *)operator new(12 * v26);
            uint64_t v28 = (uint64_t)&v27[12 * v23];
            *(_DWORD *)uint64_t v28 = v10;
            *(void *)(v28 + 4) = v11;
            uint64_t v29 = v28;
            if (v14 != v22)
            {
LABEL_23:
              int v4 = v46;
              do
              {
                uint64_t v30 = *(void *)((char *)v14 - 12);
                uint64_t v14 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v14 - 12);
                int v31 = *((_DWORD *)v14 + 2);
                *(void *)(v29 - 12) = v30;
                v29 -= 12;
                *(_DWORD *)(v29 + 8) = v31;
              }
              while (v14 != v22);
              uint64_t v14 = this[2];
              uint64_t v15 = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
              this[2] = (operations_research::sat::SchedulingConstraintHelper *)v29;
              this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
              this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v27[12 * v26];
              if (v14) {
LABEL_26:
              }
                operator delete(v14);
LABEL_27:
              uint64_t v2 = (void **)(this + 2);
              uint64_t v6 = v45;
              this[3] = v15;
              uint64_t v7 = this[1];
              int v16 = *(_DWORD *)(*((void *)v7 + 10) + 4 * v10);
              if (v16 == -1) {
                goto LABEL_28;
              }
LABEL_11:
              uint64_t v17 = *(void *)(*((void *)v7 + 1) + 40);
              uint64_t v18 = (void *)(v17 + 12 * v16);
LABEL_29:
              v8 += *v18;
              if (v8 > -*(void *)(v17 + 12 * (*(_DWORD *)(*((void *)v7 + 7) + 4 * v10) ^ 1)))
              {
                uint64_t v6 = -1431655765
                   * ((unint64_t)(v15 - (operations_research::sat::SchedulingConstraintHelper *)*v2) >> 2);
                uint64_t v47 = v8;
              }
              goto LABEL_5;
            }
          }
          else
          {
            int v27 = 0;
            uint64_t v28 = 12 * v23;
            *(_DWORD *)uint64_t v28 = v10;
            *(void *)(v28 + 4) = v11;
            uint64_t v29 = 12 * v23;
            if (v14 != v22) {
              goto LABEL_23;
            }
          }
          int v4 = v46;
          uint64_t v15 = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
          this[2] = (operations_research::sat::SchedulingConstraintHelper *)v29;
          this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v28 + 12);
          this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v27[12 * v26];
          if (v14) {
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        unint64_t v19 = this[2];
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((this[3] - v19) >> 2);
        if ((int)v6 <= v20)
        {
          if ((int)v6 < v20) {
            this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v19 + 12 * (int)v6);
          }
        }
        else
        {
          int v21 = v6;
          std::vector<operations_research::sat::TaskTime>::__append((uint64_t)v2, (int)v6 - v20);
          LODWORD(v6) = v21;
        }
        if ((int)v6 >= 1)
        {
          uint64_t result = operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow((uint64_t)this, v47);
          if (!result) {
            return result;
          }
        }
        uint64_t v33 = this[2];
        this[3] = v33;
        uint64_t v34 = this[4];
        if (v33 >= v34)
        {
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 2);
          uint64_t v37 = 2 * v36;
          if (2 * v36 <= 1) {
            uint64_t v37 = 1;
          }
          if (v36 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v38 = 0x1555555555555555;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38 > 0x1555555555555555) {
LABEL_60:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v39 = 12 * v38;
          int v40 = (char *)operator new(12 * v38);
          *(_DWORD *)int v40 = v10;
          *(void *)(v40 + 4) = v11;
          uint64_t v35 = (operations_research::sat::SchedulingConstraintHelper *)(v40 + 12);
          this[2] = (operations_research::sat::SchedulingConstraintHelper *)v40;
          this[3] = (operations_research::sat::SchedulingConstraintHelper *)(v40 + 12);
          this[4] = (operations_research::sat::SchedulingConstraintHelper *)&v40[v39];
          if (v33) {
            operator delete(v33);
          }
          int v4 = v46;
        }
        else
        {
          *(_DWORD *)uint64_t v33 = v10;
          *(void *)((char *)v33 + 4) = v11;
          uint64_t v35 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v33 + 12);
        }
        this[3] = v35;
        uint64_t v7 = this[1];
        int v41 = *(_DWORD *)(*((void *)v7 + 10) + 4 * v10);
        if (v41 == -1) {
          unsigned int v9 = (void *)(*((void *)v7 + 13) + 8 * v10);
        }
        else {
          unsigned int v9 = (void *)(*(void *)(*((void *)v7 + 1) + 40) + 12 * v41);
        }
        uint64_t v6 = 0;
        int64_t v8 = *v9 + v11;
      }
LABEL_5:
      v5 += 3;
      if (v5 == v4) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v47 = 0;
  LODWORD(v6) = 0;
LABEL_52:
  int v42 = v6;
  uint64_t v43 = this[2];
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((this[3] - v43) >> 2);
  if ((int)v6 <= v44)
  {
    if ((int)v6 < v44) {
      this[3] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v43 + 12 * (int)v6);
    }
  }
  else
  {
    std::vector<operations_research::sat::TaskTime>::__append((uint64_t)v2, (int)v6 - v44);
  }
  if (v42 < 1) {
    return 1;
  }
  uint64_t result = operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow((uint64_t)this, v47);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t operations_research::sat::DisjunctiveOverloadChecker::PropagateSubwindow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  uint64_t v160 = a1 + 64;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)(a1 + 64), v4);
  int v5 = *(char **)(v3 + 40);
  uint64_t v161 = (uint64_t *)(v3 + 40);
  *(void *)(v3 + 48) = v5;
  uint64_t v152 = v3;
  int v155 = v4;
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v4;
    while (1)
    {
      int v9 = *(_DWORD *)(*(void *)(v152 + 16) + 12 * v6);
      uint64_t v10 = -*(void *)(*(void *)(*(void *)(*(void *)(v152 + 8) + 8) + 40)
                       + 12 * (*(_DWORD *)(*(void *)(*(void *)(v152 + 8) + 56) + 4 * v9) ^ 1));
      if (v10 >= a2) {
        goto LABEL_5;
      }
      *(_DWORD *)(*(void *)(v152 + 104) + 4 * v9) = v6;
      unint64_t v11 = *(void *)(v152 + 56);
      if ((unint64_t)v5 >= v11) {
        break;
      }
      *(_DWORD *)int v5 = v9;
      *(void *)(v5 + 4) = v10;
      int64_t v8 = v5 + 12;
LABEL_4:
      *(void *)(v152 + 48) = v8;
      int v5 = v8;
LABEL_5:
      if (++v6 == v7)
      {
        uint64_t v22 = *v161;
        uint64_t v3 = v152;
        goto LABEL_26;
      }
    }
    unint64_t v12 = (char *)*v161;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*v161] >> 2);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v12) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        goto LABEL_176;
      }
      uint64_t v17 = (char *)operator new(12 * v16);
      uint64_t v18 = (uint64_t)&v17[12 * v13];
      *(_DWORD *)uint64_t v18 = v9;
      *(void *)(v18 + 4) = v10;
      uint64_t v19 = v18;
      if (v5 == v12) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 4 * ((uint64_t)&v5[-*v161] >> 2);
      *(_DWORD *)uint64_t v18 = v9;
      *(void *)(v18 + 4) = v10;
      uint64_t v19 = 12 * v13;
      if (v5 == v12) {
        goto LABEL_21;
      }
    }
    do
    {
      uint64_t v20 = *(void *)(v5 - 12);
      v5 -= 12;
      int v21 = *((_DWORD *)v5 + 2);
      *(void *)(v19 - 12) = v20;
      v19 -= 12;
      *(_DWORD *)(v19 + 8) = v21;
    }
    while (v5 != v12);
    int v5 = (char *)*v161;
LABEL_21:
    int64_t v8 = (char *)(v18 + 12);
    *(void *)(v152 + 40) = v19;
    *(void *)(v152 + 48) = v18 + 12;
    *(void *)(v152 + 56) = &v17[12 * v16];
    int v4 = v155;
    if (v5) {
      operator delete(v5);
    }
    goto LABEL_4;
  }
  uint64_t v22 = (uint64_t)v5;
LABEL_26:
  unint64_t v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v22] >> 2));
  if (v5 == (char *)v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v22, (uint64_t *)v5, (uint64_t)v166, v24, 1);
  unint64_t v26 = *(int **)(v3 + 40);
  uint64_t v145 = *(int **)(v3 + 48);
  if (v26 == v145) {
    return v25;
  }
  uint64_t v27 = v160;
  while (1)
  {
    uint64_t v28 = *v26;
    uint64_t v146 = v26;
    uint64_t v29 = *(void *)(v26 + 1);
    uint64_t v30 = *(void **)(v3 + 8);
    unint64_t v31 = *(int *)(v30[16] + 4 * v28);
    int v32 = *(_DWORD *)(v30[16] + 4 * v28);
    if (v31 != -1
      && ((*(void *)(*(void *)(*v30 + 24) + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v32 & 0x3F ^ 1u)) & 1) != 0)
    {
      goto LABEL_31;
    }
    int v33 = *(_DWORD *)(v30[10] + 4 * v28);
    if (v33 == -1)
    {
      int v34 = *(_DWORD *)(*(void *)(v3 + 104) + 4 * v28);
      uint64_t v35 = *(void *)(v30[13] + 8 * v28);
      if (v31 == -1) {
        goto LABEL_39;
      }
LABEL_38:
      if ((*(void *)(*(void *)(*v30 + 24) + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32)) {
        goto LABEL_39;
      }
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v27, v34, *(void *)(*(void *)(v3 + 16) + 12 * v34 + 4), v35);
      if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v27) <= v29) {
        goto LABEL_42;
      }
LABEL_126:
      operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
      LODWORD(v29) = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v27, v29);
      unint64_t v105 = *(void *)(*(void *)(v3 + 16) + 12 * (int)v29 + 4);
      uint64_t EnvelopeOf = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelopeOf(v27, v29);
      if ((int)v29 >= v4) {
        return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
      }
      uint64_t v29 = (int)v29;
      unint64_t v107 = 1 - EnvelopeOf;
      if (EnvelopeOf < (uint64_t)0x8000000000000003) {
        unint64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v163 = v107;
      unint64_t v159 = HIDWORD(v107);
      unint64_t v154 = v105;
      while (1)
      {
        int64_t v109 = *(void *)(*(void *)(v3 + 80)
                         + 32
                         * (int)operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeafFromEvent(v27, v29)+ 16);
        if (v109 < 1) {
          goto LABEL_132;
        }
        int v110 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        int v111 = *(_DWORD *)(*(void *)(v3 + 16) + 12 * v29);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v110, v111);
        int v112 = *(_DWORD *)(*((void *)v110 + 16) + 4 * v111);
        if (v112 != -1) {
          break;
        }
LABEL_157:
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v152 + 8), v111, v109, v105);
        int v132 = *(operations_research::sat::SchedulingConstraintHelper **)(v152 + 8);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v132, v111);
        LODWORD(v166[0]) = *(_DWORD *)(*((void *)v132 + 7) + 4 * v111) ^ 1;
        *(void *)((char *)v166 + 4) = v163;
        uint64_t v133 = v166[0];
        int v135 = (char *)*((void *)v132 + 49);
        unint64_t v134 = *((void *)v132 + 50);
        if ((unint64_t)v135 < v134)
        {
          *(void *)int v135 = v166[0];
          uint64_t v27 = v160;
          *((_DWORD *)v135 + 2) = v159;
          int v108 = v135 + 12;
        }
        else
        {
          int v136 = (unsigned char *)*((void *)v132 + 48);
          unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v136) >> 2) + 1;
          if (v137 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (void)v136) >> 2);
          if (2 * v138 > v137) {
            unint64_t v137 = 2 * v138;
          }
          if (v138 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v139 = 0x1555555555555555;
          }
          else {
            unint64_t v139 = v137;
          }
          if (v139)
          {
            if (v139 > 0x1555555555555555) {
              goto LABEL_176;
            }
            uint64_t v140 = (char *)operator new(12 * v139);
          }
          else
          {
            uint64_t v140 = 0;
          }
          uint64_t v141 = &v140[4 * ((v135 - v136) >> 2)];
          *(void *)uint64_t v141 = v133;
          *((_DWORD *)v141 + 2) = v159;
          uint64_t v142 = v141;
          if (v135 != v136)
          {
            uint64_t v27 = v160;
            do
            {
              uint64_t v143 = *(void *)(v135 - 12);
              v135 -= 12;
              int v144 = *((_DWORD *)v135 + 2);
              *(void *)(v142 - 12) = v143;
              v142 -= 12;
              *((_DWORD *)v142 + 2) = v144;
            }
            while (v135 != v136);
            int v135 = (char *)*((void *)v132 + 48);
            int v108 = v141 + 12;
            *((void *)v132 + 48) = v142;
            *((void *)v132 + 49) = v141 + 12;
            *((void *)v132 + 50) = &v140[12 * v139];
            if (!v135) {
              goto LABEL_131;
            }
LABEL_174:
            operator delete(v135);
            goto LABEL_131;
          }
          uint64_t v27 = v160;
          int v108 = v141 + 12;
          *((void *)v132 + 48) = v141;
          *((void *)v132 + 49) = v141 + 12;
          *((void *)v132 + 50) = &v140[12 * v139];
          if (v135) {
            goto LABEL_174;
          }
        }
LABEL_131:
        *((void *)v132 + 49) = v108;
        uint64_t v3 = v152;
LABEL_132:
        if (++v29 == v4) {
          return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
        }
      }
      int v113 = v112 ^ 1;
      uint64_t v115 = (int *)*((void *)v110 + 46);
      unint64_t v114 = *((void *)v110 + 47);
      if ((unint64_t)v115 < v114)
      {
        *uint64_t v115 = v113;
        uint64_t v116 = (uint64_t)(v115 + 1);
LABEL_156:
        *((void *)v110 + 46) = v116;
        goto LABEL_157;
      }
      int v117 = (int *)*((void *)v110 + 45);
      uint64_t v118 = v115 - v117;
      unint64_t v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62) {
        goto LABEL_178;
      }
      uint64_t v120 = v114 - (void)v117;
      if (v120 >> 1 > v119) {
        unint64_t v119 = v120 >> 1;
      }
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v157 = v119;
      if (v119)
      {
        if (v119 >> 62) {
          goto LABEL_176;
        }
        int v121 = operator new(4 * v119);
        int v122 = (int *)&v121[4 * v118];
        int *v122 = v113;
        uint64_t v116 = (uint64_t)(v122 + 1);
        if (v115 == v117) {
          goto LABEL_153;
        }
      }
      else
      {
        int v121 = 0;
        int v122 = (int *)(4 * v118);
        *(_DWORD *)(4 * v118) = v113;
        uint64_t v116 = 4 * v118 + 4;
        if (v115 == v117)
        {
LABEL_153:
          *((void *)v110 + 45) = v122;
          *((void *)v110 + 46) = v116;
          *((void *)v110 + 47) = &v121[4 * v157];
          if (v117) {
            operator delete(v117);
          }
          unint64_t v105 = v154;
          int v4 = v155;
          goto LABEL_156;
        }
      }
      unint64_t v123 = (char *)(v115 - 1) - (char *)v117;
      if (v123 < 0x2C) {
        goto LABEL_184;
      }
      if ((unint64_t)((char *)v117 - v121) < 0x20) {
        goto LABEL_184;
      }
      uint64_t v124 = (v123 >> 2) + 1;
      uint64_t v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v126 = &v115[v125 / 0xFFFFFFFFFFFFFFFCLL];
      int v122 = (int *)((char *)v122 - v125);
      int v127 = &v121[4 * v118 - 16];
      int64_t v128 = v115 - 4;
      uint64_t v129 = v124 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v130 = *(_OWORD *)v128;
        *(v127 - 1) = *((_OWORD *)v128 - 1);
        *int v127 = v130;
        v127 -= 2;
        v128 -= 8;
        v129 -= 8;
      }
      while (v129);
      uint64_t v115 = v126;
      if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_184:
        do
        {
          int v131 = *--v115;
          *--int v122 = v131;
        }
        while (v115 != v117);
      }
      goto LABEL_153;
    }
    int v34 = *(_DWORD *)(*(void *)(v3 + 104) + 4 * v28);
    uint64_t v35 = *(void *)(*(void *)(v30[1] + 40) + 12 * v33);
    if (v31 != -1) {
      goto LABEL_38;
    }
LABEL_39:
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v27, v34, *(void *)(*(void *)(v3 + 16) + 12 * v34 + 4), v35, v35);
    if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v27) > v29) {
      goto LABEL_126;
    }
LABEL_42:
    uint64_t v151 = v29;
    if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v27) > v29) {
      break;
    }
LABEL_31:
    unint64_t v26 = v146 + 3;
    if (v146 + 3 == v145) {
      return 1;
    }
  }
  while (2)
  {
    operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8));
    uint64_t v165 = 0;
    uint64_t v164 = 0;
    operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v27, v29, (int *)&v165 + 1, (int *)&v165, &v164);
    uint64_t v36 = *(void *)(v3 + 8);
    uint64_t v37 = *(void *)(v3 + 16);
    uint64_t v38 = *(int *)(v37 + 12 * (int)v165);
    int v39 = *(_DWORD *)(*(void *)(v36 + 80) + 4 * v38);
    if (v39 == -1) {
      int v40 = (unint64_t *)(*(void *)(v36 + 104) + 8 * v38);
    }
    else {
      int v40 = (unint64_t *)(*(void *)(*(void *)(v36 + 8) + 40) + 12 * v39);
    }
    unint64_t v41 = *v40;
    uint64_t v42 = SHIDWORD(v165);
    unint64_t v162 = *(void *)(v37 + 12 * SHIDWORD(v165) + 4);
    uint64_t v43 = v29 + ~v164;
    int64_t v44 = *v40 + v43;
    if (SHIDWORD(v165) >= v4)
    {
      uint64_t v83 = v29;
      unint64_t v84 = -v44;
      goto LABEL_98;
    }
    int64_t v149 = v41 + v43;
    uint64_t v150 = v38;
    int64_t v147 = -v44;
    unint64_t v148 = *v40;
    unint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 >= (uint64_t)0x8000000000000002) {
      unint64_t v45 = -v44;
    }
    unint64_t v158 = v45;
    unint64_t v156 = HIDWORD(v45);
    while (2)
    {
      int64_t v47 = *(void *)(*(void *)(v3 + 80)
                      + 32
                      * (int)operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeafFromEvent(v27, v42)+ 16);
      if (v47 >= 1)
      {
        uint64_t v48 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        int v49 = *(_DWORD *)(*(void *)(v3 + 16) + 12 * v42);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v48, v49);
        int v50 = *(_DWORD *)(*((void *)v48 + 16) + 4 * v49);
        if (v50 != -1)
        {
          int v51 = v50 ^ 1;
          int v53 = (int *)*((void *)v48 + 46);
          unint64_t v52 = *((void *)v48 + 47);
          if ((unint64_t)v53 < v52)
          {
            *int v53 = v51;
            uint64_t v54 = (uint64_t)(v53 + 1);
            goto LABEL_79;
          }
          uint64_t v55 = (int *)*((void *)v48 + 45);
          uint64_t v56 = v53 - v55;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
LABEL_178:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v58 = v52 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v153 = v57;
          if (v57)
          {
            if (v57 >> 62) {
              goto LABEL_176;
            }
            uint64_t v59 = operator new(4 * v57);
            int v60 = (int *)&v59[4 * v56];
            int *v60 = v51;
            uint64_t v54 = (uint64_t)(v60 + 1);
            if (v53 == v55) {
              goto LABEL_76;
            }
LABEL_70:
            unint64_t v61 = (char *)(v53 - 1) - (char *)v55;
            if (v61 < 0x2C) {
              goto LABEL_185;
            }
            if ((unint64_t)((char *)v55 - v59) < 0x20) {
              goto LABEL_185;
            }
            uint64_t v62 = (v61 >> 2) + 1;
            uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            int v64 = &v53[v63 / 0xFFFFFFFFFFFFFFFCLL];
            int v60 = (int *)((char *)v60 - v63);
            int v65 = &v59[4 * v56 - 16];
            unint64_t v66 = v53 - 4;
            uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v68 = *(_OWORD *)v66;
              *(v65 - 1) = *((_OWORD *)v66 - 1);
              *int v65 = v68;
              v65 -= 2;
              v66 -= 8;
              v67 -= 8;
            }
            while (v67);
            int v53 = v64;
            if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_185:
              do
              {
                int v69 = *--v53;
                *--int v60 = v69;
              }
              while (v53 != v55);
            }
          }
          else
          {
            uint64_t v59 = 0;
            int v60 = (int *)(4 * v56);
            *(_DWORD *)(4 * v56) = v51;
            uint64_t v54 = 4 * v56 + 4;
            if (v53 != v55) {
              goto LABEL_70;
            }
          }
LABEL_76:
          *((void *)v48 + 45) = v60;
          *((void *)v48 + 46) = v54;
          *((void *)v48 + 47) = &v59[4 * v153];
          if (v55) {
            operator delete(v55);
          }
          uint64_t v3 = v152;
LABEL_79:
          *((void *)v48 + 46) = v54;
        }
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v3 + 8), v49, v47, v162);
        uint64_t v70 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
        operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v70, v49);
        LODWORD(v166[0]) = *(_DWORD *)(*((void *)v70 + 7) + 4 * v49) ^ 1;
        *(void *)((char *)v166 + 4) = v158;
        uint64_t v71 = v166[0];
        uint64_t v73 = (char *)*((void *)v70 + 49);
        unint64_t v72 = *((void *)v70 + 50);
        if ((unint64_t)v73 < v72)
        {
          *(void *)uint64_t v73 = v166[0];
          int v4 = v155;
          *((_DWORD *)v73 + 2) = v156;
          uint64_t v46 = v73 + 12;
        }
        else
        {
          int v74 = (unsigned char *)*((void *)v70 + 48);
          unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v74) >> 2) + 1;
          int v4 = v155;
          if (v75 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (void)v74) >> 2);
          if (2 * v76 > v75) {
            unint64_t v75 = 2 * v76;
          }
          if (v76 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v77 = 0x1555555555555555;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            if (v77 > 0x1555555555555555) {
              goto LABEL_176;
            }
            uint64_t v78 = (char *)operator new(12 * v77);
          }
          else
          {
            uint64_t v78 = 0;
          }
          uint64_t v79 = &v78[4 * ((v73 - v74) >> 2)];
          *(void *)uint64_t v79 = v71;
          *((_DWORD *)v79 + 2) = v156;
          unint64_t v80 = v79;
          if (v73 != v74)
          {
            do
            {
              uint64_t v81 = *(void *)(v73 - 12);
              v73 -= 12;
              int v82 = *((_DWORD *)v73 + 2);
              *(void *)(v80 - 12) = v81;
              v80 -= 12;
              *((_DWORD *)v80 + 2) = v82;
            }
            while (v73 != v74);
            uint64_t v73 = (char *)*((void *)v70 + 48);
          }
          uint64_t v46 = v79 + 12;
          *((void *)v70 + 48) = v80;
          *((void *)v70 + 49) = v79 + 12;
          *((void *)v70 + 50) = &v78[12 * v77];
          if (v73) {
            operator delete(v73);
          }
        }
        *((void *)v70 + 49) = v46;
        uint64_t v27 = v160;
      }
      if (++v42 != v4) {
        continue;
      }
      break;
    }
    uint64_t v36 = *(void *)(v3 + 8);
    uint64_t v38 = v150;
    uint64_t v83 = v151;
    unint64_t v41 = v148;
    int64_t v44 = v149;
    unint64_t v84 = v147;
LABEL_98:
    operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason((void **)v36, v38, v41, v162);
    uint64_t v85 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
    operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v85, v38);
    unint64_t v86 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 >= (uint64_t)0x8000000000000002) {
      unint64_t v86 = v84;
    }
    LODWORD(v166[0]) = *(_DWORD *)(*((void *)v85 + 7) + 4 * v38) ^ 1;
    *(void *)((char *)v166 + 4) = v86;
    uint64_t v87 = v166[0];
    unint64_t v88 = HIDWORD(v86);
    unint64_t v90 = (char *)*((void *)v85 + 49);
    unint64_t v89 = *((void *)v85 + 50);
    if ((unint64_t)v90 < v89)
    {
      uint64_t v91 = v38;
      *(void *)unint64_t v90 = v166[0];
      *((_DWORD *)v90 + 2) = HIDWORD(v86);
      uint64_t v92 = v90 + 12;
      uint64_t v29 = v83;
      goto LABEL_120;
    }
    uint64_t v93 = (unsigned char *)*((void *)v85 + 48);
    unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v93) >> 2) + 1;
    if (v94 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (void)v93) >> 2);
    if (2 * v95 > v94) {
      unint64_t v94 = 2 * v95;
    }
    if (v95 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v96 = 0x1555555555555555;
    }
    else {
      unint64_t v96 = v94;
    }
    if (!v96)
    {
      uint64_t v97 = 0;
      goto LABEL_112;
    }
    if (v96 > 0x1555555555555555) {
LABEL_176:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v97 = (char *)operator new(12 * v96);
LABEL_112:
    uint64_t v98 = &v97[4 * ((v90 - v93) >> 2)];
    *(void *)uint64_t v98 = v87;
    *((_DWORD *)v98 + 2) = v88;
    uint64_t v99 = v98;
    if (v90 == v93)
    {
      uint64_t v29 = v151;
    }
    else
    {
      uint64_t v29 = v151;
      do
      {
        uint64_t v100 = *(void *)(v90 - 12);
        v90 -= 12;
        int v101 = *((_DWORD *)v90 + 2);
        *(void *)(v99 - 12) = v100;
        v99 -= 12;
        *((_DWORD *)v99 + 2) = v101;
      }
      while (v90 != v93);
      unint64_t v90 = (char *)*((void *)v85 + 48);
    }
    uint64_t v92 = v98 + 12;
    *((void *)v85 + 48) = v99;
    *((void *)v85 + 49) = v98 + 12;
    *((void *)v85 + 50) = &v97[12 * v96];
    uint64_t v3 = v152;
    if (v90) {
      operator delete(v90);
    }
    uint64_t v91 = v38;
LABEL_120:
    *((void *)v85 + 49) = v92;
    uint64_t v102 = *(operations_research::sat::SchedulingConstraintHelper **)(v3 + 8);
    unint64_t v103 = *(int *)(*((void *)v102 + 16) + 4 * v91);
    if (v103 != -1
      && ((*(void *)(*(void *)(*(void *)v102 + 24) + ((v103 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v103 & 0x3F ^ 1)) & 1) != 0
      || (operations_research::sat::SchedulingConstraintHelper::PushTaskAbsence(v102, v91) & 1) != 0)
    {
      uint64_t v27 = v160;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v160, v165);
      if (operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v160) <= v29) {
        goto LABEL_31;
      }
      continue;
    }
    return 0;
  }
}

uint64_t operations_research::sat::DisjunctiveDetectablePrecedences::Propagate(operations_research::sat::DisjunctiveDetectablePrecedences *this)
{
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 14), *((unsigned __int8 *)this + 104));
  *((void *)this + 11) = *((void *)this + 10);
  unint64_t v2 = (int)((uint64_t)(*(void *)(*((void *)this + 14) + 40) - *(void *)(*((void *)this + 14) + 32)) >> 2);
  char v42 = 0;
  std::vector<BOOL>::assign((char **)this + 7, v2, &v42);
  uint64_t v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = *((void *)this + 1);
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                                  + 14));
  uint64_t v6 = *(int **)started;
  int v5 = *(int **)(started + 8);
  if (*(int **)started != v5)
  {
    int64_t v7 = 0x8000000000000002;
    unint64_t v41 = *(int **)(started + 8);
    do
    {
      int v9 = *v6;
      int64_t v10 = *(void *)(v6 + 1);
      unint64_t v11 = (void *)*((void *)this + 14);
      unint64_t v12 = *(int *)(v11[16] + 4 * *v6);
      if (v12 != -1
        && ((*(void *)(*(void *)(*v11 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 & 0x3F ^ 1)) & 1) != 0)
      {
        int64_t v8 = v7;
      }
      else
      {
        int v13 = *(_DWORD *)(v11[10] + 4 * v9);
        if (v13 == -1)
        {
          unint64_t v15 = (uint64_t *)(v11[13] + 8 * v9);
          uint64_t v14 = *(void *)(v11[1] + 40);
        }
        else
        {
          uint64_t v14 = *(void *)(v11[1] + 40);
          unint64_t v15 = (uint64_t *)(v14 + 12 * v13);
        }
        uint64_t v16 = *v15;
        int64_t v8 = *v15 + v10;
        uint64_t v17 = (char *)*((void *)this + 2);
        if (*(void *)(v14 + 12 * *(int *)(v11[4] + 4 * v9)) < v7)
        {
          unint64_t v18 = *((void *)this + 3);
          if ((unint64_t)v17 < v18)
          {
            *(_DWORD *)uint64_t v17 = v9;
            *(void *)(v17 + 4) = v8;
            uint64_t v19 = v17 + 12;
LABEL_32:
            *((void *)this + 2) = v19;
            if (v7 <= v10) {
              int64_t v34 = v10;
            }
            else {
              int64_t v34 = v7;
            }
            int64_t v8 = v16 + v34;
            goto LABEL_4;
          }
          uint64_t v24 = (int *)*v3;
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*v3] >> 2);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v24) >> 2);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v28 = 0x1555555555555555;
          }
          else {
            unint64_t v28 = v26;
          }
          unint64_t v40 = v28;
          if (v28)
          {
            if (v28 > 0x1555555555555555) {
              goto LABEL_53;
            }
            uint64_t v29 = (char *)operator new(12 * v28);
            uint64_t v30 = (uint64_t)&v29[12 * v25];
            *(_DWORD *)uint64_t v30 = v9;
            *(void *)(v30 + 4) = v8;
            uint64_t v31 = v30;
            if (v17 != (char *)v24)
            {
LABEL_27:
              uint64_t v3 = (void *)((char *)this + 8);
              do
              {
                uint64_t v32 = *(void *)(v17 - 12);
                v17 -= 12;
                int v33 = *((_DWORD *)v17 + 2);
                *(void *)(v31 - 12) = v32;
                v31 -= 12;
                *(_DWORD *)(v31 + 8) = v33;
              }
              while (v17 != (char *)v24);
              uint64_t v17 = (char *)*((void *)this + 1);
              uint64_t v19 = (char *)(v30 + 12);
              *((void *)this + 1) = v31;
              *((void *)this + 2) = v30 + 12;
              *((void *)this + 3) = &v29[12 * v40];
              if (v17) {
LABEL_30:
              }
                operator delete(v17);
LABEL_31:
              int v5 = v41;
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v29 = 0;
            uint64_t v30 = 12 * v25;
            *(_DWORD *)uint64_t v30 = v9;
            *(void *)(v30 + 4) = v8;
            uint64_t v31 = 12 * v25;
            if (v17 != (char *)v24) {
              goto LABEL_27;
            }
          }
          uint64_t v3 = (void *)((char *)this + 8);
          uint64_t v19 = (char *)(v30 + 12);
          *((void *)this + 1) = v31;
          *((void *)this + 2) = v30 + 12;
          *((void *)this + 3) = &v29[12 * v40];
          if (v17) {
            goto LABEL_30;
          }
          goto LABEL_31;
        }
        uint64_t v20 = (int *)*v3;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*v3] >> 2) >= 2)
        {
          uint64_t result = operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow((char **)this);
          if (!result) {
            return result;
          }
          uint64_t v20 = (int *)*v3;
          int v5 = v41;
        }
        *((void *)this + 2) = v20;
        unint64_t v22 = *((void *)this + 3);
        if ((unint64_t)v20 >= v22)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v20) >> 2);
          uint64_t v36 = 2 * v35;
          if (2 * v35 <= 1) {
            uint64_t v36 = 1;
          }
          if (v35 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v37 = 0x1555555555555555;
          }
          else {
            unint64_t v37 = v36;
          }
          if (v37 > 0x1555555555555555) {
LABEL_53:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v38 = 12 * v37;
          int v39 = (char *)operator new(12 * v37);
          *(_DWORD *)int v39 = v9;
          *(void *)(v39 + 4) = v8;
          unint64_t v23 = v39 + 12;
          *((void *)this + 1) = v39;
          *((void *)this + 2) = v39 + 12;
          *((void *)this + 3) = &v39[v38];
          if (v20) {
            operator delete(v20);
          }
          int v5 = v41;
        }
        else
        {
          *uint64_t v20 = v9;
          *(void *)(v20 + 1) = v8;
          unint64_t v23 = v20 + 3;
        }
        *((void *)this + 2) = v23;
      }
LABEL_4:
      v6 += 3;
      int64_t v7 = v8;
    }
    while (v6 != v5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2) < 2) {
    return 1;
  }
  uint64_t result = operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow((char **)this);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t operations_research::sat::DisjunctiveDetectablePrecedences::PropagateSubwindow(char **this)
{
  uint64_t v1 = (operations_research::sat::DisjunctiveDetectablePrecedences *)this;
  uint64_t v3 = this[1];
  unint64_t v2 = this[2];
  int v4 = v3;
  if ((int)(-1431655765 * ((unint64_t)(v2 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v2 - v3) >> 2), v3, v2, 0);
  }
  else if (v2 - v3 >= 24)
  {
    int v5 = v2 - 12;
    if (v2 - 12 != v3)
    {
      int v4 = v2 - 12;
      uint64_t v6 = v2 - 12;
      do
      {
        uint64_t v7 = *(void *)(v6 - 12);
        v6 -= 12;
        int v8 = *((_DWORD *)v6 + 2);
        *(void *)int v192 = v7;
        *(_DWORD *)&v192[8] = v8;
        if (*((void *)v6 + 2) < *(uint64_t *)&v192[4])
        {
          int v9 = *((_DWORD *)v5 + 2);
          uint64_t v10 = *(void *)v5;
          *(void *)int v5 = *(void *)v6;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v6 + 2);
          *(void *)uint64_t v6 = v10;
          *((_DWORD *)v6 + 2) = v9;
          int v4 = v5;
        }
        int v5 = v6;
      }
      while (v6 != v3);
    }
    while (1)
    {
      unint64_t v11 = v4 + 12;
      if (v4 + 12 == v2) {
        break;
      }
      int v12 = *((_DWORD *)v4 + 3);
      uint64_t v13 = *((void *)v4 + 2);
      v4 += 12;
      int v14 = *((_DWORD *)v11 - 1);
      *(void *)int v192 = *(void *)(v11 - 12);
      *(_DWORD *)&v192[8] = v14;
      if (v13 < *(uint64_t *)&v192[4])
      {
        unint64_t v15 = v11;
        do
        {
          uint64_t v16 = *(void *)(v11 - 12);
          v11 -= 12;
          *(void *)unint64_t v15 = v16;
          *((_DWORD *)v15 + 2) = *((_DWORD *)v15 - 1);
          uint64_t v17 = *((void *)v15 - 3);
          int v18 = *((_DWORD *)v15 - 4);
          *(void *)int v192 = v17;
          *(_DWORD *)&v192[8] = v18;
          unint64_t v15 = v11;
        }
        while (v13 < *(uint64_t *)&v192[4]);
      }
      *(_DWORD *)unint64_t v11 = v12;
      *(void *)(v11 + 4) = v13;
    }
  }
  uint64_t v19 = (char *)*((void *)v1 + 4);
  int v21 = (int *)*((void *)v1 + 1);
  uint64_t v20 = (int *)*((void *)v1 + 2);
  uint64_t v22 = *((void *)v20 - 1);
  int v184 = (uint64_t *)((char *)v1 + 32);
  *((void *)v1 + 5) = v19;
  if (v21 == v20) {
    return 1;
  }
  int v191 = v1;
  do
  {
    while (1)
    {
      while (1)
      {
        int v23 = *v21;
        uint64_t v24 = (void *)*((void *)v1 + 14);
        uint64_t v25 = -*(void *)(*(void *)(v24[1] + 40) + 12 * (*(_DWORD *)(v24[4] + 4 * *v21) ^ 1));
        if (v22 > v25)
        {
          unint64_t v26 = *(int *)(v24[16] + 4 * v23);
          if (v26 == -1
            || ((*(void *)(*(void *)(*v24 + 24) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v24[16] + 4 * v23)) & 1) != 0)
          {
            break;
          }
        }
        uint64_t v1 = v191;
        v21 += 3;
        if (v21 == v20) {
          goto LABEL_42;
        }
      }
      unint64_t v27 = *((void *)v191 + 6);
      if ((unint64_t)v19 >= v27) {
        break;
      }
      *(_DWORD *)uint64_t v19 = v23;
      *(void *)(v19 + 4) = v25;
      uint64_t v1 = v191;
      *((void *)v191 + 5) = v19 + 12;
      v19 += 12;
      v21 += 3;
      if (v21 == v20) {
        goto LABEL_42;
      }
    }
    uint64_t v28 = *v184;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-*v184] >> 2);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v28) >> 2);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v32 = 0x1555555555555555;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x1555555555555555) {
        goto LABEL_184;
      }
      int v33 = (char *)operator new(12 * v32);
      uint64_t v34 = (uint64_t)&v33[12 * v29];
      *(_DWORD *)uint64_t v34 = v23;
      *(void *)(v34 + 4) = v25;
      uint64_t v35 = v34;
      if (v19 == (char *)v28)
      {
LABEL_40:
        uint64_t v1 = v191;
        uint64_t v38 = (char *)(v34 + 12);
        *((void *)v191 + 4) = v35;
        *((void *)v191 + 5) = v34 + 12;
        *((void *)v191 + 6) = &v33[12 * v32];
        if (v19) {
          goto LABEL_36;
        }
        goto LABEL_37;
      }
    }
    else
    {
      int v33 = 0;
      uint64_t v34 = 4 * ((uint64_t)&v19[-*v184] >> 2);
      *(_DWORD *)uint64_t v34 = v23;
      *(void *)(v34 + 4) = v25;
      uint64_t v35 = 12 * v29;
      if (v19 == (char *)v28) {
        goto LABEL_40;
      }
    }
    uint64_t v1 = v191;
    do
    {
      uint64_t v36 = *(void *)(v19 - 12);
      v19 -= 12;
      int v37 = *((_DWORD *)v19 + 2);
      *(void *)(v35 - 12) = v36;
      v35 -= 12;
      *(_DWORD *)(v35 + 8) = v37;
    }
    while (v19 != (char *)v28);
    uint64_t v19 = (char *)*v184;
    uint64_t v38 = (char *)(v34 + 12);
    *((void *)v191 + 4) = v35;
    *((void *)v191 + 5) = v34 + 12;
    *((void *)v191 + 6) = &v33[12 * v32];
    if (v19) {
LABEL_36:
    }
      operator delete(v19);
LABEL_37:
    *((void *)v1 + 5) = v38;
    uint64_t v19 = v38;
    v21 += 3;
  }
  while (v21 != v20);
LABEL_42:
  if ((char *)*v184 == v19) {
    return 1;
  }
  uint64_t v39 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(*v184, (uint64_t *)v19, (uint64_t)v192, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-*v184] >> 2)), 1);
  *((void *)v1 + 16) = *((void *)v1 + 15);
  *((_DWORD *)v1 + 36) = 0;
  unint64_t v40 = (int *)*((void *)v1 + 1);
  int v172 = (int *)*((void *)v1 + 2);
  if (v40 == v172) {
    return v39;
  }
  BOOL v41 = 0;
  unint64_t v42 = 0;
  uint64_t v43 = 0x8000000000000002;
  int v176 = (void **)((char *)v1 + 80);
  int v177 = (char *)v1 + 120;
  unint64_t v173 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v1 + 5) - *((void *)v1 + 4)) >> 2);
  uint64_t v44 = 0xFFFFFFFFLL;
  uint64_t v45 = (uint64_t)v1 + 120;
  while (2)
  {
    int v46 = *v40;
    uint64_t v179 = v43;
    int v175 = v40;
    if ((int)v42 >= (int)v173) {
      goto LABEL_84;
    }
    int v187 = *v40;
    uint64_t v47 = *(void *)(v40 + 1);
    unint64_t v48 = (int)v42;
    uint64_t v189 = v47;
    while (1)
    {
      uint64_t v56 = (unsigned int *)(*v184 + 12 * v48);
      if (v47 <= *(void *)(v56 + 1)) {
        break;
      }
      uint64_t v55 = *v56;
      if (((*(void *)(*((void *)v1 + 7) + (((unint64_t)(int)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
      {
        if (v44 != -1)
        {
          operations_research::sat::SchedulingConstraintHelper::ClearReason(*((operations_research::sat::SchedulingConstraintHelper **)v1
                                                                            + 14));
          operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v1 + 14), v44);
          operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v1 + 14), v55);
          operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)v1 + 14), v44, v55);
          operations_research::sat::SchedulingConstraintHelper::AddReasonForBeingBefore(*((void ***)v1 + 14), v55, v44);
          return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*((operations_research::sat::SchedulingConstraintHelper **)v1
                                                                                      + 14));
        }
        int v60 = (char *)*((void *)v1 + 11);
        unint64_t v59 = *((void *)v1 + 12);
        if ((unint64_t)v60 < v59)
        {
          *(_DWORD *)int v60 = v55;
          uint64_t v61 = (uint64_t)(v60 + 4);
          goto LABEL_80;
        }
        uint64_t v62 = (char *)*v176;
        uint64_t v63 = v60 - (unsigned char *)*v176;
        uint64_t v64 = v63 >> 2;
        unint64_t v65 = (v63 >> 2) + 1;
        if (v65 >> 62) {
          goto LABEL_188;
        }
        uint64_t v66 = v59 - (void)v62;
        if (v66 >> 1 > v65) {
          unint64_t v65 = v66 >> 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67)
        {
          if (v67 >> 62) {
            goto LABEL_184;
          }
          long long v68 = operator new(4 * v67);
          int v69 = &v68[4 * v64];
          _DWORD *v69 = v55;
          uint64_t v61 = (uint64_t)(v69 + 1);
          if (v60 == v62) {
            goto LABEL_77;
          }
LABEL_71:
          unint64_t v70 = v60 - 4 - v62;
          if (v70 < 0x2C) {
            goto LABEL_191;
          }
          if ((unint64_t)(v60 - &v68[v63]) < 0x20) {
            goto LABEL_191;
          }
          uint64_t v71 = (v70 >> 2) + 1;
          uint64_t v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v73 = &v60[-v72];
          int v69 = (_DWORD *)((char *)v69 - v72);
          int v74 = &v68[4 * v64 - 16];
          unint64_t v75 = v60 - 16;
          uint64_t v76 = v71 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            _OWORD *v74 = v77;
            v74 -= 2;
            v75 -= 32;
            v76 -= 8;
          }
          while (v76);
          int v60 = v73;
          if (v71 != (v71 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_191:
            do
            {
              int v78 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--int v69 = v78;
            }
            while (v60 != v62);
          }
        }
        else
        {
          long long v68 = 0;
          int v69 = (_DWORD *)(4 * v64);
          *(_DWORD *)(4 * v64) = v55;
          uint64_t v61 = 4 * v64 + 4;
          if (v60 != v62) {
            goto LABEL_71;
          }
        }
LABEL_77:
        uint64_t v79 = &v68[4 * v67];
        uint64_t v1 = v191;
        *((void *)v191 + 10) = v69;
        *((void *)v191 + 11) = v61;
        *((void *)v191 + 12) = v79;
        if (v62) {
          operator delete(v62);
        }
        uint64_t v45 = (uint64_t)v177;
        uint64_t v43 = v179;
LABEL_80:
        uint64_t v47 = v189;
        *((void *)v1 + 11) = v61;
        uint64_t v44 = v55;
        if (++v48 == (int)v173) {
          goto LABEL_81;
        }
        continue;
      }
      unint64_t v57 = (void *)*((void *)v1 + 14);
      int v58 = *(_DWORD *)(v57[10] + 4 * (int)v55);
      if (v58 == -1)
      {
        int v49 = (uint64_t *)(v57[13] + 8 * (int)v55);
        uint64_t v50 = *(void *)(v57[1] + 40);
      }
      else
      {
        uint64_t v50 = *(void *)(v57[1] + 40);
        int v49 = (uint64_t *)(v50 + 12 * v58);
      }
      uint64_t v51 = *v49;
      *(_DWORD *)int v192 = *v56;
      uint64_t v52 = 4 * (int)v55;
      uint64_t v53 = *(void *)(v50 + 12 * *(int *)(v57[4] + v52));
      uint64_t v54 = *(void *)(v50 + 12 * *(int *)(v57[7] + v52)) - v51;
      if (v53 > v54) {
        uint64_t v54 = v53;
      }
      *(void *)&v192[4] = v54;
      uint64_t v193 = v51;
      operations_research::sat::TaskSet::AddEntry(v45, (long long *)v192);
      BOOL v41 = 1;
      uint64_t v55 = v44;
      if (++v48 == (int)v173)
      {
LABEL_81:
        uint64_t v44 = v55;
        unint64_t v42 = v173;
        goto LABEL_83;
      }
    }
    unint64_t v42 = v48;
LABEL_83:
    int v46 = v187;
LABEL_84:
    unint64_t v80 = (char *)*((void *)v1 + 11);
    unint64_t v174 = v42;
    if (v44 != v46)
    {
      unint64_t v150 = *((void *)v1 + 12);
      if ((unint64_t)v80 < v150)
      {
        *(_DWORD *)unint64_t v80 = v46;
        v80 += 4;
        *((void *)v1 + 11) = v80;
        if (v44 == -1) {
          break;
        }
        goto LABEL_46;
      }
      uint64_t v151 = v44;
      uint64_t v152 = (char *)*v176;
      uint64_t v153 = v80 - (unsigned char *)*v176;
      uint64_t v154 = v153 >> 2;
      unint64_t v155 = (v153 >> 2) + 1;
      if (v155 >> 62) {
LABEL_188:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v156 = v150 - (void)v152;
      if (v156 >> 1 > v155) {
        unint64_t v155 = v156 >> 1;
      }
      if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v157 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v157 = v155;
      }
      if (v157)
      {
        if (v157 >> 62) {
LABEL_184:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        unint64_t v158 = (char *)*((void *)v1 + 11);
        unint64_t v159 = operator new(4 * v157);
        unint64_t v80 = v158;
        uint64_t v160 = &v159[4 * v154];
        _DWORD *v160 = v46;
        uint64_t v161 = (uint64_t)(v160 + 1);
        if (v80 == v152) {
          goto LABEL_176;
        }
      }
      else
      {
        unint64_t v159 = 0;
        uint64_t v160 = (_DWORD *)(4 * v154);
        *(_DWORD *)(4 * v154) = v46;
        uint64_t v161 = 4 * v154 + 4;
        if (v80 == v152) {
          goto LABEL_176;
        }
      }
      unint64_t v162 = v80 - 4 - v152;
      if (v162 < 0x2C) {
        goto LABEL_192;
      }
      if ((unint64_t)(v80 - &v159[v153]) < 0x20) {
        goto LABEL_192;
      }
      uint64_t v163 = (v162 >> 2) + 1;
      uint64_t v164 = 4 * (v163 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v165 = &v80[-v164];
      uint64_t v160 = (_DWORD *)((char *)v160 - v164);
      uint64_t v166 = &v159[4 * v154 - 16];
      int v167 = v80 - 16;
      uint64_t v168 = v163 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v169 = *(_OWORD *)v167;
        *(v166 - 1) = *((_OWORD *)v167 - 1);
        *uint64_t v166 = v169;
        v166 -= 2;
        v167 -= 32;
        v168 -= 8;
      }
      while (v168);
      unint64_t v80 = v165;
      if (v163 != (v163 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_192:
        do
        {
          int v170 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--uint64_t v160 = v170;
        }
        while (v80 != v152);
      }
LABEL_176:
      *((void *)v1 + 10) = v160;
      *((void *)v1 + 11) = v161;
      *((void *)v1 + 12) = &v159[4 * v157];
      if (v152) {
        operator delete(v152);
      }
      uint64_t v45 = (uint64_t)v177;
      uint64_t v43 = v179;
      uint64_t v44 = v151;
      unint64_t v42 = v174;
      *((void *)v1 + 11) = v161;
      unint64_t v80 = (char *)v161;
      if (v44 == -1) {
        break;
      }
LABEL_46:
      unint64_t v40 = v175 + 3;
      if (v175 + 3 == v172) {
        return 1;
      }
      continue;
    }
    break;
  }
  uint64_t v81 = (int *)*v176;
  if (*v176 == v80)
  {
LABEL_45:
    *((void *)v1 + 11) = *((void *)v1 + 10);
    unint64_t v42 = v174;
    goto LABEL_46;
  }
  int v183 = v80;
  while (1)
  {
    unint64_t v185 = *v81;
    *(void *)(*((void *)v1 + 7) + ((v185 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v81;
    if (v41)
    {
      uint64_t v88 = *((void *)v1 + 15);
      unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v1 + 16) - v88) >> 2);
      int v90 = *((_DWORD *)v1 + 36);
      uint64_t v43 = 0x8000000000000002;
      if (v90 < (int)v89)
      {
        uint64_t v91 = (uint64_t *)(v88 + 20 * v90 + 12);
        uint64_t v92 = (int)v89 - (uint64_t)v90;
        do
        {
          while (1)
          {
            uint64_t v94 = *(v91 - 1);
            if (v94 >= v43) {
              break;
            }
            uint64_t v93 = *v91;
            uint64_t v91 = (uint64_t *)((char *)v91 + 20);
            v43 += v93;
            ++v90;
            if (!--v92) {
              goto LABEL_98;
            }
          }
          *((_DWORD *)v1 + 36) = v90;
          uint64_t v95 = *v91;
          uint64_t v91 = (uint64_t *)((char *)v91 + 20);
          uint64_t v43 = v95 + v94;
          ++v90;
          --v92;
        }
        while (v92);
      }
    }
LABEL_98:
    unint64_t v96 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)v1 + 14);
    unint64_t v97 = v185;
    if (v43 > *(void *)(*(void *)(*((void *)v96 + 1) + 40) + 12 * *(int *)(*((void *)v96 + 4) + 4 * v185)))
    {
      int v181 = v81;
      unsigned int v182 = v44;
      unint64_t v98 = *((int *)v1 + 36);
      operations_research::sat::SchedulingConstraintHelper::ClearReason(v96);
      uint64_t v99 = (void *)*((void *)v1 + 14);
      uint64_t v100 = *(void *)(v99[1] + 40);
      int v101 = *(_DWORD *)(v99[10] + 4 * v185);
      if (v101 == -1) {
        uint64_t v102 = (void *)(v99[13] + 8 * v185);
      }
      else {
        uint64_t v102 = (void *)(v100 + 12 * v101);
      }
      uint64_t v103 = *(void *)(v100 + 12 * *(int *)(v99[4] + 4 * v185));
      uint64_t v104 = *(void *)(v100 + 12 * *(int *)(v99[7] + 4 * v185)) - *v102;
      if (v103 > v104) {
        uint64_t v104 = v103;
      }
      int64_t v105 = *v102 + v104;
      uint64_t v106 = *((void *)v1 + 15);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v1 + 16) - v106) >> 2) > v98)
      {
        int64_t v178 = v105;
        uint64_t v180 = v43;
        unint64_t v107 = 1 - v105;
        if (v105 < (uint64_t)0x8000000000000003) {
          unint64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
        }
        unint64_t v188 = v107;
        unint64_t v190 = *(void *)(v106 + 20 * (int)v98 + 4);
        unint64_t v186 = HIDWORD(v107);
        while (1)
        {
          int v109 = *(_DWORD *)(v106 + 20 * v98);
          int v110 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)v1 + 14);
          operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v110, v109);
          int v111 = *(_DWORD *)(*((void *)v110 + 16) + 4 * v109);
          if (v111 != -1) {
            break;
          }
LABEL_131:
          operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)v1 + 14), v109, *(void *)(*((void *)v1 + 15) + 20 * v98 + 12), v190);
          int v132 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)v1 + 14);
          operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v132, v109);
          *(_DWORD *)int v192 = *(_DWORD *)(*((void *)v132 + 4) + 4 * v109) ^ 1;
          *(void *)&v192[4] = v188;
          uint64_t v133 = *(void *)v192;
          int v135 = (char *)*((void *)v132 + 49);
          unint64_t v134 = *((void *)v132 + 50);
          if ((unint64_t)v135 < v134)
          {
            *(void *)int v135 = *(void *)v192;
            *((_DWORD *)v135 + 2) = v186;
            int v108 = v135 + 12;
          }
          else
          {
            int v136 = (unsigned char *)*((void *)v132 + 48);
            unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v136) >> 2) + 1;
            if (v137 > 0x1555555555555555) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (void)v136) >> 2);
            if (2 * v138 > v137) {
              unint64_t v137 = 2 * v138;
            }
            if (v138 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v139 = 0x1555555555555555;
            }
            else {
              unint64_t v139 = v137;
            }
            if (v139)
            {
              if (v139 > 0x1555555555555555) {
                goto LABEL_184;
              }
              uint64_t v140 = (char *)operator new(12 * v139);
            }
            else
            {
              uint64_t v140 = 0;
            }
            uint64_t v141 = &v140[4 * ((v135 - v136) >> 2)];
            *(void *)uint64_t v141 = v133;
            *((_DWORD *)v141 + 2) = v186;
            uint64_t v142 = v141;
            if (v135 != v136)
            {
              do
              {
                uint64_t v143 = *(void *)(v135 - 12);
                v135 -= 12;
                int v144 = *((_DWORD *)v135 + 2);
                *(void *)(v142 - 12) = v143;
                v142 -= 12;
                *((_DWORD *)v142 + 2) = v144;
              }
              while (v135 != v136);
              int v135 = (char *)*((void *)v132 + 48);
            }
            int v108 = v141 + 12;
            *((void *)v132 + 48) = v142;
            *((void *)v132 + 49) = v141 + 12;
            *((void *)v132 + 50) = &v140[12 * v139];
            if (v135) {
              operator delete(v135);
            }
          }
          *((void *)v132 + 49) = v108;
          ++v98;
          uint64_t v106 = *((void *)v1 + 15);
          if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v1 + 16) - v106) >> 2) <= v98)
          {
            uint64_t v99 = (void *)*((void *)v1 + 14);
            uint64_t v45 = (uint64_t)v177;
            int64_t v105 = v178;
            uint64_t v43 = v180;
            goto LABEL_152;
          }
        }
        int v112 = v111 ^ 1;
        unint64_t v114 = (int *)*((void *)v110 + 46);
        unint64_t v113 = *((void *)v110 + 47);
        if ((unint64_t)v114 < v113)
        {
          *unint64_t v114 = v112;
          uint64_t v115 = (uint64_t)(v114 + 1);
LABEL_130:
          *((void *)v110 + 46) = v115;
          uint64_t v1 = v191;
          goto LABEL_131;
        }
        uint64_t v116 = (int *)*((void *)v110 + 45);
        uint64_t v117 = v114 - v116;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v119 = v113 - (void)v116;
        if (v119 >> 1 > v118) {
          unint64_t v118 = v119 >> 1;
        }
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v118;
        }
        if (v120)
        {
          if (v120 >> 62) {
            goto LABEL_184;
          }
          int v121 = operator new(4 * v120);
          int v122 = (int *)&v121[4 * v117];
          int *v122 = v112;
          uint64_t v115 = (uint64_t)(v122 + 1);
          if (v114 != v116) {
            goto LABEL_122;
          }
LABEL_149:
          *((void *)v110 + 45) = v122;
          *((void *)v110 + 46) = v115;
          *((void *)v110 + 47) = &v121[4 * v120];
          if (!v116) {
            goto LABEL_130;
          }
        }
        else
        {
          int v121 = 0;
          int v122 = (int *)(4 * v117);
          *(_DWORD *)(4 * v117) = v112;
          uint64_t v115 = 4 * v117 + 4;
          if (v114 == v116) {
            goto LABEL_149;
          }
LABEL_122:
          unint64_t v123 = (char *)(v114 - 1) - (char *)v116;
          if (v123 < 0x2C) {
            goto LABEL_193;
          }
          if ((unint64_t)((char *)v116 - v121) < 0x20) {
            goto LABEL_193;
          }
          uint64_t v124 = (v123 >> 2) + 1;
          uint64_t v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v126 = &v114[v125 / 0xFFFFFFFFFFFFFFFCLL];
          int v122 = (int *)((char *)v122 - v125);
          int v127 = &v121[4 * v117 - 16];
          int64_t v128 = v114 - 4;
          uint64_t v129 = v124 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v130 = *(_OWORD *)v128;
            *(v127 - 1) = *((_OWORD *)v128 - 1);
            *int v127 = v130;
            v127 -= 2;
            v128 -= 8;
            v129 -= 8;
          }
          while (v129);
          unint64_t v114 = v126;
          if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_193:
            do
            {
              int v131 = *--v114;
              *--int v122 = v131;
            }
            while (v114 != v116);
          }
          *((void *)v110 + 45) = v122;
          *((void *)v110 + 46) = v115;
          *((void *)v110 + 47) = &v121[4 * v120];
          if (!v116) {
            goto LABEL_130;
          }
        }
        operator delete(v116);
        goto LABEL_130;
      }
LABEL_152:
      unint64_t v97 = v185;
      operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(v99, v185, v105);
      char started = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*((unint64_t **)v1 + 14), v185, v43);
      uint64_t v44 = v182;
      unint64_t v80 = v183;
      uint64_t v81 = v181;
      if ((started & 1) == 0) {
        return 0;
      }
    }
    BOOL v41 = v97 == v44;
    if (v97 == v44)
    {
      unint64_t v146 = v97;
      int64_t v147 = (void *)*((void *)v1 + 14);
      int v148 = *(_DWORD *)(v147[10] + 4 * v97);
      int64_t v149 = v81;
      if (v148 == -1)
      {
        uint64_t v83 = (uint64_t *)(v147[13] + 8 * v146);
        uint64_t v82 = *(void *)(v147[1] + 40);
      }
      else
      {
        uint64_t v82 = *(void *)(v147[1] + 40);
        uint64_t v83 = (uint64_t *)(v82 + 12 * v148);
      }
      uint64_t v84 = *v83;
      *(_DWORD *)int v192 = v44;
      uint64_t v85 = 4 * v146;
      uint64_t v86 = *(void *)(v82 + 12 * *(int *)(v147[4] + v85));
      uint64_t v87 = *(void *)(v82 + 12 * *(int *)(v147[7] + v85)) - v84;
      if (v86 > v87) {
        uint64_t v87 = v86;
      }
      *(void *)&v192[4] = v87;
      uint64_t v193 = v84;
      operations_research::sat::TaskSet::AddEntry(v45, (long long *)v192);
      uint64_t v44 = 0xFFFFFFFFLL;
      unint64_t v80 = v183;
      uint64_t v81 = v149;
    }
    if (++v81 == (int *)v80) {
      goto LABEL_45;
    }
  }
}

uint64_t operations_research::sat::DisjunctivePrecedences::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[2], *((unsigned __int8 *)this + 8));
  unint64_t v2 = this + 5;
  this[6] = this[5];
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[2]);
  int v4 = *(int **)started;
  int v5 = *(int **)(started + 8);
  if (*(int **)started != v5)
  {
    uint64_t v6 = this[2];
    int64_t v7 = 0x8000000000000002;
    unint64_t v40 = *(int **)(started + 8);
    while (1)
    {
      int v9 = *v4;
      int64_t v10 = *(void *)(v4 + 1);
      unint64_t v11 = *(int *)(*((void *)v6 + 16) + 4 * *v4);
      if (v11 != -1
        && ((*(void *)(*(void *)(*(void *)v6 + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        goto LABEL_5;
      }
      uint64_t v12 = v9;
      uint64_t v13 = this[6];
      if (v10 >= v7) {
        break;
      }
      int v14 = this[7];
      if (v13 >= v14)
      {
        uint64_t v20 = (_DWORD **)v2;
        int v21 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v2) >> 2);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v21) >> 2);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v25 = 0x1555555555555555;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          if (v25 > 0x1555555555555555) {
            goto LABEL_50;
          }
          unint64_t v26 = (char *)operator new(12 * v25);
        }
        else
        {
          unint64_t v26 = 0;
        }
        uint64_t v34 = &v26[12 * v22];
        *(_DWORD *)uint64_t v34 = v9;
        *(void *)(v34 + 4) = v10;
        uint64_t v35 = (operations_research::sat::SchedulingConstraintHelper *)v34;
        unint64_t v2 = v20;
        if (v13 != v21)
        {
          do
          {
            uint64_t v36 = *(void *)((char *)v13 - 12);
            uint64_t v13 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v13 - 12);
            int v37 = *((_DWORD *)v13 + 2);
            *(void *)((char *)v35 - 12) = v36;
            uint64_t v35 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v35 - 12);
            *((_DWORD *)v35 + 2) = v37;
          }
          while (v13 != v21);
          uint64_t v13 = (operations_research::sat::SchedulingConstraintHelper *)*v20;
        }
        int v5 = v40;
        uint64_t v38 = (operations_research::sat::SchedulingConstraintHelper *)&v26[12 * v25];
        uint64_t v39 = (operations_research::sat::SchedulingConstraintHelper *)(v34 + 12);
        this[5] = v35;
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)(v34 + 12);
        this[7] = v38;
        if (v13) {
          operator delete(v13);
        }
        uint64_t v12 = v9;
        this[6] = v39;
        uint64_t v6 = this[2];
        int v15 = *(_DWORD *)(*((void *)v6 + 10) + 4 * v9);
        if (v15 == -1)
        {
LABEL_45:
          int v8 = (void *)(*((void *)v6 + 13) + 8 * v12);
          goto LABEL_4;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v13 = v9;
        *(void *)((char *)v13 + 4) = v10;
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v13 + 12);
        uint64_t v6 = this[2];
        int v15 = *(_DWORD *)(*((void *)v6 + 10) + 4 * v9);
        if (v15 == -1) {
          goto LABEL_45;
        }
      }
      int v8 = (void *)(*(void *)(*((void *)v6 + 1) + 40) + 12 * v15);
LABEL_4:
      v7 += *v8;
LABEL_5:
      v4 += 3;
      if (v4 == v5) {
        goto LABEL_46;
      }
    }
    uint64_t v16 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *v2) >> 2) >= 2)
    {
      uint64_t result = operations_research::sat::DisjunctivePrecedences::PropagateSubwindow((operations_research::sat::DisjunctivePrecedences *)this);
      if (!result) {
        return result;
      }
      uint64_t v16 = (operations_research::sat::SchedulingConstraintHelper *)*v2;
      uint64_t v12 = v9;
    }
    this[6] = v16;
    int v18 = this[7];
    if (v16 >= v18)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 2);
      uint64_t v28 = 2 * v27;
      if (2 * v27 <= 1) {
        uint64_t v28 = 1;
      }
      if (v27 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v29 = 0x1555555555555555;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29 > 0x1555555555555555) {
LABEL_50:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v30 = v12;
      uint64_t v31 = 12 * v29;
      unint64_t v32 = (char *)operator new(12 * v29);
      *(_DWORD *)unint64_t v32 = v9;
      *(void *)(v32 + 4) = v10;
      int v33 = (operations_research::sat::SchedulingConstraintHelper *)(v32 + 12);
      this[5] = (operations_research::sat::SchedulingConstraintHelper *)v32;
      this[6] = (operations_research::sat::SchedulingConstraintHelper *)(v32 + 12);
      this[7] = (operations_research::sat::SchedulingConstraintHelper *)&v32[v31];
      if (v16) {
        operator delete(v16);
      }
      uint64_t v12 = v30;
      this[6] = v33;
      uint64_t v6 = this[2];
      int v19 = *(_DWORD *)(*((void *)v6 + 10) + 4 * v30);
      if (v19 != -1) {
        goto LABEL_17;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v16 = v9;
      *(void *)((char *)v16 + 4) = v10;
      this[6] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v16 + 12);
      uint64_t v6 = this[2];
      int v19 = *(_DWORD *)(*((void *)v6 + 10) + 4 * v12);
      if (v19 != -1)
      {
LABEL_17:
        int v8 = (void *)(*(void *)(*((void *)v6 + 1) + 40) + 12 * v19);
LABEL_37:
        int64_t v7 = v10;
        goto LABEL_4;
      }
    }
    int v8 = (void *)(*((void *)v6 + 13) + 8 * v12);
    goto LABEL_37;
  }
LABEL_46:
  if (0xAAAAAAAAAAAAAAABLL * ((this[6] - this[5]) >> 2) < 2) {
    return 1;
  }
  uint64_t result = operations_research::sat::DisjunctivePrecedences::PropagateSubwindow((operations_research::sat::DisjunctivePrecedences *)this);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t operations_research::sat::DisjunctivePrecedences::PropagateSubwindow(operations_research::sat::DisjunctivePrecedences *this)
{
  unint64_t v2 = (char *)*((void *)this + 8);
  *((void *)this + 9) = v2;
  uint64_t v3 = (int *)*((void *)this + 5);
  int v4 = (int *)*((void *)this + 6);
  int v111 = (void **)((char *)this + 64);
  while (v3 != v4)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = *(void *)(*((void *)this + 2) + 56);
    unint64_t v8 = *((void *)this + 10);
    if ((unint64_t)v2 < v8)
    {
      *(_DWORD *)unint64_t v2 = *(_DWORD *)(v7 + 4 * v6);
      uint64_t v5 = (uint64_t)(v2 + 4);
      goto LABEL_3;
    }
    int v9 = (char *)*v111;
    uint64_t v10 = v2 - (unsigned char *)*v111;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
LABEL_109:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v15 = operator new(4 * v14);
      uint64_t v16 = &v15[4 * v11];
      *uint64_t v16 = *(_DWORD *)(v7 + 4 * v6);
      uint64_t v5 = (uint64_t)(v16 + 1);
      if (v2 == v9) {
        goto LABEL_29;
      }
    }
    else
    {
      int v15 = 0;
      uint64_t v16 = (_DWORD *)(4 * v11);
      *(_DWORD *)(4 * v11) = *(_DWORD *)(v7 + 4 * v6);
      uint64_t v5 = 4 * v11 + 4;
      if (v2 == v9) {
        goto LABEL_29;
      }
    }
    unint64_t v17 = v2 - 4 - v9;
    if (v17 >= 0xBC)
    {
      if (&v15[v10 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v10 - 4])
      {
        int v18 = v2;
      }
      else if (&v2[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v2 - 4)
      {
        int v18 = v2;
      }
      else if ((unint64_t)(v2 - &v15[v10]) >= 0x20)
      {
        uint64_t v19 = (v17 >> 2) + 1;
        uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        int v18 = &v2[-v20];
        uint64_t v16 = (_DWORD *)((char *)v16 - v20);
        int v21 = &v15[4 * v11 - 16];
        unint64_t v22 = v2 - 16;
        uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *int v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
      }
      else
      {
        int v18 = v2;
      }
    }
    else
    {
      int v18 = v2;
    }
    do
    {
      int v25 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--uint64_t v16 = v25;
    }
    while (v18 != v9);
LABEL_29:
    *((void *)this + 8) = v16;
    *((void *)this + 9) = v5;
    *((void *)this + 10) = &v15[4 * v14];
    if (v9) {
      operator delete(v9);
    }
LABEL_3:
    *((void *)this + 9) = v5;
    v3 += 3;
    unint64_t v2 = (char *)v5;
  }
  unint64_t v26 = (uint64_t *)v111;
  int v112 = (void *)((char *)this + 144);
  operations_research::sat::PrecedencesPropagator::ComputePrecedences(*((void **)this + 4), v26, (uint64_t)this + 144);
  uint64_t v27 = (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2;
  int v28 = -858993459 * v27;
  if (-858993459 * (int)v27 < 1) {
    return 1;
  }
  int v29 = 0;
  int v109 = (void **)((char *)this + 88);
  uint64_t v110 = v28;
  int v102 = -858993459 * v27;
  while (2)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *((void *)this + 18) + 20 * v29;
    unsigned int v32 = *(_DWORD *)(v31 + 4);
    int v33 = (char *)*((void *)this + 11);
    *((void *)this + 12) = v33;
    *((_DWORD *)this + 28) = 0;
    uint64_t v34 = *(void *)(v31 + 12);
    if (v29 + 1 > v28) {
      int v35 = v29 + 1;
    }
    else {
      int v35 = v28;
    }
    int v105 = v35;
    uint64_t v106 = (int)v32;
    uint64_t v103 = v30;
    unsigned int v108 = v32;
    while (2)
    {
      if (*(_DWORD *)(*v112 + 20 * v30 + 4) == v32)
      {
        uint64_t v36 = (int *)(*v112 + 20 * v30);
        uint64_t v37 = *((void *)this + 5) + 12 * *v36;
        int v38 = *(_DWORD *)v37;
        uint64_t v39 = *(void *)(v36 + 3);
        if (v39 < v34) {
          uint64_t v34 = v39;
        }
        unint64_t v40 = (void *)*((void *)this + 2);
        int v41 = *(_DWORD *)(v40[10] + 4 * v38);
        if (v41 == -1)
        {
          uint64_t v42 = *(void *)(v37 + 4);
          uint64_t v43 = *(void *)(v40[13] + 8 * v38);
          unint64_t v44 = *((void *)this + 13);
          if ((unint64_t)v33 < v44)
          {
LABEL_39:
            *(_DWORD *)int v33 = v38;
            *(void *)(v33 + 4) = v42;
            *(void *)(v33 + 12) = v43;
            v33 += 20;
            *((void *)this + 12) = v33;
            if (++v30 >= v110) {
              goto LABEL_67;
            }
            continue;
          }
        }
        else
        {
          uint64_t v42 = *(void *)(v37 + 4);
          uint64_t v43 = *(void *)(*(void *)(v40[1] + 40) + 12 * v41);
          unint64_t v44 = *((void *)this + 13);
          if ((unint64_t)v33 < v44) {
            goto LABEL_39;
          }
        }
        uint64_t v45 = (char *)*v109;
        unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((v33 - (unsigned char *)*v109) >> 2);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (void)v45) >> 2);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x666666666666666) {
          unint64_t v49 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (v49 > 0xCCCCCCCCCCCCCCCLL) {
            goto LABEL_109;
          }
          uint64_t v50 = (char *)operator new(20 * v49);
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = &v50[20 * v46];
        *(_DWORD *)uint64_t v51 = v38;
        *(void *)(v51 + 4) = v42;
        *(void *)(v51 + 12) = v43;
        if (v33 == v45)
        {
          uint64_t v54 = v33;
          int v33 = v51 + 20;
          *((void *)this + 11) = v51;
          *((void *)this + 12) = v51 + 20;
          *((void *)this + 13) = &v50[20 * v49];
          if (v54) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v52 = &v50[20 * v46];
          do
          {
            long long v53 = *(_OWORD *)(v33 - 20);
            *((_DWORD *)v52 - 1) = *((_DWORD *)v33 - 1);
            *(_OWORD *)(v52 - 20) = v53;
            v52 -= 20;
            v33 -= 20;
          }
          while (v33 != v45);
          uint64_t v54 = *v109;
          int v33 = v51 + 20;
          *((void *)this + 11) = v52;
          *((void *)this + 12) = v51 + 20;
          *((void *)this + 13) = &v50[20 * v49];
          if (v54) {
LABEL_61:
          }
            operator delete(v54);
        }
        unsigned int v32 = v108;
        *((void *)this + 12) = v33;
        if (++v30 >= v110) {
          goto LABEL_67;
        }
        continue;
      }
      break;
    }
    int v105 = v30;
LABEL_67:
    uint64_t v55 = (void *)*((void *)this + 3);
    unint64_t v56 = *(int *)(v55[51] + 4 * v106);
    if (v56 != -1
      && ((*(void *)(*(void *)(v55[117] + 24) + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56) & 1) != 0)
    {
      int v29 = v105;
      goto LABEL_34;
    }
    uint64_t v57 = *((void *)this + 11);
    unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v33[-v57] >> 2);
    int v59 = *((_DWORD *)this + 28);
    int64_t v60 = 0x8000000000000002;
    int v29 = v105;
    if (v59 < (int)v58)
    {
      uint64_t v61 = (uint64_t *)(v57 + 20 * v59 + 12);
      uint64_t v62 = (int)v58 - (uint64_t)v59;
      int64_t v60 = 0x8000000000000002;
      do
      {
        while (1)
        {
          int64_t v64 = *(v61 - 1);
          if (v64 >= v60) {
            break;
          }
          uint64_t v63 = *v61;
          uint64_t v61 = (uint64_t *)((char *)v61 + 20);
          v60 += v63;
          ++v59;
          if (!--v62) {
            goto LABEL_75;
          }
        }
        *((_DWORD *)this + 28) = v59;
        uint64_t v65 = *v61;
        uint64_t v61 = (uint64_t *)((char *)v61 + 20);
        int64_t v60 = v65 + v64;
        ++v59;
        --v62;
      }
      while (v62);
    }
LABEL_75:
    if (v60 + v34 <= *(void *)(v55[5] + 12 * (int)v106))
    {
LABEL_34:
      int v28 = v102;
      if (v29 >= v102) {
        return 1;
      }
      continue;
    }
    break;
  }
  int64_t v101 = v60 + v34;
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                    + 2));
  if ((int)v103 < v105)
  {
    uint64_t v66 = *((void *)this + 5);
    uint64_t v67 = *((void *)this + 15);
    long long v68 = (int *)(*((void *)this + 18) + 20 * (int)v103 + 8);
    uint64_t v69 = v105 - v103;
    do
    {
      uint64_t v70 = *(int *)(v66 + 12 * *(v68 - 2));
      int v71 = *v68;
      v68 += 5;
      *(_DWORD *)(v67 + 4 * v70) = v71;
      --v69;
    }
    while (v69);
  }
  unint64_t v72 = *((int *)this + 28);
  uint64_t v73 = *((void *)this + 11);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v73) >> 2) > v72)
  {
    unint64_t v74 = *(void *)(v73 + 20 * (int)v72 + 4);
    unint64_t v104 = v74;
    while (1)
    {
      int v76 = *(_DWORD *)(v73 + 20 * v72);
      long long v77 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 2);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v77, v76);
      int v78 = *(_DWORD *)(*((void *)v77 + 16) + 4 * v76);
      if (v78 == -1) {
        goto LABEL_83;
      }
      int v79 = v78 ^ 1;
      uint64_t v81 = (int *)*((void *)v77 + 46);
      unint64_t v80 = *((void *)v77 + 47);
      if ((unint64_t)v81 >= v80) {
        break;
      }
      int *v81 = v79;
      uint64_t v75 = (uint64_t)(v81 + 1);
LABEL_82:
      *((void *)v77 + 46) = v75;
LABEL_83:
      operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)this + 2), v76, *(void *)(*((void *)this + 11) + 20 * v72 + 12), v74);
      operations_research::sat::PrecedencesPropagator::AddPrecedenceReason(*((void *)this + 4), *(_DWORD *)(*((void *)this + 15) + 4 * v76), v34, *((void *)this + 2) + 360, (char **)(*((void *)this + 2) + 384));
      ++v72;
      uint64_t v73 = *((void *)this + 11);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v73) >> 2) <= v72) {
        goto LABEL_33;
      }
    }
    uint64_t v82 = (int *)*((void *)v77 + 45);
    uint64_t v83 = v81 - v82;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v85 = v80 - (void)v82;
    if (v85 >> 1 > v84) {
      unint64_t v84 = v85 >> 1;
    }
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v107 = v84;
    if (v84)
    {
      if (v84 >> 62) {
        goto LABEL_109;
      }
      uint64_t v86 = operator new(4 * v84);
      uint64_t v87 = (int *)&v86[4 * v83];
      *uint64_t v87 = v79;
      uint64_t v75 = (uint64_t)(v87 + 1);
      if (v81 != v82) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v86 = 0;
      uint64_t v87 = (int *)(4 * v83);
      *(_DWORD *)(4 * v83) = v79;
      uint64_t v75 = 4 * v83 + 4;
      if (v81 != v82)
      {
LABEL_94:
        unint64_t v88 = (char *)(v81 - 1) - (char *)v82;
        unint64_t v89 = v107;
        if (v88 < 0x2C) {
          goto LABEL_114;
        }
        if ((unint64_t)((char *)v82 - v86) < 0x20) {
          goto LABEL_114;
        }
        uint64_t v90 = (v88 >> 2) + 1;
        uint64_t v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v92 = &v81[v91 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v87 = (int *)((char *)v87 - v91);
        uint64_t v93 = &v86[4 * v83 - 16];
        uint64_t v94 = v81 - 4;
        uint64_t v95 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v96 = *(_OWORD *)v94;
          *(v93 - 1) = *((_OWORD *)v94 - 1);
          _OWORD *v93 = v96;
          v93 -= 2;
          v94 -= 8;
          v95 -= 8;
        }
        while (v95);
        uint64_t v81 = v92;
        if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_114:
          do
          {
            int v97 = *--v81;
            *--uint64_t v87 = v97;
          }
          while (v81 != v82);
        }
        goto LABEL_103;
      }
    }
    unint64_t v89 = v107;
LABEL_103:
    *((void *)v77 + 45) = v87;
    *((void *)v77 + 46) = v75;
    *((void *)v77 + 47) = &v86[4 * v89];
    if (v82)
    {
      uint64_t v98 = v75;
      operator delete(v82);
      uint64_t v75 = v98;
    }
    unint64_t v74 = v104;
    goto LABEL_82;
  }
LABEL_33:
  unint64_t v100 = v100 & 0xFFFFFFFF00000000 | HIDWORD(v101);
  int v29 = v105;
  if (operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(*((void **)this + 2), __SPAIR64__(v101, v108), SHIDWORD(v101)))goto LABEL_34; {
  return 0;
  }
}

uint64_t operations_research::sat::DisjunctiveNotLast::Propagate(operations_research::sat::SchedulingConstraintHelper **this)
{
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(this[8], *((unsigned __int8 *)this + 56));
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(this[8]);
  uint64_t v3 = (void *)operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(this[8]);
  uint64_t v4 = (uint64_t)(v3[1] - *v3) >> 2;
  int v5 = -1431655765 * v4;
  if (-1431655765 * (int)v4 < 1) {
    return 1;
  }
  uint64_t v6 = v3;
  int v7 = 0;
  int v8 = -1431655765 * ((*((void *)started + 1) - *(void *)started) >> 2) - 1;
  uint64_t v65 = (void **)(this + 4);
  uint64_t v66 = v3;
  uint64_t v67 = this + 1;
  uint64_t v68 = v5;
  int v61 = -1431655765 * v4;
  uint64_t v62 = started;
  while (2)
  {
    int v63 = v8;
    int v9 = this[1];
    this[2] = v9;
    uint64_t v10 = v7;
    if (v7 + 1 > v5) {
      int v11 = v7 + 1;
    }
    else {
      int v11 = v5;
    }
    int v64 = v11;
    unint64_t v12 = this[8];
    int64_t v13 = 0x8000000000000002;
    while (1)
    {
      uint64_t v16 = (int *)(*v6 + 12 * v10);
      int v17 = *v16;
      int64_t v15 = *(void *)(v16 + 1);
      unint64_t v18 = *(int *)(*((void *)v12 + 16) + 4 * *v16);
      if (v18 != -1
        && ((*(void *)(*(void *)(*(void *)v12 + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      {
        goto LABEL_11;
      }
      uint64_t v19 = *v67;
      if (*v67 != v9) {
        break;
      }
      uint64_t v23 = this[3];
      if (v9 >= v23)
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v9) >> 2);
        uint64_t v30 = 2 * v29;
        if (2 * v29 <= 1) {
          uint64_t v30 = 1;
        }
        if (v29 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v31 = 0x1555555555555555;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31 > 0x1555555555555555) {
LABEL_82:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v32 = 12 * v31;
        int v33 = (char *)operator new(12 * v31);
        *(_DWORD *)int v33 = v17;
        uint64_t v34 = (operations_research::sat::SchedulingConstraintHelper *)&v33[v32];
        *(void *)(v33 + 4) = v15;
        int v21 = (operations_research::sat::SchedulingConstraintHelper *)(v33 + 12);
        this[1] = (operations_research::sat::SchedulingConstraintHelper *)v33;
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)(v33 + 12);
        this[3] = v34;
        if (v9)
        {
          operator delete(v9);
          unint64_t v12 = this[8];
        }
        this[2] = v21;
        int v24 = *(_DWORD *)(*((void *)v12 + 10) + 4 * v17);
        if (v24 == -1)
        {
LABEL_40:
          unint64_t v14 = (void *)(*((void *)v12 + 13) + 8 * v17);
          goto LABEL_10;
        }
      }
      else
      {
        *(_DWORD *)int v9 = v17;
        *(void *)((char *)v9 + 4) = v15;
        int v21 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        int v24 = *(_DWORD *)(*((void *)v12 + 10) + 4 * v17);
        if (v24 == -1) {
          goto LABEL_40;
        }
      }
      unint64_t v14 = (void *)(*(void *)(*((void *)v12 + 1) + 40) + 12 * v24);
LABEL_10:
      int64_t v13 = *v14 + v15;
      int v9 = v21;
LABEL_11:
      if (++v10 >= v68) {
        goto LABEL_49;
      }
    }
    if (v15 < v13)
    {
      uint64_t v20 = this[3];
      if (v9 >= v20)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v19) >> 2) + 1;
        if (v25 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v27 = 0x1555555555555555;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 > 0x1555555555555555) {
            goto LABEL_82;
          }
          int v28 = (char *)operator new(12 * v27);
        }
        else
        {
          int v28 = 0;
        }
        int v35 = &v28[4 * ((v9 - v19) >> 2)];
        *(_DWORD *)int v35 = v17;
        *(void *)(v35 + 4) = v15;
        uint64_t v36 = (operations_research::sat::SchedulingConstraintHelper *)v35;
        do
        {
          uint64_t v37 = *(void *)((char *)v9 - 12);
          int v9 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 - 12);
          int v38 = *((_DWORD *)v9 + 2);
          *(void *)((char *)v36 - 12) = v37;
          uint64_t v36 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v36 - 12);
          *((_DWORD *)v36 + 2) = v38;
        }
        while (v9 != v19);
        uint64_t v39 = (operations_research::sat::SchedulingConstraintHelper *)&v28[12 * v27];
        unint64_t v40 = this[1];
        int v21 = (operations_research::sat::SchedulingConstraintHelper *)(v35 + 12);
        this[1] = v36;
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)(v35 + 12);
        this[3] = v39;
        uint64_t v6 = v66;
        if (v40) {
          operator delete(v40);
        }
        this[2] = v21;
        unint64_t v12 = this[8];
        int v22 = *(_DWORD *)(*((void *)v12 + 10) + 4 * v17);
        if (v22 == -1) {
          goto LABEL_47;
        }
      }
      else
      {
        *(_DWORD *)int v9 = v17;
        *(void *)((char *)v9 + 4) = v15;
        int v21 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        this[2] = (operations_research::sat::SchedulingConstraintHelper *)((char *)v9 + 12);
        unint64_t v12 = this[8];
        int v22 = *(_DWORD *)(*((void *)v12 + 10) + 4 * v17);
        if (v22 == -1)
        {
LABEL_47:
          unint64_t v14 = (void *)(*((void *)v12 + 13) + 8 * v17);
          goto LABEL_9;
        }
      }
      unint64_t v14 = (void *)(*(void *)(*((void *)v12 + 1) + 40) + 12 * v22);
LABEL_9:
      int64_t v15 = v13;
      goto LABEL_10;
    }
    int v64 = v10;
LABEL_49:
    int v8 = v63;
    int v41 = this[4];
    this[5] = v41;
    if (v63 < 0) {
      goto LABEL_77;
    }
    while (2)
    {
      unint64_t v44 = (int *)(*(void *)v62 + 12 * v8);
      int64_t v45 = *(void *)(v44 + 1);
      if (v45 < v13)
      {
        int v46 = *v44;
        unint64_t v47 = this[8];
        unint64_t v48 = *(int *)(*((void *)v47 + 16) + 4 * *v44);
        if (v48 != -1
          && ((*(void *)(*(void *)(*(void *)v47 + 24) + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v48 & 0x3F ^ 1)) & 1) != 0)
        {
          goto LABEL_53;
        }
        unint64_t v49 = this[6];
        if (v41 < v49)
        {
          *(_DWORD *)int v41 = v46;
          *(void *)((char *)v41 + 4) = v45;
          uint64_t v42 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v41 + 12);
          goto LABEL_52;
        }
        uint64_t v50 = (operations_research::sat::SchedulingConstraintHelper *)*v65;
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (operations_research::sat::SchedulingConstraintHelper *)*v65) >> 2);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v50) >> 2);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v54 = 0x1555555555555555;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          if (v54 > 0x1555555555555555) {
            goto LABEL_82;
          }
          uint64_t v55 = (char *)operator new(12 * v54);
          uint64_t v56 = (uint64_t)&v55[12 * v51];
          *(_DWORD *)uint64_t v56 = v46;
          *(void *)(v56 + 4) = v45;
          uint64_t v57 = v56;
          if (v41 != v50)
          {
LABEL_67:
            uint64_t v6 = v66;
            do
            {
              uint64_t v58 = *(void *)((char *)v41 - 12);
              int v41 = (operations_research::sat::SchedulingConstraintHelper *)((char *)v41 - 12);
              int v59 = *((_DWORD *)v41 + 2);
              *(void *)(v57 - 12) = v58;
              v57 -= 12;
              *(_DWORD *)(v57 + 8) = v59;
            }
            while (v41 != v50);
            int v41 = (operations_research::sat::SchedulingConstraintHelper *)*v65;
            uint64_t v42 = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
            this[4] = (operations_research::sat::SchedulingConstraintHelper *)v57;
            this[5] = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
            this[6] = (operations_research::sat::SchedulingConstraintHelper *)&v55[12 * v54];
            if (v41) {
LABEL_70:
            }
              operator delete(v41);
LABEL_52:
            this[5] = v42;
            int v41 = v42;
LABEL_53:
            if (v8-- <= 0)
            {
              int v8 = -1;
              break;
            }
            continue;
          }
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 4 * ((v41 - (operations_research::sat::SchedulingConstraintHelper *)*v65) >> 2);
          *(_DWORD *)uint64_t v56 = v46;
          *(void *)(v56 + 4) = v45;
          uint64_t v57 = 12 * v51;
          if (v41 != v50) {
            goto LABEL_67;
          }
        }
        uint64_t v6 = v66;
        uint64_t v42 = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
        this[4] = (operations_research::sat::SchedulingConstraintHelper *)v57;
        this[5] = (operations_research::sat::SchedulingConstraintHelper *)(v56 + 12);
        this[6] = (operations_research::sat::SchedulingConstraintHelper *)&v55[12 * v54];
        if (v41) {
          goto LABEL_70;
        }
        goto LABEL_52;
      }
      break;
    }
    int v9 = this[2];
LABEL_77:
    int v5 = v61;
    int v7 = v64;
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - *v67) >> 2) < 2
      || *v65 == v41
      || (uint64_t result = operations_research::sat::DisjunctiveNotLast::PropagateSubwindow((operations_research::sat::DisjunctiveNotLast *)this),
          result))
    {
      if (v64 >= v61) {
        return 1;
      }
      continue;
    }
    return result;
  }
}

uint64_t operations_research::sat::DisjunctiveNotLast::PropagateSubwindow(operations_research::sat::DisjunctiveNotLast *this)
{
  uint64_t v1 = this;
  uint64_t v3 = (char *)*((void *)this + 4);
  unint64_t v2 = (char *)*((void *)this + 5);
  uint64_t v4 = v3;
  if (v3 != v2)
  {
    uint64_t v5 = *((void *)this + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 56);
    uint64_t v8 = *(void *)(v6 + 40);
    int v9 = (char *)*((void *)this + 4);
    do
    {
      *(void *)(v9 + 4) = -*(void *)(v8 + 12 * (*(_DWORD *)(v7 + 4 * *(int *)v9) ^ 1));
      v9 += 12;
    }
    while (v9 != v2);
  }
  if ((int)(-1431655765 * ((unint64_t)(v2 - v3) >> 2)) > 32)
  {
    operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(1431655768 * ((unint64_t)(v2 - v3) >> 2), v3, v2, 0);
    uint64_t v1 = this;
  }
  else if (v2 - v3 >= 24)
  {
    uint64_t v10 = v2 - 12;
    if (v2 - 12 != v3)
    {
      uint64_t v4 = v2 - 12;
      int v11 = v2 - 12;
      do
      {
        uint64_t v12 = *(void *)(v11 - 12);
        v11 -= 12;
        int v13 = *((_DWORD *)v11 + 2);
        *(void *)uint64_t v117 = v12;
        *(_DWORD *)&v117[8] = v13;
        if (*((void *)v11 + 2) < *(uint64_t *)&v117[4])
        {
          int v14 = *((_DWORD *)v10 + 2);
          uint64_t v15 = *(void *)v10;
          *(void *)uint64_t v10 = *(void *)v11;
          *((_DWORD *)v10 + 2) = *((_DWORD *)v11 + 2);
          *(void *)int v11 = v15;
          *((_DWORD *)v11 + 2) = v14;
          uint64_t v4 = v10;
        }
        uint64_t v10 = v11;
      }
      while (v11 != v3);
    }
    while (1)
    {
      uint64_t v16 = v4 + 12;
      if (v4 + 12 == v2) {
        break;
      }
      int v17 = *((_DWORD *)v4 + 3);
      uint64_t v18 = *((void *)v4 + 2);
      v4 += 12;
      int v19 = *((_DWORD *)v16 - 1);
      *(void *)uint64_t v117 = *(void *)(v16 - 12);
      *(_DWORD *)&v117[8] = v19;
      if (v18 < *(uint64_t *)&v117[4])
      {
        uint64_t v20 = v16;
        do
        {
          uint64_t v21 = *(void *)(v16 - 12);
          v16 -= 12;
          *(void *)uint64_t v20 = v21;
          *((_DWORD *)v20 + 2) = *((_DWORD *)v20 - 1);
          uint64_t v22 = *((void *)v20 - 3);
          int v23 = *((_DWORD *)v20 - 4);
          *(void *)uint64_t v117 = v22;
          *(_DWORD *)&v117[8] = v23;
          uint64_t v20 = v16;
        }
        while (v18 < *(uint64_t *)&v117[4]);
      }
      *(_DWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 4) = v18;
    }
  }
  uint64_t v24 = *((void *)v1 + 1);
  unint64_t v25 = (uint64_t *)*((void *)v1 + 2);
  if ((uint64_t *)v24 == v25) {
    return 1;
  }
  int v26 = 0;
  uint64_t v112 = (uint64_t)v1 + 8;
  uint64_t v27 = *(void *)(*((void *)v1 + 5) - 8);
  uint64_t v28 = *((void *)v1 + 8);
  uint64_t v29 = *(void *)(v28 + 8);
  uint64_t v30 = *(void *)(v28 + 32);
  uint64_t v31 = *(void *)(v29 + 40);
  uint64_t v32 = (uint64_t *)*((void *)v1 + 1);
  do
  {
    uint64_t v33 = *(int *)v32;
    uint64_t v34 = -*(void *)(v31 + 12 * (*(_DWORD *)(v30 + 4 * v33) ^ 1));
    if (v27 > v34)
    {
      uint64_t v35 = v24 + 12 * v26++;
      *(_DWORD *)uint64_t v35 = v33;
      *(void *)(v35 + 4) = v34;
    }
    uint64_t v32 = (uint64_t *)((char *)v32 + 12);
  }
  while (v32 != v25);
  if (v26 < 2) {
    return 1;
  }
  unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2);
  uint64_t v114 = v26;
  BOOL v39 = v26 >= v38;
  unint64_t v40 = v26 - v38;
  if (v40 != 0 && v39)
  {
    std::vector<operations_research::sat::TaskTime>::__append(v112, v40);
    int v41 = this;
    uint64_t v24 = *((void *)this + 1);
    unint64_t v25 = (uint64_t *)*((void *)this + 2);
  }
  else if (v39)
  {
    int v41 = this;
  }
  else
  {
    unint64_t v25 = (uint64_t *)(v24 + 12 * v26);
    int v41 = this;
    *((void *)this + 2) = v25;
  }
  unint64_t v42 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2));
  if (v25 == (uint64_t *)v24) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v42;
  }
  uint64_t v36 = 1;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v24, v25, (uint64_t)v117, v43, 1);
  unint64_t v44 = (char **)((char *)v41 + 72);
  *((void *)v41 + 10) = *((void *)v41 + 9);
  *((_DWORD *)v41 + 24) = 0;
  int64_t v45 = (int *)*((void *)v41 + 4);
  int v109 = (int *)*((void *)v41 + 5);
  if (v45 != v109)
  {
    int v46 = v41;
    int v47 = 0;
    int v110 = v26;
    while (1)
    {
      uint64_t v50 = *v45;
      int v111 = v45;
      int64_t v51 = *(void *)(v45 + 1);
      uint64_t v115 = v50;
      int64_t v113 = v51;
      if (v47 < v26) {
        break;
      }
LABEL_76:
      uint64_t v84 = *((void *)v46 + 9);
      unint64_t v85 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v46 + 10) - v84) >> 2);
      int v86 = *((_DWORD *)v46 + 24);
      if (v86 + 1 == v85 && *(_DWORD *)(v84 + 20 * v86) == v50)
      {
        int v86 = 0;
        *((_DWORD *)v46 + 24) = 0;
      }
      if (v86 >= (int)v85)
      {
        int v87 = 0;
        int64_t v91 = 0x8000000000000002;
      }
      else
      {
        int v87 = 0;
        char v88 = 0;
        unint64_t v89 = (void *)(v84 + 20 * v86 + 12);
        uint64_t v90 = (int)v85 - (uint64_t)v86;
        int64_t v91 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v89 - 3) == v50)
          {
            char v88 = 1;
          }
          else
          {
            int64_t v92 = *(v89 - 1);
            if (v92 >= v91)
            {
              if ((v88 & 1) == 0) {
                *((_DWORD *)v46 + 24) = v86;
              }
              int64_t v91 = *v89 + v92;
              int v87 = v86;
            }
            else
            {
              v91 += *v89;
            }
          }
          unint64_t v89 = (void *)((char *)v89 + 20);
          ++v86;
          --v90;
        }
        while (v90);
      }
      uint64_t v93 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)v46 + 8);
      uint64_t v94 = *((void *)v93 + 4);
      uint64_t v95 = *(void *)(*((void *)v93 + 1) + 40);
      if (v91 > -*(void *)(v95 + 12 * (*(_DWORD *)(v94 + 4 * v50) ^ 1)))
      {
        int64_t v96 = 0x8000000000000002;
        if ((int)v85 > v87)
        {
          int v97 = (int *)(v84 + 20 * v87);
          uint64_t v98 = (int)v85 - (uint64_t)v87;
          do
          {
            uint64_t v100 = *v97;
            v97 += 5;
            uint64_t v99 = v100;
            if (v50 != v100)
            {
              uint64_t v101 = *(void *)(v95 + 12 * (*(_DWORD *)(v94 + 4 * v99) ^ 1));
              if (v96 <= -v101) {
                int64_t v96 = -v101;
              }
            }
            --v98;
          }
          while (v98);
        }
        if (v113 > v96)
        {
          operations_research::sat::SchedulingConstraintHelper::ClearReason(v93);
          int v103 = v115;
          int v102 = this;
          int v104 = v85 - v87;
          if ((int)v85 > v87)
          {
            uint64_t v105 = v87;
            unint64_t v106 = *(void *)&(*v44)[20 * v87 + 4];
            uint64_t v107 = 20 * v105;
            do
            {
              int v108 = *(_DWORD *)&(*v44)[v107];
              if (v108 != v103)
              {
                operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*((operations_research::sat::SchedulingConstraintHelper **)v102 + 8), *(_DWORD *)&(*v44)[v107]);
                operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*((void ***)this + 8), v108, *(void *)(*((void *)this + 9) + v107 + 12), v106);
                operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)this + 8), v108, v96);
                int v103 = v115;
                int v102 = this;
              }
              v107 += 20;
              --v104;
            }
            while (v104);
          }
          int v48 = v103;
          operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*((operations_research::sat::SchedulingConstraintHelper **)v102 + 8), v103, v91 - 1);
          char v49 = operations_research::sat::SchedulingConstraintHelper::DecreaseEndMax(*((unint64_t **)this + 8), v48, v96);
          int v46 = this;
          if ((v49 & 1) == 0) {
            return 0;
          }
        }
      }
      int64_t v45 = v111 + 3;
      int v26 = v110;
      if (v111 + 3 == v109) {
        return 1;
      }
    }
    uint64_t v52 = v47;
    unint64_t v53 = (void *)v112;
    while (1)
    {
      uint64_t v54 = *v53 + 12 * v52;
      if (v51 <= *(void *)(v54 + 4))
      {
        int v47 = v52;
        goto LABEL_76;
      }
      int v55 = *(_DWORD *)v54;
      uint64_t v56 = (void *)*((void *)v46 + 8);
      uint64_t v57 = *(void *)(v56[1] + 40);
      int v58 = *(_DWORD *)(v56[10] + 4 * v55);
      if (v58 == -1) {
        int v59 = (uint64_t *)(v56[13] + 8 * v55);
      }
      else {
        int v59 = (uint64_t *)(v57 + 12 * v58);
      }
      uint64_t v60 = *(void *)(v57 + 12 * *(int *)(v56[4] + 4 * v55));
      uint64_t v61 = *v59;
      uint64_t v62 = *(void *)(v57 + 12 * *(int *)(v56[7] + 4 * v55)) - *v59;
      if (v60 <= v62) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = v60;
      }
      int v64 = (char *)*((void *)v46 + 9);
      uint64_t v65 = (char *)*((void *)v46 + 10);
      uint64_t v66 = (v65 - v64) / 20;
      unint64_t v67 = *((void *)v46 + 11);
      if ((unint64_t)v65 >= v67)
      {
        unint64_t v68 = v66 + 1;
        if ((unint64_t)(v66 + 1) > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (void)v64) >> 2);
        if (2 * v69 > v68) {
          unint64_t v68 = 2 * v69;
        }
        if (v69 >= 0x666666666666666) {
          unint64_t v70 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          if (v70 > 0xCCCCCCCCCCCCCCCLL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v71 = (char *)operator new(20 * v70);
          uint64_t v50 = v115;
          int v46 = this;
        }
        else
        {
          int v71 = 0;
        }
        unint64_t v72 = &v71[20 * v66];
        *(_DWORD *)unint64_t v72 = v55;
        *(void *)(v72 + 4) = v63;
        *(void *)(v72 + 12) = v61;
        uint64_t v73 = v72;
        if (v65 != v64)
        {
          do
          {
            long long v74 = *(_OWORD *)(v65 - 20);
            *((_DWORD *)v73 - 1) = *((_DWORD *)v65 - 1);
            *(_OWORD *)(v73 - 20) = v74;
            v73 -= 20;
            v65 -= 20;
          }
          while (v65 != v64);
          uint64_t v65 = *v44;
        }
        uint64_t v75 = &v71[20 * v70];
        int v76 = v72 + 20;
        *((void *)v46 + 9) = v73;
        *((void *)v46 + 10) = v72 + 20;
        *((void *)v46 + 11) = v75;
        if (v65)
        {
          operator delete(v65);
          uint64_t v50 = v115;
          int v46 = this;
        }
        unint64_t v53 = (void *)v112;
        int64_t v51 = v113;
        *((void *)v46 + 10) = v76;
        if ((int)v66 >= 1)
        {
LABEL_68:
          unint64_t v77 = v66 + 1;
          uint64_t v78 = 20 * v66;
          while (1)
          {
            int v79 = *v44;
            if (*(void *)&(*v44)[20 * (v77 - 2) + 4] <= v63) {
              break;
            }
            unint64_t v80 = &v79[20 * (v77 - 2)];
            uint64_t v81 = &v79[v78];
            long long v82 = *(_OWORD *)v80;
            *((_DWORD *)v81 + 4) = *((_DWORD *)v80 + 4);
            *(_OWORD *)uint64_t v81 = v82;
            LODWORD(v66) = v66 - 1;
            --v77;
            v78 -= 20;
            if (v77 <= 1)
            {
              LODWORD(v66) = 0;
              break;
            }
          }
        }
      }
      else
      {
        *(_DWORD *)uint64_t v65 = v55;
        *(void *)(v65 + 4) = v63;
        *(void *)(v65 + 12) = v61;
        *((void *)v46 + 10) = v65 + 20;
        if ((int)v66 >= 1) {
          goto LABEL_68;
        }
      }
      uint64_t v83 = *((void *)v46 + 9) + 20 * (int)v66;
      *(_DWORD *)uint64_t v83 = v55;
      *(void *)(v83 + 4) = v63;
      *(void *)(v83 + 12) = v61;
      if ((int)v66 <= *((_DWORD *)v46 + 24)) {
        *((_DWORD *)v46 + 24) = 0;
      }
      if (++v52 == v114)
      {
        int v47 = v110;
        goto LABEL_76;
      }
    }
  }
  return v36;
}

uint64_t operations_research::sat::DisjunctiveEdgeFinding::Propagate(operations_research::sat::DisjunctiveEdgeFinding *this)
{
  unint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)*((void *)this + 2);
  uint64_t v3 = *((void *)v2 + 5) - *((void *)v2 + 4);
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v2, *((unsigned __int8 *)this + 8));
  unint64_t v4 = (int)(v3 >> 2);
  std::vector<BOOL>::resize((uint64_t)this + 160, v4, 0);
  uint64_t v5 = *((void *)this + 17);
  unint64_t v6 = (*((void *)this + 18) - v5) >> 2;
  if (v4 <= v6)
  {
    if (v4 < v6) {
      *((void *)this + 18) = v5 + 4 * v4;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 136), v4 - v6);
  }
  uint64_t v7 = 0x8000000000000002;
  uint64_t v8 = (int **)((char *)this + 48);
  *((void *)this + 7) = *((void *)this + 6);
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingShiftedStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                                  + 2));
  int v11 = *(int **)started;
  uint64_t v10 = *(int **)(started + 8);
  if (*(int **)started != v10)
  {
    uint64_t v12 = (void *)*((void *)this + 2);
    uint64_t v43 = *(int **)(started + 8);
    while (1)
    {
      int v14 = *v11;
      uint64_t v15 = *(void *)(v11 + 1);
      unint64_t v16 = *(int *)(v12[16] + 4 * *v11);
      if (v16 != -1
        && ((*(void *)(*(void *)(*v12 + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v16 & 0x3F ^ 1)) & 1) != 0)
      {
        goto LABEL_9;
      }
      int v17 = (int *)*((void *)this + 7);
      if (*(void *)(*(void *)(v12[1] + 40) + 12 * *(int *)(v12[4] + 4 * v14)) >= v7)
      {
        uint64_t v20 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * (v17 - *v8) >= 3)
        {
          uint64_t result = operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow((uint64_t)this, v7);
          if (!result) {
            return result;
          }
          uint64_t v20 = *v8;
          uint64_t v10 = v43;
        }
        *((void *)this + 7) = v20;
        unint64_t v22 = *((void *)this + 8);
        if ((unint64_t)v20 >= v22)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v20) >> 2);
          uint64_t v32 = 2 * v31;
          if (2 * v31 <= 1) {
            uint64_t v32 = 1;
          }
          if (v31 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v33 = 0x1555555555555555;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33 > 0x1555555555555555) {
LABEL_55:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          uint64_t v34 = 12 * v33;
          uint64_t v35 = (char *)operator new(12 * v33);
          *(_DWORD *)uint64_t v35 = v14;
          *(void *)(v35 + 4) = v15;
          uint64_t v36 = v35 + 12;
          *((void *)this + 6) = v35;
          *((void *)this + 7) = v35 + 12;
          *((void *)this + 8) = &v35[v34];
          if (v20) {
            operator delete(v20);
          }
          uint64_t v10 = v43;
          *((void *)this + 7) = v36;
          uint64_t v12 = (void *)*((void *)this + 2);
          int v23 = *(_DWORD *)(v12[10] + 4 * v14);
          if (v23 == -1) {
            goto LABEL_40;
          }
LABEL_21:
          int v13 = (void *)(*(void *)(v12[1] + 40) + 12 * v23);
        }
        else
        {
          *uint64_t v20 = v14;
          *(void *)(v20 + 1) = v15;
          *((void *)this + 7) = v20 + 3;
          uint64_t v12 = (void *)*((void *)this + 2);
          int v23 = *(_DWORD *)(v12[10] + 4 * v14);
          if (v23 != -1) {
            goto LABEL_21;
          }
LABEL_40:
          int v13 = (void *)(v12[13] + 8 * v14);
        }
        uint64_t v7 = v15;
        goto LABEL_8;
      }
      unint64_t v18 = *((void *)this + 8);
      if ((unint64_t)v17 >= v18) {
        break;
      }
      int *v17 = v14;
      *(void *)(v17 + 1) = v15;
      *((void *)this + 7) = v17 + 3;
      uint64_t v12 = (void *)*((void *)this + 2);
      int v19 = *(_DWORD *)(v12[10] + 4 * v14);
      if (v19 == -1) {
        goto LABEL_48;
      }
LABEL_7:
      int v13 = (void *)(*(void *)(v12[1] + 40) + 12 * v19);
LABEL_8:
      v7 += *v13;
LABEL_9:
      v11 += 3;
      if (v11 == v10) {
        goto LABEL_51;
      }
    }
    uint64_t v24 = v8;
    unint64_t v25 = *v8;
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v17 - *v8);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v25) >> 2);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v29 = 0x1555555555555555;
    }
    else {
      unint64_t v29 = v27;
    }
    unint64_t v42 = v29;
    if (v29)
    {
      if (v29 > 0x1555555555555555) {
        goto LABEL_55;
      }
      uint64_t v30 = (char *)operator new(12 * v29);
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v37 = &v30[12 * v26];
    *(_DWORD *)uint64_t v37 = v14;
    *(void *)(v37 + 4) = v15;
    unint64_t v38 = v37;
    uint64_t v8 = v24;
    if (v17 == v25)
    {
      int v41 = v37 + 12;
      *((void *)this + 6) = v37;
      *((void *)this + 7) = v37 + 12;
      *((void *)this + 8) = &v30[12 * v42];
      if (v17) {
LABEL_46:
      }
        operator delete(v17);
    }
    else
    {
      do
      {
        uint64_t v39 = *(void *)(v17 - 3);
        v17 -= 3;
        int v40 = v17[2];
        *(void *)(v38 - 12) = v39;
        v38 -= 12;
        *((_DWORD *)v38 + 2) = v40;
      }
      while (v17 != v25);
      int v17 = *v24;
      int v41 = v37 + 12;
      *((void *)this + 6) = v38;
      *((void *)this + 7) = v37 + 12;
      *((void *)this + 8) = &v30[12 * v42];
      if (v17) {
        goto LABEL_46;
      }
    }
    uint64_t v10 = v43;
    *((void *)this + 7) = v41;
    uint64_t v12 = (void *)*((void *)this + 2);
    int v19 = *(_DWORD *)(v12[10] + 4 * v14);
    if (v19 == -1)
    {
LABEL_48:
      int v13 = (void *)(v12[13] + 8 * v14);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_51:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2) < 3) {
    return 1;
  }
  uint64_t result = operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow((uint64_t)this, v7);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t operations_research::sat::DisjunctiveEdgeFinding::PropagateSubwindow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 24);
  *(void *)(a1 + 32) = v3;
  unint64_t v4 = *(int **)(a1 + 48);
  uint64_t v5 = *(int **)(a1 + 56);
  uint64_t v168 = (uint64_t *)(a1 + 24);
  if (v4 == v5)
  {
    uint64_t v27 = (uint64_t)v3;
  }
  else
  {
    do
    {
      while (1)
      {
        while (1)
        {
          int v7 = *v4;
          uint64_t v8 = *(void **)(a1 + 16);
          uint64_t v9 = 4 * *v4;
          char v10 = *v4;
          uint64_t v11 = -*(void *)(*(void *)(v8[1] + 40) + 12 * (*(_DWORD *)(v8[7] + v9) ^ 1));
          unint64_t v12 = *(int *)(v8[16] + v9);
          unint64_t v13 = (unint64_t)*v4 >> 3;
          if ((v12 == -1
             || ((*(void *)(*(void *)(*v8 + 24) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
            && v11 < a2)
          {
            break;
          }
          *(void *)(*(void *)(a1 + 160) + (v13 & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
          v4 += 3;
          if (v4 == v5) {
            goto LABEL_26;
          }
        }
        *(void *)(*(void *)(a1 + 160) + (v13 & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
        unint64_t v14 = *(void *)(a1 + 40);
        if ((unint64_t)v3 >= v14) {
          break;
        }
        *(_DWORD *)uint64_t v3 = v7;
        *(void *)(v3 + 4) = v11;
        *(void *)(a1 + 32) = v3 + 12;
        v3 += 12;
        v4 += 3;
        if (v4 == v5) {
          goto LABEL_26;
        }
      }
      uint64_t v15 = (char *)*v168;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*v168] >> 2);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v15) >> 2);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v19 = 0x1555555555555555;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 > 0x1555555555555555) {
LABEL_184:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v20 = (char *)operator new(12 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[12 * v16];
      *(_DWORD *)uint64_t v21 = v7;
      *(void *)(v21 + 4) = v11;
      unint64_t v22 = v21;
      if (v3 != v15)
      {
        do
        {
          uint64_t v23 = *(void *)(v3 - 12);
          v3 -= 12;
          int v24 = *((_DWORD *)v3 + 2);
          *(void *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v3 != v15);
        uint64_t v3 = (char *)*v168;
      }
      unint64_t v25 = &v20[12 * v19];
      unint64_t v26 = v21 + 12;
      *(void *)(a1 + 24) = v22;
      *(void *)(a1 + 32) = v21 + 12;
      *(void *)(a1 + 40) = v25;
      if (v3) {
        operator delete(v3);
      }
      *(void *)(a1 + 32) = v26;
      uint64_t v3 = v26;
      v4 += 3;
    }
    while (v4 != v5);
LABEL_26:
    uint64_t v27 = *v168;
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-v27] >> 2);
  if (v28 < 2) {
    return 1;
  }
  unint64_t v30 = 126 - 2 * __clz(v28);
  if (v3 == (char *)v27) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = v30;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v27, (uint64_t *)v3, (uint64_t)v172, v31, 1);
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  uint64_t v165 = (void **)(a1 + 112);
  uint64_t v33 = a1 + 72;
  operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset((_DWORD *)(a1 + 72), v32);
  int v164 = v32;
  if ((int)v32 >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v32;
    uint64_t v161 = v32;
    while (1)
    {
      uint64_t v36 = (int *)(*(void *)(a1 + 48) + 12 * v34);
      unint64_t v32 = *v36;
      uint64_t v37 = *(void **)(a1 + 16);
      int v38 = *(_DWORD *)(v37[10] + 4 * v32);
      if (v38 == -1)
      {
        uint64_t v39 = *(void *)(v36 + 1);
        uint64_t v40 = *(void *)(v37[13] + 8 * v32);
        unint64_t v42 = *(uint64_t **)(a1 + 120);
        unint64_t v41 = *(void *)(a1 + 128);
        if ((unint64_t)v42 >= v41)
        {
LABEL_40:
          uint64_t v169 = v39;
          unint64_t v44 = (uint64_t *)*v165;
          uint64_t v45 = (char *)v42 - (unsigned char *)*v165;
          uint64_t v46 = v45 >> 3;
          unint64_t v47 = (v45 >> 3) + 1;
          if (v47 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v41 - (void)v44;
          if (v48 >> 2 > v47) {
            unint64_t v47 = v48 >> 2;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            if (v49 >> 61) {
              goto LABEL_184;
            }
            uint64_t v50 = operator new(8 * v49);
            int64_t v51 = (uint64_t *)&v50[8 * v46];
            *int64_t v51 = v40;
            uint64_t v43 = (uint64_t)(v51 + 1);
            if (v42 != v44)
            {
LABEL_49:
              unint64_t v52 = (char *)(v42 - 1) - (char *)v44;
              if (v52 < 0x58) {
                goto LABEL_192;
              }
              if ((unint64_t)((char *)v42 - &v50[v45]) < 0x20) {
                goto LABEL_192;
              }
              uint64_t v53 = (v52 >> 3) + 1;
              uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              int v55 = &v42[v54 / 0xFFFFFFFFFFFFFFF8];
              int64_t v51 = (uint64_t *)((char *)v51 - v54);
              uint64_t v56 = &v50[8 * v46 - 16];
              uint64_t v57 = v42 - 2;
              uint64_t v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v59 = *(_OWORD *)v57;
                *(v56 - 1) = *((_OWORD *)v57 - 1);
                *uint64_t v56 = v59;
                v56 -= 2;
                v57 -= 4;
                v58 -= 4;
              }
              while (v58);
              unint64_t v42 = v55;
              if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_192:
                do
                {
                  uint64_t v60 = *--v42;
                  *--int64_t v51 = v60;
                }
                while (v42 != v44);
              }
            }
          }
          else
          {
            uint64_t v50 = 0;
            int64_t v51 = (uint64_t *)(8 * v46);
            *(void *)(8 * v46) = v40;
            uint64_t v43 = 8 * v46 + 8;
            if (v42 != v44) {
              goto LABEL_49;
            }
          }
          *(void *)(a1 + 112) = v51;
          *(void *)(a1 + 120) = v43;
          *(void *)(a1 + 128) = &v50[8 * v49];
          if (v44) {
            operator delete(v44);
          }
          uint64_t v33 = a1 + 72;
          uint64_t v35 = v161;
          uint64_t v39 = v169;
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v39 = *(void *)(v36 + 1);
        uint64_t v40 = *(void *)(*(void *)(v37[1] + 40) + 12 * v38);
        unint64_t v42 = *(uint64_t **)(a1 + 120);
        unint64_t v41 = *(void *)(a1 + 128);
        if ((unint64_t)v42 >= v41) {
          goto LABEL_40;
        }
      }
      *unint64_t v42 = v40;
      uint64_t v43 = (uint64_t)(v42 + 1);
LABEL_61:
      *(void *)(a1 + 120) = v43;
      if ((*(void *)(*(void *)(a1 + 160) + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32))
      {
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v33, v34, v39, v40);
        LODWORD(v32) = v164;
        if (++v34 == v35) {
          break;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(a1 + 136) + 4 * v32) = v34;
        operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(v33, v34, v39, v40, v40);
        LODWORD(v32) = v164;
        if (++v34 == v35) {
          break;
        }
      }
    }
  }
  uint64_t v176 = *(void *)(*(void *)(a1 + 32) - 8);
  uint64_t Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v33);
  if (Envelope <= v176)
  {
    uint64_t v102 = Envelope;
    while (1)
    {
      Optionaluint64_t Envelope = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33);
      uint64_t v104 = v176;
      if (OptionalEnvelope > v176) {
        break;
      }
LABEL_180:
      uint64_t v151 = *(void *)(a1 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v151) >> 2) < 3) {
        return 1;
      }
      uint64_t v152 = *(void *)(v151 + 4);
      if (v152 >= operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33)) {
        return 1;
      }
      uint64_t v153 = *(void *)(a1 + 32);
      unint64_t v154 = *(int *)(v153 - 12);
      *(void *)(a1 + 32) = v153 - 12;
      uint64_t v155 = *(int *)(*(void *)(a1 + 136) + 4 * v154);
      *(void *)(*(void *)(a1 + 160) + ((v154 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v154;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(v33, v155, *(void *)(*(void *)(a1 + 48) + 12 * (int)v155 + 4), *(void *)(*(void *)(a1 + 112) + 8 * v155));
      uint64_t v176 = *(void *)(*(void *)(a1 + 32) - 8);
      uint64_t v102 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(v33);
      if (v102 > v176) {
        goto LABEL_64;
      }
    }
    uint64_t v156 = v102;
    uint64_t v157 = v102 - 1;
    while (1)
    {
      uint64_t v175 = 0;
      uint64_t v174 = 0;
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(v33, v104, (int *)&v175 + 1, (int *)&v175, &v174);
      int v105 = v175;
      if (*(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 40)
                     + 12
                     * *(int *)(*(void *)(*(void *)(a1 + 16) + 32)
                              + 4 * *(int *)(*(void *)(a1 + 48) + 12 * (int)v175))) < v102)
      {
        int v158 = *(_DWORD *)(*(void *)(a1 + 48) + 12 * (int)v175);
        int MaxEventWithEnvelopeGreaterThan = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v33, v157);
        if (SHIDWORD(v175) >= MaxEventWithEnvelopeGreaterThan) {
          LODWORD(v108) = MaxEventWithEnvelopeGreaterThan;
        }
        else {
          LODWORD(v108) = HIDWORD(v175);
        }
        if (MaxEventWithEnvelopeGreaterThan <= SHIDWORD(v175)) {
          int v109 = HIDWORD(v175);
        }
        else {
          int v109 = MaxEventWithEnvelopeGreaterThan;
        }
        uint64_t v110 = *(void *)(a1 + 48);
        unint64_t v167 = *(void *)(v110 + 12 * v109 + 4);
        unint64_t v171 = *(void *)(v110 + 12 * (int)v108 + 4);
        uint64_t v173 = *(void *)(*(void *)(a1 + 112) + 8 * (int)v175) + v176 + ~v174;
        if (v173 < v176) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v173, (int)&v176, "window_end >= non_gray_end_max");
        }
        uint64_t v108 = (int)v108;
        operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
        if ((int)v108 < (int)v32)
        {
          uint64_t v163 = v109;
          while (2)
          {
            unint64_t v112 = *(int *)(*(void *)(a1 + 48) + 12 * v108);
            if ((*(void *)(*(void *)(a1 + 160) + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112)) {
              goto LABEL_132;
            }
            int64_t v113 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
            operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v113, *(_DWORD *)(*(void *)(a1 + 48) + 12 * v108));
            int v114 = *(_DWORD *)(*((void *)v113 + 16) + 4 * v112);
            if (v114 == -1) {
              goto LABEL_155;
            }
            int v115 = v114 ^ 1;
            uint64_t v117 = (int *)*((void *)v113 + 46);
            unint64_t v116 = *((void *)v113 + 47);
            if ((unint64_t)v117 < v116)
            {
              int *v117 = v115;
              uint64_t v118 = (uint64_t)(v117 + 1);
              goto LABEL_154;
            }
            uint64_t v119 = (int *)*((void *)v113 + 45);
            uint64_t v120 = v117 - v119;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62) {
LABEL_186:
            }
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            uint64_t v122 = v116 - (void)v119;
            if (v122 >> 1 > v121) {
              unint64_t v121 = v122 >> 1;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            unint64_t v160 = v121;
            if (v121)
            {
              if (v121 >> 62) {
                goto LABEL_184;
              }
              unint64_t v123 = operator new(4 * v121);
              uint64_t v124 = (int *)&v123[4 * v120];
              int *v124 = v115;
              uint64_t v118 = (uint64_t)(v124 + 1);
              if (v117 != v119)
              {
LABEL_145:
                unint64_t v125 = (char *)(v117 - 1) - (char *)v119;
                if (v125 < 0x2C) {
                  goto LABEL_193;
                }
                if ((unint64_t)((char *)v119 - v123) < 0x20) {
                  goto LABEL_193;
                }
                uint64_t v126 = (v125 >> 2) + 1;
                uint64_t v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
                int64_t v128 = &v117[v127 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v124 = (int *)((char *)v124 - v127);
                uint64_t v129 = &v123[4 * v120 - 16];
                long long v130 = v117 - 4;
                uint64_t v131 = v126 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v132 = *(_OWORD *)v130;
                  *(v129 - 1) = *((_OWORD *)v130 - 1);
                  *uint64_t v129 = v132;
                  v129 -= 2;
                  v130 -= 8;
                  v131 -= 8;
                }
                while (v131);
                uint64_t v117 = v128;
                if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_193:
                  do
                  {
                    int v133 = *--v117;
                    *--uint64_t v124 = v133;
                  }
                  while (v117 != v119);
                }
                *((void *)v113 + 45) = v124;
                *((void *)v113 + 46) = v118;
                *((void *)v113 + 47) = &v123[4 * v160];
                if (v119) {
LABEL_152:
                }
                  operator delete(v119);
LABEL_153:
                LODWORD(v32) = v164;
LABEL_154:
                *((void *)v113 + 46) = v118;
LABEL_155:
                if (v108 >= v163) {
                  unint64_t v134 = v167;
                }
                else {
                  unint64_t v134 = v171;
                }
                operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v112, *(void *)(*(void *)(a1 + 112) + 8 * v108), v134);
                int v135 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
                int64_t v136 = v173;
                operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v135, v112);
                unint64_t v137 = 0x7FFFFFFFFFFFFFFFLL;
                if (v136 >= (uint64_t)0x8000000000000002) {
                  unint64_t v137 = -v136;
                }
                LODWORD(v172[0]) = *(_DWORD *)(*((void *)v135 + 7) + 4 * v112) ^ 1;
                *(void *)((char *)v172 + 4) = v137;
                uint64_t v138 = v172[0];
                unint64_t v139 = HIDWORD(v137);
                uint64_t v141 = (char *)*((void *)v135 + 49);
                unint64_t v140 = *((void *)v135 + 50);
                if ((unint64_t)v141 < v140)
                {
                  *(void *)uint64_t v141 = v172[0];
                  *((_DWORD *)v141 + 2) = HIDWORD(v137);
                  int v111 = v141 + 12;
                }
                else
                {
                  uint64_t v142 = (unsigned char *)*((void *)v135 + 48);
                  unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((v141 - v142) >> 2) + 1;
                  if (v143 > 0x1555555555555555) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140 - (void)v142) >> 2);
                  if (2 * v144 > v143) {
                    unint64_t v143 = 2 * v144;
                  }
                  if (v144 >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v145 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v145 = v143;
                  }
                  if (v145)
                  {
                    if (v145 > 0x1555555555555555) {
                      goto LABEL_184;
                    }
                    unint64_t v146 = (char *)operator new(12 * v145);
                  }
                  else
                  {
                    unint64_t v146 = 0;
                  }
                  int64_t v147 = &v146[4 * ((v141 - v142) >> 2)];
                  *(void *)int64_t v147 = v138;
                  *((_DWORD *)v147 + 2) = v139;
                  int v148 = v147;
                  if (v141 != v142)
                  {
                    do
                    {
                      uint64_t v149 = *(void *)(v141 - 12);
                      v141 -= 12;
                      int v150 = *((_DWORD *)v141 + 2);
                      *(void *)(v148 - 12) = v149;
                      v148 -= 12;
                      *((_DWORD *)v148 + 2) = v150;
                    }
                    while (v141 != v142);
                    uint64_t v141 = (char *)*((void *)v135 + 48);
                  }
                  int v111 = v147 + 12;
                  *((void *)v135 + 48) = v148;
                  *((void *)v135 + 49) = v147 + 12;
                  *((void *)v135 + 50) = &v146[12 * v145];
                  LODWORD(v32) = v164;
                  if (v141) {
                    operator delete(v141);
                  }
                }
                *((void *)v135 + 49) = v111;
LABEL_132:
                if (v32 == ++v108) {
                  goto LABEL_117;
                }
                continue;
              }
            }
            else
            {
              unint64_t v123 = 0;
              uint64_t v124 = (int *)(4 * v120);
              *(_DWORD *)(4 * v120) = v115;
              uint64_t v118 = 4 * v120 + 4;
              if (v117 != v119) {
                goto LABEL_145;
              }
            }
            break;
          }
          *((void *)v113 + 45) = v124;
          *((void *)v113 + 46) = v118;
          *((void *)v113 + 47) = &v123[4 * v160];
          if (v119) {
            goto LABEL_152;
          }
          goto LABEL_153;
        }
LABEL_117:
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v158, *(void *)(*(void *)(a1 + 112) + 8 * (int)v175), *(void *)(*(void *)(a1 + 48) + 12 * SHIDWORD(v175) + 4));
        uint64_t v102 = v156;
        uint64_t result = operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(unint64_t **)(a1 + 16), v158, v156);
        if (!result) {
          return result;
        }
        int v105 = v175;
        uint64_t v33 = a1 + 72;
      }
      operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(v33, v105);
      uint64_t v106 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(v33);
      uint64_t v104 = v176;
      if (v106 <= v176) {
        goto LABEL_180;
      }
    }
  }
LABEL_64:
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
  int v62 = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(v33, v176);
  unint64_t v170 = *(void *)(*(void *)(a1 + 48) + 12 * v62 + 4);
  uint64_t EnvelopeOf = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelopeOf(v33, v62);
  if (v62 < (int)v32)
  {
    uint64_t v64 = v62;
    unint64_t v65 = 1 - EnvelopeOf;
    if (EnvelopeOf < (uint64_t)0x8000000000000003) {
      unint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v166 = v65;
    unint64_t v162 = HIDWORD(v65);
    while (1)
    {
      unint64_t v67 = *(int *)(*(void *)(a1 + 48) + 12 * v64);
      if ((*(void *)(*(void *)(a1 + 160) + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67)) {
        goto LABEL_70;
      }
      unint64_t v68 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v68, *(_DWORD *)(*(void *)(a1 + 48) + 12 * v64));
      int v69 = *(_DWORD *)(*((void *)v68 + 16) + 4 * v67);
      if (v69 != -1) {
        break;
      }
LABEL_92:
      operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(a1 + 16), v67, *(void *)(*(void *)(a1 + 112) + 8 * v64), v170);
      unint64_t v89 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16);
      operations_research::sat::SchedulingConstraintHelper::AddOtherReason(v89, v67);
      LODWORD(v172[0]) = *(_DWORD *)(*((void *)v89 + 7) + 4 * v67) ^ 1;
      *(void *)((char *)v172 + 4) = v166;
      uint64_t v90 = v172[0];
      int64_t v92 = (char *)*((void *)v89 + 49);
      unint64_t v91 = *((void *)v89 + 50);
      if ((unint64_t)v92 < v91)
      {
        *(void *)int64_t v92 = v172[0];
        *((_DWORD *)v92 + 2) = v162;
        uint64_t v66 = v92 + 12;
      }
      else
      {
        uint64_t v93 = (unsigned char *)*((void *)v89 + 48);
        unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v92 - v93) >> 2) + 1;
        if (v94 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (void)v93) >> 2);
        if (2 * v95 > v94) {
          unint64_t v94 = 2 * v95;
        }
        if (v95 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v96 = 0x1555555555555555;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          if (v96 > 0x1555555555555555) {
            goto LABEL_184;
          }
          int v97 = (char *)operator new(12 * v96);
        }
        else
        {
          int v97 = 0;
        }
        uint64_t v98 = &v97[4 * ((v92 - v93) >> 2)];
        *(void *)uint64_t v98 = v90;
        *((_DWORD *)v98 + 2) = v162;
        uint64_t v99 = v98;
        if (v92 != v93)
        {
          do
          {
            uint64_t v100 = *(void *)(v92 - 12);
            v92 -= 12;
            int v101 = *((_DWORD *)v92 + 2);
            *(void *)(v99 - 12) = v100;
            v99 -= 12;
            *((_DWORD *)v99 + 2) = v101;
          }
          while (v92 != v93);
          int64_t v92 = (char *)*((void *)v89 + 48);
        }
        uint64_t v66 = v98 + 12;
        *((void *)v89 + 48) = v99;
        *((void *)v89 + 49) = v98 + 12;
        *((void *)v89 + 50) = &v97[12 * v96];
        if (v92) {
          operator delete(v92);
        }
      }
      *((void *)v89 + 49) = v66;
LABEL_70:
      if (++v64 == v32) {
        return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
      }
    }
    int v70 = v69 ^ 1;
    unint64_t v72 = (int *)*((void *)v68 + 46);
    unint64_t v71 = *((void *)v68 + 47);
    if ((unint64_t)v72 < v71)
    {
      int *v72 = v70;
      uint64_t v73 = (uint64_t)(v72 + 1);
      LODWORD(v32) = v164;
LABEL_91:
      *((void *)v68 + 46) = v73;
      goto LABEL_92;
    }
    long long v74 = (int *)*((void *)v68 + 45);
    uint64_t v75 = v72 - v74;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 62) {
      goto LABEL_186;
    }
    uint64_t v77 = v71 - (void)v74;
    if (v77 >> 1 > v76) {
      unint64_t v76 = v77 >> 1;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v159 = v76;
    if (v76)
    {
      if (v76 >> 62) {
        goto LABEL_184;
      }
      uint64_t v78 = operator new(4 * v76);
      int v79 = (int *)&v78[4 * v75];
      int *v79 = v70;
      uint64_t v73 = (uint64_t)(v79 + 1);
      if (v72 != v74)
      {
LABEL_83:
        unint64_t v80 = (char *)(v72 - 1) - (char *)v74;
        LODWORD(v32) = v164;
        if (v80 < 0x2C) {
          goto LABEL_194;
        }
        if ((unint64_t)((char *)v74 - v78) < 0x20) {
          goto LABEL_194;
        }
        uint64_t v81 = (v80 >> 2) + 1;
        uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v83 = &v72[v82 / 0xFFFFFFFFFFFFFFFCLL];
        int v79 = (int *)((char *)v79 - v82);
        uint64_t v84 = &v78[4 * v75 - 16];
        unint64_t v85 = v72 - 4;
        uint64_t v86 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v87 = *(_OWORD *)v85;
          *(v84 - 1) = *((_OWORD *)v85 - 1);
          *uint64_t v84 = v87;
          v84 -= 2;
          v85 -= 8;
          v86 -= 8;
        }
        while (v86);
        unint64_t v72 = v83;
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_194:
          do
          {
            int v88 = *--v72;
            *--int v79 = v88;
          }
          while (v72 != v74);
        }
        *((void *)v68 + 45) = v79;
        *((void *)v68 + 46) = v73;
        *((void *)v68 + 47) = &v78[4 * v159];
        if (!v74) {
          goto LABEL_91;
        }
LABEL_90:
        operator delete(v74);
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v78 = 0;
      int v79 = (int *)(4 * v75);
      *(_DWORD *)(4 * v75) = v70;
      uint64_t v73 = 4 * v75 + 4;
      if (v72 != v74) {
        goto LABEL_83;
      }
    }
    LODWORD(v32) = v164;
    *((void *)v68 + 45) = v79;
    *((void *)v68 + 46) = v73;
    *((void *)v68 + 47) = &v78[4 * v159];
    if (!v74) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 16));
}

void sub_23CCCF078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::DisjunctivePrecedences::~DisjunctivePrecedences(operations_research::sat::DisjunctivePrecedences *this)
{
  *(void *)this = &unk_26F0C2AC8;
  unint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_26F0C2AC8;
  unint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::sat::DisjunctiveWithTwoItems::~DisjunctiveWithTwoItems(operations_research::sat::DisjunctiveWithTwoItems *this)
{
}

void *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2B58;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C2B58;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  unint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  void *v2 = &unk_26F0C2B58;
  v2[2] = 0;
  v2[3] = 0;
  unint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v2[2] = v6;
    int v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_23CCCF5D4(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(void *result, void *a2)
{
  a2[1] = 0;
  *a2 = &unk_26F0C2B58;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v3 = (unsigned char *)result[1];
  unint64_t v2 = (unsigned char *)result[2];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_23CCCF68C(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  int64_t v4 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntervalsRepository>(*a2);
  unint64_t v6 = *(int **)(a1 + 8);
  int64_t v5 = *(int **)(a1 + 16);
  if (v6 == v5)
  {
    uint64_t v44 = v3;
    long long __p = 0;
    uint64_t v46 = 0;
    unint64_t v47 = 0;
LABEL_15:
    operations_research::sat::AllDifferentOnBounds((uint64_t)&__p, (uint64_t)v49);
    uint64_t v48 = v44;
    if (!v50) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, uint64_t *))(*v50 + 48))(v50, &v48);
    if (v50 == v49)
    {
      (*(void (**)(void *))(v49[0] + 32))(v49);
      unint64_t v14 = (char *)__p;
      if (!__p) {
        return;
      }
    }
    else
    {
      if (v50) {
        (*(void (**)(void))(*v50 + 40))();
      }
      unint64_t v14 = (char *)__p;
      if (!__p) {
        return;
      }
    }
    uint64_t v46 = v14;
    operator delete(v14);
    return;
  }
  int v7 = *(int **)(a1 + 8);
  while (1)
  {
    uint64_t v8 = *v7;
    if (*(_DWORD *)(v4[2] + 4 * v8) != -1) {
      break;
    }
    int v9 = *(_DWORD *)(v4[11] + 4 * v8);
    if (v9 == -1)
    {
      if (*(void *)(v4[14] + 8 * v8) != 1) {
        break;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(*v4 + 40);
      if (*(void *)(v10 + 12 * v9) != 1 || *(void *)(v10 + 12 * (v9 ^ 1)) != -1) {
        break;
      }
    }
    if (++v7 == v5)
    {
      long long __p = 0;
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      if ((char *)v5 - (char *)v6 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      long long __p = operator new((char *)v5 - (char *)v6);
      uint64_t v46 = (char *)__p;
      unint64_t v47 = (char *)__p + 4 * (v5 - v6);
      uint64_t v44 = v3;
      uint64_t v15 = (void *)(v3 + 32);
      while (1)
      {
        uint64_t v18 = *v6;
        int64_t v51 = (void (**)(void **))&unk_26F0C2BC8;
        int v52 = v18;
        uint64_t v53 = (void **)&v51;
        unint64_t v19 = (void *)*v15;
        uint64_t v20 = v15;
        do
        {
          unint64_t v21 = v19[4];
          BOOL v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
          if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d) {
            uint64_t v23 = v19;
          }
          else {
            uint64_t v23 = v19 + 1;
          }
          if (v22) {
            uint64_t v20 = v19;
          }
          unint64_t v19 = (void *)*v23;
        }
        while (*v23);
        int v24 = *(_DWORD *)(*(void *)(v20[5] + 40) + 4 * v18);
        unint64_t v25 = v46;
        if (v46 < v47)
        {
          *(_DWORD *)uint64_t v46 = v24;
          uint64_t v16 = (uint64_t)(v25 + 4);
LABEL_27:
          uint64_t v46 = (char *)v16;
          unint64_t v17 = (void (**)(void **))&unk_26F0C2BC8;
          goto LABEL_28;
        }
        unint64_t v26 = v5;
        uint64_t v27 = (char *)__p;
        int64_t v28 = v46 - (unsigned char *)__p;
        uint64_t v29 = (v46 - (unsigned char *)__p) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v47 - (unsigned char *)__p;
        if ((v47 - (unsigned char *)__p) >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        unint64_t v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v30;
        if (!v32) {
          break;
        }
        if (v32 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v33 = (char *)operator new(4 * v32);
        uint64_t v34 = &v33[4 * v29];
        *(_DWORD *)uint64_t v34 = v24;
        uint64_t v16 = (uint64_t)(v34 + 4);
        if (v25 != v27) {
          goto LABEL_48;
        }
LABEL_57:
        long long __p = v34;
        uint64_t v46 = (char *)v16;
        unint64_t v47 = &v33[4 * v32];
        if (!v27)
        {
          int64_t v5 = v26;
          uint64_t v15 = (void *)(v3 + 32);
          goto LABEL_27;
        }
        operator delete(v27);
        uint64_t v46 = (char *)v16;
        if (v53 != (void **)&v51)
        {
          int64_t v5 = v26;
          uint64_t v15 = (void *)(v3 + 32);
          if (v53) {
            (*((void (**)(void))*v53 + 5))();
          }
          goto LABEL_29;
        }
        unint64_t v17 = v51;
        int64_t v5 = v26;
        uint64_t v15 = (void *)(v3 + 32);
LABEL_28:
        v17[4]((void **)&v51);
LABEL_29:
        if (++v6 == v5) {
          goto LABEL_15;
        }
      }
      uint64_t v33 = 0;
      uint64_t v34 = (char *)(4 * v29);
      *(_DWORD *)(4 * v29) = v24;
      uint64_t v16 = 4 * v29 + 4;
      if (v25 == v27) {
        goto LABEL_57;
      }
LABEL_48:
      unint64_t v35 = v25 - 4 - v27;
      if (v35 < 0x2C) {
        goto LABEL_70;
      }
      if ((unint64_t)(v25 - &v33[v28]) < 0x20) {
        goto LABEL_70;
      }
      uint64_t v36 = (v35 >> 2) + 1;
      uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
      int v38 = &v25[-v37];
      v34 -= v37;
      uint64_t v39 = &v33[4 * v29 - 16];
      uint64_t v40 = v25 - 16;
      uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v42 = *(_OWORD *)v40;
        *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
        *(_OWORD *)uint64_t v39 = v42;
        v39 -= 32;
        v40 -= 32;
        v41 -= 8;
      }
      while (v41);
      unint64_t v25 = v38;
      if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_70:
        do
        {
          int v43 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v34 - 1) = v43;
          v34 -= 4;
        }
        while (v25 != v27);
      }
      goto LABEL_57;
    }
  }
  operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
  uint64_t v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(v3);
  if (*(void *)(a1 + 16) - *(void *)(a1 + 8) < 9uLL || !*(unsigned char *)(v11 + 157)) {
    operator new();
  }
  unint64_t v12 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<true>>(v3);
  operations_research::sat::CombinedDisjunctive<true>::AddNoOverlap(v12, (int **)(a1 + 8));
  unint64_t v13 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<false>>(v3);

  operations_research::sat::CombinedDisjunctive<false>::AddNoOverlap(v13, (int **)(a1 + 8));
}

void sub_23CCD05D8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C407206607ELL);
  _Unwind_Resume(a1);
}

void sub_23CCD05FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v26 = *(void **)(v23 + 48);
  if (v26)
  {
    *(void *)(v23 + 56) = v26;
    operator delete(v26);
  }
  std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(v24, v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_"
                     "EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVa"
                                "riable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11DisjunctiveERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::Disjunctive(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<true>>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  unint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d) {
      int64_t v5 = v1;
    }
    else {
      int64_t v5 = v1 + 1;
    }
    if (v4) {
      unint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<true>>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CCD09BC(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C4092E5BC27);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<true>::AddNoOverlap(void *a1, int **a2)
{
  unint64_t v3 = a1;
  uint64_t v6 = a1[8];
  unint64_t v5 = a1[9];
  BOOL v4 = (void **)(a1 + 8);
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  uint64_t v57 = v7 >> 2;
  if (v5 < (unint64_t)v4[2])
  {
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    *(void *)(v5 + 16) = 0;
    if (((unint64_t)v7 >> 2))
    {
      if ((((unint64_t)v7 >> 2) & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = (int)(v7 >> 2);
      int v9 = (char *)operator new(20 * v8);
      *(void *)unint64_t v5 = v9;
      *(void *)(v5 + 8) = v9;
      *(void *)(v5 + 16) = &v9[20 * (int)v8];
    }
    v3[9] = v5 + 32;
    v3[9] = v5 + 32;
    uint64_t v11 = (char *)v3[12];
    unint64_t v10 = v3[13];
    if ((unint64_t)v11 >= v10) {
      goto LABEL_6;
    }
LABEL_16:
    *(void *)uint64_t v11 = 0x8000000000000002;
    uint64_t v18 = v11 + 8;
    goto LABEL_27;
  }
  v3[9] = std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(v4, &v57);
  uint64_t v11 = (char *)v3[12];
  unint64_t v10 = v3[13];
  if ((unint64_t)v11 < v10) {
    goto LABEL_16;
  }
LABEL_6:
  unint64_t v12 = (char *)v3[11];
  uint64_t v13 = (v11 - v12) >> 3;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v10 - (void)v12;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
LABEL_53:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    unint64_t v17 = operator new(8 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v19 = &v17[8 * v13];
  uint64_t v20 = &v17[8 * v16];
  *unint64_t v19 = 0x8000000000000002;
  uint64_t v18 = v19 + 1;
  if (v11 != v12)
  {
    unint64_t v21 = v11 - v12 - 8;
    if (v21 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v12 - v17) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    int v24 = &v11[-v23];
    unint64_t v19 = (void *)((char *)v19 - v23);
    unint64_t v25 = &v17[8 * v13 - 16];
    unint64_t v26 = v11 - 16;
    uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      _OWORD *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    uint64_t v11 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v29 = *((void *)v11 - 1);
        v11 -= 8;
        *--unint64_t v19 = v29;
      }
      while (v11 != v12);
    }
  }
  v3[11] = v19;
  v3[12] = v18;
  v3[13] = v20;
  if (v12) {
    operator delete(v12);
  }
LABEL_27:
  v3[12] = v18;
  uint64_t v31 = *a2;
  unint64_t v30 = a2[1];
  if (*a2 != v30)
  {
    int v55 = v3;
    unint64_t v56 = (v5 - v6) >> 5;
    uint64_t v54 = a2[1];
    while (1)
    {
      while (1)
      {
        uint64_t v32 = v3[2] + 24 * *v31;
        uint64_t v34 = (uint64_t *)(v32 + 8);
        uint64_t v33 = *(char **)(v32 + 8);
        unint64_t v35 = *(void *)(v32 + 16);
        if ((unint64_t)v33 >= v35) {
          break;
        }
        *(_DWORD *)uint64_t v33 = v56;
        uint64_t *v34 = (uint64_t)(v33 + 4);
        if (++v31 == v30) {
          return;
        }
      }
      uint64_t v36 = *(char **)v32;
      uint64_t v37 = (uint64_t)&v33[-*(void *)v32];
      uint64_t v38 = v37 >> 2;
      unint64_t v39 = (v37 >> 2) + 1;
      if (v39 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v35 - (void)v36;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      unint64_t v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41) {
        break;
      }
      long long v42 = 0;
      int v43 = (_DWORD *)(4 * v38);
      *(_DWORD *)(4 * v38) = v56;
      uint64_t v44 = 4 * v38 + 4;
      if (v33 != v36) {
        goto LABEL_42;
      }
LABEL_48:
      *(void *)uint64_t v32 = v43;
      uint64_t *v34 = v44;
      *(void *)(v32 + 16) = &v42[4 * v41];
      if (v36) {
        operator delete(v36);
      }
      unint64_t v30 = v54;
      unint64_t v3 = v55;
      uint64_t *v34 = v44;
      if (++v31 == v54) {
        return;
      }
    }
    if (v41 >> 62) {
      goto LABEL_53;
    }
    long long v42 = operator new(4 * v41);
    int v43 = &v42[4 * v38];
    *int v43 = v56;
    uint64_t v44 = (uint64_t)(v43 + 1);
    if (v33 == v36) {
      goto LABEL_48;
    }
LABEL_42:
    unint64_t v45 = v33 - 4 - v36;
    if (v45 < 0x2C) {
      goto LABEL_59;
    }
    if ((unint64_t)(v33 - &v42[v37]) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v46 = (v45 >> 2) + 1;
    uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v48 = &v33[-v47];
    int v43 = (_DWORD *)((char *)v43 - v47);
    unint64_t v49 = &v42[4 * v38 - 16];
    uint64_t v50 = v33 - 16;
    uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *unint64_t v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    uint64_t v33 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v53 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *--int v43 = v53;
      }
      while (v33 != v36);
    }
    goto LABEL_48;
  }
}

void sub_23CCD0D88(_Unwind_Exception *exception_object)
{
  BOOL v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v2 + 72) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::CombinedDisjunctive<false>>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d) {
      unint64_t v5 = v1;
    }
    else {
      unint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::CombinedDisjunctive<false>>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CCD0F44(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10B1C4092E5BC27);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<false>::AddNoOverlap(void *a1, int **a2)
{
  unint64_t v3 = a1;
  uint64_t v6 = a1[8];
  unint64_t v5 = a1[9];
  BOOL v4 = (void **)(a1 + 8);
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  uint64_t v57 = v7 >> 2;
  if (v5 < (unint64_t)v4[2])
  {
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    *(void *)(v5 + 16) = 0;
    if (((unint64_t)v7 >> 2))
    {
      if ((((unint64_t)v7 >> 2) & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = (int)(v7 >> 2);
      int v9 = (char *)operator new(20 * v8);
      *(void *)unint64_t v5 = v9;
      *(void *)(v5 + 8) = v9;
      *(void *)(v5 + 16) = &v9[20 * (int)v8];
    }
    v3[9] = v5 + 32;
    v3[9] = v5 + 32;
    uint64_t v11 = (char *)v3[12];
    unint64_t v10 = v3[13];
    if ((unint64_t)v11 >= v10) {
      goto LABEL_6;
    }
LABEL_16:
    *(void *)uint64_t v11 = 0x8000000000000002;
    uint64_t v18 = v11 + 8;
    goto LABEL_27;
  }
  v3[9] = std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(v4, &v57);
  uint64_t v11 = (char *)v3[12];
  unint64_t v10 = v3[13];
  if ((unint64_t)v11 < v10) {
    goto LABEL_16;
  }
LABEL_6:
  unint64_t v12 = (char *)v3[11];
  uint64_t v13 = (v11 - v12) >> 3;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v10 - (void)v12;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
LABEL_53:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    unint64_t v17 = operator new(8 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v19 = &v17[8 * v13];
  uint64_t v20 = &v17[8 * v16];
  *unint64_t v19 = 0x8000000000000002;
  uint64_t v18 = v19 + 1;
  if (v11 != v12)
  {
    unint64_t v21 = v11 - v12 - 8;
    if (v21 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v12 - v17) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v22 = (v21 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    int v24 = &v11[-v23];
    unint64_t v19 = (void *)((char *)v19 - v23);
    unint64_t v25 = &v17[8 * v13 - 16];
    unint64_t v26 = v11 - 16;
    uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      _OWORD *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    uint64_t v11 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v29 = *((void *)v11 - 1);
        v11 -= 8;
        *--unint64_t v19 = v29;
      }
      while (v11 != v12);
    }
  }
  v3[11] = v19;
  v3[12] = v18;
  v3[13] = v20;
  if (v12) {
    operator delete(v12);
  }
LABEL_27:
  v3[12] = v18;
  uint64_t v31 = *a2;
  unint64_t v30 = a2[1];
  if (*a2 != v30)
  {
    int v55 = v3;
    unint64_t v56 = (v5 - v6) >> 5;
    uint64_t v54 = a2[1];
    while (1)
    {
      while (1)
      {
        uint64_t v32 = v3[2] + 24 * *v31;
        uint64_t v34 = (uint64_t *)(v32 + 8);
        uint64_t v33 = *(char **)(v32 + 8);
        unint64_t v35 = *(void *)(v32 + 16);
        if ((unint64_t)v33 >= v35) {
          break;
        }
        *(_DWORD *)uint64_t v33 = v56;
        uint64_t *v34 = (uint64_t)(v33 + 4);
        if (++v31 == v30) {
          return;
        }
      }
      uint64_t v36 = *(char **)v32;
      uint64_t v37 = (uint64_t)&v33[-*(void *)v32];
      uint64_t v38 = v37 >> 2;
      unint64_t v39 = (v37 >> 2) + 1;
      if (v39 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v35 - (void)v36;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      unint64_t v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41) {
        break;
      }
      long long v42 = 0;
      int v43 = (_DWORD *)(4 * v38);
      *(_DWORD *)(4 * v38) = v56;
      uint64_t v44 = 4 * v38 + 4;
      if (v33 != v36) {
        goto LABEL_42;
      }
LABEL_48:
      *(void *)uint64_t v32 = v43;
      uint64_t *v34 = v44;
      *(void *)(v32 + 16) = &v42[4 * v41];
      if (v36) {
        operator delete(v36);
      }
      unint64_t v30 = v54;
      unint64_t v3 = v55;
      uint64_t *v34 = v44;
      if (++v31 == v54) {
        return;
      }
    }
    if (v41 >> 62) {
      goto LABEL_53;
    }
    long long v42 = operator new(4 * v41);
    int v43 = &v42[4 * v38];
    *int v43 = v56;
    uint64_t v44 = (uint64_t)(v43 + 1);
    if (v33 == v36) {
      goto LABEL_48;
    }
LABEL_42:
    unint64_t v45 = v33 - 4 - v36;
    if (v45 < 0x2C) {
      goto LABEL_59;
    }
    if ((unint64_t)(v33 - &v42[v37]) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v46 = (v45 >> 2) + 1;
    uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v48 = &v33[-v47];
    int v43 = (_DWORD *)((char *)v43 - v47);
    unint64_t v49 = &v42[4 * v38 - 16];
    uint64_t v50 = v33 - 16;
    uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *unint64_t v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    uint64_t v33 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v53 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *--int v43 = v53;
      }
      while (v33 != v36);
    }
    goto LABEL_48;
  }
}

void sub_23CCD1310(_Unwind_Exception *exception_object)
{
  BOOL v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v2 + 72) = v1;
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::~__func()
{
}

_DWORD *std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26F0C2BC8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F0C2BC8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)(a2 + 32);
  uint64_t v2 = (void *)(a2 + 32);
  unint64_t v3 = v4;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntervalsRepository>(void)::d) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v2 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  return *(unsigned int *)(*(void *)(v2[5] + 40) + 4 * *(int *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8StartVarEN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEEEUlRKNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1},std::allocator<operations_research::sat::StartVar(gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>)::{lambda(operations_research::sat::Model const&)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model const&)>::target_type()
{
}

uint64_t operations_research::sat::CombinedDisjunctive<true>::CombinedDisjunctive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26F0C2C58;
  BOOL v4 = (operations_research::sat::SchedulingConstraintHelper *)operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(a2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v4, 1);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (int)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 40) - *(void *)(*(void *)(a1 + 8) + 32)) >> 2);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3);
  if (v6 <= v8)
  {
    if (v6 < v8)
    {
      uint64_t v9 = v5 + 24 * (int)v6;
      if (v7 != v9)
      {
        uint64_t v10 = *(void *)(a1 + 24);
        do
        {
          unint64_t v12 = *(void **)(v10 - 24);
          v10 -= 24;
          uint64_t v11 = v12;
          if (v12)
          {
            *(void *)(v7 - 16) = v11;
            operator delete(v11);
          }
          uint64_t v7 = v10;
        }
        while (v10 != v9);
      }
      *(void *)(a1 + 24) = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 16, v6 - v8);
  }
  uint64_t v13 = (operations_research::sat::GenericLiteralWatcher *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  unsigned int v14 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v13, a1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), v14, v13, 1, 0);
  operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v13, v14);
  return a1;
}

void sub_23CCD15B8(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    unint64_t v6 = (void *)v1[5];
    if (!v6)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    unint64_t v6 = (void *)v1[5];
    if (!v6) {
      goto LABEL_3;
    }
  }
  operator delete(v6);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::AllIntervalsHelper>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::AllIntervalsHelper>();
  }
  return v2[5];
}

void operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(void *a1)
{
  operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(a1);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CombinedDisjunctive<true>::Propagate(uint64_t a1)
{
  uint64_t v1 = a1;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), 1);
  uint64_t v2 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  if (v4 != v3)
  {
    unint64_t v5 = v3 - v4 - 32;
    uint64_t v6 = *(void *)(v1 + 64);
    if (v5 < 0x20) {
      goto LABEL_139;
    }
    uint64_t v7 = (v5 >> 5) + 1;
    uint64_t v6 = v4 + 32 * (v7 & 0xFFFFFFFFFFFFFFELL);
    unint64_t v8 = (uint64_t *)(v4 + 32);
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v10 = *v8;
      *(v8 - 3) = *(v8 - 4);
      v8[1] = v10;
      *((_DWORD *)v8 - 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_139:
      do
      {
        *(void *)(v6 + 8) = *(void *)v6;
        *(_DWORD *)(v6 + 24) = 0;
        v6 += 32;
      }
      while (v6 != v3);
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(v1 + 88, (uint64_t)(*(void *)(v1 + 96) - *(void *)(v1 + 88)) >> 3, &operations_research::sat::kMinIntegerValue);
  uint64_t v11 = *(void *)(*(void *)(v1 + 8) + 40) - *(void *)(*(void *)(v1 + 8) + 32);
  int v148 = (uint64_t *)(v1 + 88);
  LOBYTE(v149) = 0;
  unint64_t v137 = (void *)(v1 + 40);
  std::vector<BOOL>::assign((char **)(v1 + 40), (int)(v11 >> 2), &v149);
  unint64_t v12 = *(int **)v2;
  int v135 = (int *)*((void *)v2 + 1);
  if (*(int **)v2 == v135) {
    return 1;
  }
  int64_t v13 = 0x8000000000000002;
  unsigned int v14 = ((unint64_t)v11 >> 2) - 1;
  uint64_t v143 = v1;
  while (1)
  {
    int v15 = *v12;
    int64_t v136 = v12;
    int64_t v139 = *(void *)(v12 + 1);
    unint64_t v16 = *(void **)(v1 + 8);
    unint64_t v17 = *(int *)(v16[16] + 4 * *v12);
    if (v17 != -1
      && ((*(void *)(*(void *)(*v16 + 24) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 & 0x3F ^ 1)) & 1) != 0)
    {
      goto LABEL_11;
    }
    int v140 = v15;
    if ((v14 & 0x80000000) == 0)
    {
      while (1)
      {
        uint64_t v18 = (int *)(*(void *)started + 12 * v14);
        unint64_t v16 = *(void **)(v1 + 8);
        if (v139 <= *(void *)(v18 + 1)) {
          goto LABEL_63;
        }
        int v19 = *v18;
        unint64_t v20 = *(int *)(v16[16] + 4 * *v18);
        int v141 = v14;
        if (v20 == -1
          || ((*(void *)(*(void *)(*v16 + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          *(void *)(*v137 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          uint64_t v21 = *(void *)(v16[1] + 40);
          int v22 = *(_DWORD *)(v16[10] + 4 * v19);
          uint64_t v23 = (uint64_t *)(v22 == -1 ? v16[13] + 8 * v19 : v21 + 12 * v22);
          uint64_t v24 = *(void *)(v21 + 12 * *(int *)(v16[4] + 4 * v19));
          uint64_t v25 = *v23;
          uint64_t v26 = *(void *)(v21 + 12 * *(int *)(v16[7] + 4 * v19)) - *v23;
          uint64_t v27 = v24 <= v26 ? v26 : v24;
          uint64_t v28 = *(void *)(v1 + 16) + 24 * v19;
          unint64_t v30 = *(int **)v28;
          uint64_t v29 = *(int **)(v28 + 8);
          if (*(int **)v28 != v29) {
            break;
          }
        }
LABEL_16:
        unsigned int v14 = v141 - 1;
        int v15 = v140;
        if (v141 <= 0)
        {
          unint64_t v16 = *(void **)(v1 + 8);
          unsigned int v14 = -1;
          goto LABEL_63;
        }
      }
      uint64_t v31 = *(void *)(v1 + 64);
      uint64_t v145 = *v23;
      int v146 = v19;
      unint64_t v144 = *(int **)(v28 + 8);
      while (1)
      {
        uint64_t v32 = *v30;
        uint64_t v33 = (char **)(v31 + 32 * v32);
        uint64_t v34 = *v33;
        unint64_t v35 = v33[1];
        uint64_t v36 = (v35 - *v33) / 20;
        unint64_t v37 = (unint64_t)v33[2];
        if ((unint64_t)v35 >= v37)
        {
          unint64_t v38 = v36 + 1;
          if ((unint64_t)(v36 + 1) > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - (void)v34) >> 2);
          if (2 * v39 > v38) {
            unint64_t v38 = 2 * v39;
          }
          if (v39 >= 0x666666666666666) {
            unint64_t v40 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 > 0xCCCCCCCCCCCCCCCLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int64_t v41 = v13;
            long long v42 = (char *)operator new(20 * v40);
            uint64_t v25 = v145;
            int v19 = v146;
          }
          else
          {
            int64_t v41 = v13;
            long long v42 = 0;
          }
          int v43 = &v42[20 * v36];
          *(_DWORD *)int v43 = v19;
          *(void *)(v43 + 4) = v27;
          *(void *)(v43 + 12) = v25;
          uint64_t v44 = v43;
          if (v35 != v34)
          {
            do
            {
              long long v45 = *(_OWORD *)(v35 - 20);
              *((_DWORD *)v44 - 1) = *((_DWORD *)v35 - 1);
              *(_OWORD *)(v44 - 20) = v45;
              v44 -= 20;
              v35 -= 20;
            }
            while (v35 != v34);
            unint64_t v35 = *v33;
          }
          uint64_t v46 = v43 + 20;
          *uint64_t v33 = v44;
          v33[1] = v43 + 20;
          v33[2] = &v42[20 * v40];
          if (v35)
          {
            operator delete(v35);
            uint64_t v25 = v145;
            int v19 = v146;
          }
          uint64_t v1 = v143;
          uint64_t v29 = v144;
          int64_t v13 = v41;
          v33[1] = v46;
          if ((int)v36 >= 1)
          {
LABEL_50:
            unint64_t v47 = v36 + 1;
            uint64_t v48 = 20 * v36;
            while (1)
            {
              unint64_t v49 = *v33;
              if (*(void *)&(*v33)[20 * (v47 - 2) + 4] <= v27) {
                break;
              }
              uint64_t v50 = &v49[20 * (v47 - 2)];
              uint64_t v51 = &v49[v48];
              long long v52 = *(_OWORD *)v50;
              *((_DWORD *)v51 + 4) = *((_DWORD *)v50 + 4);
              *(_OWORD *)uint64_t v51 = v52;
              LODWORD(v36) = v36 - 1;
              --v47;
              v48 -= 20;
              if (v47 <= 1)
              {
                LODWORD(v36) = 0;
                break;
              }
            }
          }
        }
        else
        {
          *(_DWORD *)unint64_t v35 = v19;
          *(void *)(v35 + 4) = v27;
          *(void *)(v35 + 12) = v25;
          v33[1] = v35 + 20;
          if ((int)v36 >= 1) {
            goto LABEL_50;
          }
        }
        uint64_t v53 = (uint64_t)&(*v33)[20 * (int)v36];
        *(_DWORD *)uint64_t v53 = v19;
        *(void *)(v53 + 4) = v27;
        *(void *)(v53 + 12) = v25;
        uint64_t v54 = v31 + 32 * v32;
        int v56 = *(_DWORD *)(v54 + 24);
        int v55 = (_DWORD *)(v54 + 24);
        if ((int)v36 <= v56) {
          *int v55 = 0;
        }
        uint64_t v31 = *(void *)(v1 + 64);
        uint64_t v57 = (uint64_t *)(v31 + 32 * v32);
        uint64_t v58 = *v57;
        unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57[1] - *v57) >> 2);
        int v62 = *((_DWORD *)v57 + 6);
        uint64_t v60 = (int *)(v57 + 3);
        int v61 = v62;
        int64_t v63 = 0x8000000000000002;
        if (v62 < (int)v59)
        {
          uint64_t v64 = (uint64_t *)(v58 + 20 * v61 + 12);
          uint64_t v65 = (int)v59 - (uint64_t)v61;
          int64_t v63 = 0x8000000000000002;
          do
          {
            while (1)
            {
              int64_t v67 = *(v64 - 1);
              if (v67 >= v63) {
                break;
              }
              uint64_t v66 = *v64;
              uint64_t v64 = (uint64_t *)((char *)v64 + 20);
              v63 += v66;
              ++v61;
              if (!--v65) {
                goto LABEL_28;
              }
            }
            int *v60 = v61;
            uint64_t v68 = *v64;
            uint64_t v64 = (uint64_t *)((char *)v64 + 20);
            int64_t v63 = v68 + v67;
            ++v61;
            --v65;
          }
          while (v65);
        }
LABEL_28:
        *(void *)(*v148 + 8 * v32) = v63;
        if (v13 <= v63) {
          int64_t v13 = v63;
        }
        if (++v30 == v29) {
          goto LABEL_16;
        }
      }
    }
LABEL_63:
    uint64_t v69 = *(void *)(*(void *)(v16[1] + 40) + 12 * *(int *)(v16[4] + 4 * v15));
    uint64_t v153 = v69;
    unsigned int v142 = v14;
    if (v69 >= v13) {
      goto LABEL_10;
    }
    uint64_t v70 = *(void *)(v1 + 16) + 24 * v15;
    unint64_t v71 = *(int **)v70;
    unint64_t v72 = *(int **)(v70 + 8);
    if ((*(void *)(*(void *)(v1 + 40) + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      if (v71 == v72) {
        goto LABEL_10;
      }
      int64_t v147 = v13;
      int v73 = 0;
      uint64_t v74 = *v148;
      int v75 = -1;
      do
      {
        int v76 = *v71;
        if (v69 < *(void *)(v74 + 8 * *v71))
        {
          uint64_t v77 = *(void *)(v1 + 64) + 32 * v76;
          uint64_t v78 = *(void *)v77;
          unint64_t v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v77 + 8) - *(void *)v77) >> 2);
          int v82 = *(_DWORD *)(v77 + 24);
          unint64_t v80 = (int *)(v77 + 24);
          int v81 = v82;
          if (v82 + 1 == v79 && *(_DWORD *)(v78 + 20 * v81) == v15)
          {
            int v81 = 0;
            *unint64_t v80 = 0;
          }
          if (v81 >= (int)v79)
          {
            int v83 = 0;
            int64_t v87 = 0x8000000000000002;
          }
          else
          {
            int v83 = 0;
            char v84 = 0;
            unint64_t v85 = (void *)(v78 + 20 * v81 + 12);
            uint64_t v86 = (int)v79 - (uint64_t)v81;
            int64_t v87 = 0x8000000000000002;
            do
            {
              if (*((_DWORD *)v85 - 3) == v15)
              {
                char v84 = 1;
              }
              else
              {
                int64_t v88 = *(v85 - 1);
                if (v88 >= v87)
                {
                  if ((v84 & 1) == 0) {
                    *unint64_t v80 = v81;
                  }
                  int64_t v87 = *v85 + v88;
                  int v83 = v81;
                }
                else
                {
                  v87 += *v85;
                }
              }
              unint64_t v85 = (void *)((char *)v85 + 20);
              ++v81;
              --v86;
            }
            while (v86);
          }
          if (v87 > v69)
          {
            uint64_t v153 = v87;
            uint64_t v69 = v87;
            int v73 = v83;
            int v75 = v76;
          }
        }
        ++v71;
      }
      while (v71 != v72);
    }
    else
    {
      if (v71 == v72) {
        goto LABEL_10;
      }
      uint64_t v89 = *v148;
      int v75 = -1;
      do
      {
        uint64_t v90 = *v71;
        uint64_t v91 = *(void *)(v89 + 8 * v90);
        if (v91 > v69)
        {
          uint64_t v153 = *(void *)(v89 + 8 * v90);
          uint64_t v69 = v91;
          int v75 = v90;
        }
        ++v71;
      }
      while (v71 != v72);
      if (v75 == -1) {
        goto LABEL_10;
      }
      uint64_t v92 = *(void *)(v1 + 64) + 32 * v75;
      uint64_t v93 = *(void *)v92;
      unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v92 + 8) - *(void *)v92) >> 2);
      int v97 = *(_DWORD *)(v92 + 24);
      unint64_t v95 = (int *)(v92 + 24);
      int v96 = v97;
      if (v97 + 1 == v94 && *(_DWORD *)(v93 + 20 * v96) == v15)
      {
        int v96 = 0;
        *unint64_t v95 = 0;
      }
      if (v96 >= (int)v94)
      {
        int v73 = 0;
        int64_t v101 = 0x8000000000000002;
      }
      else
      {
        int v73 = 0;
        char v98 = 0;
        uint64_t v99 = (void *)(v93 + 20 * v96 + 12);
        uint64_t v100 = (int)v94 - (uint64_t)v96;
        int64_t v101 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v99 - 3) == v15)
          {
            char v98 = 1;
          }
          else
          {
            int64_t v102 = *(v99 - 1);
            if (v102 >= v101)
            {
              if ((v98 & 1) == 0) {
                *unint64_t v95 = v96;
              }
              int64_t v101 = *v99 + v102;
              int v73 = v96;
            }
            else
            {
              v101 += *v99;
            }
          }
          uint64_t v99 = (void *)((char *)v99 + 20);
          ++v96;
          --v100;
        }
        while (v100);
      }
      int64_t v147 = v13;
      int64_t v152 = v101;
      if (v101 != v69) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v152, (int)&v153, "end_min_of_critical_tasks == new_start_min");
      }
    }
    if (v75 != -1) {
      break;
    }
    int64_t v13 = v147;
LABEL_10:
    uint64_t v1 = v143;
    unsigned int v14 = v142;
LABEL_11:
    unint64_t v12 = v136 + 3;
    if (v136 + 3 == v135) {
      return 1;
    }
  }
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  int v103 = (uint64_t *)(*(void *)(v1 + 64) + 32 * v75);
  unint64_t v104 = v73;
  uint64_t v106 = *v103;
  uint64_t v105 = v103[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v105 - *v103) >> 2) > v73)
  {
    unint64_t v107 = *(void *)(v106 + 20 * v73 + 4);
    uint64_t v108 = 20 * v73;
    do
    {
      int v109 = *(_DWORD *)(v106 + v108);
      if (v109 != v15)
      {
        operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), *(_DWORD *)(v106 + v108));
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v1 + 8), v109, *(void *)(*v103 + v108 + 12), v107);
        operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), v109, v139 - 1);
        uint64_t v106 = *v103;
        uint64_t v105 = v103[1];
      }
      ++v104;
      v108 += 20;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v105 - v106) >> 2) > v104);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(void **)(v1 + 8), v15, v139);
  if (operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(unint64_t **)(v1 + 8), v15, v153))
  {
    if ((*(void *)(*v137 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      uint64_t v110 = *(void **)(v1 + 8);
      uint64_t v111 = *(void *)(v110[1] + 40);
      int v112 = *(_DWORD *)(v110[10] + 4 * v15);
      int64_t v13 = v147;
      if (v112 == -1) {
        int64_t v113 = (uint64_t *)(v110[13] + 8 * v15);
      }
      else {
        int64_t v113 = (uint64_t *)(v111 + 12 * v112);
      }
      uint64_t v114 = *(void *)(v111 + 12 * *(int *)(v110[4] + 4 * v15));
      uint64_t v115 = *v113;
      uint64_t v116 = *(void *)(v111 + 12 * *(int *)(v110[7] + 4 * v15)) - *v113;
      if (v114 <= v116) {
        uint64_t v117 = v116;
      }
      else {
        uint64_t v117 = v114;
      }
      uint64_t v118 = *(void *)(v1 + 16) + 24 * v15;
      uint64_t v119 = v1;
      uint64_t v120 = *(int **)v118;
      unint64_t v121 = *(int **)(v118 + 8);
      if (*(int **)v118 != v121)
      {
        uint64_t v122 = *(void *)(v119 + 64);
        do
        {
          uint64_t v123 = *v120;
          int64_t v124 = v13;
          int v149 = v140;
          uint64_t v150 = v117;
          uint64_t v151 = v115;
          operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(v122 + 32 * v123, &v149);
          int64_t v13 = v124;
          uint64_t v122 = *(void *)(v143 + 64);
          uint64_t v125 = *(void *)(v122 + 32 * v123);
          unint64_t v126 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v122 + 32 * v123 + 8) - v125) >> 2);
          int v127 = *(_DWORD *)(v122 + 32 * v123 + 24);
          int64_t v128 = 0x8000000000000002;
          if (v127 < (int)v126)
          {
            uint64_t v129 = (uint64_t *)(v125 + 20 * v127 + 12);
            uint64_t v130 = (int)v126 - (uint64_t)v127;
            int64_t v128 = 0x8000000000000002;
            do
            {
              while (1)
              {
                int64_t v132 = *(v129 - 1);
                if (v132 >= v128) {
                  break;
                }
                uint64_t v131 = *v129;
                uint64_t v129 = (uint64_t *)((char *)v129 + 20);
                v128 += v131;
                ++v127;
                if (!--v130) {
                  goto LABEL_123;
                }
              }
              *(_DWORD *)(v122 + 32 * v123 + 24) = v127;
              uint64_t v133 = *v129;
              uint64_t v129 = (uint64_t *)((char *)v129 + 20);
              int64_t v128 = v133 + v132;
              ++v127;
              --v130;
            }
            while (v130);
          }
LABEL_123:
          *(void *)(*v148 + 8 * v123) = v128;
          if (v124 <= v128) {
            int64_t v13 = v128;
          }
          ++v120;
        }
        while (v120 != v121);
      }
    }
    else
    {
      int64_t v13 = v147;
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_23CCD22E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::Model::MyNew<operations_research::sat::AllIntervalsHelper>()
{
}

void sub_23CCD2364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x23ECF2BC0](v11, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntervalsRepository::AllIntervals(operations_research::sat::IntervalsRepository *this@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 6);
  if ((int)((unint64_t)(v3 - v4) >> 2) >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    while (v7 < v6)
    {
      *(_DWORD *)uint64_t v7 = v8;
      uint64_t v9 = (uint64_t)(v7 + 4);
LABEL_4:
      a2[1] = (int *)v9;
      ++v8;
      uint64_t v7 = (char *)v9;
      if (v8 >= (int)((unint64_t)(v3 - v4) >> 2)) {
        return;
      }
    }
    uint64_t v10 = (v7 - v5) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v6 - v5) >> 1 > v11) {
      unint64_t v11 = (v6 - v5) >> 1;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = v3;
      unsigned int v14 = operator new(4 * v12);
      uint64_t v3 = v13;
      int v15 = (int *)&v14[4 * v10];
      *int v15 = v8;
      uint64_t v9 = (uint64_t)(v15 + 1);
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = (int *)(4 * v10);
      *(_DWORD *)(4 * v10) = v8;
      uint64_t v9 = 4 * v10 + 4;
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    unint64_t v16 = v7 - 4 - v5;
    if (v16 >= 0xBC)
    {
      if (&v14[v7 - v5 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v7 - v5 - 4])
      {
        unint64_t v17 = v7;
      }
      else if (&v7[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        unint64_t v17 = v7;
      }
      else if ((unint64_t)(v5 - v14) >= 0x20)
      {
        uint64_t v19 = (v16 >> 2) + 1;
        uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v17 = &v7[-v20];
        int v15 = (int *)((char *)v15 - v20);
        uint64_t v21 = &v14[4 * v10 - 16];
        int v22 = v7 - 16;
        uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *uint64_t v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          uint64_t v6 = &v14[4 * v12];
          *a2 = v15;
          a2[1] = (int *)v9;
          a2[2] = (int *)v6;
          if (v5)
          {
            operator delete(v5);
            uint64_t v4 = *((void *)this + 5);
            uint64_t v3 = *((void *)this + 6);
          }
          unint64_t v5 = (char *)v15;
          goto LABEL_4;
        }
      }
      else
      {
        unint64_t v17 = v7;
      }
    }
    else
    {
      unint64_t v17 = v7;
    }
    do
    {
      int v18 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--int v15 = v18;
    }
    while (v17 != v5);
    goto LABEL_20;
  }
}

void sub_23CCD25C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::AllIntervalsHelper>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &unk_26F0C2CA0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllIntervalsHelper>::~Delete(void *a1)
{
  uint64_t v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &unk_26F0C2CA0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x23ECF2BC0]();
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::CombinedDisjunctive<true>::~CombinedDisjunctive(void *a1)
{
  *a1 = &unk_26F0C2C58;
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[8];
  if (v3)
  {
    uint64_t v4 = a1[9];
    unint64_t v5 = (void *)a1[8];
    if (v4 != v3)
    {
      uint64_t v6 = a1[9];
      do
      {
        int v8 = *(void **)(v6 - 32);
        v6 -= 32;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)a1[8];
    }
    a1[9] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = a1[2];
  if (v10)
  {
    uint64_t v11 = a1[3];
    unint64_t v12 = (void *)a1[2];
    if (v11 != v10)
    {
      uint64_t v13 = a1[3];
      do
      {
        int v15 = *(void **)(v13 - 24);
        v13 -= 24;
        unsigned int v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      unint64_t v12 = (void *)a1[2];
    }
    a1[3] = v10;
    operator delete(v12);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<true>>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2CD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<true>>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2CD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

char *std::vector<operations_research::sat::TaskSet>::__emplace_back_slow_path<unsigned long>(void **a1, uint64_t *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v5];
  unint64_t v12 = &v10[32 * v9];
  uint64_t v13 = *a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = 0;
  *((_DWORD *)v11 + 6) = 0;
  if (v13)
  {
    if ((v13 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v14 = v13;
    int v15 = (char *)operator new(20 * (int)v13);
    *(void *)uint64_t v11 = v15;
    *((void *)v11 + 1) = v15;
    *((void *)v11 + 2) = &v15[20 * v14];
  }
  unint64_t v16 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v16;
    a1[2] = v12;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      int v18 = &v11[v17];
      uint64_t v19 = &v3[v17];
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v3[v17 - 32];
      *((void *)v18 - 2) = *(void *)&v3[v17 - 16];
      *((void *)v19 - 4) = 0;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((_DWORD *)v18 - 2) = *(_DWORD *)&v3[v17 - 8];
      v17 -= 32;
    }
    while (&v3[v17] != v4);
    uint64_t v20 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    unint64_t v16 = v11 + 32;
    *a1 = &v11[v17];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 4);
        v21 -= 32;
        int v22 = v23;
        if (v23)
        {
          *((void *)v3 - 3) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void sub_23CCD2A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::__split_buffer<operations_research::sat::TaskSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::TaskSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 32;
        uint64_t v4 = *(void **)(v2 - 32);
        *(void *)(a1 + 16) = v2 - 32;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 24) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t operations_research::sat::CombinedDisjunctive<false>::CombinedDisjunctive(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26F0C2D10;
  uint64_t v4 = (operations_research::sat::SchedulingConstraintHelper *)operations_research::sat::Model::GetOrCreate<operations_research::sat::AllIntervalsHelper>(a2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(v4, 0);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (int)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 40) - *(void *)(*(void *)(a1 + 8) + 32)) >> 2);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3);
  if (v6 <= v8)
  {
    if (v6 < v8)
    {
      uint64_t v9 = v5 + 24 * (int)v6;
      if (v7 != v9)
      {
        uint64_t v10 = *(void *)(a1 + 24);
        do
        {
          unint64_t v12 = *(void **)(v10 - 24);
          v10 -= 24;
          uint64_t v11 = v12;
          if (v12)
          {
            *(void *)(v7 - 16) = v11;
            operator delete(v11);
          }
          uint64_t v7 = v10;
        }
        while (v10 != v9);
      }
      *(void *)(a1 + 24) = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 16, v6 - v8);
  }
  uint64_t v13 = (operations_research::sat::GenericLiteralWatcher *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  unsigned int v14 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v13, a1);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), v14, v13, 1, 0);
  operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v13, v14);
  return a1;
}

void sub_23CCD2C44(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[11];
  if (v5)
  {
    v1[12] = v5;
    operator delete(v5);
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    unint64_t v6 = (void *)v1[5];
    if (!v6)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v3);
    unint64_t v6 = (void *)v1[5];
    if (!v6) {
      goto LABEL_3;
    }
  }
  operator delete(v6);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(void *a1)
{
  operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(a1);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::CombinedDisjunctive<false>::Propagate(uint64_t a1)
{
  uint64_t v1 = a1;
  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 8), 0);
  uint64_t v2 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  uint64_t started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  if (v4 != v3)
  {
    unint64_t v5 = v3 - v4 - 32;
    uint64_t v6 = *(void *)(v1 + 64);
    if (v5 < 0x20) {
      goto LABEL_139;
    }
    uint64_t v7 = (v5 >> 5) + 1;
    uint64_t v6 = v4 + 32 * (v7 & 0xFFFFFFFFFFFFFFELL);
    unint64_t v8 = (uint64_t *)(v4 + 32);
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v10 = *v8;
      *(v8 - 3) = *(v8 - 4);
      v8[1] = v10;
      *((_DWORD *)v8 - 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_139:
      do
      {
        *(void *)(v6 + 8) = *(void *)v6;
        *(_DWORD *)(v6 + 24) = 0;
        v6 += 32;
      }
      while (v6 != v3);
    }
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(v1 + 88, (uint64_t)(*(void *)(v1 + 96) - *(void *)(v1 + 88)) >> 3, &operations_research::sat::kMinIntegerValue);
  uint64_t v11 = *(void *)(*(void *)(v1 + 8) + 40) - *(void *)(*(void *)(v1 + 8) + 32);
  int v148 = (uint64_t *)(v1 + 88);
  LOBYTE(v149) = 0;
  unint64_t v137 = (void *)(v1 + 40);
  std::vector<BOOL>::assign((char **)(v1 + 40), (int)(v11 >> 2), &v149);
  unint64_t v12 = *(int **)v2;
  int v135 = (int *)*((void *)v2 + 1);
  if (*(int **)v2 == v135) {
    return 1;
  }
  int64_t v13 = 0x8000000000000002;
  unsigned int v14 = ((unint64_t)v11 >> 2) - 1;
  uint64_t v143 = v1;
  while (1)
  {
    int v15 = *v12;
    int64_t v136 = v12;
    int64_t v139 = *(void *)(v12 + 1);
    unint64_t v16 = *(void **)(v1 + 8);
    unint64_t v17 = *(int *)(v16[16] + 4 * *v12);
    if (v17 != -1
      && ((*(void *)(*(void *)(*v16 + 24) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 & 0x3F ^ 1)) & 1) != 0)
    {
      goto LABEL_11;
    }
    int v140 = v15;
    if ((v14 & 0x80000000) == 0)
    {
      while (1)
      {
        int v18 = (int *)(*(void *)started + 12 * v14);
        unint64_t v16 = *(void **)(v1 + 8);
        if (v139 <= *(void *)(v18 + 1)) {
          goto LABEL_63;
        }
        int v19 = *v18;
        unint64_t v20 = *(int *)(v16[16] + 4 * *v18);
        int v141 = v14;
        if (v20 == -1
          || ((*(void *)(*(void *)(*v16 + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          *(void *)(*v137 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          uint64_t v21 = *(void *)(v16[1] + 40);
          int v22 = *(_DWORD *)(v16[10] + 4 * v19);
          uint64_t v23 = (uint64_t *)(v22 == -1 ? v16[13] + 8 * v19 : v21 + 12 * v22);
          uint64_t v24 = *(void *)(v21 + 12 * *(int *)(v16[4] + 4 * v19));
          uint64_t v25 = *v23;
          uint64_t v26 = *(void *)(v21 + 12 * *(int *)(v16[7] + 4 * v19)) - *v23;
          uint64_t v27 = v24 <= v26 ? v26 : v24;
          uint64_t v28 = *(void *)(v1 + 16) + 24 * v19;
          unint64_t v30 = *(int **)v28;
          uint64_t v29 = *(int **)(v28 + 8);
          if (*(int **)v28 != v29) {
            break;
          }
        }
LABEL_16:
        unsigned int v14 = v141 - 1;
        int v15 = v140;
        if (v141 <= 0)
        {
          unint64_t v16 = *(void **)(v1 + 8);
          unsigned int v14 = -1;
          goto LABEL_63;
        }
      }
      uint64_t v31 = *(void *)(v1 + 64);
      uint64_t v145 = *v23;
      int v146 = v19;
      unint64_t v144 = *(int **)(v28 + 8);
      while (1)
      {
        uint64_t v32 = *v30;
        uint64_t v33 = (char **)(v31 + 32 * v32);
        uint64_t v34 = *v33;
        unint64_t v35 = v33[1];
        uint64_t v36 = (v35 - *v33) / 20;
        unint64_t v37 = (unint64_t)v33[2];
        if ((unint64_t)v35 >= v37)
        {
          unint64_t v38 = v36 + 1;
          if ((unint64_t)(v36 + 1) > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - (void)v34) >> 2);
          if (2 * v39 > v38) {
            unint64_t v38 = 2 * v39;
          }
          if (v39 >= 0x666666666666666) {
            unint64_t v40 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 > 0xCCCCCCCCCCCCCCCLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int64_t v41 = v13;
            long long v42 = (char *)operator new(20 * v40);
            uint64_t v25 = v145;
            int v19 = v146;
          }
          else
          {
            int64_t v41 = v13;
            long long v42 = 0;
          }
          int v43 = &v42[20 * v36];
          *(_DWORD *)int v43 = v19;
          *(void *)(v43 + 4) = v27;
          *(void *)(v43 + 12) = v25;
          uint64_t v44 = v43;
          if (v35 != v34)
          {
            do
            {
              long long v45 = *(_OWORD *)(v35 - 20);
              *((_DWORD *)v44 - 1) = *((_DWORD *)v35 - 1);
              *(_OWORD *)(v44 - 20) = v45;
              v44 -= 20;
              v35 -= 20;
            }
            while (v35 != v34);
            unint64_t v35 = *v33;
          }
          uint64_t v46 = v43 + 20;
          *uint64_t v33 = v44;
          v33[1] = v43 + 20;
          v33[2] = &v42[20 * v40];
          if (v35)
          {
            operator delete(v35);
            uint64_t v25 = v145;
            int v19 = v146;
          }
          uint64_t v1 = v143;
          uint64_t v29 = v144;
          int64_t v13 = v41;
          v33[1] = v46;
          if ((int)v36 >= 1)
          {
LABEL_50:
            unint64_t v47 = v36 + 1;
            uint64_t v48 = 20 * v36;
            while (1)
            {
              unint64_t v49 = *v33;
              if (*(void *)&(*v33)[20 * (v47 - 2) + 4] <= v27) {
                break;
              }
              uint64_t v50 = &v49[20 * (v47 - 2)];
              uint64_t v51 = &v49[v48];
              long long v52 = *(_OWORD *)v50;
              *((_DWORD *)v51 + 4) = *((_DWORD *)v50 + 4);
              *(_OWORD *)uint64_t v51 = v52;
              LODWORD(v36) = v36 - 1;
              --v47;
              v48 -= 20;
              if (v47 <= 1)
              {
                LODWORD(v36) = 0;
                break;
              }
            }
          }
        }
        else
        {
          *(_DWORD *)unint64_t v35 = v19;
          *(void *)(v35 + 4) = v27;
          *(void *)(v35 + 12) = v25;
          v33[1] = v35 + 20;
          if ((int)v36 >= 1) {
            goto LABEL_50;
          }
        }
        uint64_t v53 = (uint64_t)&(*v33)[20 * (int)v36];
        *(_DWORD *)uint64_t v53 = v19;
        *(void *)(v53 + 4) = v27;
        *(void *)(v53 + 12) = v25;
        uint64_t v54 = v31 + 32 * v32;
        int v56 = *(_DWORD *)(v54 + 24);
        int v55 = (_DWORD *)(v54 + 24);
        if ((int)v36 <= v56) {
          *int v55 = 0;
        }
        uint64_t v31 = *(void *)(v1 + 64);
        uint64_t v57 = (uint64_t *)(v31 + 32 * v32);
        uint64_t v58 = *v57;
        unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((v57[1] - *v57) >> 2);
        int v62 = *((_DWORD *)v57 + 6);
        uint64_t v60 = (int *)(v57 + 3);
        int v61 = v62;
        int64_t v63 = 0x8000000000000002;
        if (v62 < (int)v59)
        {
          uint64_t v64 = (uint64_t *)(v58 + 20 * v61 + 12);
          uint64_t v65 = (int)v59 - (uint64_t)v61;
          int64_t v63 = 0x8000000000000002;
          do
          {
            while (1)
            {
              int64_t v67 = *(v64 - 1);
              if (v67 >= v63) {
                break;
              }
              uint64_t v66 = *v64;
              uint64_t v64 = (uint64_t *)((char *)v64 + 20);
              v63 += v66;
              ++v61;
              if (!--v65) {
                goto LABEL_28;
              }
            }
            int *v60 = v61;
            uint64_t v68 = *v64;
            uint64_t v64 = (uint64_t *)((char *)v64 + 20);
            int64_t v63 = v68 + v67;
            ++v61;
            --v65;
          }
          while (v65);
        }
LABEL_28:
        *(void *)(*v148 + 8 * v32) = v63;
        if (v13 <= v63) {
          int64_t v13 = v63;
        }
        if (++v30 == v29) {
          goto LABEL_16;
        }
      }
    }
LABEL_63:
    uint64_t v69 = *(void *)(*(void *)(v16[1] + 40) + 12 * *(int *)(v16[4] + 4 * v15));
    uint64_t v153 = v69;
    unsigned int v142 = v14;
    if (v69 >= v13) {
      goto LABEL_10;
    }
    uint64_t v70 = *(void *)(v1 + 16) + 24 * v15;
    unint64_t v71 = *(int **)v70;
    unint64_t v72 = *(int **)(v70 + 8);
    if ((*(void *)(*(void *)(v1 + 40) + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      if (v71 == v72) {
        goto LABEL_10;
      }
      int64_t v147 = v13;
      int v73 = 0;
      uint64_t v74 = *v148;
      int v75 = -1;
      do
      {
        int v76 = *v71;
        if (v69 < *(void *)(v74 + 8 * *v71))
        {
          uint64_t v77 = *(void *)(v1 + 64) + 32 * v76;
          uint64_t v78 = *(void *)v77;
          unint64_t v79 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v77 + 8) - *(void *)v77) >> 2);
          int v82 = *(_DWORD *)(v77 + 24);
          unint64_t v80 = (int *)(v77 + 24);
          int v81 = v82;
          if (v82 + 1 == v79 && *(_DWORD *)(v78 + 20 * v81) == v15)
          {
            int v81 = 0;
            *unint64_t v80 = 0;
          }
          if (v81 >= (int)v79)
          {
            int v83 = 0;
            int64_t v87 = 0x8000000000000002;
          }
          else
          {
            int v83 = 0;
            char v84 = 0;
            unint64_t v85 = (void *)(v78 + 20 * v81 + 12);
            uint64_t v86 = (int)v79 - (uint64_t)v81;
            int64_t v87 = 0x8000000000000002;
            do
            {
              if (*((_DWORD *)v85 - 3) == v15)
              {
                char v84 = 1;
              }
              else
              {
                int64_t v88 = *(v85 - 1);
                if (v88 >= v87)
                {
                  if ((v84 & 1) == 0) {
                    *unint64_t v80 = v81;
                  }
                  int64_t v87 = *v85 + v88;
                  int v83 = v81;
                }
                else
                {
                  v87 += *v85;
                }
              }
              unint64_t v85 = (void *)((char *)v85 + 20);
              ++v81;
              --v86;
            }
            while (v86);
          }
          if (v87 > v69)
          {
            uint64_t v153 = v87;
            uint64_t v69 = v87;
            int v73 = v83;
            int v75 = v76;
          }
        }
        ++v71;
      }
      while (v71 != v72);
    }
    else
    {
      if (v71 == v72) {
        goto LABEL_10;
      }
      uint64_t v89 = *v148;
      int v75 = -1;
      do
      {
        uint64_t v90 = *v71;
        uint64_t v91 = *(void *)(v89 + 8 * v90);
        if (v91 > v69)
        {
          uint64_t v153 = *(void *)(v89 + 8 * v90);
          uint64_t v69 = v91;
          int v75 = v90;
        }
        ++v71;
      }
      while (v71 != v72);
      if (v75 == -1) {
        goto LABEL_10;
      }
      uint64_t v92 = *(void *)(v1 + 64) + 32 * v75;
      uint64_t v93 = *(void *)v92;
      unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v92 + 8) - *(void *)v92) >> 2);
      int v97 = *(_DWORD *)(v92 + 24);
      unint64_t v95 = (int *)(v92 + 24);
      int v96 = v97;
      if (v97 + 1 == v94 && *(_DWORD *)(v93 + 20 * v96) == v15)
      {
        int v96 = 0;
        *unint64_t v95 = 0;
      }
      if (v96 >= (int)v94)
      {
        int v73 = 0;
        int64_t v101 = 0x8000000000000002;
      }
      else
      {
        int v73 = 0;
        char v98 = 0;
        uint64_t v99 = (void *)(v93 + 20 * v96 + 12);
        uint64_t v100 = (int)v94 - (uint64_t)v96;
        int64_t v101 = 0x8000000000000002;
        do
        {
          if (*((_DWORD *)v99 - 3) == v15)
          {
            char v98 = 1;
          }
          else
          {
            int64_t v102 = *(v99 - 1);
            if (v102 >= v101)
            {
              if ((v98 & 1) == 0) {
                *unint64_t v95 = v96;
              }
              int64_t v101 = *v99 + v102;
              int v73 = v96;
            }
            else
            {
              v101 += *v99;
            }
          }
          uint64_t v99 = (void *)((char *)v99 + 20);
          ++v96;
          --v100;
        }
        while (v100);
      }
      int64_t v147 = v13;
      int64_t v152 = v101;
      if (v101 != v69) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v152, (int)&v153, "end_min_of_critical_tasks == new_start_min");
      }
    }
    if (v75 != -1) {
      break;
    }
    int64_t v13 = v147;
LABEL_10:
    uint64_t v1 = v143;
    unsigned int v14 = v142;
LABEL_11:
    unint64_t v12 = v136 + 3;
    if (v136 + 3 == v135) {
      return 1;
    }
  }
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8));
  int v103 = (uint64_t *)(*(void *)(v1 + 64) + 32 * v75);
  unint64_t v104 = v73;
  uint64_t v106 = *v103;
  uint64_t v105 = v103[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v105 - *v103) >> 2) > v73)
  {
    unint64_t v107 = *(void *)(v106 + 20 * v73 + 4);
    uint64_t v108 = 20 * v73;
    do
    {
      int v109 = *(_DWORD *)(v106 + v108);
      if (v109 != v15)
      {
        operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), *(_DWORD *)(v106 + v108));
        operations_research::sat::SchedulingConstraintHelper::AddEnergyAfterReason(*(void ***)(v1 + 8), v109, *(void *)(*v103 + v108 + 12), v107);
        operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*(operations_research::sat::SchedulingConstraintHelper **)(v1 + 8), v109, v139 - 1);
        uint64_t v106 = *v103;
        uint64_t v105 = v103[1];
      }
      ++v104;
      v108 += 20;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v105 - v106) >> 2) > v104);
  }
  operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(void **)(v1 + 8), v15, v139);
  if (operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(unint64_t **)(v1 + 8), v15, v153))
  {
    if ((*(void *)(*v137 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) != 0)
    {
      uint64_t v110 = *(void **)(v1 + 8);
      uint64_t v111 = *(void *)(v110[1] + 40);
      int v112 = *(_DWORD *)(v110[10] + 4 * v15);
      int64_t v13 = v147;
      if (v112 == -1) {
        int64_t v113 = (uint64_t *)(v110[13] + 8 * v15);
      }
      else {
        int64_t v113 = (uint64_t *)(v111 + 12 * v112);
      }
      uint64_t v114 = *(void *)(v111 + 12 * *(int *)(v110[4] + 4 * v15));
      uint64_t v115 = *v113;
      uint64_t v116 = *(void *)(v111 + 12 * *(int *)(v110[7] + 4 * v15)) - *v113;
      if (v114 <= v116) {
        uint64_t v117 = v116;
      }
      else {
        uint64_t v117 = v114;
      }
      uint64_t v118 = *(void *)(v1 + 16) + 24 * v15;
      uint64_t v119 = v1;
      uint64_t v120 = *(int **)v118;
      unint64_t v121 = *(int **)(v118 + 8);
      if (*(int **)v118 != v121)
      {
        uint64_t v122 = *(void *)(v119 + 64);
        do
        {
          uint64_t v123 = *v120;
          int64_t v124 = v13;
          int v149 = v140;
          uint64_t v150 = v117;
          uint64_t v151 = v115;
          operations_research::sat::TaskSet::NotifyEntryIsNowLastIfPresent(v122 + 32 * v123, &v149);
          int64_t v13 = v124;
          uint64_t v122 = *(void *)(v143 + 64);
          uint64_t v125 = *(void *)(v122 + 32 * v123);
          unint64_t v126 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v122 + 32 * v123 + 8) - v125) >> 2);
          int v127 = *(_DWORD *)(v122 + 32 * v123 + 24);
          int64_t v128 = 0x8000000000000002;
          if (v127 < (int)v126)
          {
            uint64_t v129 = (uint64_t *)(v125 + 20 * v127 + 12);
            uint64_t v130 = (int)v126 - (uint64_t)v127;
            int64_t v128 = 0x8000000000000002;
            do
            {
              while (1)
              {
                int64_t v132 = *(v129 - 1);
                if (v132 >= v128) {
                  break;
                }
                uint64_t v131 = *v129;
                uint64_t v129 = (uint64_t *)((char *)v129 + 20);
                v128 += v131;
                ++v127;
                if (!--v130) {
                  goto LABEL_123;
                }
              }
              *(_DWORD *)(v122 + 32 * v123 + 24) = v127;
              uint64_t v133 = *v129;
              uint64_t v129 = (uint64_t *)((char *)v129 + 20);
              int64_t v128 = v133 + v132;
              ++v127;
              --v130;
            }
            while (v130);
          }
LABEL_123:
          *(void *)(*v148 + 8 * v123) = v128;
          if (v124 <= v128) {
            int64_t v13 = v128;
          }
          ++v120;
        }
        while (v120 != v121);
      }
    }
    else
    {
      int64_t v13 = v147;
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_23CCD37E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void *operations_research::sat::CombinedDisjunctive<false>::~CombinedDisjunctive(void *a1)
{
  *a1 = &unk_26F0C2D10;
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[8];
  if (v3)
  {
    uint64_t v4 = a1[9];
    unint64_t v5 = (void *)a1[8];
    if (v4 != v3)
    {
      uint64_t v6 = a1[9];
      do
      {
        unint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        uint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)a1[8];
    }
    a1[9] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = a1[2];
  if (v10)
  {
    uint64_t v11 = a1[3];
    unint64_t v12 = (void *)a1[2];
    if (v11 != v10)
    {
      uint64_t v13 = a1[3];
      do
      {
        int v15 = *(void **)(v13 - 24);
        v13 -= 24;
        unsigned int v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      unint64_t v12 = (void *)a1[2];
    }
    a1[3] = v10;
    operator delete(v12);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<false>>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2D58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CombinedDisjunctive<false>>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2D58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveWithTwoItems>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2D90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveWithTwoItems>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2D90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveOverloadChecker>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2DC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveOverloadChecker>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2DC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveDetectablePrecedences>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveDetectablePrecedences>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveNotLast>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveNotLast>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveEdgeFinding>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctiveEdgeFinding>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2E70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

operations_research::sat::DisjunctivePrecedences *operations_research::sat::DisjunctivePrecedences::DisjunctivePrecedences(operations_research::sat::DisjunctivePrecedences *this, char a2, operations_research::sat::SchedulingConstraintHelper *a3, operations_research::sat::IntegerTrail *a4, operations_research::sat::PrecedencesPropagator *a5)
{
  *(void *)this = &unk_26F0C2AC8;
  *((unsigned char *)this + 8) = a2;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v8 = *((void *)a3 + 4);
  uint64_t v7 = *((void *)a3 + 5);
  *((void *)this + 11) = 0;
  *((void *)this + 4) = a5;
  uint64_t v9 = v7 - v8;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (((unint64_t)v9 >> 2))
  {
    if ((((unint64_t)v9 >> 2) & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (int)(v9 >> 2);
    uint64_t v11 = (char *)operator new(20 * v10);
    *((void *)this + 11) = v11;
    *((void *)this + 12) = v11;
    *((void *)this + 13) = &v11[20 * (int)v10];
  }
  uint64_t v13 = *((void *)a3 + 4);
  uint64_t v12 = *((void *)a3 + 5);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v14 = v12 - v13;
  *((void *)this + 17) = 0;
  if (((unint64_t)v14 >> 2))
  {
    if (v14 << 30 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = 4 * (int)(v14 >> 2);
    unint64_t v16 = (char *)operator new(v15);
    *((void *)this + 15) = v16;
    *((void *)this + 17) = &v16[v15];
    bzero(v16, v15);
    *((void *)this + 16) = &v16[v15];
  }
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  return this;
}

void sub_23CCD3FF0(_Unwind_Exception *exception_object)
{
  unint64_t v5 = v3;
  uint64_t v7 = *v5;
  if (*v5)
  {
    v1[16] = v7;
    operator delete(v7);
    uint64_t v8 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v9 = (void *)v1[8];
      if (!v9) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[12] = v8;
  operator delete(v8);
  uint64_t v9 = (void *)v1[8];
  if (!v9)
  {
LABEL_4:
    uint64_t v10 = *v4;
    if (!*v4) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[9] = v9;
  operator delete(v9);
  uint64_t v10 = *v4;
  if (!*v4) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[6] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::Model::Delete<operations_research::sat::DisjunctivePrecedences>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2EA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DisjunctivePrecedences>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C2EA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::vector<operations_research::sat::TaskTime>::__append(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      unint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x1555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(12 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[12 * v7];
    uint64_t v14 = &v11[12 * v10];
    size_t v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        uint64_t v17 = *(void *)(v5 - 3);
        v5 -= 3;
        int v18 = v5[2];
        *(void *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      unint64_t v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
          if (!(!v6 & v5))
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                *(void *)&long long v69 = *(void *)v12;
                DWORD2(v69) = *(_DWORD *)(v12 + 8);
                if (*(a2 - 1) < *(uint64_t *)((char *)&v69 + 4))
                {
                  int v79 = *(_DWORD *)(v12 + 8);
                  uint64_t v70 = *(void *)v12;
                  uint64_t v37 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
                  *(void *)unint64_t v12 = v37;
                  *((_DWORD *)a2 - 1) = v79;
                  *(uint64_t *)((char *)a2 - 12) = v70;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)((char *)a2 - 12));
                break;
              case 4uLL:
                unint64_t v38 = (uint64_t *)(v12 + 12);
                unint64_t v39 = (uint64_t *)(v12 + 24);
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24));
                *(void *)&long long v71 = *(void *)(v12 + 24);
                DWORD2(v71) = *(_DWORD *)(v12 + 32);
                if (*(a2 - 1) < *(uint64_t *)((char *)&v71 + 4))
                {
                  uint64_t v40 = *v39;
                  int v41 = *(_DWORD *)(v12 + 32);
                  int v42 = *((_DWORD *)a2 - 1);
                  *unint64_t v39 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 32) = v42;
                  *((_DWORD *)a2 - 1) = v41;
                  *(uint64_t *)((char *)a2 - 12) = v40;
                  *(void *)&long long v72 = *(void *)(v12 + 12);
                  DWORD2(v72) = *(_DWORD *)(v12 + 20);
                  if (*(void *)(v12 + 28) < *(uint64_t *)((char *)&v72 + 4))
                  {
                    int v43 = *(_DWORD *)(v12 + 20);
                    uint64_t v44 = *v38;
                    *unint64_t v38 = *v39;
                    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
                    *unint64_t v39 = v44;
                    *(_DWORD *)(v12 + 32) = v43;
                    *(void *)&long long v73 = *(void *)v12;
                    DWORD2(v73) = *(_DWORD *)(v12 + 8);
                    if (*(void *)(v12 + 16) < *(uint64_t *)((char *)&v73 + 4))
                    {
                      int v80 = *(_DWORD *)(v12 + 8);
                      uint64_t v74 = *(void *)v12;
                      *(void *)unint64_t v12 = *v38;
                      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
                      *unint64_t v38 = v74;
                      *(_DWORD *)(v12 + 20) = v80;
                    }
                  }
                }
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v12, v12 + 12, v12 + 24, (uint64_t *)(v12 + 36), (uint64_t *)((char *)a2 - 12));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 287)
          {
            long long v45 = (uint64_t *)(v12 + 12);
            BOOL v47 = (uint64_t *)v12 == a2 || v45 == a2;
            if (a5)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unint64_t v49 = v12;
                do
                {
                  uint64_t v51 = *(void *)v49;
                  unsigned int v52 = *(_DWORD *)(v49 + 8);
                  uint64_t v53 = *(void *)(v49 + 16);
                  unint64_t v49 = (unint64_t)v45;
                  if (v53 < __SPAIR64__(v52, HIDWORD(v51)))
                  {
                    int v54 = *(_DWORD *)v45;
                    uint64_t v55 = v48;
                    do
                    {
                      uint64_t v56 = v12 + v55;
                      *(void *)(v56 + 12) = *(void *)(v12 + v55);
                      *(_DWORD *)(v56 + 20) = *(_DWORD *)(v12 + v55 + 8);
                      if (!v55)
                      {
                        uint64_t v50 = v12;
                        goto LABEL_60;
                      }
                      *(void *)&long long v75 = *(void *)(v56 - 12);
                      DWORD2(v75) = *(_DWORD *)(v56 - 4);
                      v55 -= 12;
                    }
                    while (v53 < *(uint64_t *)((char *)&v75 + 4));
                    uint64_t v50 = v12 + v55 + 12;
LABEL_60:
                    *(_DWORD *)uint64_t v50 = v54;
                    *(void *)(v50 + 4) = v53;
                  }
                  long long v45 = (uint64_t *)(v49 + 12);
                  v48 += 12;
                }
                while ((uint64_t *)(v49 + 12) != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                uint64_t v57 = *(void *)v11;
                unsigned int v58 = *(_DWORD *)(v11 + 8);
                uint64_t v59 = *(void *)(v11 + 16);
                uint64_t v11 = (uint64_t)v45;
                if (v59 < __SPAIR64__(v58, HIDWORD(v57)))
                {
                  int v60 = *(_DWORD *)v45;
                  do
                  {
                    int v61 = v45;
                    uint64_t v62 = *(uint64_t *)((char *)v45 - 12);
                    long long v45 = (uint64_t *)((char *)v45 - 12);
                    uint64_t *v61 = v62;
                    *((_DWORD *)v61 + 2) = *((_DWORD *)v61 - 1);
                    *(void *)&long long v76 = *(v61 - 3);
                    DWORD2(v76) = *((_DWORD *)v61 - 4);
                  }
                  while (v59 < *(uint64_t *)((char *)&v76 + 4));
                  *(_DWORD *)long long v45 = v60;
                  *(uint64_t *)((char *)v45 + 4) = v59;
                }
                long long v45 = (uint64_t *)(v11 + 12);
              }
              while ((uint64_t *)(v11 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((uint64_t *)v12 != a2)
            {
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(v12, a2, a2, a3);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = v12 + 12 * (v14 >> 1);
          if ((unint64_t)v13 < 0x601) {
            break;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v11, (uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)((char *)a2 - 12));
          uint64_t v17 = 12 * v15;
          int v18 = (uint64_t *)(12 * v15 + v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 12), v18, a2 - 3);
          int v19 = (uint64_t *)(v11 + 12 + v17);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 24), v19, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v18, (uint64_t *)v16, v19);
          int v77 = *(_DWORD *)(v11 + 8);
          uint64_t v63 = *(void *)v11;
          uint64_t v20 = *(void *)v16;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)uint64_t v11 = v20;
          *(_DWORD *)(v16 + 8) = v77;
          *(void *)unint64_t v16 = v63;
          --a4;
          if (a5) {
            goto LABEL_13;
          }
LABEL_12:
          *(void *)&long long v64 = *(void *)v11;
          DWORD2(v64) = *(_DWORD *)(v11 + 8);
          if (*(void *)(v11 - 8) < *(uint64_t *)((char *)&v64 + 4)) {
            goto LABEL_13;
          }
          uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>((uint64_t *)v11, a2);
          unint64_t v12 = result;
          a5 = 0;
        }
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)v11, (uint64_t *)((char *)a2 - 12));
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)v11;
        unsigned int v23 = *(_DWORD *)(v11 + 8);
        do
        {
          *(void *)&long long v65 = *(void *)v11;
          DWORD2(v65) = *(_DWORD *)(v11 + 8);
          uint64_t v24 = *(void *)(v11 + v21 + 16);
          v21 += 12;
        }
        while (v24 < *(uint64_t *)((char *)&v65 + 4));
        unint64_t v25 = v11 + v21;
        uint64_t v26 = a2;
        if (v21 == 12)
        {
          uint64_t v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            uint64_t v27 = (uint64_t *)((char *)v29 - 12);
            *(void *)&long long v67 = *(void *)v11;
            DWORD2(v67) = *(_DWORD *)(v11 + 8);
            uint64_t v30 = *(v29 - 1);
            uint64_t v29 = (uint64_t *)((char *)v29 - 12);
            if (v30 < *(uint64_t *)((char *)&v67 + 4)) {
              goto LABEL_21;
            }
          }
          uint64_t v27 = v29;
          unint64_t v12 = v25;
        }
        else
        {
          do
          {
            uint64_t v27 = (uint64_t *)((char *)v26 - 12);
            *(void *)&long long v66 = *(void *)v11;
            DWORD2(v66) = *(_DWORD *)(v11 + 8);
            uint64_t v28 = *(v26 - 1);
            uint64_t v26 = (uint64_t *)((char *)v26 - 12);
          }
          while (v28 >= *(uint64_t *)((char *)&v66 + 4));
LABEL_21:
          unint64_t v12 = v25;
          if (v25 < (unint64_t)v27)
          {
            unint64_t v31 = (unint64_t)v27;
            do
            {
              int v78 = *(_DWORD *)(v12 + 8);
              uint64_t v68 = *(void *)v12;
              uint64_t v32 = *(void *)v31;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v31 + 8);
              *(void *)unint64_t v12 = v32;
              *(_DWORD *)(v31 + 8) = v78;
              *(void *)unint64_t v31 = v68;
              do
              {
                uint64_t v33 = *(void *)(v12 + 16);
                v12 += 12;
              }
              while (v33 < __SPAIR64__(v23, HIDWORD(v22)));
              do
              {
                uint64_t v34 = *(void *)(v31 - 8);
                v31 -= 12;
              }
              while (v34 >= __SPAIR64__(v23, HIDWORD(v22)));
            }
            while (v12 < v31);
          }
        }
        if (v12 - 12 != v11)
        {
          uint64_t v35 = *(void *)(v12 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 4);
          *(void *)uint64_t v11 = v35;
        }
        *(void *)(v12 - 12) = v22;
        *(_DWORD *)(v12 - 4) = v23;
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_32:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,false>(v11, v12 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v11, v12 - 12);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v12, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = (uint64_t *)(v12 - 12);
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)&long long v19 = *a1;
  DWORD2(v19) = *((_DWORD *)a1 + 2);
  if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)&v19 + 4))
  {
    *(void *)&long long v20 = *a2;
    DWORD2(v20) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
    if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)&v20 + 4))
    {
      int v3 = *((_DWORD *)a1 + 2);
      uint64_t v4 = *a1;
      int v5 = *((_DWORD *)a3 + 2);
      *a1 = *a3;
      *((_DWORD *)a1 + 2) = v5;
      *a3 = v4;
      *((_DWORD *)a3 + 2) = v3;
      return 1;
    }
    int v13 = *((_DWORD *)a1 + 2);
    uint64_t v14 = *a1;
    int v15 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v15;
    *a2 = v14;
    *((_DWORD *)a2 + 2) = v13;
    LODWORD(v23) = HIDWORD(v14);
    HIDWORD(v23) = *((_DWORD *)a2 + 2);
    if (*(uint64_t *)((char *)a3 + 4) < v23)
    {
      int v16 = *((_DWORD *)a2 + 2);
      uint64_t v17 = *a2;
      int v18 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v18;
      *a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      return 2;
    }
    return 1;
  }
  *(void *)&long long v21 = *a2;
  DWORD2(v21) = HIDWORD(*(unint64_t *)((char *)a2 + 4));
  if (*(uint64_t *)((char *)a3 + 4) < *(uint64_t *)((char *)&v21 + 4))
  {
    int v7 = *((_DWORD *)a2 + 2);
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v9;
    *a3 = v8;
    *((_DWORD *)a3 + 2) = v7;
    *(void *)&long long v22 = *a1;
    DWORD2(v22) = *((_DWORD *)a1 + 2);
    if (*(uint64_t *)((char *)a2 + 4) < *(uint64_t *)((char *)&v22 + 4))
    {
      int v10 = *((_DWORD *)a1 + 2);
      uint64_t v11 = *a1;
      int v12 = *((_DWORD *)a2 + 2);
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = v12;
      *a2 = v11;
      *((_DWORD *)a2 + 2) = v10;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)a1;
  uint64_t v3 = *(uint64_t *)((char *)a1 + 4);
  HIDWORD(v15) = *((_DWORD *)a2 - 1);
  if (v3 >= v15)
  {
    unint64_t v6 = (unint64_t)a1 + 12;
    do
    {
      uint64_t v4 = (uint64_t *)v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      *(void *)&long long v13 = *(void *)v6;
      DWORD2(v13) = *(_DWORD *)(v6 + 8);
      v6 += 12;
    }
    while (v3 >= *(uint64_t *)((char *)&v13 + 4));
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(uint64_t *)((char *)v4 + 12);
      uint64_t v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v16) = HIDWORD(v5);
      HIDWORD(v16) = *((_DWORD *)v4 + 2);
    }
    while (v3 >= v16);
  }
  if (v4 < a2)
  {
    do
    {
      uint64_t v7 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v17) = HIDWORD(v7);
      HIDWORD(v17) = *((_DWORD *)a2 + 2);
    }
    while (v3 < v17);
  }
  while (v4 < a2)
  {
    int v20 = *((_DWORD *)v4 + 2);
    uint64_t v14 = *v4;
    uint64_t v8 = *a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    uint64_t *v4 = v8;
    *((_DWORD *)a2 + 2) = v20;
    *a2 = v14;
    do
    {
      uint64_t v9 = *(uint64_t *)((char *)v4 + 12);
      uint64_t v4 = (uint64_t *)((char *)v4 + 12);
      LODWORD(v18) = HIDWORD(v9);
      HIDWORD(v18) = *((_DWORD *)v4 + 2);
    }
    while (v3 >= v18);
    do
    {
      uint64_t v10 = *(uint64_t *)((char *)a2 - 12);
      a2 = (uint64_t *)((char *)a2 - 12);
      LODWORD(v19) = HIDWORD(v10);
      HIDWORD(v19) = *((_DWORD *)a2 + 2);
    }
    while (v3 < v19);
  }
  if ((uint64_t *)((char *)v4 - 12) != a1)
  {
    uint64_t v11 = *(uint64_t *)((char *)v4 - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v4 - 1);
    *a1 = v11;
  }
  *((_DWORD *)v4 - 3) = v2;
  *(v4 - 1) = v3;
  return v4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(void *)&long long v29 = *(void *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a2 - 8) < *(uint64_t *)((char *)&v29 + 4))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    case 4uLL:
      uint64_t v18 = (uint64_t *)(a1 + 12);
      uint64_t v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(void *)&long long v30 = *(void *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(void *)(a2 - 8) >= *(uint64_t *)((char *)&v30 + 4)) {
        goto LABEL_13;
      }
      int v20 = *(_DWORD *)(a1 + 32);
      uint64_t v21 = *v19;
      int v22 = *(_DWORD *)(a2 - 4);
      *uint64_t v19 = *(void *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(void *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(void *)&long long v31 = *(void *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(void *)(a1 + 28) >= *(uint64_t *)((char *)&v31 + 4)) {
        goto LABEL_13;
      }
      int v23 = *(_DWORD *)(a1 + 20);
      uint64_t v24 = *v18;
      *uint64_t v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *uint64_t v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(void *)&long long v32 = *(void *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a1 + 16) >= *(uint64_t *)((char *)&v32 + 4)) {
        goto LABEL_13;
      }
      int v25 = *(_DWORD *)(a1 + 8);
      uint64_t v26 = *(void *)a1;
      *(void *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *uint64_t v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      BOOL result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          *(void *)&long long v27 = *(void *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          uint64_t v10 = *(void *)(v7 + 4);
          if (v10 < *(uint64_t *)((char *)&v27 + 4)) {
            break;
          }
LABEL_12:
          uint64_t v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2) {
            goto LABEL_13;
          }
        }
        int v11 = *(_DWORD *)v7;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = a1 + v12;
          *(void *)(v13 + 36) = *(void *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(void *)(a1 + 4) = v10;
            if (++v9 != 8) {
              goto LABEL_12;
            }
            goto LABEL_22;
          }
          *(void *)&long long v28 = *(void *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 < *(uint64_t *)((char *)&v28 + 4));
        uint64_t v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(void *)(v14 + 40) = v10;
        if (++v9 != 8) {
          goto LABEL_12;
        }
LABEL_22:
        BOOL result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  *(void *)&long long v32 = *(void *)a3;
  DWORD2(v32) = *(_DWORD *)(a3 + 8);
  if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)&v32 + 4))
  {
    int v11 = *(_DWORD *)(a3 + 8);
    uint64_t v12 = *(void *)a3;
    int v13 = *((_DWORD *)a4 + 2);
    *(void *)a3 = *a4;
    *(_DWORD *)(a3 + 8) = v13;
    *a4 = v12;
    *((_DWORD *)a4 + 2) = v11;
    *(void *)&long long v33 = *(void *)a2;
    DWORD2(v33) = *(_DWORD *)(a2 + 8);
    if (*(void *)(a3 + 4) < *(uint64_t *)((char *)&v33 + 4))
    {
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = *(void *)a2;
      int v16 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(void *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      *(void *)&long long v34 = *(void *)a1;
      DWORD2(v34) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a2 + 4) < *(uint64_t *)((char *)&v34 + 4))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(void *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  *(void *)&long long v35 = *a4;
  DWORD2(v35) = *((_DWORD *)a4 + 2);
  if (*(uint64_t *)((char *)a5 + 4) < *(uint64_t *)((char *)&v35 + 4))
  {
    int v20 = *((_DWORD *)a4 + 2);
    uint64_t v21 = *a4;
    int v22 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v22;
    *a5 = v21;
    *((_DWORD *)a5 + 2) = v20;
    *(void *)&long long v36 = *(void *)a3;
    DWORD2(v36) = *(_DWORD *)(a3 + 8);
    if (*(uint64_t *)((char *)a4 + 4) < *(uint64_t *)((char *)&v36 + 4))
    {
      int v23 = *(_DWORD *)(a3 + 8);
      uint64_t v24 = *(void *)a3;
      int v25 = *((_DWORD *)a4 + 2);
      *(void *)a3 = *a4;
      *(_DWORD *)(a3 + 8) = v25;
      *a4 = v24;
      *((_DWORD *)a4 + 2) = v23;
      *(void *)&long long v37 = *(void *)a2;
      DWORD2(v37) = *(_DWORD *)(a2 + 8);
      if (*(void *)(a3 + 4) < *(uint64_t *)((char *)&v37 + 4))
      {
        int v26 = *(_DWORD *)(a2 + 8);
        uint64_t v27 = *(void *)a2;
        int v28 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v28;
        *(void *)a3 = v27;
        *(_DWORD *)(a3 + 8) = v26;
        *(void *)&long long v38 = *(void *)a1;
        DWORD2(v38) = *(_DWORD *)(a1 + 8);
        if (*(void *)(a2 + 4) < *(uint64_t *)((char *)&v38 + 4))
        {
          int v29 = *(_DWORD *)(a1 + 8);
          uint64_t v30 = *(void *)a1;
          int v31 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v31;
          *(void *)a2 = v30;
          *(_DWORD *)(a2 + 8) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)a2 - a1;
    unint64_t v8 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (v8 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a4, v8, v12);
        uint64_t v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    int v13 = v5;
    if (v5 != a3)
    {
      if (v7 > 23)
      {
        uint64_t v18 = v5;
        do
        {
          *(void *)&long long v52 = *(void *)a1;
          DWORD2(v52) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v18 + 4) < *(uint64_t *)((char *)&v52 + 4))
          {
            int v19 = *((_DWORD *)v18 + 2);
            uint64_t v20 = *v18;
            int v21 = *(_DWORD *)(a1 + 8);
            *uint64_t v18 = *(void *)a1;
            *((_DWORD *)v18 + 2) = v21;
            *(void *)a1 = v20;
            *(_DWORD *)(a1 + 8) = v19;
            if (v8 < 3)
            {
              uint64_t v24 = a1 + 12;
              uint64_t v25 = 1;
            }
            else
            {
              uint64_t v22 = *(void *)(a1 + 16);
              *(void *)&long long v53 = *(void *)(a1 + 24);
              DWORD2(v53) = *(_DWORD *)(a1 + 32);
              BOOL v23 = v22 < *(void *)((char *)&v53 + 4);
              uint64_t v24 = v22 >= *(uint64_t *)((char *)&v53 + 4) ? a1 + 12 : a1 + 24;
              uint64_t v25 = v23 ? 2 : 1;
            }
            uint64_t v26 = *(void *)a1;
            unsigned int v27 = *(_DWORD *)(a1 + 8);
            *(void *)&long long v54 = *(void *)a1;
            DWORD2(v54) = v27;
            if (*(void *)(v24 + 4) >= *(uint64_t *)((char *)&v54 + 4))
            {
              uint64_t v28 = a1;
              do
              {
                uint64_t v29 = v28;
                uint64_t v28 = v24;
                uint64_t v30 = *(void *)v24;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v28 + 8);
                *(void *)uint64_t v29 = v30;
                if ((uint64_t)((v8 - 2) >> 1) < v25) {
                  break;
                }
                uint64_t v31 = (2 * v25) | 1;
                uint64_t v24 = a1 + 12 * v31;
                uint64_t v32 = 2 * v25 + 2;
                if (v32 < (uint64_t)v8)
                {
                  *(void *)&long long v55 = *(void *)(v24 + 12);
                  DWORD2(v55) = *(_DWORD *)(v24 + 20);
                  if (*(void *)(a1 + 12 * v31 + 4) < *(uint64_t *)((char *)&v55 + 4))
                  {
                    v24 += 12;
                    uint64_t v31 = v32;
                  }
                }
                uint64_t v25 = v31;
              }
              while (*(void *)(v24 + 4) >= __SPAIR64__(v27, HIDWORD(v26)));
              *(void *)uint64_t v28 = v26;
              *(_DWORD *)(v28 + 8) = v27;
            }
          }
          uint64_t v18 = (uint64_t *)((char *)v18 + 12);
        }
        while (v18 != a3);
      }
      else
      {
        int v14 = v5;
        do
        {
          *(void *)&long long v51 = *(void *)a1;
          DWORD2(v51) = *(_DWORD *)(a1 + 8);
          if (*(uint64_t *)((char *)v14 + 4) < *(uint64_t *)((char *)&v51 + 4))
          {
            int v15 = *((_DWORD *)v14 + 2);
            uint64_t v16 = *v14;
            int v17 = *(_DWORD *)(a1 + 8);
            uint64_t *v14 = *(void *)a1;
            *((_DWORD *)v14 + 2) = v17;
            *(void *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v15;
          }
          int v14 = (uint64_t *)((char *)v14 + 12);
        }
        while (v14 != a3);
      }
      int v13 = a3;
    }
    if (v7 >= 13)
    {
      int64_t v33 = v7 / 0xCuLL;
      do
      {
        uint64_t v34 = 0;
        uint64_t v49 = *(void *)a1;
        int v50 = *(_DWORD *)(a1 + 8);
        uint64_t v35 = a1;
        do
        {
          uint64_t v37 = v34 + 1;
          unint64_t v38 = v35 + 12 * (v34 + 1);
          uint64_t v39 = (2 * v34) | 1;
          uint64_t v40 = 2 * v34 + 2;
          if (v40 < v33)
          {
            *(void *)&long long v56 = *(void *)(v38 + 12);
            DWORD2(v56) = *(_DWORD *)(v38 + 20);
            if (*(void *)(v35 + 12 * v37 + 4) < *(uint64_t *)((char *)&v56 + 4))
            {
              v38 += 12;
              uint64_t v39 = v40;
            }
          }
          uint64_t v36 = *(void *)v38;
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v38 + 8);
          *(void *)uint64_t v35 = v36;
          uint64_t v35 = v38;
          uint64_t v34 = v39;
        }
        while (v39 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        uint64_t v5 = (uint64_t *)((char *)v5 - 12);
        if ((uint64_t *)v38 == v5)
        {
          *(_DWORD *)(v38 + 8) = v50;
          *(void *)unint64_t v38 = v49;
        }
        else
        {
          uint64_t v41 = *v5;
          *(_DWORD *)(v38 + 8) = *((_DWORD *)v5 + 2);
          *(void *)unint64_t v38 = v41;
          *uint64_t v5 = v49;
          *((_DWORD *)v5 + 2) = v50;
          uint64_t v42 = v38 - a1 + 12;
          if (v42 >= 13)
          {
            unint64_t v43 = (v42 / 0xCuLL - 2) >> 1;
            uint64_t v44 = *(void *)v38;
            unsigned int v45 = *(_DWORD *)(v38 + 8);
            *(void *)&long long v57 = *(void *)v38;
            DWORD2(v57) = v45;
            if (*(void *)(a1 + 12 * v43 + 4) < *(uint64_t *)((char *)&v57 + 4))
            {
              do
              {
                unint64_t v46 = v38;
                unint64_t v38 = a1 + 12 * v43;
                uint64_t v47 = *(void *)v38;
                *(_DWORD *)(v46 + 8) = *(_DWORD *)(v38 + 8);
                *(void *)unint64_t v46 = v47;
                if (!v43) {
                  break;
                }
                unint64_t v43 = (v43 - 1) >> 1;
              }
              while (*(void *)(a1 + 12 * v43 + 4) < __SPAIR64__(v45, HIDWORD(v44)));
              *(void *)unint64_t v38 = v44;
              *(_DWORD *)(v38 + 8) = v45;
            }
          }
        }
        BOOL v23 = v33-- <= 2;
      }
      while (!v23);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        *(void *)&long long v13 = *(uint64_t *)((char *)v6 + 12);
        DWORD2(v13) = *((_DWORD *)v6 + 5);
        if (*(void *)(result + 12 * v5 + 4) < *(uint64_t *)((char *)&v13 + 4))
        {
          uint64_t v6 = (uint64_t *)((char *)v6 + 12);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      uint64_t v7 = *a4;
      unsigned int v8 = *((_DWORD *)a4 + 2);
      *(void *)&long long v14 = *a4;
      DWORD2(v14) = v8;
      if (*(uint64_t *)((char *)v6 + 4) >= *(uint64_t *)((char *)&v14 + 4))
      {
        do
        {
          int v9 = a4;
          a4 = v6;
          uint64_t v10 = *v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)a4 + 2);
          *int v9 = v10;
          if (v4 < v5) {
            break;
          }
          uint64_t v11 = (2 * v5) | 1;
          uint64_t v6 = (uint64_t *)(result + 12 * v11);
          uint64_t v12 = 2 * v5 + 2;
          if (v12 < a3)
          {
            *(void *)&long long v15 = *(uint64_t *)((char *)v6 + 12);
            DWORD2(v15) = *((_DWORD *)v6 + 5);
            if (*(void *)(result + 12 * v11 + 4) < *(uint64_t *)((char *)&v15 + 4))
            {
              uint64_t v6 = (uint64_t *)((char *)v6 + 12);
              uint64_t v11 = v12;
            }
          }
          uint64_t v5 = v11;
        }
        while (*(uint64_t *)((char *)v6 + 4) >= __SPAIR64__(v8, HIDWORD(v7)));
        *a4 = v7;
        *((_DWORD *)a4 + 2) = v8;
      }
    }
  }
  return result;
}

void operations_research::IncrementalSort<std::__wrap_iter<operations_research::sat::TaskTime *>,std::less<operations_research::sat::TaskTime>>(int a1, char *a2, char *a3, int a4)
{
  if (a3 - a2 >= 24)
  {
    uint64_t v5 = a3 - 12;
    if (a3 - 12 == a2)
    {
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v6 = a3 - 12;
      uint64_t v7 = a3 - 12;
      do
      {
        uint64_t v8 = *(void *)(v7 - 12);
        v7 -= 12;
        int v9 = *((_DWORD *)v7 + 2);
        *(void *)uint64_t v30 = v8;
        *(_DWORD *)&v30[8] = v9;
        if (*((void *)v7 + 2) < *(uint64_t *)&v30[4])
        {
          int v10 = *((_DWORD *)v6 + 2);
          uint64_t v11 = *(void *)v6;
          *(void *)uint64_t v6 = *(void *)v7;
          *((_DWORD *)v6 + 2) = *((_DWORD *)v7 + 2);
          *(void *)uint64_t v7 = v11;
          *((_DWORD *)v7 + 2) = v10;
          uint64_t v5 = v6;
        }
        uint64_t v6 = v7;
      }
      while (v7 != a2);
    }
    uint64_t v12 = v5 + 12;
    if (v5 + 12 != a3 && a1 >= 1)
    {
      long long v13 = v5;
      do
      {
        int v14 = *((_DWORD *)v13 + 3);
        uint64_t v15 = *((void *)v13 + 2);
        long long v13 = v12;
        --a1;
        int v16 = *((_DWORD *)v12 - 1);
        *(void *)uint64_t v30 = *(void *)(v12 - 12);
        *(_DWORD *)&v30[8] = v16;
        if (v15 >= *(uint64_t *)&v30[4])
        {
          *(_DWORD *)uint64_t v12 = v14;
          *(void *)(v12 + 4) = v15;
          v12 += 12;
          if (v13 + 12 == a3) {
            break;
          }
        }
        else
        {
          int v17 = v12;
          do
          {
            uint64_t v18 = *(void *)(v12 - 12);
            v12 -= 12;
            *(void *)int v17 = v18;
            *((_DWORD *)v17 + 2) = *((_DWORD *)v17 - 1);
            --a1;
            uint64_t v19 = *((void *)v17 - 3);
            int v20 = *((_DWORD *)v17 - 4);
            *(void *)uint64_t v30 = v19;
            *(_DWORD *)&v30[8] = v20;
            int v17 = v12;
          }
          while (v15 < *(uint64_t *)&v30[4]);
          *(_DWORD *)uint64_t v12 = v14;
          *(void *)(v12 + 4) = v15;
          uint64_t v12 = v13 + 12;
          if (v13 + 12 == a3) {
            break;
          }
        }
      }
      while (a1 > 0);
    }
    if (v12 != a3)
    {
      uint64_t v21 = (a3 - v5) >> 2;
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * v21;
      if (a4)
      {
        if (a3 - v5 < 1537)
        {
LABEL_24:
          unsigned int v27 = 0;
          unint64_t v24 = 0;
        }
        else
        {
          BOOL v23 = (const std::nothrow_t *)MEMORY[0x263F8C180];
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * v21;
          while (1)
          {
            uint64_t v25 = operator new(12 * v24, v23);
            if (v25) {
              break;
            }
            BOOL v26 = v24 > 1;
            v24 >>= 1;
            if (!v26) {
              goto LABEL_24;
            }
          }
          unsigned int v27 = v25;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v5, a3, (uint64_t)v30, v22, (uint64_t)v27, v24);
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        unint64_t v28 = 126 - 2 * __clz(v22);
        if (v5 == a3) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = v28;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>((uint64_t)v5, (uint64_t *)a3, (uint64_t)v30, v29, 1);
      }
    }
  }
}

void sub_23CCD5974(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      *(void *)&long long v39 = *(void *)result;
      DWORD2(v39) = *((_DWORD *)result + 2);
      if (*((void *)a2 - 1) < *(uint64_t *)((char *)&v39 + 4))
      {
        int v8 = *((_DWORD *)result + 2);
        uint64_t v9 = *(void *)result;
        int v10 = *((_DWORD *)a2 - 1);
        *(void *)uint64_t result = *(void *)(a2 - 12);
        *((_DWORD *)result + 2) = v10;
        *(void *)(a2 - 12) = v9;
        *((_DWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v23 = a5;
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = (uint64_t)&result[12 * (a4 >> 1)];
      unint64_t v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)result, v26, a3, v27, a5);
        uint64_t v28 = v23 + 12 * v25;
        uint64_t result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>((uint64_t)&v7[12 * (a4 >> 1)], (uint64_t)a2, a3, a4 - (a4 >> 1), v28);
        unint64_t v29 = v23 + 12 * a4;
        uint64_t v30 = v28;
        while (v30 != v29)
        {
          *(void *)&long long v41 = *(void *)v23;
          DWORD2(v41) = *(_DWORD *)(v23 + 8);
          if (*(void *)(v30 + 4) >= *(uint64_t *)((char *)&v41 + 4))
          {
            uint64_t v31 = *(void *)v23;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v23 + 8);
            *(void *)uint64_t v7 = v31;
            v7 += 12;
            v23 += 12;
            if (v23 == v28) {
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v32 = *(void *)v30;
            *((_DWORD *)v7 + 2) = *(_DWORD *)(v30 + 8);
            *(void *)uint64_t v7 = v32;
            v7 += 12;
            v30 += 12;
            if (v23 == v28)
            {
LABEL_26:
              if (v30 != v29)
              {
                uint64_t v33 = 0;
                do
                {
                  uint64_t v34 = &v7[v33];
                  uint64_t v35 = *(void *)(v30 + v33);
                  *((_DWORD *)v34 + 2) = *(_DWORD *)(v30 + v33 + 8);
                  *(void *)uint64_t v34 = v35;
                  v33 += 12;
                }
                while (v30 + v33 != v29);
              }
              return result;
            }
          }
        }
        if (v23 != v28)
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = &v7[v36];
            uint64_t v38 = *(void *)(v23 + v36);
            *((_DWORD *)v37 + 2) = *(_DWORD *)(v23 + v36 + 8);
            *(void *)uint64_t v37 = v38;
            v36 += 12;
          }
          while (v23 + v36 != v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, v26, a3, v27, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v7[12 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v23, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v7, &v7[12 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v23, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 12;
      if (result + 12 != a2)
      {
        uint64_t v13 = 0;
        int v14 = result;
        do
        {
          uint64_t v16 = *(void *)v14;
          unsigned int v17 = *((_DWORD *)v14 + 2);
          uint64_t v18 = *((void *)v14 + 2);
          int v14 = v12;
          if (v18 < __SPAIR64__(v17, HIDWORD(v16)))
          {
            int v19 = *(_DWORD *)v12;
            uint64_t v20 = v13;
            do
            {
              uint64_t v21 = &result[v20];
              *(void *)(v21 + 12) = *(void *)&result[v20];
              *((_DWORD *)v21 + 5) = *(_DWORD *)&result[v20 + 8];
              if (!v20)
              {
                uint64_t v15 = (uint64_t)result;
                goto LABEL_10;
              }
              *(void *)&long long v40 = *(void *)(v21 - 12);
              DWORD2(v40) = *((_DWORD *)v21 - 1);
              v20 -= 12;
            }
            while (v18 < *(uint64_t *)((char *)&v40 + 4));
            uint64_t v15 = (uint64_t)&result[v20 + 12];
LABEL_10:
            *(_DWORD *)uint64_t v15 = v19;
            *(void *)(v15 + 4) = v18;
          }
          uint64_t v12 = v14 + 12;
          v13 += 12;
        }
        while (v14 + 12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v8 = result;
    if (a4 == 2)
    {
      int v10 = (uint64_t *)(a2 - 12);
      *(void *)&long long v38 = *(void *)result;
      DWORD2(v38) = *(_DWORD *)(result + 8);
      uint64_t v11 = (void *)(a5 + 12);
      if (*(void *)(a2 - 8) >= *(uint64_t *)((char *)&v38 + 4))
      {
        uint64_t v23 = *(void *)result;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
        *(void *)a5 = v23;
        uint64_t v24 = *v10;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(a2 - 4);
        void *v11 = v24;
      }
      else
      {
        uint64_t v12 = *v10;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a2 - 4);
        *(void *)a5 = v12;
        uint64_t v13 = *(void *)result;
        *(_DWORD *)(a5 + 20) = *(_DWORD *)(result + 8);
        void *v11 = v13;
      }
    }
    else if (a4 == 1)
    {
      uint64_t v9 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = 12 * (a4 >> 1);
      uint64_t v28 = result + v27;
      std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(result, result + v27, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v8 + v27, a2, a3, a4 - v26, v5 + v27, a4 - v26);
      uint64_t v29 = v8 + v27;
      while (v29 != a2)
      {
        *(void *)&long long v41 = *(void *)v8;
        DWORD2(v41) = *(_DWORD *)(v8 + 8);
        if (*(void *)(v29 + 4) >= *(uint64_t *)((char *)&v41 + 4))
        {
          uint64_t v30 = *(void *)v8;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v8 + 8);
          *(void *)uint64_t v5 = v30;
          v5 += 12;
          v8 += 12;
          if (v8 == v28) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v31 = *(void *)v29;
          *(_DWORD *)(v5 + 8) = *(_DWORD *)(v29 + 8);
          *(void *)uint64_t v5 = v31;
          v5 += 12;
          v29 += 12;
          if (v8 == v28)
          {
LABEL_24:
            if (v29 != a2)
            {
              uint64_t v32 = 0;
              do
              {
                uint64_t v33 = v5 + v32;
                uint64_t v34 = *(void *)(v29 + v32);
                *(_DWORD *)(v33 + 8) = *(_DWORD *)(v29 + v32 + 8);
                *(void *)uint64_t v33 = v34;
                v32 += 12;
              }
              while (v29 + v32 != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v28)
      {
        uint64_t v35 = 0;
        do
        {
          uint64_t v36 = v5 + v35;
          uint64_t v37 = *(void *)(v8 + v35);
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v8 + v35 + 8);
          *(void *)uint64_t v36 = v37;
          v35 += 12;
        }
        while (v8 + v35 != v28);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *(void *)result;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)(result + 8);
      *(void *)a5 = v14;
      uint64_t v15 = result + 12;
      if (result + 12 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a5;
        do
        {
          uint64_t v19 = v8;
          uint64_t v20 = v17;
          uint64_t v8 = v15;
          v17 += 12;
          *(void *)&long long v39 = *(void *)v20;
          DWORD2(v39) = *(_DWORD *)(v20 + 8);
          uint64_t v21 = v17;
          if (*(void *)(v19 + 16) < *(uint64_t *)((char *)&v39 + 4))
          {
            *(void *)uint64_t v17 = *(void *)v20;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 8);
            uint64_t v21 = a5;
            if (v20 != a5)
            {
              uint64_t v22 = v16;
              while (1)
              {
                uint64_t v21 = a5 + v22;
                *(void *)&long long v40 = *(void *)(a5 + v22 - 12);
                DWORD2(v40) = *(_DWORD *)(a5 + v22 - 4);
                if (*(void *)(v19 + 16) >= *(uint64_t *)((char *)&v40 + 4)) {
                  break;
                }
                *(void *)uint64_t v21 = *(void *)(a5 + v22 - 12);
                *(_DWORD *)(v21 + 8) = *(_DWORD *)(a5 + v22 - 4);
                v22 -= 12;
                if (!v22)
                {
                  uint64_t v21 = a5;
                  break;
                }
              }
            }
          }
          uint64_t v18 = *(void *)v8;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v8 + 8);
          *(void *)uint64_t v21 = v18;
          uint64_t v15 = v8 + 12;
          v16 += 12;
        }
        while (v8 + 12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    uint64_t v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = &v12[v13];
        *(void *)&long long v65 = *(void *)&v12[v13];
        DWORD2(v65) = *(_DWORD *)&v12[v13 + 8];
        if (*(void *)(a2 + 4) < *(uint64_t *)((char *)&v65 + 4)) {
          break;
        }
        v13 += 12;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v14;
      uint64_t v62 = a3;
      uint64_t v63 = a7;
      uint64_t v61 = a8;
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          long long v55 = &v12[v13];
          int v70 = *(_DWORD *)&v12[v13 + 8];
          uint64_t v69 = *(void *)&v12[v13];
          uint64_t v56 = *(void *)a2;
          *((_DWORD *)v55 + 2) = *((_DWORD *)a2 + 2);
          *(void *)long long v55 = v56;
          *(void *)a2 = v69;
          *((_DWORD *)a2 + 2) = v70;
          return result;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v26 = v17 >> 1;
        uint64_t v20 = &v12[12 * (v17 >> 1) + v13];
        unint64_t v25 = a2;
        if (a2 != a3)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
          unint64_t v25 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v25[12 * (v27 >> 1)];
            uint64_t v30 = *(void *)(v29 + 4);
            uint64_t v31 = v29 + 12;
            v27 += ~(v27 >> 1);
            if (v30 < __SPAIR64__(*(_DWORD *)&v12[12 * v26 + 8 + v13], HIDWORD(*(void *)v20))) {
              unint64_t v25 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v25 - a2) >> 2);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = v10 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = a2;
        if (a2 - v12 != v13)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12 - v13) >> 2);
          uint64_t v20 = &v12[v13];
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = &v20[12 * (v21 >> 1)];
            *(void *)&long long v66 = *(void *)v23;
            DWORD2(v66) = *((_DWORD *)v23 + 2);
            uint64_t v24 = v23 + 12;
            v21 += ~(v21 >> 1);
            if (*(void *)&a2[12 * v19 + 4] < *(uint64_t *)((char *)&v66 + 4)) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v24;
            }
          }
          while (v21);
        }
        unint64_t v25 = &a2[12 * v19];
        uint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12 - v13) >> 2);
      }
      a5 = -(v26 + v14);
      uint64_t v60 = v10 - v19;
      uint64_t v32 = v26;
      uint64_t v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(v20, a2, v25);
      uint64_t v34 = v32;
      uint64_t v35 = v33;
      if (v34 + v19 >= v10 - (v34 + v19) - v14)
      {
        uint64_t v37 = v25;
        uint64_t v38 = v34;
        a8 = v61;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(v33, v37, v62, a4, a5, v60, v63, v61);
        a2 = v20;
        a7 = v63;
        a5 = v38;
        a3 = v35;
        uint64_t v10 = v19;
        uint64_t v12 = v15;
        if (!v19) {
          return result;
        }
      }
      else
      {
        uint64_t v36 = v20;
        a7 = v63;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,std::__wrap_iter<operations_research::sat::TaskTime*>>(&v12[v13], v36, v33, a4, v34, v19, v63, v61);
        a2 = v25;
        a8 = v61;
        a3 = v62;
        v10 -= v19;
        uint64_t v12 = v35;
        if (!v60) {
          return result;
        }
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        unint64_t v48 = 0;
        do
        {
          uint64_t v49 = &a7[v48];
          uint64_t v50 = *(void *)&v12[v48];
          *((_DWORD *)v49 + 2) = *(_DWORD *)&v12[v48 + 8];
          *(void *)uint64_t v49 = v50;
          v48 += 12;
        }
        while (&v12[v48] != a2);
        if (v48)
        {
          long long v51 = &a7[v48];
          long long v52 = a7;
          while (a2 != a3)
          {
            *(void *)&long long v68 = *(void *)v52;
            DWORD2(v68) = *((_DWORD *)v52 + 2);
            if (*(void *)(a2 + 4) >= *(uint64_t *)((char *)&v68 + 4))
            {
              uint64_t v53 = *(void *)v52;
              *((_DWORD *)v12 + 2) = *((_DWORD *)v52 + 2);
              *(void *)uint64_t v12 = v53;
              v12 += 12;
              v52 += 12;
              if (v51 == v52) {
                return result;
              }
            }
            else
            {
              uint64_t v54 = *(void *)a2;
              *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
              *(void *)uint64_t v12 = v54;
              v12 += 12;
              a2 += 12;
              if (v51 == v52) {
                return result;
              }
            }
          }
          return (char *)memmove(v12, v52, a7 - v52 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      unint64_t v39 = 0;
      do
      {
        long long v40 = &a7[v39];
        uint64_t v41 = *(void *)&a2[v39];
        *((_DWORD *)v40 + 2) = *(_DWORD *)&a2[v39 + 8];
        *(void *)long long v40 = v41;
        v39 += 12;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        uint64_t v42 = &a7[v39];
        unint64_t v43 = a3 - 12;
        while (a2 != v12)
        {
          *(void *)&long long v67 = *(void *)(a2 - 12);
          DWORD2(v67) = *((_DWORD *)a2 - 1);
          uint64_t v44 = *((void *)v42 - 1);
          BOOL v45 = v44 < *(void *)((char *)&v67 + 4);
          if (v44 >= *(uint64_t *)((char *)&v67 + 4)) {
            unint64_t v46 = v42 - 12;
          }
          else {
            unint64_t v46 = a2 - 12;
          }
          if (v45) {
            a2 -= 12;
          }
          else {
            v42 -= 12;
          }
          uint64_t v47 = *(void *)v46;
          *((_DWORD *)v43 + 2) = *((_DWORD *)v46 + 2);
          *(void *)unint64_t v43 = v47;
          v43 -= 12;
          if (v42 == a7) {
            return result;
          }
        }
        uint64_t v57 = 0;
        do
        {
          unsigned int v58 = &v43[v57];
          uint64_t v59 = *(void *)&v42[v57 - 12];
          *((_DWORD *)v58 + 2) = *(_DWORD *)&v42[v57 - 4];
          *(void *)unsigned int v58 = v59;
          v57 -= 12;
        }
        while (&v42[v57] != a7);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::TaskTime *>,std::__wrap_iter<operations_research::sat::TaskTime *>>(char *__src, char *a2, char *a3)
{
  int64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 12 == a2)
    {
      uint64_t v30 = *(void *)__src;
      int v33 = *((_DWORD *)__src + 2);
      int64_t v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      int64_t v4 = &__src[v13];
      *(void *)int64_t v4 = v30;
      *((_DWORD *)v4 + 2) = v33;
    }
    else if (a2 + 12 == a3)
    {
      int64_t v4 = __src + 12;
      uint64_t v31 = *(void *)(a3 - 12);
      int v34 = *((_DWORD *)a3 - 1);
      size_t v14 = a3 - 12 - __src;
      if (a3 - 12 != __src) {
        memmove(__src + 12, __src, v14);
      }
      *(void *)unint64_t __src = v31;
      *((_DWORD *)__src + 2) = v34;
    }
    else
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 2);
      if (v6 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2))
      {
        uint64_t v7 = __src + 12;
        uint64_t v8 = a2 + 12;
        do
        {
          int v9 = *((_DWORD *)v7 - 1);
          uint64_t v10 = *(void *)(v7 - 12);
          int v11 = *((_DWORD *)v8 - 1);
          *(void *)(v7 - 12) = *(void *)(v8 - 12);
          *((_DWORD *)v7 - 1) = v11;
          *(void *)(v8 - 12) = v10;
          *((_DWORD *)v8 - 1) = v9;
          if (v7 == a2) {
            break;
          }
          v7 += 12;
          BOOL v12 = v8 == a3;
          v8 += 12;
        }
        while (!v12);
        return a2;
      }
      else
      {
        uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 2);
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = v15;
          uint64_t v15 = v17 % v15;
        }
        while (v15);
        if (v16)
        {
          uint64_t v18 = &__src[12 * v16];
          do
          {
            uint64_t v19 = *(void *)(v18 - 12);
            v18 -= 12;
            uint64_t v32 = v19;
            int v35 = *((_DWORD *)v18 + 2);
            uint64_t v20 = &v18[4 * ((a2 - __src) >> 2)];
            unint64_t v21 = v18;
            do
            {
              unint64_t v22 = v20;
              uint64_t v23 = *(void *)v20;
              *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 2);
              *(void *)unint64_t v21 = v23;
              unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (char *)v22) >> 2);
              uint64_t v20 = (char *)v22 + 4 * ((a2 - __src) >> 2);
              BOOL v25 = __OFSUB__(v6, v24);
              uint64_t v27 = v6 - v24;
              char v26 = (v27 < 0) ^ v25;
              unint64_t v28 = &__src[12 * v27];
              if (!v26) {
                uint64_t v20 = v28;
              }
              unint64_t v21 = (char *)v22;
            }
            while (v20 != v18);
            *((_DWORD *)v22 + 2) = v35;
            *unint64_t v22 = v32;
          }
          while (v18 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
          if (!(!v6 & v5))
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                *(void *)&long long v69 = *(void *)v12;
                DWORD2(v69) = *(_DWORD *)(v12 + 8);
                if (*(a2 - 1) < *(uint64_t *)((char *)&v69 + 4))
                {
                  int v79 = *(_DWORD *)(v12 + 8);
                  uint64_t v70 = *(void *)v12;
                  uint64_t v37 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
                  *(void *)unint64_t v12 = v37;
                  *((_DWORD *)a2 - 1) = v79;
                  *(uint64_t *)((char *)a2 - 12) = v70;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)((char *)a2 - 12));
                break;
              case 4uLL:
                uint64_t v38 = (uint64_t *)(v12 + 12);
                unint64_t v39 = (uint64_t *)(v12 + 24);
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)(v12 + 24));
                *(void *)&long long v71 = *(void *)(v12 + 24);
                DWORD2(v71) = *(_DWORD *)(v12 + 32);
                if (*(a2 - 1) < *(uint64_t *)((char *)&v71 + 4))
                {
                  uint64_t v40 = *v39;
                  int v41 = *(_DWORD *)(v12 + 32);
                  int v42 = *((_DWORD *)a2 - 1);
                  *unint64_t v39 = *(uint64_t *)((char *)a2 - 12);
                  *(_DWORD *)(v12 + 32) = v42;
                  *((_DWORD *)a2 - 1) = v41;
                  *(uint64_t *)((char *)a2 - 12) = v40;
                  *(void *)&long long v72 = *(void *)(v12 + 12);
                  DWORD2(v72) = *(_DWORD *)(v12 + 20);
                  if (*(void *)(v12 + 28) < *(uint64_t *)((char *)&v72 + 4))
                  {
                    int v43 = *(_DWORD *)(v12 + 20);
                    uint64_t v44 = *v38;
                    *uint64_t v38 = *v39;
                    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 32);
                    *unint64_t v39 = v44;
                    *(_DWORD *)(v12 + 32) = v43;
                    *(void *)&long long v73 = *(void *)v12;
                    DWORD2(v73) = *(_DWORD *)(v12 + 8);
                    if (*(void *)(v12 + 16) < *(uint64_t *)((char *)&v73 + 4))
                    {
                      int v80 = *(_DWORD *)(v12 + 8);
                      uint64_t v74 = *(void *)v12;
                      *(void *)unint64_t v12 = *v38;
                      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v12 + 20);
                      *uint64_t v38 = v74;
                      *(_DWORD *)(v12 + 20) = v80;
                    }
                  }
                }
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v12, v12 + 12, v12 + 24, (uint64_t *)(v12 + 36), (uint64_t *)((char *)a2 - 12));
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 287)
          {
            BOOL v45 = (uint64_t *)(v12 + 12);
            BOOL v47 = (uint64_t *)v12 == a2 || v45 == a2;
            if (a5)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unint64_t v49 = v12;
                do
                {
                  uint64_t v51 = *(void *)v49;
                  unsigned int v52 = *(_DWORD *)(v49 + 8);
                  uint64_t v53 = *(void *)(v49 + 16);
                  unint64_t v49 = (unint64_t)v45;
                  if (v53 < __SPAIR64__(v52, HIDWORD(v51)))
                  {
                    int v54 = *(_DWORD *)v45;
                    uint64_t v55 = v48;
                    do
                    {
                      uint64_t v56 = v12 + v55;
                      *(void *)(v56 + 12) = *(void *)(v12 + v55);
                      *(_DWORD *)(v56 + 20) = *(_DWORD *)(v12 + v55 + 8);
                      if (!v55)
                      {
                        uint64_t v50 = v12;
                        goto LABEL_60;
                      }
                      *(void *)&long long v75 = *(void *)(v56 - 12);
                      DWORD2(v75) = *(_DWORD *)(v56 - 4);
                      v55 -= 12;
                    }
                    while (v53 < *(uint64_t *)((char *)&v75 + 4));
                    uint64_t v50 = v12 + v55 + 12;
LABEL_60:
                    *(_DWORD *)uint64_t v50 = v54;
                    *(void *)(v50 + 4) = v53;
                  }
                  BOOL v45 = (uint64_t *)(v49 + 12);
                  v48 += 12;
                }
                while ((uint64_t *)(v49 + 12) != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                uint64_t v57 = *(void *)v11;
                unsigned int v58 = *(_DWORD *)(v11 + 8);
                uint64_t v59 = *(void *)(v11 + 16);
                uint64_t v11 = (uint64_t)v45;
                if (v59 < __SPAIR64__(v58, HIDWORD(v57)))
                {
                  int v60 = *(_DWORD *)v45;
                  do
                  {
                    uint64_t v61 = v45;
                    uint64_t v62 = *(uint64_t *)((char *)v45 - 12);
                    BOOL v45 = (uint64_t *)((char *)v45 - 12);
                    uint64_t *v61 = v62;
                    *((_DWORD *)v61 + 2) = *((_DWORD *)v61 - 1);
                    *(void *)&long long v76 = *(v61 - 3);
                    DWORD2(v76) = *((_DWORD *)v61 - 4);
                  }
                  while (v59 < *(uint64_t *)((char *)&v76 + 4));
                  *(_DWORD *)BOOL v45 = v60;
                  *(uint64_t *)((char *)v45 + 4) = v59;
                }
                BOOL v45 = (uint64_t *)(v11 + 12);
              }
              while ((uint64_t *)(v11 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((uint64_t *)v12 != a2)
            {
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *,operations_research::sat::TaskTime *>(v12, a2, a2, a3);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = v12 + 12 * (v14 >> 1);
          if ((unint64_t)v13 < 0x601) {
            break;
          }
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)v11, (uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)((char *)a2 - 12));
          uint64_t v17 = 12 * v15;
          uint64_t v18 = (uint64_t *)(12 * v15 + v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 12), v18, a2 - 3);
          uint64_t v19 = (uint64_t *)(v11 + 12 + v17);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 24), v19, (uint64_t *)((char *)a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(v18, (uint64_t *)v16, v19);
          int v77 = *(_DWORD *)(v11 + 8);
          uint64_t v63 = *(void *)v11;
          uint64_t v20 = *(void *)v16;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 8);
          *(void *)uint64_t v11 = v20;
          *(_DWORD *)(v16 + 8) = v77;
          *(void *)unint64_t v16 = v63;
          --a4;
          if (a5) {
            goto LABEL_13;
          }
LABEL_12:
          *(void *)&long long v64 = *(void *)v11;
          DWORD2(v64) = *(_DWORD *)(v11 + 8);
          if (*(void *)(v11 - 8) < *(uint64_t *)((char *)&v64 + 4)) {
            goto LABEL_13;
          }
          uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::TaskTime *,std::__less<void,void> &>((uint64_t *)v11, a2);
          unint64_t v12 = result;
          a5 = 0;
        }
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)(v11 + 12 * (v14 >> 1)), (uint64_t *)v11, (uint64_t *)((char *)a2 - 12));
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)v11;
        unsigned int v23 = *(_DWORD *)(v11 + 8);
        do
        {
          *(void *)&long long v65 = *(void *)v11;
          DWORD2(v65) = *(_DWORD *)(v11 + 8);
          uint64_t v24 = *(void *)(v11 + v21 + 16);
          v21 += 12;
        }
        while (v24 < *(uint64_t *)((char *)&v65 + 4));
        unint64_t v25 = v11 + v21;
        char v26 = a2;
        if (v21 == 12)
        {
          uint64_t v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            uint64_t v27 = (uint64_t *)((char *)v29 - 12);
            *(void *)&long long v67 = *(void *)v11;
            DWORD2(v67) = *(_DWORD *)(v11 + 8);
            uint64_t v30 = *(v29 - 1);
            uint64_t v29 = (uint64_t *)((char *)v29 - 12);
            if (v30 < *(uint64_t *)((char *)&v67 + 4)) {
              goto LABEL_21;
            }
          }
          uint64_t v27 = v29;
          unint64_t v12 = v25;
        }
        else
        {
          do
          {
            uint64_t v27 = (uint64_t *)((char *)v26 - 12);
            *(void *)&long long v66 = *(void *)v11;
            DWORD2(v66) = *(_DWORD *)(v11 + 8);
            uint64_t v28 = *(v26 - 1);
            char v26 = (uint64_t *)((char *)v26 - 12);
          }
          while (v28 >= *(uint64_t *)((char *)&v66 + 4));
LABEL_21:
          unint64_t v12 = v25;
          if (v25 < (unint64_t)v27)
          {
            unint64_t v31 = (unint64_t)v27;
            do
            {
              int v78 = *(_DWORD *)(v12 + 8);
              uint64_t v68 = *(void *)v12;
              uint64_t v32 = *(void *)v31;
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v31 + 8);
              *(void *)unint64_t v12 = v32;
              *(_DWORD *)(v31 + 8) = v78;
              *(void *)unint64_t v31 = v68;
              do
              {
                uint64_t v33 = *(void *)(v12 + 16);
                v12 += 12;
              }
              while (v33 < __SPAIR64__(v23, HIDWORD(v22)));
              do
              {
                uint64_t v34 = *(void *)(v31 - 8);
                v31 -= 12;
              }
              while (v34 >= __SPAIR64__(v23, HIDWORD(v22)));
            }
            while (v12 < v31);
          }
        }
        if (v12 - 12 != v11)
        {
          uint64_t v35 = *(void *)(v12 - 12);
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 - 4);
          *(void *)uint64_t v11 = v35;
        }
        *(void *)(v12 - 12) = v22;
        *(_DWORD *)(v12 - 4) = v23;
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_32:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*,false>(v11, v12 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v11, v12 - 12);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(v12, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_32;
      }
    }
    a2 = (uint64_t *)(v12 - 12);
    if (!v36) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<operations_research::sat::TaskTime> &,operations_research::sat::TaskTime*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      *(void *)&long long v29 = *(void *)a1;
      DWORD2(v29) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a2 - 8) < *(uint64_t *)((char *)&v29 + 4))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)(a2 - 12) = v16;
        *(_DWORD *)(a2 - 4) = v15;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    case 4uLL:
      uint64_t v18 = (uint64_t *)(a1 + 12);
      uint64_t v19 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      *(void *)&long long v30 = *(void *)(a1 + 24);
      DWORD2(v30) = *(_DWORD *)(a1 + 32);
      if (*(void *)(a2 - 8) >= *(uint64_t *)((char *)&v30 + 4)) {
        goto LABEL_13;
      }
      int v20 = *(_DWORD *)(a1 + 32);
      uint64_t v21 = *v19;
      int v22 = *(_DWORD *)(a2 - 4);
      *uint64_t v19 = *(void *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v22;
      *(void *)(a2 - 12) = v21;
      *(_DWORD *)(a2 - 4) = v20;
      *(void *)&long long v31 = *(void *)(a1 + 12);
      DWORD2(v31) = *(_DWORD *)(a1 + 20);
      if (*(void *)(a1 + 28) >= *(uint64_t *)((char *)&v31 + 4)) {
        goto LABEL_13;
      }
      int v23 = *(_DWORD *)(a1 + 20);
      uint64_t v24 = *v18;
      *uint64_t v18 = *v19;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *uint64_t v19 = v24;
      *(_DWORD *)(a1 + 32) = v23;
      *(void *)&long long v32 = *(void *)a1;
      DWORD2(v32) = *(_DWORD *)(a1 + 8);
      if (*(void *)(a1 + 16) >= *(uint64_t *)((char *)&v32 + 4)) {
        goto LABEL_13;
      }
      int v25 = *(_DWORD *)(a1 + 8);
      uint64_t v26 = *(void *)a1;
      *(void *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *uint64_t v18 = v26;
      *(_DWORD *)(a1 + 20) = v25;
      BOOL result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>(a1, a1 + 12, a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 12));
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::TaskTime *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2)
      {
LABEL_13:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          *(void *)&long long v27 = *(void *)v6;
          DWORD2(v27) = *(_DWORD *)(v6 + 8);
          uint64_t v10 = *(void *)(v7 + 4);
          if (v10 < *(uint64_t *)((char *)&v27 + 4)) {
            break;
          }
LABEL_12:
          uint64_t v6 = v7;
          v8 += 12;
          v7 += 12;
          if (v7 == a2) {
            goto LABEL_13;
          }
        }
        int v11 = *(_DWORD *)v7;
        uint64_t v12 = v8;
        do
        {
          uint64_t v13 = a1 + v12;
          *(void *)(v13 + 36) = *(void *)(a1 + v12 + 24);
          *(_DWORD *)(v13 + 44) = *(_DWORD *)(a1 + v12 + 32);
          if (v12 == -24)
          {
            *(_DWORD *)a1 = v11;
            *(void *)(a1 + 4) = v10;
            if (++v9 != 8) {
              goto LABEL_12;
            }
            goto LABEL_22;
          }
          *(void *)&long long v28 = *(void *)(v13 + 12);
          DWORD2(v28) = *(_DWORD *)(v13 + 20);
          v12 -= 12;
        }
        while (v10 < *(uint64_t *)((char *)&v28 + 4));
        uint64_t v14 = a1 + v12;
        *(_DWORD *)(v14 + 36) = v11;
        *(void *)(v14 + 40) = v10;
        if (++v9 != 8) {
          goto LABEL_12;
        }
LABEL_22:
        BOOL result = v7 + 12 == a2;
      }
      break;
  }
  return result;
}

unint64_t operations_research::sat::DratChecker::ClauseHash::operator()(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (int *)(*(void *)(*a1 + 8) + 56 * a2);
  uint64_t v4 = v3[1];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t result = 0;
  uint64_t v7 = (int *)(*(void *)(v2 + 96) + 4 * *v3);
  uint64_t v8 = 4 * v4;
  do
  {
    uint64_t v9 = *v7++;
    uint64_t v10 = (v5 + 0x1F73E299748A907ELL + v9) ^ (result >> 43);
    unint64_t v11 = (v5 - v10 - 0x1F73E299748A907ELL) ^ (v10 << 9);
    unint64_t v12 = (result - v10 - v11) ^ (v11 >> 8);
    unint64_t v13 = (v10 - v11 - v12) ^ (v12 >> 38);
    unint64_t v14 = (v11 - v12 - v13) ^ (v13 << 23);
    unint64_t v15 = (v12 - v13 - v14) ^ (v14 >> 5);
    unint64_t v16 = (v13 - v14 - v15) ^ (v15 >> 35);
    unint64_t v17 = (v14 - v15 - v16) ^ (v16 << 49);
    unint64_t v18 = (v15 - v16 - v17) ^ (v17 >> 11);
    unint64_t v19 = (v16 - v17 - v18) ^ (v18 >> 12);
    unint64_t result = (v18 - v19 - ((v17 - v18 - v19) ^ (v19 << 18))) ^ (((v17 - v18 - v19) ^ (v19 << 18)) >> 22);
    uint64_t v5 = -(uint64_t)result;
    v8 -= 4;
  }
  while (v8);
  return result;
}

double operations_research::sat::DratChecker::DratChecker(operations_research::sat::DratChecker *this)
{
  *(_DWORD *)this = -1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = this;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 11) = this;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = (char *)this + 152;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 48) = -1;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = (char *)this + 352;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((_DWORD *)this + 98) = -1;
  return result;
}

void operations_research::sat::DratChecker::AddProblemClause(void *a1, char *a2, uint64_t a3)
{
  int v12 = operations_research::sat::DratChecker::AddClause((uint64_t)a1, a2, a3);
  if (a1[4] + a1[7] == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(a1 + 4, &v12))
  {
    unint64_t v9 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(a1 + 4, &v12);
    if (v10) {
      *(_DWORD *)(a1[5] + 4 * v9) = v12;
    }
  }
  else
  {
    uint64_t v5 = a1[12];
    uint64_t v6 = a1[2];
    ++*(_DWORD *)(a1[1] + 56 * *v4 + 12);
    unint64_t v7 = *(int *)(v6 - 56);
    unint64_t v8 = (a1[13] - v5) >> 2;
    if (v7 <= v8)
    {
      if (v7 < v8) {
        a1[13] = v5 + 4 * v7;
      }
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append((uint64_t)(a1 + 12), v7 - v8);
      uint64_t v6 = a1[2];
    }
    unint64_t v11 = *(void **)(v6 - 32);
    if (v11)
    {
      *(void *)(v6 - 24) = v11;
      operator delete(v11);
    }
    a1[2] = v6 - 56;
  }
}

uint64_t operations_research::sat::DratChecker::AddClause(uint64_t a1, char *__src, uint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 104);
  unint64_t v7 = (uint64_t *)(a1 + 96);
  uint64_t v8 = (uint64_t)v6 - *(void *)(a1 + 96);
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 96), v6, __src, &__src[4 * a3], (4 * a3) >> 2);
  uint64_t v9 = v8 << 30 >> 30;
  char v10 = (char *)v7[1];
  unint64_t v11 = (int *)(*v7 + v9);
  unint64_t v12 = 126 - 2 * __clz((v10 - (char *)v11) >> 2);
  uint64_t v13 = (int)(v8 >> 2);
  if (v10 == (char *)v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v11, v10, (uint64_t)&v35, v14, 1);
  uint64_t v15 = *v7;
  unint64_t v16 = (char *)v7[1];
  if ((char *)(*v7 + v9) != v16)
  {
    unint64_t v17 = (char *)(v15 + 4 * v13 + 4);
    while (v17 != v16)
    {
      int v19 = *((_DWORD *)v17 - 1);
      int v18 = *(_DWORD *)v17;
      v17 += 4;
      if (v19 == v18)
      {
        int v20 = v17 - 8;
        while (v17 != v16)
        {
          int v21 = v18;
          int v18 = *(_DWORD *)v17;
          if (v21 != *(_DWORD *)v17)
          {
            *((_DWORD *)v20 + 1) = v18;
            v20 += 4;
          }
          v17 += 4;
        }
        int v23 = v20 + 4;
        uint64_t v22 = v8 >> 2;
        int64_t v24 = v16 - (v20 + 4);
        if (v16 != v20 + 4)
        {
          if (v16 != &v23[v24])
          {
            memmove(v20 + 4, &v23[v24], 0);
            uint64_t v15 = *v7;
          }
          unint64_t v16 = v23;
          *(void *)(a1 + 104) = v23;
        }
        goto LABEL_18;
      }
    }
  }
  uint64_t v22 = v8 >> 2;
LABEL_18:
  unint64_t v25 = (uint64_t)&v16[-v15] >> 2;
  while (v25 > v13 + 1)
  {
    uint64_t v26 = (_DWORD *)(v15 + 4 * v13++);
    if (v26[1] == (*v26 ^ 1))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v35, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 100);
      long long v27 = (void *)google::LogMessage::stream((google::LogMessage *)&v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Check failed: literals_[i] != literals_[i - 1].Negated() ", 57);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v35);
    }
  }
  LODWORD(v35) = v22;
  DWORD1(v35) = v25 - v22;
  *((void *)&v35 + 1) = 0x1FFFFFFFFLL;
  int v36 = 0x7FFFFFFF;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  long long __p = 0;
  __int16 v40 = 0;
  unint64_t v28 = *(void *)(a1 + 16);
  if (v28 >= *(void *)(a1 + 24))
  {
    long long v30 = std::vector<operations_research::sat::DratChecker::Clause>::__push_back_slow_path<operations_research::sat::DratChecker::Clause>((void **)(a1 + 8), (uint64_t)&v35);
    long long v31 = __p;
    *(void *)(a1 + 16) = v30;
    if (v31)
    {
      uint64_t v38 = v31;
      operator delete(v31);
    }
  }
  else
  {
    long long v29 = v35;
    *(_DWORD *)(v28 + 16) = v36;
    *(_OWORD *)unint64_t v28 = v29;
    *(void *)(v28 + 32) = 0;
    *(void *)(v28 + 40) = 0;
    *(void *)(v28 + 24) = 0;
    *(_WORD *)(v28 + 48) = 0;
    *(void *)(a1 + 16) = v28 + 56;
  }
  if (a3)
  {
    int v32 = *(int *)(*(void *)(a1 + 104) - 4) >> 1;
    if (*(_DWORD *)(a1 + 120) <= v32 + 1) {
      int v33 = v32 + 1;
    }
    else {
      int v33 = *(_DWORD *)(a1 + 120);
    }
    *(_DWORD *)(a1 + 120) = v33;
  }
  return -1227133513 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
}

void sub_23CCD750C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCD7528(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(uint64_t *a1, int *a2)
{
  int v3 = *a2;
  unint64_t v4 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *a2);
  uint64_t v5 = 0;
  uint64_t v6 = *a1;
  unint64_t v7 = ((unint64_t)*a1 >> 12) ^ (v4 >> 7);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    unint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v6 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[7];
    uint64_t v15 = *(void *)(v14 + 8);
    unint64_t v16 = (int *)(v15 + 56 * v3);
    int v17 = v16[1];
    if (!v17) {
      break;
    }
    uint64_t v18 = *(void *)(v14 + 96);
    do
    {
      unint64_t v19 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
      int v20 = (int *)(v15 + 56 * *(int *)(v13 + 4 * v19));
      uint64_t v21 = v20[1];
      if (v21 == v17)
      {
        uint64_t v22 = (_DWORD *)(v18 + 4 * *v20);
        int v23 = (_DWORD *)(v18 + 4 * *v16);
        uint64_t v24 = 4 * v21;
        while (*v22 == *v23)
        {
          ++v22;
          ++v23;
          v24 -= 4;
          if (!v24) {
            return v6 + v19;
          }
        }
      }
      v12 &= v12 - 1;
    }
    while (v12);
LABEL_11:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      return v6 + v8;
    }
    v5 += 8;
    unint64_t v7 = v5 + v10;
  }
  while (1)
  {
    unint64_t v19 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (!*(_DWORD *)(v15 + 56 * *(int *)(v13 + 4 * v19) + 4)) {
      return v6 + v19;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_11;
    }
  }
}

void operations_research::sat::DratChecker::AddInferedClause(uint64_t a1, char *a2, uint64_t a3)
{
  int v6 = operations_research::sat::DratChecker::AddClause(a1, a2, a3);
  int v22 = v6;
  if (*(_DWORD *)a1 == -1) {
    *(_DWORD *)a1 = v6;
  }
  if (*(void *)(a1 + 32) + *(void *)(a1 + 56) == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>((uint64_t *)(a1 + 32), &v22))
  {
    if (a3) {
      int v17 = *(_DWORD *)a2;
    }
    else {
      int v17 = -1;
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 56 * v22 + 8) = v17;
    unint64_t v19 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>((uint64_t *)(a1 + 32), &v22);
    if (v20) {
      *(_DWORD *)(*(void *)(a1 + 40) + 4 * v19) = v22;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    ++*(_DWORD *)(v8 + 56 * *v7 + 12);
    if (*v7 >= *(_DWORD *)a1 && a3 != 0)
    {
      uint64_t v10 = v8 + 56 * *v7;
      int v21 = *(_DWORD *)a2;
      int v12 = *(_DWORD *)(v10 + 8);
      int v11 = v10 + 8;
      if (v12 != v21) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>(v11, (int)&v21, "clauses_[*it].rat_literal_index == clause[0].Index()");
      }
    }
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 16);
    unint64_t v15 = *(int *)(v14 - 56);
    unint64_t v16 = (*(void *)(a1 + 104) - v13) >> 2;
    if (v15 <= v16)
    {
      if (v15 < v16) {
        *(void *)(a1 + 104) = v13 + 4 * v15;
      }
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append(a1 + 96, v15 - v16);
      uint64_t v14 = *(void *)(a1 + 16);
    }
    uint64_t v18 = *(void **)(v14 - 32);
    if (v18)
    {
      *(void *)(v14 - 24) = v18;
      operator delete(v18);
    }
    *(void *)(a1 + 16) = v14 - 56;
  }
}

void sub_23CCD7848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::DratChecker::DeleteClause(void *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1 + 4;
  v57[0] = operations_research::sat::DratChecker::AddClause((uint64_t)a1, a2, a3);
  uint64_t v5 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(v4, v57);
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[7];
  if (v7 + v8 == v5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 127, 1);
    uint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Couldn't find deleted clause", 28);
    google::LogMessage::~LogMessage((google::LogMessage *)v57);
  }
  else
  {
    uint64_t v9 = v6;
    int v10 = *v6;
    uint64_t v11 = a1[1];
    uint64_t v12 = v11 + 56 * *v6;
    int v13 = *(_DWORD *)(v12 + 12) - 1;
    *(_DWORD *)(v12 + 12) = v13;
    if (!v13)
    {
      uint64_t v14 = (void *)v5;
      uint64_t v15 = a1[2];
      uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v11) >> 3);
      *(_DWORD *)(v11 + 56 * v10 + 16) = v16 - 1;
      if (*(int *)(v15 - 52) >= 2)
      {
        uint64_t v17 = v11 + 56 * ((int)v16 - 2);
        unint64_t v20 = *(void *)(v17 + 40);
        unint64_t v19 = (void *)(v17 + 40);
        unint64_t v18 = v20;
        int v21 = v19 - 1;
        int v22 = (char *)*(v19 - 1);
        if ((unint64_t)v22 >= v20)
        {
          unint64_t v25 = v19 - 2;
          uint64_t v26 = (char *)*(v19 - 2);
          int64_t v27 = v22 - v26;
          uint64_t v28 = (v22 - v26) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v18 - (void)v26;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            if (v31 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v32 = operator new(4 * v31);
            uint64_t v28 = (v22 - v26) >> 2;
            unint64_t v25 = v19 - 2;
            int64_t v27 = v22 - v26;
          }
          else
          {
            int v32 = 0;
          }
          int v33 = &v32[4 * v28];
          *int v33 = *v9;
          int v23 = v33 + 1;
          if (v22 != v26)
          {
            unint64_t v34 = v22 - v26 - 4;
            if (v34 < 0x2C) {
              goto LABEL_49;
            }
            if ((unint64_t)(v22 - v32 - v27) < 0x20) {
              goto LABEL_49;
            }
            uint64_t v35 = (v34 >> 2) + 1;
            uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v37 = &v22[-v36];
            int v33 = (_DWORD *)((char *)v33 - v36);
            uint64_t v38 = &v32[4 * v28 - 16];
            uint64_t v39 = v22 - 16;
            uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *uint64_t v38 = v41;
              v38 -= 2;
              v39 -= 32;
              v40 -= 8;
            }
            while (v40);
            int v22 = v37;
            if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_49:
              do
              {
                int v42 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *--int v33 = v42;
              }
              while (v22 != v26);
            }
          }
          void *v25 = v33;
          *int v21 = v23;
          *unint64_t v19 = &v32[4 * v31];
          if (v26)
          {
            operator delete(v26);
            uint64_t v8 = a1[7];
          }
        }
        else
        {
          *(_DWORD *)int v22 = *v6;
          int v23 = v22 + 4;
        }
        *int v21 = v23;
        uint64_t v7 = *v4;
      }
      --a1[6];
      uint64_t v43 = (uint64_t)v14 - v7 - 8;
      unint64_t v44 = *v14 & (~*v14 << 6) & 0x8080808080808080;
      unint64_t v45 = *(void *)(v7 + (v43 & v8)) & (~*(void *)(v7 + (v43 & v8)) << 6) & 0x8080808080808080;
      if (v45) {
        BOOL v46 = v44 == 0;
      }
      else {
        BOOL v46 = 1;
      }
      if (v46)
      {
        uint64_t v50 = 0;
        char v47 = -2;
      }
      else
      {
        unsigned int v48 = (__clz(v45) >> 3) + (__clz(__rbit64(v44)) >> 3);
        BOOL v49 = v48 >= 8;
        uint64_t v50 = v48 < 8;
        if (v49) {
          char v47 = -2;
        }
        else {
          char v47 = 0x80;
        }
      }
      *(unsigned char *)uint64_t v14 = v47;
      *(unsigned char *)((a1[7] & v43) + (a1[7] & 7) + a1[4] + 1) = v47;
      uint64_t v51 = a1[8];
      a1[9] += v50;
      if (v51)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 16), 1uLL, memory_order_relaxed);
      }
    }
  }
  uint64_t v52 = a1[12];
  uint64_t v53 = a1[2];
  unint64_t v54 = *(int *)(v53 - 56);
  unint64_t v55 = (a1[13] - v52) >> 2;
  if (v54 <= v55)
  {
    if (v54 < v55) {
      a1[13] = v52 + 4 * v54;
    }
  }
  else
  {
    std::vector<operations_research::sat::Literal>::__append((uint64_t)(a1 + 12), v54 - v55);
    uint64_t v53 = a1[2];
  }
  uint64_t v56 = *(void **)(v53 - 32);
  if (v56)
  {
    *(void *)(v53 - 24) = v56;
    operator delete(v56);
  }
  a1[2] = v53 - 56;
}

void sub_23CCD7BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::DratChecker::Check(operations_research::sat::DratChecker *this, double a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*((void *)this + 1) == v2 || *(_DWORD *)this == -1 || *(_DWORD *)(v2 - 52)) {
    return 2;
  }
  *(unsigned char *)(v2 - 8) = 1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  uint64_t v43 = (uint64_t)(0.0001 * 1000000000.0);
  int v44 = 100;
  *(_OWORD *)unint64_t v45 = 0u;
  long long v46 = 0u;
  char v47 = 0;
  double v52 = 0.0;
  uint64_t v53 = 0;
  uint64_t v49 = 0;
  double v51 = INFINITY;
  uint64_t v54 = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    char v47 = 1;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    unsigned int v48 = CurrentTimeNanos;
    double v50 = a2;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41 = v40;
  uint64_t v8 = v40 + (uint64_t)(a2 * 1000000000.0);
  if ((double)(v40 ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= a2) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v42 = v8;
  operations_research::sat::DratChecker::Init(this);
  for (int i = -1227133513 * ((*((void *)this + 2) - *((void *)this + 1)) >> 3) - 1; i >= *(_DWORD *)this; --i)
  {
    if (v53 && (unsigned __int8 v11 = atomic_load(v53), (v11 & 1) != 0) || fmax(v51 - v52, 0.0) <= 0.0)
    {
      uint64_t v4 = 0;
      goto LABEL_52;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v12 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13 = v12;
    if (v43 <= v12 - v41) {
      uint64_t v14 = v12 - v41;
    }
    else {
      uint64_t v14 = v43;
    }
    operations_research::RunningMax<long long>::Add(&v44, v14);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41 = v13;
    if (*((void *)v45[0] + SHIDWORD(v46)) + v13 >= v42)
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_51;
      }
      double v15 = v50;
      if (v47)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep HasRupProperty = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
        double v16 = v15 + (double)(HasRupProperty - (uint64_t)v48 + v49) * -0.000000001;
        if (v16 <= 0.0001) {
          goto LABEL_51;
        }
      }
      else
      {
        double v16 = v50 + (double)v49 * -0.000000001;
        if (v16 <= 0.0001)
        {
LABEL_51:
          uint64_t v4 = 0;
          uint64_t v42 = 0;
          goto LABEL_52;
        }
      }
      uint64_t v42 = v41 + (uint64_t)(v16 * 1000000000.0);
    }
    uint64_t v17 = *((void *)this + 1);
    unint64_t v18 = (int *)(v17 + 56 * i);
    unint64_t v19 = (int *)*((void *)v18 + 3);
    for (unint64_t j = (int *)*((void *)v18 + 4); v19 != j; ++v19)
      operations_research::sat::DratChecker::WatchClause(this, *v19);
    if (*(unsigned char *)(v17 + 56 * i + 48))
    {
      uint64_t v21 = v17 + 56 * i;
      uint64_t v23 = *(int *)(v21 + 4);
      int v22 = (int *)(v21 + 4);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep HasRupProperty = operations_research::sat::DratChecker::HasRupProperty(this, i, (int *)(*((void *)this + 12) + 4 * *v18), v23);
      if ((HasRupProperty & 1) == 0)
      {
        uint64_t v24 = v17 + 56 * i;
        int v26 = *(_DWORD *)(v24 + 8);
        unint64_t v25 = (int *)(v24 + 8);
        if (v26 == -1) {
          goto LABEL_49;
        }
        ++*((_DWORD *)this + 102);
        long long __p = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        if (i >= 1)
        {
          uint64_t v27 = 0;
          BOOL v28 = 1;
          do
          {
            uint64_t v29 = *((void *)this + 1);
            if (*(_DWORD *)(v29 + 56 * v27 + 16) > i)
            {
              uint64_t v30 = (int *)(v29 + 56 * v27);
              uint64_t v31 = *((void *)this + 12);
              uint64_t v32 = v30[1];
              int v33 = (int *)(v31 + 4 * *v30);
              int v34 = *v25;
              if (v32)
              {
                uint64_t v35 = 4 * v32;
                uint64_t v36 = (int *)(v31 + 4 * *v30);
                while (*v36 != (v34 ^ 1))
                {
                  ++v36;
                  v35 -= 4;
                  if (!v35)
                  {
                    uint64_t v36 = &v33[v32];
                    break;
                  }
                }
                if (v32 != v36 - v33
                  && (!operations_research::sat::Resolve((int *)(v31 + 4 * *v18), *v22, v33, v32, v34, (uint64_t)this + 352, (uint64_t)&__p)|| !operations_research::sat::DratChecker::HasRupProperty(this, i, (int *)__p, (v38 - (unsigned char *)__p) >> 2)))
                {
                  break;
                }
              }
            }
            BOOL v28 = ++v27 < i;
          }
          while (v27 != i);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep HasRupProperty = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)__p;
          if (__p)
          {
            uint64_t v38 = __p;
            operator delete(__p);
          }
          if (v28)
          {
LABEL_49:
            uint64_t v4 = 2;
            goto LABEL_52;
          }
        }
      }
    }
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)HasRupProperty);
  operations_research::sat::DratChecker::LogStatistics(this);
  uint64_t v4 = 1;
LABEL_52:
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  return v4;
}

void sub_23CCD8048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DratChecker::Init(operations_research::sat::DratChecker *this)
{
  *((void *)this + 17) = *((void *)this + 16);
  int v2 = *((_DWORD *)this + 30);
  int v3 = (2 * v2) & ~((2 * v2) >> 31);
  *((_DWORD *)this + 38) = v3;
  uint64_t v5 = *((void *)this + 20);
  uint64_t v6 = *((void *)this + 21);
  uint64_t v4 = (char *)this + 160;
  unint64_t v7 = (v3 + 63) >> 6;
  uint64_t v50 = 0;
  unint64_t v8 = (v6 - v5) >> 3;
  if (v7 <= v8)
  {
    if (v7 < v8) {
      *((void *)this + 21) = v5 + 8 * v7;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v4, v7 - v8, &v50);
    int v2 = *((_DWORD *)this + 30);
  }
  uint64_t v9 = *((void *)this + 26);
  unint64_t v10 = (*((void *)this + 27) - v9) >> 2;
  if (v2 <= v10)
  {
    if (v2 < v10) {
      *((void *)this + 27) = v9 + 4 * v2;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 208), v2 - v10, operations_research::sat::kNoClauseIndex);
  }
  *((void *)this + 30) = *((void *)this + 29);
  *((void *)this + 33) = *((void *)this + 32);
  uint64_t v12 = *((void *)this + 35);
  uint64_t v11 = *((void *)this + 36);
  if (v11 != v12)
  {
    uint64_t v13 = *((void *)this + 36);
    do
    {
      double v15 = *(void **)(v13 - 24);
      v13 -= 24;
      uint64_t v14 = v15;
      if (v15)
      {
        *(void *)(v11 - 16) = v14;
        operator delete(v14);
      }
      uint64_t v11 = v13;
    }
    while (v13 != v12);
    uint64_t v11 = *((void *)this + 35);
  }
  *((void *)this + 36) = v12;
  unint64_t v16 = 2 * *((int *)this + 30);
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
  if (v16 <= v17)
  {
    if (v16 < v17)
    {
      uint64_t v18 = v11 + 48 * *((int *)this + 30);
      if (v12 != v18)
      {
        uint64_t v19 = v12;
        do
        {
          uint64_t v21 = *(void **)(v19 - 24);
          v19 -= 24;
          unint64_t v20 = v21;
          if (v21)
          {
            *(void *)(v12 - 16) = v20;
            operator delete(v20);
          }
          uint64_t v12 = v19;
        }
        while (v19 != v18);
      }
      *((void *)this + 36) = v18;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 280, v16 - v17);
  }
  *((void *)this + 39) = *((void *)this + 38);
  *((void *)this + 42) = *((void *)this + 41);
  int v22 = (2 * *((_DWORD *)this + 30)) & ~((2 * *((_DWORD *)this + 30)) >> 31);
  *((_DWORD *)this + 88) = v22;
  unint64_t v23 = (v22 + 63) >> 6;
  uint64_t v50 = 0;
  uint64_t v24 = *((void *)this + 45);
  unint64_t v25 = (*((void *)this + 46) - v24) >> 3;
  if (v23 <= v25)
  {
    if (v23 < v25) {
      *((void *)this + 46) = v24 + 8 * v23;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 360, v23 - v25, &v50);
  }
  *((_DWORD *)this + 102) = 0;
  uint64_t v26 = *((void *)this + 1);
  if ((int)(-1227133513 * ((unint64_t)(*((void *)this + 2) - v26) >> 3)) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v49 = (void **)((char *)this + 304);
    while (1)
    {
      int v29 = *(_DWORD *)(v26 + 56 * v27 + 4);
      if (v29 >= 2)
      {
        if (*(_DWORD *)(v26 + 56 * v27 + 16) == 0x7FFFFFFF) {
          operations_research::sat::DratChecker::WatchClause(this, v27);
        }
        goto LABEL_32;
      }
      if (v29 == 1) {
        break;
      }
LABEL_32:
      ++v27;
      uint64_t v26 = *((void *)this + 1);
      if (v27 >= (int)(-1227133513 * ((unint64_t)(*((void *)this + 2) - v26) >> 3))) {
        return;
      }
    }
    uint64_t v31 = (char *)*((void *)this + 39);
    unint64_t v30 = *((void *)this + 40);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)uint64_t v31 = v27;
      uint64_t v28 = (uint64_t)(v31 + 4);
LABEL_31:
      *((void *)this + 39) = v28;
      goto LABEL_32;
    }
    uint64_t v32 = (char *)*v49;
    uint64_t v33 = v31 - (unsigned char *)*v49;
    uint64_t v34 = v33 >> 2;
    unint64_t v35 = (v33 >> 2) + 1;
    if (v35 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v36 = v30 - (void)v32;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      if (v37 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v38 = operator new(4 * v37);
      uint64_t v39 = &v38[4 * v34];
      *uint64_t v39 = v27;
      uint64_t v28 = (uint64_t)(v39 + 1);
      if (v31 == v32) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v39 = (_DWORD *)(4 * v34);
      *(_DWORD *)(4 * v34) = v27;
      uint64_t v28 = 4 * v34 + 4;
      if (v31 == v32)
      {
LABEL_55:
        *((void *)this + 38) = v39;
        *((void *)this + 39) = v28;
        *((void *)this + 40) = &v38[4 * v37];
        if (v32) {
          operator delete(v32);
        }
        goto LABEL_31;
      }
    }
    unint64_t v40 = v31 - 4 - v32;
    if (v40 < 0x2C) {
      goto LABEL_63;
    }
    if ((unint64_t)(v31 - &v38[v33]) < 0x20) {
      goto LABEL_63;
    }
    uint64_t v41 = (v40 >> 2) + 1;
    uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v43 = &v31[-v42];
    uint64_t v39 = (_DWORD *)((char *)v39 - v42);
    int v44 = &v38[4 * v34 - 16];
    unint64_t v45 = v31 - 16;
    uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *int v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 8;
    }
    while (v46);
    uint64_t v31 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_63:
      do
      {
        int v48 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--uint64_t v39 = v48;
      }
      while (v31 != v32);
    }
    goto LABEL_55;
  }
}

void operations_research::sat::DratChecker::WatchClause(void *a1, int a2)
{
  int v3 = (int *)(a1[12] + 4 * *(int *)(a1[1] + 56 * a2));
  uint64_t v4 = a1[35] + 24 * *v3;
  uint64_t v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = *(char **)(v4 + 8);
  unint64_t v7 = v6;
  unint64_t v8 = *(void *)(v4 + 16);
  if ((unint64_t)v6 < v8)
  {
    *(_DWORD *)uint64_t v6 = a2;
    uint64_t v9 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  unint64_t v10 = *(char **)v4;
  uint64_t v11 = (uint64_t)&v6[-*(void *)v4];
  uint64_t v12 = v11 >> 2;
  unint64_t v13 = (v11 >> 2) + 1;
  if (v13 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v8 - (void)v10;
  if (v14 >> 1 > v13) {
    unint64_t v13 = v14 >> 1;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    unint64_t v55 = &v6[-*(void *)v4];
    uint64_t v56 = a1[12] + 4 * *(int *)(a1[1] + 56 * a2);
    if (v15 >> 62) {
      goto LABEL_44;
    }
    int v16 = a2;
    unint64_t v17 = operator new(4 * v15);
    a2 = v16;
    uint64_t v11 = (uint64_t)v55;
    int v3 = (int *)v56;
    uint64_t v18 = &v17[4 * v12];
    uint64_t v19 = &v17[4 * v15];
    *uint64_t v18 = a2;
    uint64_t v9 = (uint64_t)(v18 + 1);
    int64_t v20 = v6 - v10;
    if (v6 == v10) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v17 = 0;
  uint64_t v18 = (_DWORD *)(4 * v12);
  uint64_t v19 = 0;
  *(_DWORD *)(4 * v12) = a2;
  uint64_t v9 = 4 * v12 + 4;
  int64_t v20 = v6 - v10;
  if (v6 != v10)
  {
LABEL_14:
    unint64_t v21 = v20 - 4;
    if (v21 < 0x2C) {
      goto LABEL_49;
    }
    if ((unint64_t)(v6 - v17 - v11) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v7 = &v6[-v23];
    uint64_t v18 = (_DWORD *)((char *)v18 - v23);
    uint64_t v24 = &v17[4 * v12 - 16];
    unint64_t v25 = v6 - 16;
    uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        int v28 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--uint64_t v18 = v28;
      }
      while (v7 != v10);
    }
  }
LABEL_20:
  *(void *)uint64_t v4 = v18;
  *uint64_t v5 = v9;
  *(void *)(v4 + 16) = v19;
  if (v10)
  {
    int v29 = a2;
    operator delete(v10);
    a2 = v29;
  }
LABEL_22:
  *uint64_t v5 = v9;
  uint64_t v30 = a1[35] + 24 * v3[1];
  uint64_t v31 = (uint64_t *)(v30 + 8);
  uint64_t v32 = *(char **)(v30 + 8);
  unint64_t v33 = *(void *)(v30 + 16);
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)uint64_t v32 = a2;
    uint64_t v34 = (uint64_t)(v32 + 4);
    goto LABEL_43;
  }
  unint64_t v35 = *(char **)v30;
  uint64_t v36 = (uint64_t)&v32[-*(void *)v30];
  uint64_t v37 = v36 >> 2;
  unint64_t v38 = (v36 >> 2) + 1;
  if (v38 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v39 = v33 - (void)v35;
  if (v39 >> 1 > v38) {
    unint64_t v38 = v39 >> 1;
  }
  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v40 = v38;
  }
  if (!v40)
  {
    uint64_t v42 = 0;
    uint64_t v43 = (_DWORD *)(4 * v37);
    int v44 = 0;
    *(_DWORD *)(4 * v37) = a2;
    uint64_t v34 = 4 * v37 + 4;
    int64_t v45 = v32 - v35;
    if (v32 == v35) {
      goto LABEL_41;
    }
LABEL_35:
    unint64_t v46 = v45 - 4;
    if (v46 < 0x2C) {
      goto LABEL_50;
    }
    if ((unint64_t)(v32 - &v42[v36]) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v47 = (v46 >> 2) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v49 = &v32[-v48];
    uint64_t v43 = (_DWORD *)((char *)v43 - v48);
    uint64_t v50 = &v42[4 * v37 - 16];
    double v51 = v32 - 16;
    uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *uint64_t v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 8;
    }
    while (v52);
    uint64_t v32 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_50:
      do
      {
        int v54 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--uint64_t v43 = v54;
      }
      while (v32 != v35);
    }
    goto LABEL_41;
  }
  if (v40 >> 62) {
LABEL_44:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  int v41 = a2;
  uint64_t v42 = operator new(4 * v40);
  uint64_t v43 = &v42[4 * v37];
  int v44 = &v42[4 * v40];
  *uint64_t v43 = v41;
  uint64_t v34 = (uint64_t)(v43 + 1);
  int64_t v45 = v32 - v35;
  if (v32 != v35) {
    goto LABEL_35;
  }
LABEL_41:
  *(void *)uint64_t v30 = v43;
  *uint64_t v31 = v34;
  *(void *)(v30 + 16) = v44;
  if (v35) {
    operator delete(v35);
  }
LABEL_43:
  *uint64_t v31 = v34;
}

uint64_t operations_research::sat::DratChecker::HasRupProperty(void *a1, int a2, int *a3, uint64_t a4)
{
  if (!a4)
  {
    int v11 = -1;
    unint64_t v13 = (int *)a1[38];
    uint64_t v12 = (int *)a1[39];
    if (v13 == v12) {
      goto LABEL_61;
    }
    goto LABEL_11;
  }
  uint64_t v7 = 4 * a4 - 4;
  do
  {
    int v8 = *a3++;
    int v9 = operations_research::sat::DratChecker::AssignAndPropagate(a1, a2, v8 ^ 1u, -1);
    BOOL v10 = v9 != -1 || v7 == 0;
    v7 -= 4;
  }
  while (!v10);
  int v11 = v9;
  unint64_t v13 = (int *)a1[38];
  uint64_t v12 = (int *)a1[39];
  if (v13 != v12)
  {
LABEL_11:
    uint64_t v116 = v12;
    uint64_t v118 = (char **)(a1 + 29);
    int v112 = (char **)(a1 + 32);
    while (1)
    {
      uint64_t v14 = *v13;
      if ((int)v14 >= a2) {
        goto LABEL_13;
      }
      uint64_t v15 = a1[1];
      if (*(_DWORD *)(v15 + 56 * (int)v14 + 16) <= a2) {
        goto LABEL_13;
      }
      uint64_t v16 = v14 << 32;
      uint64_t v17 = *(unsigned int *)(a1[12] + 4 * *(int *)(v15 + 56 * (int)v14));
      if (!*(unsigned char *)(v15 + 56 * (int)v14 + 48)) {
        break;
      }
      uint64_t v19 = (char *)a1[30];
      unint64_t v18 = a1[31];
      if ((unint64_t)v19 >= v18)
      {
        int64_t v20 = *v118;
        uint64_t v21 = v19 - *v118;
        uint64_t v22 = v21 >> 3;
        unint64_t v23 = (v21 >> 3) + 1;
        if (v23 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v18 - (void)v20;
        if (v24 >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v113 = v23;
        if (v23)
        {
          if (v23 >> 61) {
            goto LABEL_120;
          }
          unint64_t v25 = operator new(8 * v23);
          uint64_t v26 = (uint64_t *)&v25[8 * v22];
          *uint64_t v26 = v16 | v17;
          uint64_t v27 = (uint64_t)(v26 + 1);
          if (v19 == v20) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v19 - 8 - v20;
          if (v38 < 0x58) {
            goto LABEL_126;
          }
          if ((unint64_t)(v19 - &v25[v21]) < 0x20) {
            goto LABEL_126;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v19[-v40];
          uint64_t v26 = (uint64_t *)((char *)v26 - v40);
          uint64_t v42 = &v25[8 * v22 - 16];
          uint64_t v43 = v19 - 16;
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *uint64_t v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          uint64_t v19 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_126:
            do
            {
              uint64_t v46 = *((void *)v19 - 1);
              v19 -= 8;
              *--uint64_t v26 = v46;
            }
            while (v19 != v20);
          }
          uint64_t v19 = *v118;
        }
        else
        {
          unint64_t v25 = 0;
          uint64_t v26 = (uint64_t *)(8 * v22);
          *(void *)(8 * v22) = v16 | v17;
          uint64_t v27 = 8 * v22 + 8;
          if (v19 != v20) {
            goto LABEL_39;
          }
        }
LABEL_46:
        a1[29] = v26;
        a1[30] = v27;
        a1[31] = &v25[8 * v113];
        if (v19) {
          operator delete(v19);
        }
        uint64_t v12 = v116;
        a1[30] = v27;
        goto LABEL_13;
      }
      *(void *)uint64_t v19 = v16 | v17;
      a1[30] = v19 + 8;
LABEL_13:
      if (++v13 == v12) {
        goto LABEL_61;
      }
    }
    int v29 = (char *)a1[33];
    unint64_t v28 = a1[34];
    if ((unint64_t)v29 < v28)
    {
      *(void *)int v29 = v16 | v17;
      uint64_t v30 = (uint64_t)(v29 + 8);
LABEL_60:
      a1[33] = v30;
      goto LABEL_13;
    }
    uint64_t v31 = *v112;
    uint64_t v32 = v29 - *v112;
    uint64_t v33 = v32 >> 3;
    unint64_t v34 = (v32 >> 3) + 1;
    if (v34 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v28 - (void)v31;
    if (v35 >> 2 > v34) {
      unint64_t v34 = v35 >> 2;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
    }
    unint64_t v114 = v34;
    if (v34)
    {
      if (v34 >> 61) {
LABEL_120:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v36 = operator new(8 * v34);
      uint64_t v37 = (uint64_t *)&v36[8 * v33];
      *uint64_t v37 = v16 | v17;
      uint64_t v30 = (uint64_t)(v37 + 1);
      if (v29 == v31) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (uint64_t *)(8 * v33);
      *(void *)(8 * v33) = v16 | v17;
      uint64_t v30 = 8 * v33 + 8;
      if (v29 == v31)
      {
LABEL_57:
        a1[32] = v37;
        a1[33] = v30;
        a1[34] = &v36[8 * v114];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v12 = v116;
        goto LABEL_60;
      }
    }
    unint64_t v47 = v29 - 8 - v31;
    if (v47 < 0x58) {
      goto LABEL_127;
    }
    if ((unint64_t)(v29 - &v36[v32]) < 0x20) {
      goto LABEL_127;
    }
    uint64_t v48 = (v47 >> 3) + 1;
    uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v50 = &v29[-v49];
    uint64_t v37 = (uint64_t *)((char *)v37 - v49);
    double v51 = &v36[8 * v33 - 16];
    uint64_t v52 = (long long *)(v29 - 16);
    uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *v52;
      *(v51 - 1) = *(v52 - 1);
      *double v51 = v54;
      v51 -= 2;
      v52 -= 2;
      v53 -= 4;
    }
    while (v53);
    int v29 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_127:
      do
      {
        uint64_t v55 = *((void *)v29 - 1);
        v29 -= 8;
        *--uint64_t v37 = v55;
      }
      while (v29 != v31);
    }
    int v29 = *v112;
    goto LABEL_57;
  }
LABEL_61:
  uint64_t v56 = a1 + 32;
  int v115 = a2;
  uint64_t v117 = (void **)(a1 + 41);
  uint64_t v57 = a1[29];
  if (v57 != a1[30]) {
    goto LABEL_65;
  }
LABEL_67:
  while (2)
  {
    BOOL v59 = a1[32] != a1[33] && v11 == -1;
    unsigned int v58 = v56;
    LODWORD(v60) = v11;
    if (v59)
    {
      while (1)
      {
        uint64_t v61 = v58[1];
        unint64_t v62 = *(void *)(v61 - 8);
        unint64_t v60 = HIDWORD(v62);
        v58[1] = v61 - 8;
        unint64_t v63 = *(void *)(a1[20] + (((unint64_t)(int)v62 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v63 >> (v62 & 0x3E)) & 3) == 0) {
          break;
        }
        int v11 = -1;
        if ((v63 >> (v62 & 0x3F ^ 1))) {
          goto LABEL_97;
        }
        uint64_t v57 = a1[29];
        if (v57 == a1[30]) {
          goto LABEL_67;
        }
LABEL_65:
        unsigned int v58 = a1 + 29;
        if (v11 != -1) {
          goto LABEL_98;
        }
      }
      long long v65 = (char *)a1[42];
      unint64_t v64 = a1[43];
      if ((unint64_t)v65 < v64)
      {
        *(_DWORD *)long long v65 = HIDWORD(v62);
        uint64_t v66 = (uint64_t)(v65 + 4);
        goto LABEL_95;
      }
      long long v67 = v56;
      uint64_t v68 = (char *)*v117;
      uint64_t v69 = v65 - (unsigned char *)*v117;
      uint64_t v70 = v69 >> 2;
      unint64_t v71 = (v69 >> 2) + 1;
      if (v71 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v72 = v64 - (void)v68;
      if (v72 >> 1 > v71) {
        unint64_t v71 = v72 >> 1;
      }
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v119 = v71;
      if (v71)
      {
        if (v71 >> 62) {
          goto LABEL_120;
        }
        long long v73 = operator new(4 * v71);
        uint64_t v74 = &v73[4 * v70];
        _DWORD *v74 = HIDWORD(v62);
        uint64_t v66 = (uint64_t)(v74 + 1);
        if (v65 != v68) {
          goto LABEL_83;
        }
      }
      else
      {
        long long v73 = 0;
        uint64_t v74 = (_DWORD *)(4 * v70);
        *(_DWORD *)(4 * v70) = HIDWORD(v62);
        uint64_t v66 = 4 * v70 + 4;
        if (v65 != v68)
        {
LABEL_83:
          unint64_t v75 = v65 - 4 - v68;
          if (v75 >= 0x2C)
          {
            unint64_t v76 = v65 - &v73[v69];
            uint64_t v56 = v67;
            if (v76 >= 0x20)
            {
              uint64_t v77 = (v75 >> 2) + 1;
              uint64_t v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
              int v79 = &v65[-v78];
              uint64_t v74 = (_DWORD *)((char *)v74 - v78);
              int v80 = &v73[4 * v70 - 16];
              int v81 = v65 - 16;
              uint64_t v82 = v77 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v83 = *(_OWORD *)v81;
                *(v80 - 1) = *((_OWORD *)v81 - 1);
                *int v80 = v83;
                v80 -= 2;
                v81 -= 32;
                v82 -= 8;
              }
              while (v82);
              long long v65 = v79;
              if (v77 == (v77 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_92;
              }
            }
          }
          else
          {
            uint64_t v56 = v67;
          }
          do
          {
            int v84 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--uint64_t v74 = v84;
          }
          while (v65 != v68);
LABEL_92:
          a1[41] = v74;
          a1[42] = v66;
          a1[43] = &v73[4 * v119];
          if (v68) {
            operator delete(v68);
          }
          a2 = v115;
LABEL_95:
          a1[42] = v66;
          int v11 = operations_research::sat::DratChecker::AssignAndPropagate(a1, a2, v62, SHIDWORD(v62));
          uint64_t v57 = a1[29];
          if (v57 == a1[30]) {
            continue;
          }
          goto LABEL_65;
        }
      }
      uint64_t v56 = v67;
      goto LABEL_92;
    }
    break;
  }
LABEL_97:
  int v11 = v60;
  if (v60 == -1)
  {
    uint64_t result = 0;
    unint64_t v107 = (int *)a1[16];
    uint64_t v108 = (int *)a1[17];
    if (v107 == v108) {
      goto LABEL_117;
    }
    goto LABEL_115;
  }
LABEL_98:
  uint64_t v85 = a1[1];
  uint64_t v86 = (int *)(v85 + 56 * v11);
  *((unsigned char *)v86 + 48) = 1;
  uint64_t v87 = a1[12];
  uint64_t v88 = v86[1];
  if (v88)
  {
    uint64_t v89 = (int *)(v87 + 4 * *v86);
    uint64_t v90 = a1[26];
    uint64_t v91 = 4 * v88;
    do
    {
      int v92 = *(_DWORD *)(v90 + 4 * (*v89 >> 1));
      if (v92 != -1) {
        *(unsigned char *)(v85 + 56 * v92 + 49) = 1;
      }
      ++v89;
      v91 -= 4;
    }
    while (v91);
  }
  uint64_t v93 = a1[41];
  uint64_t result = 1;
  uint64_t v95 = ((unint64_t)(a1[42] - v93) >> 2) - 1;
  if ((int)v95 >= 0)
  {
    do
    {
      int v97 = *(_DWORD *)(v93 + 4 * v95);
      uint64_t v98 = v85 + 56 * v97;
      int v100 = *(unsigned __int8 *)(v98 + 49);
      uint64_t v99 = (unsigned char *)(v98 + 49);
      if (v100)
      {
        int64_t v101 = (int *)(v85 + 56 * v97);
        *((unsigned char *)v101 + 48) = 1;
        uint64_t v102 = v101[1];
        if (v102)
        {
          int v103 = (int *)(v87 + 4 * *v101);
          uint64_t v104 = a1[26];
          uint64_t v105 = 4 * v102;
          do
          {
            int v106 = *(_DWORD *)(v104 + 4 * (*v103 >> 1));
            if (v106 != -1) {
              *(unsigned char *)(v85 + 56 * v106 + 49) = 1;
            }
            ++v103;
            v105 -= 4;
          }
          while (v105);
        }
        unsigned char *v99 = 0;
      }
    }
    while (v95-- > 0);
    uint64_t result = 1;
  }
  unint64_t v107 = (int *)a1[16];
  uint64_t v108 = (int *)a1[17];
  if (v107 != v108)
  {
LABEL_115:
    uint64_t v109 = a1[20];
    uint64_t v110 = v107;
    do
    {
      int v111 = *v110++;
      *(void *)(v109 + (((unint64_t)v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v111 & 0x3E));
    }
    while (v110 != v108);
  }
LABEL_117:
  a1[17] = v107;
  a1[30] = v57;
  a1[33] = a1[32];
  a1[42] = a1[41];
  return result;
}

uint64_t operations_research::sat::Resolve(int *a1, uint64_t a2, int *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  BOOL v10 = a1;
  int v11 = *(char **)a7;
  *(void *)(a7 + 8) = *(void *)a7;
  int v66 = a5;
  if (a2)
  {
    uint64_t v12 = a1;
    unint64_t v13 = &a1[a2];
    unint64_t v64 = v13;
    while (1)
    {
      int v15 = *v12;
      if (*v12 == a5) {
        goto LABEL_5;
      }
      *(void *)(*(void *)(a6 + 8) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = *(void *)(v7 + 16);
      if ((unint64_t)v11 >= v16) {
        break;
      }
      *(_DWORD *)int v11 = v15;
      uint64_t v14 = (uint64_t)(v11 + 4);
LABEL_4:
      *(void *)(v7 + 8) = v14;
      int v11 = (char *)v14;
LABEL_5:
      if (++v12 == v13) {
        goto LABEL_32;
      }
    }
    uint64_t v17 = a6;
    unint64_t v18 = *(char **)v7;
    uint64_t v19 = (uint64_t)&v11[-*(void *)v7];
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
LABEL_75:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v22 = v16 - (void)v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v68 = v21;
    if (v21)
    {
      if (v21 >> 62) {
LABEL_76:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      unint64_t v23 = operator new(4 * v21);
      uint64_t v24 = &v23[4 * v20];
      _DWORD *v24 = v15;
      uint64_t v14 = (uint64_t)(v24 + 1);
      if (v11 != v18)
      {
LABEL_16:
        unint64_t v25 = v11 - 4 - v18;
        if (v25 >= 0xBC
          && &v23[v19 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] <= &v23[v19 - 4]
          && &v11[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v11 - 4
          && (unint64_t)(v11 - &v23[v19]) >= 0x20)
        {
          uint64_t v29 = (v25 >> 2) + 1;
          uint64_t v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v26 = &v11[-v30];
          uint64_t v24 = (_DWORD *)((char *)v24 - v30);
          uint64_t v31 = &v23[4 * v20 - 16];
          uint64_t v32 = v11 - 16;
          uint64_t v33 = v29 & 0x7FFFFFFFFFFFFFF8;
          a6 = v17;
          do
          {
            long long v34 = *(_OWORD *)v32;
            *(v31 - 1) = *((_OWORD *)v32 - 1);
            *uint64_t v31 = v34;
            v31 -= 2;
            v32 -= 32;
            v33 -= 8;
          }
          while (v33);
          uint64_t v7 = a7;
          unint64_t v27 = v68;
          if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_22:
            *(void *)uint64_t v7 = v24;
            *(void *)(v7 + 8) = v14;
            *(void *)(v7 + 16) = &v23[4 * v27];
            if (!v18)
            {
LABEL_24:
              unint64_t v13 = v64;
              a5 = v66;
              goto LABEL_4;
            }
LABEL_23:
            operator delete(v18);
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v26 = v11;
          a6 = v17;
          uint64_t v7 = a7;
          unint64_t v27 = v68;
        }
        do
        {
          int v28 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *--uint64_t v24 = v28;
        }
        while (v26 != v18);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v23 = 0;
      uint64_t v24 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v15;
      uint64_t v14 = 4 * v20 + 4;
      if (v11 != v18) {
        goto LABEL_16;
      }
    }
    a6 = v17;
    uint64_t v7 = a7;
    *(void *)a7 = v24;
    *(void *)(a7 + 8) = v14;
    *(void *)(a7 + 16) = &v23[4 * v68];
    if (!v18) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_32:
  if (!a4)
  {
    uint64_t result = 1;
    uint64_t v59 = a2;
    if (a2) {
      goto LABEL_70;
    }
    return result;
  }
  int v35 = a5 ^ 1;
  uint64_t v36 = &a3[a4];
  long long v65 = v36;
  while (1)
  {
    int v38 = *a3;
    if (*a3 == v35) {
      goto LABEL_36;
    }
    unint64_t v39 = *(void *)(*(void *)(a6 + 8) + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v39 >> (v38 & 0x3F ^ 1u))) {
      break;
    }
    if (((v39 >> (v38 & 0x3E)) & 3) != 0) {
      goto LABEL_36;
    }
    unint64_t v40 = *(void *)(v7 + 16);
    if ((unint64_t)v11 >= v40)
    {
      int v41 = *(char **)v7;
      uint64_t v42 = (uint64_t)&v11[-*(void *)v7];
      uint64_t v43 = v42 >> 2;
      unint64_t v44 = (v42 >> 2) + 1;
      if (v44 >> 62) {
        goto LABEL_75;
      }
      uint64_t v45 = v40 - (void)v41;
      if (v45 >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v69 = v44;
      if (v44)
      {
        if (v44 >> 62) {
          goto LABEL_76;
        }
        uint64_t v46 = operator new(4 * v44);
        unint64_t v47 = &v46[4 * v43];
        *unint64_t v47 = v38;
        uint64_t v37 = (uint64_t)(v47 + 1);
        if (v11 != v41)
        {
LABEL_49:
          unint64_t v48 = v11 - 4 - v41;
          if (v48 < 0xBC
            || &v46[v42 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v46[v42 - 4]
            || &v11[-(v48 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4
            || (unint64_t)(v11 - v46 - v42) < 0x20)
          {
            uint64_t v49 = v11;
            uint64_t v7 = a7;
            unint64_t v50 = v69;
          }
          else
          {
            uint64_t v52 = (v48 >> 2) + 1;
            uint64_t v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v49 = &v11[-v53];
            unint64_t v47 = (_DWORD *)((char *)v47 - v53);
            long long v54 = &v46[4 * v43 - 16];
            uint64_t v55 = v11 - 16;
            uint64_t v56 = v52 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              _OWORD *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 8;
            }
            while (v56);
            uint64_t v7 = a7;
            unint64_t v50 = v69;
            if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_52:
              *(void *)uint64_t v7 = v47;
              *(void *)(v7 + 8) = v37;
              *(void *)(v7 + 16) = &v46[4 * v50];
              if (v41) {
                goto LABEL_53;
              }
              goto LABEL_54;
            }
          }
          do
          {
            int v51 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--unint64_t v47 = v51;
          }
          while (v49 != v41);
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v46 = 0;
        unint64_t v47 = (_DWORD *)(4 * v43);
        *(_DWORD *)(4 * v43) = v38;
        uint64_t v37 = 4 * v43 + 4;
        if (v11 != v41) {
          goto LABEL_49;
        }
      }
      uint64_t v7 = a7;
      *(void *)a7 = v47;
      *(void *)(a7 + 8) = v37;
      *(void *)(a7 + 16) = &v46[4 * v69];
      if (v41) {
LABEL_53:
      }
        operator delete(v41);
LABEL_54:
      uint64_t v36 = v65;
      goto LABEL_35;
    }
    *(_DWORD *)int v11 = v38;
    uint64_t v37 = (uint64_t)(v11 + 4);
LABEL_35:
    *(void *)(v7 + 8) = v37;
    int v11 = (char *)v37;
LABEL_36:
    if (++a3 == v36)
    {
      uint64_t result = 1;
      goto LABEL_69;
    }
  }
  uint64_t result = 0;
LABEL_69:
  a5 = v66;
  uint64_t v59 = a2;
  if (a2)
  {
LABEL_70:
    uint64_t v60 = 4 * v59;
    do
    {
      unint64_t v61 = *v10;
      if (v61 != a5) {
        *(void *)(*(void *)(a6 + 8) + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v61 & 0x3E));
      }
      ++v10;
      v60 -= 4;
    }
    while (v60);
  }
  return result;
}

void operations_research::sat::DratChecker::LogStatistics(operations_research::sat::DratChecker *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((int)(-1227133513 * ((*((void *)this + 2) - v1) >> 3)) >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = -1227133513 * ((*((void *)this + 2) - v1) >> 3);
    uint64_t v6 = (unsigned __int8 *)(v1 + 48);
    do
    {
      int v7 = *v6;
      v6 += 56;
      if (v7)
      {
        if (v2 < *(int *)this) {
          ++v3;
        }
        else {
          ++v4;
        }
      }
      ++v2;
    }
    while (v5 != v2);
  }
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 450);
  google::LogMessage::stream((google::LogMessage *)v13);
  int v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" problem clauses needed for proof, out of ", 42);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 453);
  google::LogMessage::stream((google::LogMessage *)v13);
  int v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" infered clauses needed for proof, out of ", 42);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 456);
  google::LogMessage::stream((google::LogMessage *)v13);
  BOOL v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" RAT infered clauses", 20);
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
  google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/drat_checker.cc", 457);
  int v11 = (void *)google::LogMessage::stream((google::LogMessage *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"verification time: ", 19);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" s", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)v13);
}

void sub_23CCD9584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCD9598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCD95AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCD95C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::DratChecker::AssignAndPropagate(void *a1, int a2, int a3, int a4)
{
  int v9 = (int *)a1[17];
  unint64_t v8 = a1[18];
  BOOL v10 = v9;
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v12 = (int *)a1[16];
    uint64_t v13 = v9 - v12;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v8 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
LABEL_112:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v17 = operator new(4 * v16);
      unint64_t v18 = (int *)&v17[4 * v13];
      uint64_t v19 = &v17[4 * v16];
      *unint64_t v18 = a3;
      uint64_t v11 = (uint64_t)(v18 + 1);
      int64_t v20 = (char *)v9 - (char *)v12;
      if (v9 == v12) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v18 = (int *)(4 * v13);
      uint64_t v19 = 0;
      *(_DWORD *)(4 * v13) = a3;
      uint64_t v11 = 4 * v13 + 4;
      int64_t v20 = (char *)v9 - (char *)v12;
      if (v9 == v12)
      {
LABEL_20:
        a1[16] = v18;
        a1[17] = v11;
        a1[18] = v19;
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_22;
      }
    }
    unint64_t v21 = v20 - 4;
    if (v21 < 0x2C) {
      goto LABEL_119;
    }
    if ((unint64_t)((char *)v12 - v17) < 0x20) {
      goto LABEL_119;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    BOOL v10 = &v9[v23 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v18 = (int *)((char *)v18 - v23);
    uint64_t v24 = &v17[4 * v13 - 16];
    unint64_t v25 = v9 - 4;
    uint64_t v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_119:
      do
      {
        int v28 = *--v10;
        *--unint64_t v18 = v28;
      }
      while (v10 != v12);
    }
    goto LABEL_20;
  }
  *int v9 = a3;
  uint64_t v11 = (uint64_t)(v9 + 1);
LABEL_22:
  *(void *)(a1[20] + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
  *(_DWORD *)(a1[26] + 4 * (a3 >> 1)) = a4;
  a1[17] = v11;
  uint64_t v29 = a3 ^ 1;
  uint64_t v30 = (std::vector<int> *)(a1[35] + 24 * (int)v29);
  begin = v30->__begin_;
  p_end = &v30->__end_;
  end = v30->__end_;
  if (v30->__begin_ == end)
  {
    uint64_t v35 = 0xFFFFFFFFLL;
    uint64_t v116 = 0;
    BOOL v118 = 1;
    goto LABEL_109;
  }
  int v34 = 0;
  uint64_t v138 = (char **)(a1 + 29);
  unint64_t v134 = (char **)(a1 + 32);
  uint64_t v35 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v37 = *begin;
    if ((int)v37 >= a2) {
      goto LABEL_27;
    }
    if (v35 != -1) {
      goto LABEL_25;
    }
    uint64_t v38 = a1[1];
    uint64_t v39 = a1[12];
    uint64_t v40 = *(int *)(v38 + 56 * (int)v37);
    int v41 = (_DWORD *)(v39 + 4 * v40);
    uint64_t v42 = *v41 ^ v41[1] ^ v29;
    uint64_t v43 = a1[20];
    unint64_t v44 = *(void *)(v43 + (((unint64_t)(int)v42 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v44 >> ((*(unsigned char *)v41 ^ *((unsigned char *)v41 + 4)) ^ v29)))
    {
      v30->__begin_[v34] = v37;
      int v36 = v34 + 1;
      uint64_t v35 = 0xFFFFFFFFLL;
      goto LABEL_26;
    }
    uint64_t v45 = *(unsigned int *)(v38 + 56 * (int)v37 + 4);
    if ((int)v45 < 3)
    {
LABEL_24:
      uint64_t v35 = *begin;
      if ((v44 >> ((*(unsigned char *)v41 ^ *((unsigned char *)v41 + 4) ^ v29) & 0x3F ^ 1)))
      {
LABEL_25:
        v30->__begin_[v34] = v37;
        int v36 = v34 + 1;
LABEL_26:
        int v34 = v36;
        goto LABEL_27;
      }
      uint64_t v49 = v37 << 32;
      if (*(unsigned char *)(v38 + 56 * (int)v37 + 48))
      {
        int v51 = (char *)a1[30];
        unint64_t v50 = a1[31];
        if ((unint64_t)v51 < v50)
        {
          *(void *)int v51 = v49 | v42;
          a1[30] = v51 + 8;
LABEL_105:
          uint64_t v35 = 0xFFFFFFFFLL;
          goto LABEL_25;
        }
        unint64_t v69 = *v138;
        uint64_t v70 = v51 - *v138;
        uint64_t v71 = v70 >> 3;
        unint64_t v72 = (v70 >> 3) + 1;
        if (v72 >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v50 - (void)v69;
        if (v73 >> 2 > v72) {
          unint64_t v72 = v73 >> 2;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        int64_t v136 = p_end;
        unint64_t v132 = v72;
        if (v72)
        {
          uint64_t v122 = (char *)(v51 - *v138);
          uint64_t v125 = v70 >> 3;
          uint64_t v129 = v29;
          if (v72 >> 61) {
            goto LABEL_112;
          }
          uint64_t v74 = operator new(8 * v72);
          uint64_t v29 = v129;
          uint64_t v70 = (uint64_t)v122;
          uint64_t v71 = v125;
          unint64_t v75 = (uint64_t *)&v74[8 * v125];
          *unint64_t v75 = (v37 << 32) | v42;
          uint64_t v76 = (uint64_t)(v75 + 1);
          if (v51 == v69) {
            goto LABEL_90;
          }
LABEL_83:
          unint64_t v96 = v51 - 8 - v69;
          if (v96 < 0x58) {
            goto LABEL_120;
          }
          if ((unint64_t)(v51 - &v74[v70]) < 0x20) {
            goto LABEL_120;
          }
          uint64_t v97 = (v96 >> 3) + 1;
          uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v99 = &v51[-v98];
          unint64_t v75 = (uint64_t *)((char *)v75 - v98);
          int v100 = &v74[8 * v71 - 16];
          int64_t v101 = v51 - 16;
          uint64_t v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v103 = *(_OWORD *)v101;
            *(v100 - 1) = *((_OWORD *)v101 - 1);
            _OWORD *v100 = v103;
            v100 -= 2;
            v101 -= 32;
            v102 -= 4;
          }
          while (v102);
          int v51 = v99;
          if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_120:
            do
            {
              uint64_t v104 = *((void *)v51 - 1);
              v51 -= 8;
              *--unint64_t v75 = v104;
            }
            while (v51 != v69);
          }
          int v51 = *v138;
        }
        else
        {
          uint64_t v74 = 0;
          unint64_t v75 = (uint64_t *)(8 * v71);
          *(void *)(8 * v71) = v49 | v42;
          uint64_t v76 = 8 * v71 + 8;
          if (v51 != v69) {
            goto LABEL_83;
          }
        }
LABEL_90:
        a1[29] = v75;
        a1[30] = v76;
        a1[31] = &v74[8 * v132];
        if (v51)
        {
          uint64_t v105 = v29;
          operator delete(v51);
          uint64_t v29 = v105;
        }
        p_end = v136;
        a1[30] = v76;
        goto LABEL_105;
      }
      long long v67 = (char *)a1[33];
      unint64_t v66 = a1[34];
      if ((unint64_t)v67 < v66)
      {
        *(void *)long long v67 = v49 | v42;
        uint64_t v68 = (uint64_t)(v67 + 8);
LABEL_104:
        a1[33] = v68;
        goto LABEL_105;
      }
      uint64_t v77 = *v134;
      uint64_t v78 = v67 - *v134;
      uint64_t v79 = v78 >> 3;
      unint64_t v80 = (v78 >> 3) + 1;
      if (v80 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v81 = v66 - (void)v77;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v137 = p_end;
      unint64_t v133 = v80;
      if (v80)
      {
        uint64_t v123 = (char *)(v67 - *v134);
        uint64_t v126 = v78 >> 3;
        uint64_t v130 = v29;
        if (v80 >> 61) {
          goto LABEL_112;
        }
        uint64_t v82 = operator new(8 * v80);
        uint64_t v29 = v130;
        uint64_t v78 = (uint64_t)v123;
        uint64_t v79 = v126;
        long long v83 = (uint64_t *)&v82[8 * v126];
        *long long v83 = (v37 << 32) | v42;
        uint64_t v68 = (uint64_t)(v83 + 1);
        if (v67 == v77) {
          goto LABEL_101;
        }
LABEL_94:
        unint64_t v106 = v67 - 8 - v77;
        if (v106 < 0x58) {
          goto LABEL_121;
        }
        if ((unint64_t)(v67 - &v82[v78]) < 0x20) {
          goto LABEL_121;
        }
        uint64_t v107 = (v106 >> 3) + 1;
        uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v109 = &v67[-v108];
        long long v83 = (uint64_t *)((char *)v83 - v108);
        uint64_t v110 = &v82[8 * v79 - 16];
        int v111 = v67 - 16;
        uint64_t v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          *uint64_t v110 = v113;
          v110 -= 2;
          v111 -= 32;
          v112 -= 4;
        }
        while (v112);
        long long v67 = v109;
        if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_121:
          do
          {
            uint64_t v114 = *((void *)v67 - 1);
            v67 -= 8;
            *--long long v83 = v114;
          }
          while (v67 != v77);
        }
        long long v67 = *v134;
      }
      else
      {
        uint64_t v82 = 0;
        long long v83 = (uint64_t *)(8 * v79);
        *(void *)(8 * v79) = v49 | v42;
        uint64_t v68 = 8 * v79 + 8;
        if (v67 != v77) {
          goto LABEL_94;
        }
      }
LABEL_101:
      a1[32] = v83;
      a1[33] = v68;
      a1[34] = &v82[8 * v133];
      if (v67)
      {
        uint64_t v115 = v29;
        operator delete(v67);
        uint64_t v29 = v115;
      }
      p_end = v137;
      goto LABEL_104;
    }
    uint64_t v46 = (int *)(v39 + 4 * v40 + 8);
    uint64_t v47 = v45 - 2;
    while (1)
    {
      int v48 = *v46;
      if (((*(void *)(v43 + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v48 & 0x3F ^ 1u)) & 1) == 0) {
        break;
      }
      ++v46;
      if (!--v47) {
        goto LABEL_24;
      }
    }
    _DWORD *v41 = v42;
    v41[1] = v48;
    *uint64_t v46 = v29;
    uint64_t v52 = (void *)(a1[35] + 24 * (int)v41[1]);
    long long v54 = v52 + 1;
    uint64_t v53 = (char *)v52[1];
    uint64_t v56 = v52 + 2;
    unint64_t v55 = v52[2];
    if ((unint64_t)v53 >= v55)
    {
      unsigned int v58 = (char *)*v52;
      uint64_t v59 = (uint64_t)&v53[-*v52];
      uint64_t v60 = v59 >> 2;
      unint64_t v61 = (v59 >> 2) + 1;
      if (v61 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v62 = v55 - (void)v58;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
      }
      int v135 = p_end;
      unint64_t v131 = v61;
      if (v61)
      {
        uint64_t v120 = &v53[-*v52];
        uint64_t v121 = v59 >> 2;
        int64_t v124 = v52 + 2;
        uint64_t v127 = a1[35] + 24 * (int)v41[1];
        int64_t v128 = v52 + 1;
        if (v61 >> 62) {
          goto LABEL_112;
        }
        uint64_t v63 = v29;
        unint64_t v64 = operator new(4 * v61);
        uint64_t v29 = v63;
        uint64_t v52 = (void *)v127;
        long long v54 = v128;
        uint64_t v60 = v121;
        uint64_t v56 = v124;
        uint64_t v59 = (uint64_t)v120;
        long long v65 = &v64[4 * v121];
        *long long v65 = v37;
        uint64_t v57 = (uint64_t)(v65 + 1);
        if (v53 == v58) {
          goto LABEL_78;
        }
      }
      else
      {
        unint64_t v64 = 0;
        long long v65 = (_DWORD *)(4 * v60);
        *(_DWORD *)(4 * v60) = v37;
        uint64_t v57 = 4 * v60 + 4;
        if (v53 == v58)
        {
LABEL_78:
          *uint64_t v52 = v65;
          uint64_t *v54 = v57;
          *uint64_t v56 = &v64[4 * v131];
          if (v58)
          {
            uint64_t v93 = v58;
            uint64_t v94 = v29;
            uint64_t v95 = v57;
            operator delete(v93);
            uint64_t v57 = v95;
            uint64_t v29 = v94;
          }
          p_end = v135;
          goto LABEL_81;
        }
      }
      unint64_t v84 = v53 - 4 - v58;
      if (v84 < 0x2C) {
        goto LABEL_122;
      }
      if ((unint64_t)(v53 - &v64[v59]) < 0x20) {
        goto LABEL_122;
      }
      uint64_t v85 = (v84 >> 2) + 1;
      uint64_t v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v87 = &v53[-v86];
      long long v65 = (_DWORD *)((char *)v65 - v86);
      uint64_t v88 = &v64[4 * v60 - 16];
      uint64_t v89 = v53 - 16;
      uint64_t v90 = v85 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v91 = *(_OWORD *)v89;
        *(v88 - 1) = *((_OWORD *)v89 - 1);
        _OWORD *v88 = v91;
        v88 -= 2;
        v89 -= 32;
        v90 -= 8;
      }
      while (v90);
      uint64_t v53 = v87;
      if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_122:
        do
        {
          int v92 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *--long long v65 = v92;
        }
        while (v53 != v58);
      }
      goto LABEL_78;
    }
    *(_DWORD *)uint64_t v53 = v37;
    uint64_t v57 = (uint64_t)(v53 + 4);
LABEL_81:
    uint64_t *v54 = v57;
    uint64_t v35 = 0xFFFFFFFFLL;
LABEL_27:
    ++begin;
  }
  while (begin != end);
  begin = v30->__begin_;
  uint64_t v116 = v34;
  unint64_t v117 = *p_end - v30->__begin_;
  BOOL v118 = v34 >= v117;
  if (v34 > v117)
  {
    std::vector<int>::__append(v30, v34 - v117);
    return v35;
  }
LABEL_109:
  if (!v118) {
    std::vector<int>::pointer *p_end = &begin[v116];
  }
  return v35;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::find_or_prepare_insert<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>(uint64_t *a1, int *a2)
{
  int v3 = *a2;
  unint64_t v4 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *a2);
  uint64_t v5 = 0;
  unint64_t v6 = ((unint64_t)*a1 >> 12) ^ (v4 >> 7);
  uint64_t v7 = a1[3];
  while (1)
  {
    unint64_t v8 = v6 & v7;
    uint64_t v9 = *(void *)(*a1 + v8);
    unint64_t v10 = ((v9 ^ (0x101010101010101 * (v4 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v4 & 0x7F))) & 0x8080808080808080;
    if (v10)
    {
      uint64_t v11 = a1[7];
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t v13 = *(void *)(v11 + 96);
      unint64_t v14 = (int *)(v12 + 56 * v3);
      int v15 = v14[1];
      do
      {
        unint64_t result = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
        uint64_t v17 = (int *)(v12 + 56 * *(int *)(a1[1] + 4 * result));
        uint64_t v18 = v17[1];
        if (v18 == v15)
        {
          if (!v15) {
            return result;
          }
          uint64_t v19 = (_DWORD *)(v13 + 4 * *v17);
          int64_t v20 = (_DWORD *)(v13 + 4 * *v14);
          uint64_t v21 = 4 * v18;
          while (*v19 == *v20)
          {
            ++v19;
            ++v20;
            v21 -= 4;
            if (!v21) {
              return result;
            }
          }
        }
        v10 &= v10 - 1;
      }
      while (v10);
    }
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0) {
      break;
    }
    v5 += 8;
    unint64_t v6 = v5 + v8;
  }
  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::prepare_insert(a1, v4);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::rehash_and_grow_if_necessary(a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::rehash_and_grow_if_necessary(uint64_t *a1)
{
  unint64_t v1 = a1[3];
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (a1[2] > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::resize(a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::drop_deletes_without_resize((unint64_t)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::resize(uint64_t *a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1[1];
  unint64_t v6 = (char *)a1[3];
  a1[3] = (uint64_t)a2;
  if (!v5)
  {
    unint64_t v7 = (char *)a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (char *)operator new(v2 + 9 + 4 * v2);
  *a1 = (uint64_t)v8;
  a1[1] = (uint64_t)&v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = (char *)a1[2];
  a1[5] = v9 - (void)v10;
  uint64_t v11 = (char *)a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)uint64_t v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    uint64_t v21 = (char *)a1[4];
    if (!v21) {
      return;
    }
LABEL_21:
    *((void *)v21 + 4) = v13 >> 3;
    *((void *)v21 + 2) = 0;
    return;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[v4] & 0x80000000) == 0)
    {
      unint64_t v16 = operations_research::sat::DratChecker::ClauseHash::operator()(a1 + 6, *(_DWORD *)&v5[4 * (void)v12]);
      uint64_t v17 = (char *)*a1;
      uint64_t v18 = (char *)a1[3];
      unint64_t v19 = (((unint64_t)*a1 >> 12) ^ (v16 >> 7)) & (unint64_t)v18;
      unint64_t v20 = *(void *)(*a1 + v19) & (~*(void *)(*a1 + v19) << 7) & 0x8080808080808080;
      if (v20)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v19 = (v14 + v19) & (unint64_t)v18;
          unint64_t v20 = *(void *)&v17[v19] & (~*(void *)&v17[v19] << 7) & 0x8080808080808080;
        }
        while (!v20);
      }
      unint64_t v15 = (v19 + (__clz(__rbit64(v20)) >> 3)) & (unint64_t)v18;
      v13 += v14;
      v17[v15] = v16 & 0x7F;
      *(unsigned char *)((a1[3] & 7) + *a1 + ((v15 - 8) & a1[3]) + 1) = v16 & 0x7F;
      *(_DWORD *)(a1[1] + 4 * v15) = *(_DWORD *)&v5[4 * (void)v12];
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete((void *)v4);
  uint64_t v21 = (char *)a1[4];
  if (v21) {
    goto LABEL_21;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>,operations_research::sat::DratChecker::ClauseHash,operations_research::sat::DratChecker::ClauseEquiv,std::allocator<gtl::IntType<operations_research::sat::ClauseIndex_tag_,int>>>::drop_deletes_without_resize(unint64_t result)
{
  unint64_t v1 = (void *)result;
  unint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v4 = *(void *)result + v3;
  if (v4 + 1 != *(void *)result)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)result;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(result + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v28 = *(void *)(result + 32);
    if (!v28) {
      return result;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return result;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *v1;
    if (*(unsigned __int8 *)(*v1 + v15) == 254)
    {
      unint64_t result = operations_research::sat::DratChecker::ClauseHash::operator()(v1 + 6, *(_DWORD *)(v1[1] + 4 * v15));
      unint64_t v21 = ((result >> 7) ^ (v20 >> 12)) & v14;
      unint64_t v22 = *(void *)(v20 + v21) & (~*(void *)(v20 + v21) << 7) & 0x8080808080808080;
      if (v22)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((result >> 7) ^ (v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((result >> 7) ^ (v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v22 = *(void *)(v20 + v18) & (~*(void *)(v20 + v18) << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v22)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v21) ^ (v15 - v21)) & v14) > 7)
      {
        int v23 = *(unsigned __int8 *)(v20 + v19);
        *(unsigned char *)(v20 + v19) = result & 0x7F;
        *(unsigned char *)((v1[3] & (v19 - 8)) + (v1[3] & 7) + *v1 + 1) = result & 0x7F;
        uint64_t v24 = v1[1];
        if (v23 == 128)
        {
          *(_DWORD *)(v24 + 4 * v19) = *(_DWORD *)(v24 + 4 * v15);
          *(unsigned char *)(*v1 + v15) = 0x80;
          *(unsigned char *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = 0x80;
        }
        else
        {
          int v25 = *(_DWORD *)(v24 + 4 * v15);
          uint64_t v26 = 4 * v19;
          *(_DWORD *)(v24 + 4 * v15) = *(_DWORD *)(v24 + v26);
          *(_DWORD *)(v24 + v26) = v25;
          --v15;
        }
      }
      else
      {
        *(unsigned char *)(v20 + v15) = result & 0x7F;
        *(unsigned char *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = result & 0x7F;
      }
    }
    ++v15;
    uint64_t v14 = v1[3];
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  v1[5] = v27 - v1[2];
  uint64_t v28 = v1[4];
  if (v28) {
    goto LABEL_26;
  }
  return result;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCDA5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

char *std::vector<operations_research::sat::DratChecker::Clause>::__push_back_slow_path<operations_research::sat::DratChecker::Clause>(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v5 = 0x492492492492492;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 56 * v5;
  unint64_t v8 = (char *)operator new(56 * v5);
  int8x16_t v9 = &v8[56 * v3];
  *(_OWORD *)int8x16_t v9 = *(_OWORD *)a2;
  int8x16_t v10 = &v8[v7];
  *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v9 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_WORD *)v9 + 24) = *(_WORD *)(a2 + 48);
  uint64_t v11 = v9 + 56;
  int8x16_t v12 = (char *)*a1;
  int8x16_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  do
  {
    unint64_t v15 = &v9[v14];
    unint64_t v16 = &v13[v14];
    long long v17 = *(_OWORD *)&v13[v14 - 56];
    *((_DWORD *)v15 - 10) = *(_DWORD *)&v13[v14 - 40];
    *(_OWORD *)(v15 - 56) = v17;
    *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
    *((void *)v15 - 2) = *(void *)&v13[v14 - 16];
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *((_WORD *)v15 - 4) = *(_WORD *)&v13[v14 - 8];
    v14 -= 56;
  }
  while (&v13[v14] != v12);
  unint64_t v18 = (char *)*a1;
  int8x16_t v13 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v18)
  {
    do
    {
      unint64_t v19 = (void *)*((void *)v13 - 4);
      if (v19)
      {
        *((void *)v13 - 3) = v19;
        operator delete(v19);
      }
      v13 -= 56;
    }
    while (v13 != v18);
    int8x16_t v13 = v18;
  }
  if (v13) {
LABEL_18:
  }
    operator delete(v13);
  return v11;
}

void operations_research::sat::DratProofHandler::DratProofHandler(operations_research::sat::DratProofHandler *this)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  operator new();
}

void sub_23CCDA808(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  MEMORY[0x23ECF2BC0](v4, 0x1070C400E70C037);
  unint64_t v6 = (void *)v1[4];
  if (v6)
  {
    v1[5] = v6;
    operator delete(v6);
    uint64_t v7 = *v3;
    if (!*v3) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[2] = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

void operations_research::sat::DratProofHandler::DratProofHandler(operations_research::sat::DratProofHandler *this, BOOL a2, File *a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_DWORD *)this = 0;
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  operator new();
}

void sub_23CCDA944(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v4, 0x1070C400E70C037);
  std::unique_ptr<operations_research::sat::DratWriter>::~unique_ptr[abi:ne180100](v3);
  std::unique_ptr<operations_research::sat::DratChecker>::~unique_ptr[abi:ne180100](v2);
  uint64_t v7 = (void *)v1[4];
  if (v7)
  {
    v1[5] = v7;
    operator delete(v7);
    unint64_t v8 = *v5;
    if (!*v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v8 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  v1[2] = v8;
  operator delete(v8);
  _Unwind_Resume(a1);
}

operations_research::sat::DratChecker **std::unique_ptr<operations_research::sat::DratChecker>::~unique_ptr[abi:ne180100](operations_research::sat::DratChecker **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratChecker::~DratChecker(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

operations_research::sat::DratWriter **std::unique_ptr<operations_research::sat::DratWriter>::~unique_ptr[abi:ne180100](operations_research::sat::DratWriter **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratWriter::~DratWriter(v2);
    MEMORY[0x23ECF2BC0]();
  }
  return a1;
}

void operations_research::sat::DratProofHandler::ApplyMapping(uint64_t a1, uint64_t *a2)
{
  long long v3 = 0uLL;
  memset(&v18, 0, sizeof(v18));
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if ((int)((unint64_t)(v4 - *a2) >> 2) < 1)
  {
    value = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = *(int *)(v5 + 4 * v7);
      if (v10 != -1)
      {
        std::vector<int>::pointer begin = v18.__begin_;
        unint64_t v12 = v18.__end_ - v18.__begin_;
        if ((int)v10 >= (int)v12)
        {
          if (v10 + 1 <= v12)
          {
            if (v10 + 1 < v12) {
              v18.__end_ = &v18.__begin_[v10 + 1];
            }
          }
          else
          {
            std::vector<int>::__append(&v18, v10 + 1 - v12, operations_research::sat::kNoBooleanVariable);
            std::vector<int>::pointer begin = v18.__begin_;
          }
        }
        int8x16_t v13 = &begin[v10];
        if (*v13 != -1) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)v13, (int)operations_research::sat::kNoBooleanVariable, "new_mapping[image] == kNoBooleanVariable");
        }
        uint64_t v14 = *(void *)(a1 + 32);
        if (v7 < (int)((unint64_t)(*(void *)(a1 + 40) - v14) >> 2))
        {
          int v8 = *(_DWORD *)(v14 + 4 * v7);
          int8x16_t v9 = &begin[v10];
          *int8x16_t v9 = v8;
          if (v8 == -1) {
            goto LABEL_18;
          }
        }
        else
        {
          int8x16_t v9 = &begin[v10];
          *int8x16_t v9 = v7;
          if (v7 == -1) {
LABEL_18:
          }
            google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)v9, (int)operations_research::sat::kNoBooleanVariable, "new_mapping[image] != kNoBooleanVariable");
        }
        uint64_t v5 = *a2;
        uint64_t v4 = a2[1];
      }
      ++v7;
    }
    while (v7 < (int)((unint64_t)(v4 - v5) >> 2));
    long long v3 = *(_OWORD *)&v18.__begin_;
    value = v18.__end_cap_.__value_;
  }
  long long v17 = *(int **)(a1 + 48);
  v18.__begin_ = *(std::vector<int>::pointer *)(a1 + 32);
  unint64_t v16 = v18.__begin_;
  v18.__end_cap_.__value_ = v17;
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = value;
  if (v16)
  {
    v18.__end_ = v16;
    operator delete(v16);
  }
}

void sub_23CCDAC4C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCDAC54(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCDAC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DratProofHandler::SetNumVariables(operations_research::sat::DratProofHandler *this, int a2)
{
  int v8 = a2;
  long long v3 = (char *)this + 32;
  unint64_t v4 = (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2;
  v7[0] = v4;
  unint64_t v5 = a2;
  if (v4 > a2) {
    google::MakeCheckOpString<int,unsigned long>((int)&v8, (int)v7, "num_variables >= reverse_mapping_.size()");
  }
  if (v4 < a2)
  {
    do
    {
      int v6 = (*(_DWORD *)this)++;
      LODWORD(v7[0]) = v6;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v3, v7);
    }
    while (v5 > (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2);
  }
}

void sub_23CCDAD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::DratProofHandler::AddOneVariable(operations_research::sat::DratProofHandler *this)
{
  int v1 = (*(_DWORD *)this)++;
  int v2 = v1;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)this + 32, &v2);
}

void operations_research::sat::DratProofHandler::AddProblemClause(uint64_t a1, char *a2, uint64_t a3)
{
  long long v3 = *(void **)(a1 + 56);
  if (v3) {
    operations_research::sat::DratChecker::AddProblemClause(v3, a2, a3);
  }
}

uint64_t operations_research::sat::DratProofHandler::AddClause(uint64_t a1, int *a2, uint64_t a3)
{
  operations_research::sat::DratProofHandler::MapClause((void *)a1, a2, a3);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    operations_research::sat::DratChecker::AddInferedClause(v4, *(char **)(a1 + 8), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    return operations_research::sat::DratWriter::AddClause();
  }
  return result;
}

int *operations_research::sat::DratProofHandler::MapClause(void *a1, int *a2, uint64_t a3)
{
  long long v3 = (int *)a1[1];
  int v34 = (void **)(a1 + 1);
  a1[2] = v3;
  if (a3)
  {
    uint64_t v4 = a2;
    int v6 = &a2[a3];
    while (1)
    {
      while (1)
      {
        int v7 = *v4;
        int v8 = *v4 >> 1;
        int v36 = v8;
        uint64_t v9 = a1[4];
        uint64_t v35 = (a1[5] - v9) >> 2;
        if (v8 >= (int)v35) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,unsigned long>((int)&v36, (int)&v35, "l.Variable() < reverse_mapping_.size()");
        }
        int v10 = v7 & 1 | (2 * *(_DWORD *)(v9 + 4 * v8));
        unint64_t v11 = a1[3];
        if ((unint64_t)v3 >= v11) {
          break;
        }
        *v3++ = v10;
        a1[2] = v3;
        if (++v4 == v6) {
          goto LABEL_35;
        }
      }
      unint64_t v12 = (int *)*v34;
      uint64_t v13 = (char *)v3 - (unsigned char *)*v34;
      uint64_t v14 = v13 >> 2;
      unint64_t v15 = (v13 >> 2) + 1;
      if (v15 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v11 - (void)v12;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        std::vector<int> v18 = operator new(4 * v17);
        unint64_t v19 = (int *)&v18[4 * v14];
        *unint64_t v19 = v10;
        uint64_t v20 = (uint64_t)(v19 + 1);
        if (v3 == v12) {
          goto LABEL_20;
        }
      }
      else
      {
        std::vector<int> v18 = 0;
        unint64_t v19 = (int *)(4 * v14);
        *(_DWORD *)(4 * v14) = v10;
        uint64_t v20 = 4 * v14 + 4;
        if (v3 == v12) {
          goto LABEL_20;
        }
      }
      unint64_t v21 = (char *)(v3 - 1) - (char *)v12;
      if (v21 >= 0xBC)
      {
        if (&v18[v13 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v13 - 4])
        {
          unint64_t v22 = v3;
        }
        else if ((int *)((char *)v3 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
        {
          unint64_t v22 = v3;
        }
        else if ((unint64_t)((char *)v3 - &v18[v13]) >= 0x20)
        {
          uint64_t v24 = (v21 >> 2) + 1;
          uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v22 = &v3[v25 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v19 = (int *)((char *)v19 - v25);
          uint64_t v26 = &v18[4 * v14 - 16];
          uint64_t v27 = v3 - 4;
          uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *uint64_t v26 = v29;
            v26 -= 2;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_20;
          }
        }
        else
        {
          unint64_t v22 = v3;
        }
      }
      else
      {
        unint64_t v22 = v3;
      }
      do
      {
        int v23 = *--v22;
        *--unint64_t v19 = v23;
      }
      while (v22 != v12);
LABEL_20:
      a1[1] = v19;
      a1[2] = v20;
      a1[3] = &v18[4 * v17];
      if (v12) {
        operator delete(v12);
      }
      long long v3 = (int *)v20;
      a1[2] = v20;
      if (++v4 == v6)
      {
LABEL_35:
        uint64_t v30 = (int *)*v34;
        goto LABEL_37;
      }
    }
  }
  uint64_t v30 = v3;
LABEL_37:
  unint64_t v31 = 126 - 2 * __clz(v3 - v30);
  if (v3 == v30) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  return std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(v30, v3, v32, 1);
}

void sub_23CCDB0EC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::DratProofHandler::DeleteClause(uint64_t a1, int *a2, uint64_t a3)
{
  operations_research::sat::DratProofHandler::MapClause((void *)a1, a2, a3);
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4) {
    operations_research::sat::DratChecker::DeleteClause(v4, *(char **)(a1 + 8), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    int v6 = *(int **)(a1 + 8);
    uint64_t v7 = (uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2;
    operations_research::sat::DratWriter::DeleteClause(v5, v6, v7);
  }
}

uint64_t operations_research::sat::DratProofHandler::Check(operations_research::sat::DratProofHandler *this, double a2)
{
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    operations_research::sat::DratChecker::AddInferedClause(result, 0, 0);
    uint64_t v5 = (operations_research::sat::DratChecker *)*((void *)this + 7);
    return operations_research::sat::DratChecker::Check(v5, a2);
  }
  return result;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCDB234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(int *result, int *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v10;
        uint64_t v11 = (char *)a2 - (char *)v10;
        unint64_t v12 = a2 - v10;
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              int v77 = *(a2 - 1);
              int v78 = *v10;
              if (v77) {
                int v79 = ~(v77 >> 1);
              }
              else {
                int v79 = (v77 >> 1) + 1;
              }
              if (v79 < 0) {
                int v79 = -v79;
              }
              if (v78) {
                int v80 = ~(v78 >> 1);
              }
              else {
                int v80 = (v78 >> 1) + 1;
              }
              if (v80 < 0) {
                int v80 = -v80;
              }
              if (v79 > v80)
              {
                int *v10 = v77;
                *(a2 - 1) = v78;
              }
              break;
            case 3uLL:
              uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v10, v10 + 1, a2 - 1);
              break;
            case 4uLL:
              uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v10, v10 + 1, v10 + 2, a2 - 1);
              break;
            case 5uLL:
              uint64_t result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v11 <= 95)
        {
          uint64_t v81 = v10 + 1;
          BOOL v83 = v10 == a2 || v81 == a2;
          if (a4)
          {
            if (!v83)
            {
              uint64_t v84 = 0;
              uint64_t v85 = v10;
              do
              {
                int32x2_t v87 = *(int32x2_t *)v85;
                uint64_t v85 = v81;
                int32x2_t v88 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v87, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, v87, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32(v87, 1uLL))));
                if (v88.i32[1] > (unsigned __int32)v88.i32[0])
                {
                  int v89 = v87.i32[0];
                  uint64_t v90 = v84;
                  do
                  {
                    *(int *)((char *)v10 + v90 + 4) = v89;
                    if (!v90)
                    {
                      uint64_t v86 = v10;
                      goto LABEL_158;
                    }
                    int v89 = *(int *)((char *)v10 + v90 - 4);
                    if (v89) {
                      int v91 = ~(v89 >> 1);
                    }
                    else {
                      int v91 = (v89 >> 1) + 1;
                    }
                    if (v91 < 0) {
                      int v91 = -v91;
                    }
                    v90 -= 4;
                  }
                  while (v88.i32[1] > v91);
                  uint64_t v86 = (int *)((char *)v10 + v90 + 4);
LABEL_158:
                  *uint64_t v86 = v87.i32[1];
                }
                uint64_t v81 = v85 + 1;
                v84 += 4;
              }
              while (v85 + 1 != a2);
            }
          }
          else if (!v83)
          {
            do
            {
              int32x2_t v137 = *(int32x2_t *)v9;
              uint64_t v9 = v81;
              int32x2_t v138 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v137, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, v137, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32(v137, 1uLL))));
              if (v138.i32[1] > (unsigned __int32)v138.i32[0])
              {
                int v139 = v137.i32[0];
                int v140 = v9;
                do
                {
                  int *v140 = v139;
                  int v139 = *(v140 - 2);
                  if (v139) {
                    int v141 = ~(v139 >> 1);
                  }
                  else {
                    int v141 = (v139 >> 1) + 1;
                  }
                  if (v141 < 0) {
                    int v141 = -v141;
                  }
                  --v140;
                }
                while (v138.i32[1] > v141);
                int *v140 = v137.i32[1];
              }
              uint64_t v81 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            int64_t v92 = (v12 - 2) >> 1;
            int64_t v93 = v92;
            do
            {
              int64_t v94 = v93;
              if (v92 >= v93)
              {
                uint64_t v95 = (2 * v93) | 1;
                unint64_t v96 = &v10[v95];
                int v97 = *v96;
                if (2 * v94 + 2 < (uint64_t)v12)
                {
                  int v98 = v96[1];
                  if (v97) {
                    int v99 = ~(v97 >> 1);
                  }
                  else {
                    int v99 = (v97 >> 1) + 1;
                  }
                  if (v99 < 0) {
                    int v99 = -v99;
                  }
                  if (v98) {
                    int v100 = ~(v98 >> 1);
                  }
                  else {
                    int v100 = (v98 >> 1) + 1;
                  }
                  if (v100 < 0) {
                    int v100 = -v100;
                  }
                  if (v99 > v100)
                  {
                    int v97 = v96[1];
                    ++v96;
                    uint64_t v95 = 2 * v94 + 2;
                  }
                }
                uint64_t result = &v10[v94];
                __int32 v101 = *result;
                v102.i32[0] = v97;
                v102.i32[1] = *result;
                int32x2_t v103 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(v102, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)v102, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32((int32x2_t)v102, 1uLL))));
                if (v103.i32[0] <= (unsigned __int32)v103.i32[1])
                {
                  do
                  {
                    uint64_t v109 = v96;
                    _DWORD *result = v97;
                    if (v92 < v95) {
                      break;
                    }
                    uint64_t v110 = (2 * v95) | 1;
                    unint64_t v96 = &v10[v110];
                    uint64_t v95 = 2 * v95 + 2;
                    int v97 = *v96;
                    if (v95 < (uint64_t)v12)
                    {
                      int v104 = v96[1];
                      if (v97) {
                        int v105 = ~(v97 >> 1);
                      }
                      else {
                        int v105 = (v97 >> 1) + 1;
                      }
                      if (v105 < 0) {
                        int v105 = -v105;
                      }
                      if (v104) {
                        int v106 = ~(v104 >> 1);
                      }
                      else {
                        int v106 = (v104 >> 1) + 1;
                      }
                      if (v106 < 0) {
                        int v106 = -v106;
                      }
                      if (v105 <= v106)
                      {
                        uint64_t v95 = v110;
                      }
                      else
                      {
                        int v97 = v96[1];
                        ++v96;
                      }
                    }
                    else
                    {
                      uint64_t v95 = v110;
                    }
                    int v107 = (v97 & 1) != 0 ? ~(v97 >> 1) : (v97 >> 1) + 1;
                    unsigned int v108 = v107 >= 0 ? v107 : -v107;
                    uint64_t result = v109;
                  }
                  while (v108 <= v103.i32[1]);
                  *uint64_t v109 = v101;
                }
              }
              int64_t v93 = v94 - 1;
            }
            while (v94);
            uint64_t v111 = (unint64_t)v11 >> 2;
            do
            {
              uint64_t v113 = 0;
              int v114 = *v10;
              int64_t v115 = (unint64_t)(v111 - 2) >> 1;
              uint64_t v116 = v10;
              do
              {
                while (1)
                {
                  uint64_t v121 = &v116[v113];
                  int v122 = v121[1];
                  uint64_t v120 = v121 + 1;
                  int v119 = v122;
                  uint64_t v123 = (2 * v113) | 1;
                  uint64_t v113 = 2 * v113 + 2;
                  if (v113 < v111) {
                    break;
                  }
                  uint64_t v113 = v123;
                  int *v116 = v119;
                  uint64_t v116 = v120;
                  if (v123 > v115) {
                    goto LABEL_234;
                  }
                }
                int v117 = v120[1];
                if (v119) {
                  LODWORD(result) = ~(v119 >> 1);
                }
                else {
                  LODWORD(result) = (v119 >> 1) + 1;
                }
                if ((int)result >= 0) {
                  uint64_t result = (int *)result;
                }
                else {
                  uint64_t result = (int *)-(int)result;
                }
                if (v117) {
                  int v118 = ~(v117 >> 1);
                }
                else {
                  int v118 = (v117 >> 1) + 1;
                }
                if (v118 < 0) {
                  int v118 = -v118;
                }
                if (result <= v118)
                {
                  uint64_t v113 = v123;
                }
                else
                {
                  int v119 = v120[1];
                  ++v120;
                }
                int *v116 = v119;
                uint64_t v116 = v120;
              }
              while (v113 <= v115);
LABEL_234:
              if (v120 == --a2)
              {
                *uint64_t v120 = v114;
              }
              else
              {
                *uint64_t v120 = *a2;
                *a2 = v114;
                uint64_t v124 = (char *)v120 - (char *)v10 + 4;
                if (v124 >= 5)
                {
                  unint64_t v125 = (((unint64_t)v124 >> 2) - 2) >> 1;
                  uint64_t v126 = &v10[v125];
                  int v127 = *v126;
                  int v128 = *v120;
                  int v129 = *v126 >> 1;
                  if (*v126) {
                    int v130 = ~v129;
                  }
                  else {
                    int v130 = v129 + 1;
                  }
                  if (v130 >= 0) {
                    unsigned int v131 = v130;
                  }
                  else {
                    unsigned int v131 = -v130;
                  }
                  if (v128) {
                    int v132 = ~(v128 >> 1);
                  }
                  else {
                    int v132 = (v128 >> 1) + 1;
                  }
                  if (v132 < 0) {
                    int v132 = -v132;
                  }
                  if (v131 > v132)
                  {
                    do
                    {
                      unint64_t v133 = v126;
                      *uint64_t v120 = v127;
                      if (!v125) {
                        break;
                      }
                      unint64_t v125 = (v125 - 1) >> 1;
                      uint64_t v126 = &v10[v125];
                      int v127 = *v126;
                      int v134 = *v126 >> 1;
                      int v135 = (*v126 & 1) != 0 ? ~v134 : v134 + 1;
                      unsigned int v136 = v135 >= 0 ? v135 : -v135;
                      uint64_t v120 = v133;
                    }
                    while (v136 > v132);
                    *unint64_t v133 = v128;
                  }
                }
              }
            }
            while (v111-- > 2);
          }
          return result;
        }
        unint64_t v13 = v12 >> 1;
        uint64_t v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 >= 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v9, &v9[v12 >> 1], a2 - 1);
          unint64_t v15 = &v9[v13];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v9 + 1, v15 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v9 + 2, &v9[v13 + 1], a2 - 3);
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v15 - 1, v14, &v9[v13 + 1]);
          int v16 = *v9;
          *uint64_t v9 = *v15;
          *unint64_t v15 = v16;
          --a3;
          int v17 = *v9;
          int v18 = *v9 >> 1;
          if (a4) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(&v9[v12 >> 1], v9, a2 - 1);
          --a3;
          int v17 = *v9;
          int v18 = *v9 >> 1;
          if (a4)
          {
LABEL_37:
            int v22 = v17 & 1;
            int v23 = ~v18;
            break;
          }
        }
        int v19 = *(v9 - 1);
        if (v19) {
          int v20 = ~(v19 >> 1);
        }
        else {
          int v20 = (v19 >> 1) + 1;
        }
        if (v20 >= 0) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = -v20;
        }
        int v22 = v17 & 1;
        int v23 = ~v18;
        if (v17) {
          unsigned int v24 = ~v18;
        }
        else {
          unsigned int v24 = v18 + 1;
        }
        if ((v24 & 0x80000000) != 0) {
          unsigned int v24 = -v24;
        }
        if (v21 > v24) {
          break;
        }
        int v25 = *(a2 - 1);
        if (v25) {
          int v26 = ~(v25 >> 1);
        }
        else {
          int v26 = (v25 >> 1) + 1;
        }
        if (v26 < 0) {
          int v26 = -v26;
        }
        if (v24 <= v26)
        {
          unsigned int v58 = v9 + 1;
          do
          {
            int v10 = v58;
            if (v58 >= a2) {
              break;
            }
            ++v58;
            int v59 = *v10 >> 1;
            if (*v10) {
              int v60 = ~v59;
            }
            else {
              int v60 = v59 + 1;
            }
            if (v60 < 0) {
              int v60 = -v60;
            }
          }
          while (v24 <= v60);
        }
        else
        {
          int v10 = v9;
          do
          {
            int v27 = v10[1];
            ++v10;
            int v28 = v27 >> 1;
            int v29 = ~(v27 >> 1);
            if (v27) {
              int v30 = v29;
            }
            else {
              int v30 = v28 + 1;
            }
            if (v30 < 0) {
              int v30 = -v30;
            }
          }
          while (v24 <= v30);
        }
        unint64_t v61 = a2;
        if (v10 < a2)
        {
          unint64_t v61 = a2;
          do
          {
            int v62 = *--v61;
            int v63 = v62 >> 1;
            int v64 = ~(v62 >> 1);
            if (v62) {
              int v65 = v64;
            }
            else {
              int v65 = v63 + 1;
            }
            if (v65 < 0) {
              int v65 = -v65;
            }
          }
          while (v24 > v65);
        }
        if (v10 < v61)
        {
          int v66 = *v10;
          int v67 = *v61;
          do
          {
            int *v10 = v67;
            int *v61 = v66;
            do
            {
              int v68 = v10[1];
              ++v10;
              int v66 = v68;
              int v69 = v68 >> 1;
              int v70 = ~(v68 >> 1);
              if (v68) {
                int v71 = v70;
              }
              else {
                int v71 = v69 + 1;
              }
              if (v71 < 0) {
                int v71 = -v71;
              }
            }
            while (v24 <= v71);
            do
            {
              int v72 = *--v61;
              int v67 = v72;
              int v73 = v72 >> 1;
              int v74 = ~(v72 >> 1);
              if (v72) {
                int v75 = v74;
              }
              else {
                int v75 = v73 + 1;
              }
              if (v75 < 0) {
                int v75 = -v75;
              }
            }
            while (v24 > v75);
          }
          while (v10 < v61);
        }
        uint64_t v76 = v10 - 1;
        BOOL v4 = v10 - 1 >= v9;
        BOOL v5 = v10 - 1 == v9;
        if (v10 - 1 != v9) {
          *uint64_t v9 = *v76;
        }
        a4 = 0;
        int *v76 = v17;
      }
      unsigned int v31 = v18 + 1;
      uint64_t v32 = 0;
      if (v22) {
        unsigned int v31 = v23;
      }
      if ((v31 & 0x80000000) != 0) {
        unsigned int v31 = -v31;
      }
      do
      {
        int v33 = v9[v32 + 1];
        if (v33) {
          int v34 = ~(v33 >> 1);
        }
        else {
          int v34 = (v33 >> 1) + 1;
        }
        if (v34 < 0) {
          int v34 = -v34;
        }
        ++v32;
      }
      while (v34 > v31);
      uint64_t v35 = &v9[v32];
      int v36 = a2;
      if (v32 == 1)
      {
        int v36 = a2;
        do
        {
          if (v35 >= v36) {
            break;
          }
          int v41 = *--v36;
          int v42 = v41 >> 1;
          int v43 = ~(v41 >> 1);
          if (v41) {
            int v44 = v43;
          }
          else {
            int v44 = v42 + 1;
          }
          if (v44 < 0) {
            int v44 = -v44;
          }
        }
        while (v44 <= v31);
      }
      else
      {
        do
        {
          int v37 = *--v36;
          int v38 = v37 >> 1;
          int v39 = ~(v37 >> 1);
          if (v37) {
            int v40 = v39;
          }
          else {
            int v40 = v38 + 1;
          }
          if (v40 < 0) {
            int v40 = -v40;
          }
        }
        while (v40 <= v31);
      }
      if (v35 >= v36)
      {
        uint64_t v56 = v35 - 1;
        if (v35 - 1 == v9) {
          goto LABEL_84;
        }
LABEL_83:
        *uint64_t v9 = *v56;
        goto LABEL_84;
      }
      int v45 = *v36;
      uint64_t v46 = v35;
      uint64_t v47 = v36;
      do
      {
        *uint64_t v46 = v45;
        *uint64_t v47 = v33;
        do
        {
          int v48 = v46[1];
          ++v46;
          int v33 = v48;
          int v49 = v48 >> 1;
          int v50 = ~(v48 >> 1);
          if (v48) {
            int v51 = v50;
          }
          else {
            int v51 = v49 + 1;
          }
          if (v51 < 0) {
            int v51 = -v51;
          }
        }
        while (v51 > v31);
        do
        {
          int v52 = *--v47;
          int v45 = v52;
          int v53 = v52 >> 1;
          int v54 = ~(v52 >> 1);
          if (v52) {
            int v55 = v54;
          }
          else {
            int v55 = v53 + 1;
          }
          if (v55 < 0) {
            int v55 = -v55;
          }
        }
        while (v55 <= v31);
      }
      while (v46 < v47);
      uint64_t v56 = v46 - 1;
      if (v46 - 1 != v9) {
        goto LABEL_83;
      }
LABEL_84:
      *uint64_t v56 = v17;
      if (v35 < v36) {
        goto LABEL_87;
      }
      BOOL v57 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v9, v56);
      int v10 = v56 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(v56 + 1, a2);
      if (result) {
        break;
      }
      if (!v57)
      {
LABEL_87:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,false>(v9, v56, a3, a4 & 1);
        a4 = 0;
        int v10 = v56 + 1;
      }
    }
    a2 = v56;
    if (!v57) {
      continue;
    }
    return result;
  }
}

int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a2, a3, a4);
  int v11 = *a4;
  int v12 = *a5 >> 1;
  if (*a5) {
    int v13 = ~v12;
  }
  else {
    int v13 = v12 + 1;
  }
  if (v13 < 0) {
    int v13 = -v13;
  }
  if (v11) {
    int v14 = ~(v11 >> 1);
  }
  else {
    int v14 = (v11 >> 1) + 1;
  }
  if (v14 < 0) {
    int v14 = -v14;
  }
  if (v13 > v14)
  {
    *a4 = *a5;
    *a5 = v11;
    int v15 = *a3;
    int v16 = *a4 >> 1;
    if (*a4) {
      int v17 = ~v16;
    }
    else {
      int v17 = v16 + 1;
    }
    if (v17 < 0) {
      int v17 = -v17;
    }
    if (v15) {
      int v18 = ~(v15 >> 1);
    }
    else {
      int v18 = (v15 >> 1) + 1;
    }
    if (v18 < 0) {
      int v18 = -v18;
    }
    if (v17 > v18)
    {
      *a3 = *a4;
      *a4 = v15;
      int v19 = *a2;
      int v20 = *a3 >> 1;
      if (*a3) {
        int v21 = ~v20;
      }
      else {
        int v21 = v20 + 1;
      }
      if (v21 < 0) {
        int v21 = -v21;
      }
      if (v19) {
        int v22 = ~(v19 >> 1);
      }
      else {
        int v22 = (v19 >> 1) + 1;
      }
      if (v22 < 0) {
        int v22 = -v22;
      }
      if (v21 > v22)
      {
        *a2 = *a3;
        *a3 = v19;
        int v23 = *a1;
        int v24 = *a2 >> 1;
        if (*a2) {
          int v25 = ~v24;
        }
        else {
          int v25 = v24 + 1;
        }
        if (v25 < 0) {
          int v25 = -v25;
        }
        if (v23) {
          int v26 = ~(v23 >> 1);
        }
        else {
          int v26 = (v23 >> 1) + 1;
        }
        if (v26 < 0) {
          int v26 = -v26;
        }
        if (v25 > v26)
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *result;
  int v5 = *a2 >> 1;
  if (*a2) {
    int v6 = ~v5;
  }
  else {
    int v6 = v5 + 1;
  }
  if (v6 >= 0) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = -v6;
  }
  if (v4) {
    int v8 = ~(v4 >> 1);
  }
  else {
    int v8 = (v4 >> 1) + 1;
  }
  if (v8 < 0) {
    int v8 = -v8;
  }
  int v9 = *a3;
  int v10 = *a3 >> 1;
  if (*a3) {
    int v11 = ~v10;
  }
  else {
    int v11 = v10 + 1;
  }
  if (v11 < 0) {
    int v11 = -v11;
  }
  if (v7 <= v8)
  {
    if (v11 > v7)
    {
      *a2 = v9;
      *a3 = v3;
      int v12 = *result;
      int v13 = *a2 >> 1;
      if (*a2) {
        int v14 = ~v13;
      }
      else {
        int v14 = v13 + 1;
      }
      if (v14 < 0) {
        int v14 = -v14;
      }
      if (v12) {
        int v15 = ~(v12 >> 1);
      }
      else {
        int v15 = (v12 >> 1) + 1;
      }
      if (v15 < 0) {
        int v15 = -v15;
      }
      if (v14 > v15)
      {
        int *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 > v7)
    {
      int *result = v9;
LABEL_40:
      *a3 = v4;
      return result;
    }
    int *result = v3;
    *a2 = v4;
    int v16 = *a3 >> 1;
    if (*a3) {
      int v17 = ~v16;
    }
    else {
      int v17 = v16 + 1;
    }
    if (v17 < 0) {
      int v17 = -v17;
    }
    if (v17 > v8)
    {
      *a2 = *a3;
      goto LABEL_40;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v17 = *(a2 - 1);
      int v18 = *a1;
      if (v17) {
        int v19 = ~(v17 >> 1);
      }
      else {
        int v19 = (v17 >> 1) + 1;
      }
      if (v19 < 0) {
        int v19 = -v19;
      }
      if (v18) {
        int v20 = ~(v18 >> 1);
      }
      else {
        int v20 = (v18 >> 1) + 1;
      }
      if (v20 < 0) {
        int v20 = -v20;
      }
      if (v19 > v20)
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      break;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a2 - 1);
      BOOL result = 1;
      break;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a1 + 2, a2 - 1);
      BOOL result = 1;
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      BOOL result = 1;
      break;
    default:
      int v6 = (int8x8_t *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a1 + 1, a1 + 2);
      unsigned int v7 = (int8x8_t *)(a1 + 3);
      if (a1 + 3 == a2)
      {
LABEL_19:
        BOOL result = 1;
      }
      else
      {
        int v8 = 0;
        uint64_t v9 = 12;
        while (1)
        {
          int8x8_t v10 = *v6;
          int32x2_t v11 = vabs_s32((int32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(*v6, (int8x8_t)0x100000001)), (int8x8_t)vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)*v6, 1uLL), vmvn_s8((int8x8_t)vshr_n_s32((int32x2_t)*v6, 1uLL))));
          if (v11.i32[1] > (unsigned __int32)v11.i32[0]) {
            break;
          }
LABEL_18:
          int v6 = v7;
          v9 += 4;
          unsigned int v7 = (int8x8_t *)((char *)v7 + 4);
          if (v7 == (int8x8_t *)a2) {
            goto LABEL_19;
          }
        }
        int v12 = (int)*v6;
        uint64_t v13 = v9;
        do
        {
          *(int *)((char *)a1 + v13) = v12;
          uint64_t v14 = v13 - 4;
          if (v13 == 4)
          {
            *a1 = v10.i32[1];
            if (++v8 != 8) {
              goto LABEL_18;
            }
            goto LABEL_35;
          }
          int v12 = *(int *)((char *)a1 + v13 - 8);
          if (v12) {
            int v15 = ~(v12 >> 1);
          }
          else {
            int v15 = (v12 >> 1) + 1;
          }
          if (v15 >= 0) {
            unsigned int v16 = v15;
          }
          else {
            unsigned int v16 = -v15;
          }
          uint64_t v13 = v14;
        }
        while (v11.i32[1] > v16);
        *(int *)((char *)a1 + v14) = v10.i32[1];
        if (++v8 != 8) {
          goto LABEL_18;
        }
LABEL_35:
        BOOL result = &v7->u8[4] == (unsigned __int8 *)a2;
      }
      break;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::DratProofHandler::MapClause(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::$_0 &,operations_research::sat::Literal*>(a1, a2, a3);
  int v9 = *a3;
  int v10 = *a4 >> 1;
  if (*a4) {
    int v11 = ~v10;
  }
  else {
    int v11 = v10 + 1;
  }
  if (v11 < 0) {
    int v11 = -v11;
  }
  if (v9) {
    int v12 = ~(v9 >> 1);
  }
  else {
    int v12 = (v9 >> 1) + 1;
  }
  if (v12 < 0) {
    int v12 = -v12;
  }
  if (v11 > v12)
  {
    *a3 = *a4;
    *a4 = v9;
    int v13 = *a2;
    int v14 = *a3 >> 1;
    if (*a3) {
      int v15 = ~v14;
    }
    else {
      int v15 = v14 + 1;
    }
    if (v15 < 0) {
      int v15 = -v15;
    }
    if (v13) {
      int v16 = ~(v13 >> 1);
    }
    else {
      int v16 = (v13 >> 1) + 1;
    }
    if (v16 < 0) {
      int v16 = -v16;
    }
    if (v15 > v16)
    {
      *a2 = *a3;
      *a3 = v13;
      int v17 = *a1;
      int v18 = *a2 >> 1;
      if (*a2) {
        int v19 = ~v18;
      }
      else {
        int v19 = v18 + 1;
      }
      if (v19 < 0) {
        int v19 = -v19;
      }
      if (v17) {
        int v20 = ~(v17 >> 1);
      }
      else {
        int v20 = (v17 >> 1) + 1;
      }
      if (v20 < 0) {
        int v20 = -v20;
      }
      if (v19 > v20)
      {
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  return result;
}

void operations_research::sat::DratWriter::~DratWriter(operations_research::sat::DratWriter *this)
{
  int v2 = (FILE **)*((void *)this + 1);
  if (v2)
  {
    if (*((char *)this + 39) < 0)
    {
      int v3 = (char *)*((void *)this + 2);
      uint64_t v4 = *((void *)this + 3);
    }
    else
    {
      int v3 = (char *)this + 16;
      uint64_t v4 = *((unsigned __int8 *)this + 39);
    }
    v8[0] = v3;
    v8[1] = v4;
    file::WriteString(v2, (uint64_t)v8, (char *)0xBABA, &v9);
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 30);
      int v5 = (void *)google::LogMessage::stream((google::LogMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: (file::WriteString(output_, buffer_, file::Defaults())).ok() ", 75);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
    }
    File::Close(*((File **)this + 1), 47802, v7);
    if (v7[0])
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 31);
      int v6 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: (output_->Close(file::Defaults())).ok() ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
    }
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void operations_research::sat::DratWriter::WriteClause(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      int v6 = *a2 >> 1;
      if (*a2) {
        uint64_t v7 = ~v6;
      }
      else {
        uint64_t v7 = (v6 + 1);
      }
      uint64_t v13 = v7;
      int v14 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::AppendPack(a1 + 16, "%d ", 3, (uint64_t)&v13, 1);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  std::string::append((std::string *)(a1 + 16), "0\n");
  if (*(char *)(a1 + 39) < 0)
  {
    unint64_t v8 = *(void *)(a1 + 24);
    if (v8 > 0x2710)
    {
      uint64_t v9 = *(FILE ***)(a1 + 8);
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = (BOOL (*)(int, uint64_t, unsigned int, char *))v8;
      file::WriteString(v9, (uint64_t)&v13, (char *)0xBABA, &v12);
      if (v12)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/drat_writer.cc", 52);
        int v10 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: (file::WriteString(output_, buffer_, file::Defaults())).ok() ", 75);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
      }
      if (*(char *)(a1 + 39) < 0)
      {
        **(unsigned char **)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 0;
        *(unsigned char *)(a1 + 39) = 0;
      }
    }
  }
}

void sub_23CCDC490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCDC498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  absl::lts_2020_02_25::Status::~Status((absl::lts_2020_02_25::Status *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::DratWriter::DeleteClause(uint64_t a1, int *a2, uint64_t a3)
{
  std::string::append((std::string *)(a1 + 16), "d ");

  operations_research::sat::DratWriter::WriteClause(a1, a2, a3);
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCDC574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

operations_research::sat::FeasibilityPump *operations_research::sat::FeasibilityPump::FeasibilityPump(operations_research::sat::FeasibilityPump *this, operations_research::sat::Model *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0x3FF0000000000000;
  *((void *)this + 6) = 0;
  uint64_t v4 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  operations_research::glop::LinearProgram::LinearProgram((operations_research::sat::FeasibilityPump *)((char *)this + 80));
  operations_research::glop::RevisedSimplex::RevisedSimplex((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  *((void *)this + 2392) = 0;
  *((_OWORD *)this + 1195) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1192) = 0u;
  operations_research::glop::SparseMatrixScaler::SparseMatrixScaler((operations_research::sat::FeasibilityPump *)((char *)this + 19144));
  *((void *)this + 2401) = 0x3FF0000000000000;
  *((void *)this + 2402) = 0x3FF0000000000000;
  *((void *)this + 2403) = 0;
  *((void *)this + 2405) = 0;
  *((void *)this + 2404) = 0;
  *((void *)this + 2406) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 19256) = 0u;
  *(_OWORD *)((char *)this + 19272) = 0u;
  *(_OWORD *)((char *)this + 19288) = 0u;
  *(_OWORD *)((char *)this + 19304) = 0u;
  *(_OWORD *)((char *)this + 19320) = 0u;
  *(_OWORD *)((char *)this + 19336) = 0u;
  *(_OWORD *)((char *)this + 19352) = 0u;
  *((unsigned char *)this + 19368) = 0;
  *((void *)this + 2422) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((void *)this + 2423) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((void *)this + 2424) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((void *)this + 2425) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((void *)this + 2426) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  int v6 = (char *)a2 + 32;
  uint64_t v5 = (void *)*((void *)a2 + 4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v7 = (char *)a2 + 32;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
    if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d) {
      int v10 = v5;
    }
    else {
      int v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = (char *)v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v6
    && *((void *)v7 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
  {
    uint64_t v11 = *((void *)v7 + 5);
  }
  else
  {
LABEL_12:
    uint64_t v11 = 0;
  }
  *((void *)this + 2427) = v11;
  *((void *)this + 2428) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  *((void *)this + 2429) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>((uint64_t)a2);
  uint64_t v12 = *(void **)v6;
  if (!*(void *)v6) {
    goto LABEL_24;
  }
  uint64_t v13 = (char *)a2 + 32;
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d;
    if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d) {
      int v16 = v12;
    }
    else {
      int v16 = v12 + 1;
    }
    if (v15) {
      uint64_t v13 = (char *)v12;
    }
    uint64_t v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 != v6
    && *((void *)v13 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CpModelMapping>(void)::d)
  {
    uint64_t v17 = *((void *)v13 + 5);
  }
  else
  {
LABEL_24:
    uint64_t v17 = 0;
  }
  *((void *)this + 2430) = v17;
  *((_WORD *)this + 9724) = 0;
  *((_WORD *)this + 9760) = 0;
  *((void *)this + 2450) = 0;
  *(_OWORD *)((char *)this + 19464) = 0u;
  *(_OWORD *)((char *)this + 19480) = 0u;
  *(_OWORD *)((char *)this + 19496) = 0u;
  *((_OWORD *)this + 1221) = 0u;
  *((_OWORD *)this + 1222) = 0u;
  *((_OWORD *)this + 1223) = 0u;
  *((_DWORD *)this + 4902) = 20;
  *((unsigned char *)this + 19612) = 0;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v22, 0);
  char v24 = 0;
  v23 |= 0x4000001u;
  uint64_t v25 = 2000;
  operations_research::glop::RevisedSimplex::SetParameters((operations_research::sat::FeasibilityPump *)((char *)this + 560), (const operations_research::glop::GlopParameters *)v22);
  operations_research::glop::LinearProgram::Clear(v4);
  uint64_t v18 = *((void *)this + 6);
  for (uint64_t i = *((void *)this + 7); i != v18; i -= 40)
  {
    int v20 = *(void **)(i - 24);
    if (v20)
    {
      *(void *)(i - 16) = v20;
      operator delete(v20);
    }
  }
  *((void *)this + 7) = v18;
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v22);
  return this;
}

void sub_23CCDC83C(_Unwind_Exception *a1)
{
  BOOL v9 = (void **)(v1 + 19536);
  int v10 = *(void **)(v1 + 19560);
  if (v10)
  {
    *(void *)(v1 + 19568) = v10;
    operator delete(v10);
    uint64_t v11 = *v9;
    if (!*v9)
    {
LABEL_3:
      uint64_t v12 = *(void **)(v1 + 19488);
      if (!v12) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = *v9;
    if (!*v9) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 19544) = v11;
  operator delete(v11);
  uint64_t v12 = *(void **)(v1 + 19488);
  if (!v12)
  {
LABEL_4:
    uint64_t v13 = *v7;
    if (!*v7) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  *(void *)(v1 + 19496) = v12;
  operator delete(v12);
  uint64_t v13 = *v7;
  if (!*v7)
  {
LABEL_5:
    unint64_t v14 = *(void **)(v1 + 19344);
    if (!v14) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  *(void *)(v1 + 19472) = v13;
  operator delete(v13);
  unint64_t v14 = *(void **)(v1 + 19344);
  if (!v14)
  {
LABEL_6:
    BOOL v15 = (void **)(v1 + 19224);
    int v16 = *(void **)(v1 + 19320);
    if (!v16) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  *(void *)(v1 + 19352) = v14;
  operator delete(v14);
  BOOL v15 = (void **)(v1 + 19224);
  int v16 = *(void **)(v1 + 19320);
  if (!v16)
  {
LABEL_7:
    uint64_t v17 = *(void **)(v1 + 19296);
    if (!v17) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  *(void *)(v1 + 19328) = v16;
  operator delete(v16);
  uint64_t v17 = *(void **)(v1 + 19296);
  if (!v17)
  {
LABEL_8:
    absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(v6);
    uint64_t v18 = *v15;
    if (!*v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_26:
  operator delete(v17);
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(v6);
  uint64_t v18 = *v15;
  if (!*v15)
  {
LABEL_10:
    operations_research::sat::LinearConstraint::~LinearConstraint(v5);
    int v19 = (void **)(v1 + 19072);
    int v20 = *(void **)(v1 + 19120);
    if (v20)
    {
      *(void *)(v1 + 19128) = v20;
      operator delete(v20);
      int v21 = *(void **)(v1 + 19096);
      if (!v21)
      {
LABEL_12:
        int v22 = *v19;
        if (!*v19) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
    }
    else
    {
      int v21 = *(void **)(v1 + 19096);
      if (!v21) {
        goto LABEL_12;
      }
    }
    *(void *)(v1 + 19104) = v21;
    operator delete(v21);
    int v22 = *v19;
    if (!*v19)
    {
LABEL_14:
      operations_research::glop::RevisedSimplex::~RevisedSimplex(v4);
      operations_research::glop::LinearProgram::~LinearProgram(v3);
      gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector(v2);
      int v23 = *(void **)v1;
      if (*(void *)v1)
      {
        *(void *)(v1 + 8) = v23;
        operator delete(v23);
      }
      _Unwind_Resume(a1);
    }
LABEL_13:
    *(void *)(v1 + 19080) = v22;
    operator delete(v22);
    goto LABEL_14;
  }
LABEL_9:
  *(void *)(v1 + 19232) = v18;
  operator delete(v18);
  goto LABEL_10;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  int v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

void **gtl::ITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::sat::FeasibilityPump::LinearConstraintInternal,std::allocator<operations_research::sat::FeasibilityPump::LinearConstraintInternal>>::~ITIVector(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::FeasibilityPump::~FeasibilityPump(operations_research::sat::FeasibilityPump *this)
{
  if (*operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__[0] >= 1
    && (operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::FeasibilityPump::~FeasibilityPump()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 60);
    int v2 = (void *)google::LogMessage::stream((google::LogMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Feasibility Pump Total number of simplex iterations: ", 53);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
  uint64_t v3 = (void *)*((void *)this + 2445);
  if (v3)
  {
    *((void *)this + 2446) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 2442);
  if (v4)
  {
    *((void *)this + 2443) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2436);
  if (v5)
  {
    *((void *)this + 2437) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 2433);
  if (v6)
  {
    *((void *)this + 2434) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 2418);
  if (v7)
  {
    *((void *)this + 2419) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 2415);
  if (v8)
  {
    *((void *)this + 2416) = v8;
    operator delete(v8);
  }
  BOOL v9 = (void *)*((void *)this + 2412);
  if (v9) {
    operator delete(v9);
  }
  if (*((void *)this + 2409))
  {
    operator delete(*((void **)this + 2406));
    *((void *)this + 2406) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 2411) = 0;
    *((void *)this + 2407) = 0;
    *((void *)this + 2409) = 0;
    *((void *)this + 2408) = 0;
  }
  int v10 = (void *)*((void *)this + 2410);
  if (v10) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 2403);
  if (v11)
  {
    *((void *)this + 2404) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 2398);
  if (v12)
  {
    *((void *)this + 2399) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 2395);
  if (v13)
  {
    *((void *)this + 2396) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 2390);
  if (v14)
  {
    *((void *)this + 2391) = v14;
    operator delete(v14);
  }
  BOOL v15 = (void *)*((void *)this + 2387);
  if (v15)
  {
    *((void *)this + 2388) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)this + 2384);
  if (v16)
  {
    *((void *)this + 2385) = v16;
    operator delete(v16);
  }
  operations_research::glop::RevisedSimplex::~RevisedSimplex((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  operations_research::glop::LinearProgram::~LinearProgram((void **)this + 10);
  uint64_t v17 = *((void *)this + 6);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 7);
    int v19 = (void *)*((void *)this + 6);
    if (v18 != v17)
    {
      do
      {
        int v20 = *(void **)(v18 - 24);
        if (v20)
        {
          *(void *)(v18 - 16) = v20;
          operator delete(v20);
        }
        v18 -= 40;
      }
      while (v18 != v17);
      int v19 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v17;
    operator delete(v19);
  }
  int v21 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v21;
    operator delete(v21);
  }
}

uint64_t operations_research::sat::FeasibilityPump::AddLinearConstraint(operations_research::sat::FeasibilityPump *this, int **a2)
{
  int v2 = (const operations_research::sat::LinearConstraint *)a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  while (v4 != v5)
  {
    int v6 = *v4++;
    operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable((uint64_t)this, v6 & 0xFFFFFFFE);
  }
  uint64_t v41 = 0;
  long long v39 = 0u;
  *(_OWORD *)long long __p = 0u;
  unint64_t v7 = *((void *)this + 7);
  if (v7 >= *((void *)this + 8))
  {
    unint64_t v8 = std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>((void **)this + 6, (uint64_t)&v39);
    BOOL v9 = __p[0];
    *((void *)this + 7) = v8;
    if (v9)
    {
      __p[1] = v9;
      operator delete(v9);
      unint64_t v8 = (char *)*((void *)this + 7);
    }
  }
  else
  {
    *(void *)(v7 + 32) = 0;
    *(_OWORD *)unint64_t v7 = 0uLL;
    *(_OWORD *)(v7 + 16) = 0uLL;
    unint64_t v8 = (char *)(v7 + 40);
    *((void *)this + 7) = v7 + 40;
  }
  *((void *)v8 - 5) = *(void *)v2;
  *((void *)v8 - 4) = *((void *)v2 + 1);
  uint64_t v11 = *((void *)v2 + 2);
  uint64_t v10 = *((void *)v2 + 3);
  if (*(void *)v2 > *((void *)v2 + 1)) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)v2, v2 + 8, "ct.lb <= ct.ub");
  }
  if ((int)((unint64_t)(v10 - v11) >> 2) <= 0)
  {
    unint64_t v14 = (int *)*((void *)v8 - 2);
  }
  else
  {
    uint64_t v12 = 0;
    int v37 = v2;
    int v38 = (void **)(v8 - 24);
    uint64_t v13 = ((unint64_t)(v10 - v11) >> 2);
    do
    {
      while (1)
      {
        int v15 = *(_DWORD *)(*((void *)v2 + 2) + 4 * v12);
        uint64_t v16 = (v15 & 1) != 0 ? -*(void *)(*((void *)v2 + 5) + 8 * v12) : *(void *)(*((void *)v2 + 5) + 8 * v12);
        int MirrorVariable = operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable((uint64_t)this, v15 & 0xFFFFFFFE);
        int v18 = MirrorVariable;
        int v20 = (char *)*((void *)v8 - 2);
        unint64_t v19 = *((void *)v8 - 1);
        if ((unint64_t)v20 >= v19) {
          break;
        }
        *(_DWORD *)int v20 = MirrorVariable;
        *(void *)(v20 + 4) = v16;
        unint64_t v14 = (int *)(v20 + 12);
        *((void *)v8 - 2) = v20 + 12;
        if (++v12 == v13) {
          goto LABEL_33;
        }
      }
      int v21 = this;
      uint64_t v22 = v13;
      int v23 = (char *)*v38;
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)*v38) >> 2);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v23) >> 2);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v27 = 0x1555555555555555;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v28 = (char *)operator new(12 * v27);
      }
      else
      {
        int v28 = 0;
      }
      int v29 = &v28[12 * v24];
      *(_DWORD *)int v29 = v18;
      *(void *)(v29 + 4) = v16;
      int v30 = v29;
      uint64_t v13 = v22;
      if (v20 != v23)
      {
        do
        {
          uint64_t v31 = *(void *)(v20 - 12);
          v20 -= 12;
          int v32 = *((_DWORD *)v20 + 2);
          *(void *)(v30 - 12) = v31;
          v30 -= 12;
          *((_DWORD *)v30 + 2) = v32;
        }
        while (v20 != v23);
        int v20 = (char *)*v38;
      }
      this = v21;
      unint64_t v14 = (int *)(v29 + 12);
      *((void *)v8 - 3) = v30;
      *((void *)v8 - 2) = v29 + 12;
      *((void *)v8 - 1) = &v28[12 * v27];
      int v2 = v37;
      if (v20) {
        operator delete(v20);
      }
      *((void *)v8 - 2) = v14;
      ++v12;
    }
    while (v12 != v13);
  }
LABEL_33:
  uint64_t v33 = *((void *)v8 - 3);
  unint64_t v34 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v33) >> 2));
  if (v14 == (int *)v33) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v34;
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v33, v14, (uint64_t)&v39, v35, 1);
}

void sub_23CCDCFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCDCFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::FeasibilityPump::GetOrCreateMirrorVariable(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 19248);
  unint64_t v6 = a2;
  unint64_t v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v8 = *(void *)(a1 + 19248);
  unint64_t v9 = (v7 >> 7) ^ (v8 >> 12);
  uint64_t v10 = *(void *)(a1 + 19272);
  uint64_t v11 = 0x101010101010101 * (v7 & 0x7F);
  for (unint64_t i = v9; ; unint64_t i = v4 + v13)
  {
    unint64_t v13 = i & v10;
    uint64_t v14 = *(void *)(v8 + v13);
    unint64_t v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v4 += 8;
  }
  uint64_t v16 = *(void *)(a1 + 19256);
  while (1)
  {
    unint64_t v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(_DWORD *)(v16 + 8 * v17) == a2) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_6;
    }
  }
  if (v17 != v10) {
    return *(unsigned int *)(v16 + 8 * v17 + 4);
  }
LABEL_9:
  uint64_t v18 = *(void *)(*(void *)(a1 + 19440) + 96);
  if (v6 >= (*(void *)(*(void *)(a1 + 19440) + 104) - v18) >> 2) {
    int v19 = -1;
  }
  else {
    int v19 = *(_DWORD *)(v18 + 4 * v6);
  }
  uint64_t v20 = 0;
  if (*(_DWORD *)(a1 + 72) <= v19 + 1) {
    int v21 = v19 + 1;
  }
  else {
    int v21 = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v21;
  uint64_t v22 = (void **)(a1 + 19224);
  int v23 = *(char **)(a1 + 19232);
  unint64_t v24 = (unint64_t)&v23[-*(void *)(a1 + 19224)] >> 2;
  while (1)
  {
    unint64_t v25 = v9 & v10;
    uint64_t v26 = *(void *)(v8 + (v9 & v10));
    unint64_t v27 = ((v26 ^ v11) - 0x101010101010101) & ~(v26 ^ v11) & 0x8080808080808080;
    if (v27) {
      break;
    }
LABEL_20:
    if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(v5, v7);
      uint64_t v28 = *(void *)(a1 + 19256);
      int v30 = (_DWORD *)(v28 + 8 * v29);
      _DWORD *v30 = a2;
      v30[1] = 0;
      int v23 = *(char **)(a1 + 19232);
      goto LABEL_24;
    }
    v20 += 8;
    unint64_t v9 = v20 + v25;
  }
  uint64_t v28 = *(void *)(a1 + 19256);
  while (1)
  {
    unint64_t v29 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v10;
    if (*(_DWORD *)(v28 + 8 * v29) == a2) {
      break;
    }
    v27 &= v27 - 1;
    if (!v27) {
      goto LABEL_20;
    }
  }
LABEL_24:
  *(_DWORD *)(v28 + 8 * v29 + 4) = v24;
  unint64_t v31 = *(void *)(a1 + 19240);
  if ((unint64_t)v23 < v31)
  {
    *(_DWORD *)int v23 = a2;
    uint64_t v32 = (uint64_t)(v23 + 4);
    goto LABEL_47;
  }
  uint64_t v33 = (char *)*v22;
  uint64_t v34 = v23 - (unsigned char *)*v22;
  uint64_t v35 = v34 >> 2;
  unint64_t v36 = (v34 >> 2) + 1;
  if (v36 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v37 = v31 - (void)v33;
  if (v37 >> 1 > v36) {
    unint64_t v36 = v37 >> 1;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v38)
  {
    if (v38 >> 62) {
      goto LABEL_99;
    }
    long long v39 = operator new(4 * v38);
    int v40 = &v39[4 * v35];
    uint64_t v41 = &v39[4 * v38];
    *int v40 = a2;
    uint64_t v32 = (uint64_t)(v40 + 1);
    int64_t v42 = v23 - v33;
    if (v23 == v33) {
      goto LABEL_45;
    }
  }
  else
  {
    long long v39 = 0;
    int v40 = (_DWORD *)(4 * v35);
    uint64_t v41 = 0;
    *(_DWORD *)(4 * v35) = a2;
    uint64_t v32 = 4 * v35 + 4;
    int64_t v42 = v23 - v33;
    if (v23 == v33) {
      goto LABEL_45;
    }
  }
  unint64_t v43 = v42 - 4;
  if (v43 < 0x2C)
  {
    int v44 = v23;
    goto LABEL_44;
  }
  if ((unint64_t)(v23 - v39 - v34) < 0x20)
  {
    int v44 = v23;
    do
    {
LABEL_44:
      int v51 = *((_DWORD *)v44 - 1);
      v44 -= 4;
      *--int v40 = v51;
    }
    while (v44 != v33);
    goto LABEL_45;
  }
  uint64_t v45 = (v43 >> 2) + 1;
  uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
  int v44 = &v23[-v46];
  int v40 = (_DWORD *)((char *)v40 - v46);
  uint64_t v47 = &v39[4 * v35 - 16];
  int v48 = v23 - 16;
  uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v50 = *(_OWORD *)v48;
    *(v47 - 1) = *((_OWORD *)v48 - 1);
    *uint64_t v47 = v50;
    v47 -= 2;
    v48 -= 32;
    v49 -= 8;
  }
  while (v49);
  if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_44;
  }
LABEL_45:
  *(void *)(a1 + 19224) = v40;
  *(void *)(a1 + 19232) = v32;
  *(void *)(a1 + 19240) = v41;
  if (v33) {
    operator delete(v33);
  }
LABEL_47:
  *(void *)(a1 + 19232) = v32;
  unint64_t v52 = *(void *)(a1 + 19304);
  uint64_t v53 = *(void *)(a1 + 19312);
  if (v52 == v53 << 6)
  {
    if ((uint64_t)(v52 + 1) < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = v53 << 7;
    if (v54 <= (v52 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v54 = (v52 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v52 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v55 = v54;
    }
    else {
      unint64_t v55 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve(a1 + 19296, v55);
    unint64_t v52 = *(void *)(a1 + 19304);
  }
  *(void *)(a1 + 19304) = v52 + 1;
  *(void *)(*(void *)(a1 + 19296) + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v52);
  uint64_t v56 = *(char **)(a1 + 19472);
  unint64_t v57 = *(void *)(a1 + 19480);
  if ((unint64_t)v56 >= v57)
  {
    int v59 = *(char **)(a1 + 19464);
    uint64_t v60 = (v56 - v59) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v62 = v57 - (void)v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
        goto LABEL_99;
      }
      int v64 = operator new(8 * v63);
    }
    else
    {
      int v64 = 0;
    }
    int v65 = &v64[8 * v60];
    int v66 = &v64[8 * v63];
    *int v65 = 0x7FF0000000000000;
    unsigned int v58 = v65 + 1;
    if (v56 != v59)
    {
      unint64_t v67 = v56 - v59 - 8;
      if (v67 < 0x58) {
        goto LABEL_106;
      }
      if ((unint64_t)(v59 - v64) < 0x20) {
        goto LABEL_106;
      }
      uint64_t v68 = (v67 >> 3) + 1;
      uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
      int v70 = &v56[-v69];
      int v65 = (void *)((char *)v65 - v69);
      int v71 = &v64[8 * v60 - 16];
      int v72 = v56 - 16;
      uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v74 = *(_OWORD *)v72;
        *(v71 - 1) = *((_OWORD *)v72 - 1);
        _OWORD *v71 = v74;
        v71 -= 2;
        v72 -= 32;
        v73 -= 4;
      }
      while (v73);
      uint64_t v56 = v70;
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_106:
        do
        {
          uint64_t v75 = *((void *)v56 - 1);
          v56 -= 8;
          *--int v65 = v75;
        }
        while (v56 != v59);
      }
    }
    *(void *)(a1 + 19464) = v65;
    *(void *)(a1 + 19472) = v58;
    *(void *)(a1 + 19480) = v66;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)uint64_t v56 = 0x7FF0000000000000;
    unsigned int v58 = v56 + 8;
  }
  *(void *)(a1 + 19472) = v58;
  uint64_t v76 = *(char **)(a1 + 19544);
  unint64_t v77 = *(void *)(a1 + 19552);
  if ((unint64_t)v76 < v77)
  {
    *(void *)uint64_t v76 = 0;
    *(void *)(a1 + 19544) = v76 + 8;
    return v24;
  }
  int v78 = *(char **)(a1 + 19536);
  uint64_t v79 = (v76 - v78) >> 3;
  unint64_t v80 = v79 + 1;
  if ((unint64_t)(v79 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v81 = v77 - (void)v78;
  if (v81 >> 2 > v80) {
    unint64_t v80 = v81 >> 2;
  }
  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v82 = v80;
  }
  if (v82)
  {
    if (!(v82 >> 61))
    {
      BOOL v83 = operator new(8 * v82);
      uint64_t v84 = &v83[8 * v79];
      uint64_t v85 = &v83[8 * v82];
      *uint64_t v84 = 0;
      uint64_t v86 = (uint64_t)(v84 + 1);
      int64_t v87 = v76 - v78;
      if (v76 == v78) {
        goto LABEL_95;
      }
LABEL_89:
      unint64_t v88 = v87 - 8;
      if (v88 < 0x58) {
        goto LABEL_107;
      }
      if ((unint64_t)(v78 - v83) < 0x20) {
        goto LABEL_107;
      }
      uint64_t v89 = (v88 >> 3) + 1;
      uint64_t v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
      int v91 = &v76[-v90];
      uint64_t v84 = (void *)((char *)v84 - v90);
      int64_t v92 = &v83[8 * v79 - 16];
      int64_t v93 = v76 - 16;
      uint64_t v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v95 = *(_OWORD *)v93;
        *(v92 - 1) = *((_OWORD *)v93 - 1);
        *int64_t v92 = v95;
        v92 -= 2;
        v93 -= 32;
        v94 -= 4;
      }
      while (v94);
      uint64_t v76 = v91;
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_107:
        do
        {
          uint64_t v96 = *((void *)v76 - 1);
          v76 -= 8;
          *--uint64_t v84 = v96;
        }
        while (v76 != v78);
      }
      goto LABEL_95;
    }
LABEL_99:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v83 = 0;
  uint64_t v84 = (void *)(8 * v79);
  uint64_t v85 = 0;
  *(void *)(8 * v79) = 0;
  uint64_t v86 = 8 * v79 + 8;
  int64_t v87 = v76 - v78;
  if (v76 != v78) {
    goto LABEL_89;
  }
LABEL_95:
  *(void *)(a1 + 19536) = v84;
  *(void *)(a1 + 19544) = v86;
  *(void *)(a1 + 19552) = v85;
  if (v78) {
    operator delete(v78);
  }
  *(void *)(a1 + 19544) = v86;
  return v24;
}

void operations_research::sat::FeasibilityPump::SetObjectiveCoefficient(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  *(unsigned char *)(a1 + 19368) = 1;
  signed int v6 = a2 & 0xFFFFFFFE;
  if (a2) {
    uint64_t v7 = -a3;
  }
  else {
    uint64_t v7 = a3;
  }
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v6)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v6));
  unint64_t v9 = *(void *)(a1 + 19248);
  unint64_t v10 = (v8 >> 7) ^ (v9 >> 12);
  uint64_t v11 = *(void *)(a1 + 19272);
  uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    uint64_t v13 = v10 & v11;
    uint64_t v14 = *(void *)(v9 + v13);
    unint64_t v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_9:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      return;
    }
    v5 += 8;
    unint64_t v10 = v5 + v13;
  }
  uint64_t v16 = *(void *)(a1 + 19256);
  while (1)
  {
    unint64_t v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
    if (*(_DWORD *)(v16 + 8 * v17) == v6) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_9;
    }
  }
  if (v17 != v11)
  {
    int v18 = *(_DWORD *)(v16 + 8 * v17 + 4);
    uint64_t v20 = *(_DWORD **)(a1 + 8);
    unint64_t v19 = *(void *)(a1 + 16);
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v22 = *(_DWORD **)a1;
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *(void *)a1) >> 2);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v22) >> 2);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v26 = 0x1555555555555555;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        if (v26 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v27 = (char *)operator new(12 * v26);
      }
      else
      {
        unint64_t v27 = 0;
      }
      uint64_t v28 = &v27[12 * v23];
      *(_DWORD *)uint64_t v28 = v18;
      *(void *)(v28 + 4) = v7;
      int v21 = v28 + 12;
      if (v20 != v22)
      {
        do
        {
          uint64_t v29 = *(void *)(v20 - 3);
          v20 -= 3;
          int v30 = v20[2];
          *(void *)(v28 - 12) = v29;
          v28 -= 12;
          *((_DWORD *)v28 + 2) = v30;
        }
        while (v20 != v22);
        uint64_t v20 = *(_DWORD **)a1;
      }
      *(void *)a1 = v28;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = &v27[12 * v26];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v20 = v18;
      *(void *)(v20 + 1) = v7;
      int v21 = v20 + 3;
    }
    *(void *)(a1 + 8) = v21;
    if (a3 >= 0) {
      uint64_t v31 = a3;
    }
    else {
      uint64_t v31 = -a3;
    }
    if (*(void *)(a1 + 24) > v31) {
      uint64_t v31 = *(void *)(a1 + 24);
    }
    *(void *)(a1 + 24) = v31;
  }
}

void operations_research::sat::FeasibilityPump::PrintStats(operations_research::sat::FeasibilityPump *this)
{
  int v2 = (char *)this + 19448;
  if (*((unsigned char *)this + 19448))
  {
    if (*_MergedGlobals_10[0] >= 2
      && (_MergedGlobals_10[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_10, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 129);
      uint64_t v3 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fractionality: ", 15);
      std::ostream::operator<<();
      uint64_t v4 = __p;
LABEL_22:
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
    }
  }
  else
  {
    if (*off_26AECFFA0[0] >= 2
      && (off_26AECFFA0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFA0, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 131);
      uint64_t v5 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fractionality: NA", 17);
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
    if (*off_26AECFFA8[0] >= 2
      && (off_26AECFFA8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFA8, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 132);
      signed int v6 = (void *)google::LogMessage::stream((google::LogMessage *)v14);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"simplex status: ", 16);
      int ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560));
      operations_research::glop::GetProblemStatusString(ProblemStatus, (uint64_t)__p);
      if ((v16 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v10 = v16;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
      if ((char)v16 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v4 = (void **)v14;
      goto LABEL_22;
    }
  }
  if (v2[72])
  {
    if (*off_26AECFFB0[0] >= 2
      && (off_26AECFFB0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFB0, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 136);
      uint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#Infeasible const: ", 19);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
    if (*off_26AECFFB8[0] >= 2
      && (off_26AECFFB8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFB8, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 137);
      uint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Infeasibility: ", 15);
      std::ostream::operator<<();
LABEL_36:
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
  }
  else if (*off_26AECFFC0[0] >= 2 {
         && (off_26AECFFC0[0] != &google::kLogSiteUninitialized
  }
          || google::InitVLOG3__((google *)off_26AECFFC0, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 139);
    uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Infeasibility: NA", 17);
    goto LABEL_36;
  }
}

void sub_23CCDDBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

void sub_23CCDDC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CCDDC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CCDDC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::FeasibilityPump::Solve(operations_research::sat::FeasibilityPump *this)
{
  uint64_t v1 = this;
  int v2 = (char *)this + 80;
  uint64_t v31 = (char *)this + 19448;
  if (!(-1431655765 * ((*((void *)this + 11) - *((void *)this + 10)) >> 4))) {
    operations_research::sat::FeasibilityPump::InitializeWorkingLP(this);
  }
  unint64_t v3 = *((void *)v1 + 2404) - *((void *)v1 + 2403);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 >> 2);
    do
    {
      int v6 = *(_DWORD *)(*((void *)v1 + 2403) + 4 * v4);
      uint64_t v7 = *(void *)(*((void *)v1 + 2424) + 144);
      uint64_t v8 = *(void *)(v7 + 20 * v6);
      double v9 = (double)v8;
      if (v8 < (uint64_t)0x8000000000000003) {
        double v9 = -INFINITY;
      }
      if (v8 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v10 = v9;
      }
      else {
        double v10 = INFINITY;
      }
      uint64_t v11 = *(void *)(v7 + 20 * (v6 ^ 1));
      double v12 = (double)-v11;
      if (v11 > 0x7FFFFFFFFFFFFFFDLL) {
        double v12 = -INFINITY;
      }
      if (v11 >= (uint64_t)0x8000000000000003) {
        double v13 = v12;
      }
      else {
        double v13 = INFINITY;
      }
      double v14 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)v1 + 19144, v4);
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v4++, v14 * v10, v14 * v13);
    }
    while (v5 != v4);
  }
  *uint64_t v31 = 0;
  v31[72] = 0;
  if ((int)(-1431655765 * ((*((void *)v1 + 11) - *((void *)v1 + 10)) >> 4)) >= 1)
  {
    uint64_t v15 = 0;
    do
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, v15++, 0.0);
    while (v15 < (int)(-1431655765 * ((*((void *)v1 + 11) - *((void *)v1 + 10)) >> 4)));
  }
  uint64_t v16 = *(void *)v1;
  uint64_t v17 = *((void *)v1 + 1);
  if (*(void *)v1 != v17)
  {
    do
    {
      uint64_t v18 = *(void *)(v16 + 4);
      double v19 = (double)v18;
      if (v18 < (uint64_t)0x8000000000000003) {
        double v19 = -INFINITY;
      }
      if (v18 > 0x7FFFFFFFFFFFFFFDLL) {
        double v19 = INFINITY;
      }
      this = (operations_research::sat::FeasibilityPump *)operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, *(_DWORD *)v16, v19);
      v16 += 12;
    }
    while (v16 != v17);
  }
  *((void *)v1 + 5) = 0x3FF0000000000000;
  if (*((int *)v31 + 40) >= 1)
  {
    int v20 = 0;
    while (1)
    {
      uint64_t v21 = *((void *)v1 + 2423);
      uint64_t v22 = *(unsigned __int8 **)(v21 + 120);
      if (v22)
      {
        unsigned __int8 v23 = atomic_load(v22);
        if (v23) {
          break;
        }
      }
      if (fmax(*(double *)(v21 + 104) - *(double *)(v21 + 112), 0.0) <= 0.0) {
        break;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
      if (*(void *)(v21 + 24) <= CurrentTimeNanos - *(void *)(v21 + 8)) {
        uint64_t v25 = CurrentTimeNanos - *(void *)(v21 + 8);
      }
      else {
        uint64_t v25 = *(void *)(v21 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v21 + 32), v25);
      *(void *)(v21 + 8) = CurrentTimeNanos;
      if (*(void *)(*(void *)(v21 + 40) + 8 * *(int *)(v21 + 68)) + CurrentTimeNanos >= *(void *)(v21 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_46;
        }
        double v27 = *(double *)(v21 + 96);
        if (*(unsigned char *)(v21 + 72))
        {
          double v28 = v27
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v26) - *(void *)(v21 + 80) + *(void *)(v21 + 88))
              * -0.000000001;
          if (v28 <= 0.0001) {
            goto LABEL_46;
          }
        }
        else
        {
          double v28 = v27 + (double)*(uint64_t *)(v21 + 88) * -0.000000001;
          if (v28 <= 0.0001)
          {
LABEL_46:
            *(void *)(v21 + 16) = 0;
            break;
          }
        }
        *(void *)(v21 + 16) = *(void *)(v21 + 8) + (uint64_t)(v28 * 1000000000.0);
      }
      operations_research::sat::FeasibilityPump::L1DistanceMinimize(v1);
      if (operations_research::sat::FeasibilityPump::SolveLp(v1))
      {
        if (!v31[1])
        {
          this = (operations_research::sat::FeasibilityPump *)operations_research::sat::FeasibilityPump::Round(v1);
          if (this)
          {
            if (v31[73]) {
              operations_research::sat::FeasibilityPump::MaybePushToRepo(v1);
            }
            if (++v20 < *((_DWORD *)v31 + 40)) {
              continue;
            }
          }
        }
      }
      break;
    }
  }
  int v29 = v31[164];
  if (!v31[164])
  {
    operations_research::sat::FeasibilityPump::PrintStats(v1);
    operations_research::sat::FeasibilityPump::MaybePushToRepo(v1);
  }
  return v29 == 0;
}

void operations_research::sat::FeasibilityPump::InitializeWorkingLP(operations_research::sat::FeasibilityPump *this)
{
  int v2 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  operations_research::glop::LinearProgram::Clear((operations_research::sat::FeasibilityPump *)((char *)this + 80));
  if (*((void *)this + 2404) != *((void *)this + 2403))
  {
    unint64_t v3 = 0;
    do
    {
      LODWORD(v87) = v3;
      LODWORD(v86) = operations_research::glop::LinearProgram::CreateNewVariable(v2);
      if (v3 != v86) {
        google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>((int)&v87, (int)&v86, "ColIndex(i) == lp_data_.CreateNewVariable()");
      }
      operations_research::glop::LinearProgram::SetVariableType((uint64_t)v2, v3++, 1);
    }
    while (v3 < (uint64_t)(*((void *)this + 2404) - *((void *)this + 2403)) >> 2);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 6);
  uint64_t v5 = (uint64_t *)*((void *)this + 7);
  for (unint64_t i = this; v4 != v5; v4 += 5)
  {
    int NewConstraint = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
    uint64_t v7 = v4[1];
    double v8 = (double)*v4;
    double v9 = -INFINITY;
    if (*v4 < (uint64_t)0x8000000000000003) {
      double v8 = -INFINITY;
    }
    if (*v4 > 0x7FFFFFFFFFFFFFFDLL) {
      double v8 = INFINITY;
    }
    if (v7 >= (uint64_t)0x8000000000000003) {
      double v9 = (double)v7;
    }
    if (v7 > 0x7FFFFFFFFFFFFFFDLL) {
      double v9 = INFINITY;
    }
    int v10 = NewConstraint;
    operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v2, NewConstraint, v8, v9);
    uint64_t v12 = v4[2];
    for (uint64_t j = v4[3]; v12 != j; v12 += 12)
    {
      uint64_t v13 = *(void *)(v12 + 4);
      double v14 = (double)v13;
      if (v13 < (uint64_t)0x8000000000000003) {
        double v14 = -INFINITY;
      }
      if (v13 > 0x7FFFFFFFFFFFFFFDLL) {
        double v14 = INFINITY;
      }
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v10, *(_DWORD *)v12, v14);
    }
  }
  uint64_t v15 = *(void *)i;
  uint64_t v16 = *((void *)i + 1);
  if (*(void *)i != v16)
  {
    do
    {
      uint64_t v17 = *(void *)(v15 + 4);
      double v18 = (double)v17;
      if (v17 < (uint64_t)0x8000000000000003) {
        double v18 = -INFINITY;
      }
      if (v17 > 0x7FFFFFFFFFFFFFFDLL) {
        double v18 = INFINITY;
      }
      operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, *(_DWORD *)v15, v18);
      v15 += 12;
    }
    while (v15 != v16);
  }
  unint64_t v19 = *((void *)i + 2404) - *((void *)i + 2403);
  if ((int)(v19 >> 2) >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (v19 >> 2);
    do
    {
      int v22 = *(_DWORD *)(*((void *)i + 2403) + 4 * v20);
      uint64_t v23 = *(void *)(*((void *)i + 2424) + 144);
      uint64_t v24 = *(void *)(v23 + 20 * v22);
      double v25 = (double)v24;
      double v26 = -INFINITY;
      if (v24 < (uint64_t)0x8000000000000003) {
        double v25 = -INFINITY;
      }
      if (v24 > 0x7FFFFFFFFFFFFFFDLL) {
        double v25 = INFINITY;
      }
      uint64_t v27 = *(void *)(v23 + 20 * (v22 ^ 1));
      if (v27 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v26 = (double)-v27;
      }
      if (v27 < (uint64_t)0x8000000000000003) {
        double v26 = INFINITY;
      }
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v20++, v25, v26);
    }
    while (v21 != v20);
  }
  *((void *)i + 4) = 0;
  int64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v29 = *((void *)i + 10);
  uint64_t v28 = *((void *)i + 11);
  uint64_t v30 = operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  uint64_t v79 = v29;
  uint64_t v80 = v28;
  uint64_t v32 = *(int **)v30;
  uint64_t v31 = *(int **)(v30 + 8);
  if (*(int **)v30 != v31)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    BOOL v83 = *(int **)(v30 + 8);
    while (1)
    {
      int v36 = *v32;
      BOOL IsVariableBinary = operations_research::glop::LinearProgram::IsVariableBinary(v2, *v32);
      uint64_t v38 = *((void *)i + 2412);
      unint64_t v39 = (unint64_t)v36 >> 6;
      uint64_t v40 = 1 << v36;
      if (IsVariableBinary)
      {
        uint64_t v41 = *(void *)(v38 + 8 * v39) | v40;
        *(void *)(v38 + 8 * v39) = v41;
        if ((v41 & v40) == 0) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(v38 + 8 * v39) & ~v40;
        *(void *)(v38 + 8 * v39) = v42;
        if ((v42 & v40) == 0)
        {
LABEL_48:
          if (v35 < v34)
          {
            *(_DWORD *)uint64_t v35 = v36;
            uint64_t v43 = (uint64_t)(v35 + 4);
LABEL_67:
            uint64_t v88 = v43;
            uint64_t v35 = (char *)v43;
            goto LABEL_68;
          }
          int v44 = v34;
          uint64_t v45 = (v35 - v33) >> 2;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v47 = v44 - v33;
          unint64_t v48 = (v44 - v33) >> 1;
          if (v48 > v46) {
            unint64_t v46 = v48;
          }
          if (v47 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v46;
          }
          if (v49)
          {
            if (v49 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v50 = v49;
            int v51 = operator new(4 * v49);
            unint64_t v49 = v50;
            unint64_t v52 = (int *)&v51[4 * v45];
            *unint64_t v52 = v36;
            uint64_t v43 = (uint64_t)(v52 + 1);
            if (v35 == v33) {
              goto LABEL_64;
            }
LABEL_61:
            unint64_t v53 = v35 - 4 - v33;
            if (v53 < 0xBC)
            {
              unint64_t v54 = v35;
              goto LABEL_63;
            }
            if (&v51[v35 - v33 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v35 - v33 - 4])
            {
              unint64_t v54 = v35;
              goto LABEL_63;
            }
            if (&v35[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v35 - 4)
            {
              unint64_t v54 = v35;
              goto LABEL_63;
            }
            if ((unint64_t)(v33 - v51) < 0x20)
            {
              unint64_t v54 = v35;
              goto LABEL_63;
            }
            uint64_t v56 = (v53 >> 2) + 1;
            uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v54 = &v35[-v57];
            unint64_t v52 = (int *)((char *)v52 - v57);
            unsigned int v58 = &v51[4 * v45 - 16];
            int v59 = v35 - 16;
            uint64_t v60 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              _OWORD *v58 = v61;
              v58 -= 2;
              v59 -= 32;
              v60 -= 8;
            }
            while (v60);
            if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_63:
                int v55 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *--unint64_t v52 = v55;
              }
              while (v54 != v33);
            }
          }
          else
          {
            int v51 = 0;
            unint64_t v52 = (int *)(4 * v45);
            *(_DWORD *)(4 * v45) = v36;
            uint64_t v43 = 4 * v45 + 4;
            if (v35 != v33) {
              goto LABEL_61;
            }
          }
LABEL_64:
          uint64_t v34 = &v51[4 * v49];
          int64_t v87 = v52;
          uint64_t v88 = v43;
          uint64_t v89 = v34;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v33 = (char *)v52;
          uint64_t v31 = v83;
          goto LABEL_67;
        }
      }
LABEL_68:
      *((double *)i + 4) = fabs(operations_research::glop::LinearProgram::GetObjectiveCoefficientForMinimizationVersion((uint64_t)v2, v36))+ *((double *)i + 4);
      if (++v32 == v31) {
        goto LABEL_81;
      }
    }
  }
  uint64_t v35 = 0;
LABEL_81:
  uint64_t v62 = (uint64_t *)operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  int v85 = 0;
  uint64_t v65 = v63 - v64;
  *(void *)__u = v65 >> 2;
  if (!v65) {
    google::MakeCheckOpString<unsigned long,int>((int)__u, (int)&v85, "lp_data_.IntegerVariablesList().size() > 0");
  }
  double v66 = *((double *)i + 4);
  unint64_t v67 = (void *)operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  *((double *)i + 4) = v66 / (double)(unint64_t)((uint64_t)(v67[1] - *v67) >> 2);
  long long __p = v87;
  if (v87 != (int *)v35)
  {
    __u[0] = -1;
    std::vector<int>::size_type v68 = (int)(-1431655765 * ((v80 - v79) >> 4));
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19072), v68, __u);
    __u[0] = -1;
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19096), v68, __u);
    __u[0] = -1;
    std::vector<int>::assign((std::vector<int> *)((char *)i + 19120), v68, __u);
    uint64_t v69 = __p;
    do
    {
      int v70 = *v69;
      int NewVariable = operations_research::glop::LinearProgram::CreateNewVariable(v2);
      *(_DWORD *)(*((void *)i + 2384) + 4 * v70) = NewVariable;
      int v72 = NewVariable;
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, NewVariable, 0.0, INFINITY);
      int v73 = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
      *(_DWORD *)(*((void *)i + 2387) + 4 * v70) = v73;
      int v74 = v73;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v73, v72, 1.0);
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v74, v70, -1.0);
      int v75 = operations_research::glop::LinearProgram::CreateNewConstraint(v2);
      *(_DWORD *)(*((void *)i + 2390) + 4 * v70) = v75;
      int v76 = v75;
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v75, v72, 1.0);
      operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v2, v76, v70, 1.0);
      ++v69;
    }
    while (v69 != (int *)v35);
  }
  v77.n128_f64[0] = operations_research::glop::LpScalingHelper::Scale((operations_research::sat::FeasibilityPump *)((char *)i + 19144), (float64x2_t **)v2);
  operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(v2, 0, v78, v77);
  if (__p) {
    operator delete(__p);
  }
}

void sub_23CCDE71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCDE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FeasibilityPump::L1DistanceMinimize(operations_research::sat::FeasibilityPump *this)
{
  int v2 = (operations_research::sat::FeasibilityPump *)((char *)this + 80);
  unint64_t v3 = (unint64_t)(-1431655765 * ((*((void *)this + 11) - *((void *)this + 10)) >> 4)) << 32;
  if (!v3)
  {
    uint64_t v5 = 0;
    int v6 = (float64x2_t *)*((void *)this + 27);
    unint64_t v7 = *((void *)this + 28) - (void)v6;
    if ((int)(v7 >> 3) < 1) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = (0xFFFFFFFD55555558 * ((*((void *)this + 11) - *((void *)this + 10)) >> 4)) & 0x7FFFFFFFFLL;
  uint64_t v5 = (float64x2_t *)operator new(v4);
  bzero(v5, v4);
  int v6 = (float64x2_t *)*((void *)this + 27);
  unint64_t v7 = *((void *)this + 28) - (void)v6;
  if ((int)(v7 >> 3) >= 1)
  {
LABEL_6:
    unint64_t v8 = 0;
    unint64_t v9 = (v7 >> 3);
    double v10 = *((double *)this + 5);
    if (v9 < 4) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v5 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v11 = (v7 >> 3) & 3;
    unint64_t v8 = v9 - v11;
    uint64_t v12 = v6 + 1;
    uint64_t v13 = v5 + 1;
    unint64_t v14 = v9 - v11;
    do
    {
      float64x2_t v15 = vmulq_n_f64(*v12, v10);
      v13[-1] = vmulq_n_f64(v12[-1], v10);
      float64x2_t *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11)
    {
LABEL_11:
      uint64_t v16 = &v6->f64[v8];
      uint64_t v17 = &v5->f64[v8];
      unint64_t v18 = v8 - v9;
      do
      {
        double v19 = *v16++;
        *v17++ = v10 * v19;
      }
      while (!__CFADD__(v18++, 1));
    }
  }
LABEL_14:
  uint64_t v21 = operations_research::glop::LinearProgram::IntegerVariablesList(v2);
  int v22 = *(int **)v21;
  uint64_t v23 = *(int **)(v21 + 8);
  if (*(int **)v21 != v23)
  {
    do
    {
      unint64_t v24 = *v22;
      double v25 = *((double *)this + 5);
      double v26 = 1.0 - v25;
      if ((*(void *)(*((void *)this + 2412) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24))
      {
        v5->f64[v24] = v26 * *((double *)this + 4) * (double)(1 - 2 * *(void *)(*((void *)this + 2442) + 8 * v24))
                     + v25 * *(double *)(*((void *)this + 27) + 8 * v24);
      }
      else
      {
        v5->f64[*(int *)(*((void *)this + 2384) + 4 * v24)] = v26 * *((double *)this + 4);
        int SlackVariable = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)v2, *(_DWORD *)(*((void *)this + 2387) + 4 * v24));
        double v28 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19144, SlackVariable);
        operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, SlackVariable, -INFINITY, v28 * (double)*(uint64_t *)(*((void *)this + 2442) + 8 * v24));
        int v29 = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)v2, *(_DWORD *)(*((void *)this + 2390) + 4 * v24));
        double v30 = operations_research::glop::LpScalingHelper::VariableScalingFactor((uint64_t)this + 19144, v29);
        operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v2, v29, -INFINITY, -(v30 * (double)*(uint64_t *)(*((void *)this + 2442) + 8 * v24)));
      }
      ++v22;
    }
    while (v22 != v23);
  }
  if ((int)(-1431655765 * ((*((void *)this + 11) - *((void *)this + 10)) >> 4)) < 1)
  {
    *((double *)this + 5) = *((double *)this + 5) * 0.8;
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v31 = 0;
    do
    {
      operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v2, v31, v5->f64[v31]);
      ++v31;
    }
    while (v31 < (int)(-1431655765 * ((*((void *)this + 11) - *((void *)this + 10)) >> 4)));
    *((double *)this + 5) = *((double *)this + 5) * 0.8;
  }

  operator delete(v5);
}

void sub_23CCDEAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::FeasibilityPump::SolveLp(operations_research::sat::FeasibilityPump *this)
{
  uint64_t v2 = *((void *)this + 2404);
  uint64_t v3 = *((void *)this + 2403);
  if (*off_26AECFFC8[0] >= 3
    && (off_26AECFFC8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFFC8, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 364);
    size_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LP relaxation: ", 15);
    operations_research::glop::LinearProgram::GetDimensionString((operations_research::sat::FeasibilityPump *)((char *)this + 80), (uint64_t)&__p);
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v32 >= 0) {
      uint64_t v7 = HIBYTE(v32);
    }
    else {
      uint64_t v7 = (uint64_t)v31;
    }
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v34);
  }
  operations_research::glop::RevisedSimplex::Solve((operations_research::sat::FeasibilityPump *)((char *)this + 560), (operations_research::sat::FeasibilityPump *)((char *)this + 80), *((operations_research::TimeLimit **)this + 2423), (uint64_t)&__p);
  *((void *)this + 2450) += operations_research::glop::RevisedSimplex::GetNumberOfIterations((operations_research::sat::FeasibilityPump *)((char *)this + 560));
  if (__p)
  {
    if (*off_26AECFFD0[0] >= 1
      && (off_26AECFFD0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFD0, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 369);
      unint64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
      double v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"The LP solver encountered an error: ", 36);
      if ((v33 & 0x80u) == 0) {
        uint64_t v11 = &v31;
      }
      else {
        uint64_t v11 = v31;
      }
      if ((v33 & 0x80u) == 0) {
        uint64_t v12 = v33;
      }
      else {
        uint64_t v12 = v32;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
    }
    operations_research::glop::RevisedSimplex::ClearStateForNextSolve((uint64_t)this + 560);
  }
  else
  {
    if (*off_26AECFFD8[0] >= 3
      && (off_26AECFFD8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AECFFD8, (int **)&fLI::FLAGS_v, "./ortools/sat/feasibility_pump.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 377);
      uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v29);
      unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"simplex status: ", 16);
      int ProblemStatus = operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560));
      operations_research::glop::GetProblemStatusString(ProblemStatus, (uint64_t)v34);
      if ((v35 & 0x80u) == 0) {
        uint64_t v16 = v34;
      }
      else {
        uint64_t v16 = (void **)v34[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v17 = v35;
      }
      else {
        uint64_t v17 = (uint64_t)v34[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
      if ((char)v35 < 0) {
        operator delete(v34[0]);
      }
      google::LogMessage::~LogMessage((google::LogMessage *)v29);
    }
    if (operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) != 1)
    {
      *((void *)this + 2439) = 0;
      if (!operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560))
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 8
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 7
        || operations_research::glop::RevisedSimplex::GetProblemStatus((operations_research::sat::FeasibilityPump *)((char *)this + 560)) == 11)
      {
        *((unsigned char *)this + 19448) = 1;
        if ((int)((unint64_t)(v2 - v3) >> 2) >= 1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = ((unint64_t)(v2 - v3) >> 2);
          do
          {
            double VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)this + 560, v20);
            double v23 = operations_research::glop::LpScalingHelper::UnscaleVariableValue((uint64_t)this + 19144, v20, VariableValue);
            *(double *)(*((void *)this + 2433) + 8 * v20) = v23;
            double v24 = vabdd_f64(v23, round(v23));
            if (*((double *)this + 2439) >= v24) {
              double v24 = *((double *)this + 2439);
            }
            *((double *)this + 2439) = v24;
            ++v20;
          }
          while (v21 != v20);
        }
        *((void *)this + 2432) = 0;
        double v25 = *(int **)this;
        double v26 = (int *)*((void *)this + 1);
        if (*(int **)this != v26)
        {
          uint64_t v27 = *((void *)this + 2433);
          double v28 = 0.0;
          do
          {
            double v28 = v28 + *(double *)(v27 + 8 * *v25) * (double)*(uint64_t *)(v25 + 1);
            *((double *)this + 2432) = v28;
            v25 += 3;
          }
          while (v25 != v26);
        }
        *((unsigned char *)this + 19449) = *((double *)this + 2439) < 0.0001;
      }
      uint64_t v18 = 1;
      if ((char)v33 < 0) {
        goto LABEL_39;
      }
      return v18;
    }
  }
  uint64_t v18 = 0;
  if ((char)v33 < 0) {
LABEL_39:
  }
    operator delete(v31);
  return v18;
}

void sub_23CCDEEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, void *__p, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::FeasibilityPump::Round(operations_research::sat::FeasibilityPump *this)
{
  switch(*(_DWORD *)(*((void *)this + 2422) + 192))
  {
    case 0:
      if (!*((unsigned char *)this + 19448)) {
        return 0;
      }
      uint64_t v2 = (float64x2_t *)*((void *)this + 2433);
      uint64_t v3 = *((void *)this + 2434) - (void)v2;
      if (!v3) {
        goto LABEL_19;
      }
      unint64_t v4 = v3 >> 3;
      uint64_t v5 = (int64x2_t *)*((void *)this + 2442);
      if (v4 <= 1) {
        unint64_t v4 = 1;
      }
      if (v4 >= 4)
      {
        unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v8 = v2 + 1;
        unint64_t v9 = v5 + 1;
        unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          int64x2_t v11 = vcvtq_s64_f64(vrndaq_f64(*v8));
          v9[-1] = vcvtq_s64_f64(vrndaq_f64(v8[-1]));
          *unint64_t v9 = v11;
          v8 += 2;
          v9 += 2;
          v10 -= 4;
        }
        while (v10);
        if (v4 == v6) {
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v6 = 0;
      }
      unint64_t v12 = v4 - v6;
      uint64_t v13 = v6;
      unint64_t v14 = &v5->i64[v13];
      float64x2_t v15 = &v2->f64[v13];
      do
      {
        double v16 = *v15++;
        *v14++ = llround(v16);
        --v12;
      }
      while (v12);
LABEL_19:
      *((unsigned char *)this + 19520) = 1;
      goto LABEL_20;
    case 1:
      if (operations_research::sat::FeasibilityPump::LockBasedRounding((std::vector<int> *)this)) {
        goto LABEL_20;
      }
      return 0;
    case 2:
      if (operations_research::sat::FeasibilityPump::PropagationRounding(this)) {
        goto LABEL_20;
      }
      return 0;
    case 3:
      if (operations_research::sat::FeasibilityPump::ActiveLockBasedRounding(this)) {
        goto LABEL_20;
      }
      return 0;
    default:
LABEL_20:
      operations_research::sat::FeasibilityPump::FillIntegerSolutionStats((int **)this);
      return 1;
  }
}

void operations_research::sat::FeasibilityPump::MaybePushToRepo(operations_research::sat::FeasibilityPump *this)
{
  uint64_t v1 = *((void *)this + 2427);
  if (v1)
  {
    uint64_t v3 = *((int *)this + 18);
    unint64_t v14 = 0;
    float64x2_t v15 = 0;
    long long __p = 0;
    if (v3)
    {
      if ((v3 & 0x80000000) != 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      long long __p = operator new(8 * v3);
      float64x2_t v15 = (char *)__p + 8 * v3;
      memset_pattern16(__p, &unk_23CE7EE40, 8 * v3);
      unint64_t v14 = v15;
    }
    if (*((unsigned char *)this + 19449))
    {
      unint64_t v4 = (int *)*((void *)this + 2403);
      uint64_t v5 = (int *)*((void *)this + 2404);
      if (v4 != v5)
      {
        do
        {
          uint64_t v6 = *(void *)(*((void *)this + 2430) + 96);
          if (*v4 < (unint64_t)((*(void *)(*((void *)this + 2430) + 104) - v6) >> 2))
          {
            uint64_t v7 = *(unsigned int *)(v6 + 4 * *v4);
            if ((v7 & 0x80000000) == 0 && (int)v7 < *((_DWORD *)this + 18))
            {
              int v16 = *v4;
              *((void *)__p + v7) = *(void *)(*((void *)this + 2433)
                                                + 8
                                                * *(int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2406, &v16));
            }
          }
          ++v4;
        }
        while (v4 != v5);
        uint64_t v1 = *((void *)this + 2427);
      }
      operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(v1, (absl::lts_2020_02_25::Mutex *)&__p);
    }
    if (*((unsigned char *)this + 19521))
    {
      unint64_t v8 = (int *)*((void *)this + 2403);
      for (unint64_t i = (int *)*((void *)this + 2404); v8 != i; ++v8)
      {
        uint64_t v10 = *(void *)(*((void *)this + 2430) + 96);
        if (*v8 < (unint64_t)((*(void *)(*((void *)this + 2430) + 104) - v10) >> 2))
        {
          uint64_t v11 = *(unsigned int *)(v10 + 4 * *v8);
          if ((v11 & 0x80000000) == 0 && (int)v11 < *((_DWORD *)this + 18))
          {
            int v16 = *v8;
            unint64_t v12 = (int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>((uint64_t *)this + 2406, &v16);
            *((double *)__p + v11) = (double)*(uint64_t *)(*((void *)this + 2442) + 8 * *v12);
          }
        }
      }
      operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(*((void *)this + 2427), (absl::lts_2020_02_25::Mutex *)&__p);
    }
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_23CCDF2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 8 * v13) == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    float64x2_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 8 * v13 + 4;
}

void sub_23CCDF424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL operations_research::sat::FeasibilityPump::LockBasedRounding(std::vector<int> *this)
{
  int end_low = LOBYTE(this[810].__end_);
  if (LOBYTE(this[810].__end_))
  {
    p_std::vector<int>::pointer end = &this[810].__end_;
    if (this[805].__begin_ == this[805].__end_)
    {
      uint64_t v15 = (char *)this[801].__end_ - (char *)this[801].__begin_;
      unint64_t v16 = (int)(v15 >> 2);
      std::vector<int>::value_type __x = 0;
      if (v15 << 30) {
        std::vector<int>::__append(this + 805, (int)(v15 >> 2), &__x);
      }
      std::vector<int>::value_type v32 = 0;
      std::vector<int>::pointer begin = this[806].__begin_;
      unint64_t v18 = this[806].__end_ - begin;
      if (v16 <= v18)
      {
        if (v16 < v18) {
          this[806].__end_ = &begin[v16];
        }
      }
      else
      {
        std::vector<int>::__append(this + 806, v16 - v18, &v32);
      }
      if ((int)((unint64_t)v15 >> 2) >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = ((unint64_t)v15 >> 2);
        do
        {
          SparseColumn = (void *)operations_research::glop::LinearProgram::GetSparseColumn(&this[3].__end_, v19);
          uint64_t v22 = SparseColumn[1];
          if (v22 >= 1)
          {
            double v24 = (int *)SparseColumn[3];
            double v23 = (double *)SparseColumn[4];
            do
            {
              int v25 = *v24++;
              int SlackVariable = operations_research::glop::LinearProgram::GetSlackVariable((uint64_t)&this[3].__end_, v25);
              int v27 = *(double *)&this[10].__begin_[2 * SlackVariable] > -INFINITY;
              double v28 = *v23++;
              double v29 = v28;
              if (v28 <= 0.0) {
                int v30 = *(double *)&this[11].__begin_[2 * SlackVariable] < INFINITY;
              }
              else {
                int v30 = *(double *)&this[10].__begin_[2 * SlackVariable] > -INFINITY;
              }
              if (v29 > 0.0) {
                int v27 = *(double *)&this[11].__begin_[2 * SlackVariable] < INFINITY;
              }
              this[805].__begin_[v19] += v30;
              this[806].__begin_[v19] += v27;
              --v22;
            }
            while (v22);
          }
          ++v19;
        }
        while (v19 != v20);
      }
    }
    std::vector<int>::pointer end = this[811].__end_;
    std::vector<int>::pointer v4 = this[811].__begin_;
    uint64_t v5 = (char *)end - (char *)v4;
    if (end != v4)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v5 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      do
      {
        while (1)
        {
          while (1)
          {
            double v8 = *(double *)&v4[2 * v6];
            double v9 = round(v8);
            if (vabdd_f64(v8, v9) >= 0.1)
            {
              int v10 = this[805].__begin_[v6];
              int v11 = this[806].__begin_[v6];
              BOOL v12 = v10 <= v11;
              if (v10 != v11) {
                break;
              }
            }
            *(void *)&this[814].__begin_[2 * v6++] = (uint64_t)v9;
            if (v7 == v6) {
              goto LABEL_14;
            }
          }
          std::vector<int>::pointer v13 = this[814].__begin_;
          if (v12) {
            break;
          }
          *(void *)&v13[2 * v6++] = vcvtmd_s64_f64(v8);
          if (v7 == v6) {
            goto LABEL_14;
          }
        }
        *(void *)&v13[2 * v6++] = vcvtpd_s64_f64(v8);
      }
      while (v7 != v6);
    }
LABEL_14:
    *((unsigned char *)p_end + 72) = 1;
  }
  return end_low != 0;
}

BOOL operations_research::sat::FeasibilityPump::ActiveLockBasedRounding(operations_research::sat::FeasibilityPump *this)
{
  int v1 = *((unsigned __int8 *)this + 19448);
  if (*((unsigned char *)this + 19448))
  {
    uint64_t v20 = (char *)this + 19448;
    int v21 = *((unsigned __int8 *)this + 19448);
    unint64_t v3 = *((void *)this + 2404) - *((void *)this + 2403);
    if ((int)(v3 >> 2) >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (v3 >> 2);
      uint64_t v6 = *((void *)this + 2433);
      do
      {
        while (1)
        {
          while (1)
          {
            double v7 = *(double *)(v6 + 8 * v4);
            double v8 = round(v7);
            if (vabdd_f64(v7, v8) < 0.1) {
              *(void *)(*((void *)this + 2442) + 8 * v4) = (uint64_t)v8;
            }
            SparseColumn = (void *)operations_research::glop::LinearProgram::GetSparseColumn((void *)this + 10, v4);
            uint64_t v10 = SparseColumn[1];
            if (v10 >= 1)
            {
              int v11 = 0;
              int v12 = 0;
              unint64_t v14 = (int *)SparseColumn[3];
              std::vector<int>::pointer v13 = (double *)SparseColumn[4];
              do
              {
                int v15 = *v14++;
                int ConstraintStatus = operations_research::glop::RevisedSimplex::GetConstraintStatus((uint64_t)this + 560, v15);
                if (ConstraintStatus == 3)
                {
                  if (*v13 <= 0.0) {
                    ++v11;
                  }
                  else {
                    ++v12;
                  }
                }
                else if (ConstraintStatus == 2)
                {
                  if (*v13 > 0.0) {
                    ++v11;
                  }
                  else {
                    ++v12;
                  }
                }
                ++v13;
                --v10;
              }
              while (v10);
              if (v12 != v11) {
                break;
              }
            }
            uint64_t v6 = *((void *)this + 2433);
            *(void *)(*((void *)this + 2442) + 8 * v4) = llround(*(double *)(v6 + 8 * v4));
            if (++v4 == v5) {
              goto LABEL_23;
            }
          }
          uint64_t v6 = *((void *)this + 2433);
          double v17 = *(double *)(v6 + 8 * v4);
          uint64_t v18 = *((void *)this + 2442);
          if (v12 <= v11) {
            break;
          }
          *(void *)(v18 + 8 * v4++) = vcvtmd_s64_f64(v17);
          if (v4 == v5) {
            goto LABEL_23;
          }
        }
        *(void *)(v18 + 8 * v4++) = vcvtpd_s64_f64(v17);
      }
      while (v4 != v5);
    }
LABEL_23:
    v20[72] = 1;
    int v1 = v21;
  }
  return v1 != 0;
}

uint64_t operations_research::sat::FeasibilityPump::PropagationRounding(operations_research::sat::FeasibilityPump *this)
{
  if (!*((unsigned char *)this + 19448)) {
    return 0;
  }
  int v1 = this;
  int v119 = (char *)this + 19448;
  operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)this + 2428));
  int v132 = 0;
  unint64_t v133 = 0;
  int v134 = 0;
  long long v130 = 0uLL;
  unsigned int v131 = 0;
  long long v128 = 0uLL;
  int v129 = 0;
  uint64_t v2 = *((void *)v1 + 2433);
  if (*((void *)v1 + 2434) != v2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    double v7 = 0;
    double v8 = 0;
    double v9 = 0;
    unint64_t v10 = *((void *)&v130 + 1);
    long long __p = (double *)*((void *)&v128 + 1);
    uint64_t v123 = v1;
    while (1)
    {
      double v11 = vabdd_f64(round(*(double *)(v2 + 8 * v5)), *(double *)(v2 + 8 * v5));
      if ((*(void *)(*((void *)v1 + 2412) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5))
      {
        if (v4 >= (unint64_t)v7)
        {
          int v12 = v6;
          uint64_t v13 = (uint64_t)(v4 - (void)v8) >> 4;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 60)
          {
            *((void *)&v130 + 1) = v10;
            unsigned int v131 = v7;
            int v129 = v6;
            *(void *)&long long v130 = v8;
            *(void *)&long long v128 = v9;
            *((void *)&v128 + 1) = __p;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v7 - v8) >> 3 > v14) {
            unint64_t v14 = (v7 - v8) >> 3;
          }
          if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15)
          {
            if (v15 >> 60)
            {
              *((void *)&v130 + 1) = v10;
              unsigned int v131 = v7;
              int v129 = v12;
              *(void *)&long long v130 = v8;
              *(void *)&long long v128 = v9;
              *((void *)&v128 + 1) = __p;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v16 = (char *)operator new(16 * v15);
            uint64_t v17 = (uint64_t)&v16[16 * v13];
            *(double *)uint64_t v17 = v11;
            *(_DWORD *)(v17 + 8) = v5;
            if ((unsigned char *)v4 != v8)
            {
LABEL_17:
              uint64_t v18 = v17;
              do
              {
                uint64_t v19 = (unsigned char *)(v18 - 16);
                *(_OWORD *)(v18 - 16) = *(_OWORD *)(v4 - 16);
                v4 -= 16;
                v18 -= 16;
              }
              while ((unsigned char *)v4 != v8);
              double v7 = &v16[16 * v15];
              unint64_t v10 = v17 + 16;
              if (v8) {
LABEL_20:
              }
                operator delete(v8);
LABEL_21:
              unint64_t v4 = v10;
              double v8 = v19;
              uint64_t v6 = v12;
              int v1 = v123;
              goto LABEL_5;
            }
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = 16 * v13;
            *(double *)uint64_t v17 = v11;
            *(_DWORD *)(v17 + 8) = v5;
            if ((unsigned char *)v4 != v8) {
              goto LABEL_17;
            }
          }
          uint64_t v19 = (unsigned char *)v17;
          double v7 = &v16[16 * v15];
          unint64_t v10 = v17 + 16;
          if (v8) {
            goto LABEL_20;
          }
          goto LABEL_21;
        }
        *(double *)unint64_t v4 = v11;
        *(_DWORD *)(v4 + 8) = v5;
        unint64_t v10 = v4 + 16;
        v4 += 16;
      }
      else
      {
        if (v3 >= v6)
        {
          uint64_t v20 = ((char *)v3 - (char *)v9) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
          {
            *((void *)&v130 + 1) = v10;
            unsigned int v131 = v7;
            int v129 = v6;
            *(void *)&long long v130 = v8;
            *(void *)&long long v128 = v9;
            *((void *)&v128 + 1) = __p;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v6;
          if (v6 - v9 > v21) {
            unint64_t v21 = v6 - v9;
          }
          if ((unint64_t)((char *)v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            if (v23 >> 60)
            {
              *((void *)&v130 + 1) = v10;
              unsigned int v131 = v7;
              int v129 = v22;
              *(void *)&long long v130 = v8;
              *(void *)&long long v128 = v9;
              *((void *)&v128 + 1) = __p;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            double v24 = (char *)operator new(16 * v23);
            uint64_t v25 = (uint64_t)&v24[16 * v20];
            *(double *)uint64_t v25 = v11;
            *(_DWORD *)(v25 + 8) = v5;
            int v1 = v123;
            if (v3 != v9)
            {
LABEL_33:
              uint64_t v26 = v25;
              do
              {
                int v27 = (double *)(v26 - 16);
                *(_OWORD *)(v26 - 16) = *((_OWORD *)v3 - 1);
                v3 -= 2;
                v26 -= 16;
              }
              while (v3 != v9);
              uint64_t v6 = (double *)&v24[16 * v23];
              unint64_t v3 = (double *)(v25 + 16);
              long long __p = (double *)(v25 + 16);
              if (v9) {
LABEL_36:
              }
                operator delete(v9);
LABEL_37:
              double v9 = v27;
              goto LABEL_5;
            }
          }
          else
          {
            double v24 = 0;
            uint64_t v25 = 16 * v20;
            *(double *)uint64_t v25 = v11;
            *(_DWORD *)(v25 + 8) = v5;
            int v1 = v123;
            if (v3 != v9) {
              goto LABEL_33;
            }
          }
          int v27 = (double *)v25;
          uint64_t v6 = (double *)&v24[16 * v23];
          unint64_t v3 = (double *)(v25 + 16);
          long long __p = (double *)(v25 + 16);
          if (v9) {
            goto LABEL_36;
          }
          goto LABEL_37;
        }
        *unint64_t v3 = v11;
        *((_DWORD *)v3 + 2) = v5;
        v3 += 2;
        long long __p = v3;
      }
LABEL_5:
      ++v5;
      uint64_t v2 = *((void *)v1 + 2433);
      if (v5 >= (*((void *)v1 + 2434) - v2) >> 3)
      {
        *((void *)&v130 + 1) = v10;
        unsigned int v131 = v7;
        *((void *)&v128 + 1) = __p;
        int v129 = v6;
        goto LABEL_47;
      }
    }
  }
  unint64_t v4 = 0;
  double v9 = 0;
  double v8 = 0;
LABEL_47:
  unint64_t v29 = 126 - 2 * __clz((uint64_t)(v4 - (void)v8) >> 4);
  *(void *)&long long v130 = v8;
  *(void *)&long long v128 = v9;
  if ((unsigned char *)v4 == v8) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>((uint64_t)v8, v4, (uint64_t)&v127, v30, 1);
  uint64_t v31 = (char *)v128;
  unint64_t v124 = (uint64_t)(*((void *)&v128 + 1) - v128) >> 4;
  unint64_t v32 = 126 - 2 * __clz(v124);
  if (*((void *)&v128 + 1) == (void)v128) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  unint64_t v120 = *((void *)&v128 + 1);
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v128, *((unint64_t *)&v128 + 1), (uint64_t)&v127, v33, 1);
  unint64_t v34 = v130;
  unint64_t __pa = v130;
  if (*((void *)&v130 + 1) != (void)v130)
  {
    unint64_t v35 = 0;
    int v36 = v133;
    unint64_t v37 = (uint64_t)(*((void *)&v130 + 1) - v130) >> 4;
    do
    {
      while (1)
      {
        uint64_t v38 = (_DWORD *)(v34 + 16 * v35 + 8);
        if (v36 >= (_DWORD *)v134) {
          break;
        }
        *v36++ = *v38;
        unint64_t v133 = v36;
        if (v37 <= ++v35) {
          goto LABEL_85;
        }
      }
      unint64_t v39 = v132;
      int64_t v40 = (char *)v36 - (unsigned char *)v132;
      uint64_t v41 = ((char *)v36 - (unsigned char *)v132) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v134 - (unsigned char *)v132;
      if ((v134 - (unsigned char *)v132) >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        if (v44 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v45 = operator new(4 * v44);
        unint64_t v46 = &v45[4 * v41];
        *unint64_t v46 = *v38;
        uint64_t v47 = (uint64_t)(v46 + 1);
        if (v36 == (_DWORD *)v39) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v45 = 0;
        unint64_t v46 = (_DWORD *)(4 * v41);
        *(_DWORD *)(4 * v41) = *v38;
        uint64_t v47 = 4 * v41 + 4;
        if (v36 == (_DWORD *)v39) {
          goto LABEL_71;
        }
      }
      unint64_t v48 = (char *)(v36 - 1) - v39;
      if (v48 >= 0xBC)
      {
        if (&v45[v40 - 4 - (v48 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
        {
          unint64_t v49 = v36;
        }
        else if ((_DWORD *)((char *)v36 - (v48 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v36 - 1)
        {
          unint64_t v49 = v36;
        }
        else if ((unint64_t)((char *)v36 - v45 - v40) >= 0x20)
        {
          uint64_t v51 = (v48 >> 2) + 1;
          uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v49 = &v36[v52 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v46 = (_DWORD *)((char *)v46 - v52);
          unint64_t v53 = &v45[4 * v41 - 16];
          unint64_t v54 = (long long *)(v36 - 4);
          uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v56 = *v54;
            *(v53 - 1) = *(v54 - 1);
            *unint64_t v53 = v56;
            v53 -= 2;
            v54 -= 2;
            v55 -= 8;
          }
          while (v55);
          if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_71;
          }
        }
        else
        {
          unint64_t v49 = v36;
        }
      }
      else
      {
        unint64_t v49 = v36;
      }
      do
      {
        int v50 = *--v49;
        *--unint64_t v46 = v50;
      }
      while (v49 != (_DWORD *)v39);
LABEL_71:
      int v132 = v46;
      unint64_t v133 = (_DWORD *)v47;
      int v134 = &v45[4 * v44];
      if (v39) {
        operator delete(v39);
      }
      unint64_t v34 = __pa;
      unint64_t v133 = (_DWORD *)v47;
      ++v35;
      int v36 = (_DWORD *)v47;
    }
    while (v37 > v35);
  }
LABEL_85:
  if ((char *)v120 != v31)
  {
    unint64_t v57 = 0;
    unsigned int v58 = (char *)v133;
    while (1)
    {
      uint64_t v60 = &v31[16 * v57 + 8];
      if (v58 >= v134) {
        break;
      }
      *(_DWORD *)unsigned int v58 = *(_DWORD *)v60;
      uint64_t v59 = (uint64_t)(v58 + 4);
LABEL_88:
      unint64_t v133 = (_DWORD *)v59;
      ++v57;
      unsigned int v58 = (char *)v59;
      if (v124 <= v57) {
        goto LABEL_116;
      }
    }
    long long v61 = (char *)v132;
    int64_t v62 = v58 - (unsigned char *)v132;
    uint64_t v63 = (v58 - (unsigned char *)v132) >> 2;
    unint64_t v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v65 = v134 - (unsigned char *)v132;
    if ((v134 - (unsigned char *)v132) >> 1 > v64) {
      unint64_t v64 = v65 >> 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      if (v66 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v67 = operator new(4 * v66);
      std::vector<int>::size_type v68 = &v67[4 * v63];
      *std::vector<int>::size_type v68 = *(_DWORD *)v60;
      uint64_t v59 = (uint64_t)(v68 + 1);
      if (v58 == v61) {
        goto LABEL_104;
      }
    }
    else
    {
      unint64_t v67 = 0;
      std::vector<int>::size_type v68 = (_DWORD *)(4 * v63);
      *(_DWORD *)(4 * v63) = *(_DWORD *)v60;
      uint64_t v59 = 4 * v63 + 4;
      if (v58 == v61) {
        goto LABEL_104;
      }
    }
    unint64_t v69 = v58 - 4 - v61;
    if (v69 >= 0xBC)
    {
      if (&v67[v62 - 4 - (v69 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v62 - 4])
      {
        int v70 = v58;
      }
      else if (&v58[-(v69 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v58 - 4)
      {
        int v70 = v58;
      }
      else if ((unint64_t)(v58 - v67 - v62) >= 0x20)
      {
        uint64_t v72 = (v69 >> 2) + 1;
        uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        int v70 = &v58[-v73];
        std::vector<int>::size_type v68 = (_DWORD *)((char *)v68 - v73);
        int v74 = &v67[4 * v63 - 16];
        int v75 = v58 - 16;
        uint64_t v76 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          _OWORD *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 8;
        }
        while (v76);
        if (v72 == (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_104:
          int v132 = v68;
          unint64_t v133 = (_DWORD *)v59;
          int v134 = &v67[4 * v66];
          if (v61) {
            operator delete(v61);
          }
          goto LABEL_88;
        }
      }
      else
      {
        int v70 = v58;
      }
    }
    else
    {
      int v70 = v58;
    }
    do
    {
      int v71 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *--std::vector<int>::size_type v68 = v71;
    }
    while (v70 != v61);
    goto LABEL_104;
  }
LABEL_116:
  if (v31) {
    operator delete(v31);
  }
  int v78 = (absl::lts_2020_02_25 *)__pa;
  if (__pa) {
    operator delete((void *)__pa);
  }
  uint64_t v79 = (int *)v132;
  uint64_t v80 = v133;
  if (v132 == v133)
  {
LABEL_176:
    operations_research::sat::SatSolver::ResetToLevelZero(*((operations_research::sat::SatSolver **)v1 + 2428));
    uint64_t v28 = 1;
    v119[72] = 1;
    goto LABEL_181;
  }
  unint64_t v125 = v133;
  while (1)
  {
    uint64_t v81 = *v79;
    uint64_t v82 = *((void *)v1 + 2423);
    BOOL v83 = *(unsigned __int8 **)(v82 + 120);
    if (v83 && (unsigned __int8 v84 = atomic_load(v83), (v84 & 1) != 0)
      || fmax(*(double *)(v82 + 104) - *(double *)(v82 + 112), 0.0) <= 0.0)
    {
      uint64_t v28 = 0;
      goto LABEL_181;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v78);
    if (*(void *)(v82 + 24) <= CurrentTimeNanos - *(void *)(v82 + 8)) {
      uint64_t v86 = CurrentTimeNanos - *(void *)(v82 + 8);
    }
    else {
      uint64_t v86 = *(void *)(v82 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v82 + 32), v86);
    *(void *)(v82 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v82 + 40) + 8 * *(int *)(v82 + 68)) + CurrentTimeNanos >= *(void *)(v82 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_178;
      }
      double v87 = *(double *)(v82 + 96);
      if (*(unsigned char *)(v82 + 72))
      {
        int v78 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v78);
        double v88 = v87 + (double)((uint64_t)v78 + *(void *)(v82 + 88) - *(void *)(v82 + 80)) * -0.000000001;
        if (v88 <= 0.0001) {
          goto LABEL_178;
        }
      }
      else
      {
        double v88 = v87 + (double)*(uint64_t *)(v82 + 88) * -0.000000001;
        if (v88 <= 0.0001)
        {
LABEL_178:
          uint64_t v28 = 0;
          *(void *)(v82 + 16) = 0;
          goto LABEL_181;
        }
      }
      *(void *)(v82 + 16) = *(void *)(v82 + 8) + (uint64_t)(v88 * 1000000000.0);
    }
    int v89 = *(_DWORD *)(*((void *)v1 + 2403) + 4 * v81);
    uint64_t v90 = **((void **)v1 + 2429);
    uint64_t v91 = *(void *)(*((void *)v1 + 2424) + 40);
    uint64_t v92 = *(void *)(v91 + 12 * v89);
    uint64_t v127 = v92;
    uint64_t v93 = *(void *)(v91 + 12 * (v89 ^ 1));
    uint64_t v126 = -v93;
    if (!(v92 + v93))
    {
      *(void *)(*((void *)v1 + 2442) + 8 * v81) = v92;
      goto LABEL_123;
    }
    uint64_t v94 = (operations_research::Domain *)(v90 + 24 * v89);
    double v95 = *(double *)(*((void *)v1 + 2433) + 8 * v81);
    uint64_t v96 = vcvtmd_s64_f64(v95);
    BOOL v97 = operations_research::Domain::Contains(v94, v96);
    uint64_t v98 = vcvtpd_s64_f64(v95);
    BOOL v99 = v127 <= v96 && v97;
    BOOL v100 = operations_research::Domain::Contains(v94, v98);
    BOOL v101 = v126 >= v98 && v100;
    uint64_t v102 = llround(v95);
    if (operations_research::Domain::IsEmpty(v94)) {
      break;
    }
    uint64_t v103 = v127;
    if (v127 <= v98 && (uint64_t v103 = v126, v126 >= v96))
    {
      if (v101 && v99)
      {
        *(void *)(*((void *)v1 + 2442) + 8 * v81) = v102;
      }
      else if (v101)
      {
        *(void *)(*((void *)v1 + 2442) + 8 * v81) = v98;
        uint64_t v102 = v98;
      }
      else if (v99)
      {
        *(void *)(*((void *)v1 + 2442) + 8 * v81) = v96;
        uint64_t v102 = v96;
      }
      else
      {
        uint64_t v109 = *((void *)v1 + 2426);
        LODWORD(v128) = v89;
        *(void *)((char *)&v128 + 4) = v102;
        operations_research::sat::IntegerEncoder::Canonicalize(v109, (const char *)v128, SHIDWORD(v102), (uint64_t)&v130);
        unint64_t v118 = v118 & 0xFFFFFFFF00000000 | HIDWORD(v102);
        uint64_t v110 = *(void *)((char *)&v130 + 4);
        unint64_t v111 = *(void *)((char *)&v130 + 4) - v102;
        if (*(void *)((char *)&v130 + 4) - v102 < 0) {
          unint64_t v111 = v102 - *(void *)((char *)&v130 + 4);
        }
        uint64_t v112 = -(uint64_t)v131 - v102;
        if (v112 < 0) {
          uint64_t v112 = (uint64_t)&v131[v102];
        }
        if (v111 >= v112) {
          uint64_t v110 = -(uint64_t)v131;
        }
        uint64_t v113 = *((void *)v1 + 2442);
        *(void *)(v113 + 8 * v81) = v110;
        uint64_t v102 = *(void *)(v113 + 8 * v81);
      }
    }
    else
    {
      *(void *)(*((void *)v1 + 2442) + 8 * v81) = v103;
      uint64_t v102 = v103;
    }
    if (!operations_research::Domain::Contains(v94, v102))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v130, (google::glog_internal_namespace_ *)"./ortools/sat/feasibility_pump.cc", 636);
      int v117 = (void *)google::LogMessage::stream((google::LogMessage *)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"Check failed: domain.Contains(integer_solution_[var_index]) ", 60);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v130);
    }
    uint64_t v104 = *((void *)v1 + 2442);
    *(void *)&long long v130 = *(void *)(v104 + 8 * v81);
    if (v127 > (uint64_t)v130) {
      google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v130, (int)&v127, "integer_solution_[var_index] >= lb");
    }
    uint64_t v80 = v125;
    *(void *)&long long v130 = *(void *)(v104 + 8 * v81);
    if (v126 < (uint64_t)v130) {
      google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>((int)&v130, (int)&v126, "integer_solution_[var_index] <= ub");
    }
    uint64_t v105 = *(void *)(v104 + 8 * v81);
    if (v105 == v127)
    {
      int v106 = (unsigned int *)*((void *)v1 + 2426);
      uint64_t v107 = 0x7FFFFFFFFFFFFFFFLL;
      if (v105 >= (uint64_t)0x8000000000000002) {
        uint64_t v107 = -v105;
      }
      LODWORD(v130) = v89 ^ 1;
      *(void *)((char *)&v130 + 4) = v107;
      unint64_t __pa = __pa & 0xFFFFFFFF00000000 | HIDWORD(v107);
      int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v106, (const char *)v130, SHIDWORD(v107));
    }
    else
    {
      int v114 = (unsigned int *)*((void *)v1 + 2426);
      if (v105 == v126)
      {
        LODWORD(v130) = v89;
        *(void *)((char *)&v130 + 4) = v105;
        unint64_t v120 = v120 & 0xFFFFFFFF00000000 | HIDWORD(v105);
        int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v114, (const char *)v130, v120);
      }
      else
      {
        int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality((uint64_t)v114, v89, v105);
      }
    }
    int v115 = AssociatedLiteral;
    if (!operations_research::sat::SatSolver::FinishPropagation(*((operations_research::sat::SatSolver **)v1
                                                                               + 2428)))
      goto LABEL_180;
    int v78 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(*((void *)v1 + 2428), v115);
    if (*(unsigned char *)(*((void *)v1 + 2428) + 496)) {
      goto LABEL_180;
    }
LABEL_123:
    if (++v79 == v80) {
      goto LABEL_176;
    }
  }
  *(void *)(*((void *)v1 + 2442) + 8 * v81) = v102;
LABEL_180:
  uint64_t v28 = 0;
  v119[164] = 1;
LABEL_181:
  if (v132)
  {
    unint64_t v133 = v132;
    operator delete(v132);
  }
  return v28;
}

void sub_23CCE04A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE04A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE04B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int **operations_research::sat::FeasibilityPump::FillIntegerSolutionStats(int **this)
{
  int v1 = (char *)this + 19521;
  this[2441] = 0;
  uint64_t v2 = *this;
  unint64_t v3 = this[1];
  if (*this != v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = this[2442];
    do
    {
      unint64_t v4 = (int *)((char *)v4 + *(void *)(v2 + 1) * *(void *)&v5[2 * *v2]);
      this[2441] = v4;
      v2 += 3;
    }
    while (v2 != v3);
  }
  unsigned char *v1 = 1;
  *((_DWORD *)this + 4896) = 0;
  this[2449] = 0;
  uint64_t v6 = this[6];
  if ((int)(-858993459 * (((char *)this[7] - (char *)v6) >> 3)) >= 1)
  {
    double v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = -858993459 * (((char *)this[7] - (char *)v6) >> 3);
    do
    {
      unint64_t v14 = (uint64_t *)&v6[10 * v9];
      unint64_t v15 = (int *)v14[2];
      unint64_t v16 = (int *)v14[3];
      if (v15 == v16)
      {
        uint64_t v27 = 0;
LABEL_54:
        uint64_t v35 = *(void *)&v6[10 * v9 + 2];
        BOOL v28 = __OFSUB__(v27, v35);
        uint64_t v36 = v27 - v35;
        if (!((v36 < 0) ^ v28 | (v36 == 0))) {
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v17 = 0;
        while (1)
        {
          uint64_t v19 = *(void *)(v15 + 1);
          if (v19 >= 0) {
            unint64_t v20 = *(void *)(v15 + 1);
          }
          else {
            unint64_t v20 = -v19;
          }
          int v21 = 63 - __clz(v20);
          uint64_t v18 = this[2442];
          uint64_t v22 = *(void *)&v18[2 * *v15];
          if (v19) {
            int v23 = v21;
          }
          else {
            int v23 = 0;
          }
          if (v22 >= 0) {
            unint64_t v24 = *(void *)&v18[2 * *v15];
          }
          else {
            unint64_t v24 = -v22;
          }
          int v25 = 63 - __clz(v24);
          if (!v22) {
            int v25 = 0;
          }
          int v26 = v23 + v25;
          if (v26 > 61)
          {
            if (v22)
            {
              BOOL v28 = 0;
              BOOL v29 = v19 == 0;
            }
            else
            {
              BOOL v28 = 0;
              BOOL v29 = 1;
            }
            if (v29)
            {
              uint64_t v27 = 0;
            }
            else
            {
              uint64_t v27 = ((v19 ^ (unint64_t)v22) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
              unint64_t v30 = v20 * v24;
              if (v26 > 0x3E || v30 >= v27)
              {
                BOOL v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                  goto LABEL_54;
                }
              }
              else
              {
                if (v27 >= 0) {
                  uint64_t v27 = v30;
                }
                else {
                  uint64_t v27 = -(uint64_t)v30;
                }
                BOOL v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
                if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
                  goto LABEL_54;
                }
              }
            }
          }
          else
          {
            uint64_t v27 = v19 * v22;
            BOOL v28 = __OFSUB__(v27 - 0x7FFFFFFFFFFFFFFFLL, 2);
            if ((unint64_t)(v27 - 0x7FFFFFFFFFFFFFFFLL) < 2) {
              goto LABEL_54;
            }
          }
          unint64_t v32 = v27 + v17;
          unint64_t v33 = (v27 + v17) ^ v17;
          unint64_t v34 = (v27 + v17) ^ v27;
          unint64_t v17 = (v17 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          if (((v33 & v34 & 0x8000000000000000) != 0) == v28) {
            unint64_t v17 = v32;
          }
          if (v17 - 0x7FFFFFFFFFFFFFFFLL < 2) {
            break;
          }
          v15 += 3;
          uint64_t v27 = v17;
          if (v15 == v16) {
            goto LABEL_54;
          }
        }
        uint64_t v27 = v17;
        uint64_t v37 = *(void *)&v6[10 * v9 + 2];
        BOOL v28 = __OFSUB__(v17, v37);
        uint64_t v36 = v17 - v37;
        if (!((v36 < 0) ^ v28 | (v36 == 0))) {
          goto LABEL_6;
        }
      }
      if (*v14 > v27)
      {
        uint64_t v36 = 0;
LABEL_6:
        unsigned char *v1 = 0;
        *((_DWORD *)this + 4896) = ++v8;
        uint64_t v11 = *v14;
        BOOL v12 = v11 <= v27;
        uint64_t v13 = v11 - v27;
        if (v12) {
          uint64_t v13 = 0;
        }
        if (v36 > v13) {
          uint64_t v13 = v36;
        }
        if ((uint64_t)v7 <= v13) {
          double v7 = (int *)v13;
        }
        this[2449] = v7;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return this;
}

char *std::vector<operations_research::sat::FeasibilityPump::LinearConstraintInternal>::__push_back_slow_path<operations_research::sat::FeasibilityPump::LinearConstraintInternal>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x666666666666666) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 40 * v5;
  int v8 = (char *)operator new(40 * v5);
  uint64_t v9 = &v8[40 * v3];
  uint64_t v10 = &v8[v7];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  BOOL v12 = v9 + 40;
  uint64_t v13 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    unint64_t v16 = &v9[v15];
    unint64_t v17 = &v14[v15];
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *(_OWORD *)(v16 - 24) = *(_OWORD *)&v14[v15 - 24];
    *((void *)v16 - 1) = *(void *)&v14[v15 - 8];
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 1) = 0;
    v15 -= 40;
  }
  while (&v14[v15] != v13);
  uint64_t v18 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v18)
  {
    do
    {
      uint64_t v19 = (void *)*((void *)v14 - 3);
      if (v19)
      {
        *((void *)v14 - 2) = v19;
        operator delete(v19);
      }
      v14 -= 40;
    }
    while (v14 != v18);
    unint64_t v14 = v18;
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
  return v12;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v65 = a2 - 3;
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v25 = *(a2 - 3);
          int v26 = *(_DWORD *)v10;
          if (v25 >= *(_DWORD *)v10)
          {
            if (v26 < v25) {
              return result;
            }
            uint64_t v28 = *((void *)a2 - 1);
            uint64_t v27 = *(void *)(v10 + 4);
            if (v28 >= v27) {
              return result;
            }
          }
          else
          {
            uint64_t v27 = *(void *)(v10 + 4);
            uint64_t v28 = *((void *)a2 - 1);
          }
          *(_DWORD *)uint64_t v10 = v25;
          *(a2 - 3) = v26;
          *(void *)(v10 + 4) = v28;
          *((void *)a2 - 1) = v27;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (int *)(v10 + 12), v65);
        case 4uLL:
          BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (int *)(v10 + 12), (int *)(v10 + 24));
          int v29 = *(a2 - 3);
          int v30 = *(_DWORD *)(v10 + 24);
          if (v29 >= v30)
          {
            if (v30 < v29) {
              return result;
            }
            uint64_t v32 = *((void *)a2 - 1);
            uint64_t v31 = *(void *)(v10 + 28);
            if (v32 >= v31) {
              return result;
            }
          }
          else
          {
            uint64_t v31 = *(void *)(v10 + 28);
            uint64_t v32 = *((void *)a2 - 1);
          }
          *(_DWORD *)(v10 + 24) = v29;
          *(a2 - 3) = v30;
          *(void *)(v10 + 28) = v32;
          *((void *)a2 - 1) = v31;
          int v33 = *(_DWORD *)(v10 + 24);
          int v34 = *(_DWORD *)(v10 + 12);
          if (v33 >= v34)
          {
            if (v34 < v33) {
              return result;
            }
            uint64_t v36 = *(void *)(v10 + 28);
            uint64_t v35 = *(void *)(v10 + 16);
            if (v36 >= v35) {
              return result;
            }
          }
          else
          {
            uint64_t v35 = *(void *)(v10 + 16);
            uint64_t v36 = *(void *)(v10 + 28);
          }
          *(_DWORD *)(v10 + 12) = v33;
          *(_DWORD *)(v10 + 24) = v34;
          *(void *)(v10 + 16) = v36;
          *(void *)(v10 + 28) = v35;
          int v37 = *(_DWORD *)v10;
          if (v33 >= *(_DWORD *)v10)
          {
            if (v37 < v33) {
              return result;
            }
            uint64_t v38 = *(void *)(v10 + 4);
            if (v36 >= v38) {
              return result;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v10 + 4);
          }
          *(_DWORD *)uint64_t v10 = v33;
          *(_DWORD *)(v10 + 12) = v37;
          *(void *)(v10 + 4) = v36;
          *(void *)(v10 + 16) = v38;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, v10 + 12, v10 + 24, v10 + 36, v65);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if ((int *)v10 != a2)
      {
        unint64_t v54 = (v15 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        long long v56 = (int *)(v10 + 12 * v54);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, a3, v15, v56);
          v56 -= 3;
          --v55;
        }
        while (v55);
        unint64_t v57 = v14 / 0xCuLL;
        do
        {
          BOOL result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, (uint64_t)a2, a3, v57);
          a2 -= 3;
        }
        while (v57-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (int *)(v10 + 12 * (v15 >> 1));
    if ((unint64_t)v14 < 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v17, (int *)v10, v65);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)v10, v17, v65);
      uint64_t v18 = v10 + 12 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v10 + 12), (int *)(v18 - 12), a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v10 + 24), (int *)(v10 + 12 + 12 * v16), a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)(v18 - 12), v17, (int *)(v10 + 12 + 12 * v16));
      int v19 = *(_DWORD *)v10;
      *(_DWORD *)uint64_t v10 = *v17;
      int *v17 = v19;
      uint64_t v20 = *(void *)(v10 + 4);
      *(void *)(v10 + 4) = *(void *)(v18 + 4);
      *(void *)(v18 + 4) = v20;
      if (a5) {
        goto LABEL_15;
      }
    }
    int v21 = *(_DWORD *)(v10 - 12);
    if (v21 >= *(_DWORD *)v10 && (*(_DWORD *)v10 < v21 || *(void *)(v10 - 8) >= *(void *)(v10 + 4)))
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v10, a2);
      unint64_t v11 = result;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>((int *)v10, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v10, v22);
    unint64_t v11 = v22 + 12;
    BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(v22 + 12, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (int *)v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_18:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,false>(v10, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 12;
      goto LABEL_20;
    }
  }
  unint64_t v39 = (int *)(v10 + 12);
  BOOL v41 = (int *)v10 == a2 || v39 == a2;
  if (a5)
  {
    if (v41) {
      return result;
    }
    uint64_t v42 = 0;
    uint64_t v43 = v10;
LABEL_50:
    uint64_t v44 = v43;
    uint64_t v43 = (uint64_t)v39;
    int v45 = *(_DWORD *)(v44 + 12);
    int v46 = *(_DWORD *)v44;
    if (v45 >= *(_DWORD *)v44)
    {
      if (v46 < v45) {
        goto LABEL_49;
      }
      uint64_t v47 = *(void *)(v44 + 16);
      uint64_t v48 = *(void *)(v44 + 4);
      if (v47 >= v48) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v47 = *(void *)(v44 + 16);
      uint64_t v48 = *(void *)(v44 + 4);
    }
    *(_DWORD *)(v44 + 12) = v46;
    *(void *)(v43 + 4) = v48;
    uint64_t v49 = v10;
    if (v44 == v10) {
      goto LABEL_48;
    }
    uint64_t v50 = v42;
    while (1)
    {
      int v53 = *(_DWORD *)(v10 + v50 - 12);
      if (v45 >= v53)
      {
        if (v53 < v45)
        {
          uint64_t v49 = v10 + v50;
          goto LABEL_48;
        }
        uint64_t v51 = *(void *)(v10 + v50 - 8);
        if (v47 >= v51)
        {
          uint64_t v49 = v44;
LABEL_48:
          *(_DWORD *)uint64_t v49 = v45;
          *(void *)(v49 + 4) = v47;
LABEL_49:
          unint64_t v39 = (int *)(v43 + 12);
          v42 += 12;
          if ((int *)(v43 + 12) == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v51 = *(void *)(v10 + v50 - 8);
      }
      v44 -= 12;
      uint64_t v52 = v10 + v50;
      *(_DWORD *)uint64_t v52 = v53;
      *(void *)(v52 + 4) = v51;
      v50 -= 12;
      if (!v50)
      {
        uint64_t v49 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v41)
  {
    for (uint64_t i = v10 + 4; ; i += 12)
    {
      uint64_t v60 = v10;
      uint64_t v10 = (uint64_t)v39;
      int v61 = *(_DWORD *)(v60 + 12);
      int v62 = *(_DWORD *)v60;
      if (v61 < *(_DWORD *)v60) {
        break;
      }
      if (v62 >= v61)
      {
        uint64_t v63 = *(void *)(v60 + 16);
        if (v63 < *(void *)(v60 + 4)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      unint64_t v39 = (int *)(v10 + 12);
      if ((int *)(v10 + 12) == a2) {
        return result;
      }
    }
    uint64_t v63 = *(void *)(v60 + 16);
LABEL_84:
    for (uint64_t j = i; ; j -= 12)
    {
      *(_DWORD *)(j + 8) = v62;
      *(void *)(j + 12) = *(void *)j;
      int v62 = *(_DWORD *)(j - 16);
      if (v61 >= v62 && (v62 < v61 || v63 >= *(void *)(j - 12))) {
        break;
      }
    }
    *(_DWORD *)(j - 4) = v61;
    *(void *)uint64_t j = v63;
    goto LABEL_79;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *(void *)(a2 + 1) < *(void *)(a1 + 1))
  {
    int v5 = *a3;
    if (*a3 < v3)
    {
      uint64_t v6 = *(void *)(a3 + 1);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      uint64_t v16 = *(void *)(a1 + 1);
      *(void *)(a1 + 1) = v6;
      *(void *)(a3 + 1) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      uint64_t v6 = *(void *)(a3 + 1);
      uint64_t v10 = *(void *)(a2 + 1);
      if (v6 < v10) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    uint64_t v17 = *(void *)(a1 + 1);
    *(void *)(a1 + 1) = v10;
    *(void *)(a2 + 1) = v17;
    int v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      uint64_t v19 = *(void *)(a3 + 1);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *(void *)(a2 + 1) = v19;
    uint64_t result = 2;
    *(void *)(a3 + 1) = v17;
    return result;
  }
  int v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7) {
      return 0;
    }
    uint64_t v9 = *(void *)(a3 + 1);
    uint64_t v8 = *(void *)(a2 + 1);
    if (v9 >= v8) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 1);
    uint64_t v9 = *(void *)(a3 + 1);
  }
  *a2 = v7;
  *a3 = v3;
  *(void *)(a2 + 1) = v9;
  *(void *)(a3 + 1) = v8;
  int v11 = *a2;
  int v12 = *a1;
  if (*a2 < *a1)
  {
    uint64_t v13 = *(void *)(a1 + 1);
    uint64_t v14 = *(void *)(a2 + 1);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *(void *)(a1 + 1) = v14;
    uint64_t result = 2;
    *(void *)(a2 + 1) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    uint64_t v14 = *(void *)(a2 + 1);
    uint64_t v13 = *(void *)(a1 + 1);
    if (v14 < v13) {
      goto LABEL_14;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2 = *a1;
  uint64_t v3 = *(void *)(a1 + 1);
  int v4 = *(a2 - 3);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((void *)a2 - 1)))
  {
    for (uint64_t i = a1 + 3; i < a2 && v2 >= *i && (*i < v2 || v3 >= *(void *)(i + 1)); i += 3)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      int v7 = i[3];
      i += 3;
      int v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *(void *)(i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 3; v2 < v4 || v4 >= v2 && v3 < *(void *)(a2 + 1); a2 -= 3)
    {
      int v8 = *(a2 - 3);
      int v4 = v8;
    }
  }
  if (i < a2)
  {
    int v9 = *i;
    int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      int v11 = i[3];
      i += 3;
      int v9 = v11;
      uint64_t v12 = *((void *)i - 1);
      *((void *)i - 1) = *(void *)(a2 + 1);
      *(void *)(a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(void *)(i + 1)))
      {
        int v13 = i[3];
        i += 3;
        int v9 = v13;
      }
      do
      {
        do
        {
          int v14 = *(a2 - 3);
          a2 -= 3;
          int v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(void *)(a2 + 1));
    }
    while (i < a2);
  }
  if (i - 3 != a1)
  {
    *a1 = *(i - 3);
    *(void *)(a1 + 1) = *((void *)i - 1);
  }
  *(i - 3) = v2;
  *((void *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  uint64_t v4 = *(void *)(a1 + 1);
  while (1)
  {
    int v5 = a1[v2 + 3];
    if (v5 >= v3 && (v3 < v5 || *(void *)&a1[v2 + 4] >= v4)) {
      break;
    }
    v2 += 3;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 3];
  if (v2 * 4)
  {
    do
    {
      int v8 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
      int v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(void *)(a2 + 4) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        int v10 = *(_DWORD *)(a2 - 12);
        a2 -= 12;
        int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(void *)(a2 + 4) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = v6;
  }
  else
  {
    int v12 = *(_DWORD *)a2;
    unint64_t v13 = v6;
    unint64_t v14 = a2;
    do
    {
      *(_DWORD *)unint64_t v13 = v12;
      *(_DWORD *)unint64_t v14 = v5;
      uint64_t v15 = *(void *)(v13 + 4);
      *(void *)(v13 + 4) = *(void *)(v14 + 4);
      *(void *)(v14 + 4) = v15;
      do
      {
        do
        {
          int v16 = *(_DWORD *)(v13 + 12);
          v13 += 12;
          int v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(void *)(v13 + 4) < v4);
      do
      {
        int v17 = *(_DWORD *)(v14 - 12);
        v14 -= 12;
        int v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(void *)(v14 + 4) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 12) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 12);
    *(void *)(a1 + 1) = *(void *)(v13 - 8);
  }
  *(_DWORD *)(v13 - 12) = v3;
  *(void *)(v13 - 8) = v4;
  return v13 - 12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v19 = *(_DWORD *)(a2 - 12);
      int v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        uint64_t v21 = *(void *)(a1 + 4);
        uint64_t v22 = *(void *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 12) = v20;
        *(void *)(a1 + 4) = v22;
        *(void *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        uint64_t v22 = *(void *)(a2 - 8);
        uint64_t v21 = *(void *)(a1 + 4);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      int v23 = *(_DWORD *)(a2 - 12);
      int v24 = *(_DWORD *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        uint64_t v26 = *(void *)(a2 - 8);
        uint64_t v25 = *(void *)(a1 + 28);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 28);
        uint64_t v26 = *(void *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a2 - 12) = v24;
      *(void *)(a1 + 28) = v26;
      *(void *)(a2 - 8) = v25;
      int v27 = *(_DWORD *)(a1 + 24);
      int v28 = *(_DWORD *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        uint64_t v30 = *(void *)(a1 + 28);
        uint64_t v29 = *(void *)(a1 + 16);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 16);
        uint64_t v30 = *(void *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 12) = v27;
      *(_DWORD *)(a1 + 24) = v28;
      *(void *)(a1 + 16) = v30;
      *(void *)(a1 + 28) = v29;
      int v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        uint64_t v32 = *(void *)(a1 + 4);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 12) = v31;
        *(void *)(a1 + 4) = v30;
        BOOL result = 1;
        *(void *)(a1 + 16) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        uint64_t v32 = *(void *)(a1 + 4);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(a1, a1 + 12, a1 + 24, a1 + 36, (int *)(a2 - 12));
      return 1;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        int v11 = *(_DWORD *)v7;
        int v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          uint64_t v13 = *(void *)(v7 + 4);
          uint64_t v14 = *(void *)(v6 + 4);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v13 = *(void *)(v7 + 4);
          uint64_t v14 = *(void *)(v6 + 4);
        }
        *(_DWORD *)uint64_t v7 = v12;
        *(void *)(v7 + 4) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          int v18 = *(_DWORD *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            uint64_t v16 = *(void *)(v17 + 16);
LABEL_13:
            v6 -= 12;
            *(_DWORD *)(v17 + 24) = v18;
            *(void *)(a1 + v15 + 28) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          uint64_t v16 = *(void *)(a1 + v15 + 16);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(_DWORD *)uint64_t v10 = v11;
        *(void *)(v10 + 4) = v13;
        if (++v9 == 8) {
          return v7 + 12 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>((int *)a1, (int *)a2, (int *)a3);
  int v11 = *(_DWORD *)a4;
  int v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v12 < v11) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)(a4 + 4);
    uint64_t v13 = *(void *)(a3 + 4);
    if (v14 >= v13) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 4);
    uint64_t v14 = *(void *)(a4 + 4);
  }
  *(_DWORD *)a3 = v11;
  *(_DWORD *)a4 = v12;
  *(void *)(a3 + 4) = v14;
  *(void *)(a4 + 4) = v13;
  int v15 = *(_DWORD *)a3;
  int v16 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v16 < v15) {
      goto LABEL_16;
    }
    uint64_t v18 = *(void *)(a3 + 4);
    uint64_t v17 = *(void *)(a2 + 4);
    if (v18 >= v17) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 4);
    uint64_t v18 = *(void *)(a3 + 4);
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)a3 = v16;
  *(void *)(a2 + 4) = v18;
  *(void *)(a3 + 4) = v17;
  int v19 = *(_DWORD *)a2;
  int v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    uint64_t v21 = *(void *)(a1 + 4);
    uint64_t v22 = *(void *)(a2 + 4);
LABEL_7:
    *(_DWORD *)a1 = v19;
    *(_DWORD *)a2 = v20;
    *(void *)(a1 + 4) = v22;
    *(void *)(a2 + 4) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    uint64_t v22 = *(void *)(a2 + 4);
    uint64_t v21 = *(void *)(a1 + 4);
    if (v22 < v21) {
      goto LABEL_7;
    }
  }
LABEL_16:
  int v23 = *a5;
  int v24 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v24 < v23) {
      return result;
    }
    uint64_t v26 = *(void *)(a5 + 1);
    uint64_t v25 = *(void *)(a4 + 4);
    if (v26 >= v25) {
      return result;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a4 + 4);
    uint64_t v26 = *(void *)(a5 + 1);
  }
  *(_DWORD *)a4 = v23;
  *a5 = v24;
  *(void *)(a4 + 4) = v26;
  *(void *)(a5 + 1) = v25;
  int v27 = *(_DWORD *)a4;
  int v28 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v28 < v27) {
      return result;
    }
    uint64_t v30 = *(void *)(a4 + 4);
    uint64_t v29 = *(void *)(a3 + 4);
    if (v30 >= v29) {
      return result;
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a3 + 4);
    uint64_t v30 = *(void *)(a4 + 4);
  }
  *(_DWORD *)a3 = v27;
  *(_DWORD *)a4 = v28;
  *(void *)(a3 + 4) = v30;
  *(void *)(a4 + 4) = v29;
  int v31 = *(_DWORD *)a3;
  int v32 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v32 < v31) {
      return result;
    }
    uint64_t v34 = *(void *)(a3 + 4);
    uint64_t v33 = *(void *)(a2 + 4);
    if (v34 >= v33) {
      return result;
    }
  }
  else
  {
    uint64_t v33 = *(void *)(a2 + 4);
    uint64_t v34 = *(void *)(a3 + 4);
  }
  *(_DWORD *)a2 = v31;
  *(_DWORD *)a3 = v32;
  *(void *)(a2 + 4) = v34;
  *(void *)(a3 + 4) = v33;
  int v35 = *(_DWORD *)a2;
  int v36 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    uint64_t v37 = *(void *)(a1 + 4);
    uint64_t v38 = *(void *)(a2 + 4);
LABEL_24:
    *(_DWORD *)a1 = v35;
    *(_DWORD *)a2 = v36;
    *(void *)(a1 + 4) = v38;
    *(void *)(a2 + 4) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    uint64_t v38 = *(void *)(a2 + 4);
    uint64_t v37 = *(void *)(a1 + 4);
    if (v38 < v37) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        int v7 = v6[3];
        if (*v6 < v7 || v7 >= *v6 && *(void *)(result + 12 * v5 + 4) < *((void *)v6 + 2))
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      int v8 = *v6;
      int v9 = *a4;
      if (*v6 >= *a4)
      {
        if (v9 >= v8)
        {
          uint64_t v11 = *(void *)(v6 + 1);
          uint64_t v10 = *(void *)(a4 + 1);
          if (v11 < v10) {
            return result;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(a4 + 1);
          uint64_t v11 = *(void *)(v6 + 1);
        }
        *a4 = v8;
        *(void *)(a4 + 1) = v11;
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v13 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            int v12 = (int *)(result + 12 * v5);
            uint64_t v14 = v13 + 2;
            if (v14 < a3)
            {
              int v15 = v12[3];
              if (*v12 < v15 || v15 >= *v12 && *(void *)(result + 12 * v5 + 4) < *((void *)v12 + 2))
              {
                v12 += 3;
                uint64_t v5 = v14;
              }
            }
            int v16 = *v12;
            if (*v12 < v9) {
              break;
            }
            uint64_t v17 = *(void *)(v12 + 1);
            if (v9 >= v16 && v17 < v10) {
              break;
            }
            *uint64_t v6 = v16;
            *(void *)(v6 + 1) = v17;
            uint64_t v6 = v12;
            if (v4 < v5) {
              goto LABEL_14;
            }
          }
        }
        int v12 = v6;
LABEL_14:
        int *v12 = v9;
        *(void *)(v12 + 1) = v10;
      }
    }
  }
  return result;
}

int *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> *>(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    int v5 = *result;
    uint64_t v6 = *(void *)(result + 1);
    int v7 = result;
    do
    {
      int v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 3 * v4 + 3;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        int v12 = v7[3];
        if (*v7 < v12 || v12 >= *v7 && *(void *)&v8[3 * v9 + 1] < *((void *)v7 + 2))
        {
          v7 += 3;
          uint64_t v4 = v11;
        }
      }
      *int v8 = *v7;
      *(void *)(v8 + 1) = *(void *)(v7 + 1);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (int *)(a2 - 12))
    {
      int *v7 = v5;
      *(void *)(v7 + 1) = v6;
      return result;
    }
    int *v7 = *(_DWORD *)(a2 - 12);
    *(void *)(v7 + 1) = *(void *)(a2 - 8);
    *(_DWORD *)(a2 - 12) = v5;
    *(void *)(a2 - 8) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 12;
    if (v13 >= 13)
    {
      unint64_t v14 = v13 / 0xCuLL - 2;
      unint64_t v15 = v14 >> 1;
      int v16 = &result[3 * (v14 >> 1)];
      int v17 = *v16;
      int v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        uint64_t v20 = *(void *)&result[3 * v15 + 1];
        uint64_t v19 = *(void *)(v7 + 1);
        if (v20 >= v19) {
          return result;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v7 + 1);
        uint64_t v20 = *(void *)&result[3 * v15 + 1];
      }
      int *v7 = v17;
      *(void *)(v7 + 1) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          uint64_t v21 = &result[3 * v15];
          int v24 = *v21;
          if (*v21 < v18)
          {
            uint64_t v22 = *(void *)&result[3 * v15 + 1];
          }
          else
          {
            if (v18 < v24) {
              break;
            }
            uint64_t v22 = *(void *)&result[3 * v15 + 1];
            if (v22 >= v19) {
              break;
            }
          }
          *int v16 = v24;
          *(void *)(v16 + 1) = v22;
          int v16 = &result[3 * v15];
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v21 = v16;
LABEL_19:
      *uint64_t v21 = v18;
      *(void *)(v21 + 1) = v19;
    }
  }
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  int v8 = (char *)operator new(v2 + 9 + 8 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = a1[2];
  a1[5] = (char *)(v9 - (void)v10);
  uint64_t v11 = a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)uint64_t v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    unint64_t v23 = a1[4];
    if (!v23) {
      return;
    }
LABEL_21:
    *((void *)v23 + 4) = v13 >> 3;
    *((void *)v23 + 2) = 0;
    return;
  }
  int v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[(void)v4] & 0x80000000) == 0)
    {
      int v17 = &v5[8 * (void)v12];
      unint64_t v18 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v17));
      uint64_t v19 = *a1;
      uint64_t v20 = a1[3];
      unint64_t v21 = ((v18 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v20;
      unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
      if (v22)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v21 = (v14 + v21) & (unint64_t)v20;
          unint64_t v22 = *(void *)&v19[v21] & (~*(void *)&v19[v21] << 7) & 0x8080808080808080;
        }
        while (!v22);
      }
      unint64_t v15 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v20;
      v13 += v14;
      char v16 = v18 & 0x7F;
      v19[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(void *)&a1[1][8 * v15] = *(void *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  unint64_t v23 = a1[4];
  if (v23) {
    goto LABEL_21;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 16;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v67 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = a2 - v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v27 = *(double *)(a2 - 16);
          double v28 = *(double *)v10;
          if (v27 >= *(double *)v10)
          {
            if (v28 < v27) {
              return result;
            }
            int v30 = *(_DWORD *)(a2 - 8);
            int v29 = *(_DWORD *)(v10 + 8);
            if (v30 >= v29) {
              return result;
            }
          }
          else
          {
            int v29 = *(_DWORD *)(v10 + 8);
            int v30 = *(_DWORD *)(a2 - 8);
          }
          *(double *)unint64_t v10 = v27;
          *(double *)(a2 - 16) = v28;
          *(_DWORD *)(v10 + 8) = v30;
          *(_DWORD *)(a2 - 8) = v29;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v11);
        case 4uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v10 + 32);
          double v31 = *(double *)(a2 - 16);
          double v32 = *(double *)(v10 + 32);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              return result;
            }
            int v34 = *(_DWORD *)(a2 - 8);
            int v33 = *(_DWORD *)(v10 + 40);
            if (v34 >= v33) {
              return result;
            }
          }
          else
          {
            int v33 = *(_DWORD *)(v10 + 40);
            int v34 = *(_DWORD *)(a2 - 8);
          }
          *(double *)(v10 + 32) = v31;
          *(double *)(a2 - 16) = v32;
          *(_DWORD *)(v10 + 40) = v34;
          *(_DWORD *)(a2 - 8) = v33;
          double v35 = *(double *)(v10 + 32);
          double v36 = *(double *)(v10 + 16);
          if (v35 >= v36)
          {
            if (v36 < v35) {
              return result;
            }
            int v38 = *(_DWORD *)(v10 + 40);
            int v37 = *(_DWORD *)(v10 + 24);
            if (v38 >= v37) {
              return result;
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 24);
            int v38 = *(_DWORD *)(v10 + 40);
          }
          *(double *)(v10 + 16) = v35;
          *(double *)(v10 + 32) = v36;
          *(_DWORD *)(v10 + 24) = v38;
          *(_DWORD *)(v10 + 40) = v37;
          double v39 = *(double *)v10;
          if (v35 >= *(double *)v10)
          {
            if (v39 < v35) {
              return result;
            }
            int v40 = *(_DWORD *)(v10 + 8);
            if (v38 >= v40) {
              return result;
            }
          }
          else
          {
            int v40 = *(_DWORD *)(v10 + 8);
          }
          *(double *)unint64_t v10 = v35;
          *(double *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 8) = v38;
          *(_DWORD *)(v10 + 24) = v40;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, v10 + 16, v10 + 32, v10 + 48, v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v56 = (v15 - 2) >> 1;
        unint64_t v57 = v56 + 1;
        uint64_t v58 = v10 + 16 * v56;
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, a3, v14 >> 4, v58);
          v58 -= 16;
          --v57;
        }
        while (v57);
        unint64_t v59 = (unint64_t)v14 >> 4;
        do
        {
          uint64_t result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t *)v10, a2, a3, v59);
          a2 -= 16;
        }
        while (v59-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = (uint64_t *)(v10 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>((uint64_t)v18, v10, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10, (uint64_t)v18, v11);
      uint64_t v19 = v11;
      unint64_t v20 = v10 + 16 * v17;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10 + 16, v20 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v10 + 32, v10 + 16 + 16 * v17, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(v20 - 16, (uint64_t)v18, v10 + 16 + 16 * v17);
      uint64_t v21 = *(void *)v10;
      *(void *)unint64_t v10 = *v18;
      *unint64_t v18 = v21;
      int v22 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v20 + 8);
      *(_DWORD *)(v20 + 8) = v22;
      uint64_t v11 = v19;
      a5 = v67;
      if (v67) {
        goto LABEL_15;
      }
    }
    double v23 = *(double *)(v10 - 16);
    if (v23 >= *(double *)v10 && (*(double *)v10 < v23 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 8)))
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v10, a2);
      unint64_t v12 = result;
LABEL_20:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *,std::__less<void,void> &>(v10, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v10, v24);
    unint64_t v12 = v24 + 16;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v24 + 16, a2);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_18:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 16;
      goto LABEL_20;
    }
  }
  unint64_t v41 = v10 + 16;
  BOOL v43 = v10 == a2 || v41 == a2;
  if (a5)
  {
    if (v43) {
      return result;
    }
    uint64_t v44 = 0;
    unint64_t v45 = v10;
LABEL_50:
    unint64_t v46 = v45;
    unint64_t v45 = v41;
    double v47 = *(double *)(v46 + 16);
    double v48 = *(double *)v46;
    if (v47 >= *(double *)v46)
    {
      if (v48 < v47) {
        goto LABEL_49;
      }
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
      if (v49 >= v50) {
        goto LABEL_49;
      }
    }
    else
    {
      int v49 = *(_DWORD *)(v46 + 24);
      int v50 = *(_DWORD *)(v46 + 8);
    }
    *(double *)(v46 + 16) = v48;
    *(_DWORD *)(v45 + 8) = v50;
    unint64_t v51 = v10;
    if (v46 == v10) {
      goto LABEL_48;
    }
    uint64_t v52 = v44;
    while (1)
    {
      double v55 = *(double *)(v10 + v52 - 16);
      if (v47 >= v55)
      {
        if (v55 < v47)
        {
          unint64_t v51 = v10 + v52;
          goto LABEL_48;
        }
        int v53 = *(_DWORD *)(v10 + v52 - 8);
        if (v49 >= v53)
        {
          unint64_t v51 = v46;
LABEL_48:
          *(double *)unint64_t v51 = v47;
          *(_DWORD *)(v51 + 8) = v49;
LABEL_49:
          unint64_t v41 = v45 + 16;
          v44 += 16;
          if (v45 + 16 == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v53 = *(_DWORD *)(v10 + v52 - 8);
      }
      v46 -= 16;
      uint64_t v54 = v10 + v52;
      *(double *)uint64_t v54 = v55;
      *(_DWORD *)(v54 + 8) = v53;
      v52 -= 16;
      if (!v52)
      {
        unint64_t v51 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v43)
  {
    for (unint64_t i = v10 + 8; ; i += 16)
    {
      unint64_t v62 = v10;
      unint64_t v10 = v41;
      double v63 = *(double *)(v62 + 16);
      double v64 = *(double *)v62;
      if (v63 < *(double *)v62) {
        break;
      }
      if (v64 >= v63)
      {
        int v65 = *(_DWORD *)(v62 + 24);
        if (v65 < *(_DWORD *)(v62 + 8)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      v41 += 16;
      if (v10 + 16 == a2) {
        return result;
      }
    }
    int v65 = *(_DWORD *)(v62 + 24);
LABEL_84:
    for (unint64_t j = i; ; j -= 16)
    {
      *(double *)(j + 8) = v64;
      *(_DWORD *)(j + 16) = *(_DWORD *)j;
      double v64 = *(double *)(j - 24);
      if (v63 >= v64 && (v64 < v63 || v65 >= *(_DWORD *)(j - 16))) {
        break;
      }
    }
    *(double *)(j - 8) = v63;
    *(_DWORD *)unint64_t j = v65;
    goto LABEL_79;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v19 = *(double *)(a2 - 16);
      double v20 = *(double *)a1;
      if (v19 < *(double *)a1)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 8);
LABEL_24:
        *(double *)a1 = v19;
        *(double *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v22 = *(_DWORD *)(a2 - 8);
        int v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      double v23 = *(double *)(a2 - 16);
      double v24 = *(double *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v26 = *(_DWORD *)(a2 - 8);
        int v25 = *(_DWORD *)(a1 + 40);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(a2 - 8);
      }
      *(double *)(a1 + 32) = v23;
      *(double *)(a2 - 16) = v24;
      *(_DWORD *)(a1 + 40) = v26;
      *(_DWORD *)(a2 - 8) = v25;
      double v27 = *(double *)(a1 + 32);
      double v28 = *(double *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v30 = *(_DWORD *)(a1 + 40);
        int v29 = *(_DWORD *)(a1 + 24);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 24);
        int v30 = *(_DWORD *)(a1 + 40);
      }
      *(double *)(a1 + 16) = v27;
      *(double *)(a1 + 32) = v28;
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 40) = v29;
      double v31 = *(double *)a1;
      if (v27 < *(double *)a1)
      {
        int v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(double *)a1 = v27;
        *(double *)(a1 + 16) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        int v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> *>(a1, a1 + 16, a1 + 32);
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        double v11 = *(double *)v7;
        double v12 = *(double *)v6;
        if (*(double *)v7 >= *(double *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
        }
        *(double *)uint64_t v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          double v18 = *(double *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            int v16 = *(_DWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(double *)(v17 + 32) = v18;
            *(_DWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(double *)uint64_t v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

void google::MakeCheckOpString<long long,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCE28CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::ImpliedBounds::~ImpliedBounds(operations_research::sat::ImpliedBounds *this)
{
  if (*_MergedGlobals_11[0] >= 1
    && (_MergedGlobals_11[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_11, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 21);
    google::LogMessage::stream((google::LogMessage *)v17);
    unint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" enqueued deductions.", 21);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  if (*off_26AECFFE8[0] >= 1
    && (off_26AECFFE8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFFE8, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 22);
    google::LogMessage::stream((google::LogMessage *)v17);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" implied bounds stored.", 23);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  if (*off_26AECFFF0[0] >= 1
    && (off_26AECFFF0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AECFFF0, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 23);
    google::LogMessage::stream((google::LogMessage *)v17);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" implied bounds with view stored.", 33);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
  char v5 = (void *)*((void *)this + 29);
  if (v5)
  {
    *((void *)this + 30) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 20) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 16);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 17);
    uint64_t v10 = (void *)*((void *)this + 16);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 17);
      do
      {
        int v13 = *(void **)(v11 - 24);
        v11 -= 24;
        double v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v8;
    operator delete(v10);
  }
  int v14 = (void *)*((void *)this + 13);
  if (v14)
  {
    *((void *)this + 14) = v14;
    operator delete(v14);
  }
  if (*((void *)this + 10))
  {
    operator delete(*((void **)this + 7));
    *((void *)this + 12) = 0;
    *((void *)this + 7) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    *((void *)this + 10) = 0;
  }
  uint64_t v15 = (void *)*((void *)this + 11);
  if (v15) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
  }
  int v16 = (void *)*((void *)this + 4);
  if (v16)
  {
    *((void *)this + 5) = v16;
    operator delete(v16);
  }
}

void operations_research::sat::ImpliedBounds::Add(uint64_t a1, int a2, uint64_t a3, int a4)
{
  *(void *)int v119 = a3;
  *(_DWORD *)&v119[8] = a4;
  if (!*(unsigned char *)(*(void *)a1 + 545)) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = (uint64_t *)(a1 + 152);
  unint64_t v9 = (*(void *)(a1 + 160) - v7) >> 3;
  if ((int)a3 >= (int)v9)
  {
    unint64_t v10 = (int)a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9) {
        *(void *)(a1 + 160) = v7 + 8 * v10;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 152, v10 - v9, (uint64_t *)&operations_research::sat::kMinIntegerValue);
    }
    if (*(_DWORD *)(a1 + 176) > (int)v10)
    {
      uint64_t v11 = *(_DWORD **)(a1 + 232);
      double v12 = *(_DWORD **)(a1 + 240);
      if (v11 == v12)
      {
        int v13 = 0;
      }
      else
      {
        int v13 = 0;
        int v14 = *(_DWORD **)(a1 + 232);
        do
        {
          if (*v14 <= (int)a3) {
            v11[v13++] = *v14;
          }
          ++v14;
        }
        while (v14 != v12);
      }
      unint64_t v15 = v12 - v11;
      if (v13 <= v15)
      {
        if (v13 < v15) {
          *(void *)(a1 + 240) = &v11[v13];
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 232), v13 - v15);
      }
    }
    int v16 = v10 & ~((int)v10 >> 31);
    *(_DWORD *)(a1 + 176) = v16;
    uint64_t v17 = *(void *)(a1 + 184);
    uint64_t v18 = *(void *)(a1 + 192);
    unint64_t v19 = (v16 + 63) >> 6;
    uint64_t v117 = 0;
    unint64_t v20 = (v18 - v17) >> 3;
    if (v19 <= v20)
    {
      if (v19 < v20) {
        *(void *)(a1 + 192) = v17 + 8 * v19;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 184, v19 - v20, &v117);
    }
    uint64_t v7 = *v8;
  }
  uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 144);
  int v22 = (uint64_t *)(v21 + 20 * (int)a3);
  uint64_t v23 = *v22;
  if (*(void *)(v7 + 8 * (int)a3) > *v22) {
    uint64_t v23 = *(void *)(v7 + 8 * (int)a3);
  }
  *(void *)(v7 + 8 * (int)a3) = v23;
  uint64_t v24 = *(void *)&v119[4];
  if (*(uint64_t *)&v119[4] <= v23) {
    return;
  }
  int v25 = a3;
  if (*v22 + 1 >= -*(void *)(v21 + 20 * (int)(a3 ^ 1))) {
    return;
  }
  uint64_t v116 = a3 << 32;
  uint64_t v117 = (a3 << 32) | a2;
  uint64_t v118 = *(void *)&v119[4];
  unint64_t v26 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((uint64_t *)(a1 + 56), (int *)&v117);
  if (v27)
  {
    double v28 = (void *)(*(void *)(a1 + 64) + 16 * v26);
    void *v28 = v117;
    v28[1] = v118;
    unint64_t v29 = *(void *)(a1 + 56);
    uint64_t v30 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = v30 + 16 * v26;
    uint64_t v33 = *(void *)(v31 + 8);
    int v32 = (void *)(v31 + 8);
    if (v33 >= v24) {
      return;
    }
    unint64_t v29 = *(void *)(a1 + 56);
    *int v32 = v24;
  }
  uint64_t v34 = 0;
  uint64_t v35 = a2 ^ 1;
  unint64_t v36 = (int)a3
      + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v35)
         * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                            * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                             + v35)));
  unint64_t v37 = ((v36 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v36);
  unint64_t v38 = (v37 >> 7) ^ (v29 >> 12);
  uint64_t v39 = *(void *)(a1 + 80);
  uint64_t v40 = 0x101010101010101 * (v37 & 0x7F);
  while (1)
  {
    uint64_t v41 = v38 & v39;
    uint64_t v42 = *(void *)(v29 + v41);
    unint64_t v43 = ((v42 ^ v40) - 0x101010101010101) & ~(v42 ^ v40) & 0x8080808080808080;
    if (v43) {
      break;
    }
LABEL_38:
    if ((v42 & (~v42 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_62;
    }
    v34 += 8;
    unint64_t v38 = v34 + v41;
  }
  while (1)
  {
    unint64_t v44 = (v41 + (__clz(__rbit64(v43)) >> 3)) & v39;
    uint64_t v45 = v30 + 16 * v44;
    if (*(_DWORD *)v45 == v35 && *(_DWORD *)(v45 + 4) == a3) {
      break;
    }
    v43 &= v43 - 1;
    if (!v43) {
      goto LABEL_38;
    }
  }
  if (v44 == v39)
  {
LABEL_62:
    uint64_t v68 = *(void *)(a1 + 24);
    uint64_t v69 = *(void *)(v68 + 160);
    unint64_t v70 = (unint64_t)(*(void *)(v68 + 168) - v69) >> 2;
    if (a2 < (int)v70) {
      goto LABEL_63;
    }
    goto LABEL_95;
  }
  double v47 = (char *)(v29 + v44);
  uint64_t v48 = *(void *)(v45 + 8);
  uint64_t v49 = *v8;
  if (v48 > *(void *)(*v8 + 8 * (int)a3))
  {
    int v115 = (void *)(v29 + v44);
    int v50 = (unint64_t *)&v119[4];
    if (v48 < v24) {
      int v50 = (unint64_t *)(v45 + 8);
    }
    unint64_t v51 = *v50;
    ++*(void *)(a1 + 256);
    *(void *)(v49 + 8 * (int)a3) = v51;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)(a1 + 176), a3);
    if (*operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__ >= 1
      && (operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::ImpliedBounds::Add(operations_research::sat::Literal,operations_research::sat::IntegerLiteral)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/implied_bounds.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v117, (google::glog_internal_namespace_ *)"./ortools/sat/implied_bounds.cc", 92);
      uint64_t v52 = (void *)google::LogMessage::stream((google::LogMessage *)&v117);
      int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Deduction old: ", 15);
      unint64_t v54 = *(void *)(*(void *)(*(void *)(a1 + 16) + 144) + 20 * (int)a3);
      LODWORD(v120[0]) = a3;
      *(uint64_t *)((char *)v120 + 4) = v54;
      double v55 = operations_research::sat::operator<<(v53, v120[0], (char *)HIDWORD(v54));
      unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" new: ", 6);
      LODWORD(v120[0]) = a3;
      *(uint64_t *)((char *)v120 + 4) = v51;
      operations_research::sat::operator<<(v56, v120[0], (char *)HIDWORD(v51));
      google::LogMessage::~LogMessage((google::LogMessage *)&v117);
    }
    if (*(void *)(v45 + 8) == v51) {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase((void *)(a1 + 56), v115);
    }
    if (v24 == v51)
    {
      uint64_t v117 = (a3 << 32) | a2;
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>((uint64_t *)(a1 + 56), (int *)&v117);
      return;
    }
    goto LABEL_62;
  }
  --*(void *)(a1 + 72);
  uint64_t v57 = (v44 - 8) & v39;
  uint64_t v58 = *(void *)(v29 + v44);
  uint64_t v59 = *(void *)(v29 + v57);
  unint64_t v60 = v58 & (~v58 << 6) & 0x8080808080808080;
  unint64_t v61 = v59 & (~v59 << 6) & 0x8080808080808080;
  if (v61) {
    BOOL v62 = v60 == 0;
  }
  else {
    BOOL v62 = 1;
  }
  if (v62)
  {
    uint64_t v66 = 0;
    char v63 = -2;
  }
  else
  {
    unsigned int v64 = (__clz(v61) >> 3) + (__clz(__rbit64(v60)) >> 3);
    BOOL v65 = v64 >= 8;
    uint64_t v66 = v64 < 8;
    if (v65) {
      char v63 = -2;
    }
    else {
      char v63 = 0x80;
    }
  }
  *double v47 = v63;
  *(unsigned char *)((*(void *)(a1 + 80) & (v44 - 8)) + (*(void *)(a1 + 80) & 7) + *(void *)(a1 + 56) + 1) = v63;
  uint64_t v67 = *(void *)(a1 + 88);
  *(void *)(a1 + 96) += v66;
  if (!v67) {
    goto LABEL_62;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 16), 1uLL, memory_order_relaxed);
  uint64_t v99 = *(void *)(a1 + 24);
  uint64_t v69 = *(void *)(v99 + 160);
  unint64_t v70 = (unint64_t)(*(void *)(v99 + 168) - v69) >> 2;
  if (a2 < (int)v70)
  {
LABEL_63:
    if (*(_DWORD *)(v69 + 4 * a2) != -1)
    {
      uint64_t v72 = *(void *)(a1 + 128);
      uint64_t v71 = *(void *)(a1 + 136);
      uint64_t v73 = (v71 - v72) >> 3;
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * v73;
      if ((int)a3 >= -1431655765 * (int)v73)
      {
        unint64_t v75 = (v116 + 0x100000000) >> 32;
        if (v75 <= v74)
        {
          if (v75 < v74)
          {
            uint64_t v76 = v72 + 24 * (int)v75;
            if (v71 != v76)
            {
              uint64_t v77 = *(void *)(a1 + 136);
              do
              {
                uint64_t v79 = *(void **)(v77 - 24);
                v77 -= 24;
                int v78 = v79;
                if (v79)
                {
                  *(void *)(v71 - 16) = v78;
                  operator delete(v78);
                }
                uint64_t v71 = v77;
              }
              while (v77 != v76);
            }
            *(void *)(a1 + 136) = v76;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 128, v75 - v74);
        }
      }
      ++*(void *)(a1 + 264);
      uint64_t v80 = *(void *)(a1 + 128);
      uint64_t v81 = *(void *)(*(void *)(a1 + 24) + 160);
      if (a2 >= (int)((unint64_t)(*(void *)(*(void *)(a1 + 24) + 168) - v81) >> 2)) {
        int v82 = -1;
      }
      else {
        int v82 = *(_DWORD *)(v81 + 4 * a2);
      }
      uint64_t v83 = v80 + 24 * v25;
      uint64_t v86 = *(char **)(v83 + 8);
      int v85 = (void *)(v83 + 8);
      unsigned __int8 v84 = v86;
      unint64_t v87 = v85[1];
      if ((unint64_t)v86 < v87)
      {
        *(_DWORD *)unsigned __int8 v84 = v82;
        *(void *)(v84 + 4) = v24;
        v84[12] = 1;
        double v88 = v84 + 13;
LABEL_119:
        *int v85 = v88;
        return;
      }
      int v89 = (void **)(v80 + 24 * v25);
      uint64_t v90 = (char *)*v89;
      uint64_t v91 = 0x4EC4EC4EC4EC4EC5 * (v84 - (unsigned char *)*v89);
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) <= 0x13B13B13B13B13B1)
      {
        unint64_t v93 = 0x4EC4EC4EC4EC4EC5 * (v87 - (void)v90);
        if (2 * v93 > v92) {
          unint64_t v92 = 2 * v93;
        }
        if (v93 >= 0x9D89D89D89D89D8) {
          unint64_t v94 = 0x13B13B13B13B13B1;
        }
        else {
          unint64_t v94 = v92;
        }
        if (!v94)
        {
          double v95 = 0;
LABEL_89:
          uint64_t v96 = &v95[13 * v91];
          *(_DWORD *)uint64_t v96 = v82;
          *(void *)(v96 + 4) = v24;
          v96[12] = 1;
          double v88 = v96 + 13;
          if (v84 != v90)
          {
            do
            {
              uint64_t v97 = *(void *)(v84 - 13);
              v84 -= 13;
              uint64_t v98 = *(void *)(v84 + 5);
              *(void *)(v96 - 13) = v97;
              v96 -= 13;
              *(void *)(v96 + 5) = v98;
            }
            while (v84 != v90);
            unsigned __int8 v84 = (char *)*v89;
          }
          *int v89 = v96;
          *int v85 = v88;
          v85[1] = &v95[13 * v94];
          if (!v84) {
            goto LABEL_119;
          }
          goto LABEL_118;
        }
        if (v94 <= 0x13B13B13B13B13B1)
        {
          double v95 = (char *)operator new(13 * v94);
          goto LABEL_89;
        }
LABEL_122:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      goto LABEL_121;
    }
  }
LABEL_95:
  if ((int)v35 < (int)v70 && *(_DWORD *)(v69 + 4 * v35) != -1)
  {
    uint64_t v100 = *(void *)(a1 + 128);
    if ((int)a3 >= (int)(-1431655765 * ((unint64_t)(*(void *)(a1 + 136) - v100) >> 3)))
    {
      gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::ImpliedBoundEntry>,std::allocator<std::vector<operations_research::sat::ImpliedBoundEntry>>>::resize((void *)(a1 + 128), (v116 + 0x100000000) >> 32);
      uint64_t v100 = *(void *)(a1 + 128);
      uint64_t v69 = *(void *)(*(void *)(a1 + 24) + 160);
      unint64_t v70 = (unint64_t)(*(void *)(*(void *)(a1 + 24) + 168) - v69) >> 2;
    }
    ++*(void *)(a1 + 264);
    if ((int)v35 >= (int)v70) {
      int v101 = -1;
    }
    else {
      int v101 = *(_DWORD *)(v69 + 4 * v35);
    }
    uint64_t v102 = v100 + 24 * (int)a3;
    uint64_t v103 = *(char **)(v102 + 8);
    int v85 = (void *)(v102 + 8);
    unsigned __int8 v84 = v103;
    unint64_t v104 = v85[1];
    if ((unint64_t)v103 < v104)
    {
      *(_DWORD *)unsigned __int8 v84 = v101;
      *(void *)(v84 + 4) = v24;
      double v88 = v84 + 13;
      v84[12] = 0;
      goto LABEL_119;
    }
    uint64_t v105 = (void **)(v100 + 24 * v25);
    int v106 = (char *)*v105;
    uint64_t v107 = 0x4EC4EC4EC4EC4EC5 * (v84 - (unsigned char *)*v105);
    unint64_t v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) <= 0x13B13B13B13B13B1)
    {
      unint64_t v109 = 0x4EC4EC4EC4EC4EC5 * (v104 - (void)v106);
      if (2 * v109 > v108) {
        unint64_t v108 = 2 * v109;
      }
      if (v109 >= 0x9D89D89D89D89D8) {
        unint64_t v110 = 0x13B13B13B13B13B1;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110)
      {
        if (v110 > 0x13B13B13B13B13B1) {
          goto LABEL_122;
        }
        unint64_t v111 = (char *)operator new(13 * v110);
      }
      else
      {
        unint64_t v111 = 0;
      }
      uint64_t v112 = &v111[13 * v107];
      *(_DWORD *)uint64_t v112 = v101;
      *(void *)(v112 + 4) = v24;
      v112[12] = 0;
      double v88 = v112 + 13;
      if (v84 != v106)
      {
        do
        {
          uint64_t v113 = *(void *)(v84 - 13);
          v84 -= 13;
          uint64_t v114 = *(void *)(v84 + 5);
          *(void *)(v112 - 13) = v113;
          v112 -= 13;
          *(void *)(v112 + 5) = v114;
        }
        while (v84 != v106);
        unsigned __int8 v84 = (char *)*v105;
      }
      *uint64_t v105 = v112;
      *int v85 = v88;
      v85[1] = &v111[13 * v110];
      if (!v84) {
        goto LABEL_119;
      }
LABEL_118:
      operator delete(v84);
      goto LABEL_119;
    }
LABEL_121:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
}

void sub_23CCE343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase(void *result, void *a2)
{
  uint64_t v2 = result[3];
  --result[2];
  uint64_t v3 = (char *)a2 - *result;
  uint64_t v4 = *(void *)(*result + ((unint64_t)(v3 - 8) & v2));
  unint64_t v5 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  unint64_t v6 = v4 & (~v4 << 6) & 0x8080808080808080;
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    uint64_t v11 = 0;
    char v8 = -2;
  }
  else
  {
    unsigned int v9 = (__clz(v6) >> 3) + (__clz(__rbit64(v5)) >> 3);
    BOOL v10 = v9 >= 8;
    uint64_t v11 = v9 < 8;
    if (v10) {
      char v8 = -2;
    }
    else {
      char v8 = 0x80;
    }
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)((result[3] & (unint64_t)(v3 - 8)) + (result[3] & 7) + *result + 1) = v8;
  uint64_t v12 = result[4];
  result[5] += v11;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *operations_research::sat::operator<<(void *a1, uint64_t a2, char *a3)
{
  uint64_t v8 = a2;
  int v9 = (int)a3;
  operations_research::sat::IntegerLiteral::DebugString((operations_research::sat::IntegerLiteral *)&v8, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_23CCE35A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::erase<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  uint64_t v7 = *a1;
  unint64_t v8 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v9 = a1[3];
  uint64_t v10 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    uint64_t v11 = v8 & v9;
    uint64_t v12 = *(void *)(v7 + (v8 & v9));
    unint64_t v13 = ((v12 ^ v10) - 0x101010101010101) & ~(v12 ^ v10) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_8:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v8 = v2 + v11;
  }
  while (1)
  {
    unint64_t v14 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v9;
    unint64_t v15 = (int *)(a1[1] + 16 * v14);
    int v17 = *v15;
    int v16 = v15[1];
    if (v17 == v3 && v16 == v4) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_8;
    }
  }
  if (v14 == v9) {
    return 0;
  }
  --a1[2];
  unint64_t v20 = *(void *)(v7 + v14) & (~*(void *)(v7 + v14) << 6) & 0x8080808080808080;
  unint64_t v21 = *(void *)(v7 + ((v14 - 8) & v9)) & (~*(void *)(v7 + ((v14 - 8) & v9)) << 6) & 0x8080808080808080;
  if (v21) {
    BOOL v22 = v20 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    uint64_t v26 = 0;
    char v23 = -2;
  }
  else
  {
    unsigned int v24 = (__clz(v21) >> 3) + (__clz(__rbit64(v20)) >> 3);
    BOOL v25 = v24 >= 8;
    uint64_t v26 = v24 < 8;
    if (v25) {
      char v23 = -2;
    }
    else {
      char v23 = 0x80;
    }
  }
  *(unsigned char *)(v7 + v14) = v23;
  *(unsigned char *)((a1[3] & (v14 - 8)) + (a1[3] & 7) + *a1 + 1) = v23;
  uint64_t v27 = a1[4];
  a1[5] += v26;
  if (!v27) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void gtl::ITIVector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<operations_research::sat::ImpliedBoundEntry>,std::allocator<std::vector<operations_research::sat::ImpliedBoundEntry>>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

char **operations_research::sat::ImpliedBounds::GetImpliedBounds(void *a1, signed int a2)
{
  uint64_t v2 = a1[16];
  if (a2 >= (int)(-1431655765 * ((unint64_t)(a1[17] - v2) >> 3))) {
    return (char **)(a1 + 13);
  }
  uint64_t v3 = a1[19];
  uint64_t v4 = *(void *)(*(void *)(a1[2] + 144) + 20 * a2);
  if (*(void *)(v3 + 8 * a2) > v4) {
    uint64_t v4 = *(void *)(v3 + 8 * a2);
  }
  *(void *)(v3 + 8 * a2) = v4;
  BOOL v5 = (char **)(v2 + 24 * a2);
  unint64_t v6 = *v5;
  uint64_t v7 = v5 + 1;
  uint64_t v8 = v5[1];
  if (*v5 == v8)
  {
    int v9 = 0;
    unint64_t v13 = *v5;
  }
  else
  {
    int v9 = 0;
    do
    {
      if (*(void *)(v6 + 4) > v4)
      {
        uint64_t v10 = &(*v5)[13 * v9++];
        uint64_t v11 = *(void *)v6;
        *(void *)(v10 + 5) = *(void *)(v6 + 5);
        *(void *)uint64_t v10 = v11;
      }
      v6 += 13;
    }
    while (v6 != v8);
    unint64_t v13 = *v7;
    unint64_t v6 = *v5;
  }
  unint64_t v14 = 0x4EC4EC4EC4EC4EC5 * (v13 - v6);
  if (v9 > v14)
  {
    std::vector<operations_research::sat::ImpliedBoundEntry>::__append((void **)v5, v9 - v14);
    return v5;
  }
  if (v9 >= v14) {
    return v5;
  }
  void *v7 = &v6[13 * v9];
  return v5;
}

void operations_research::sat::ImpliedBounds::ProcessIntegerTrail(uint64_t a1, int a2)
{
  if (*(unsigned char *)(*(void *)a1 + 545))
  {
    int v7 = *(_DWORD *)(*(void *)(a1 + 8) + 304);
    LODWORD(v8) = 1;
    if (v7 != 1) {
      google::MakeCheckOpString<int,int>((int)&v7, (int)&v8, "sat_solver_->CurrentDecisionLevel() == 1");
    }
    unint64_t v4 = a1 + 32;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
    operations_research::sat::IntegerTrail::AppendNewBounds(*(void **)(a1 + 16), (void **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 32);
    for (uint64_t i = *(void *)(a1 + 40); v5 != i; v5 += 12)
    {
      unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
      operations_research::sat::ImpliedBounds::Add(a1, a2, *(void *)v5, v4);
    }
  }
}

void sub_23CCE3A58(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::ImpliedBounds::EnqueueNewDeductions(operations_research::sat::ImpliedBounds *this)
{
  LODWORD(v18[0]) = *(_DWORD *)(*((void *)this + 1) + 304);
  LODWORD(v19) = 0;
  if (LODWORD(v18[0])) {
    google::MakeCheckOpString<int,int>((int)v18, (int)&v19, "sat_solver_->CurrentDecisionLevel() == 0");
  }
  uint64_t v2 = (int *)*((void *)this + 29);
  uint64_t v3 = (int *)*((void *)this + 30);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *((void *)this + 2);
      uint64_t v5 = *(void *)(*((void *)this + 19) + 8 * *v2);
      LODWORD(v18[0]) = *v2;
      *(uint64_t *)((char *)v18 + 4) = v5;
      if ((operations_research::sat::IntegerTrail::Enqueue(v4, v18[0], SHIDWORD(v5), 0, 0, 0, 0) & 1) == 0) {
        return 0;
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (int *)*((void *)this + 29);
    unint64_t v6 = (int *)*((void *)this + 30);
    if (v2 != v6)
    {
      uint64_t v7 = *((void *)this + 23);
      unint64_t v8 = (char *)v6 - (char *)v2 - 4;
      int v9 = (int *)*((void *)this + 29);
      if (v8 < 4) {
        goto LABEL_16;
      }
      uint64_t v10 = 0;
      uint64_t v11 = (v8 >> 2) + 1;
      uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFFELL;
      int v9 = &v2[v11 & 0x7FFFFFFFFFFFFFFELL];
      do
      {
        unint64_t v13 = &v2[v10];
        unint64_t v14 = ((unint64_t)*v13 >> 3) & 0x1FFFFFFFFFFFFFF8;
        unint64_t v15 = ((unint64_t)v13[1] >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)(v7 + v14) = 0;
        *(void *)(v7 + v15) = 0;
        v10 += 2;
      }
      while (v12 != v10);
      if (v11 != v12)
      {
LABEL_16:
        do
        {
          unint64_t v16 = *v9++;
          *(void *)(v7 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        }
        while (v9 != v6);
      }
    }
  }
  *((void *)this + 30) = v2;
  return operations_research::sat::SatSolver::FinishPropagation(*((operations_research::sat::SatSolver **)this + 1));
}

void sub_23CCE3BE0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    unint64_t v13 = (int *)(a1[1] + 16 * v12);
    int v15 = *v13;
    int v14 = v13[1];
    if (v15 == v3 && v14 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  uint64_t v8 = (char *)operator new(v2 + 9 + 16 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = a1[2];
  a1[5] = (char *)(v9 - (void)v10);
  unint64_t v11 = a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)unint64_t v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    unsigned int v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v13 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[(void)v4] & 0x80000000) == 0)
    {
      int v17 = &v5[16 * (void)v12];
      unint64_t v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v17)))
          + *((int *)v17 + 1);
      unint64_t v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      unint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v22 = (v14 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v15 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v13 += v14;
      char v16 = v19 & 0x7F;
      v20[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(_OWORD *)&a1[1][16 * v15] = *(_OWORD *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  unsigned int v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(void *)(result + 8) + 16 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(void *)(result + 8) + 16 * v14))))
          + *(int *)(*(void *)(result + 8) + 16 * v14 + 4);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(void *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 40) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void std::vector<operations_research::sat::ImpliedBoundEntry>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (0x4EC4EC4EC4EC4EC5 * (v4 - v5) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 13 * a2 - 13;
      if (v13 < 0xD) {
        goto LABEL_36;
      }
      unint64_t v14 = v13 / 0xD + 1;
      uint64_t v6 = &v5[13 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v15 = v5 + 12;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 3) = -1;
        *(_DWORD *)(v15 + 1) = -1;
        *((void *)v15 - 1) = 0;
        *(void *)(v15 + 5) = 0;
        *unint64_t v15 = 1;
        v15[13] = 1;
        v15 += 26;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *(_DWORD *)uint64_t v6 = -1;
          *(void *)(v6 + 4) = 0;
          v6[12] = 1;
          v6 += 13;
        }
        while (v6 != &v5[13 * a2]);
      }
      uint64_t v6 = &v5[13 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (v5 - (unsigned char *)*a1);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x13B13B13B13B13B1) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v4 - v7);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x9D89D89D89D89D8) {
      unint64_t v11 = 0x13B13B13B13B13B1;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x13B13B13B13B13B1) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int8x16_t v12 = (char *)operator new(13 * v11);
    }
    else
    {
      int8x16_t v12 = 0;
    }
    unint64_t v17 = &v12[13 * v8];
    unint64_t v18 = &v17[13 * a2];
    unint64_t v19 = 13 * a2 - 13;
    unint64_t v20 = v17;
    if (v19 < 0xD) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0xD + 1;
    unint64_t v20 = &v17[13 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v22 = (uint64_t)&v12[13 * v8 + 12];
    uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(_DWORD *)(v22 - 12) = -1;
      *(_DWORD *)(v22 + 1) = -1;
      *(void *)(v22 - 8) = 0;
      *(void *)(v22 + 5) = 0;
      *(unsigned char *)uint64_t v22 = 1;
      *(unsigned char *)(v22 + 13) = 1;
      v22 += 26;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        *(_DWORD *)unint64_t v20 = -1;
        *(void *)(v20 + 4) = 0;
        v20[12] = 1;
        v20 += 13;
      }
      while (v20 != v18);
    }
    int v24 = &v12[13 * v11];
    if (v5 != v7)
    {
      do
      {
        uint64_t v25 = *(void *)(v6 - 13);
        v6 -= 13;
        uint64_t v26 = *(void *)(v6 + 5);
        *(void *)(v17 - 13) = v25;
        v17 -= 13;
        *(void *)(v17 + 5) = v26;
      }
      while (v6 != v7);
    }
    uint64_t v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
      operator delete(v27);
    }
  }
}

uint64_t operations_research::sat::AffineExpression::GreaterOrEqual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == -1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1, (int)&operations_research::sat::kNoIntegerVariable, "var != kNoIntegerVariable");
  }
  uint64_t v2 = *(void *)(a1 + 4);
  LODWORD(v6[0]) = 0;
  if (v2 < 1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>(a1 + 4, (int)v6, "coeff > 0");
  }
  uint64_t v3 = a2 - *(void *)(a1 + 12);
  if (v3 / v2 * v2 >= v3) {
    uint64_t v4 = v3 / v2;
  }
  else {
    uint64_t v4 = v3 / v2 + 1;
  }
  LODWORD(v6[0]) = *(_DWORD *)a1;
  *(void *)((char *)v6 + 4) = v4;
  return v6[0];
}

void sub_23CCE4730(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4738(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::AffineExpression::LowerOrEqual(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == -1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1, (int)&operations_research::sat::kNoIntegerVariable, "var != kNoIntegerVariable");
  }
  uint64_t v2 = *(void *)(a1 + 4);
  LODWORD(v6[0]) = 0;
  if (v2 < 1) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>(a1 + 4, (int)v6, "coeff > 0");
  }
  uint64_t v3 = (a2 - *(void *)(a1 + 12)) / v2 - ((a2 - *(void *)(a1 + 12)) / v2 * v2 > a2 - *(void *)(a1 + 12));
  if (v3 >= (uint64_t)0x8000000000000002) {
    uint64_t v4 = -v3;
  }
  else {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  LODWORD(v6[0]) = *(_DWORD *)a1 ^ 1;
  *(void *)((char *)v6 + 4) = v4;
  return v6[0];
}

void sub_23CCE486C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4874(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::NegationOf(int8x16_t **a1@<X0>, int8x16_t **a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int64_t v5 = (char *)v3 - (char *)v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (int8x16_t *)operator new((char *)v3 - (char *)v4);
    *a2 = v6;
    a2[2] = (int8x16_t *)((char *)v6 + 4 * (v5 >> 2));
    bzero(v6, v5);
    unint64_t v7 = 0;
    a2[1] = (int8x16_t *)((char *)v6 + v5);
    if ((unint64_t)(v5 >> 2) <= 1) {
      unint64_t v8 = 1;
    }
    else {
      unint64_t v8 = v5 >> 2;
    }
    if (v8 < 8) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v6 - (char *)v4) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v7 = v8 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v4 + 1;
    unint64_t v10 = v6 + 1;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int8x16_t v13 = veorq_s8(*v9, v11);
      v10[-1] = veorq_s8(v9[-1], v11);
      int8x16_t *v10 = v13;
      v9 += 2;
      v10 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v8 != v7)
    {
LABEL_11:
      unint64_t v14 = &v6->i32[v7];
      unint64_t v15 = &v4->i32[v7];
      unint64_t v16 = v8 - v7;
      do
      {
        int v17 = *v15++;
        *v14++ = v17 ^ 1;
        --v16;
      }
      while (v16);
    }
  }
}

void sub_23CCE497C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerEncoder::FullyEncodeVariable(uint64_t a1, signed int a2)
{
  int v2 = a2;
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(a1, a2))
  {
    int v5 = *(_DWORD *)(*(void *)a1 + 304);
    v45[0] = 0;
    LODWORD(v46) = v5;
    if (v5) {
      google::MakeCheckOpString<int,int>((int)v45, (int)&v46, "0 == sat_solver_->CurrentDecisionLevel()");
    }
    if (operations_research::Domain::IsEmpty((operations_research::Domain *)(**(void **)(a1 + 8) + 24 * a2)))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 55);
      unint64_t v38 = (void *)google::LogMessage::stream((google::LogMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Check failed: !(*domains_)[var].IsEmpty() ", 42);
      goto LABEL_55;
    }
    *(void *)uint64_t v45 = operations_research::Domain::Size((operations_research::Domain *)(**(void **)(a1 + 8) + 24 * a2));
    int v44 = 100000;
    if (*(uint64_t *)v45 > 99999) {
      google::MakeCheckOpString<long long,int>((int)v45, (int)&v44, "(*domains_)[var].Size() < 100000");
    }
    uint64_t v6 = *(char **)(a1 + 288);
    *(void *)(a1 + 296) = v6;
    unint64_t v7 = (unint64_t *)(**(void **)(a1 + 8) + 24 * a2);
    unint64_t v10 = *v7;
    unint64_t v9 = v7 + 1;
    unint64_t v8 = v10;
    if (v10) {
      unint64_t v9 = (void *)*v9;
    }
    if (v8 < 2)
    {
LABEL_43:
      if (v2 >= 0) {
        int v35 = v2;
      }
      else {
        int v35 = v2 + 1;
      }
      int v36 = v35 >> 1;
      int v44 = v35 >> 1;
      *(void *)uint64_t v45 = *(void *)(a1 + 264);
      if (v35 >> 1 >= v45[0]) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,unsigned long>((int)&v44, (int)v45, "GetPositiveOnlyIndex(var) < is_fully_encoded_.size()");
      }
      unint64_t v37 = (void *)(*(void *)(a1 + 232) + 24 * v36);
      if (*v37 != v37[1])
      {
        *(void *)(*(void *)(a1 + 256) + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
        return;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v45, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 79);
      uint64_t v39 = (void *)google::LogMessage::stream((google::LogMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Check failed: !equality_by_var_[GetPositiveOnlyIndex(var)].empty() ", 67);
LABEL_55:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v45);
    }
    int v40 = a2;
    int v41 = v2;
    uint64_t v42 = &v9[2 * (v8 >> 1)];
    unint64_t v43 = (uint64_t **)(a1 + 288);
    while (1)
    {
      unint64_t v12 = (void *)*v9;
      int8x16_t v11 = (void *)v9[1];
      if (*v9 <= (uint64_t)v11) {
        break;
      }
LABEL_9:
      v9 += 2;
      if (v9 == v42)
      {
        uint64_t v33 = *v43;
        int v2 = v41;
        while (v33 != (uint64_t *)v6)
        {
          uint64_t v34 = *v33++;
          operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(a1, v40, v34);
        }
        goto LABEL_43;
      }
    }
    while (1)
    {
      unint64_t v15 = *(void *)(a1 + 304);
      if ((unint64_t)v6 >= v15) {
        break;
      }
      *(void *)uint64_t v6 = v12;
      uint64_t v13 = (uint64_t)(v6 + 8);
LABEL_13:
      *(void *)(a1 + 296) = v13;
      uint64_t v6 = (char *)v13;
      BOOL v14 = v12 == v11;
      unint64_t v12 = (void *)((char *)v12 + 1);
      if (v14) {
        goto LABEL_9;
      }
    }
    unint64_t v16 = *v43;
    uint64_t v17 = v6 - (char *)*v43;
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (v19 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - (void)v16;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(8 * v21);
      uint64_t v23 = &v22[8 * v18];
      void *v23 = v12;
      uint64_t v13 = (uint64_t)(v23 + 1);
      if (v6 == (char *)v16) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = (void *)(8 * v18);
      *(void *)(8 * v18) = v12;
      uint64_t v13 = 8 * v18 + 8;
      if (v6 == (char *)v16) {
        goto LABEL_29;
      }
    }
    unint64_t v24 = v6 - 8 - (char *)v16;
    if (v24 >= 0x168)
    {
      if (&v22[v17 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
      {
        uint64_t v25 = v6;
      }
      else if (&v6[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        uint64_t v25 = v6;
      }
      else if ((unint64_t)(v6 - v22 - v17) >= 0x20)
      {
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v6[-v28];
        uint64_t v23 = (void *)((char *)v23 - v28);
        uint64_t v29 = &v22[8 * v18 - 16];
        uint64_t v30 = v6 - 16;
        uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *uint64_t v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_29:
          *(void *)(a1 + 288) = v23;
          *(void *)(a1 + 296) = v13;
          *(void *)(a1 + 304) = &v22[8 * v21];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v25 = v6;
      }
    }
    else
    {
      uint64_t v25 = v6;
    }
    do
    {
      uint64_t v26 = *((void *)v25 - 1);
      v25 -= 8;
      *--uint64_t v23 = v26;
    }
    while (v25 != (char *)v16);
    goto LABEL_29;
  }
}

void sub_23CCE4E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE4E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(uint64_t a1, signed int a2)
{
  if (a2 >= 0) {
    int v2 = a2;
  }
  else {
    int v2 = a2 + 1;
  }
  int v3 = v2 >> 1;
  if (v3 >= *(_DWORD *)(a1 + 264)) {
    return 0;
  }
  char v5 = v3;
  unint64_t v6 = v3;
  uint64_t v7 = *(void *)(a1 + 256);
  unint64_t v8 = v6 >> 6;
  BOOL result = 1;
  uint64_t v10 = 1 << v5;
  if ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v5)) != 0) {
    return result;
  }
  int v11 = (a2 & 1) != 0 ? a2 & 0xFFFFFFFE : a2;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(a1 + 232) + 24 * (int)v6 + 8)
                - *(void *)(*(void *)(a1 + 232) + 24 * (int)v6)) >> 2) < operations_research::Domain::Size((operations_research::Domain *)(**(void **)(a1 + 8) + 24 * v11)))
    return 0;
  operations_research::sat::IntegerEncoder::PartialDomainEncoding((void *)a1, v11, (char **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v12 = *(void *)(a1 + 232);
  uint64_t v13 = (void *)(v12 + 24 * (int)v6);
  BOOL v14 = (unint64_t *)(**(void **)(a1 + 8) + 24 * v11);
  unint64_t v17 = *v14;
  unint64_t v15 = v14 + 1;
  unint64_t v16 = v17;
  if (v17) {
    unint64_t v15 = (void *)*v15;
  }
  if (v16 >= 2)
  {
    int v18 = 0;
    uint64_t v22 = &v15[2 * (v16 >> 1)];
    do
    {
      unint64_t v24 = (void *)*v15;
      uint64_t v23 = v15[1];
      if (*v15 <= v23)
      {
        uint64_t v25 = (void *)(v23 + 1);
        do
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 24 * (int)v6 + 8) - *v13) >> 2) > v18
            && v24 == *(void **)(*v13 + 12 * v18))
          {
            ++v18;
          }
          unint64_t v24 = (void *)((char *)v24 + 1);
        }
        while (v25 != v24);
      }
      v15 += 2;
    }
    while (v15 != v22);
  }
  else
  {
    int v18 = 0;
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 24 * (int)v6 + 8) - *v13) >> 2);
  uint64_t v20 = *(void *)(a1 + 256);
  uint64_t v21 = *(void *)(v20 + 8 * v8);
  if (v19 == v18)
  {
    v21 |= v10;
    *(void *)(v20 + 8 * v8) = v21;
  }
  return (v21 & v10) != 0;
}

unint64_t operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (a2 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = a2 + 1;
  }
  int v8 = v7 >> 1;
  if (a2) {
    uint64_t v9 = -a3;
  }
  else {
    uint64_t v9 = a3;
  }
  v34[0] = v8;
  *(void *)&v34[1] = v9;
  *(void *)int v35 = *(void *)v34;
  *(_DWORD *)&v35[8] = HIDWORD(v9);
  unint64_t v10 = *(void *)&v35[4]
      + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v34[0])
         * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                            * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                             + v34[0])));
  unint64_t v11 = ((v10 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v10);
  unint64_t v12 = *(void *)(a1 + 184);
  unint64_t v13 = (v11 >> 7) ^ (v12 >> 12);
  uint64_t v14 = *(void *)(a1 + 208);
  uint64_t v15 = 0x101010101010101 * (v11 & 0x7F);
  while (1)
  {
    uint64_t v16 = v13 & v14;
    uint64_t v17 = *(void *)(v12 + v16);
    unint64_t v18 = ((v17 ^ v15) - 0x101010101010101) & ~(v17 ^ v15) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_14:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_17;
    }
    v5 += 8;
    unint64_t v13 = v5 + v16;
  }
  while (1)
  {
    unint64_t v19 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    uint64_t v20 = *(void *)(a1 + 192) + 16 * v19;
    if (*(_DWORD *)v20 == v34[0] && *(void *)(v20 + 4) == *(void *)&v35[4]) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_14;
    }
  }
  if (v19 != v14) {
    return *(unsigned int *)(v20 + 12);
  }
LABEL_17:
  uint64_t v22 = (operations_research::Domain *)(**(void **)(a1 + 8) + 24 * a2);
  if (operations_research::Domain::Contains(v22, a3))
  {
    if (operations_research::Domain::Min(v22, v23) == a3 && operations_research::Domain::Max(v22, v24) == a3)
    {
      unsigned int v25 = *(_DWORD *)(a1 + 280);
      if (v25 == -1)
      {
        int v26 = *(_DWORD *)(*(void *)a1 + 16);
        operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v26 + 1);
        *(_DWORD *)(a1 + 280) = 2 * v26;
        operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, 2 * v26);
        unsigned int v25 = *(_DWORD *)(a1 + 280);
      }
      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, (const char *)v25, a2, a3);
      unint64_t v27 = *(unsigned int *)(a1 + 280);
      if (v27 != -1) {
        return v27;
      }
      int v33 = *(_DWORD *)(*(void *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v33 + 1);
      *(_DWORD *)(a1 + 280) = 2 * v33;
      operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, 2 * v33);
      return *(unsigned int *)(a1 + 280);
    }
    else
    {
      ++*(void *)(a1 + 24);
      int v31 = *(_DWORD *)(*(void *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v31 + 1);
      unint64_t v27 = (2 * v31);
      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, (const char *)v27, a2, a3);
      if (((*(void *)(*(void *)(*(void *)(*(void *)a1 + 208) + 24)
                       + (((unint64_t)(int)v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v27 & 0x3E)) & 3) == 0
        || *operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__ < 1
        || operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__ == &google::kLogSiteUninitialized
        && !google::InitVLOG3__((google *)&operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1))
      {
        return v27;
      }
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 292);
      long long v32 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Created a fixed literal for no reason!", 38);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
      return v27;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(a1 + 280);
    if (v29 == -1)
    {
      int v30 = *(_DWORD *)(*(void *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v30 + 1);
      *(_DWORD *)(a1 + 280) = 2 * v30;
      operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, 2 * v30);
      int v29 = *(_DWORD *)(a1 + 280);
    }
    return v29 ^ 1u;
  }
}

void sub_23CCE53B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *operations_research::sat::IntegerEncoder::PartialDomainEncoding@<X0>(void *result@<X0>, int a2@<W1>, char **a3@<X8>)
{
  char v3 = a2;
  LODWORD(v45) = *(_DWORD *)(*result + 304);
  LODWORD(v47) = 0;
  if (v45) {
    google::MakeCheckOpString<int,int>((int)&v45, (int)&v47, "sat_solver_->CurrentDecisionLevel() == 0");
  }
  if (a2 >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = a2 + 1;
  }
  int v6 = v5 >> 1;
  uint64_t v7 = result[29];
  if (v6 >= (int)(-1431655765 * ((unint64_t)(result[30] - v7) >> 3)))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  int v8 = (uint64_t **)(v7 + 24 * v6);
  unint64_t v10 = v8 + 1;
  uint64_t v9 = v8[1];
  unint64_t v11 = *v8;
  int v12 = 0;
  if (v9 == *v8) {
    goto LABEL_25;
  }
  unint64_t v13 = ((char *)v9 - (char *)*v8) / 12;
  uint64_t v14 = *(void *)(*(void *)(*result + 208) + 24);
  if (v13 <= 1) {
    unint64_t v13 = 1;
  }
  uint64_t v15 = (int *)(v11 + 1);
  while (1)
  {
    int v17 = *v15;
    unint64_t v18 = *(void *)(v14 + (((unint64_t)*v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v18 >> (*v15 & 0x3F ^ 1u))) {
      goto LABEL_11;
    }
    uint64_t v19 = *((void *)v15 - 1);
    if ((v18 >> (*v15 & 0x3F))) {
      break;
    }
    uint64_t v16 = (_DWORD *)v11 + 3 * v12++;
    *(void *)uint64_t v16 = v19;
    v16[2] = v17;
LABEL_11:
    v15 += 3;
    if (!--v13) {
      goto LABEL_25;
    }
  }
  int8x16_t *v10 = v11;
  uint64_t v20 = v7 + 24 * v6;
  unint64_t v23 = *(void *)(v20 + 16);
  uint64_t v22 = (char **)(v20 + 16);
  unint64_t v21 = v23;
  if ((unint64_t)v11 >= v23)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v11) >> 2);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= 1) {
      uint64_t v25 = 1;
    }
    if (v24 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v26 = 0x1555555555555555;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v27 = 12 * v26;
    uint64_t v28 = (char *)operator new(12 * v26);
    *(void *)uint64_t v28 = v19;
    int v29 = &v28[v27];
    *((_DWORD *)v28 + 2) = v17;
    uint64_t v9 = (uint64_t *)(v28 + 12);
    *int v8 = (uint64_t *)v28;
    int8x16_t *v10 = (uint64_t *)(v28 + 12);
    *uint64_t v22 = v29;
    operator delete(v11);
  }
  else
  {
    uint64_t *v11 = v19;
    *((_DWORD *)v11 + 2) = v17;
    uint64_t v9 = (uint64_t *)((char *)v11 + 12);
  }
  int8x16_t *v10 = v9;
  int v12 = 1;
LABEL_25:
  unint64_t v30 = v12;
  int v31 = *v8;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*v8) >> 2);
  if (v30 <= v32)
  {
    if (v30 < v32)
    {
      uint64_t v9 = (uint64_t *)((char *)v31 + 12 * (int)v30);
      int8x16_t *v10 = v9;
    }
  }
  else
  {
    std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair>::__append((void **)v8, v30 - v32);
    int v31 = *v8;
    uint64_t v9 = *v10;
  }
  unint64_t v33 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v31) >> 2));
  if (v9 == v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  BOOL result = (void *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>((unint64_t)v31, v9, (uint64_t)&v45, v34, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v35 = *v8;
  int64_t v36 = (char *)*v10 - (char *)*v8;
  if (*v10 == *v8)
  {
    unint64_t v38 = 0;
    unint64_t v37 = 0;
    if ((v3 & 1) == 0) {
      return result;
    }
    goto LABEL_37;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v36 >> 2) > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v37 = (char *)operator new((char *)*v10 - (char *)*v8);
  *a3 = v37;
  unint64_t v38 = &v37[4 * (v36 >> 2)];
  a3[2] = v38;
  BOOL result = memcpy(v37, v35, v36);
  a3[1] = v38;
  if (v3)
  {
LABEL_37:
    if (v37 != v38)
    {
      uint64_t v39 = v38 - 12;
      if (v38 - 12 > v37)
      {
        int v40 = v37 + 12;
        do
        {
          uint64_t v41 = *(void *)(v40 - 12);
          int v46 = *((_DWORD *)v40 - 1);
          uint64_t v45 = v41;
          uint64_t v42 = *(void *)v39;
          *((_DWORD *)v40 - 1) = *((_DWORD *)v39 + 2);
          *(void *)(v40 - 12) = v42;
          uint64_t v43 = v45;
          *((_DWORD *)v39 + 2) = v46;
          *(void *)uint64_t v39 = v43;
          v39 -= 12;
          BOOL v44 = v40 >= v39;
          v40 += 12;
        }
        while (!v44);
        unint64_t v37 = *a3;
      }
    }
    while (v37 != v38)
    {
      *(void *)unint64_t v37 = -*(void *)v37;
      v37 += 12;
    }
  }
  return result;
}

void sub_23CCE5768(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE5770(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *operations_research::sat::IntegerEncoder::FullDomainEncoding@<X0>(void *a1@<X0>, signed int a2@<W1>, char **a3@<X8>)
{
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)a1, a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 122);
    uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Check failed: VariableIsFullyEncoded(var) ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
  }

  return operations_research::sat::IntegerEncoder::PartialDomainEncoding(a1, a2, a3);
}

void sub_23CCE5820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::IntegerEncoder::AddImplications(uint64_t result, uint64_t **a2, uint64_t *a3, int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 16))
  {
    int v5 = a3;
    uint64_t v7 = (uint64_t *)result;
    int v8 = (uint64_t *)a3[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = (uint64_t **)v8;
        int v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      unint64_t v10 = a3;
      do
      {
        uint64_t v9 = (uint64_t **)v10[2];
        BOOL v11 = *v9 == v10;
        unint64_t v10 = (uint64_t *)v9;
      }
      while (!v11);
    }
    if (v9 != a2 + 1)
    {
      uint64_t v12 = *(void *)result;
      int v17 = *((_DWORD *)v9 + 9) ^ 1;
      int v18 = a4;
      BOOL result = operations_research::sat::SatSolver::AddClauseDuringSearch(v12, &v17, 2uLL);
    }
    if (*a2 != v5)
    {
      uint64_t v13 = *v5;
      if (*v5)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = v5[2];
          BOOL v11 = *(void *)v14 == (void)v5;
          int v5 = (uint64_t *)v14;
        }
        while (v11);
      }
      uint64_t v15 = *v7;
      int v16 = *(_DWORD *)(v14 + 36);
      int v17 = a4 ^ 1;
      int v18 = v16;
      return operations_research::sat::SatSolver::AddClauseDuringSearch(v15, &v17, 2uLL);
    }
  }
  return result;
}

uint64_t operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals(uint64_t this)
{
  uint64_t v1 = (uint64_t *)this;
  int v2 = *(_DWORD *)(*(void *)this + 304);
  int v11 = 0;
  LODWORD(v12) = v2;
  if (v2) {
    google::MakeCheckOpString<int,int>((int)&v11, (int)&v12, "0 == sat_solver_->CurrentDecisionLevel()");
  }
  *(unsigned char *)(this + 16) = 1;
  char v3 = *(void **)(this + 32);
  for (unint64_t i = *(void **)(this + 40); v3 != i; v3 += 3)
  {
    int v5 = (void *)*v3;
    if ((void *)*v3 != v3 + 1)
    {
      uint64_t v6 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v7 = *((unsigned int *)v5 + 9);
        if (v6 != 0xFFFFFFFFLL) {
          this = operations_research::sat::SatSolver::AddBinaryClause(*v1, v7 ^ 1, v6);
        }
        int v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            int v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            int v5 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v7;
        int v5 = v9;
      }
      while (v9 != v3 + 1);
    }
  }
  return this;
}

void sub_23CCE5A78(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::IntegerEncoder::Canonicalize@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = (int)a2;
  *(void *)uint64_t v25 = a2;
  *(_DWORD *)&v25[8] = a3;
  uint64_t v23 = *(void *)&v25[4] - 1;
  unint64_t v24 = *(int64_t **)&v25[4];
  *(void *)uint64_t v22 = operations_research::Domain::Min((operations_research::Domain *)(**(void **)(a1 + 8) + 24 * (int)a2), a2);
  if (*(uint64_t *)&v25[4] <= *(uint64_t *)v22) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>((int)&v23, (int)v22, "before >= (*domains_)[var].Min()");
  }
  uint64_t result = operations_research::Domain::Max((operations_research::Domain *)(**(void **)(a1 + 8) + 24 * v4), v7);
  *(void *)uint64_t v22 = result;
  if (*(uint64_t *)&v25[4] > result) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>((int)&v24, (int)v22, "after <= (*domains_)[var].Max()");
  }
  uint64_t v9 = (unint64_t *)(**(void **)(a1 + 8) + 24 * v4);
  unint64_t v12 = *v9;
  BOOL v10 = (int64_t *)(v9 + 1);
  unint64_t v11 = v12;
  if (v12) {
    BOOL v10 = (int64_t *)*v10;
  }
  int64_t v13 = v23;
  int64_t v14 = (int64_t)v24;
  if (v11 >= 2)
  {
    uint64_t v19 = 16 * (v11 >> 1) - 16;
    int64_t v20 = 0x8000000000000000;
    while (v13 <= v20)
    {
      if (v14 > v20) {
        goto LABEL_21;
      }
LABEL_11:
      int64_t v20 = v10[1];
      v10 += 2;
      BOOL v21 = v14 <= v20 || v19 == 0;
      v19 -= 16;
      if (v21) {
        goto LABEL_6;
      }
    }
    if (v13 < *v10) {
      int64_t v13 = v20;
    }
    if (v14 <= v20) {
      goto LABEL_11;
    }
LABEL_21:
    if (v14 <= *v10) {
      int64_t v14 = *v10;
    }
    goto LABEL_11;
  }
LABEL_6:
  *(_DWORD *)uint64_t v22 = v4;
  *(void *)&v22[4] = v14;
  uint64_t v15 = *(void *)v22;
  unint64_t v16 = HIDWORD(v14);
  if (v13 >= (uint64_t)0x8000000000000002) {
    uint64_t v17 = -v13;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_DWORD *)uint64_t v22 = v4 ^ 1;
  *(void *)&v22[4] = v17;
  uint64_t v18 = *(void *)v22;
  *(void *)a4 = v15;
  *(_DWORD *)(a4 + 8) = v16;
  *(void *)(a4 + 12) = v18;
  *(_DWORD *)(a4 + 20) = HIDWORD(v17);
  return result;
}

void sub_23CCE5C70(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE5C78(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(unsigned int *a1, const char *a2, int a3)
{
  *(void *)int v40 = a2;
  *(_DWORD *)&v40[8] = a3;
  if (*(uint64_t *)&v40[4] <= operations_research::Domain::Min((operations_research::Domain *)(**((void **)a1 + 1) + 24 * (int)a2), a2))
  {
    unint64_t v9 = a1[70];
    if (v9 == -1)
    {
      int v11 = *(_DWORD *)(*(void *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v11 + 1);
      a1[70] = 2 * v11;
      operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, 2 * v11);
      return a1[70];
    }
    return v9;
  }
  if (*(uint64_t *)&v40[4] > operations_research::Domain::Max((operations_research::Domain *)(**((void **)a1 + 1) + 24 * (int)a2), v6))
  {
    unsigned int v7 = a1[70];
    if (v7 == -1)
    {
      int v8 = *(_DWORD *)(*(void *)a1 + 16);
      operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v8 + 1);
      a1[70] = 2 * v8;
      operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, 2 * v8);
      unsigned int v7 = a1[70];
    }
    return v7 ^ 1;
  }
  operations_research::sat::IntegerEncoder::Canonicalize((uint64_t)a1, a2, a3, (uint64_t)&v36);
  unint64_t v12 = v36;
  int v13 = v37;
  *(void *)int v35 = v36;
  *(_DWORD *)&v35[8] = v37;
  uint64_t v14 = *((void *)a1 + 4);
  int v15 = -1431655765 * ((unint64_t)(*((void *)a1 + 5) - v14) >> 3);
  if ((int)v36 < v15)
  {
    uint64_t v16 = v14 + 24 * (int)v36;
    uint64_t v19 = *(void **)(v16 + 8);
    uint64_t v17 = (void *)(v16 + 8);
    uint64_t v18 = v19;
    if (v19)
    {
      int64_t v20 = v17;
      do
      {
        uint64_t v21 = *(void *)((char *)v18 + 28);
        BOOL v22 = v21 < *(void *)&v35[4];
        if (v21 >= *(uint64_t *)&v35[4]) {
          uint64_t v23 = v18;
        }
        else {
          uint64_t v23 = v18 + 1;
        }
        if (!v22) {
          int64_t v20 = v18;
        }
        uint64_t v18 = (void *)*v23;
      }
      while (*v23);
      if (v20 != v17 && *(uint64_t *)&v35[4] >= *(void *)((char *)v20 + 28))
      {
        unint64_t v9 = *((unsigned int *)v20 + 9);
        if (v9 != -1) {
          return v9;
        }
      }
    }
  }
  *(void *)int v35 = v38;
  *(_DWORD *)&v35[8] = v39;
  if ((int)v38 < v15)
  {
    uint64_t v24 = v14 + 24 * (int)v38;
    uint64_t v27 = *(void **)(v24 + 8);
    uint64_t v25 = (void *)(v24 + 8);
    unint64_t v26 = v27;
    if (v27)
    {
      uint64_t v28 = v25;
      do
      {
        uint64_t v29 = *(void *)((char *)v26 + 28);
        BOOL v30 = v29 < *(void *)&v35[4];
        if (v29 >= *(uint64_t *)&v35[4]) {
          int v31 = v26;
        }
        else {
          int v31 = v26 + 1;
        }
        if (!v30) {
          uint64_t v28 = v26;
        }
        unint64_t v26 = (void *)*v31;
      }
      while (*v31);
      if (v28 != v25 && *(uint64_t *)&v35[4] >= *(void *)((char *)v28 + 28))
      {
        int v32 = *((_DWORD *)v28 + 9);
        if (v32 != -1) {
          return v32 ^ 1u;
        }
      }
    }
  }
  ++*((void *)a1 + 3);
  int v33 = *(_DWORD *)(*(void *)a1 + 16);
  operations_research::sat::SatSolver::SetNumVariables(*(operations_research::sat::SatSolver **)a1, v33 + 1);
  unint64_t v9 = (2 * v33);
  operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral((uint64_t)a1, (const char *)v9, v12, v13);
  if (((*(void *)(*(void *)(*(void *)(*(void *)a1 + 208) + 24)
                   + (((unint64_t)(int)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 & 0x3E)) & 3) == 0
    || *operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__[0] < 1
    || operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(operations_research::sat::IntegerLiteral)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1))
  {
    return v9;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v35, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 240);
  uint64_t v34 = (void *)google::LogMessage::stream((google::LogMessage *)v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Created a fixed literal for no reason!", 38);
  google::LogMessage::~LogMessage((google::LogMessage *)v35);
  return v9;
}

void sub_23CCE5F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(uint64_t a1, const char *a2, const char *a3, int a4)
{
  unsigned int v6 = a2;
  *(void *)uint64_t v17 = a3;
  *(_DWORD *)&v17[8] = a4;
  int v8 = (operations_research::Domain *)(**(void **)(a1 + 8) + 24 * (int)a3);
  uint64_t v9 = operations_research::Domain::Min(v8, a2);
  uint64_t v11 = operations_research::Domain::Max(v8, v10);
  if (*(uint64_t *)&v17[4] <= v9)
  {
    uint64_t v13 = *(void *)a1;
    int v14 = v6;
    goto LABEL_5;
  }
  uint64_t v12 = v11;
  if (*(uint64_t *)&v17[4] > v11)
  {
    uint64_t v13 = *(void *)a1;
    int v14 = v6 ^ 1;
LABEL_5:
    operations_research::sat::SatSolver::AddUnitClause(v13, v14);
    return;
  }
  operations_research::sat::IntegerEncoder::Canonicalize(a1, a3, a4, (uint64_t)v15);
  operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(a1, *(uint64_t *)v15, *(int *)&v15[8], v6);
  operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(a1, *(uint64_t *)v16, *(int *)&v16[8], v6 ^ 1);
  if (*(void *)&v15[4] == v12) {
    operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, v6, a3, v12);
  }
  if (!(v9 + *(void *)&v16[4]))
  {
    operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(a1, v6 ^ 1, a3, v9);
  }
}

void operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  unint64_t v93 = (operations_research::Domain *)(**(void **)(a1 + 8) + 24 * a3);
  if (a4 == -1)
  {
    if (operations_research::Domain::Min(v93, a2) >= -1 && operations_research::Domain::Max(v93, v11) <= 0)
    {
      uint64_t v12 = *(void *)(a1 + 160);
      unint64_t v13 = (*(void *)(a1 + 168) - v12) >> 2;
      if ((int)a2 >= (int)v13)
      {
        unint64_t v15 = (((void)a2 << 32) + 0x100000000) >> 32;
        if (v15 <= v13)
        {
          if (v15 < v13) {
            *(void *)(a1 + 168) = v12 + 4 * v15;
          }
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 160), v15 - v13, &operations_research::sat::kNoIntegerVariable);
          uint64_t v12 = *(void *)(a1 + 160);
        }
        *(_DWORD *)(v12 + 4 * (int)a2) = a3 ^ 1;
      }
      else if (*(_DWORD *)(v12 + 4 * (int)a2) == -1)
      {
        *(_DWORD *)(v12 + 4 * (int)a2) = a3 ^ 1;
      }
    }
  }
  else if (a4 == 1 {
         && (operations_research::Domain::Min(v93, a2) & 0x8000000000000000) == 0
  }
         && operations_research::Domain::Max(v93, v8) <= 1)
  {
    uint64_t v9 = *(void *)(a1 + 160);
    unint64_t v10 = (*(void *)(a1 + 168) - v9) >> 2;
    if ((int)a2 >= (int)v10)
    {
      unint64_t v14 = (((void)a2 << 32) + 0x100000000) >> 32;
      if (v14 <= v10)
      {
        if (v14 < v10) {
          *(void *)(a1 + 168) = v9 + 4 * v14;
        }
        *(_DWORD *)(v9 + 4 * (int)a2) = a3;
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 160), v14 - v10, &operations_research::sat::kNoIntegerVariable);
        *(_DWORD *)(*(void *)(a1 + 160) + 4 * (int)a2) = a3;
      }
    }
    else if (*(_DWORD *)(v9 + 4 * (int)a2) == -1)
    {
      *(_DWORD *)(v9 + 4 * (int)a2) = a3;
    }
  }
  if (a3 >= 0) {
    int v16 = a3;
  }
  else {
    int v16 = a3 + 1;
  }
  int v17 = v16 >> 1;
  if (a3) {
    uint64_t v18 = -a4;
  }
  else {
    uint64_t v18 = a4;
  }
  *(void *)double v95 = __PAIR64__(v18, v17);
  *(_DWORD *)&v95[8] = HIDWORD(v18);
  int v96 = (int)a2;
  uint64_t v91 = a2;
  unint64_t v19 = *(void *)(a1 + 192)
      + 16
      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>((uint64_t *)(a1 + 184), (int *)v95);
  if (v20)
  {
    uint64_t v21 = *(void *)v95;
    *(_DWORD *)(v19 + 8) = *(_DWORD *)&v95[8];
    *(void *)unint64_t v19 = v21;
    *(_DWORD *)(v19 + 12) = v96;
    if (operations_research::Domain::Contains(v93, a4))
    {
      uint64_t v24 = *(void *)(a1 + 232);
      uint64_t v23 = *(void *)(a1 + 240);
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3);
      if (v17 >= (int)v25)
      {
        unint64_t v26 = v17 + 1;
        if (v26 <= v25)
        {
          if (v26 < v25)
          {
            uint64_t v30 = v24 + 24 * (int)v26;
            if (v23 != v30)
            {
              uint64_t v31 = *(void *)(a1 + 240);
              do
              {
                int v33 = *(void **)(v31 - 24);
                v31 -= 24;
                int v32 = v33;
                if (v33)
                {
                  *(void *)(v23 - 16) = v32;
                  operator delete(v32);
                }
                uint64_t v23 = v31;
              }
              while (v31 != v30);
            }
            *(void *)(a1 + 240) = v30;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 232, v26 - v25);
        }
        std::vector<BOOL>::resize(a1 + 256, v17 + 1, 0);
        uint64_t v24 = *(void *)(a1 + 232);
      }
      uint64_t v34 = (char **)(v24 + 24 * v17);
      int64_t v36 = v34 + 1;
      int v35 = v34[1];
      unint64_t v37 = (unint64_t)v34[2];
      if ((unint64_t)v35 >= v37)
      {
        int v39 = *v34;
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *v34) >> 2);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v39) >> 2);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v43 = 0x1555555555555555;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *v34) >> 2);
          if (v43 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v44 = (char *)operator new(12 * v43);
          unint64_t v40 = v90;
        }
        else
        {
          BOOL v44 = 0;
        }
        uint64_t v45 = &v44[12 * v40];
        *(void *)uint64_t v45 = v18;
        *((_DWORD *)v45 + 2) = v91;
        uint64_t v38 = v45 + 12;
        if (v35 != v39)
        {
          do
          {
            uint64_t v46 = *(void *)(v35 - 12);
            v35 -= 12;
            int v47 = *((_DWORD *)v35 + 2);
            *(void *)(v45 - 12) = v46;
            v45 -= 12;
            *((_DWORD *)v45 + 2) = v47;
          }
          while (v35 != v39);
          int v35 = *v34;
        }
        void *v34 = v45;
        *int64_t v36 = v38;
        v34[2] = &v44[12 * v43];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)int v35 = v18;
        *((_DWORD *)v35 + 2) = v91;
        uint64_t v38 = v35 + 12;
      }
      *int64_t v36 = v38;
      if (operations_research::Domain::Min(v93, v22) == a4 && operations_research::Domain::Max(v93, v48) == a4)
      {
        operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, (int)v91);
        return;
      }
      *(_DWORD *)double v95 = a3;
      *(void *)&v95[4] = a4;
      uint64_t v49 = *(const char **)v95;
      if (a4 >= (uint64_t)0x8000000000000002) {
        unint64_t v50 = -a4;
      }
      else {
        unint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
      }
      *(_DWORD *)double v95 = a3 ^ 1;
      *(void *)&v95[4] = v50;
      unint64_t v51 = *(const char **)v95;
      unint64_t v53 = HIDWORD(v50);
      if (operations_research::Domain::Min(v93, v48) == a4)
      {
        operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(a1, (const char *)v91, v51, SHIDWORD(v50));
        return;
      }
      if (operations_research::Domain::Max(v93, v52) == a4)
      {
        operations_research::sat::IntegerEncoder::AssociateToIntegerLiteral(a1, (const char *)v91, v49, SHIDWORD(a4));
        return;
      }
      unint64_t v94 = (operations_research::Domain *)HIDWORD(a4);
      int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)a1, v49, SHIDWORD(a4));
      int v55 = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)a1, v51, SHIDWORD(v50));
      uint64_t v56 = *(void *)a1;
      *(_DWORD *)double v95 = AssociatedLiteral;
      *(_DWORD *)&v95[4] = v91 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v56, (int *)v95, 2uLL);
      uint64_t v57 = *(void *)a1;
      *(_DWORD *)double v95 = v55;
      *(_DWORD *)&v95[4] = v91 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v57, (int *)v95, 2uLL);
      uint64_t v58 = *(void *)a1;
      *(_DWORD *)double v95 = AssociatedLiteral ^ 1;
      *(_DWORD *)&v95[4] = v55 ^ 1;
      *(_DWORD *)&v95[8] = v91;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v58, (int *)v95, 3uLL);
      uint64_t v59 = (void)v91 << 32;
      unint64_t v60 = (((void)v91 << 32) + 0x100000000) >> 32;
      uint64_t v61 = *(void *)(a1 + 112);
      uint64_t v62 = *(void *)(a1 + 120);
      char v63 = (uint64_t *)(a1 + 112);
      unint64_t v64 = (v62 - v61) >> 5;
      if (v60 > v64)
      {
        std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v63, v60 - v64);
        uint64_t v61 = *v63;
      }
      uint64_t v65 = v61 + 32 * (int)v91;
      uint64_t v67 = v65 + 8;
      unint64_t v66 = *(void *)v65;
      if (*(void *)v65)
      {
        uint64_t v67 = *(void *)(v65 + 8);
        uint64_t v68 = *(void *)(v65 + 16);
        unint64_t v69 = v66 >> 1;
        if (v66 >> 1 != v68) {
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v68 = 2;
        unint64_t v69 = v66 >> 1;
        if (v66 >> 1 != 2)
        {
LABEL_77:
          unint64_t v70 = v67 + 12 * v69;
          *(void *)unint64_t v70 = v51;
          *(_DWORD *)(v70 + 8) = HIDWORD(v50);
          uint64_t v71 = *(void *)v65;
          goto LABEL_86;
        }
      }
      uint64_t v92 = 2 * v68;
      if ((unint64_t)(2 * v68) > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v72 = (char *)operator new(24 * v68);
      uint64_t v73 = v72;
      unint64_t v74 = &v72[12 * v68];
      *(void *)unint64_t v74 = v51;
      *((_DWORD *)v74 + 2) = v53;
      if (v66 >= 2)
      {
        unint64_t v75 = v72;
        do
        {
          uint64_t v76 = *(void *)v67;
          *((_DWORD *)v75 + 2) = *(_DWORD *)(v67 + 8);
          *(void *)unint64_t v75 = v76;
          v75 += 12;
          v67 += 12;
          --v68;
        }
        while (v68);
      }
      if (v66)
      {
        operator delete(*(void **)(v65 + 8));
        unint64_t v66 = *(void *)v65;
      }
      *(void *)(v65 + 8) = v73;
      *(void *)(v65 + 16) = v92;
      uint64_t v71 = v66 | 1;
LABEL_86:
      *(void *)uint64_t v65 = v71 + 2;
      uint64_t v77 = *v63 + 32 * (v59 >> 32);
      uint64_t v79 = v77 + 8;
      unint64_t v78 = *(void *)v77;
      if (*(void *)v77)
      {
        uint64_t v79 = *(void *)(v77 + 8);
        uint64_t v80 = *(void *)(v77 + 16);
        unint64_t v81 = v78 >> 1;
        if (v78 >> 1 != v80) {
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v80 = 2;
        unint64_t v81 = v78 >> 1;
        if (v78 >> 1 != 2)
        {
LABEL_88:
          unint64_t v82 = v79 + 12 * v81;
          *(void *)unint64_t v82 = v49;
          *(_DWORD *)(v82 + 8) = v94;
          uint64_t v83 = *(void *)v77;
LABEL_97:
          *(void *)uint64_t v77 = v83 + 2;
          return;
        }
      }
      uint64_t v84 = 2 * v80;
      if ((unint64_t)(2 * v80) > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v85 = (char *)operator new(24 * v80);
      uint64_t v86 = v85;
      unint64_t v87 = &v85[12 * v80];
      *(void *)unint64_t v87 = v49;
      *((_DWORD *)v87 + 2) = v94;
      if (v78 >= 2)
      {
        double v88 = v85;
        do
        {
          uint64_t v89 = *(void *)v79;
          *((_DWORD *)v88 + 2) = *(_DWORD *)(v79 + 8);
          *(void *)double v88 = v89;
          v88 += 12;
          v79 += 12;
          --v80;
        }
        while (v80);
      }
      if (v78)
      {
        operator delete(*(void **)(v77 + 8));
        unint64_t v78 = *(void *)v77;
      }
      *(void *)(v77 + 8) = v86;
      *(void *)(v77 + 16) = v84;
      uint64_t v83 = v78 | 1;
      goto LABEL_97;
    }
    operations_research::sat::SatSolver::AddUnitClause(*(void *)a1, a2 ^ 1);
  }
  else
  {
    int v27 = *(_DWORD *)(v19 + 12);
    if (v27 != a2)
    {
      uint64_t v28 = *(void *)a1;
      *(_DWORD *)double v95 = a2;
      *(_DWORD *)&v95[4] = v27 ^ 1;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v28, (int *)v95, 2uLL);
      uint64_t v29 = *(void *)a1;
      *(_DWORD *)double v95 = a2 ^ 1;
      *(_DWORD *)&v95[4] = v27;
      operations_research::sat::SatSolver::AddClauseDuringSearch(v29, (int *)v95, 2uLL);
    }
  }
}

void operations_research::sat::IntegerEncoder::HalfAssociateGivenLiteral(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5 = a2;
  uint64_t v71 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v68 = a2;
  *(_DWORD *)&v68[8] = a3;
  unint64_t v7 = a4 + 1;
  int v8 = (void *)(a1 + 88);
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5;
  if (v7 > v9) {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 88), v7 - v9);
  }
  unint64_t v10 = (void *)(a1 + 112);
  unint64_t v11 = (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 5;
  if (v7 > v11) {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append((uint64_t *)(a1 + 112), v7 - v11);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v14 = (v12 - v13) >> 3;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * v14;
  if (v5 >= -1431655765 * (int)v14)
  {
    unint64_t v16 = v5 + 1;
    if (v16 <= v15)
    {
      if (v16 < v15)
      {
        uint64_t v17 = v13 + 24 * (int)v16;
        if (v12 != v17)
        {
          do
          {
            uint64_t v18 = v12 - 24;
            std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v12 - 24, *(void **)(v12 - 16));
            uint64_t v12 = v18;
          }
          while (v18 != v17);
        }
        *(void *)(a1 + 40) = v17;
      }
    }
    else
    {
      std::vector<std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>::__append((void **)(a1 + 32), v16 - v15);
    }
  }
  unint64_t v19 = (uint64_t **)(*(void *)(a1 + 32) + 24 * v5);
  uint64_t v21 = v19 + 1;
  char v20 = v19[1];
  if (!v20)
  {
    BOOL v22 = v19 + 1;
    goto LABEL_19;
  }
  do
  {
    while (1)
    {
      BOOL v22 = (uint64_t **)v20;
      uint64_t v23 = *(uint64_t *)((char *)v20 + 28);
      if (*(uint64_t *)&v68[4] >= v23) {
        break;
      }
      char v20 = *v22;
      uint64_t v21 = v22;
      if (!*v22) {
        goto LABEL_19;
      }
    }
    if (v23 >= *(uint64_t *)&v68[4])
    {
      int v35 = *((_DWORD *)v22 + 9);
      if (v35 != a4)
      {
        uint64_t v36 = *(void *)a1;
        int v69 = a4;
        int v70 = v35 ^ 1;
        operations_research::sat::SatSolver::AddClauseDuringSearch(v36, &v69, 2uLL);
        uint64_t v37 = *(void *)a1;
        int v69 = a4 ^ 1;
        int v70 = v35;
        operations_research::sat::SatSolver::AddClauseDuringSearch(v37, &v69, 2uLL);
      }
      return;
    }
    char v20 = v22[1];
  }
  while (v20);
  uint64_t v21 = v22 + 1;
LABEL_19:
  uint64_t v24 = (char *)operator new(0x28uLL);
  *(void *)(v24 + 28) = *(void *)&v68[4];
  *((_DWORD *)v24 + 9) = a4;
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = v22;
  *uint64_t v21 = (uint64_t *)v24;
  unint64_t v25 = (uint64_t *)**v19;
  unint64_t v26 = (uint64_t *)v24;
  if (v25)
  {
    *unint64_t v19 = v25;
    unint64_t v26 = *v21;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v19[1], v26);
  v19[2] = (uint64_t *)((char *)v19[2] + 1);
  operations_research::sat::IntegerEncoder::AddImplications(a1, v19, (uint64_t *)v24, a4);
  uint64_t v27 = a4;
  if (((*(void *)(*(void *)(*(void *)(*(void *)a1 + 208) + 24)
                   + (((unint64_t)a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a4) & 1) != 0
    && !*(_DWORD *)(*(void *)a1 + 304))
  {
    int v39 = *(_DWORD **)(a1 + 144);
    unint64_t v38 = *(void *)(a1 + 152);
    if ((unint64_t)v39 >= v38)
    {
      unint64_t v41 = *(_DWORD **)(a1 + 136);
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (v39 - v41) + 1;
      if (v42 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v41) >> 2);
      if (2 * v43 > v42) {
        unint64_t v42 = 2 * v43;
      }
      if (v43 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v44 = 0x1555555555555555;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        if (v44 > 0x1555555555555555) {
          goto LABEL_67;
        }
        uint64_t v45 = (char *)operator new(12 * v44);
      }
      else
      {
        uint64_t v45 = 0;
      }
      uint64_t v46 = &v45[4 * (v39 - v41)];
      *(void *)uint64_t v46 = *(void *)v68;
      *((_DWORD *)v46 + 2) = *(_DWORD *)&v68[8];
      unint64_t v40 = v46 + 12;
      if (v39 != v41)
      {
        do
        {
          uint64_t v47 = *(void *)(v39 - 3);
          v39 -= 3;
          int v48 = v39[2];
          *(void *)(v46 - 12) = v47;
          v46 -= 12;
          *((_DWORD *)v46 + 2) = v48;
        }
        while (v39 != v41);
        int v39 = *(_DWORD **)(a1 + 136);
      }
      *(void *)(a1 + 136) = v46;
      *(void *)(a1 + 144) = v40;
      *(void *)(a1 + 152) = &v45[12 * v44];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(void *)int v39 = *(void *)v68;
      v39[2] = *(_DWORD *)&v68[8];
      unint64_t v40 = v39 + 3;
    }
    *(void *)(a1 + 144) = v40;
    uint64_t v28 = *v8 + 32 * v27;
    uint64_t v30 = v28 + 8;
    unint64_t v29 = *(void *)v28;
    if (*(void *)v28) {
      goto LABEL_46;
    }
LABEL_24:
    uint64_t v31 = 2;
    unint64_t v32 = v29 >> 1;
    if (v29 >> 1 != 2) {
      goto LABEL_25;
    }
LABEL_47:
    uint64_t v49 = 2 * v31;
    if ((unint64_t)(2 * v31) <= 0x1555555555555555)
    {
      unint64_t v50 = (char *)operator new(24 * v31);
      unint64_t v51 = v50;
      uint64_t v52 = &v50[12 * v31];
      *(void *)uint64_t v52 = *(void *)v68;
      *((_DWORD *)v52 + 2) = *(_DWORD *)&v68[8];
      if (v29 >= 2)
      {
        unint64_t v53 = v50;
        do
        {
          uint64_t v54 = *(void *)v30;
          *((_DWORD *)v53 + 2) = *(_DWORD *)(v30 + 8);
          *(void *)unint64_t v53 = v54;
          v53 += 12;
          v30 += 12;
          --v31;
        }
        while (v31);
      }
      if (v29)
      {
        operator delete(*(void **)(v28 + 8));
        unint64_t v29 = *(void *)v28;
      }
      *(void *)(v28 + 8) = v51;
      *(void *)(v28 + 16) = v49;
      uint64_t v34 = v29 | 1;
      goto LABEL_54;
    }
LABEL_67:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v28 = *v8 + 32 * a4;
  uint64_t v30 = v28 + 8;
  unint64_t v29 = *(void *)v28;
  if ((*(void *)v28 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_46:
  uint64_t v30 = *(void *)(v28 + 8);
  uint64_t v31 = *(void *)(v28 + 16);
  unint64_t v32 = v29 >> 1;
  if (v29 >> 1 == v31) {
    goto LABEL_47;
  }
LABEL_25:
  unint64_t v33 = v30 + 12 * v32;
  *(void *)unint64_t v33 = *(void *)v68;
  *(_DWORD *)(v33 + 8) = *(_DWORD *)&v68[8];
  uint64_t v34 = *(void *)v28;
LABEL_54:
  *(void *)uint64_t v28 = v34 + 2;
  uint64_t v55 = *v10 + 32 * v27;
  uint64_t v57 = v55 + 8;
  unint64_t v56 = *(void *)v55;
  if ((*(void *)v55 & 1) == 0)
  {
    uint64_t v58 = 2;
    unint64_t v59 = v56 >> 1;
    if (v56 >> 1 != 2) {
      goto LABEL_56;
    }
LABEL_58:
    uint64_t v62 = 2 * v58;
    if ((unint64_t)(2 * v58) <= 0x1555555555555555)
    {
      char v63 = (char *)operator new(24 * v58);
      unint64_t v64 = v63;
      uint64_t v65 = &v63[12 * v58];
      *(void *)uint64_t v65 = *(void *)v68;
      *((_DWORD *)v65 + 2) = *(_DWORD *)&v68[8];
      if (v56 >= 2)
      {
        unint64_t v66 = v63;
        do
        {
          uint64_t v67 = *(void *)v57;
          *((_DWORD *)v66 + 2) = *(_DWORD *)(v57 + 8);
          *(void *)unint64_t v66 = v67;
          v66 += 12;
          v57 += 12;
          --v58;
        }
        while (v58);
      }
      if (v56)
      {
        operator delete(*(void **)(v55 + 8));
        unint64_t v56 = *(void *)v55;
      }
      *(void *)(v55 + 8) = v64;
      *(void *)(v55 + 16) = v62;
      uint64_t v61 = v56 | 1;
      goto LABEL_65;
    }
    goto LABEL_67;
  }
  uint64_t v57 = *(void *)(v55 + 8);
  uint64_t v58 = *(void *)(v55 + 16);
  unint64_t v59 = v56 >> 1;
  if (v56 >> 1 == v58) {
    goto LABEL_58;
  }
LABEL_56:
  unint64_t v60 = v57 + 12 * v59;
  *(void *)unint64_t v60 = *(void *)v68;
  *(_DWORD *)(v60 + 8) = *(_DWORD *)&v68[8];
  uint64_t v61 = *(void *)v55;
LABEL_65:
  *(void *)uint64_t v55 = v61 + 2;
}

void std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](void **a1, uint64_t *a2)
{
  int v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)int v5 = v6;
    unint64_t v7 = v5 + 12;
LABEL_3:
    a1[1] = v7;
    return;
  }
  int v8 = (char *)*a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x1555555555555555;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(12 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[12 * v9];
  *(void *)uint64_t v14 = *a2;
  *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
  unint64_t v7 = v14 + 12;
  if (v5 != v8)
  {
    do
    {
      uint64_t v15 = *(void *)(v5 - 12);
      v5 -= 12;
      int v16 = *((_DWORD *)v5 + 2);
      *(void *)(v14 - 12) = v15;
      v14 -= 12;
      *((_DWORD *)v14 + 2) = v16;
    }
    while (v5 != v8);
    int v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[12 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

uint64_t operations_research::sat::IntegerTrail::Propagate(operations_research::sat::IntegerTrail *this, operations_research::sat::Trail *a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  unint64_t v4 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
  int v5 = (uint64_t *)*((void *)this + 112);
  uint64_t v6 = (uint64_t *)*((void *)this + 113);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v7 + 16))(v7, v4);
  }
  int v8 = (char *)*((void *)this + 24);
  unint64_t v9 = (char *)*((void *)this + 25);
  unint64_t v10 = (v9 - v8) >> 2;
  if (v10 < v4)
  {
    int v11 = -858993459 * ((*((void *)this + 19) - *((void *)this + 18)) >> 2);
    unint64_t v12 = *((void *)this + 26);
    if ((unint64_t)v9 < v12)
    {
      *(_DWORD *)unint64_t v9 = v11;
      uint64_t v13 = (uint64_t)(v9 + 4);
      goto LABEL_25;
    }
    unint64_t v14 = v10 + 1;
    if ((v10 + 1) >> 62) {
      goto LABEL_81;
    }
    uint64_t v15 = v12 - (void)v8;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        goto LABEL_82;
      }
      uint64_t v17 = operator new(4 * v16);
      uint64_t v18 = &v17[4 * v10];
      unint64_t v19 = &v17[4 * v16];
      *uint64_t v18 = v11;
      uint64_t v13 = (uint64_t)(v18 + 1);
      int64_t v20 = v9 - v8;
      if (v9 == v8) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = (_DWORD *)(4 * v10);
      unint64_t v19 = 0;
      *(_DWORD *)(4 * v10) = v11;
      uint64_t v13 = 4 * v10 + 4;
      int64_t v20 = v9 - v8;
      if (v9 == v8)
      {
LABEL_23:
        *((void *)this + 24) = v18;
        *((void *)this + 25) = v13;
        *((void *)this + 26) = v19;
        if (v8) {
          operator delete(v8);
        }
LABEL_25:
        *((void *)this + 25) = v13;
        uint64_t v30 = (*((void *)this + 31) - *((void *)this + 30)) >> 2;
        unint64_t v32 = (char *)*((void *)this + 28);
        unint64_t v31 = *((void *)this + 29);
        if ((unint64_t)v32 < v31)
        {
          *(_DWORD *)unint64_t v32 = v30;
          uint64_t v33 = (uint64_t)(v32 + 4);
LABEL_46:
          *((void *)this + 28) = v33;
          unint64_t v52 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
          int v79 = (*((_DWORD *)a2 + 2) >> 1) & 0x7FFFFFF;
          v80[0] = (uint64_t)(*((void *)this + 25) - *((void *)this + 24)) >> 2;
          if (v80[0] != v52) {
            google::MakeCheckOpString<int,unsigned long>((int)&v79, (int)v80, "trail->CurrentDecisionLevel() == integer_search_levels_.size()");
          }
          goto LABEL_47;
        }
        uint64_t v34 = (char *)*((void *)this + 27);
        uint64_t v35 = (v32 - v34) >> 2;
        unint64_t v36 = v35 + 1;
        if (!((unint64_t)(v35 + 1) >> 62))
        {
          uint64_t v37 = v31 - (void)v34;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (!v38)
          {
            int v39 = 0;
            unint64_t v40 = (_DWORD *)(4 * v35);
            unint64_t v41 = 0;
            *(_DWORD *)(4 * v35) = v30;
            uint64_t v33 = 4 * v35 + 4;
            int64_t v42 = v32 - v34;
            if (v32 == v34) {
              goto LABEL_44;
            }
            goto LABEL_38;
          }
          if (!(v38 >> 62))
          {
            int v39 = operator new(4 * v38);
            unint64_t v40 = &v39[4 * v35];
            unint64_t v41 = &v39[4 * v38];
            *unint64_t v40 = v30;
            uint64_t v33 = (uint64_t)(v40 + 1);
            int64_t v42 = v32 - v34;
            if (v32 == v34)
            {
LABEL_44:
              *((void *)this + 27) = v40;
              *((void *)this + 28) = v33;
              *((void *)this + 29) = v41;
              if (v34) {
                operator delete(v34);
              }
              goto LABEL_46;
            }
LABEL_38:
            unint64_t v43 = v42 - 4;
            if (v43 < 0x2C) {
              goto LABEL_86;
            }
            if ((unint64_t)(v34 - v39) < 0x20) {
              goto LABEL_86;
            }
            uint64_t v44 = (v43 >> 2) + 1;
            uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v46 = &v32[-v45];
            unint64_t v40 = (_DWORD *)((char *)v40 - v45);
            uint64_t v47 = &v39[4 * v35 - 16];
            int v48 = v32 - 16;
            uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *uint64_t v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 8;
            }
            while (v49);
            unint64_t v32 = v46;
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_86:
              do
              {
                int v51 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *--unint64_t v40 = v51;
              }
              while (v32 != v34);
            }
            goto LABEL_44;
          }
LABEL_82:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
LABEL_81:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    unint64_t v21 = v20 - 4;
    if (v21 < 0x2C) {
      goto LABEL_87;
    }
    if ((unint64_t)(v8 - v17) < 0x20) {
      goto LABEL_87;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v24 = &v9[-v23];
    uint64_t v18 = (_DWORD *)((char *)v18 - v23);
    unint64_t v25 = &v17[4 * v10 - 16];
    unint64_t v26 = v9 - 16;
    uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      _OWORD *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    unint64_t v9 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_87:
      do
      {
        int v29 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--uint64_t v18 = v29;
      }
      while (v9 != v8);
    }
    goto LABEL_23;
  }
LABEL_47:
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel((uint64_t *)this + 54, v4);
  if (v4)
  {
    int v53 = *((_DWORD *)this + 9);
    int v54 = *((_DWORD *)a2 + 3);
    if (v53 < v54) {
      goto LABEL_66;
    }
    return 1;
  }
  uint64_t v55 = *((void *)this + 116);
  uint64_t v57 = *(unsigned char **)(v55 + 136);
  unint64_t v56 = *(unsigned char **)(v55 + 144);
  int64_t v58 = v56 - v57;
  if (v56 == v57)
  {
LABEL_62:
    *(void *)(*((void *)this + 116) + 144) = *(void *)(*((void *)this + 116) + 136);
    int v53 = *((_DWORD *)this + 9);
    int v54 = *((_DWORD *)a2 + 3);
    if (v53 >= v54) {
      return 1;
    }
    while (1)
    {
LABEL_66:
      int v64 = v53++;
      *((_DWORD *)this + 9) = v53;
      uint64_t v65 = *(int *)(*((void *)a2 + 9) + 4 * v64);
      unint64_t v66 = (void *)*((void *)this + 116);
      uint64_t v67 = v66[11];
      unint64_t v68 = (unint64_t)(v66[12] - v67) >> 5;
      int v69 = v66 + 7;
      int v70 = (unint64_t *)(v67 + 32 * v65);
      if ((int)v65 >= (int)v68) {
        uint64_t v71 = v69;
      }
      else {
        uint64_t v71 = v70;
      }
      unint64_t v74 = *v71;
      uint64_t v73 = (uint64_t)(v71 + 1);
      unint64_t v72 = v74;
      if (v74) {
        uint64_t v73 = *(void *)v73;
      }
      if (v72 >= 2) {
        break;
      }
LABEL_65:
      if (v53 >= v54) {
        return 1;
      }
    }
    int v75 = v65;
    unint64_t v76 = v73 + 12 * (v72 >> 1);
    while (1)
    {
      unint64_t v77 = *(int *)(*((void *)this + 51) + ((uint64_t)(*(void *)v73 << 32) >> 30));
      if (v77 == -1
        || ((*(void *)(*(void *)(*((void *)this + 117) + 24) + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v77) & 1) == 0)
      {
        unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v73 + 8);
        uint64_t result = operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral(this, *(void *)v73, v4, v75);
        if (!result) {
          break;
        }
      }
      v73 += 12;
      if (v73 == v76)
      {
        int v53 = *((_DWORD *)this + 9);
        int v54 = *((_DWORD *)a2 + 3);
        goto LABEL_65;
      }
    }
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v58 >> 2) >= 0x1555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (unint64_t)operator new(v58);
    memcpy((void *)v4, v57, v58);
    unint64_t v59 = v4;
    while (1)
    {
      uint64_t v60 = *(void *)v59;
      int v61 = *(_DWORD *)(v59 + 8);
      unint64_t v62 = *(int *)(*((void *)this + 51) + ((uint64_t)(*(void *)v59 << 32) >> 30));
      if (v62 == -1
        || ((*(void *)(*(void *)(*((void *)this + 117) + 24) + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
      {
        unint64_t v81 = 0;
        int v63 = operations_research::sat::IntegerTrail::EnqueueInternal((uint64_t)this, v60, v61, (uint64_t)v80, 0, 0, 0, 0, -858993459 * ((*((void *)this + 19) - *((void *)this + 18)) >> 2));
        if (v81 == v80)
        {
          (*(void (**)(void *))(v80[0] + 32))(v80);
        }
        else if (v81)
        {
          (*(void (**)(void))(*v81 + 40))();
        }
        if (!v63) {
          break;
        }
      }
      v59 += 12;
      if (v59 == v4 + 4 * (v58 >> 2))
      {
        operator delete((void *)v4);
        goto LABEL_62;
      }
    }
    operator delete((void *)v4);
    return 0;
  }
  return result;
}

void sub_23CCE7584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE758C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, char *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v10 = 0;
  uint64_t v7 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v9, a4, a5, a6, a7, -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_23CCE76CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v105 = a2;
  *(_DWORD *)&v105[8] = a3;
  uint64_t v4 = *(void *)&v105[4];
  uint64_t v5 = a1[5];
  if (*(uint64_t *)&v105[4] <= *(void *)(v5 + 12 * (int)a2)) {
    return 1;
  }
  int v8 = a2;
  ++a1[106];
  int v9 = a2 ^ 1;
  if (v4 > -*(void *)(v5 + 12 * (int)(a2 ^ 1)))
  {
    LODWORD(__src) = a4 ^ 1;
    uint64_t v107 = 0;
    uint64_t updated = operations_research::sat::IntegerTrail::EnqueueInternal((int)a1, a2, a3, (int)v106, &__src, 1, 0, 0, -858993459 * ((a1[19] - a1[18]) >> 2));
    if (v107 == v106)
    {
      (*(void (**)(void *))(v106[0] + 32))(v106);
    }
    else if (v107)
    {
      (*(void (**)(void))(*v107 + 40))();
    }
    return updated;
  }
  int v11 = a2;
  unint64_t v12 = (void **)a1[109];
  uint64_t v13 = (void **)a1[110];
  while (v12 != v13)
  {
    unint64_t v14 = *v12++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v14, v11);
  }
  if (a1[24] != a1[25])
  {
    unint64_t v16 = (char *)a1[31];
    uint64_t v15 = (void **)(a1 + 30);
    unint64_t v17 = (unint64_t)&v16[-a1[30]] >> 2;
    int v102 = v17;
    v106[0] = (uint64_t)(a1[34] - a1[33]) >> 2;
    int v101 = v17;
    if (v106[0] != (int)v17) {
      google::MakeCheckOpString<int,unsigned long>((int)&v102, (int)v106, "reason_index == bounds_reason_starts_.size()");
    }
    uint64_t v18 = (a1[37] - a1[36]) >> 2;
    unint64_t v19 = a1[32];
    if ((unint64_t)v16 < v19)
    {
      *(_DWORD *)unint64_t v16 = v18;
      uint64_t v20 = (uint64_t)(v16 + 4);
      goto LABEL_37;
    }
    uint64_t v24 = (char *)*v15;
    uint64_t v25 = v16 - (unsigned char *)*v15;
    uint64_t v26 = v25 >> 2;
    unint64_t v27 = (v25 >> 2) + 1;
    if (v27 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v19 - (void)v24;
    if (v28 >> 1 > v27) {
      unint64_t v27 = v28 >> 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      if (v29 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = operator new(4 * v29);
      unint64_t v31 = &v30[4 * v26];
      unint64_t v32 = &v30[4 * v29];
      *unint64_t v31 = v18;
      uint64_t v20 = (uint64_t)(v31 + 1);
      int64_t v33 = v16 - v24;
      if (v16 == v24) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v30 = 0;
      unint64_t v31 = (_DWORD *)(4 * v26);
      unint64_t v32 = 0;
      *(_DWORD *)(4 * v26) = v18;
      uint64_t v20 = 4 * v26 + 4;
      int64_t v33 = v16 - v24;
      if (v16 == v24) {
        goto LABEL_35;
      }
    }
    unint64_t v34 = v33 - 4;
    if (v34 >= 0x2C)
    {
      if ((unint64_t)(v16 - v30 - v25) >= 0x20)
      {
        uint64_t v36 = (v34 >> 2) + 1;
        uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v35 = &v16[-v37];
        unint64_t v31 = (_DWORD *)((char *)v31 - v37);
        unint64_t v38 = &v30[4 * v26 - 16];
        int v39 = v16 - 16;
        uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *unint64_t v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_35:
          a1[30] = v31;
          a1[31] = v20;
          a1[32] = v32;
          if (v24) {
            operator delete(v24);
          }
LABEL_37:
          a1[31] = v20;
          int v43 = -1431655765 * ((a1[40] - a1[39]) >> 2);
          uint64_t v45 = (char *)a1[34];
          unint64_t v44 = a1[35];
          if ((unint64_t)v45 < v44)
          {
            *(_DWORD *)uint64_t v45 = v43;
            uint64_t v46 = (uint64_t)(v45 + 4);
            goto LABEL_58;
          }
          uint64_t v47 = (char *)a1[33];
          uint64_t v48 = (v45 - v47) >> 2;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v50 = v44 - (void)v47;
          if (v50 >> 1 > v49) {
            unint64_t v49 = v50 >> 1;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v51)
          {
            if (v51 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v52 = operator new(4 * v51);
            int v53 = &v52[4 * v48];
            int v54 = &v52[4 * v51];
            *int v53 = v43;
            uint64_t v46 = (uint64_t)(v53 + 1);
            int64_t v55 = v45 - v47;
            if (v45 == v47) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v52 = 0;
            int v53 = (_DWORD *)(4 * v48);
            int v54 = 0;
            *(_DWORD *)(4 * v48) = v43;
            uint64_t v46 = 4 * v48 + 4;
            int64_t v55 = v45 - v47;
            if (v45 == v47)
            {
LABEL_56:
              a1[33] = v53;
              a1[34] = v46;
              a1[35] = v54;
              if (v47) {
                operator delete(v47);
              }
LABEL_58:
              a1[34] = v46;
              int v65 = a4 ^ 1;
              uint64_t v67 = (int *)a1[37];
              unint64_t v66 = a1[38];
              if ((unint64_t)v67 < v66)
              {
                *uint64_t v67 = v65;
                uint64_t v68 = (uint64_t)(v67 + 1);
LABEL_79:
                a1[37] = v68;
                int v87 = *(_DWORD *)v105;
                int v88 = *(_DWORD *)(a1[5] + 12 * *(int *)v105 + 8);
                unint64_t v90 = (_DWORD *)a1[19];
                unint64_t v89 = a1[20];
                if ((unint64_t)v90 >= v89)
                {
                  uint64_t v92 = (_DWORD *)a1[18];
                  unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * (v90 - v92) + 1;
                  if (v93 > 0xCCCCCCCCCCCCCCCLL) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v89 - (void)v92) >> 2);
                  if (2 * v94 > v93) {
                    unint64_t v93 = 2 * v94;
                  }
                  if (v94 >= 0x666666666666666) {
                    unint64_t v95 = 0xCCCCCCCCCCCCCCCLL;
                  }
                  else {
                    unint64_t v95 = v93;
                  }
                  if (v95)
                  {
                    if (v95 > 0xCCCCCCCCCCCCCCCLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    int v96 = (char *)operator new(20 * v95);
                  }
                  else
                  {
                    int v96 = 0;
                  }
                  uint64_t v97 = &v96[4 * (v90 - v92)];
                  *(void *)uint64_t v97 = v4;
                  *((_DWORD *)v97 + 2) = v87;
                  *((_DWORD *)v97 + 3) = v88;
                  *((_DWORD *)v97 + 4) = v101;
                  uint64_t v91 = v97 + 20;
                  if (v90 != v92)
                  {
                    do
                    {
                      long long v98 = *(_OWORD *)(v90 - 5);
                      *((_DWORD *)v97 - 1) = *(v90 - 1);
                      *(_OWORD *)(v97 - 20) = v98;
                      v97 -= 20;
                      v90 -= 5;
                    }
                    while (v90 != v92);
                    unint64_t v90 = (_DWORD *)a1[18];
                  }
                  a1[18] = v97;
                  a1[19] = v91;
                  a1[20] = &v96[20 * v95];
                  if (v90) {
                    operator delete(v90);
                  }
                }
                else
                {
                  *(void *)unint64_t v90 = v4;
                  void v90[2] = v87;
                  v90[3] = v88;
                  uint64_t v91 = v90 + 5;
                  v90[4] = v101;
                }
                a1[19] = v91;
                uint64_t v99 = a1[5] + 12 * v87;
                *(void *)uint64_t v99 = v4;
                *(_DWORD *)(v99 + 8) = -858993459 * (((unint64_t)v91 - a1[18]) >> 2) - 1;
                return 1;
              }
              int v69 = (int *)a1[36];
              uint64_t v70 = v67 - v69;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                if (v73 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v74 = operator new(4 * v73);
                int v75 = (int *)&v74[4 * v70];
                unint64_t v76 = &v74[4 * v73];
                *int v75 = v65;
                uint64_t v68 = (uint64_t)(v75 + 1);
                int64_t v77 = (char *)v67 - (char *)v69;
                if (v67 == v69) {
                  goto LABEL_77;
                }
              }
              else
              {
                unint64_t v74 = 0;
                int v75 = (int *)(4 * v70);
                unint64_t v76 = 0;
                *(_DWORD *)(4 * v70) = v65;
                uint64_t v68 = 4 * v70 + 4;
                int64_t v77 = (char *)v67 - (char *)v69;
                if (v67 == v69)
                {
LABEL_77:
                  a1[36] = v75;
                  a1[37] = v68;
                  a1[38] = v76;
                  if (v69) {
                    operator delete(v69);
                  }
                  goto LABEL_79;
                }
              }
              unint64_t v78 = v77 - 4;
              if (v78 < 0x2C) {
                goto LABEL_109;
              }
              if ((unint64_t)((char *)v69 - v74) < 0x20) {
                goto LABEL_109;
              }
              uint64_t v79 = (v78 >> 2) + 1;
              uint64_t v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v81 = &v67[v80 / 0xFFFFFFFFFFFFFFFCLL];
              int v75 = (int *)((char *)v75 - v80);
              uint64_t v82 = &v74[4 * v70 - 16];
              uint64_t v83 = v67 - 4;
              uint64_t v84 = v79 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v85 = *(_OWORD *)v83;
                *(v82 - 1) = *((_OWORD *)v83 - 1);
                _OWORD *v82 = v85;
                v82 -= 2;
                v83 -= 8;
                v84 -= 8;
              }
              while (v84);
              uint64_t v67 = v81;
              if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_109:
                do
                {
                  int v86 = *--v67;
                  *--int v75 = v86;
                }
                while (v67 != v69);
              }
              goto LABEL_77;
            }
          }
          unint64_t v56 = v55 - 4;
          if (v56 < 0x2C) {
            goto LABEL_110;
          }
          if ((unint64_t)(v47 - v52) < 0x20) {
            goto LABEL_110;
          }
          uint64_t v57 = (v56 >> 2) + 1;
          uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v59 = &v45[-v58];
          int v53 = (_DWORD *)((char *)v53 - v58);
          uint64_t v60 = &v52[4 * v48 - 16];
          int v61 = v45 - 16;
          uint64_t v62 = v57 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            _OWORD *v60 = v63;
            v60 -= 2;
            v61 -= 32;
            v62 -= 8;
          }
          while (v62);
          uint64_t v45 = v59;
          if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_110:
            do
            {
              int v64 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--int v53 = v64;
            }
            while (v45 != v47);
          }
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v35 = v16;
      }
    }
    else
    {
      uint64_t v35 = v16;
    }
    do
    {
      int v42 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *--unint64_t v31 = v42;
    }
    while (v35 != v24);
    goto LABEL_35;
  }
  uint64_t v21 = a1[5];
  uint64_t v22 = 12 * v8;
  *(void *)(v21 + v22) = v4;
  *(void *)(a1[18] + 20 * v8) = v4;
  uint64_t v23 = (void *)a1[117];
  v23[18] = 0;
  v23[13] = v23[12];
  operations_research::Domain::Domain(v104, *(void *)(v21 + v22), -*(void *)(v21 + 12 * v9));
  uint64_t updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((int)a1, v11, (operations_research::Domain *)v104);
  if ((uint64_t)v104[0]) {
    operator delete(v104[1]);
  }
  return updated;
}

void sub_23CCE7EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE7EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a13)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerTrail::Untrail(operations_research::sat::IntegerTrail *this, const operations_research::sat::Trail *a2, int a3)
{
  ++*((void *)this + 107);
  unint64_t v5 = ((unint64_t)*((unsigned int *)a2 + 2) >> 1) & 0x7FFFFFF;
  uint64_t v6 = (uint64_t *)*((void *)this + 112);
  uint64_t v7 = (uint64_t *)*((void *)this + 113);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, unint64_t))(*(void *)v8 + 16))(v8, v5);
  }
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel((uint64_t *)this + 54, v5);
  int v9 = *((_DWORD *)this + 9);
  if (v9 >= a3) {
    int v9 = a3;
  }
  *((_DWORD *)this + 9) = v9;
  uint64_t v10 = *((void *)this + 24);
  if (v5 < (*((void *)this + 25) - v10) >> 2)
  {
    int v11 = *(_DWORD *)(v10 + 4 * v5);
    *((void *)this + 25) = v10 + 4 * v5;
    int v42 = v11;
    v41[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
    if (v41[0] > (unint64_t)v11) {
      google::MakeCheckOpString<int,unsigned long>((int)&v42, (int)v41, "target >= vars_.size()");
    }
    int v42 = v11;
    uint64_t v12 = *((void *)this + 18);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 19) - v12) >> 2);
    v41[0] = v13;
    if (v13 < v11) {
      google::MakeCheckOpString<int,unsigned long>((int)&v42, (int)v41, "target <= integer_trail_.size()");
    }
    int v14 = v13 - 1;
    if ((int)v13 - 1 >= v11)
    {
      do
      {
        int v34 = v14;
        uint64_t v35 = v12 + 20 * v14;
        unsigned int v38 = *(_DWORD *)(v35 + 8);
        uint64_t v36 = (int *)(v35 + 8);
        unsigned int v37 = v38;
        if ((v38 & 0x80000000) == 0)
        {
          int v39 = *(_DWORD *)(v12 + 20 * v34 + 12);
          uint64_t v40 = *((void *)this + 5);
          *(_DWORD *)(v40 + 12 * v37 + 8) = v39;
          *(void *)(v40 + 12 * *v36) = *(void *)(v12 + 20 * v39);
        }
        int v14 = v34 - 1;
      }
      while (v34 - 1 >= v11);
    }
    if (v11 <= v13)
    {
      if (v11 < v13) {
        *((void *)this + 19) = v12 + 20 * v11;
      }
    }
    else
    {
      std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append((char **)this + 18, v11 - v13);
    }
    uint64_t v15 = *((void *)this + 27);
    unint64_t v16 = (int *)(v15 + 4 * v5);
    unint64_t v17 = *v16;
    unint64_t v18 = (*((void *)this + 28) - v15) >> 2;
    if (v5 <= v18)
    {
      if (v5 < v18) {
        *((void *)this + 28) = v16;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)this + 9, v5 - v18);
    }
    uint64_t v19 = *((void *)this + 30);
    if (v17 < (*((void *)this + 31) - v19) >> 2)
    {
      unint64_t v20 = *(int *)(v19 + 4 * v17);
      uint64_t v21 = *((void *)this + 36);
      unint64_t v22 = (*((void *)this + 37) - v21) >> 2;
      if (v20 <= v22)
      {
        if (v20 < v22) {
          *((void *)this + 37) = v21 + 4 * v20;
        }
      }
      else
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)this + 288, v20 - v22);
      }
      unint64_t v23 = *(int *)(*((void *)this + 33) + 4 * v17);
      uint64_t v24 = *((void *)this + 39);
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 40) - v24) >> 2);
      if (v23 <= v25)
      {
        if (v23 < v25)
        {
          *((void *)this + 40) = v24 + 12 * (int)v23;
          uint64_t v26 = *((void *)this + 42);
          if (v23 < (*((void *)this + 43) - v26) >> 2) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v26 = *((void *)this + 42);
          if (v23 < (*((void *)this + 43) - v26) >> 2) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        std::vector<operations_research::sat::IntegerLiteral>::__append((void **)this + 39, v23 - v25);
        uint64_t v26 = *((void *)this + 42);
        if (v23 < (*((void *)this + 43) - v26) >> 2)
        {
LABEL_30:
          *((void *)this + 43) = v26 + 4 * v23;
          uint64_t v27 = *((void *)this + 30);
          unint64_t v31 = (*((void *)this + 31) - v27) >> 2;
          BOOL v29 = v17 >= v31;
          std::vector<int>::size_type v30 = v17 - v31;
          if (v17 <= v31)
          {
LABEL_31:
            if (!v29) {
              *((void *)this + 31) = v27 + 4 * v17;
            }
            goto LABEL_33;
          }
LABEL_28:
          std::vector<int>::__append((std::vector<int> *)this + 10, v30);
LABEL_33:
          uint64_t v32 = *((void *)this + 33);
          unint64_t v33 = (*((void *)this + 34) - v32) >> 2;
          if (v17 <= v33)
          {
            if (v17 < v33) {
              *((void *)this + 34) = v32 + 4 * v17;
            }
          }
          else
          {
            std::vector<int>::__append((std::vector<int> *)this + 11, v17 - v33);
          }
          return;
        }
      }
      uint64_t v27 = *((void *)this + 30);
      unint64_t v28 = (*((void *)this + 31) - v27) >> 2;
      BOOL v29 = v17 >= v28;
      std::vector<int>::size_type v30 = v17 - v28;
      if (v17 <= v28) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
}

void sub_23CCE82F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCE82FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  BOOL v3 = __sz >= v2;
  std::vector<int>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void operations_research::sat::IntegerTrail::ReserveSpaceForNumVariables(operations_research::sat::IntegerTrail *this, int a2)
{
  std::vector<int>::size_type v4 = (char *)*((void *)this + 5);
  unint64_t v5 = 2 * a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - (void)v4) >> 2) < v5)
  {
    if (a2 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)*((void *)this + 6);
    uint64_t v7 = (char *)operator new(12 * v5);
    uint64_t v8 = &v7[12 * ((v6 - v4) / 12)];
    int v9 = v8;
    if (v6 != v4)
    {
      int v9 = &v7[12 * ((v6 - v4) / 12)];
      do
      {
        uint64_t v10 = *(void *)(v6 - 12);
        v6 -= 12;
        int v11 = *((_DWORD *)v6 + 2);
        *(void *)(v9 - 12) = v10;
        v9 -= 12;
        *((_DWORD *)v9 + 2) = v11;
      }
      while (v6 != v4);
    }
    *((void *)this + 5) = v9;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = &v7[12 * v5];
    if (v4) {
      operator delete(v4);
    }
  }
  uint64_t v12 = (unsigned char *)*((void *)this + 51);
  if (v5 > (uint64_t)(*((void *)this + 53) - (void)v12) >> 2)
  {
    if (a2 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (unsigned char *)*((void *)this + 52);
    int v14 = (char *)operator new(4 * v5);
    uint64_t v15 = v13 - v12;
    unint64_t v16 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v17 = v16;
    if (v13 == v12) {
      goto LABEL_18;
    }
    if ((unint64_t)(v15 - 4) >= 0x2C)
    {
      unint64_t v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
      if (v13 - v14 - (v15 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        uint64_t v18 = v15 >> 2;
        unint64_t v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
        uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v21 = &v13[-v20];
        unint64_t v17 = &v16[-v20];
        unint64_t v22 = &v14[4 * v18 - 16];
        unint64_t v23 = (long long *)(v13 - 16);
        uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v25 = *v23;
          *((_OWORD *)v22 - 1) = *(v23 - 1);
          *(_OWORD *)unint64_t v22 = v25;
          v22 -= 32;
          v23 -= 2;
          v24 -= 8;
        }
        while (v24);
        unint64_t v13 = v21;
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          *((void *)this + 51) = v17;
          *((void *)this + 52) = v16;
          *((void *)this + 53) = &v14[4 * v5];
          if (v12) {
            operator delete(v12);
          }
          goto LABEL_20;
        }
      }
    }
    else
    {
      unint64_t v17 = &v14[(v13 - v12) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      int v26 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v17 - 1) = v26;
      v17 -= 4;
    }
    while (v13 != v12);
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v27 = (unsigned char *)*((void *)this + 18);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 20) - (void)v27) >> 2) < v5)
  {
    if (a2 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = (unsigned char *)*((void *)this + 19);
    BOOL v29 = (char *)operator new(20 * v5);
    std::vector<int>::size_type v30 = &v29[20 * ((v28 - v27) / 20)];
    unint64_t v31 = v30;
    if (v28 != v27)
    {
      uint64_t v32 = &v29[20 * ((v28 - v27) / 20)];
      do
      {
        long long v33 = *(_OWORD *)(v28 - 20);
        unint64_t v31 = v32 - 20;
        *((_DWORD *)v32 - 1) = *((_DWORD *)v28 - 1);
        *(_OWORD *)(v32 - 20) = v33;
        v28 -= 20;
        v32 -= 20;
      }
      while (v28 != v27);
    }
    *((void *)this + 18) = v31;
    *((void *)this + 19) = v30;
    *((void *)this + 20) = &v29[20 * v5];
    if (v27) {
      operator delete(v27);
    }
  }
  std::vector<operations_research::Domain>::reserve(*((uint64_t **)this + 115), v5);
  int v34 = (unsigned char *)*((void *)this + 9);
  if (v5 > (uint64_t)(*((void *)this + 11) - (void)v34) >> 2)
  {
    if (a2 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = (unsigned char *)*((void *)this + 10);
    uint64_t v36 = (char *)operator new(4 * v5);
    uint64_t v37 = v35 - v34;
    unsigned int v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    int v39 = v38;
    if (v35 == v34) {
      goto LABEL_37;
    }
    if ((unint64_t)(v37 - 4) >= 0x2C)
    {
      int v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
      if (v35 - v36 - (v37 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        uint64_t v40 = v37 >> 2;
        unint64_t v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
        uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        int v43 = &v35[-v42];
        int v39 = &v38[-v42];
        unint64_t v44 = &v36[4 * v40 - 16];
        uint64_t v45 = (long long *)(v35 - 16);
        uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)unint64_t v44 = v47;
          v44 -= 32;
          v45 -= 2;
          v46 -= 8;
        }
        while (v46);
        uint64_t v35 = v43;
        if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          *((void *)this + 9) = v39;
          *((void *)this + 10) = v38;
          *((void *)this + 11) = &v36[4 * v5];
          if (v34) {
            operator delete(v34);
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      int v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      int v48 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *((_DWORD *)v39 - 1) = v48;
      v39 -= 4;
    }
    while (v35 != v34);
    goto LABEL_37;
  }
LABEL_39:
  unint64_t v49 = (unsigned char *)*((void *)this + 74);
  if (v5 <= (uint64_t)(*((void *)this + 76) - (void)v49) >> 2) {
    return;
  }
  if (a2 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v50 = (unsigned char *)*((void *)this + 75);
  unint64_t v51 = (char *)operator new(4 * v5);
  uint64_t v52 = v50 - v49;
  int v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
  int v54 = v53;
  if (v50 != v49)
  {
    if ((unint64_t)(v52 - 4) < 0x2C)
    {
      int v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_48:
        int v63 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v54 - 1) = v63;
        v54 -= 4;
      }
      while (v50 != v49);
      goto LABEL_49;
    }
    int v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v50 - &v51[v52 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20) {
      goto LABEL_48;
    }
    uint64_t v55 = v52 >> 2;
    unint64_t v56 = ((unint64_t)(v52 - 4) >> 2) + 1;
    uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v58 = &v50[-v57];
    int v54 = &v53[-v57];
    unint64_t v59 = &v51[4 * v55 - 16];
    uint64_t v60 = (long long *)(v50 - 16);
    uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v62 = *v60;
      *((_OWORD *)v59 - 1) = *(v60 - 1);
      *(_OWORD *)unint64_t v59 = v62;
      v59 -= 32;
      v60 -= 2;
      v61 -= 8;
    }
    while (v61);
    uint64_t v50 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_48;
    }
  }
LABEL_49:
  *((void *)this + 74) = v54;
  *((void *)this + 75) = v53;
  *((void *)this + 76) = &v51[4 * v5];
  if (v49)
  {
    operator delete(v49);
  }
}

uint64_t operations_research::sat::IntegerTrail::AddIntegerVariable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void **)(a1 + 40);
  unsigned int v7 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
  uint64_t v8 = a1 + 408;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 408, &operations_research::sat::kNoLiteralIndex);
  *(void *)std::vector<int>::value_type __x = a2;
  int v9 = (void *)(a1 + 144);
  LODWORD(__p[0]) = -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2);
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](v6, (uint64_t *)__x);
  int v11 = *(char **)(a1 + 152);
  unint64_t v10 = *(void *)(a1 + 160);
  unsigned int v63 = v7;
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = (char *)*v9;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-*v9] >> 2);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      goto LABEL_72;
    }
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v13) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x666666666666666) {
      unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_73;
      }
      uint64_t v18 = (char *)operator new(20 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    unint64_t v19 = &v18[20 * v14];
    *(void *)unint64_t v19 = a2;
    *((_DWORD *)v19 + 3) = 0;
    *((_DWORD *)v19 + 4) = 0;
    uint64_t v20 = &v18[20 * v17];
    unsigned int v7 = v63;
    *((_DWORD *)v19 + 2) = v63;
    uint64_t v12 = v19 + 20;
    if (v11 != v13)
    {
      do
      {
        long long v21 = *(_OWORD *)(v11 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v11 - 1);
        *(_OWORD *)(v19 - 20) = v21;
        v19 -= 20;
        v11 -= 20;
      }
      while (v11 != v13);
      int v11 = (char *)*v9;
    }
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v12;
    *(void *)(a1 + 160) = v20;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)int v11 = a2;
    *((_DWORD *)v11 + 3) = 0;
    *((_DWORD *)v11 + 4) = 0;
    uint64_t v12 = v11 + 20;
    *((_DWORD *)v11 + 2) = v7;
  }
  *(void *)(a1 + 152) = v12;
  unint64_t v22 = *(uint64_t **)(a1 + 920);
  operations_research::Domain::Domain(__x, a2, a3);
  unint64_t v23 = v22[1];
  if (v23 >= v22[2])
  {
    uint64_t v24 = std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(v22, (uint64_t)__x);
    char v25 = __x[0];
    v22[1] = v24;
    if (v25) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)unint64_t v23 = 0;
    *(void *)unint64_t v23 = *(void *)__x;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
    v22[1] = v23 + 24;
  }
  int v26 = v7 ^ 1;
  int v64 = v7 ^ 1;
  *(void *)std::vector<int>::value_type __x = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
  if (*(void *)__x != (v7 ^ 1)) {
    google::MakeCheckOpString<int,unsigned long>((int)&v64, (int)__x, "NegationOf(i).value() == vars_.size()");
  }
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(v8, &operations_research::sat::kNoLiteralIndex);
  uint64_t v27 = -a3;
  *(void *)std::vector<int>::value_type __x = v27;
  LODWORD(__p[0]) = -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2);
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100](v6, (uint64_t *)__x);
  BOOL v29 = *(char **)(a1 + 152);
  unint64_t v28 = *(void *)(a1 + 160);
  if ((unint64_t)v29 < v28)
  {
    *(void *)BOOL v29 = v27;
    *((_DWORD *)v29 + 3) = 0;
    *((_DWORD *)v29 + 4) = 0;
    std::vector<int>::size_type v30 = v29 + 20;
    *((_DWORD *)v29 + 2) = v26;
    goto LABEL_40;
  }
  unint64_t v31 = (char *)*v9;
  unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v29[-*v9] >> 2);
  unint64_t v33 = v32 + 1;
  if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_72:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (void)v31) >> 2);
  if (2 * v34 > v33) {
    unint64_t v33 = 2 * v34;
  }
  if (v34 >= 0x666666666666666) {
    unint64_t v35 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v35 = v33;
  }
  if (!v35)
  {
    uint64_t v36 = 0;
    goto LABEL_35;
  }
  if (v35 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_73:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v36 = (char *)operator new(20 * v35);
LABEL_35:
  uint64_t v37 = &v36[20 * v32];
  *(void *)uint64_t v37 = v27;
  *((_DWORD *)v37 + 3) = 0;
  *((_DWORD *)v37 + 4) = 0;
  *((_DWORD *)v37 + 2) = v26;
  std::vector<int>::size_type v30 = v37 + 20;
  if (v29 != v31)
  {
    do
    {
      long long v38 = *(_OWORD *)(v29 - 20);
      *((_DWORD *)v37 - 1) = *((_DWORD *)v29 - 1);
      *(_OWORD *)(v37 - 20) = v38;
      v37 -= 20;
      v29 -= 20;
    }
    while (v29 != v31);
    BOOL v29 = (char *)*v9;
  }
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v30;
  *(void *)(a1 + 160) = &v36[20 * v35];
  if (v29) {
    operator delete(v29);
  }
LABEL_40:
  *(void *)(a1 + 152) = v30;
  int v39 = *(uint64_t **)(a1 + 920);
  operations_research::Domain::Domain(__x, v27, -a2);
  unint64_t v40 = v39[1];
  if (v40 >= v39[2])
  {
    uint64_t v41 = std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(v39, (uint64_t)__x);
    char v42 = __x[0];
    v39[1] = v41;
    if (v42) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)unint64_t v40 = 0;
    *(void *)unint64_t v40 = *(void *)__x;
    *(_OWORD *)(v40 + 8) = *(_OWORD *)__p;
    v39[1] = v40 + 24;
  }
  uint64_t v43 = *(void *)(a1 + 72);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
  __x[0] = -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2);
  unint64_t v45 = (*(void *)(a1 + 80) - v43) >> 2;
  if (v44 <= v45)
  {
    if (v44 < v45) {
      *(void *)(a1 + 80) = v43 + 4 * v44;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 72), v44 - v45, __x);
    unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
  }
  __x[0] = 0;
  uint64_t v46 = *(void *)(a1 + 592);
  unint64_t v47 = (*(void *)(a1 + 600) - v46) >> 2;
  if (v44 <= v47)
  {
    if (v44 < v47) {
      *(void *)(a1 + 600) = v46 + 4 * v44;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 592), v44 - v47, __x);
  }
  int v48 = *(int ***)(a1 + 872);
  for (unint64_t i = *(int ***)(a1 + 880); v48 != i; ++v48)
  {
    uint64_t v50 = *v48;
    int v51 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
    if (**v48 > v51)
    {
      uint64_t v52 = (int *)*((void *)v50 + 7);
      int v53 = (int *)*((void *)v50 + 8);
      if (v52 == v53)
      {
        int v54 = 0;
      }
      else
      {
        int v54 = 0;
        uint64_t v55 = (int *)*((void *)v50 + 7);
        do
        {
          if (*v55 < v51) {
            v52[v54++] = *v55;
          }
          ++v55;
        }
        while (v55 != v53);
      }
      unint64_t v56 = v53 - v52;
      if (v54 <= v56)
      {
        if (v54 < v56) {
          *((void *)v50 + 8) = &v52[v54];
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(v50 + 14), v54 - v56);
      }
    }
    int v57 = v51 & ~(v51 >> 31);
    *uint64_t v50 = v57;
    uint64_t v58 = *((void *)v50 + 1);
    uint64_t v59 = *((void *)v50 + 2);
    unint64_t v60 = (v57 + 63) >> 6;
    *(void *)std::vector<int>::value_type __x = 0;
    unint64_t v61 = (v59 - v58) >> 3;
    if (v60 > v61)
    {
      std::vector<unsigned long long>::__append((uint64_t)(v50 + 2), v60 - v61, (uint64_t *)__x);
    }
    else if (v60 < v61)
    {
      *((void *)v50 + 2) = v58 + 8 * v60;
    }
  }
  return v63;
}

void sub_23CCE8D7C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE8D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p)
{
  if (a12) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::IntegerTrail::AddIntegerVariable(operations_research::sat::IntegerTrail *this, long long **a2)
{
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)a2))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 625);
    unint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: !domain.IsEmpty() ", 32);
    goto LABEL_19;
  }
  uint64_t v5 = operations_research::Domain::Min((operations_research::Domain *)a2, v4);
  uint64_t v7 = operations_research::Domain::Max((operations_research::Domain *)a2, v6);
  uint64_t v8 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)this, v5, v7);
  uint64_t v18 = 0;
  unint64_t v9 = (unint64_t)*a2;
  if ((*a2 & 1) == 0)
  {
    uint64_t v18 = (uint64_t)*a2;
    *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 1);
    goto LABEL_13;
  }
  unint64_t v10 = a2[1];
  unint64_t v11 = v9 >> 1;
  if (v9 >= 4)
  {
    if (v9 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = operator new(16 * v11);
    __p[0] = v12;
    __p[1] = (void *)(v9 >> 1);
    uint64_t v18 = 1;
    goto LABEL_10;
  }
  if (v9 >= 2)
  {
    uint64_t v12 = __p;
    do
    {
LABEL_10:
      long long v14 = *v10++;
      *v12++ = v14;
      --v11;
    }
    while (v11);
    uint64_t v13 = v18;
    goto LABEL_12;
  }
  uint64_t v13 = 0;
LABEL_12:
  uint64_t v18 = v13 + (v9 & 0xFFFFFFFFFFFFFFFELL);
LABEL_13:
  if ((operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)this, v8, (operations_research::Domain *)&v18) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v20, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 628);
    unint64_t v17 = (void *)google::LogMessage::stream((google::LogMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Check failed: UpdateInitialDomain(var, domain) ", 47);
LABEL_19:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v20);
  }
  if (v18) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_23CCE8F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, char a13)
{
  if (a10) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CCE8F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::IntegerTrail::UpdateInitialDomain(uint64_t a1, int a2, operations_research::Domain *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  *(_DWORD *)uint64_t v59 = (*(_DWORD *)(*(void *)(a1 + 936) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v58) = 0;
  if (*(_DWORD *)v59) {
    google::MakeCheckOpString<int,int>((int)v59, (int)&v58, "trail_->CurrentDecisionLevel() == 0");
  }
  uint64_t v6 = (const operations_research::Domain *)(**(void **)(a1 + 920) + 24 * a2);
  operations_research::Domain::IntersectionWith(this, v6, (unint64_t *)v59);
  uint64_t v7 = *(void *)this;
  if (v59 == (unsigned char *)this)
  {
    if (v7) {
      operator delete(*(void **)&v59[8]);
    }
  }
  else
  {
    uint64_t v8 = (void **)((char *)this + 8);
    if (v7) {
      operator delete(*v8);
    }
    *(void *)this = *(void *)v59;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)&v59[8];
  }
  unint64_t v9 = *(void *)v6;
  uint64_t v12 = (void *)*((void *)v6 + 1);
  unint64_t v11 = (void *)((char *)v6 + 8);
  unint64_t v10 = v12;
  if ((v9 & 1) == 0) {
    unint64_t v10 = v11;
  }
  unint64_t v13 = (8 * v9) & 0xFFFFFFFFFFFFFFF0;
  if (v13 == 16 * (*(void *)this >> 1))
  {
    if (v9 < 2) {
      return 1;
    }
    long long v14 = (void *)((char *)v10 + v13);
    if (*(void *)this) {
      unint64_t v15 = (void *)*((void *)this + 1);
    }
    else {
      unint64_t v15 = (void *)((char *)this + 8);
    }
    while (*v10 == *v15 && v10[1] == v15[1])
    {
      v10 += 2;
      v15 += 2;
      if (v10 == v14) {
        return 1;
      }
    }
  }
  if (operations_research::Domain::IsEmpty(this)) {
    return 0;
  }
  unint64_t v19 = (unint64_t *)(**(void **)(a1 + 920) + 24 * a2);
  if (v19 != (unint64_t *)this)
  {
    if (*(void *)this) {
      uint64_t v20 = (long long *)*((void *)this + 1);
    }
    else {
      uint64_t v20 = (long long *)((char *)this + 8);
    }
    absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(v19, v20, *(uint64_t *)this >> 1);
  }
  operations_research::Domain::Negation(this, v17, (unint64_t *)v59);
  int v22 = a2;
  int v23 = a2 ^ 1;
  uint64_t v24 = (unsigned char *)(**(void **)(a1 + 920) + 24 * (a2 ^ 1));
  if (v24 == v59)
  {
    if (v59[0]) {
      operator delete(*(void **)&v59[8]);
    }
  }
  else
  {
    char v25 = (void **)(v24 + 8);
    if (*v24) {
      operator delete(*v25);
    }
    *(void *)uint64_t v24 = *(void *)v59;
    *(_OWORD *)char v25 = *(_OWORD *)&v59[8];
  }
  if ((int)(*(void *)this >> 1) >= 2)
  {
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((void *)(a1 + 432), a2, 0);
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((void *)(a1 + 432), a2 ^ 1, 0);
  }
  uint64_t v26 = operations_research::Domain::Min(this, v21);
  *(_DWORD *)uint64_t v59 = a2;
  *(void *)&v59[4] = v26;
  unint64_t v60 = 0;
  char v28 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, *(uint64_t *)v59, SHIDWORD(v26), (uint64_t)v59, 0, 0, 0, 0, -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
  if (v60 == v59)
  {
    (*(void (**)(unsigned char *))(*(void *)v59 + 32))(v59);
  }
  else if (v60)
  {
    (*(void (**)(void))(*(void *)v60 + 40))();
  }
  if ((v28 & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 656);
    unint64_t v56 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: Enqueue(IntegerLiteral::GreaterOrEqual(var, IntegerValue(domain.Min())), {}, {}) ", 95);
    goto LABEL_88;
  }
  uint64_t v29 = operations_research::Domain::Max(this, v27);
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  if (v29 >= (uint64_t)0x8000000000000002) {
    uint64_t v30 = -v29;
  }
  *(_DWORD *)uint64_t v59 = v23;
  *(void *)&v59[4] = v30;
  unint64_t v60 = 0;
  char v31 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, *(uint64_t *)v59, SHIDWORD(v30), (uint64_t)v59, 0, 0, 0, 0, -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
  if (v60 == v59)
  {
    (*(void (**)(unsigned char *))(*(void *)v59 + 32))(v59);
  }
  else if (v60)
  {
    (*(void (**)(void))(*(void *)v60 + 40))();
  }
  if ((v31 & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 658);
    int v57 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: Enqueue(IntegerLiteral::LowerOrEqual(var, IntegerValue(domain.Max())), {}, {}) ", 93);
LABEL_88:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
  }
  operations_research::sat::IntegerEncoder::PartialDomainEncoding(*(void **)(a1 + 928), v22, (char **)v59);
  unint64_t v32 = *(int **)v59;
  unint64_t v33 = *(int **)&v59[8];
  if (*(void *)v59 != *(void *)&v59[8])
  {
    LODWORD(v34) = 0;
    int v35 = 0;
    uint64_t v36 = (char **)((char *)this + 8);
    while (1)
    {
      uint64_t v37 = *(void *)v32;
      unint64_t v38 = v32[2];
      uint64_t v39 = *(void *)this;
      uint64_t v40 = *(void *)this >> 1;
      if ((int)v34 < (int)v40)
      {
        if (v39)
        {
          unint64_t v44 = (uint64_t *)&(*v36)[16 * (int)v34 + 8];
          uint64_t v45 = (int)v40 - (uint64_t)(int)v34;
          while (1)
          {
            uint64_t v46 = *v44;
            v44 += 2;
            if (v37 <= v46) {
              break;
            }
            LODWORD(v34) = v34 + 1;
            if (!--v45)
            {
LABEL_57:
              uint64_t v34 = *(void *)this >> 1;
              goto LABEL_62;
            }
          }
        }
        else
        {
          uint64_t v41 = (uint64_t *)((char *)this + 16 * (int)v34 + 16);
          uint64_t v42 = (int)v40 - (uint64_t)(int)v34;
          while (1)
          {
            uint64_t v43 = *v41;
            v41 += 2;
            if (v37 <= v43) {
              break;
            }
            LODWORD(v34) = v34 + 1;
            if (!--v42) {
              goto LABEL_57;
            }
          }
        }
      }
      if (v34 == v40) {
        goto LABEL_62;
      }
      unint64_t v47 = (char *)this + 8;
      if (v39) {
        unint64_t v47 = *v36;
      }
      if (v37 < *(void *)&v47[16 * (int)v34])
      {
LABEL_62:
        int v48 = v32[2];
        ++v35;
        uint64_t v49 = *(void *)(a1 + 936);
        unint64_t v50 = *(void *)(*(void *)(v49 + 24) + 8 * (v38 >> 6));
        if ((v50 >> v38))
        {
          uint64_t v18 = 0;
          unint64_t v32 = *(int **)v59;
          if (*(void *)v59) {
            goto LABEL_66;
          }
          goto LABEL_67;
        }
        if (((v50 >> (v48 & 0x3F ^ 1u)) & 1) == 0)
        {
          int v51 = v48 ^ 1;
          *(_DWORD *)(*(void *)(v49 + 72) + 4 * *(int *)(v49 + 12)) = v51;
          *(_DWORD *)(v49 + 8) = (*(_DWORD *)(v49 + 8) & 0xFFFFFFE | v51 & 1) ^ 0x10000001;
          *(void *)(*(void *)(v49 + 120) + 8 * ((int)v38 >> 1)) = *(void *)(v49 + 8);
          *(void *)(*(void *)(v49 + 24) + 8 * (v38 >> 6)) |= 1 << v51;
          ++*(_DWORD *)(v49 + 12);
        }
      }
      v32 += 3;
      if (v32 == v33)
      {
        uint64_t v18 = 1;
        unint64_t v32 = *(int **)v59;
        if (*(void *)v59) {
          goto LABEL_66;
        }
        goto LABEL_67;
      }
    }
  }
  int v35 = 0;
  uint64_t v18 = 1;
  if (*(void *)v59)
  {
LABEL_66:
    *(void *)&v59[8] = v32;
    operator delete(v32);
  }
LABEL_67:
  if (v35 > 0) {
    int v52 = v18;
  }
  else {
    int v52 = 0;
  }
  if (v52 == 1)
  {
    if (*operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__ >= 1
      && (operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::IntegerTrail::UpdateInitialDomain(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,operations_research::Domain)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer.cc", 675);
      int v53 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Domain intersection fixed ", 26);
      int v54 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" equality literal corresponding to values outside the new domain.", 65);
      google::LogMessage::~LogMessage((google::LogMessage *)v59);
    }
    return 1;
  }
  return v18;
}

void sub_23CCE9634(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CCE9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CCE9664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CCE9678(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CCE9680(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::IntegerTrail::InitialVariableDomain(uint64_t a1, int a2)
{
  return **(void **)(a1 + 920) + 24 * a2;
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set(void *a1, int a2, int a3)
{
  uint64_t v6 = 0;
  unint64_t v9 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = v9;
  unint64_t v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + a2));
  unint64_t v11 = (v10 >> 7) ^ (v9 >> 12);
  uint64_t v12 = v7[3];
  while (1)
  {
    unint64_t v13 = v11 & v12;
    uint64_t v14 = *(void *)(v8 + v13);
    unint64_t v15 = ((v14 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v15)
    {
      uint64_t v16 = a1[2];
      while (1)
      {
        unint64_t v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
        if (*(_DWORD *)(v16 + 8 * v17) == a2) {
          break;
        }
        v15 &= v15 - 1;
        if (!v15) {
          goto LABEL_6;
        }
      }
      uint64_t v18 = (_DWORD *)(v16 + 8 * v17);
      if ((int)((a1[11] - a1[10]) >> 2) <= 0) {
        goto LABEL_43;
      }
      int v19 = v18[1];
      long long v21 = (_DWORD *)a1[8];
      unint64_t v20 = a1[9];
      if ((unint64_t)v21 < v20)
      {
        *(unsigned char *)long long v21 = 0;
        *(_DWORD *)((char *)v21 + 1) = a2;
        int v22 = (char *)(v21 + 3);
        v21[2] = v19;
        goto LABEL_42;
      }
      uint64_t v24 = (void **)(a1 + 7);
      char v25 = (unsigned char *)a1[7];
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v25) >> 2) + 1;
      if (v26 <= 0x1555555555555555)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v25) >> 2);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v28 = 0x1555555555555555;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          if (v28 > 0x1555555555555555) {
            goto LABEL_45;
          }
          uint64_t v29 = (char *)operator new(12 * v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        int v35 = &v29[4 * (((char *)v21 - v25) >> 2)];
        *int v35 = 0;
        uint64_t v36 = &v29[12 * v28];
        *(_DWORD *)(v35 + 1) = a2;
        *((_DWORD *)v35 + 2) = v19;
        int v22 = v35 + 12;
        if (v21 != (_DWORD *)v25)
        {
          do
          {
            uint64_t v37 = *(void *)(v21 - 3);
            v21 -= 3;
            int v38 = v21[2];
            *(void *)(v35 - 12) = v37;
            v35 -= 12;
            *((_DWORD *)v35 + 2) = v38;
          }
          while (v21 != (_DWORD *)v25);
LABEL_39:
          long long v21 = *v24;
        }
        goto LABEL_40;
      }
LABEL_44:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
LABEL_6:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      break;
    }
    v6 += 8;
    unint64_t v11 = v6 + v13;
  }
  uint64_t v18 = (_DWORD *)(a1[2]
                 + 8
                 * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(v7, v10));
  *uint64_t v18 = a2;
  v18[1] = a3;
  if ((int)((a1[11] - a1[10]) >> 2) < 1) {
    goto LABEL_43;
  }
  long long v21 = (_DWORD *)a1[8];
  unint64_t v23 = a1[9];
  if ((unint64_t)v21 < v23)
  {
    *(unsigned char *)long long v21 = 1;
    *(_DWORD *)((char *)v21 + 1) = a2;
    v21[2] = 0;
    int v22 = (char *)(v21 + 3);
    goto LABEL_42;
  }
  uint64_t v24 = (void **)(a1 + 7);
  uint64_t v30 = (unsigned char *)a1[7];
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - v30) >> 2) + 1;
  if (v31 > 0x1555555555555555) {
    goto LABEL_44;
  }
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v30) >> 2);
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v33 = 0x1555555555555555;
  }
  else {
    unint64_t v33 = v31;
  }
  if (v33)
  {
    if (v33 <= 0x1555555555555555)
    {
      uint64_t v34 = (char *)operator new(12 * v33);
      goto LABEL_37;
    }
LABEL_45:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v34 = 0;
LABEL_37:
  int v35 = &v34[4 * (((char *)v21 - v30) >> 2)];
  *int v35 = 1;
  uint64_t v36 = &v34[12 * v33];
  *(_DWORD *)(v35 + 1) = a2;
  *((_DWORD *)v35 + 2) = 0;
  int v22 = v35 + 12;
  if (v21 != (_DWORD *)v30)
  {
    do
    {
      uint64_t v39 = *(void *)(v21 - 3);
      v21 -= 3;
      int v40 = v21[2];
      *(void *)(v35 - 12) = v39;
      v35 -= 12;
      *((_DWORD *)v35 + 2) = v40;
    }
    while (v21 != (_DWORD *)v30);
    goto LABEL_39;
  }
LABEL_40:
  a1[7] = v35;
  a1[8] = v22;
  a1[9] = v36;
  if (v21) {
    operator delete(v21);
  }
LABEL_42:
  a1[8] = v22;
LABEL_43:
  v18[1] = a3;
}

uint64_t operations_research::sat::Trail::EnqueueWithUnitReason(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 72) + 4 * *(int *)(result + 12)) = a2;
  *(_DWORD *)(result + 8) = (*(_DWORD *)(result + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
  *(void *)(*(void *)(result + 120) + 8 * (a2 >> 1)) = *(void *)(result + 8);
  *(void *)(*(void *)(result + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(result + 12);
  return result;
}

uint64_t operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = a1 + 12;
  unint64_t v5 = a1[12];
  unint64_t v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  unint64_t v8 = (v7 >> 7) ^ (v5 >> 12);
  uint64_t v9 = a1[15];
  while (1)
  {
    unint64_t v10 = v8 & v9;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                       * (v7 & 0x7F))) & 0x8080808080808080;
    if (v12)
    {
      uint64_t v13 = a1[13];
      do
      {
        unint64_t v14 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v9;
        if (*(void *)(v13 + 12 * v14) == a2) {
          return *(unsigned int *)(v13 + 12 * v14 + 8);
        }
        v12 &= v12 - 1;
      }
      while (v12);
    }
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      break;
    }
    v4 += 8;
    unint64_t v8 = v4 + v10;
  }
  unint64_t v17 = a1[13]
      + 12
      * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(v6, v7);
  *(void *)unint64_t v17 = a2;
  *(_DWORD *)(v17 + 8) = -1;
  uint64_t v18 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)a1, a2, a2);
  uint64_t v15 = v18;
  *(_DWORD *)(v17 + 8) = v18;
  if (!a2) {
    return v15;
  }
  uint64_t v20 = -a2;
  int v19 = v18 ^ 1;
  gtl::InsertOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>>(v6, &v20, &v19);
  return v15;
}

unint64_t gtl::InsertOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>>(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  int v6 = *a3;
  unint64_t v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  unint64_t v8 = (v7 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v9 = a1[3];
  while (1)
  {
    unint64_t v10 = v8 & v9;
    uint64_t v11 = *(void *)(*a1 + v10);
    for (unint64_t i = ((v11 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v11 ^ (0x101010101010101
                                                                                           * (v7 & 0x7F))) & 0x8080808080808080;
          i;
          i &= i - 1)
    {
      if (*(void *)(a1[1] + 12 * ((v10 + (__clz(__rbit64(i)) >> 3)) & v9)) == v5)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 147);
        uint64_t v13 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Check failed: collection->insert(value_type(key, data)).second ", 63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"duplicate key: ", 15);
        std::ostream::operator<<();
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
      }
    }
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      break;
    }
    v4 += 8;
    unint64_t v8 = v4 + v10;
  }
  unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(a1, v7);
  uint64_t v16 = a1[1] + 12 * result;
  *(void *)uint64_t v16 = v5;
  *(_DWORD *)(v16 + 8) = v6;
  return result;
}

void sub_23CCE9D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::IntegerTrail::FindTrailIndexOfVarBefore(uint64_t a1, int a2, signed int a3)
{
  signed int v3 = *(_DWORD *)(*(void *)(a1 + 592) + 4 * a2);
  if (v3 >= a3)
  {
    if (v3 != 0x7FFFFFFF) {
      *(unsigned char *)(a1 + 536) = 1;
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    signed int v5 = *(_DWORD *)(v4 + 12 * a2 + 8);
    if (v5 > a3)
    {
      signed int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * a2);
      BOOL v7 = v6 >= a3 && v6 < v5;
      if (v7 && *(_DWORD *)(*(void *)(a1 + 144) + 20 * v6 + 8) == a2) {
        signed int v5 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * a2);
      }
    }
    if (v5 >= a3)
    {
      uint64_t v9 = *(void *)(a1 + 144);
      do
      {
        signed int v5 = *(_DWORD *)(v9 + 20 * v5 + 12);
        if (v5 >= *(_DWORD *)(a1 + 64)) {
          *(_DWORD *)(*(void *)(a1 + 72) + 4 * a2) = v5;
        }
      }
      while (v5 >= a3);
    }
    if (v5 < (int)(-1431655765 * ((unint64_t)(*(void *)(a1 + 48) - v4) >> 2))) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v5;
    }
  }
}

void operations_research::sat::IntegerTrail::RelaxLinearReason(std::vector<int> *a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  *(void *)int v38 = a2;
  *(_DWORD *)uint64_t v37 = 0;
  if (a2 < 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v38, (int)v37, "slack >= 0");
  }
  if (a2)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2);
    std::vector<int>::pointer begin = a1[30].__begin_;
    unint64_t v11 = a1[30].__end_ - begin;
    if ((int)v9 <= v11)
    {
      if ((int)v9 < v11) {
        a1[30].__end_ = &begin[(int)v9];
      }
    }
    else
    {
      std::vector<int>::__append(a1 + 30, (int)v9 - v11);
    }
    if ((int)v9 >= 1)
    {
      unint64_t v12 = 0;
      uint64_t v13 = *a5;
      value = a1[1].__end_cap_.__value_;
      uint64_t v15 = 4 * v9;
      uint64_t v16 = 4;
      unint64_t v17 = (void *)a3;
      do
      {
        *(void *)uint64_t v37 = *(void *)&value[3 * *(int *)&v13[v16 - 4]];
        if (*(void *)&v13[v16] != *(void *)v37) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>(v13 + v16, (int)v37, "(*reason)[i].bound == LowerBound((*reason)[i].var)");
        }
        *(_DWORD *)uint64_t v37 = 0;
        if ((*v17 & 0x8000000000000000) != 0) {
          google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,int>((int)v17, (int)v37, "coeffs[i] >= 0");
        }
        uint64_t v13 = *a5;
        value = a1[1].__end_cap_.__value_;
        a1[30].__begin_[v12 / 4] = value[3 * *(int *)&(*a5)[v16 - 4] + 2];
        ++v17;
        v12 += 4;
        v16 += 12;
      }
      while (v15 != v12);
    }
    operations_research::sat::IntegerTrail::RelaxLinearReason(a1, *(uint64_t *)v38, a3, a4, a1 + 30);
    uint64_t v18 = *a5;
    a5[1] = *a5;
    std::vector<int>::pointer v19 = a1[30].__begin_;
    for (i = a1[30].__end_; v19 != i; uint64_t v18 = v36)
    {
      while (1)
      {
        uint64_t v21 = (uint64_t)&a1[6].__begin_[5 * *v19];
        int v22 = *(_DWORD *)(v21 + 8);
        unint64_t v23 = *(void *)v21;
        *(_DWORD *)uint64_t v37 = v22;
        *(void *)&v37[4] = v23;
        unint64_t v24 = HIDWORD(v23);
        unint64_t v25 = (unint64_t)a5[2];
        if ((unint64_t)v18 >= v25) {
          break;
        }
        *(void *)uint64_t v18 = *(void *)v37;
        *((_DWORD *)v18 + 2) = v24;
        a5[1] = v18 + 12;
        ++v19;
        v18 += 12;
        if (v19 == i) {
          return;
        }
      }
      unint64_t v26 = *a5;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a5) >> 2);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v26) >> 2);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v30 = 0x1555555555555555;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v31 = (char *)operator new(12 * v30);
      }
      else
      {
        unint64_t v31 = 0;
      }
      unint64_t v32 = &v31[12 * v27];
      *(void *)unint64_t v32 = *(void *)v37;
      *((_DWORD *)v32 + 2) = v24;
      unint64_t v33 = v32;
      if (v18 != v26)
      {
        do
        {
          uint64_t v34 = *(void *)(v18 - 12);
          v18 -= 12;
          int v35 = *((_DWORD *)v18 + 2);
          *(void *)(v33 - 12) = v34;
          v33 -= 12;
          *((_DWORD *)v33 + 2) = v35;
        }
        while (v18 != v26);
        uint64_t v18 = *a5;
      }
      uint64_t v36 = v32 + 12;
      *a5 = v33;
      a5[1] = v32 + 12;
      a5[2] = &v31[12 * v30];
      if (v18) {
        operator delete(v18);
      }
      a5[1] = v36;
      ++v19;
    }
  }
}

void sub_23CCEA194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCEA19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CCEA1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::IntegerTrail::RelaxLinearReason(void *a1, uint64_t a2, uint64_t a3, int a4, std::vector<int> *this)
{
  uint64_t v6 = a2;
  BOOL v7 = a1;
  int v8 = -1431655765 * ((a1[6] - a1[5]) >> 2);
  int v206 = v8;
  if (a4 >= 1)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v203 = a1 + 87;
    uint64_t v11 = a4;
    uint64_t v201 = a3;
    while (1)
    {
      int v12 = this->__begin_[v9];
      if (v12 >= v8)
      {
        uint64_t v13 = *(void *)(a3 + 8 * v9);
        if (v13 <= v6)
        {
          uint64_t v14 = v7[18];
          uint64_t v15 = (uint64_t *)(v14 + 20 * v12);
          uint64_t v16 = *v15;
          uint64_t v17 = *(void *)(v14 + 20 * *((int *)v15 + 3));
          int64_t v18 = *v15 - v17;
          if (v18 < 0) {
            int64_t v18 = -v18;
          }
          int v19 = 63 - __clz(v18);
          uint64_t v20 = v16 - v17;
          if (v16 == v17) {
            int v21 = 0;
          }
          else {
            int v21 = v19;
          }
          if (v13 >= 0) {
            unint64_t v22 = *(void *)(a3 + 8 * v9);
          }
          else {
            unint64_t v22 = -v13;
          }
          int v23 = 63 - __clz(v22);
          if (!v13) {
            int v23 = 0;
          }
          int v24 = v21 + v23;
          if (v24 > 61)
          {
            uint64_t v25 = 0;
            if (!v13
              || v16 == v17
              || ((uint64_t v25 = ((v20 ^ (unint64_t)v13) >> 63) + 0x7FFFFFFFFFFFFFFFLL,
                   unint64_t v26 = v18 * v22,
                   v24 <= 0x3E)
                ? (BOOL v27 = v26 >= v25)
                : (BOOL v27 = 1),
                  v27))
            {
              if (v25 <= v6) {
                goto LABEL_28;
              }
            }
            else
            {
              if (v25 >= 0) {
                uint64_t v25 = v26;
              }
              else {
                uint64_t v25 = -(uint64_t)v26;
              }
              if (v25 <= v6)
              {
LABEL_28:
                unint64_t v28 = (void *)v7[88];
                unint64_t v29 = v7[89];
                if ((unint64_t)v28 >= v29)
                {
                  unint64_t v31 = (void *)*v203;
                  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *v203) >> 3);
                  unint64_t v33 = v32 + 1;
                  if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v31) >> 3);
                  if (2 * v34 > v33) {
                    unint64_t v33 = 2 * v34;
                  }
                  if (v34 >= 0x555555555555555) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v35 = v33;
                  }
                  unint64_t v202 = v35;
                  if (v35)
                  {
                    if (v35 > 0xAAAAAAAAAAAAAAALL) {
LABEL_255:
                    }
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    uint64_t v36 = (char *)operator new(24 * v35);
                    uint64_t v6 = a2;
                    a3 = v201;
                  }
                  else
                  {
                    uint64_t v36 = 0;
                  }
                  uint64_t v37 = &v36[24 * v32];
                  *(_DWORD *)uint64_t v37 = v12;
                  *(void *)(v37 + 4) = v13;
                  *((void *)v37 + 2) = v25;
                  int v38 = v37;
                  if (v28 == v31)
                  {
                    uint64_t v39 = a1;
                    unint64_t v40 = v202;
                  }
                  else
                  {
                    uint64_t v39 = a1;
                    unint64_t v40 = v202;
                    do
                    {
                      long long v41 = *(_OWORD *)(v28 - 3);
                      *((void *)v38 - 1) = *(v28 - 1);
                      *(_OWORD *)(v38 - 24) = v41;
                      v38 -= 24;
                      v28 -= 3;
                    }
                    while (v28 != v31);
                    unint64_t v28 = (void *)*v203;
                  }
                  v39[87] = v38;
                  unint64_t v30 = v37 + 24;
                  v39[88] = v37 + 24;
                  v39[89] = &v36[24 * v40];
                  int v8 = v206;
                  if (v28)
                  {
                    operator delete(v28);
                    a3 = v201;
                    uint64_t v6 = a2;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v28 = v12;
                  *(void *)((char *)v28 + 4) = v13;
                  unint64_t v30 = v28 + 3;
                  v28[2] = v25;
                }
                a1[88] = v30;
                BOOL v7 = a1;
                goto LABEL_4;
              }
            }
          }
          else
          {
            uint64_t v25 = v20 * v13;
            if (v20 * v13 <= v6) {
              goto LABEL_28;
            }
          }
        }
        this->__begin_[v10++] = v12;
      }
LABEL_4:
      if (++v9 == v11) {
        goto LABEL_54;
      }
    }
  }
  int v10 = 0;
LABEL_54:
  unint64_t v42 = this->__end_ - this->__begin_;
  if (v10 <= v42)
  {
    if (v10 < v42) {
      this->__end_ = &this->__begin_[v10];
    }
  }
  else
  {
    std::vector<int>::__append(this, v10 - v42);
    uint64_t v6 = a2;
  }
  uint64_t v43 = v7[87];
  uint64_t v44 = v7[88] - v43;
  if (v44 >= 48)
  {
    uint64_t v187 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 3);
    int64_t v188 = (unint64_t)(v187 - 2) >> 1;
    int64_t v189 = v188;
    do
    {
      if (v188 >= v189)
      {
        uint64_t v190 = (2 * v189) | 1;
        int v191 = (int *)(v43 + 24 * v190);
        if (2 * v189 + 2 >= v187)
        {
          v194 = (int *)(v43 + 24 * v189);
          int v195 = *v194;
          if (*v191 >= *v194) {
            goto LABEL_243;
          }
        }
        else
        {
          int v192 = v191[6];
          BOOL v193 = *v191 < v192;
          if (*v191 > v192) {
            int v192 = *v191;
          }
          if (v193)
          {
            v191 += 6;
            uint64_t v190 = 2 * v189 + 2;
          }
          v194 = (int *)(v43 + 24 * v189);
          int v195 = *v194;
          if (v192 >= *v194)
          {
LABEL_243:
            long long v210 = *(_OWORD *)(v194 + 1);
            int v213 = v194[5];
            while (1)
            {
              size_t v198 = v194;
              v194 = v191;
              long long v199 = *(_OWORD *)v191;
              *((void *)v198 + 2) = *((void *)v191 + 2);
              *(_OWORD *)size_t v198 = v199;
              if (v188 < v190) {
                break;
              }
              uint64_t v200 = (2 * v190) | 1;
              int v191 = (int *)(v43 + 24 * v200);
              uint64_t v190 = 2 * v190 + 2;
              if (v190 < v187)
              {
                int v196 = *v191;
                int v197 = v191[6];
                if (*v191 <= v197) {
                  int v196 = v191[6];
                }
                if (*v191 >= v197) {
                  uint64_t v190 = v200;
                }
                else {
                  v191 += 6;
                }
                if (v196 < v195) {
                  break;
                }
              }
              else
              {
                uint64_t v190 = v200;
                if (*v191 < v195) {
                  break;
                }
              }
            }
            int *v194 = v195;
            v194[5] = v213;
            *(_OWORD *)(v194 + 1) = v210;
          }
        }
      }
      BOOL v193 = v189-- <= 0;
    }
    while (!v193);
  }
  uint64_t v205 = v7 + 87;
  if (v6 >= 1)
  {
    while (1)
    {
      uint64_t v45 = v7[87];
      uint64_t v46 = (char *)v7[88];
      if ((char *)v45 == v46) {
        goto LABEL_200;
      }
      int v47 = *(_DWORD *)v45;
      uint64_t v48 = *(void *)(v45 + 4);
      uint64_t v49 = *(void *)(v45 + 16);
      if ((uint64_t)&v46[-v45] >= 25)
      {
        uint64_t v50 = 0;
        int64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-v45] >> 3);
        long long v208 = *(_OWORD *)v45;
        uint64_t v211 = *(void *)(v45 + 16);
        uint64_t v52 = v7[87];
        do
        {
          uint64_t v54 = v52 + 24 * v50 + 24;
          uint64_t v55 = (2 * v50) | 1;
          uint64_t v56 = 2 * v50 + 2;
          if (v56 < v51 && *(_DWORD *)v54 < *(_DWORD *)(v54 + 24))
          {
            v54 += 24;
            uint64_t v55 = v56;
          }
          long long v53 = *(_OWORD *)v54;
          *(void *)(v52 + 16) = *(void *)(v54 + 16);
          *(_OWORD *)uint64_t v52 = v53;
          uint64_t v52 = v54;
          uint64_t v50 = v55;
        }
        while (v55 <= (uint64_t)((unint64_t)(v51 - 2) >> 1));
        int v57 = v46 - 24;
        if ((char *)v54 == v46 - 24)
        {
          *(void *)(v54 + 16) = v211;
          *(_OWORD *)uint64_t v54 = v208;
        }
        else
        {
          long long v58 = *(_OWORD *)v57;
          *(void *)(v54 + 16) = *((void *)v46 - 1);
          *(_OWORD *)uint64_t v54 = v58;
          *(_OWORD *)int v57 = v208;
          *((void *)v46 - 1) = v211;
          uint64_t v59 = v54 - v45 + 24;
          if (v59 >= 25)
          {
            unint64_t v60 = (v59 / 0x18uLL - 2) >> 1;
            uint64_t v61 = v45 + 24 * v60;
            int v62 = *(_DWORD *)v54;
            if (*(_DWORD *)v61 < *(_DWORD *)v54)
            {
              int v215 = *(_DWORD *)(v54 + 20);
              long long v214 = *(_OWORD *)(v54 + 4);
              do
              {
                uint64_t v63 = v54;
                uint64_t v54 = v61;
                long long v64 = *(_OWORD *)v61;
                *(void *)(v63 + 16) = *(void *)(v61 + 16);
                *(_OWORD *)uint64_t v63 = v64;
                if (!v60) {
                  break;
                }
                unint64_t v60 = (v60 - 1) >> 1;
                uint64_t v61 = v45 + 24 * v60;
              }
              while (*(_DWORD *)v61 < v62);
              *(_DWORD *)uint64_t v54 = v62;
              *(_OWORD *)(v54 + 4) = v214;
              *(_DWORD *)(v54 + 20) = v215;
            }
          }
        }
        uint64_t v46 = (char *)v7[88];
      }
      int v65 = v46 - 24;
      v7[88] = v46 - 24;
      BOOL v66 = __OFSUB__(v6, v49);
      uint64_t v67 = v6 - v49;
      if (v67 < 0 != v66) {
        break;
      }
      uint64_t v6 = v67;
      uint64_t v71 = v7[18];
      int v72 = *(_DWORD *)(v71 + 20 * v47 + 12);
      if (v72 < v8) {
        goto LABEL_62;
      }
      if (v48 <= v67)
      {
        unint64_t v95 = (uint64_t *)(v71 + 20 * v72);
        uint64_t v96 = 20 * *((int *)v95 + 3);
        uint64_t v97 = *v95;
        uint64_t v98 = *(void *)(v71 + v96);
        unint64_t v99 = v97 - v98;
        if (v97 - v98 < 0) {
          unint64_t v99 = v98 - v97;
        }
        int v100 = 63 - __clz(v99);
        uint64_t v101 = v97 - v98;
        if (v97 == v98) {
          int v102 = 0;
        }
        else {
          int v102 = v100;
        }
        if (v48 >= 0) {
          unint64_t v103 = v48;
        }
        else {
          unint64_t v103 = -v48;
        }
        int v104 = 63 - __clz(v103);
        if (!v48) {
          int v104 = 0;
        }
        int v105 = v102 + v104;
        if (v105 > 61)
        {
          uint64_t v106 = 0;
          if (!v48
            || v97 == v98
            || ((uint64_t v106 = ((v101 ^ (unint64_t)v48) >> 63) + 0x7FFFFFFFFFFFFFFFLL,
                 unint64_t v118 = v99 * v103,
                 v105 <= 0x3E)
              ? (BOOL v119 = v118 >= v106)
              : (BOOL v119 = 1),
                v119))
          {
            if (v67 >= v106) {
              goto LABEL_121;
            }
          }
          else
          {
            if (v106 >= 0) {
              uint64_t v106 = v118;
            }
            else {
              uint64_t v106 = -(uint64_t)v118;
            }
            if (v67 >= v106)
            {
LABEL_121:
              unint64_t v107 = v7[89];
              if ((unint64_t)v65 < v107)
              {
                *((_DWORD *)v46 - 6) = v72;
                *(void *)(v46 - 20) = v48;
                *((void *)v46 - 1) = v106;
                goto LABEL_182;
              }
              uint64_t v126 = (int *)*v205;
              unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v65[-*v205] >> 3);
              unint64_t v128 = v127 + 1;
              if (v127 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - (void)v126) >> 3);
              if (2 * v129 > v128) {
                unint64_t v128 = 2 * v129;
              }
              if (v129 >= 0x555555555555555) {
                unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v130 = v128;
              }
              if (v130)
              {
                if (v130 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_255;
                }
                uint64_t v131 = v6;
                int v132 = (char *)operator new(24 * v130);
                uint64_t v6 = v131;
                int v8 = v206;
              }
              else
              {
                int v132 = 0;
              }
              unint64_t v144 = &v132[24 * v127];
              *(_DWORD *)unint64_t v144 = v72;
              uint64_t v145 = &v132[24 * v130];
              *(void *)(v144 + 4) = v48;
              *((void *)v144 + 2) = v106;
              uint64_t v46 = v144 + 24;
              if (v65 == (char *)v126)
              {
                BOOL v7 = a1;
                a1[87] = v144;
                a1[88] = v46;
                a1[89] = v145;
              }
              else
              {
                BOOL v7 = a1;
                do
                {
                  long long v146 = *(_OWORD *)(v65 - 24);
                  *((void *)v144 - 1) = *((void *)v65 - 1);
                  *(_OWORD *)(v144 - 24) = v146;
                  v144 -= 24;
                  v65 -= 24;
                }
                while (v65 != (char *)v126);
                int v65 = (char *)a1[87];
                a1[87] = v144;
                a1[88] = v46;
                a1[89] = v145;
                if (!v65)
                {
LABEL_182:
                  v7[88] = v46;
                  uint64_t v148 = v7[87];
                  if ((uint64_t)&v46[-v148] >= 25)
                  {
                    unint64_t v149 = ((unint64_t)&v46[-v148] / 0x18 - 2) >> 1;
                    uint64_t v150 = (char *)(v148 + 24 * v149);
                    uint64_t v151 = v46 - 24;
                    int v152 = *((_DWORD *)v46 - 6);
                    if (*(_DWORD *)v150 < v152)
                    {
                      int v212 = *((_DWORD *)v46 - 1);
                      long long v209 = *(_OWORD *)(v46 - 20);
                      do
                      {
                        uint64_t v153 = v151;
                        uint64_t v151 = v150;
                        long long v154 = *(_OWORD *)v150;
                        *((void *)v153 + 2) = *((void *)v150 + 2);
                        *(_OWORD *)uint64_t v153 = v154;
                        if (!v149) {
                          break;
                        }
                        unint64_t v149 = (v149 - 1) >> 1;
                        uint64_t v150 = (char *)(v148 + 24 * v149);
                      }
                      while (*(_DWORD *)v150 < v152);
                      *(_DWORD *)uint64_t v151 = v152;
                      *(_OWORD *)(v151 + 4) = v209;
                      *((_DWORD *)v151 + 5) = v212;
                    }
                  }
                  goto LABEL_62;
                }
              }
              uint64_t v147 = v6;
              operator delete(v65);
              uint64_t v6 = v147;
              goto LABEL_182;
            }
          }
        }
        else
        {
          uint64_t v106 = v101 * v48;
          if (v67 >= v101 * v48) {
            goto LABEL_121;
          }
        }
        std::vector<int>::pointer end = this->__end_;
        value = this->__end_cap_.__value_;
        if (end >= value)
        {
          std::vector<int>::pointer begin = this->__begin_;
          uint64_t v121 = (char *)end - (char *)this->__begin_;
          uint64_t v122 = v121 >> 2;
          unint64_t v123 = (v121 >> 2) + 1;
          if (v123 >> 62) {
LABEL_254:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v124 = (char *)value - (char *)begin;
          if (v124 >> 1 > v123) {
            unint64_t v123 = v124 >> 1;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v123;
          }
          if (v80)
          {
            if (v80 >> 62) {
              goto LABEL_255;
            }
            uint64_t v125 = v6;
            uint64_t v82 = operator new(4 * v80);
            uint64_t v6 = v125;
            int v8 = v206;
            uint64_t v83 = (int *)&v82[4 * v122];
            *uint64_t v83 = v72;
            uint64_t v70 = v83 + 1;
            if (end == begin)
            {
LABEL_173:
              BOOL v7 = a1;
              goto LABEL_193;
            }
          }
          else
          {
            uint64_t v82 = 0;
            uint64_t v83 = (int *)(4 * v122);
            *(_DWORD *)(4 * v122) = v72;
            uint64_t v70 = (int *)(4 * v122 + 4);
            if (end == begin) {
              goto LABEL_173;
            }
          }
          unint64_t v143 = (char *)(end - 1) - (char *)begin;
          if (v143 >= 0x2C)
          {
            unint64_t v155 = (char *)end - &v82[v121];
            BOOL v7 = a1;
            if (v155 >= 0x20)
            {
              uint64_t v156 = (v143 >> 2) + 1;
              uint64_t v157 = 4 * (v156 & 0x7FFFFFFFFFFFFFF8);
              int v158 = &end[v157 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v83 = (int *)((char *)v83 - v157);
              unint64_t v159 = &v82[4 * v122 - 16];
              unint64_t v160 = (long long *)(end - 4);
              uint64_t v161 = v156 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v162 = *v160;
                *(v159 - 1) = *(v160 - 1);
                *unint64_t v159 = v162;
                v159 -= 2;
                v160 -= 2;
                v161 -= 8;
              }
              while (v161);
              std::vector<int>::pointer end = v158;
              if (v156 == (v156 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_193;
              }
            }
          }
          else
          {
            BOOL v7 = a1;
          }
          do
          {
            int v163 = *--end;
            *--uint64_t v83 = v163;
          }
          while (end != begin);
LABEL_193:
          this->__begin_ = v83;
          this->__end_ = v70;
          this->__end_cap_.__value_ = (int *)&v82[4 * v80];
          if (begin)
          {
            uint64_t v164 = v6;
            operator delete(begin);
            uint64_t v6 = v164;
          }
LABEL_84:
          this->__end_ = v70;
          goto LABEL_62;
        }
      }
      else
      {
        std::vector<int>::pointer end = this->__end_;
        unint64_t v73 = this->__end_cap_.__value_;
        if (end >= v73)
        {
          std::vector<int>::pointer begin = this->__begin_;
          uint64_t v76 = (char *)end - (char *)this->__begin_;
          uint64_t v77 = v76 >> 2;
          unint64_t v78 = (v76 >> 2) + 1;
          if (v78 >> 62) {
            goto LABEL_254;
          }
          uint64_t v79 = (char *)v73 - (char *)begin;
          if (v79 >> 1 > v78) {
            unint64_t v78 = v79 >> 1;
          }
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v78;
          }
          if (v80)
          {
            if (v80 >> 62) {
              goto LABEL_255;
            }
            uint64_t v81 = v6;
            uint64_t v82 = operator new(4 * v80);
            uint64_t v6 = v81;
            int v8 = v206;
            uint64_t v83 = (int *)&v82[4 * v77];
            *uint64_t v83 = v72;
            uint64_t v70 = v83 + 1;
            if (end == begin) {
              goto LABEL_173;
            }
          }
          else
          {
            uint64_t v82 = 0;
            uint64_t v83 = (int *)(4 * v77);
            *(_DWORD *)(4 * v77) = v72;
            uint64_t v70 = (int *)(4 * v77 + 4);
            if (end == begin) {
              goto LABEL_173;
            }
          }
          unint64_t v133 = (char *)(end - 1) - (char *)begin;
          if (v133 >= 0x2C)
          {
            unint64_t v134 = (char *)end - &v82[v76];
            BOOL v7 = a1;
            if (v134 >= 0x20)
            {
              uint64_t v135 = (v133 >> 2) + 1;
              uint64_t v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
              int32x2_t v137 = &end[v136 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v83 = (int *)((char *)v83 - v136);
              int32x2_t v138 = &v82[4 * v77 - 16];
              int v139 = (long long *)(end - 4);
              uint64_t v140 = v135 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v141 = *v139;
                *(v138 - 1) = *(v139 - 1);
                *int32x2_t v138 = v141;
                v138 -= 2;
                v139 -= 2;
                v140 -= 8;
              }
              while (v140);
              std::vector<int>::pointer end = v137;
              if (v135 == (v135 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_193;
              }
            }
          }
          else
          {
            BOOL v7 = a1;
          }
          do
          {
            int v142 = *--end;
            *--uint64_t v83 = v142;
          }
          while (end != begin);
          goto LABEL_193;
        }
      }
      int *end = v72;
      this->__end_ = end + 1;
LABEL_62:
      if (v6 <= 0) {
        goto LABEL_200;
      }
    }
    std::vector<int>::pointer v69 = this->__end_;
    uint64_t v68 = this->__end_cap_.__value_;
    if (v69 >= v68)
    {
      std::vector<int>::pointer v84 = this->__begin_;
      uint64_t v85 = (char *)v69 - (char *)this->__begin_;
      uint64_t v86 = v85 >> 2;
      unint64_t v87 = (v85 >> 2) + 1;
      if (v87 >> 62) {
        goto LABEL_254;
      }
      uint64_t v88 = (char *)v68 - (char *)v84;
      if (v88 >> 1 > v87) {
        unint64_t v87 = v88 >> 1;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        if (v89 >> 62) {
          goto LABEL_255;
        }
        uint64_t v90 = v6;
        uint64_t v91 = operator new(4 * v89);
        uint64_t v6 = v90;
        int v8 = v206;
        uint64_t v92 = (int *)&v91[4 * v86];
        *uint64_t v92 = v47;
        unint64_t v93 = v92 + 1;
        if (v69 != v84)
        {
LABEL_107:
          unint64_t v94 = (char *)(v69 - 1) - (char *)v84;
          if (v94 < 0x2C)
          {
            BOOL v7 = a1;
            goto LABEL_129;
          }
          unint64_t v108 = (char *)v69 - &v91[v85];
          BOOL v7 = a1;
          if (v108 < 0x20) {
            goto LABEL_260;
          }
          uint64_t v109 = (v94 >> 2) + 1;
          uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v111 = &v69[v110 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v92 = (int *)((char *)v92 - v110);
          uint64_t v112 = &v91[4 * v86 - 16];
          uint64_t v113 = (long long *)(v69 - 4);
          uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v115 = *v113;
            *(v112 - 1) = *(v113 - 1);
            *uint64_t v112 = v115;
            v112 -= 2;
            v113 -= 2;
            v114 -= 8;
          }
          while (v114);
          std::vector<int>::pointer v69 = v111;
          if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_260:
            do
            {
LABEL_129:
              int v116 = *--v69;
              *--uint64_t v92 = v116;
            }
            while (v69 != v84);
          }
LABEL_130:
          this->__begin_ = v92;
          this->__end_ = v93;
          this->__end_cap_.__value_ = (int *)&v91[4 * v89];
          if (v84)
          {
            uint64_t v117 = v6;
            operator delete(v84);
            uint64_t v6 = v117;
          }
          this->__end_ = v93;
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v91 = 0;
        uint64_t v92 = (int *)(4 * v86);
        *(_DWORD *)(4 * v86) = v47;
        unint64_t v93 = (int *)(4 * v86 + 4);
        if (v69 != v84) {
          goto LABEL_107;
        }
      }
      BOOL v7 = a1;
      goto LABEL_130;
    }
    int *v69 = v47;
    uint64_t v70 = v69 + 1;
    goto LABEL_84;
  }
LABEL_200:
  uint64_t v165 = (int *)v7[87];
  unint64_t v166 = (int *)v7[88];
  if (v165 != v166)
  {
    std::vector<int>::pointer v167 = this->__end_;
    while (1)
    {
      uint64_t v169 = this->__end_cap_.__value_;
      if (v167 < v169)
      {
        char *v167 = *v165;
        uint64_t v168 = v167 + 1;
      }
      else
      {
        std::vector<int>::pointer v170 = this->__begin_;
        uint64_t v171 = (char *)v167 - (char *)this->__begin_;
        uint64_t v172 = v171 >> 2;
        unint64_t v173 = (v171 >> 2) + 1;
        if (v173 >> 62) {
          goto LABEL_254;
        }
        uint64_t v174 = (char *)v169 - (char *)v170;
        if (v174 >> 1 > v173) {
          unint64_t v173 = v174 >> 1;
        }
        if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v175 = v173;
        }
        if (v175)
        {
          if (v175 >> 62) {
            goto LABEL_255;
          }
          uint64_t v176 = operator new(4 * v175);
          int v177 = (int *)&v176[4 * v172];
          *int v177 = *v165;
          uint64_t v168 = v177 + 1;
          if (v167 != v170)
          {
LABEL_214:
            unint64_t v178 = (char *)(v167 - 1) - (char *)v170;
            if (v178 < 0xBC
              || &v176[v171 - 4 - (v178 & 0xFFFFFFFFFFFFFFFCLL)] > &v176[v171 - 4]
              || (std::vector<int>::pointer)((char *)v167 - (v178 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v167 - 1
              || (unint64_t)((char *)v167 - v176 - v171) < 0x20)
            {
              uint64_t v179 = v167;
              BOOL v7 = a1;
              goto LABEL_219;
            }
            uint64_t v181 = (v178 >> 2) + 1;
            uint64_t v182 = 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v179 = &v167[v182 / 0xFFFFFFFFFFFFFFFCLL];
            int v177 = (int *)((char *)v177 - v182);
            int v183 = &v176[4 * v172 - 16];
            int v184 = (long long *)(v167 - 4);
            uint64_t v185 = v181 & 0x7FFFFFFFFFFFFFF8;
            BOOL v7 = a1;
            do
            {
              long long v186 = *v184;
              *(v183 - 1) = *(v184 - 1);
              *int v183 = v186;
              v183 -= 2;
              v184 -= 2;
              v185 -= 8;
            }
            while (v185);
            if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_219:
                int v180 = *--v179;
                *--int v177 = v180;
              }
              while (v179 != v170);
            }
            this->__begin_ = v177;
            this->__end_ = v168;
            this->__end_cap_.__value_ = (int *)&v176[4 * v175];
            if (!v170) {
              goto LABEL_203;
            }
LABEL_224:
            operator delete(v170);
            goto LABEL_203;
          }
        }
        else
        {
          uint64_t v176 = 0;
          int v177 = (int *)(4 * v172);
          *(_DWORD *)(4 * v172) = *v165;
          uint64_t v168 = (int *)(4 * v172 + 4);
          if (v167 != v170) {
            goto LABEL_214;
          }
        }
        BOOL v7 = a1;
        this->__begin_ = v177;
        this->__end_ = v168;
        this->__end_cap_.__value_ = (int *)&v176[4 * v175];
        if (v170) {
          goto LABEL_224;
        }
      }
LABEL_203:
      this->__end_ = v168;
      v165 += 6;
      std::vector<int>::pointer v167 = v168;
      if (v165 == v166)
      {
        uint64_t v165 = (int *)*v205;
        break;
      }
    }
  }
  v7[88] = v165;
}

void operations_research::sat::IntegerTrail::AppendRelaxedLinearReason(std::vector<int> *a1, uint64_t a2, uint64_t a3, int a4, int *a5, uint64_t a6, void **a7)
{
  uint64_t v9 = a1 + 30;
  std::vector<int>::pointer begin = (char *)a1[30].__begin_;
  a1[30].__end_ = (std::vector<int>::pointer)begin;
  if (a6)
  {
    uint64_t v11 = a5;
    int v12 = &a5[a6];
    long long v53 = v12;
    while (1)
    {
      while (1)
      {
        uint64_t v14 = &a1[1].__end_cap_.__value_[3 * *v11 + 2];
        unint64_t value = (unint64_t)a1[30].__end_cap_.__value_;
        if ((unint64_t)begin >= value) {
          break;
        }
        *(_DWORD *)std::vector<int>::pointer begin = *v14;
        begin += 4;
        uint64_t end = (uint64_t)begin;
        a1[30].__end_ = (std::vector<int>::pointer)begin;
        if (++v11 == v12) {
          goto LABEL_32;
        }
      }
      uint64_t v16 = v9;
      std::vector<int>::pointer v17 = v9->__begin_;
      uint64_t v18 = begin - (char *)v9->__begin_;
      uint64_t v19 = v18 >> 2;
      unint64_t v20 = (v18 >> 2) + 1;
      if (v20 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v21 = value - (void)v17;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      unint64_t v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22)
      {
        if (v22 >> 62) {
LABEL_55:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        int v23 = operator new(4 * v22);
        int v24 = (int *)&v23[4 * v19];
        int *v24 = *v14;
        uint64_t end = (uint64_t)(v24 + 1);
        if (begin == (char *)v17)
        {
LABEL_25:
          uint64_t v9 = v16;
          a1[30].__begin_ = v24;
          a1[30].__end_ = (std::vector<int>::pointer)end;
          a1[30].__end_cap_.__value_ = (int *)&v23[4 * v22];
          if (!v17) {
            goto LABEL_22;
          }
LABEL_21:
          operator delete(v17);
          goto LABEL_22;
        }
      }
      else
      {
        int v23 = 0;
        int v24 = (int *)(4 * v19);
        *(_DWORD *)(4 * v19) = *v14;
        uint64_t end = 4 * v19 + 4;
        if (begin == (char *)v17) {
          goto LABEL_25;
        }
      }
      unint64_t v25 = begin - 4 - (char *)v17;
      if (v25 < 0xBC
        || &v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4]
        || &begin[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > begin - 4
        || (unint64_t)(begin - v23 - v18) < 0x20)
      {
        break;
      }
      uint64_t v28 = (v25 >> 2) + 1;
      uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v26 = &begin[-v29];
      int v24 = (int *)((char *)v24 - v29);
      unint64_t v30 = &v23[4 * v19 - 16];
      unint64_t v31 = begin - 16;
      uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v9 = v16;
      do
      {
        long long v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        _OWORD *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 8;
      }
      while (v32);
      if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_19;
      }
LABEL_20:
      a1[30].__begin_ = v24;
      a1[30].__end_ = (std::vector<int>::pointer)end;
      a1[30].__end_cap_.__value_ = (int *)&v23[4 * v22];
      if (v17) {
        goto LABEL_21;
      }
LABEL_22:
      int v12 = v53;
      a1[30].__end_ = (std::vector<int>::pointer)end;
      ++v11;
      std::vector<int>::pointer begin = (char *)end;
      if (v11 == v53) {
        goto LABEL_32;
      }
    }
    unint64_t v26 = begin;
    uint64_t v9 = v16;
    do
    {
LABEL_19:
      int v27 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--int v24 = v27;
    }
    while (v26 != (char *)v17);
    goto LABEL_20;
  }
  uint64_t end = (uint64_t)begin;
LABEL_32:
  if (a2 > 0)
  {
    operations_research::sat::IntegerTrail::RelaxLinearReason(a1, a2, a3, a4, v9);
    uint64_t end = (uint64_t)a1[30].__end_;
  }
  std::vector<int>::pointer v34 = v9->__begin_;
  if (v9->__begin_ != (std::vector<int>::pointer)end)
  {
    unint64_t v35 = (char *)a7[1];
    do
    {
      while (1)
      {
        uint64_t v36 = (uint64_t)&a1[6].__begin_[5 * *v34];
        *(_DWORD *)uint64_t v54 = *(_DWORD *)(v36 + 8);
        *(void *)&v54[4] = *(void *)v36;
        uint64_t v37 = HIDWORD(*(void *)v36);
        unint64_t v38 = (unint64_t)a7[2];
        if ((unint64_t)v35 >= v38) {
          break;
        }
        *(void *)unint64_t v35 = *(void *)v54;
        *((_DWORD *)v35 + 2) = v37;
        a7[1] = v35 + 12;
        ++v34;
        v35 += 12;
        if (v34 == (std::vector<int>::pointer)end) {
          return;
        }
      }
      uint64_t v39 = (char *)*a7;
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)*a7) >> 2);
      unint64_t v41 = v40 + 1;
      if (v40 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v39) >> 2);
      if (2 * v42 > v41) {
        unint64_t v41 = 2 * v42;
      }
      if (v42 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v43 = 0x1555555555555555;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 > 0x1555555555555555) {
          goto LABEL_55;
        }
        uint64_t v44 = (char *)operator new(12 * v43);
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = &v44[12 * v40];
      *(void *)uint64_t v45 = *(void *)v54;
      *((_DWORD *)v45 + 2) = v37;
      uint64_t v46 = v45;
      if (v35 != v39)
      {
        do
        {
          uint64_t v47 = *(void *)(v35 - 12);
          v35 -= 12;
          int v48 = *((_DWORD *)v35 + 2);
          *(void *)(v46 - 12) = v47;
          v46 -= 12;
          *((_DWORD *)v46 + 2) = v48;
        }
        while (v35 != v39);
        unint64_t v35 = (char *)*a7;
      }
      uint64_t v49 = v45 + 12;
      *a7 = v46;
      a7[1] = v45 + 12;
      a7[2] = &v44[12 * v43];
      if (v35) {
        operator delete(v35);
      }
      a7[1] = v49;
      ++v34;
      unint64_t v35 = (char *)v49;
    }
    while (v34 != (std::vector<int>::pointer)end);
  }
}

void operations_research::sat::IntegerTrail::RemoveLevelZeroBounds(uint64_t a1, int **a2)
{
  signed int v3 = (char *)*a2;
  std::vector<int>::size_type v2 = a2[1];
  if (*a2 == v2)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = *(void *)(a1 + 144);
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = *(void *)(v6 + 1);
      if (v7 > *(void *)(v5 + 20 * *v6))
      {
        int v8 = &v3[12 * v4++];
        *(_DWORD *)int v8 = *v6;
        *(void *)(v8 + 4) = v7;
      }
      v6 += 3;
    }
    while (v6 != v2);
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - v3) >> 2);
  BOOL v10 = v4 >= v9;
  unint64_t v11 = v4 - v9;
  if (v11 != 0 && v10)
  {
    std::vector<operations_research::sat::IntegerLiteral>::__append((void **)a2, v11);
  }
  else if (!v10)
  {
    a2[1] = (int *)&v3[12 * v4];
  }
}

void *operations_research::sat::IntegerTrail::InitializeConflict(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char *__src, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unint64_t v9 = *(void **)(a1 + 936);
  v9[18] = 0;
  BOOL v10 = v9 + 12;
  uint64_t v11 = *(void *)(a4 + 24);
  int v48 = v9 + 12;
  if (!v11)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, __src, &__src[4 * a6], (4 * a6) >> 2);
    if (!a8) {
      return v48;
    }
    int v16 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
    std::vector<int>::pointer v17 = (uint64_t *)((char *)a7 + 12 * a8);
    int64_t v51 = (void **)(a1 + 544);
    int v50 = v16;
    uint64_t v49 = v17;
    while (1)
    {
      uint64_t v19 = *a7;
      int v20 = *((_DWORD *)a7 + 2);
      *(void *)uint64_t v55 = v19;
      *(_DWORD *)&v55[8] = v20;
      uint64_t v21 = *(void *)&v55[4];
      uint64_t v22 = *(void *)(a1 + 144);
      if (*(uint64_t *)&v55[4] <= *(void *)(v22 + 20 * (int)v19))
      {
        int v24 = -1;
LABEL_21:
        if (v24 < v16) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v23 = (int)v19;
        int v24 = *(_DWORD *)(*(void *)(a1 + 40) + 12 * (int)v19 + 8);
        uint64_t v25 = *(void *)(a1 + 72);
        int v26 = *(_DWORD *)(v25 + 4 * (int)v19);
        if (v26 < v24
          && *(_DWORD *)(v22 + 20 * v26 + 8) == v19
          && *(void *)(v22 + 20 * v26) >= *(uint64_t *)&v55[4])
        {
          int v24 = *(_DWORD *)(v25 + 4 * (int)v19);
        }
        int v27 = v24;
        if (v24 >= *(_DWORD *)(a1 + 64)) {
LABEL_15:
        }
          *(_DWORD *)(v25 + 4 * v23) = v27;
        while (1)
        {
          uint64_t v28 = *(void *)(v22 + 20 * v27);
          if (v28 == v21) {
            break;
          }
          if (v28 < v21) {
            goto LABEL_21;
          }
          int v24 = v27;
          int v27 = *(_DWORD *)(v22 + 20 * v27 + 12);
          if (v27 >= *(_DWORD *)(a1 + 64)) {
            goto LABEL_15;
          }
        }
        int v24 = v27;
        if (v27 < v16) {
          goto LABEL_8;
        }
      }
      uint64_t v29 = *(int **)(a1 + 552);
      unint64_t v30 = *(void *)(a1 + 560);
      if ((unint64_t)v29 >= v30) {
        break;
      }
      *uint64_t v29 = v24;
      uint64_t v18 = (uint64_t)(v29 + 1);
LABEL_7:
      *(void *)(a1 + 552) = v18;
LABEL_8:
      a7 = (uint64_t *)((char *)a7 + 12);
      if (a7 == v17) {
        return v48;
      }
    }
    unint64_t v31 = (int *)*v51;
    uint64_t v32 = (char *)v29 - (unsigned char *)*v51;
    uint64_t v33 = v32 >> 2;
    unint64_t v34 = (v32 >> 2) + 1;
    if (v34 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v35 = v30 - (void)v31;
    if (v35 >> 1 > v34) {
      unint64_t v34 = v35 >> 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      if (v36 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v37 = operator new(4 * v36);
      unint64_t v38 = (int *)&v37[4 * v33];
      *unint64_t v38 = v24;
      uint64_t v18 = (uint64_t)(v38 + 1);
      if (v29 == v31) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v37 = 0;
      unint64_t v38 = (int *)(4 * v33);
      *(_DWORD *)(4 * v33) = v24;
      uint64_t v18 = 4 * v33 + 4;
      if (v29 == v31)
      {
LABEL_42:
        *(void *)(a1 + 544) = v38;
        *(void *)(a1 + 552) = v18;
        *(void *)(a1 + 560) = &v37[4 * v36];
        if (v31) {
          operator delete(v31);
        }
        int v16 = v50;
        std::vector<int>::pointer v17 = v49;
        goto LABEL_7;
      }
    }
    unint64_t v39 = (char *)(v29 - 1) - (char *)v31;
    if (v39 < 0x2C) {
      goto LABEL_49;
    }
    if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v40 = (v39 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v42 = &v29[v41 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v38 = (int *)((char *)v38 - v41);
    unint64_t v43 = &v37[4 * v33 - 16];
    uint64_t v44 = v29 - 4;
    uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *unint64_t v43 = v46;
      v43 -= 2;
      v44 -= 8;
      v45 -= 8;
    }
    while (v45);
    uint64_t v29 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        int v47 = *--v29;
        *--unint64_t v38 = v47;
      }
      while (v29 != v31);
    }
    goto LABEL_42;
  }
  v9[13] = v9[12];
  int v12 = -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2);
  *(void *)uint64_t v55 = a2;
  *(_DWORD *)&v55[8] = a3;
  int v54 = v12;
  uint64_t v52 = a1 + 544;
  long long v53 = v10;
  (*(void (**)(uint64_t, unsigned char *, int *, void **, uint64_t *))(*(void *)v11 + 48))(v11, v55, &v54, &v53, &v52);
  return v48;
}

uint64_t std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  int v12 = a3;
  int v10 = a4;
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v11, &v10, &v9, &v8);
}

uint64_t operations_research::sat::IntegerTrail::EnqueueInternal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char *__src, uint64_t a6, uint64_t *a7, uint64_t a8, int a9)
{
  int v11 = a2;
  uint64_t v186 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v181 = a2;
  *(_DWORD *)&v181[8] = a3;
  unint64_t v13 = *(int *)(*(void *)(a1 + 408) + 4 * (int)a2);
  if (v13 != -1
    && ((*(void *)(*(void *)(*(void *)(a1 + 936) + 24) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    return 1;
  }
  uint64_t v14 = (int)a2;
  int64_t v15 = *(void *)&v181[4];
  uint64_t v16 = *(void *)(a1 + 40);
  if (*(uint64_t *)&v181[4] <= *(void *)(v16 + 12 * (int)a2)) {
    return 1;
  }
  ++*(void *)(a1 + 848);
  uint64_t v17 = **(void **)(a1 + 920);
  uint64_t v18 = (void *)(v17 + 24 * (int)a2);
  if ((int)(*v18 >> 1) >= 2)
  {
    LODWORD(__p) = a2;
    int v19 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>((uint64_t *)(a1 + 440), (int *)&__p);
    uint64_t v20 = *v18 >> 1;
    if (v19 < (int)v20)
    {
      if (*v18)
      {
        int v24 = (int64_t *)(v18[1] + 16 * v19 + 8);
        uint64_t v25 = (int)v20 - (uint64_t)v19;
        while (1)
        {
          int64_t v26 = *v24;
          v24 += 2;
          if (v15 <= v26) {
            break;
          }
          ++v19;
          if (!--v25) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v21 = (int64_t *)(24 * (int)v14 + 16 * v19 + v17 + 16);
        uint64_t v22 = (int)v20 - (uint64_t)v19;
        while (1)
        {
          int64_t v23 = *v21;
          v21 += 2;
          if (v15 <= v23) {
            break;
          }
          ++v19;
          if (!--v22) {
            goto LABEL_16;
          }
        }
      }
    }
    if (v19 == v20)
    {
LABEL_16:
      uint64_t v27 = *(void *)(a1 + 936);
      *(void *)(v27 + 144) = 0;
      uint64_t v28 = (void **)(v27 + 96);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((void *)(v27 + 96), __src, &__src[4 * a6], (4 * a6) >> 2);
      operations_research::sat::IntegerTrail::MergeReasonInto(a1, a7, a8, v28);
      return 0;
    }
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::Set((void *)(a1 + 432), v11, v19);
    char v30 = *(unsigned char *)v18;
    uint64_t v29 = v18 + 1;
    if (v30) {
      uint64_t v29 = (void *)*v29;
    }
    if (v15 <= v29[2 * v19]) {
      int64_t v15 = v29[2 * v19];
    }
    *(void *)&v181[4] = v15;
    uint64_t v16 = *(void *)(a1 + 40);
  }
  if (v15 <= -*(void *)(v16 + 12 * (int)(v14 ^ 1)))
  {
    unint64_t v42 = *(void ***)(a1 + 872);
    for (unint64_t i = *(void ***)(a1 + 880); v42 != i; ++v42)
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(*v42, v11);
    uint64_t v44 = *(void *)(a1 + 928);
    int v45 = *(_DWORD *)v181;
    *(void *)&long long __p = *(void *)v181;
    DWORD2(__p) = HIDWORD(v15);
    uint64_t v47 = v44 + 32;
    uint64_t v46 = *(void *)(v44 + 32);
    int v48 = (void *)a4;
    if (*(int *)v181 < (int)(-1431655765 * ((unint64_t)(*(void *)(v47 + 8) - v46) >> 3)))
    {
      uint64_t v49 = (void *)(v46 + 24 * *(int *)v181);
      int v50 = v49 + 1;
      int64_t v51 = (void *)v49[1];
      if (v51)
      {
        do
        {
          uint64_t v52 = *(void *)((char *)v51 + 28);
          BOOL v53 = *(void *)((char *)&__p + 4) < v52;
          if (*(uint64_t *)((char *)&__p + 4) >= v52) {
            int v54 = v51 + 1;
          }
          else {
            int v54 = v51;
          }
          if (v53) {
            int v50 = v51;
          }
          int64_t v51 = (void *)*v54;
        }
        while (*v54);
      }
      if (v50 != (uint64_t *)*v49)
      {
        uint64_t v55 = *v50;
        if (*v50)
        {
          do
          {
            uint64_t v56 = v55;
            uint64_t v55 = *(void *)(v55 + 8);
          }
          while (v55);
        }
        else
        {
          do
          {
            uint64_t v56 = v50[2];
            BOOL v57 = *(void *)v56 == (void)v50;
            int v50 = (uint64_t *)v56;
          }
          while (v57);
        }
        int v58 = *(_DWORD *)(v56 + 36);
        if (v58 != -1)
        {
          uint64_t v59 = *(void *)(a1 + 936);
          unint64_t v60 = *(void *)(*(void *)(v59 + 24) + (((unint64_t)v58 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if ((v60 >> (v58 & 0x3F ^ 1u)))
          {
            uint64_t v61 = (int **)operations_research::sat::IntegerTrail::InitializeConflict(a1, *(uint64_t *)v181, SHIDWORD(v15), a4, __src, a6, a7, a8);
            int v62 = (void **)v61;
            long long v64 = v61[1];
            unint64_t v63 = (unint64_t)v61[2];
            if ((unint64_t)v64 >= v63)
            {
              uint64_t v131 = *v61;
              uint64_t v132 = (char *)v64 - (char *)*v61;
              uint64_t v133 = v132 >> 2;
              unint64_t v134 = (v132 >> 2) + 1;
              if (v134 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v135 = v63 - (void)v131;
              if (v135 >> 1 > v134) {
                unint64_t v134 = v135 >> 1;
              }
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v136 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v134;
              }
              if (v136)
              {
                if (v136 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int32x2_t v137 = operator new(4 * v136);
              }
              else
              {
                int32x2_t v137 = 0;
              }
              long long v141 = (int *)&v137[4 * v133];
              int v142 = &v137[4 * v136];
              *long long v141 = v58;
              int v65 = v141 + 1;
              if (v64 != v131)
              {
                unint64_t v143 = (char *)v64 - (char *)v131 - 4;
                if (v143 < 0x2C) {
                  goto LABEL_224;
                }
                if ((unint64_t)((char *)v64 - v137 - v132) < 0x20) {
                  goto LABEL_224;
                }
                uint64_t v144 = (v143 >> 2) + 1;
                uint64_t v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
                long long v146 = &v64[v145 / 0xFFFFFFFFFFFFFFFCLL];
                long long v141 = (int *)((char *)v141 - v145);
                uint64_t v147 = &v137[4 * v133 - 16];
                uint64_t v148 = v64 - 4;
                uint64_t v149 = v144 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v150 = *(_OWORD *)v148;
                  *(v147 - 1) = *((_OWORD *)v148 - 1);
                  *uint64_t v147 = v150;
                  v147 -= 2;
                  v148 -= 8;
                  v149 -= 8;
                }
                while (v149);
                long long v64 = v146;
                if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_224:
                  do
                  {
                    int v151 = *--v64;
                    *--long long v141 = v151;
                  }
                  while (v64 != v131);
                }
              }
              uint64_t *v62 = v141;
              v62[1] = v65;
              v62[2] = v142;
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *long long v64 = v58;
              int v65 = v64 + 1;
            }
            v62[1] = v65;
            operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, v62);
            return 0;
          }
          uint64_t v117 = *(void *)(v56 + 28);
          *(void *)int v180 = __PAIR64__(v117, *(unsigned int *)v181);
          *(_DWORD *)&v180[8] = HIDWORD(v117);
          *(void *)&long long __p = *(void *)v181;
          DWORD2(__p) = HIDWORD(v15);
          unint64_t v118 = v60 >> (v58 & 0x3F);
          if (*(void *)&v180[4] == *(void *)((char *)&__p + 4))
          {
            if ((v118 & 1) == 0)
            {
              std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::function((uint64_t)v182, a4);
              operations_research::sat::IntegerTrail::EnqueueLiteralInternal(a1, v58, v182, __src, a6, (char *)a7, a8);
              std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function(v182);
            }
            return operations_research::sat::IntegerTrail::EnqueueAssociatedIntegerLiteral((void *)a1, *(uint64_t *)v181, SHIDWORD(v15), v58);
          }
          if ((v118 & 1) == 0)
          {
            if (*(void *)(a1 + 192) == *(void *)(a1 + 200))
            {
              operations_research::sat::Trail::EnqueueWithUnitReason(v59, v58);
            }
            else
            {
              unint64_t v139 = *(int *)(v59 + 12);
              uint64_t v140 = *(void *)(a1 + 824);
              if (v139 >= (*(void *)(a1 + 832) - v140) >> 2)
              {
                std::vector<int>::resize((std::vector<int> *)(a1 + 824), (int)v139 + 1);
                uint64_t v140 = *(void *)(a1 + 824);
                uint64_t v59 = *(void *)(a1 + 936);
              }
              *(_DWORD *)(v140 + 4 * v139) = a9;
              operations_research::sat::Trail::Enqueue(v59, v58, *(_DWORD *)(a1 + 32));
            }
            int v48 = (void *)a4;
          }
        }
      }
    }
    if (*(void *)(a1 + 192) == *(void *)(a1 + 200))
    {
      ++*(void *)(a1 + 864);
      uint64_t v156 = *(void *)(a1 + 40);
      uint64_t v157 = 12 * v45;
      *(void *)(v156 + v157) = v15;
      *(void *)(*(void *)(a1 + 144) + 20 * v45) = v15;
      int v158 = *(void **)(a1 + 936);
      v158[18] = 0;
      v158[13] = v158[12];
      operations_research::Domain::Domain(v179, *(void *)(v156 + v157), -*(void *)(v156 + 12 * (v45 ^ 1)));
      uint64_t updated = operations_research::sat::IntegerTrail::UpdateInitialDomain(a1, v45, (operations_research::Domain *)v179);
      if ((uint64_t)v179[0]) {
        operator delete(v179[1]);
      }
      return updated;
    }
    int v152 = (void *)v48[3];
    if (!v152)
    {
      uint64_t v159 = *(void *)(a1 + 144);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 152) - v159) >> 2) <= a9)
      {
        uint64_t v161 = *(void *)(a1 + 240);
        uint64_t v162 = *(void *)(a1 + 248);
        LODWORD(__p) = (*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 2;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 240, &__p);
        if (a6) {
          std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 288), *(void **)(a1 + 296), __src, &__src[4 * a6], (4 * a6) >> 2);
        }
        LODWORD(__p) = -1431655765 * ((*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 264, &__p);
        unint64_t v160 = (unint64_t)(v162 - v161) >> 2;
        if (a8) {
          std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(a1 + 312, *(void *)(a1 + 320), (char *)a7, (char *)a7 + 12 * a8, 0xAAAAAAAAAAAAAAABLL * ((12 * a8) >> 2));
        }
      }
      else
      {
        LODWORD(v160) = *(_DWORD *)(v159 + 20 * a9 + 16);
      }
      goto LABEL_192;
    }
    uint64_t v153 = *(void *)(a1 + 168);
    unint64_t v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2);
    if (v154 >= (*(void *)(a1 + 176) - v153) >> 5)
    {
      p_p = 0;
      std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::resize(a1 + 168, v154 + 1, (uint64_t)&__p);
      std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function(&__p);
      int v152 = (void *)v48[3];
      unint64_t v155 = (void *)(*(void *)(a1 + 168)
                      - 0x6666666666666660 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
      if (!v152)
      {
        p_p = 0;
LABEL_187:
        std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](&__p, v155);
        if (p_p == &__p)
        {
          (*(void (**)(long long *))(__p + 32))(&__p);
        }
        else if (p_p)
        {
          (*(void (**)(long long *))(*(void *)p_p + 40))(p_p);
        }
        int v45 = *(_DWORD *)v181;
        LODWORD(v160) = -1;
        int64_t v15 = *(void *)&v181[4];
LABEL_192:
        int v163 = *(_DWORD *)(*(void *)(a1 + 40) + 12 * v45 + 8);
        uint64_t v165 = *(_DWORD **)(a1 + 152);
        unint64_t v164 = *(void *)(a1 + 160);
        if ((unint64_t)v165 >= v164)
        {
          std::vector<int>::pointer v167 = *(_DWORD **)(a1 + 144);
          unint64_t v168 = 0xCCCCCCCCCCCCCCCDLL * (v165 - v167) + 1;
          if (v168 > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - (void)v167) >> 2);
          if (2 * v169 > v168) {
            unint64_t v168 = 2 * v169;
          }
          if (v169 >= 0x666666666666666) {
            unint64_t v170 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v170 = v168;
          }
          if (v170)
          {
            if (v170 > 0xCCCCCCCCCCCCCCCLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v171 = (char *)operator new(20 * v170);
          }
          else
          {
            uint64_t v171 = 0;
          }
          uint64_t v172 = &v171[4 * (v165 - v167)];
          *(void *)uint64_t v172 = v15;
          *((_DWORD *)v172 + 2) = v45;
          *((_DWORD *)v172 + 3) = v163;
          *((_DWORD *)v172 + 4) = v160;
          unint64_t v166 = v172 + 20;
          if (v165 != v167)
          {
            do
            {
              long long v173 = *(_OWORD *)(v165 - 5);
              *((_DWORD *)v172 - 1) = *(v165 - 1);
              *(_OWORD *)(v172 - 20) = v173;
              v172 -= 20;
              v165 -= 5;
            }
            while (v165 != v167);
            uint64_t v165 = *(_DWORD **)(a1 + 144);
          }
          *(void *)(a1 + 144) = v172;
          *(void *)(a1 + 152) = v166;
          *(void *)(a1 + 160) = &v171[20 * v170];
          if (v165) {
            operator delete(v165);
          }
        }
        else
        {
          *(void *)uint64_t v165 = v15;
          v165[2] = v45;
          v165[3] = v163;
          unint64_t v166 = v165 + 5;
          v165[4] = v160;
        }
        *(void *)(a1 + 152) = v166;
        uint64_t v174 = *(void *)(a1 + 40) + 12 * v45;
        *(void *)uint64_t v174 = v15;
        *(_DWORD *)(v174 + 8) = -858993459 * (((unint64_t)v166 - *(void *)(a1 + 144)) >> 2) - 1;
        return 1;
      }
    }
    else
    {
      unint64_t v155 = (void *)(v153 - 0x6666666666666660 * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
    }
    if (v152 == v48)
    {
      p_p = &__p;
      (*(void (**)(void *, long long *))(*v48 + 24))(v48, &__p);
    }
    else
    {
      p_p = (long long *)(*(uint64_t (**)(void *))(*v152 + 16))(v152);
    }
    goto LABEL_187;
  }
  unint64_t v31 = 1 - v15;
  if (v15 < (uint64_t)0x8000000000000003) {
    unint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  LODWORD(__p) = v11 ^ 1;
  *(void *)((char *)&__p + 4) = v31;
  uint64_t v32 = __p;
  unint64_t v33 = HIDWORD(v31);
  *(void *)int v180 = __p;
  *(_DWORD *)&v180[8] = HIDWORD(v31);
  int v34 = *(_DWORD *)(*(void *)(a1 + 408) + 4 * v11);
  if (v34 == -1
    || (uint64_t v35 = *(void *)(a1 + 936),
        ((*(void *)(*(void *)(v35 + 24) + (((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v34 & 0x3F ^ 1u)) & 1) != 0))
  {
    unint64_t v36 = (char **)operations_research::sat::IntegerTrail::InitializeConflict(a1, *(uint64_t *)v181, SHIDWORD(v15), a4, __src, a6, a7, a8);
    uint64_t v37 = (void **)v36;
    int v38 = *(_DWORD *)(*(void *)(a1 + 408) + 4 * v14);
    if (v38 != -1)
    {
      uint64_t v40 = v36[1];
      unint64_t v39 = (unint64_t)v36[2];
      if ((unint64_t)v40 >= v39)
      {
        BOOL v66 = *v36;
        uint64_t v67 = v40 - *v36;
        uint64_t v68 = v67 >> 2;
        unint64_t v69 = (v67 >> 2) + 1;
        if (v69 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = v39 - (void)v66;
        if (v70 >> 1 > v69) {
          unint64_t v69 = v70 >> 1;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          if (v71 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v72 = operator new(4 * v71);
        }
        else
        {
          int v72 = 0;
        }
        unint64_t v89 = &v72[4 * v68];
        uint64_t v90 = &v72[4 * v71];
        *unint64_t v89 = v38;
        uint64_t v41 = v89 + 1;
        if (v40 != v66)
        {
          unint64_t v91 = v40 - v66 - 4;
          if (v91 < 0x2C) {
            goto LABEL_225;
          }
          if ((unint64_t)(v40 - &v72[v67]) < 0x20) {
            goto LABEL_225;
          }
          uint64_t v92 = (v91 >> 2) + 1;
          uint64_t v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v94 = &v40[-v93];
          unint64_t v89 = (_DWORD *)((char *)v89 - v93);
          unint64_t v95 = &v72[4 * v68 - 16];
          uint64_t v96 = v40 - 16;
          uint64_t v97 = v92 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v98 = *(_OWORD *)v96;
            *(v95 - 1) = *((_OWORD *)v96 - 1);
            *unint64_t v95 = v98;
            v95 -= 2;
            v96 -= 32;
            v97 -= 8;
          }
          while (v97);
          uint64_t v40 = v94;
          if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_225:
            do
            {
              int v99 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--unint64_t v89 = v99;
            }
            while (v40 != v66);
          }
        }
        *uint64_t v37 = v89;
        v37[1] = v41;
        v37[2] = v90;
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v40 = v38;
        uint64_t v41 = v40 + 4;
      }
      v37[1] = v41;
      uint64_t v32 = *(void *)v180;
    }
    *(void *)&long long __p = v32;
    DWORD2(__p) = v33;
    uint64_t v100 = *(void *)((char *)&__p + 4);
    uint64_t v101 = *(void *)(a1 + 144);
    uint64_t v102 = *(void *)(a1 + 40);
    if (*(uint64_t *)((char *)&__p + 4) <= *(void *)(v101 + 20 * (int)v32))
    {
      signed int v103 = -1;
    }
    else
    {
      signed int v103 = *(_DWORD *)(v102 + 12 * (int)v32 + 8);
      uint64_t v104 = *(void *)(a1 + 72);
      signed int v105 = *(_DWORD *)(v104 + 4 * (int)v32);
      if (v105 < v103
        && *(_DWORD *)(v101 + 20 * v105 + 8) == v32
        && *(void *)(v101 + 20 * v105) >= *(uint64_t *)((char *)&__p + 4))
      {
        signed int v103 = *(_DWORD *)(v104 + 4 * (int)v32);
      }
      signed int v106 = v103;
      if (v103 >= *(_DWORD *)(a1 + 64)) {
LABEL_103:
      }
        *(_DWORD *)(v104 + 4 * (int)v32) = v106;
      while (1)
      {
        uint64_t v107 = *(void *)(v101 + 20 * v106);
        if (v107 == v100) {
          break;
        }
        if (v107 < v100) {
          goto LABEL_107;
        }
        signed int v103 = v106;
        signed int v106 = *(_DWORD *)(v101 + 20 * v106 + 12);
        if (v106 >= *(_DWORD *)(a1 + 64)) {
          goto LABEL_103;
        }
      }
      signed int v103 = v106;
    }
LABEL_107:
    if (v103 >= (int)(-1431655765 * ((unint64_t)(*(void *)(a1 + 48) - v102) >> 2)))
    {
      unint64_t v108 = *(signed int **)(a1 + 552);
      unint64_t v109 = *(void *)(a1 + 560);
      if ((unint64_t)v108 >= v109)
      {
        unint64_t v111 = *(signed int **)(a1 + 544);
        uint64_t v112 = v108 - v111;
        unint64_t v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v114 = v109 - (void)v111;
        if (v114 >> 1 > v113) {
          unint64_t v113 = v114 >> 1;
        }
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v113;
        }
        if (v115)
        {
          if (v115 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v116 = operator new(4 * v115);
        }
        else
        {
          int v116 = 0;
        }
        unint64_t v120 = (signed int *)&v116[4 * v112];
        uint64_t v121 = &v116[4 * v115];
        *unint64_t v120 = v103;
        uint64_t v110 = v120 + 1;
        if (v108 != v111)
        {
          unint64_t v122 = (char *)v108 - (char *)v111 - 4;
          if (v122 < 0x2C) {
            goto LABEL_226;
          }
          if ((unint64_t)((char *)v111 - v116) < 0x20) {
            goto LABEL_226;
          }
          uint64_t v123 = (v122 >> 2) + 1;
          uint64_t v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v125 = &v108[v124 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v120 = (signed int *)((char *)v120 - v124);
          uint64_t v126 = &v116[4 * v112 - 16];
          unint64_t v127 = v108 - 4;
          uint64_t v128 = v123 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v129 = *(_OWORD *)v127;
            *(v126 - 1) = *((_OWORD *)v127 - 1);
            *uint64_t v126 = v129;
            v126 -= 2;
            v127 -= 8;
            v128 -= 8;
          }
          while (v128);
          unint64_t v108 = v125;
          if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_226:
            do
            {
              signed int v130 = *--v108;
              *--unint64_t v120 = v130;
            }
            while (v108 != v111);
          }
        }
        *(void *)(a1 + 544) = v120;
        *(void *)(a1 + 552) = v110;
        *(void *)(a1 + 560) = v121;
        if (v111) {
          operator delete(v111);
        }
      }
      else
      {
        signed int *v108 = v103;
        uint64_t v110 = v108 + 1;
      }
      *(void *)(a1 + 552) = v110;
    }
    operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, v37);
    return 0;
  }
  if (*(void *)(a1 + 192) == *(void *)(a1 + 200))
  {
    operations_research::sat::Trail::EnqueueWithUnitReason(v35, v34);
    return 1;
  }
  if (!*(void *)(a4 + 24))
  {
    operations_research::sat::IntegerTrail::EnqueueLiteral(a1, v34, __src, a6, (char *)a7, a8);
    goto LABEL_156;
  }
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::operator()(a4, *(uint64_t *)v181, SHIDWORD(v15), -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2), a1 + 360, a1 + 384);
  long long __p = 0uLL;
  int v184 = 0;
  unint64_t v73 = *(int **)(a1 + 384);
  unint64_t v74 = *(int **)(a1 + 392);
  if (v73 == v74)
  {
    int v75 = 0;
    int32x2_t v138 = 0;
    goto LABEL_154;
  }
  int v75 = 0;
  do
  {
    while (1)
    {
      uint64_t v76 = *(void *)(a1 + 144) + 20 * *v73;
      int v77 = *(_DWORD *)(v76 + 8);
      uint64_t v78 = *(void *)v76;
      if (v75 >= v184) {
        break;
      }
      *(_DWORD *)int v75 = v77;
      *(void *)(v75 + 4) = v78;
      v75 += 12;
      *((void *)&__p + 1) = v75;
      if (++v73 == v74) {
        goto LABEL_146;
      }
    }
    uint64_t v79 = (char *)__p;
    unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v75[-__p] >> 2);
    unint64_t v81 = v80 + 1;
    if (v80 + 1 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)&v184[-__p] >> 2) > v81) {
      unint64_t v81 = 0x5555555555555556 * ((uint64_t)&v184[-__p] >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v184[-__p] >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v82 = 0x1555555555555555;
    }
    else {
      unint64_t v82 = v81;
    }
    if (v82)
    {
      if (v82 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v83 = (char *)operator new(12 * v82);
    }
    else
    {
      uint64_t v83 = 0;
    }
    std::vector<int>::pointer v84 = &v83[12 * v80];
    *(_DWORD *)std::vector<int>::pointer v84 = v77;
    *(void *)(v84 + 4) = v78;
    if (v75 == v79)
    {
      uint64_t v88 = v75;
      int v75 = v84 + 12;
      *(void *)&long long __p = &v83[12 * v80];
      *((void *)&__p + 1) = v84 + 12;
      int v184 = &v83[12 * v82];
      if (v88) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v85 = &v83[12 * v80];
      do
      {
        uint64_t v86 = *(void *)(v75 - 12);
        v75 -= 12;
        int v87 = *((_DWORD *)v75 + 2);
        *(void *)(v85 - 12) = v86;
        v85 -= 12;
        *((_DWORD *)v85 + 2) = v87;
      }
      while (v75 != v79);
      uint64_t v88 = (char *)__p;
      int v75 = v84 + 12;
      *(void *)&long long __p = v85;
      *((void *)&__p + 1) = v84 + 12;
      int v184 = &v83[12 * v82];
      if (v88) {
LABEL_78:
      }
        operator delete(v88);
    }
    *((void *)&__p + 1) = v75;
    ++v73;
  }
  while (v73 != v74);
LABEL_146:
  int32x2_t v138 = (char *)__p;
LABEL_154:
  operations_research::sat::IntegerTrail::EnqueueLiteral(a1, v34, *(char **)(a1 + 360), (uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 2, v138, 0xAAAAAAAAAAAAAAABLL * ((v75 - v138) >> 2));
  if (v138) {
    operator delete(v138);
  }
LABEL_156:
  std::vector<operations_research::sat::IntegerLiteral>::push_back[abi:ne180100]((void **)(a1 + 312), (uint64_t *)v180);
  return 1;
}

void sub_23CCEC888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CCEC89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v24)
  {
    operator delete(v24);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function(void *a1)
{
  std::vector<int>::size_type v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, char *__src, uint64_t a5, uint64_t *a6, uint64_t a7, int a8)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v11 = 0;
  uint64_t v8 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v10, __src, a5, a6, a7, a8);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v8;
}

void sub_23CCECA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::IntegerTrail::Enqueue(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      int v11 = v10;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v10);
    }
    else
    {
      int v11 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
    }
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v8 = operations_research::sat::IntegerTrail::EnqueueInternal(a1, a2, a3, (uint64_t)v10, 0, 0, 0, 0, -858993459 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v8;
}

void sub_23CCECC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    return a1;
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    return a1;
  }
}

void *operations_research::sat::IntegerTrail::EnqueueLiteral(uint64_t a1, int a2, char *__src, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  operations_research::sat::IntegerTrail::EnqueueLiteralInternal(a1, a2, v7, __src, a4, a5, a6);
  unint64_t result = v8;
  if (v8 == v7) {
    return (void *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (void *)(*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_23CCECDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerTrail::EnqueueLiteralInternal(uint64_t a1, int a2, void *a3, char *__src, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 936);
  if (*(void *)(a1 + 192) != *(void *)(a1 + 200))
  {
    unint64_t v15 = *(int *)(v8 + 12);
    uint64_t v16 = *(void *)(a1 + 824);
    unint64_t v17 = (*(void *)(a1 + 832) - v16) >> 2;
    if (v17 <= v15)
    {
      unint64_t v18 = (int)v15 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17) {
          *(void *)(a1 + 832) = v16 + 4 * v18;
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a1 + 824), v18 - v17);
        uint64_t v16 = *(void *)(a1 + 824);
      }
    }
    uint64_t v20 = (void *)(a1 + 144);
    uint64_t v21 = (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2;
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * v21;
    *(_DWORD *)(v16 + 4 * v15) = -858993459 * v21;
    int64_t v23 = (void *)a3[3];
    if (v23)
    {
      uint64_t v25 = *(void *)(a1 + 168);
      int v24 = *(void **)(a1 + 176);
      unint64_t v26 = ((uint64_t)v24 - v25) >> 5;
      if (v22 >= v26)
      {
        unint64_t v35 = v22 + 1;
        uint64_t v101 = 0;
        unint64_t v36 = v35 - v26;
        if (v35 <= v26)
        {
          if (v35 < v26)
          {
            int v45 = (void *)(v25 + 32 * v35);
            if (v24 != v45)
            {
              uint64_t v46 = v24 - 4;
              uint64_t v47 = v24 - 4;
              do
              {
                uint64_t v49 = (void *)v47[3];
                if (v47 == v49)
                {
                  (*(void (**)(void *))(*v47 + 32))(v47);
                }
                else if (v49)
                {
                  (*(void (**)(void *, unint64_t))(*v49 + 40))(v49, v36);
                }
                v46 -= 4;
                BOOL v48 = v47 == v45;
                v47 -= 4;
              }
              while (!v48);
            }
            *(void *)(a1 + 176) = v45;
          }
        }
        else
        {
          std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append((void **)(a1 + 168), v36, (uint64_t)v100);
          if (v101 == v100)
          {
            (*(void (**)(void *))(v100[0] + 32))(v100);
          }
          else if (v101)
          {
            (*(void (**)(void))(*v101 + 40))();
          }
        }
        int64_t v23 = (void *)a3[3];
        uint64_t v27 = (void *)(*(void *)(a1 + 168)
                       - 0x6666666666666660 * ((*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2));
        if (!v23)
        {
          uint64_t v101 = 0;
LABEL_77:
          std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](v100, v27);
          if (v101 != v100)
          {
            if (v101) {
              (*(void (**)(void))(*v101 + 40))();
            }
            LODWORD(v83) = -1;
            uint64_t v85 = *(void **)(a1 + 152);
            unint64_t v84 = *(void *)(a1 + 160);
            if ((unint64_t)v85 < v84) {
              goto LABEL_81;
            }
LABEL_83:
            int v87 = (void *)*v20;
            unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v85 - *v20) >> 2);
            unint64_t v89 = v88 + 1;
            if (v88 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v84 - (void)v87) >> 2);
            if (2 * v90 > v89) {
              unint64_t v89 = 2 * v90;
            }
            if (v90 >= 0x666666666666666) {
              unint64_t v91 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              if (v91 > 0xCCCCCCCCCCCCCCCLL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v92 = (char *)operator new(20 * v91);
            }
            else
            {
              uint64_t v92 = 0;
            }
            uint64_t v93 = &v92[20 * v88];
            *(void *)uint64_t v93 = 0;
            *((void *)v93 + 1) = -1;
            *((_DWORD *)v93 + 4) = v83;
            uint64_t v86 = v93 + 20;
            if (v85 != v87)
            {
              do
              {
                long long v94 = *(_OWORD *)((char *)v85 - 20);
                *((_DWORD *)v93 - 1) = *((_DWORD *)v85 - 1);
                *(_OWORD *)(v93 - 20) = v94;
                v93 -= 20;
                uint64_t v85 = (void *)((char *)v85 - 20);
              }
              while (v85 != v87);
              uint64_t v85 = (void *)*v20;
            }
            *(void *)(a1 + 144) = v93;
            *(void *)(a1 + 152) = v86;
            *(void *)(a1 + 160) = &v92[20 * v91];
            if (v85) {
              operator delete(v85);
            }
            goto LABEL_98;
          }
          (*(void (**)(void *))(v100[0] + 32))(v100);
          LODWORD(v83) = -1;
          uint64_t v85 = *(void **)(a1 + 152);
          unint64_t v84 = *(void *)(a1 + 160);
          if ((unint64_t)v85 >= v84) {
            goto LABEL_83;
          }
LABEL_81:
          *uint64_t v85 = 0;
          v85[1] = -1;
          *((_DWORD *)v85 + 4) = v83;
          uint64_t v86 = (char *)v85 + 20;
LABEL_98:
          *(void *)(a1 + 152) = v86;
          uint64_t v8 = *(void *)(a1 + 936);
          int v95 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(*(void *)(v8 + 72) + 4 * *(int *)(v8 + 12)) = a2;
          int v19 = (*(_DWORD *)(v8 + 8) & 0xFFFFFFE | a2 & 1 | (v95 << 28)) ^ 1;
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v27 = (void *)(v25 + 32 * v22);
      }
      if (v23 == a3)
      {
        uint64_t v101 = v100;
        (*(void (**)(void *, void *))(*a3 + 24))(a3, v100);
      }
      else
      {
        uint64_t v101 = (void *)(*(uint64_t (**)(void *))(*v23 + 16))(v23);
      }
      goto LABEL_77;
    }
    uint64_t v97 = a7;
    __srca = a6;
    uint64_t v28 = *(char **)(a1 + 240);
    uint64_t v29 = *(char **)(a1 + 248);
    uint64_t v30 = v29 - v28;
    unint64_t v31 = *(void **)(a1 + 296);
    unint64_t v32 = ((unint64_t)v31 - *(void *)(a1 + 288)) >> 2;
    unint64_t v33 = *(void *)(a1 + 256);
    uint64_t v99 = v29 - v28;
    if ((unint64_t)v29 < v33)
    {
      *(_DWORD *)uint64_t v29 = v32;
      uint64_t v34 = (uint64_t)(v29 + 4);
      goto LABEL_46;
    }
    uint64_t v37 = v30 >> 2;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62) {
      goto LABEL_101;
    }
    uint64_t v39 = v33 - (void)v28;
    if (v39 >> 1 > v38) {
      unint64_t v38 = v39 >> 1;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      uint64_t v96 = *(void **)(a1 + 296);
      if (v40 >> 62) {
        goto LABEL_103;
      }
      uint64_t v41 = operator new(4 * v40);
      unint64_t v31 = v96;
      unint64_t v42 = &v41[4 * v37];
      unint64_t v43 = &v41[4 * v40];
      *unint64_t v42 = v32;
      uint64_t v34 = (uint64_t)(v42 + 1);
      int64_t v44 = v29 - v28;
      if (v29 == v28) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v42 = (_DWORD *)(4 * v37);
      unint64_t v43 = 0;
      *(_DWORD *)(4 * v37) = v32;
      uint64_t v34 = 4 * v37 + 4;
      int64_t v44 = v29 - v28;
      if (v29 == v28)
      {
LABEL_43:
        *(void *)(a1 + 240) = v42;
        *(void *)(a1 + 248) = v34;
        *(void *)(a1 + 256) = v43;
        if (v28)
        {
          operator delete(v28);
          unint64_t v31 = *(void **)(a1 + 296);
        }
        uint64_t v30 = v99;
LABEL_46:
        *(void *)(a1 + 248) = v34;
        std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 288), v31, __src, &__src[4 * a5], (4 * a5) >> 2);
        uint64_t v59 = *(void *)(a1 + 320);
        int v60 = -1431655765 * ((unint64_t)(v59 - *(void *)(a1 + 312)) >> 2);
        int v62 = *(char **)(a1 + 272);
        unint64_t v61 = *(void *)(a1 + 280);
        if ((unint64_t)v62 < v61)
        {
          *(_DWORD *)int v62 = v60;
          uint64_t v63 = (uint64_t)(v62 + 4);
          long long v64 = __srca;
          goto LABEL_66;
        }
        int v65 = *(char **)(a1 + 264);
        uint64_t v66 = (v62 - v65) >> 2;
        unint64_t v67 = v66 + 1;
        if (!((unint64_t)(v66 + 1) >> 62))
        {
          uint64_t v68 = v61 - (void)v65;
          if (v68 >> 1 > v67) {
            unint64_t v67 = v68 >> 1;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v67;
          }
          if (!v69)
          {
            uint64_t v70 = 0;
            unint64_t v71 = (_DWORD *)(4 * v66);
            int v72 = 0;
            *(_DWORD *)(4 * v66) = v60;
            uint64_t v63 = 4 * v66 + 4;
            int64_t v73 = v62 - v65;
            if (v62 != v65) {
              goto LABEL_57;
            }
            goto LABEL_69;
          }
          if (!(v69 >> 62))
          {
            uint64_t v70 = operator new(4 * v69);
            unint64_t v71 = &v70[4 * v66];
            int v72 = &v70[4 * v69];
            _DWORD *v71 = v60;
            uint64_t v63 = (uint64_t)(v71 + 1);
            int64_t v73 = v62 - v65;
            if (v62 != v65)
            {
LABEL_57:
              unint64_t v74 = v73 - 4;
              long long v64 = __srca;
              if (v74 < 0x2C) {
                goto LABEL_106;
              }
              if ((unint64_t)(v65 - v70) < 0x20) {
                goto LABEL_106;
              }
              uint64_t v75 = (v74 >> 2) + 1;
              uint64_t v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
              int v77 = &v62[-v76];
              unint64_t v71 = (_DWORD *)((char *)v71 - v76);
              uint64_t v78 = &v70[4 * v66 - 16];
              uint64_t v79 = v62 - 16;
              uint64_t v80 = v75 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v81 = *(_OWORD *)v79;
                *(v78 - 1) = *((_OWORD *)v79 - 1);
                *uint64_t v78 = v81;
                v78 -= 2;
                v79 -= 32;
                v80 -= 8;
              }
              while (v80);
              int v62 = v77;
              if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_106:
                do
                {
                  int v82 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--unint64_t v71 = v82;
                }
                while (v62 != v65);
              }
              *(void *)(a1 + 264) = v71;
              *(void *)(a1 + 272) = v63;
              *(void *)(a1 + 280) = v72;
              if (!v65) {
                goto LABEL_65;
              }
LABEL_64:
              operator delete(v65);
              uint64_t v59 = *(void *)(a1 + 320);
LABEL_65:
              uint64_t v30 = v99;
LABEL_66:
              unint64_t v83 = (unint64_t)v30 >> 2;
              *(void *)(a1 + 272) = v63;
              std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(a1 + 312, v59, v64, &v64[12 * v97], 0xAAAAAAAAAAAAAAABLL * ((12 * v97) >> 2));
              uint64_t v85 = *(void **)(a1 + 152);
              unint64_t v84 = *(void *)(a1 + 160);
              if ((unint64_t)v85 >= v84) {
                goto LABEL_83;
              }
              goto LABEL_81;
            }
LABEL_69:
            long long v64 = __srca;
            *(void *)(a1 + 264) = v71;
            *(void *)(a1 + 272) = v63;
            *(void *)(a1 + 280) = v72;
            if (!v65) {
              goto LABEL_65;
            }
            goto LABEL_64;
          }
LABEL_103:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
LABEL_101:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
    }
    unint64_t v50 = v44 - 4;
    if (v50 < 0x2C) {
      goto LABEL_107;
    }
    if (v29 - v41 - (v99 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_107;
    }
    uint64_t v51 = (v50 >> 2) + 1;
    uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    BOOL v53 = &v29[-v52];
    unint64_t v42 = (_DWORD *)((char *)v42 - v52);
    int v54 = &v41[4 * v37 - 16];
    uint64_t v55 = v29 - 16;
    uint64_t v56 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      _OWORD *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 8;
    }
    while (v56);
    uint64_t v29 = v53;
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        int v58 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *--unint64_t v42 = v58;
      }
      while (v29 != v28);
    }
    goto LABEL_43;
  }
  *(_DWORD *)(*(void *)(v8 + 72) + 4 * *(int *)(v8 + 12)) = a2;
  int v19 = (*(_DWORD *)(v8 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
LABEL_99:
  *(_DWORD *)(v8 + 8) = v19;
  *(void *)(*(void *)(v8 + 120) + 8 * (a2 >> 1)) = *(void *)(v8 + 8);
  *(void *)(*(void *)(v8 + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(v8 + 12);
}

void sub_23CCED600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::resize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (v4 - *(void *)a1) >> 5;
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append((void **)a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *(void *)a1 + 32 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = v4 - 32;
      int v10 = (void *)(v4 - 32);
      do
      {
        uint64_t v12 = (void *)v10[3];
        if (v10 == v12)
        {
          (*(void (**)(void *))(*v10 + 32))(v10);
        }
        else if (v12)
        {
          (*(void (**)(void *))(*v12 + 40))(v12);
        }
        v9 -= 32;
        BOOL v11 = v10 == (void *)v8;
        v10 -= 4;
      }
      while (!v11);
    }
    *(void *)(a1 + 8) = v8;
  }
}

uint64_t operations_research::sat::Trail::Enqueue(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 72) + 4 * *(int *)(result + 12)) = a2;
  *(_DWORD *)(result + 8) = (*(_DWORD *)(result + 8) & 0xFFFFFFE | a2 & 1 | (a3 << 28)) ^ 1;
  *(void *)(*(void *)(result + 120) + 8 * (a2 >> 1)) = *(void *)(result + 8);
  *(void *)(*(void *)(result + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(result + 12);
  return result;
}

void operations_research::sat::IntegerTrail::MergeReasonIntoInternal(uint64_t a1, void **a2)
{
  uint64_t v4 = (void *)(a1 + 616);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 616, (*(void *)(*(void *)(a1 + 936) + 80) - *(void *)(*(void *)(a1 + 936) + 72)) >> 2);
  uint64_t v114 = a2;
  unint64_t v5 = (int *)*a2;
  BOOL v6 = (int *)a2[1];
  while (v5 != v6)
  {
    int v7 = *v5++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v7 >> 1);
  }
  uint64_t v8 = *(int **)(a1 + 544);
  uint64_t v9 = *(int **)(a1 + 552);
  if (v8 != v9)
  {
    uint64_t v10 = *(void *)(a1 + 144);
    uint64_t v11 = *(void *)(a1 + 592);
    uint64_t v12 = *(int **)(a1 + 544);
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      uint64_t v15 = 4 * *(int *)(v10 + 20 * v14 + 8);
      if (*(_DWORD *)(v11 + v15) > v14) {
        int v13 = *(_DWORD *)(v11 + v15);
      }
      *(_DWORD *)(v11 + v15) = v13;
    }
    while (v12 != v9);
  }
  uint64_t v16 = (char *)v9 - (char *)v8;
  if ((char *)v9 - (char *)v8 >= 5 && (unint64_t)v16 >= 8)
  {
    uint64_t v102 = v16 >> 2;
    int64_t v103 = (unint64_t)(v102 - 2) >> 1;
    int64_t v104 = v103;
    do
    {
      if (v103 >= v104)
      {
        uint64_t v105 = (2 * v104) | 1;
        signed int v106 = &v8[v105];
        if (2 * v104 + 2 >= v102)
        {
          int v107 = *v106;
          unint64_t v109 = &v8[v104];
          int v110 = *v109;
          if (*v106 >= *v109) {
            goto LABEL_118;
          }
        }
        else
        {
          int v107 = v106[1];
          BOOL v108 = *v106 < v107;
          if (*v106 > v107) {
            int v107 = *v106;
          }
          if (v108)
          {
            ++v106;
            uint64_t v105 = 2 * v104 + 2;
          }
          unint64_t v109 = &v8[v104];
          int v110 = *v109;
          if (v107 >= *v109)
          {
LABEL_118:
            while (1)
            {
              *unint64_t v109 = v107;
              unint64_t v109 = v106;
              if (v103 < v105) {
                break;
              }
              uint64_t v112 = (2 * v105) | 1;
              signed int v106 = &v8[v112];
              uint64_t v105 = 2 * v105 + 2;
              if (v105 < v102)
              {
                int v107 = *v106;
                int v111 = v106[1];
                if (*v106 <= v111) {
                  int v107 = v106[1];
                }
                if (*v106 >= v111) {
                  uint64_t v105 = v112;
                }
                else {
                  ++v106;
                }
                if (v107 < v110) {
                  break;
                }
              }
              else
              {
                int v107 = *v106;
                uint64_t v105 = v112;
                if (*v106 < v110) {
                  break;
                }
              }
            }
            *unint64_t v109 = v110;
          }
        }
      }
      BOOL v108 = v104-- <= 0;
    }
    while (!v108);
  }
  *(void *)(a1 + 576) = *(void *)(a1 + 568);
  if (v8 != v9)
  {
    int v116 = (void **)(a1 + 544);
    unint64_t v113 = (void **)(a1 + 568);
    while (1)
    {
      int v18 = *v8;
      uint64_t v19 = *(void *)(a1 + 144);
      uint64_t v20 = (char *)v9 - (char *)v8;
      if ((char *)v9 - (char *)v8 >= 5)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v20 >> 2;
        int64_t v23 = (unint64_t)((v20 >> 2) - 2) >> 1;
        int v24 = v8;
        do
        {
          while (1)
          {
            uint64_t v27 = &v24[v21 + 1];
            uint64_t v28 = (2 * v21) | 1;
            uint64_t v21 = 2 * v21 + 2;
            if (v21 < v22) {
              break;
            }
            uint64_t v21 = v28;
            int *v24 = *v27;
            int v24 = v27;
            if (v28 > v23) {
              goto LABEL_24;
            }
          }
          int v25 = *v27;
          int v26 = v27[1];
          if (*v27 <= v26) {
            int v25 = v27[1];
          }
          if (*v27 >= v26) {
            uint64_t v21 = v28;
          }
          else {
            ++v27;
          }
          int *v24 = v25;
          int v24 = v27;
        }
        while (v21 <= v23);
LABEL_24:
        uint64_t v29 = v9 - 1;
        if (v27 == v9 - 1)
        {
          int *v27 = v18;
        }
        else
        {
          int *v27 = *v29;
          *uint64_t v29 = v18;
          uint64_t v30 = (char *)v27 - (char *)v8 + 4;
          if (v30 >= 5)
          {
            unint64_t v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
            unint64_t v32 = &v8[v31];
            int v33 = *v32;
            int v34 = *v27;
            if (*v32 < *v27)
            {
              do
              {
                int *v27 = v33;
                uint64_t v27 = v32;
                if (!v31) {
                  break;
                }
                unint64_t v31 = (v31 - 1) >> 1;
                unint64_t v32 = &v8[v31];
                int v33 = *v32;
              }
              while (*v32 < v34);
              int *v27 = v34;
            }
          }
        }
      }
      *(void *)(a1 + 552) = v9 - 1;
      uint64_t v35 = v19 + 20 * v18;
      uint64_t v37 = *(int *)(v35 + 8);
      unint64_t v36 = (int *)(v35 + 8);
      uint64_t v38 = *(void *)(a1 + 592);
      if (*(_DWORD *)(v38 + 4 * v37) != v18) {
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 64) = v18;
      *(_DWORD *)(v38 + 4 * *v36) = 0;
      *(unsigned char *)(a1 + 536) = 0;
      if (*(_DWORD *)(v19 + 20 * v18 + 16) == -1)
      {
        LODWORD(v117) = *v36;
        *(void *)((char *)&v117 + 4) = *(void *)(v19 + 20 * v18);
        uint64_t v39 = *(void *)(a1 + 168);
        uint64_t v121 = v117;
        int v122 = DWORD2(v117);
        int v120 = v18;
        uint64_t v118 = a1 + 384;
        uint64_t v119 = a1 + 360;
        uint64_t v40 = *(void *)(v39 + 32 * v18 + 24);
        if (!v40) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t *))(*(void *)v40 + 48))(v40, &v121, &v120, &v119, &v118);
      }
      unint64_t v115 = v36;
      operations_research::sat::IntegerTrail::AppendLiteralsReason((void *)a1, v18, v114);
      std::vector<int>::pointer v41 = operations_research::sat::IntegerTrail::Dependencies((std::vector<int> *)a1, v18);
      if (v42)
      {
        std::vector<int>::pointer v43 = v41;
        int64_t v44 = &v41[v42];
        do
        {
          int v45 = *v43;
          if (*v43 < 0) {
            break;
          }
          uint64_t v46 = *(int *)(*(void *)(a1 + 144) + 20 * v45 + 8);
          uint64_t v47 = *(void *)(a1 + 592);
          int v48 = *(_DWORD *)(v47 + 4 * v46);
          if (v48 != 0x7FFFFFFF) {
            *(unsigned char *)(a1 + 536) = 1;
          }
          if (v45 > v48)
          {
            *(_DWORD *)(v47 + 4 * v46) = v45;
            uint64_t v49 = *(char **)(a1 + 552);
            unint64_t v50 = *(void *)(a1 + 560);
            if ((unint64_t)v49 >= v50)
            {
              int v54 = (char *)*v116;
              uint64_t v55 = v49 - (unsigned char *)*v116;
              uint64_t v56 = v55 >> 2;
              unint64_t v57 = (v55 >> 2) + 1;
              if (v57 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v58 = v50 - (void)v54;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                if (v59 >> 62) {
                  goto LABEL_123;
                }
                int v60 = operator new(4 * v59);
                unint64_t v61 = (int *)&v60[4 * v56];
                int *v61 = v45;
                uint64_t v51 = (uint64_t)(v61 + 1);
                if (v49 != v54)
                {
LABEL_55:
                  unint64_t v62 = v49 - 4 - v54;
                  if (v62 < 0x2C) {
                    goto LABEL_128;
                  }
                  if ((unint64_t)(v49 - &v60[v55]) < 0x20) {
                    goto LABEL_128;
                  }
                  uint64_t v63 = (v62 >> 2) + 1;
                  uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                  int v65 = &v49[-v64];
                  unint64_t v61 = (int *)((char *)v61 - v64);
                  uint64_t v66 = &v60[4 * v56 - 16];
                  unint64_t v67 = v49 - 16;
                  uint64_t v68 = v63 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v69 = *(_OWORD *)v67;
                    *(v66 - 1) = *((_OWORD *)v67 - 1);
                    *uint64_t v66 = v69;
                    v66 -= 2;
                    v67 -= 32;
                    v68 -= 8;
                  }
                  while (v68);
                  uint64_t v49 = v65;
                  if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_128:
                    do
                    {
                      int v70 = *((_DWORD *)v49 - 1);
                      v49 -= 4;
                      *--unint64_t v61 = v70;
                    }
                    while (v49 != v54);
                  }
                }
              }
              else
              {
                int v60 = 0;
                unint64_t v61 = (int *)(4 * v56);
                *(_DWORD *)(4 * v56) = v45;
                uint64_t v51 = 4 * v56 + 4;
                if (v49 != v54) {
                  goto LABEL_55;
                }
              }
              *(void *)(a1 + 544) = v61;
              *(void *)(a1 + 552) = v51;
              *(void *)(a1 + 560) = &v60[4 * v59];
              if (v54) {
                operator delete(v54);
              }
              *(void *)(a1 + 552) = v51;
              uint64_t v52 = *(void *)(a1 + 544);
              uint64_t v53 = v51 - v52;
              if (v51 - v52 < 5) {
                goto LABEL_38;
              }
LABEL_67:
              unint64_t v71 = (((unint64_t)v53 >> 2) - 2) >> 1;
              int v72 = (_DWORD *)(v52 + 4 * v71);
              int v75 = *(_DWORD *)(v51 - 4);
              unint64_t v74 = (_DWORD *)(v51 - 4);
              int v73 = v75;
              int v76 = *v72;
              if (*v72 < v75)
              {
                do
                {
                  _DWORD *v74 = v76;
                  unint64_t v74 = v72;
                  if (!v71) {
                    break;
                  }
                  unint64_t v71 = (v71 - 1) >> 1;
                  int v72 = (_DWORD *)(v52 + 4 * v71);
                  int v76 = *v72;
                }
                while (*v72 < v73);
                _DWORD *v74 = v73;
              }
              goto LABEL_38;
            }
            *(_DWORD *)uint64_t v49 = v45;
            uint64_t v51 = (uint64_t)(v49 + 4);
            *(void *)(a1 + 552) = v49 + 4;
            uint64_t v52 = *(void *)(a1 + 544);
            uint64_t v53 = (uint64_t)&v49[-v52 + 4];
            if (v53 >= 5) {
              goto LABEL_67;
            }
          }
LABEL_38:
          ++v43;
        }
        while (v43 != v44);
      }
      unint64_t v17 = v115;
      if (*(unsigned char *)(a1 + 536)) {
        goto LABEL_13;
      }
      int v77 = *(char **)(a1 + 576);
      unint64_t v78 = *(void *)(a1 + 584);
      if ((unint64_t)v77 >= v78) {
        break;
      }
      *(_DWORD *)int v77 = *v115;
      uint64_t v79 = v77 + 4;
LABEL_94:
      *(void *)(a1 + 576) = v79;
      *(_DWORD *)(*(void *)(a1 + 592) + 4 * *v17) = 0x7FFFFFFF;
LABEL_13:
      uint64_t v8 = *(int **)(a1 + 544);
      uint64_t v9 = *(int **)(a1 + 552);
      if (v8 == v9)
      {
        long long v98 = *(int **)(a1 + 568);
        uint64_t v99 = *(int **)(a1 + 576);
        if (v98 != v99)
        {
          uint64_t v100 = *(void *)(a1 + 592);
          do
          {
            uint64_t v101 = *v98++;
            *(_DWORD *)(v100 + 4 * v101) = 0;
          }
          while (v98 != v99);
        }
        return;
      }
    }
    uint64_t v80 = (char *)*v113;
    uint64_t v81 = v77 - (unsigned char *)*v113;
    uint64_t v82 = v81 >> 2;
    unint64_t v83 = (v81 >> 2) + 1;
    if (v83 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v84 = v78 - (void)v80;
    if (v84 >> 1 > v83) {
      unint64_t v83 = v84 >> 1;
    }
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v85 = v83;
    }
    if (v85)
    {
      if (v85 >> 62) {
LABEL_123:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v86 = operator new(4 * v85);
    }
    else
    {
      uint64_t v86 = 0;
    }
    int v87 = (int *)&v86[4 * v82];
    *int v87 = *v115;
    uint64_t v79 = v87 + 1;
    if (v77 == v80)
    {
      unint64_t v17 = v115;
      goto LABEL_92;
    }
    unint64_t v88 = v77 - 4 - v80;
    if (v88 >= 0x2C)
    {
      unint64_t v89 = v77 - &v86[v81];
      unint64_t v17 = v115;
      if (v89 >= 0x20)
      {
        uint64_t v90 = (v88 >> 2) + 1;
        uint64_t v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v92 = &v77[-v91];
        int v87 = (int *)((char *)v87 - v91);
        uint64_t v93 = &v86[4 * v82 - 16];
        long long v94 = v77 - 16;
        uint64_t v95 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v96 = *(_OWORD *)v94;
          *(v93 - 1) = *((_OWORD *)v94 - 1);
          _OWORD *v93 = v96;
          v93 -= 2;
          v94 -= 32;
          v95 -= 8;
        }
        while (v95);
        int v77 = v92;
        if (v90 == (v90 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_92:
          *(void *)(a1 + 568) = v87;
          *(void *)(a1 + 576) = v79;
          *(void *)(a1 + 584) = &v86[4 * v85];
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_94;
        }
      }
    }
    else
    {
      unint64_t v17 = v115;
    }
    do
    {
      int v97 = *((_DWORD *)v77 - 1);
      v77 -= 4;
      *--int v87 = v97;
    }
    while (v77 != v80);
    goto LABEL_92;
  }
}

std::vector<int>::pointer operations_research::sat::IntegerTrail::Dependencies(std::vector<int> *this, int a2)
{
  uint64_t v3 = this[6].__begin_[5 * a2 + 4];
  if (v3 == -1) {
    return this[16].__begin_;
  }
  std::vector<int>::pointer begin = this[11].__begin_;
  int v5 = begin[v3];
  unint64_t v6 = (int)v3 + 1;
  if (v6 < this[11].__end_ - begin)
  {
    int v7 = begin[v6];
    if (v7 != v5) {
      goto LABEL_4;
    }
    return 0;
  }
  int v7 = -1431655765 * ((unint64_t)((char *)this[13].__end_ - (char *)this[13].__begin_) >> 2);
  if (v7 == v5) {
    return 0;
  }
LABEL_4:
  uint64_t v8 = v5;
  std::vector<int>::pointer v9 = this[14].__begin_;
  unint64_t v10 = this[14].__end_ - v9;
  if (v7 > v10)
  {
    *(_DWORD *)int v26 = -1;
    std::vector<int>::__append(this + 14, v7 - v10, (std::vector<int>::const_reference)v26);
    std::vector<int>::pointer v9 = this[14].__begin_;
  }
  std::vector<int>::pointer result = &v9[v5];
  if (*result == -1 && v7 > v5)
  {
    unint64_t value = this[1].__end_cap_.__value_;
    int v13 = -1431655765 * ((unint64_t)((char *)this[2].__begin_ - (char *)value) >> 2);
    std::vector<int>::pointer v14 = this[13].__begin_;
    std::vector<int>::pointer v15 = this[6].__begin_;
    int v16 = v5;
    do
    {
      unint64_t v17 = &v14[3 * v8];
      uint64_t v18 = *(void *)v17;
      LODWORD(v17) = v17[2];
      *(void *)int v26 = v18;
      *(_DWORD *)&v26[8] = v17;
      uint64_t v19 = *(void *)&v26[4];
      if (*(uint64_t *)&v26[4] <= *(void *)&v15[5 * (int)v18])
      {
        int v21 = -1;
LABEL_26:
        if (v21 < v13) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v20 = (int)v18;
        int v21 = value[3 * (int)v18 + 2];
        std::vector<int>::pointer v22 = this[3].__begin_;
        int v23 = v22[(int)v18];
        if (v23 < v21 && v15[5 * v23 + 2] == v18 && *(void *)&v15[5 * v23] >= *(uint64_t *)&v26[4]) {
          int v21 = v22[(int)v18];
        }
        int v24 = v21;
        if (v21 >= SLODWORD(this[2].__end_cap_.__value_)) {
LABEL_20:
        }
          v22[v20] = v24;
        while (1)
        {
          uint64_t v25 = *(void *)&v15[5 * v24];
          if (v25 == v19) {
            break;
          }
          if (v25 < v19) {
            goto LABEL_26;
          }
          int v21 = v24;
          int v24 = v15[5 * v24 + 3];
          if (v24 >= SLODWORD(this[2].__end_cap_.__value_)) {
            goto LABEL_20;
          }
        }
        int v21 = v24;
        if (v24 < v13) {
          goto LABEL_13;
        }
      }
      v9[v16++] = v21;
LABEL_13:
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

void operations_research::sat::IntegerTrail::AppendLiteralsReason(void *a1, int a2, void **a3)
{
  uint64_t v4 = a1;
  int v66 = a2;
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[6] - a1[5]) >> 2);
  if (v65 > a2) {
    google::MakeCheckOpString<int,unsigned long>((int)&v66, (int)&v65, "trail_index >= vars_.size()");
  }
  uint64_t v5 = *(int *)(a1[18] + 20 * a2 + 16);
  if (v5 == -1)
  {
    uint64_t v11 = (int *)a1[45];
    unint64_t v10 = (int *)a1[46];
    if (v11 == v10) {
      return;
    }
    uint64_t v12 = a1 + 77;
    uint64_t v63 = (int *)a1[46];
    unint64_t v61 = a1 + 77;
    while (1)
    {
      int v14 = *v11;
      int v15 = *v11 >> 1;
      if ((*(void *)(v4[78] + (((unint64_t)((uint64_t)*v11 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15)) {
        goto LABEL_10;
      }
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v12, v15);
      unint64_t v17 = (int *)a3[1];
      unint64_t v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16) {
        break;
      }
      int *v17 = v14;
      uint64_t v13 = (uint64_t)(v17 + 1);
LABEL_9:
      a3[1] = (void *)v13;
LABEL_10:
      if (++v11 == v10) {
        return;
      }
    }
    uint64_t v18 = (int *)*a3;
    uint64_t v19 = (char *)v17 - (unsigned char *)*a3;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v16 - (void)v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
LABEL_61:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v24 = operator new(4 * v23);
      uint64_t v25 = (int *)&v24[4 * v20];
      int *v25 = v14;
      uint64_t v13 = (uint64_t)(v25 + 1);
      if (v17 == v18) {
        goto LABEL_30;
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      uint64_t v13 = 4 * v20 + 4;
      if (v17 == v18)
      {
LABEL_30:
        *a3 = v25;
        a3[1] = (void *)v13;
        a3[2] = &v24[4 * v23];
        if (v18) {
          operator delete(v18);
        }
        unint64_t v10 = v63;
        uint64_t v12 = v61;
        goto LABEL_9;
      }
    }
    unint64_t v26 = (char *)(v17 - 1) - (char *)v18;
    if (v26 < 0x2C) {
      goto LABEL_66;
    }
    if ((unint64_t)((char *)v17 - &v24[v19]) < 0x20) {
      goto LABEL_66;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v29 = &v17[v28 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v25 = (int *)((char *)v25 - v28);
    uint64_t v30 = &v24[4 * v20 - 16];
    unint64_t v31 = v17 - 4;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      _OWORD *v30 = v33;
      v30 -= 2;
      v31 -= 8;
      v32 -= 8;
    }
    while (v32);
    unint64_t v17 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_66:
      do
      {
        int v34 = *--v17;
        *--uint64_t v25 = v34;
      }
      while (v17 != v18);
    }
    goto LABEL_30;
  }
  uint64_t v6 = a1[30];
  uint64_t v7 = *(int *)(v6 + 4 * v5);
  unint64_t v8 = (int)v5 + 1;
  if (v8 < (a1[31] - v6) >> 2)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 4 * v8);
    if ((int)v7 >= (int)v9) {
      return;
    }
    goto LABEL_34;
  }
  uint64_t v9 = (a1[37] - a1[36]) >> 2;
  if ((int)v7 < (int)v9)
  {
LABEL_34:
    uint64_t v35 = a1 + 77;
    while (1)
    {
      int v37 = *(_DWORD *)(v4[36] + 4 * v7);
      if ((*(void *)(v4[78] + (((unint64_t)((uint64_t)v37 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v37 >> 1))) {
        goto LABEL_37;
      }
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v35, v37 >> 1);
      uint64_t v39 = (int *)a3[1];
      unint64_t v38 = (unint64_t)a3[2];
      if ((unint64_t)v39 >= v38) {
        break;
      }
      *uint64_t v39 = v37;
      uint64_t v36 = (uint64_t)(v39 + 1);
LABEL_36:
      a3[1] = (void *)v36;
LABEL_37:
      if (v9 == ++v7) {
        return;
      }
    }
    uint64_t v40 = a3;
    std::vector<int>::pointer v41 = v35;
    uint64_t v42 = v9;
    std::vector<int>::pointer v43 = v40;
    int64_t v44 = (int *)*v40;
    uint64_t v45 = (char *)v39 - (unsigned char *)*v40;
    uint64_t v46 = v45 >> 2;
    unint64_t v47 = (v45 >> 2) + 1;
    if (v47 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = v38 - (void)v44;
    if (v48 >> 1 > v47) {
      unint64_t v47 = v48 >> 1;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v64 = v47;
    if (v47)
    {
      if (v47 >> 62) {
        goto LABEL_61;
      }
      uint64_t v49 = operator new(4 * v47);
      unint64_t v50 = (int *)&v49[4 * v46];
      *unint64_t v50 = v37;
      uint64_t v36 = (uint64_t)(v50 + 1);
      if (v39 != v44) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v50 = (int *)(4 * v46);
      *(_DWORD *)(4 * v46) = v37;
      uint64_t v36 = 4 * v46 + 4;
      if (v39 != v44)
      {
LABEL_48:
        unint64_t v51 = (char *)(v39 - 1) - (char *)v44;
        if (v51 >= 0x2C)
        {
          unint64_t v52 = (char *)v39 - &v49[v45];
          uint64_t v9 = v42;
          uint64_t v35 = v41;
          a3 = v43;
          uint64_t v4 = a1;
          if (v52 >= 0x20)
          {
            uint64_t v53 = (v51 >> 2) + 1;
            uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v55 = &v39[v54 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v50 = (int *)((char *)v50 - v54);
            uint64_t v56 = &v49[4 * v46 - 16];
            unint64_t v57 = v39 - 4;
            uint64_t v58 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *uint64_t v56 = v59;
              v56 -= 2;
              v57 -= 8;
              v58 -= 8;
            }
            while (v58);
            uint64_t v39 = v55;
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          uint64_t v9 = v42;
          uint64_t v35 = v41;
          a3 = v43;
          uint64_t v4 = a1;
        }
        do
        {
          int v60 = *--v39;
          *--unint64_t v50 = v60;
        }
        while (v39 != v44);
LABEL_57:
        *a3 = v50;
        a3[1] = (void *)v36;
        a3[2] = &v49[4 * v64];
        if (v44) {
          operator delete(v44);
        }
        goto LABEL_36;
      }
    }
    uint64_t v9 = v42;
    uint64_t v35 = v41;
    a3 = v43;
    uint64_t v4 = a1;
    goto LABEL_57;
  }
}

void sub_23CCEE5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::IntegerTrail::MergeReasonInto(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  if (a3)
  {
    uint64_t v5 = a2;
    int v6 = -1431655765 * ((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
    uint64_t v7 = (uint64_t *)((char *)a2 + 12 * a3);
    uint64_t v39 = (void **)(a1 + 544);
    int v38 = v6;
    int v37 = v7;
    while (1)
    {
      uint64_t v9 = *v5;
      *(void *)uint64_t v40 = *v5;
      *(_DWORD *)&v40[8] = *((_DWORD *)v5 + 2);
      uint64_t v10 = *(void *)(a1 + 144);
      if (*(uint64_t *)&v40[4] <= *(void *)(v10 + 20 * (int)*v5))
      {
        int v12 = -1;
LABEL_18:
        if (v12 < v6) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v11 = (int)v9;
        int v12 = *(_DWORD *)(*(void *)(a1 + 40) + 12 * (int)v9 + 8);
        uint64_t v13 = *(void *)(a1 + 72);
        int v14 = *(_DWORD *)(v13 + 4 * (int)v9);
        if (v14 < v12
          && *(_DWORD *)(v10 + 20 * v14 + 8) == v9
          && *(void *)(v10 + 20 * v14) >= *(uint64_t *)&v40[4])
        {
          int v12 = *(_DWORD *)(v13 + 4 * (int)v9);
        }
        int v15 = v12;
        if (v12 >= *(_DWORD *)(a1 + 64)) {
LABEL_12:
        }
          *(_DWORD *)(v13 + 4 * v11) = v15;
        while (1)
        {
          uint64_t v16 = *(void *)(v10 + 20 * v15);
          if (v16 == *(void *)&v40[4]) {
            break;
          }
          if (v16 < *(uint64_t *)&v40[4]) {
            goto LABEL_18;
          }
          int v12 = v15;
          int v15 = *(_DWORD *)(v10 + 20 * v15 + 12);
          if (v15 >= *(_DWORD *)(a1 + 64)) {
            goto LABEL_12;
          }
        }
        int v12 = v15;
        if (v15 < v6) {
          goto LABEL_5;
        }
      }
      unint64_t v17 = *(int **)(a1 + 552);
      unint64_t v18 = *(void *)(a1 + 560);
      if ((unint64_t)v17 >= v18) {
        break;
      }
      int *v17 = v12;
      uint64_t v8 = (uint64_t)(v17 + 1);
LABEL_4:
      *(void *)(a1 + 552) = v8;
LABEL_5:
      uint64_t v5 = (uint64_t *)((char *)v5 + 12);
      if (v5 == v7) {
        goto LABEL_42;
      }
    }
    uint64_t v19 = (int *)*v39;
    uint64_t v20 = (char *)v17 - (unsigned char *)*v39;
    uint64_t v21 = v20 >> 2;
    unint64_t v22 = (v20 >> 2) + 1;
    if (v22 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v18 - (void)v19;
    if (v23 >> 1 > v22) {
      unint64_t v22 = v23 >> 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(4 * v24);
      unint64_t v26 = (int *)&v25[4 * v21];
      *unint64_t v26 = v12;
      uint64_t v8 = (uint64_t)(v26 + 1);
      if (v17 == v19) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (int *)(4 * v21);
      *(_DWORD *)(4 * v21) = v12;
      uint64_t v8 = 4 * v21 + 4;
      if (v17 == v19)
      {
LABEL_39:
        *(void *)(a1 + 544) = v26;
        *(void *)(a1 + 552) = v8;
        *(void *)(a1 + 560) = &v25[4 * v24];
        if (v19) {
          operator delete(v19);
        }
        int v6 = v38;
        uint64_t v7 = v37;
        goto LABEL_4;
      }
    }
    unint64_t v27 = (char *)(v17 - 1) - (char *)v19;
    if (v27 < 0x2C) {
      goto LABEL_49;
    }
    if ((unint64_t)((char *)v17 - &v25[v20]) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v28 = (v27 >> 2) + 1;
    uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v30 = &v17[v29 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v26 = (int *)((char *)v26 - v29);
    unint64_t v31 = &v25[4 * v21 - 16];
    uint64_t v32 = v17 - 4;
    uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *unint64_t v31 = v34;
      v31 -= 2;
      v32 -= 8;
      v33 -= 8;
    }
    while (v33);
    unint64_t v17 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        int v35 = *--v17;
        *--unint64_t v26 = v35;
      }
      while (v17 != v19);
    }
    goto LABEL_39;
  }
LABEL_42:

  operations_research::sat::IntegerTrail::MergeReasonIntoInternal(a1, a4);
}

void *operations_research::sat::IntegerTrail::Reason(std::vector<int> *this, const operations_research::sat::Trail *a2, int a3)
{
  int v4 = this[34].__end_[a3];
  EmptyVectorToStoreReason = (void **)operations_research::sat::Trail::GetEmptyVectorToStoreReason(a2, a3);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)&this[25].__end_cap_, (*((void *)this[39].__begin_ + 10) - *((void *)this[39].__begin_ + 9)) >> 2);
  std::vector<int>::pointer begin = this[6].__begin_;
  if (begin[5 * v4 + 4] == -1)
  {
    uint64_t v7 = &begin[5 * v4];
    LODWORD(v38) = v7[2];
    *(void *)((char *)&v38 + 4) = *(void *)v7;
    std::vector<int>::pointer v8 = this[7].__begin_;
    uint64_t v42 = v38;
    int v43 = DWORD2(v38);
    int v41 = v4;
    uint64_t v39 = this + 16;
    uint64_t v40 = this + 15;
    uint64_t v9 = *(void *)&v8[8 * v4 + 6];
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *, int *, std::vector<int> **, std::vector<int> **))(*(void *)v9 + 48))(v9, &v42, &v41, &v40, &v39);
  }
  uint64_t v36 = EmptyVectorToStoreReason;
  operations_research::sat::IntegerTrail::AppendLiteralsReason(this, v4, EmptyVectorToStoreReason);
  std::vector<int>::pointer v10 = operations_research::sat::IntegerTrail::Dependencies(this, v4);
  if (v11)
  {
    std::vector<int>::pointer v12 = v10;
    p_unint64_t value = (void **)&this[22].__end_cap_.__value_;
    uint64_t v13 = &v10[v11];
    while (1)
    {
      int v15 = *v12;
      if (*v12 < 0) {
        goto LABEL_29;
      }
      uint64_t v16 = (char *)this[23].__begin_;
      std::vector<int>::pointer end = this[23].__end_;
      if (v16 >= (char *)end) {
        break;
      }
      *(_DWORD *)uint64_t v16 = v15;
      uint64_t v14 = (uint64_t)(v16 + 4);
LABEL_7:
      this[23].__begin_ = (std::vector<int>::pointer)v14;
      if (++v12 == v13) {
        goto LABEL_29;
      }
    }
    unint64_t v18 = (char *)*p_value;
    uint64_t v19 = v16 - (unsigned char *)*p_value;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)end - v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v24 = operator new(4 * v23);
      uint64_t v25 = (int *)&v24[4 * v20];
      int *v25 = v15;
      uint64_t v14 = (uint64_t)(v25 + 1);
      if (v16 == v18) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v15;
      uint64_t v14 = 4 * v20 + 4;
      if (v16 == v18)
      {
LABEL_27:
        this[22].__end_cap_.__value_ = v25;
        this[23].__begin_ = (std::vector<int>::pointer)v14;
        this[23].__end_ = (std::vector<int>::pointer)&v24[4 * v23];
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_7;
      }
    }
    unint64_t v26 = v16 - 4 - v18;
    if (v26 < 0x2C) {
      goto LABEL_35;
    }
    if ((unint64_t)(v16 - &v24[v19]) < 0x20) {
      goto LABEL_35;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v29 = &v16[-v28];
    uint64_t v25 = (int *)((char *)v25 - v28);
    uint64_t v30 = &v24[4 * v20 - 16];
    unint64_t v31 = v16 - 16;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      _OWORD *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    uint64_t v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        int v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--uint64_t v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_29:
  operations_research::sat::IntegerTrail::MergeReasonIntoInternal((uint64_t)this, v36);
  return *v36;
}

void operations_research::sat::IntegerTrail::AppendNewBounds(void *a1, void **a2)
{
  int v4 = a1 + 93;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 93), -1431655765 * ((a1[6] - a1[5]) >> 2));
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[6] - a1[5]) >> 2);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[19] - a1[18]) >> 2);
  if ((int)v6 > (int)v5)
  {
    uint64_t v7 = (int)v6;
    uint64_t v8 = (int)v5;
    uint64_t v25 = v4;
    do
    {
      --v7;
      uint64_t v10 = a1[18] + 20 * v7;
      int v11 = *(_DWORD *)(v10 + 8);
      if (v11 != -1 && ((*(void *)(a1[94] + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v11);
        *(_DWORD *)unint64_t v26 = *(_DWORD *)(v10 + 8);
        *(void *)&v26[4] = *(void *)v10;
        uint64_t v12 = HIDWORD(*(void *)v10);
        uint64_t v14 = (char *)a2[1];
        unint64_t v13 = (unint64_t)a2[2];
        if ((unint64_t)v14 < v13)
        {
          *(void *)uint64_t v14 = *(void *)v26;
          *((_DWORD *)v14 + 2) = v12;
          uint64_t v9 = v14 + 12;
        }
        else
        {
          int v15 = (char *)*a2;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*a2) >> 2);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x1555555555555555) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v15) >> 2);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v19 = 0x1555555555555555;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v20 = (char *)operator new(12 * v19);
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v21 = &v20[12 * v16];
          *(void *)unint64_t v21 = *(void *)v26;
          *((_DWORD *)v21 + 2) = v12;
          uint64_t v22 = v21;
          if (v14 != v15)
          {
            do
            {
              uint64_t v23 = *(void *)(v14 - 12);
              v14 -= 12;
              int v24 = *((_DWORD *)v14 + 2);
              *(void *)(v22 - 12) = v23;
              v22 -= 12;
              *((_DWORD *)v22 + 2) = v24;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)*a2;
          }
          uint64_t v9 = v21 + 12;
          *a2 = v22;
          a2[1] = v21 + 12;
          a2[2] = &v20[12 * v19];
          if (v14) {
            operator delete(v14);
          }
          int v4 = v25;
        }
        a2[1] = v9;
      }
    }
    while (v7 > v8);
  }
}

operations_research::sat::GenericLiteralWatcher *operations_research::sat::GenericLiteralWatcher::GenericLiteralWatcher(operations_research::sat::GenericLiteralWatcher *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "GenericLiteralWatcher");
  *((unsigned char *)this + 31) = 21;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *(void *)this = &unk_26F0C2EF0;
  *((void *)this + 5) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((void *)this + 6) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntRepository>((uint64_t)a2);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 7) = v4;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((void *)this + 21) = (char *)this + 136;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 44) = -1;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 36) = &unk_26F0BD6D0;
  *((void *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 63) = 0;
  unint64_t v5 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddLastPropagator(v5, this);
  operations_research::sat::IntegerTrail::RegisterReversibleClass(*((void **)this + 6), (uint64_t)this + 288);
  operations_research::sat::IntegerTrail::RegisterWatcher(*((void **)this + 6), (uint64_t)this + 136);
  uint64_t v7 = *((void *)this + 27);
  uint64_t v6 = *((void *)this + 28);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
  if (v8 > 1)
  {
    if (v6 - v7 != 96)
    {
      for (i = v7 + 96; v6 != i; uint64_t v6 = std::deque<int>::~deque[abi:ne180100](v6 - 48))
        ;
      *((void *)this + 28) = i;
    }
  }
  else
  {
    std::vector<std::deque<int>>::__append((uint64_t)this + 216, 2 - v8);
  }
  return this;
}

void sub_23CCEEFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  *(void *)uint64_t v10 = a10;
  if (*(char *)(v10 + 31) < 0) {
    operator delete(*(void **)(v10 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntRepository>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  std::vector<int>::size_type v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d) {
      unint64_t v5 = v1;
    }
    else {
      unint64_t v5 = v1 + 1;
    }
    if (v4) {
      std::vector<int>::size_type v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntRepository>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>();
  }
  return v2[5];
}

void operations_research::sat::IntegerTrail::RegisterReversibleClass(void *a1, uint64_t a2)
{
  BOOL v4 = (char *)a1[113];
  unint64_t v5 = v4;
  unint64_t v6 = a1[114];
  if ((unint64_t)v4 < v6)
  {
    *(void *)BOOL v4 = a2;
    uint64_t v7 = (uint64_t)(v4 + 8);
    goto LABEL_23;
  }
  unint64_t v8 = (void **)(a1 + 112);
  uint64_t v9 = (char *)a1[112];
  uint64_t v10 = (v4 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    int v15 = &v14[8 * v10];
    unint64_t v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    unint64_t v17 = (char *)(v4 - v9);
    if (v4 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  int v15 = (char *)(8 * v10);
  unint64_t v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  unint64_t v17 = (char *)(v4 - v9);
  if (v4 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v5 = &v4[-v20];
    v15 -= v20;
    unint64_t v21 = &v14[8 * v10 - 16];
    uint64_t v22 = (long long *)(v4 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)unint64_t v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v5 != v9);
    }
    unint64_t v5 = (char *)*v8;
  }
LABEL_21:
  a1[112] = v15;
  a1[113] = v7;
  a1[114] = v16;
  if (v5) {
    operator delete(v5);
  }
LABEL_23:
  a1[113] = v7;
}

void *std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~vector[abi:ne180100](void *a1)
{
  std::vector<int>::size_type v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::deque<int>>::~vector[abi:ne180100](void **a1)
{
  std::vector<int>::size_type v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    BOOL v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = std::deque<int>::~deque[abi:ne180100](v3 - 48);
      while ((void *)v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(operations_research::sat::GenericLiteralWatcher *this, operations_research::sat::Trail *a2)
{
  std::vector<int>::size_type v2 = this;
  int v3 = *((_DWORD *)this + 9);
  int v4 = *((_DWORD *)a2 + 3);
  if (v3 < v4)
  {
    while (1)
    {
      int v5 = v3++;
      *((_DWORD *)v2 + 9) = v3;
      signed int v6 = *(_DWORD *)(*((void *)a2 + 9) + 4 * v5);
      uint64_t v7 = *((void *)v2 + 8);
      if (v6 < (int)(-1431655765 * ((unint64_t)(*((void *)v2 + 9) - v7) >> 3)))
      {
        unint64_t v8 = (unint64_t **)(v7 + 24 * v6);
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        if (*v8 != v9) {
          break;
        }
      }
LABEL_4:
      if (v3 >= v4) {
        goto LABEL_41;
      }
    }
    uint64_t v93 = v8[1];
    while (1)
    {
      unint64_t v12 = *v10;
      unint64_t v13 = (int)*v10;
      uint64_t v14 = *((void *)v2 + 30);
      uint64_t v15 = 1 << *v10;
      uint64_t v16 = *(void *)(v14 + 8 * (v13 >> 6));
      if ((v15 & v16) != 0)
      {
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v17 = (void *)(*((void *)v2 + 27) + 48 * *(int *)(*((void *)v2 + 55) + 4 * v13));
        uint64_t v18 = v17[2];
        uint64_t v19 = v17[1];
        *(void *)(v14 + 8 * (v13 >> 6)) = v16 | v15;
        if (v18 == v19) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = ((v18 - v19) << 7) - 1;
        }
        uint64_t v22 = v17 + 5;
        uint64_t v21 = v17[5];
        unint64_t v23 = v21 + v17[4];
        if (v20 == v23)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v17);
          uint64_t v9 = v93;
          uint64_t v21 = *v22;
          uint64_t v19 = v17[1];
          unint64_t v23 = v17[4] + *v22;
        }
        *(_DWORD *)(*(void *)(v19 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF)) = v12;
        *uint64_t v22 = v21 + 1;
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_10;
        }
      }
      unint64_t v24 = HIDWORD(v12);
      uint64_t v25 = *((void *)v2 + 52) + 24 * (int)v13;
      unint64_t v26 = (uint64_t *)(v25 + 8);
      uint64_t v27 = *(char **)(v25 + 8);
      unint64_t v28 = *(void *)(v25 + 16);
      if ((unint64_t)v27 >= v28) {
        break;
      }
      *(_DWORD *)uint64_t v27 = v24;
      uint64_t v11 = (uint64_t)(v27 + 4);
LABEL_9:
      *unint64_t v26 = v11;
LABEL_10:
      if (++v10 == v9)
      {
        int v3 = *((_DWORD *)v2 + 9);
        int v4 = *((_DWORD *)a2 + 3);
        goto LABEL_4;
      }
    }
    uint64_t v29 = *(char **)v25;
    uint64_t v30 = (uint64_t)&v27[-*(void *)v25];
    uint64_t v31 = v30 >> 2;
    unint64_t v32 = (v30 >> 2) + 1;
    if (v32 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v28 - (void)v29;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v96 = v32;
    if (v32)
    {
      if (v32 >> 62) {
LABEL_88:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v34 = operator new(4 * v32);
      int v35 = &v34[4 * v31];
      *int v35 = v24;
      uint64_t v11 = (uint64_t)(v35 + 1);
      if (v27 != v29) {
        goto LABEL_29;
      }
    }
    else
    {
      int v34 = 0;
      int v35 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = v24;
      uint64_t v11 = 4 * v31 + 4;
      if (v27 != v29)
      {
LABEL_29:
        unint64_t v36 = v27 - 4 - v29;
        if (v36 >= 0x2C)
        {
          unint64_t v37 = v27 - &v34[v30];
          std::vector<int>::size_type v2 = this;
          if (v37 >= 0x20)
          {
            uint64_t v38 = (v36 >> 2) + 1;
            uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v40 = &v27[-v39];
            int v35 = (_DWORD *)((char *)v35 - v39);
            int v41 = &v34[4 * v31 - 16];
            uint64_t v42 = v27 - 16;
            uint64_t v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              _OWORD *v41 = v44;
              v41 -= 2;
              v42 -= 32;
              v43 -= 8;
            }
            while (v43);
            uint64_t v27 = v40;
            if (v38 == (v38 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_38;
            }
          }
        }
        else
        {
          std::vector<int>::size_type v2 = this;
        }
        do
        {
          int v45 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--int v35 = v45;
        }
        while (v27 != v29);
LABEL_38:
        *(void *)uint64_t v25 = v35;
        *unint64_t v26 = v11;
        *(void *)(v25 + 16) = &v34[4 * v96];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v9 = v93;
        goto LABEL_9;
      }
    }
    std::vector<int>::size_type v2 = this;
    goto LABEL_38;
  }
LABEL_41:
  uint64_t v46 = (int *)*((void *)v2 + 24);
  unint64_t v89 = (char *)v2 + 192;
  uint64_t v90 = (int *)*((void *)v2 + 25);
  if (v46 != v90)
  {
    while (1)
    {
      uint64_t v92 = v46;
      unint64_t v47 = *v46;
      uint64_t v48 = *((void *)v2 + 11);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v2 + 12) - v48) >> 3) > v47)
      {
        uint64_t v49 = (uint64_t **)(v48 + 24 * (int)v47);
        unint64_t v51 = *v49;
        unint64_t v50 = v49[1];
        if (*v49 != v50) {
          break;
        }
      }
LABEL_43:
      uint64_t v46 = v92 + 1;
      if (v92 + 1 == v90) {
        goto LABEL_80;
      }
    }
    long long v94 = v49[1];
    while (1)
    {
      uint64_t v53 = *v51;
      unint64_t v54 = (int)*v51;
      uint64_t v55 = *((void *)v2 + 30);
      uint64_t v56 = 1 << *v51;
      uint64_t v57 = *(void *)(v55 + 8 * (v54 >> 6));
      if ((v56 & v57) != 0)
      {
        if (v53 < 0) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v58 = (void *)(*((void *)v2 + 27) + 48 * *(int *)(*((void *)v2 + 55) + 4 * v54));
        uint64_t v59 = v58[2];
        uint64_t v60 = v58[1];
        *(void *)(v55 + 8 * (v54 >> 6)) = v57 | v56;
        if (v59 == v60) {
          uint64_t v61 = 0;
        }
        else {
          uint64_t v61 = ((v59 - v60) << 7) - 1;
        }
        uint64_t v63 = v58 + 5;
        uint64_t v62 = v58[5];
        unint64_t v64 = v62 + v58[4];
        if (v61 == v64)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v58);
          unint64_t v50 = v94;
          uint64_t v62 = *v63;
          uint64_t v60 = v58[1];
          unint64_t v64 = v58[4] + *v63;
        }
        *(_DWORD *)(*(void *)(v60 + ((v64 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v64 & 0x3FF)) = v53;
        *uint64_t v63 = v62 + 1;
        if (v53 < 0) {
          goto LABEL_49;
        }
      }
      uint64_t v65 = *((void *)v2 + 52) + 24 * (int)v54;
      int v66 = (uint64_t *)(v65 + 8);
      unint64_t v67 = *(char **)(v65 + 8);
      unint64_t v68 = *(void *)(v65 + 16);
      if ((unint64_t)v67 >= v68) {
        break;
      }
      *(_DWORD *)unint64_t v67 = HIDWORD(v53);
      uint64_t v52 = (uint64_t)(v67 + 4);
LABEL_48:
      *int v66 = v52;
LABEL_49:
      if (++v51 == v50) {
        goto LABEL_43;
      }
    }
    long long v69 = *(char **)v65;
    uint64_t v70 = (uint64_t)&v67[-*(void *)v65];
    uint64_t v71 = v70 >> 2;
    unint64_t v72 = (v70 >> 2) + 1;
    if (v72 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v73 = v68 - (void)v69;
    if (v73 >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v97 = v72;
    if (v72)
    {
      if (v72 >> 62) {
        goto LABEL_88;
      }
      unint64_t v74 = operator new(4 * v72);
      int v75 = &v74[4 * v71];
      *int v75 = HIDWORD(v53);
      uint64_t v52 = (uint64_t)(v75 + 1);
      if (v67 == v69) {
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v74 = 0;
      int v75 = (_DWORD *)(4 * v71);
      *(_DWORD *)(4 * v71) = HIDWORD(v53);
      uint64_t v52 = 4 * v71 + 4;
      if (v67 == v69)
      {
LABEL_77:
        *(void *)uint64_t v65 = v75;
        *int v66 = v52;
        *(void *)(v65 + 16) = &v74[4 * v97];
        if (v69) {
          operator delete(v69);
        }
        unint64_t v50 = v94;
        std::vector<int>::size_type v2 = this;
        goto LABEL_48;
      }
    }
    unint64_t v76 = v67 - 4 - v69;
    if (v76 < 0x2C) {
      goto LABEL_94;
    }
    if ((unint64_t)(v67 - &v74[v70]) < 0x20) {
      goto LABEL_94;
    }
    uint64_t v77 = (v76 >> 2) + 1;
    uint64_t v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v79 = &v67[-v78];
    int v75 = (_DWORD *)((char *)v75 - v78);
    uint64_t v80 = &v74[4 * v71 - 16];
    uint64_t v81 = v67 - 16;
    uint64_t v82 = v77 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v83 = *(_OWORD *)v81;
      *(v80 - 1) = *((_OWORD *)v81 - 1);
      *uint64_t v80 = v83;
      v80 -= 2;
      v81 -= 32;
      v82 -= 8;
    }
    while (v82);
    unint64_t v67 = v79;
    if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_94:
      do
      {
        int v84 = *((_DWORD *)v67 - 1);
        v67 -= 4;
        *--int v75 = v84;
      }
      while (v67 != v69);
    }
    goto LABEL_77;
  }
LABEL_80:
  if ((*((_DWORD *)a2 + 2) & 0xFFFFFFE) == 0)
  {
    uint64_t v86 = *((void *)v2 + 65);
    for (uint64_t i = *((void *)v2 + 66); v86 != i; v86 += 32)
    {
      uint64_t v88 = *(void *)(v86 + 24);
      if (!v88) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, char *))(*(void *)v88 + 48))(v88, v89);
    }
  }
  int v85 = -1431655765 * ((*(void *)(*((void *)v2 + 6) + 48) - *(void *)(*((void *)v2 + 6) + 40)) >> 2);

  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v2 + 136, v85);
}

uint64_t operations_research::sat::GenericLiteralWatcher::Propagate(int **this, operations_research::sat::Trail *a2)
{
  std::vector<int>::size_type v2 = (operations_research::sat::GenericLiteralWatcher *)this;
  unsigned int v99 = (*((_DWORD *)a2 + 2) >> 1) & 0x7FFFFFF;
  if (!v99)
  {
    unint64_t v76 = this[61];
    for (uint64_t i = this[62]; v76 != i; ++v76)
    {
      int v78 = *v76;
      uint64_t v79 = *((void *)v2 + 30);
      unint64_t v80 = (unint64_t)*v76 >> 6;
      uint64_t v81 = *(void *)(v79 + 8 * v80);
      if (((1 << *v76) & v81) == 0)
      {
        uint64_t v82 = (void *)(*((void *)v2 + 27) + 48 * *(int *)(*((void *)v2 + 55) + 4 * v78));
        uint64_t v83 = v82[2];
        uint64_t v84 = v82[1];
        *(void *)(v79 + 8 * v80) = (1 << v78) | v81;
        if (v83 == v84) {
          uint64_t v85 = 0;
        }
        else {
          uint64_t v85 = ((v83 - v84) << 7) - 1;
        }
        int v87 = v82 + 5;
        uint64_t v86 = v82[5];
        unint64_t v88 = v86 + v82[4];
        if (v85 == v88)
        {
          std::deque<int>::__add_back_capacity((uint64_t)v82);
          uint64_t v86 = *v87;
          uint64_t v84 = v82[1];
          unint64_t v88 = v82[4] + *v87;
        }
        *(_DWORD *)(*(void *)(v84 + ((v88 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v88 & 0x3FF)) = v78;
        *int v87 = v86 + 1;
      }
    }
  }
  operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = *((void *)v2 + 27);
  if (*((void *)v2 + 28) == v4) {
    goto LABEL_109;
  }
  unint64_t v5 = 0;
  LODWORD(v4) = 0;
  int v91 = 0;
  uint64_t v93 = (char **)((char *)v2 + 320);
  long long v98 = v2;
  uint64_t v6 = v99;
  while (1)
  {
    if ((int)v4 >= 101)
    {
      uint64_t v7 = *((void *)v2 + 5);
      unint64_t v8 = *(unsigned __int8 **)(v7 + 120);
      if (v8)
      {
        unsigned __int8 v9 = atomic_load(v8);
        if (v9) {
          goto LABEL_109;
        }
      }
      if (fmax(*(double *)(v7 + 104) - *(double *)(v7 + 112), 0.0) <= 0.0) {
        goto LABEL_109;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
      if (*(void *)(v7 + 24) <= CurrentTimeNanos - *(void *)(v7 + 8)) {
        uint64_t v11 = CurrentTimeNanos - *(void *)(v7 + 8);
      }
      else {
        uint64_t v11 = *(void *)(v7 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v7 + 32), v11);
      *(void *)(v7 + 8) = CurrentTimeNanos;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = *(void *)(v7 + 16);
      if (*(void *)(*(void *)(v7 + 40) + 8 * *(int *)(v7 + 68)) + CurrentTimeNanos < v4)
      {
        LODWORD(v4) = 0;
        goto LABEL_19;
      }
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_108;
      }
      double v12 = *(double *)(v7 + 96);
      if (*(unsigned char *)(v7 + 72))
      {
        int v3 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = *(void *)(v7 + 88);
        double v13 = v12 + (double)((uint64_t)v3 + v4 - *(void *)(v7 + 80)) * -0.000000001;
        if (v13 <= 0.0001) {
          goto LABEL_108;
        }
        goto LABEL_18;
      }
      double v13 = v12 + (double)*(uint64_t *)(v7 + 88) * -0.000000001;
      if (v13 > 0.0001)
      {
LABEL_18:
        LODWORD(v4) = 0;
        *(void *)(v7 + 16) = *(void *)(v7 + 8) + (uint64_t)(v13 * 1000000000.0);
        goto LABEL_19;
      }
LABEL_108:
      *(void *)(v7 + 16) = 0;
LABEL_109:
      int v89 = 1;
      return (v89 | v4) & 1;
    }
LABEL_19:
    int v92 = v4;
    uint64_t v14 = *((void *)v2 + 27) + 48 * v5;
    uint64_t v15 = (uint64_t *)(v14 + 40);
    unint64_t v96 = (uint64_t *)(v14 + 32);
    unint64_t v97 = (void ***)(v14 + 8);
    long long v94 = (uint64_t *)(v14 + 40);
LABEL_20:
    uint64_t v16 = *v15;
    if (!*v15)
    {
      int v75 = v91;
      goto LABEL_94;
    }
    unint64_t v17 = *v97;
    uint64_t v18 = *v96;
    uint64_t v19 = (*(unsigned int **)((char *)*v97 + (((unint64_t)*v96 >> 7) & 0x1FFFFFFFFFFFFF8)))[*v96 & 0x3FF];
    *((_DWORD *)v2 + 128) = v19;
    *uint64_t v15 = v16 - 1;
    *unint64_t v96 = v18 + 1;
    if ((unint64_t)(v18 + 1) >= 0x800)
    {
      operator delete(*v17);
      ++*v97;
      *v96 -= 1024;
    }
    uint64_t v20 = *((void *)v2 + 43);
    unint64_t v100 = (int)v19;
    uint64_t v21 = 4 * (int)v19;
    uint64_t v22 = *(unsigned int *)(v20 + v21);
    uint64_t v23 = *((void *)v2 + 33);
    int v24 = *(_DWORD *)(v23 + v21);
    if ((int)v6 > (int)v22 || (int)v22 < v24)
    {
      *(_DWORD *)(v23 + 4 * (int)v19) = v6;
      if (*((void *)v2 + 37) == *((void *)v2 + 38)) {
        goto LABEL_53;
      }
      uint64_t v26 = *(unsigned int *)(v20 + 4 * (int)v19);
      unint64_t v28 = (char *)*((void *)v2 + 41);
      unint64_t v27 = *((void *)v2 + 42);
      if ((unint64_t)v28 < v27)
      {
        *(void *)unint64_t v28 = v19 | (v26 << 32);
        uint64_t v29 = (uint64_t)(v28 + 8);
LABEL_52:
        *((void *)v2 + 41) = v29;
        uint64_t v20 = *((void *)v2 + 43);
LABEL_53:
        *(_DWORD *)(v20 + 4 * v100) = v6;
        uint64_t v48 = *((void *)v2 + 46) + 24 * (int)v100;
        uint64_t v49 = *(uint64_t **)v48;
        unint64_t v50 = *(uint64_t **)(v48 + 8);
        if (*(uint64_t **)v48 != v50)
        {
          if ((int)v22 < v24)
          {
            do
            {
              uint64_t v60 = *v49;
              (*(void (**)(uint64_t, uint64_t))(*(void *)*v49 + 16))(*v49, v22);
              if ((int)v6 > (int)v22) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v6);
              }
              ++v49;
            }
            while (v49 != v50);
          }
          else if ((int)v6 > (int)v22)
          {
            do
            {
              uint64_t v51 = *v49++;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v6);
            }
            while (v49 != v50);
          }
        }
        uint64_t v52 = *((void *)v2 + 49) + 24 * (int)v100;
        unint64_t v54 = *(int ***)v52;
        uint64_t v53 = *(int ***)(v52 + 8);
        if (*(int ***)v52 == v53 || *(void *)(*((void *)v2 + 7) + 16) == *(void *)(*((void *)v2 + 7) + 24)) {
          goto LABEL_59;
        }
        while (1)
        {
          uint64_t v62 = (void *)*((void *)v2 + 7);
          if (v62[2] == v62[3]) {
            goto LABEL_67;
          }
          uint64_t v63 = *v54;
          int v64 = **v54;
          int v66 = (char *)v62[6];
          unint64_t v65 = v62[7];
          if ((unint64_t)v66 >= v65) {
            break;
          }
          *(void *)int v66 = v63;
          *((_DWORD *)v66 + 2) = v64;
          uint64_t v61 = v66 + 16;
LABEL_66:
          v62[6] = v61;
LABEL_67:
          if (++v54 == v53) {
            goto LABEL_59;
          }
        }
        unint64_t v67 = (unsigned char *)v62[5];
        uint64_t v68 = (v66 - v67) >> 4;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = v65 - (void)v67;
        if (v70 >> 3 > v69) {
          unint64_t v69 = v70 >> 3;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          if (v71 >> 60) {
            goto LABEL_112;
          }
          unint64_t v72 = (char *)operator new(16 * v71);
          uint64_t v73 = (uint64_t)&v72[16 * v68];
          *(void *)uint64_t v73 = v63;
          *(_DWORD *)(v73 + 8) = v64;
          uint64_t v74 = v73;
          if (v66 == v67) {
            goto LABEL_83;
          }
        }
        else
        {
          unint64_t v72 = 0;
          uint64_t v73 = 16 * v68;
          *(void *)uint64_t v73 = v63;
          *(_DWORD *)(v73 + 8) = v64;
          uint64_t v74 = 16 * v68;
          if (v66 == v67) {
            goto LABEL_83;
          }
        }
        do
        {
          *(_OWORD *)(v74 - 16) = *((_OWORD *)v66 - 1);
          v74 -= 16;
          v66 -= 16;
        }
        while (v66 != v67);
        int v66 = (char *)v62[5];
LABEL_83:
        uint64_t v61 = (char *)(v73 + 16);
        v62[5] = v74;
        v62[6] = v73 + 16;
        v62[7] = &v72[16 * v71];
        uint64_t v6 = v99;
        if (v66) {
          operator delete(v66);
        }
        std::vector<int>::size_type v2 = v98;
        goto LABEL_66;
      }
      uint64_t v30 = *v93;
      uint64_t v31 = v28 - *v93;
      uint64_t v32 = v31 >> 3;
      unint64_t v33 = (v31 >> 3) + 1;
      if (v33 >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v34 = v27 - (void)v30;
      if (v34 >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        if (v35 >> 61) {
LABEL_112:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        unint64_t v36 = operator new(8 * v35);
        unint64_t v37 = (uint64_t *)&v36[8 * v32];
        *unint64_t v37 = v19 | (v26 << 32);
        uint64_t v29 = (uint64_t)(v37 + 1);
        if (v28 != v30)
        {
LABEL_40:
          unint64_t v38 = v28 - 8 - v30;
          if (v38 >= 0x58)
          {
            unint64_t v39 = v28 - &v36[v31];
            std::vector<int>::size_type v2 = v98;
            if (v39 >= 0x20)
            {
              uint64_t v40 = (v38 >> 3) + 1;
              uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v42 = &v28[-v41];
              unint64_t v37 = (uint64_t *)((char *)v37 - v41);
              uint64_t v43 = &v36[8 * v32 - 16];
              long long v44 = v28 - 16;
              uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v46 = *(_OWORD *)v44;
                *(v43 - 1) = *((_OWORD *)v44 - 1);
                *uint64_t v43 = v46;
                v43 -= 2;
                v44 -= 32;
                v45 -= 4;
              }
              while (v45);
              unint64_t v28 = v42;
              if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_50:
                unint64_t v28 = *v93;
                *((void *)v2 + 40) = v37;
                *((void *)v2 + 41) = v29;
                *((void *)v2 + 42) = &v36[8 * v35];
                uint64_t v6 = v99;
                if (!v28) {
                  goto LABEL_52;
                }
LABEL_51:
                operator delete(v28);
                goto LABEL_52;
              }
            }
          }
          else
          {
            std::vector<int>::size_type v2 = v98;
          }
          do
          {
            uint64_t v47 = *((void *)v28 - 1);
            v28 -= 8;
            *--unint64_t v37 = v47;
          }
          while (v28 != v30);
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v36 = 0;
        unint64_t v37 = (uint64_t *)(8 * v32);
        *(void *)(8 * v32) = v19 | (v26 << 32);
        uint64_t v29 = 8 * v32 + 8;
        if (v28 != v30) {
          goto LABEL_40;
        }
      }
      std::vector<int>::size_type v2 = v98;
      *((void *)v98 + 40) = v37;
      *((void *)v98 + 41) = v29;
      *((void *)v98 + 42) = &v36[8 * v35];
      uint64_t v6 = v99;
      if (!v28) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
LABEL_59:
    uint64_t v55 = *(void *)(*((void *)v2 + 6) + 848);
    int v56 = *((_DWORD *)a2 + 3);
    uint64_t v57 = (void *)(*((void *)v2 + 52) + 24 * (int)v100);
    uint64_t v58 = v57 + 1;
    uint64_t v59 = **(void **)(*((void *)v2 + 14) + 8 * v100);
    if (*v57 == v57[1])
    {
      if (((*(uint64_t (**)(void))(v59 + 16))() & 1) == 0)
      {
LABEL_106:
        int v89 = 0;
        LODWORD(v4) = 0;
        void *v58 = *v57;
        *(void *)(*((void *)v2 + 30) + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v100);
        return (v89 | v4) & 1;
      }
    }
    else if (((*(uint64_t (**)(void))(v59 + 24))() & 1) == 0)
    {
      goto LABEL_106;
    }
    if (!*(_DWORD *)(*((void *)v2 + 58) + 4 * v100)) {
      break;
    }
    operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
    void *v58 = *v57;
    *(void *)(*((void *)v2 + 30) + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v100);
    if (*((_DWORD *)a2 + 3) > v56) {
      goto LABEL_107;
    }
LABEL_91:
    uint64_t v15 = v94;
    if (*(void *)(*((void *)v2 + 6) + 848) <= v55) {
      goto LABEL_20;
    }
    ++v92;
    int v75 = -1;
LABEL_94:
    int v91 = v75 + 1;
    unint64_t v5 = v75 + 1;
    LODWORD(v4) = v92;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v2 + 28) - *((void *)v2 + 27)) >> 4) <= v5) {
      goto LABEL_109;
    }
  }
  void *v58 = *v57;
  *(void *)(*((void *)v2 + 30) + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v100);
  operations_research::sat::GenericLiteralWatcher::UpdateCallingNeeds(v2, a2);
  if (*((_DWORD *)a2 + 3) <= v56) {
    goto LABEL_91;
  }
LABEL_107:
  int v89 = 0;
  LODWORD(v4) = 1;
  return (v89 | v4) & 1;
}

void operations_research::sat::GenericLiteralWatcher::Untrail(operations_research::sat::GenericLiteralWatcher *this, const operations_research::sat::Trail *a2, int a3)
{
  int v4 = *((_DWORD *)this + 9);
  if (v4 <= a3)
  {
    v21[0] = *((_DWORD *)this + 9);
    LODWORD(v22) = a3;
    if (v4 != a3) {
      google::MakeCheckOpString<int,int>((int)v21, (int)&v22, "propagation_trail_index_ == trail_index");
    }
  }
  else
  {
    uint64_t v6 = (void *)*((void *)this + 27);
    for (uint64_t i = (void *)*((void *)this + 28); v6 != i; v6 += 6)
    {
      unsigned __int8 v9 = (void **)v6[1];
      unint64_t v10 = v6[2] - (void)v9;
      if (v10)
      {
        unint64_t v11 = v6[4];
        double v12 = &v9[v11 >> 10];
        double v13 = (char *)*v12 + 4 * (v11 & 0x3FF);
        uint64_t v14 = v6 + 5;
        uint64_t v15 = *(uint64_t *)((char *)v9 + (((v6[5] + v11) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v6[5] + v11) & 0x3FF);
        if (v13 != (char *)v15)
        {
          uint64_t v16 = *((void *)this + 52);
          do
          {
            int v17 = *(_DWORD *)v13;
            v13 += 4;
            *(void *)(v16 + 24 * v17 + 8) = *(void *)(v16 + 24 * v17);
            if (v13 - (unsigned char *)*v12 == 4096)
            {
              uint64_t v18 = (char *)v12[1];
              ++v12;
              double v13 = v18;
            }
          }
          while (v13 != (char *)v15);
        }
      }
      else
      {
        uint64_t v14 = v6 + 5;
      }
      void *v14 = 0;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v9);
          uint64_t v19 = v6[2];
          unsigned __int8 v9 = (void **)(v6[1] + 8);
          v6[1] = v9;
          unint64_t v10 = v19 - (void)v9;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        uint64_t v8 = 512;
      }
      else
      {
        if (v10 >> 3 != 2) {
          continue;
        }
        uint64_t v8 = 1024;
      }
      void v6[4] = v8;
    }
    *((_DWORD *)this + 9) = a3;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 136, -1431655765 * ((*(void *)(*((void *)this + 6) + 48) - *(void *)(*((void *)this + 6) + 40)) >> 2));
    unint64_t v20 = (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3;
    LOBYTE(v21[0]) = 0;
    std::vector<BOOL>::assign((char **)this + 30, v20, v21);
  }
}

void sub_23CCF0648(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

unint64_t operations_research::sat::GenericLiteralWatcher::Register(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 112);
  uint64_t v6 = *(char **)(a1 + 120);
  int v4 = (void **)(a1 + 112);
  unint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = v6;
  uint64_t v9 = v6 - v5;
  if ((unint64_t)v6 < v7)
  {
    *(void *)uint64_t v6 = a2;
    uint64_t v10 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  uint64_t v11 = v9 >> 3;
  unint64_t v12 = (v9 >> 3) + 1;
  if (v12 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v7 - (void)v5;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      goto LABEL_115;
    }
    uint64_t v15 = operator new(8 * v14);
    uint64_t v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *uint64_t v16 = a2;
    uint64_t v10 = (uint64_t)(v16 + 1);
    uint64_t v18 = (char *)(v6 - v5);
    if (v6 == v5) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  uint64_t v16 = (void *)(8 * v11);
  int v17 = 0;
  *(void *)(8 * v11) = a2;
  uint64_t v10 = 8 * v11 + 8;
  uint64_t v18 = (char *)(v6 - v5);
  if (v6 != v5)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_120;
    }
    if ((unint64_t)(v6 - &v15[v9 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_120;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v6[-v21];
    uint64_t v16 = (void *)((char *)v16 - v21);
    uint64_t v22 = &v15[8 * v11 - 16];
    uint64_t v23 = v6 - 16;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_120:
      do
      {
        uint64_t v26 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v16 = v26;
      }
      while (v8 != v5);
    }
    uint64_t v8 = (char *)*v4;
  }
LABEL_21:
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 128) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *(void *)(a1 + 120) = v10;
  unint64_t v28 = *(char **)(a1 + 272);
  unint64_t v27 = *(void *)(a1 + 280);
  if ((unint64_t)v28 < v27)
  {
    *(_DWORD *)unint64_t v28 = 0;
    uint64_t v29 = (uint64_t)(v28 + 4);
    goto LABEL_44;
  }
  uint64_t v30 = *(char **)(a1 + 264);
  uint64_t v31 = (v28 - v30) >> 2;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62) {
    goto LABEL_114;
  }
  uint64_t v33 = v27 - (void)v30;
  if (v33 >> 1 > v32) {
    unint64_t v32 = v33 >> 1;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    if (v34 >> 62) {
      goto LABEL_115;
    }
    unint64_t v35 = operator new(4 * v34);
    unint64_t v36 = &v35[4 * v31];
    unint64_t v37 = &v35[4 * v34];
    *unint64_t v36 = 0;
    uint64_t v29 = (uint64_t)(v36 + 1);
    int64_t v38 = v28 - v30;
    if (v28 == v30) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }
  unint64_t v35 = 0;
  unint64_t v36 = (_DWORD *)(4 * v31);
  unint64_t v37 = 0;
  *(_DWORD *)(4 * v31) = 0;
  uint64_t v29 = 4 * v31 + 4;
  int64_t v38 = v28 - v30;
  if (v28 != v30)
  {
LABEL_36:
    unint64_t v39 = v38 - 4;
    if (v39 < 0x2C) {
      goto LABEL_121;
    }
    if ((unint64_t)(v30 - v35) < 0x20) {
      goto LABEL_121;
    }
    uint64_t v40 = (v39 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v42 = &v28[-v41];
    unint64_t v36 = (_DWORD *)((char *)v36 - v41);
    uint64_t v43 = &v35[4 * v31 - 16];
    long long v44 = v28 - 16;
    uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *uint64_t v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 8;
    }
    while (v45);
    unint64_t v28 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_121:
      do
      {
        int v47 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--unint64_t v36 = v47;
      }
      while (v28 != v30);
    }
  }
LABEL_42:
  *(void *)(a1 + 264) = v36;
  *(void *)(a1 + 272) = v29;
  *(void *)(a1 + 280) = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_44:
  *(void *)(a1 + 272) = v29;
  uint64_t v48 = *(void *)(a1 + 344);
  if (*(void *)(a1 + 352) - v48 == -4)
  {
    *(void *)(a1 + 352) = v48;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v110 = 0;
    uint64_t v49 = *(void **)(a1 + 376);
    if ((unint64_t)v49 >= *(void *)(a1 + 384)) {
      goto LABEL_46;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 344), 1uLL);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v110 = 0;
    uint64_t v49 = *(void **)(a1 + 376);
    if ((unint64_t)v49 >= *(void *)(a1 + 384))
    {
LABEL_46:
      unint64_t v50 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 368), (uint64_t)__p);
      uint64_t v51 = __p[0];
      *(void *)(a1 + 376) = v50;
      if (v51)
      {
        __p[1] = v51;
        operator delete(v51);
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v110 = 0;
      uint64_t v52 = *(void **)(a1 + 400);
      if ((unint64_t)v52 < *(void *)(a1 + 408)) {
        goto LABEL_49;
      }
      goto LABEL_52;
    }
  }
  *uint64_t v49 = 0;
  v49[1] = 0;
  v49[2] = 0;
  v49[2] = v110;
  *(void *)(a1 + 376) = v49 + 3;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v110 = 0;
  uint64_t v52 = *(void **)(a1 + 400);
  if ((unint64_t)v52 < *(void *)(a1 + 408))
  {
LABEL_49:
    *uint64_t v52 = 0;
    v52[1] = 0;
    _OWORD v52[2] = 0;
    *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
    _OWORD v52[2] = v110;
    *(void *)(a1 + 400) = v52 + 3;
    goto LABEL_54;
  }
LABEL_52:
  uint64_t v53 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 392), (uint64_t)__p);
  unint64_t v54 = __p[0];
  *(void *)(a1 + 400) = v53;
  if (v54)
  {
    __p[1] = v54;
    operator delete(v54);
  }
LABEL_54:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v110 = 0;
  uint64_t v55 = *(void **)(a1 + 424);
  if ((unint64_t)v55 >= *(void *)(a1 + 432))
  {
    int v56 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 416), (uint64_t)__p);
    uint64_t v57 = __p[0];
    *(void *)(a1 + 424) = v56;
    if (v57)
    {
      __p[1] = v57;
      operator delete(v57);
    }
  }
  else
  {
    *uint64_t v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
    *(_OWORD *)uint64_t v55 = *(_OWORD *)__p;
    v55[2] = v110;
    *(void *)(a1 + 424) = v55 + 3;
  }
  uint64_t v59 = *(char **)(a1 + 448);
  unint64_t v58 = *(void *)(a1 + 456);
  if ((unint64_t)v59 >= v58)
  {
    uint64_t v61 = *(char **)(a1 + 440);
    uint64_t v62 = (v59 - v61) >> 2;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 62) {
      goto LABEL_114;
    }
    uint64_t v64 = v58 - (void)v61;
    if (v64 >> 1 > v63) {
      unint64_t v63 = v64 >> 1;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (v65)
    {
      if (v65 >> 62) {
        goto LABEL_115;
      }
      int v66 = operator new(4 * v65);
    }
    else
    {
      int v66 = 0;
    }
    unint64_t v67 = &v66[4 * v62];
    uint64_t v68 = &v66[4 * v65];
    *unint64_t v67 = 1;
    uint64_t v60 = v67 + 1;
    if (v59 != v61)
    {
      unint64_t v69 = v59 - v61 - 4;
      if (v69 < 0x2C) {
        goto LABEL_122;
      }
      if ((unint64_t)(v61 - v66) < 0x20) {
        goto LABEL_122;
      }
      uint64_t v70 = (v69 >> 2) + 1;
      uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v72 = &v59[-v71];
      unint64_t v67 = (_DWORD *)((char *)v67 - v71);
      uint64_t v73 = &v66[4 * v62 - 16];
      uint64_t v74 = v59 - 16;
      uint64_t v75 = v70 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        _OWORD *v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 8;
      }
      while (v75);
      uint64_t v59 = v72;
      if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_122:
        do
        {
          int v77 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *--unint64_t v67 = v77;
        }
        while (v59 != v61);
      }
    }
    *(void *)(a1 + 440) = v67;
    *(void *)(a1 + 448) = v60;
    *(void *)(a1 + 456) = v68;
    if (v61) {
      operator delete(v61);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v59 = 1;
    uint64_t v60 = v59 + 4;
  }
  *(void *)(a1 + 448) = v60;
  uint64_t v79 = *(char **)(a1 + 472);
  unint64_t v78 = *(void *)(a1 + 480);
  if ((unint64_t)v79 < v78)
  {
    *(_DWORD *)uint64_t v79 = 1;
    unint64_t v80 = v79 + 4;
    goto LABEL_100;
  }
  uint64_t v81 = *(char **)(a1 + 464);
  uint64_t v82 = (v79 - v81) >> 2;
  unint64_t v83 = v82 + 1;
  if ((unint64_t)(v82 + 1) >> 62) {
LABEL_114:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v84 = v78 - (void)v81;
  if (v84 >> 1 > v83) {
    unint64_t v83 = v84 >> 1;
  }
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v85 = v83;
  }
  if (v85)
  {
    if (!(v85 >> 62))
    {
      uint64_t v86 = operator new(4 * v85);
      goto LABEL_91;
    }
LABEL_115:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v86 = 0;
LABEL_91:
  int v87 = &v86[4 * v82];
  unint64_t v88 = &v86[4 * v85];
  *int v87 = 1;
  unint64_t v80 = v87 + 1;
  if (v79 != v81)
  {
    unint64_t v89 = v79 - v81 - 4;
    if (v89 < 0x2C) {
      goto LABEL_123;
    }
    if ((unint64_t)(v81 - v86) < 0x20) {
      goto LABEL_123;
    }
    uint64_t v90 = (v89 >> 2) + 1;
    uint64_t v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
    int v92 = &v79[-v91];
    int v87 = (_DWORD *)((char *)v87 - v91);
    uint64_t v93 = &v86[4 * v82 - 16];
    long long v94 = v79 - 16;
    uint64_t v95 = v90 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v96 = *(_OWORD *)v94;
      *(v93 - 1) = *((_OWORD *)v94 - 1);
      _OWORD *v93 = v96;
      v93 -= 2;
      v94 -= 32;
      v95 -= 8;
    }
    while (v95);
    uint64_t v79 = v92;
    if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_123:
      do
      {
        int v97 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--int v87 = v97;
      }
      while (v79 != v81);
    }
  }
  *(void *)(a1 + 464) = v87;
  *(void *)(a1 + 472) = v80;
  *(void *)(a1 + 480) = v88;
  if (v81) {
    operator delete(v81);
  }
LABEL_100:
  *(void *)(a1 + 472) = v80;
  unint64_t v99 = *(void *)(a1 + 248);
  uint64_t v98 = *(void *)(a1 + 256);
  if (v99 == v98 << 6)
  {
    if ((uint64_t)(v99 + 1) < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v100 = v98 << 7;
    if (v100 <= (v99 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v100 = (v99 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v99 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v101 = v100;
    }
    else {
      unint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve(a1 + 240, v101);
    unint64_t v99 = *(void *)(a1 + 248);
  }
  uint64_t v102 = *(void **)(a1 + 216);
  uint64_t v103 = v102[8];
  uint64_t v104 = v102[7];
  *(void *)(a1 + 248) = v99 + 1;
  *(void *)(*(void *)(a1 + 240) + ((v99 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v99;
  if (v103 == v104) {
    uint64_t v105 = 0;
  }
  else {
    uint64_t v105 = ((v103 - v104) << 7) - 1;
  }
  uint64_t v106 = v102[11];
  unint64_t v107 = v106 + v102[10];
  if (v105 == v107)
  {
    std::deque<int>::__add_back_capacity((uint64_t)(v102 + 6));
    uint64_t v104 = v102[7];
    uint64_t v106 = v102[11];
    unint64_t v107 = v102[10] + v106;
  }
  unint64_t result = (unint64_t)v9 >> 3;
  *(_DWORD *)(*(void *)(v104 + ((v107 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v107 & 0x3FF)) = (unint64_t)v9 >> 3;
  v102[11] = v106 + 1;
  return result;
}

void sub_23CCF0D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(operations_research::sat::GenericLiteralWatcher *this, int a2, int a3)
{
  int v4 = (char *)this + 216;
  uint64_t v5 = *((void *)this + 27);
  *(_DWORD *)(*((void *)this + 55) + 4 * a2) = a3;
  uint64_t v6 = *((void *)this + 28);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
  if (v7 <= a3)
  {
    unint64_t v8 = a3 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        for (i = v5 + 48 * (int)v8; v6 != i; uint64_t v6 = std::deque<int>::~deque[abi:ne180100](v6 - 48))
          ;
        *((void *)this + 28) = i;
      }
    }
    else
    {
      std::vector<std::deque<int>>::__append((uint64_t)v4, v8 - v7);
    }
  }
}

uint64_t operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 464) + 4 * a2) = 0;
  return this;
}

void operations_research::sat::GenericLiteralWatcher::AlwaysCallAtLevelZero(operations_research::sat::GenericLiteralWatcher *this, int a2)
{
  uint64_t v5 = (char *)*((void *)this + 62);
  unint64_t v4 = *((void *)this + 63);
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 4);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)*((void *)this + 61);
  uint64_t v9 = (v5 - v8) >> 2;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 1 > v10) {
    unint64_t v10 = v11 >> 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = operator new(4 * v12);
    unint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    _DWORD *v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  unint64_t v14 = (_DWORD *)(4 * v9);
  uint64_t v15 = 0;
  *(_DWORD *)(4 * v9) = a2;
  uint64_t v7 = 4 * v9 + 4;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 4;
    if (v17 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v6 = &v5[-v19];
    unint64_t v14 = (_DWORD *)((char *)v14 - v19);
    uint64_t v20 = &v13[4 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *uint64_t v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v24 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--unint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *((void *)this + 61) = v14;
  *((void *)this + 62) = v7;
  *((void *)this + 63) = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  *((void *)this + 62) = v7;
}

void operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4 = (void *)(*(void *)(a1 + 368) + 24 * a2);
  uint64_t v5 = v4 + 1;
  uint64_t v6 = (char *)v4[1];
  uint64_t v7 = v6;
  unint64_t v8 = v4[2];
  if ((unint64_t)v6 < v8)
  {
    *(void *)uint64_t v6 = a3;
    uint64_t v9 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  unint64_t v10 = (char *)*v4;
  uint64_t v11 = (uint64_t)&v6[-*v4];
  uint64_t v12 = v11 >> 3;
  unint64_t v13 = (v11 >> 3) + 1;
  if (v13 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v8 - (void)v10;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v16 = operator new(8 * v15);
    unint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    void *v17 = a3;
    uint64_t v9 = (uint64_t)(v17 + 1);
    uint64_t v19 = (char *)(v6 - v10);
    if (v6 == v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int64_t v16 = 0;
  unint64_t v17 = (void *)(8 * v12);
  uint64_t v18 = 0;
  *(void *)(8 * v12) = a3;
  uint64_t v9 = 8 * v12 + 8;
  uint64_t v19 = (char *)(v6 - v10);
  if (v6 != v10)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v6 - v16 - v11) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v22];
    unint64_t v17 = (void *)((char *)v17 - v22);
    long long v23 = &v16[8 * v12 - 16];
    int v24 = v6 - 16;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *--unint64_t v17 = v27;
      }
      while (v7 != v10);
    }
    uint64_t v7 = (char *)*v4;
  }
LABEL_21:
  void *v4 = v17;
  *uint64_t v5 = v9;
  v4[2] = v18;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  *uint64_t v5 = v9;
}

void operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(operations_research::sat::GenericLiteralWatcher *this, int a2, int *a3)
{
  unint64_t v4 = (void *)(*((void *)this + 49) + 24 * a2);
  uint64_t v5 = v4 + 1;
  uint64_t v6 = (char *)v4[1];
  uint64_t v7 = v6;
  unint64_t v8 = v4[2];
  if ((unint64_t)v6 < v8)
  {
    *(void *)uint64_t v6 = a3;
    uint64_t v9 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  unint64_t v10 = (char *)*v4;
  uint64_t v11 = (uint64_t)&v6[-*v4];
  uint64_t v12 = v11 >> 3;
  unint64_t v13 = (v11 >> 3) + 1;
  if (v13 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v8 - (void)v10;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v16 = operator new(8 * v15);
    unint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    void *v17 = a3;
    uint64_t v9 = (uint64_t)(v17 + 1);
    uint64_t v19 = (char *)(v6 - v10);
    if (v6 == v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int64_t v16 = 0;
  unint64_t v17 = (void *)(8 * v12);
  uint64_t v18 = 0;
  *(void *)(8 * v12) = a3;
  uint64_t v9 = 8 * v12 + 8;
  uint64_t v19 = (char *)(v6 - v10);
  if (v6 != v10)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v6 - v16 - v11) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v22];
    unint64_t v17 = (void *)((char *)v17 - v22);
    long long v23 = &v16[8 * v12 - 16];
    int v24 = v6 - 16;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *--unint64_t v17 = v27;
      }
      while (v7 != v10);
    }
    uint64_t v7 = (char *)*v4;
  }
LABEL_21:
  void *v4 = v17;
  *uint64_t v5 = v9;
  v4[2] = v18;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  *uint64_t v5 = v9;
}

void operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void *a1@<X8>)
{
  *a1 = &unk_26F0C3048;
  a1[3] = a1;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCF1400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v5) >> 2) >= a2)
  {
    if (!a2)
    {
LABEL_31:
      a1[1] = v5;
      return;
    }
    uint64_t v12 = (void *)((char *)v5 + 12 * a2);
    unint64_t v13 = 12 * a2 - 12;
    if (v13 >= 0xC)
    {
      unint64_t v26 = v13 / 0xC + 1;
      uint64_t v14 = (void *)((char *)v5 + 12 * (v26 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v27 = v26 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *uint64_t v5 = 0;
        *(void *)((char *)v5 + 12) = 0;
        v5 += 3;
        v27 -= 2;
      }
      while (v27);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v14 = a1[1];
    }
    do
    {
      void *v14 = 0;
      uint64_t v14 = (void *)((char *)v14 + 12);
    }
    while (v14 != v12);
LABEL_30:
    uint64_t v5 = v12;
    goto LABEL_31;
  }
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 2);
  unint64_t v8 = v7 + a2;
  if (v7 + a2 > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v6) >> 2);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(12 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v15 = &v11[12 * v7];
  int64_t v16 = &v15[12 * a2];
  unint64_t v17 = 12 * a2 - 12;
  uint64_t v18 = v15;
  if (v17 < 0xC) {
    goto LABEL_37;
  }
  unint64_t v19 = v17 / 0xC + 1;
  uint64_t v18 = &v15[12 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v20 = v19 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v21 = &v11[12 * v7];
  do
  {
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 12) = 0;
    v21 += 24;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
  {
LABEL_37:
    do
    {
      *(void *)uint64_t v18 = 0;
      v18 += 12;
    }
    while (v18 != v16);
  }
  for (uint64_t i = &v11[12 * v10]; v5 != v6; *((_DWORD *)v15 + 2) = v24)
  {
    uint64_t v23 = *(void *)((char *)v5 - 12);
    uint64_t v5 = (void *)((char *)v5 - 12);
    int v24 = *((_DWORD *)v5 + 2);
    *(void *)(v15 - 12) = v23;
    v15 -= 12;
  }
  uint64_t v25 = *a1;
  *a1 = v15;
  a1[1] = v16;
  a1[2] = i;
  if (v25)
  {
    operator delete(v25);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
  while (2)
  {
    uint64_t v11 = (uint64_t *)((char *)a2 - 12);
    uint64_t v12 = a2 - 3;
    unint64_t v13 = (uint64_t *)((char *)a2 - 36);
    unint64_t v14 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 2);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v93 = *(uint64_t *)((char *)a2 - 12);
                int v92 = (char *)a2 - 12;
                if (v93 >= *(void *)v14) {
                  return result;
                }
                goto LABEL_101;
              case 3uLL:
                unint64_t v94 = v14 + 12;
                uint64_t v95 = *(void *)(v14 + 12);
                uint64_t v97 = *(uint64_t *)((char *)a2 - 12);
                int v92 = (char *)a2 - 12;
                uint64_t v96 = v97;
                if (v95 < *(void *)v14)
                {
                  if (v96 >= v95)
                  {
                    int v182 = *(_DWORD *)(v14 + 8);
                    uint64_t v157 = *(void *)v14;
                    *(void *)unint64_t v14 = *(void *)v94;
                    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v14 + 20);
                    *(void *)unint64_t v94 = v157;
                    *(_DWORD *)(v14 + 20) = v182;
                    if (*(void *)v92 < *(void *)(v14 + 12))
                    {
                      uint64_t v125 = *(void *)v94;
                      int v126 = *(_DWORD *)(v14 + 20);
                      int v127 = *((_DWORD *)v92 + 2);
                      *(void *)unint64_t v94 = *(void *)v92;
                      *(_DWORD *)(v14 + 20) = v127;
                      *((_DWORD *)v92 + 2) = v126;
                      *(void *)int v92 = v125;
                    }
                  }
                  else
                  {
LABEL_101:
                    int v179 = *(_DWORD *)(v14 + 8);
                    uint64_t v154 = *(void *)v14;
                    uint64_t v98 = *(void *)v92;
                    *(_DWORD *)(v14 + 8) = *((_DWORD *)v92 + 2);
                    *(void *)unint64_t v14 = v98;
                    *((_DWORD *)v92 + 2) = v179;
                    *(void *)int v92 = v154;
                  }
                  return result;
                }
                if (v96 >= v95) {
                  return result;
                }
                uint64_t v114 = *(void *)v94;
                int v115 = *(_DWORD *)(v14 + 20);
                int v116 = *((_DWORD *)v92 + 2);
                *(void *)unint64_t v94 = *(void *)v92;
                *(_DWORD *)(v14 + 20) = v116;
                *((_DWORD *)v92 + 2) = v115;
                *(void *)int v92 = v114;
                goto LABEL_149;
              case 4uLL:
                unint64_t v94 = v14 + 12;
                uint64_t v99 = *(void *)(v14 + 12);
                unint64_t v100 = (uint64_t *)(v14 + 24);
                uint64_t v101 = *(void *)(v14 + 24);
                if (v99 >= *(void *)v14)
                {
                  if (v101 < v99)
                  {
                    int v117 = *(_DWORD *)(v14 + 20);
                    uint64_t v118 = *(void *)v94;
                    *(void *)unint64_t v94 = *v100;
                    *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 32);
                    uint64_t *v100 = v118;
                    *(_DWORD *)(v14 + 32) = v117;
                    if (*(void *)(v14 + 12) < *(void *)v14)
                    {
                      int v181 = *(_DWORD *)(v14 + 8);
                      uint64_t v156 = *(void *)v14;
                      *(void *)unint64_t v14 = *(void *)v94;
                      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v14 + 20);
                      *(void *)unint64_t v94 = v156;
                      *(_DWORD *)(v14 + 20) = v181;
                    }
                  }
                }
                else
                {
                  if (v101 >= v99)
                  {
                    int v183 = *(_DWORD *)(v14 + 8);
                    uint64_t v158 = *(void *)v14;
                    *(void *)unint64_t v14 = *(void *)v94;
                    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v14 + 20);
                    *(void *)unint64_t v94 = v158;
                    *(_DWORD *)(v14 + 20) = v183;
                    if (v101 >= *(void *)(v14 + 12)) {
                      goto LABEL_146;
                    }
                    int v102 = *(_DWORD *)(v14 + 20);
                    uint64_t v128 = *(void *)v94;
                    *(void *)unint64_t v94 = *v100;
                    *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 32);
                    uint64_t *v100 = v128;
                  }
                  else
                  {
                    int v180 = *(_DWORD *)(v14 + 8);
                    uint64_t v155 = *(void *)v14;
                    *(void *)unint64_t v14 = *v100;
                    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v14 + 32);
                    uint64_t *v100 = v155;
                    int v102 = v180;
                  }
                  *(_DWORD *)(v14 + 32) = v102;
                }
LABEL_146:
                if (*v11 < *v100)
                {
                  uint64_t v129 = *v100;
                  int v130 = *(_DWORD *)(v14 + 32);
                  int v131 = *((_DWORD *)a2 - 1);
                  uint64_t *v100 = *v11;
                  *(_DWORD *)(v14 + 32) = v131;
                  *((_DWORD *)a2 - 1) = v130;
                  uint64_t *v11 = v129;
                  if (*v100 < *(void *)v94)
                  {
                    int v132 = *(_DWORD *)(v14 + 20);
                    uint64_t v133 = *(void *)v94;
                    *(void *)unint64_t v94 = *v100;
                    *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 32);
                    uint64_t *v100 = v133;
                    *(_DWORD *)(v14 + 32) = v132;
LABEL_149:
                    if (*(void *)(v14 + 12) < *(void *)v14)
                    {
                      int v184 = *(_DWORD *)(v14 + 8);
                      uint64_t v159 = *(void *)v14;
                      *(void *)unint64_t v14 = *(void *)v94;
                      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v94 + 8);
                      *(void *)unint64_t v94 = v159;
                      *(_DWORD *)(v94 + 8) = v184;
                    }
                  }
                }
                break;
              case 5uLL:
                return (unint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>((uint64_t *)v14, (uint64_t *)(v14 + 12), (uint64_t *)(v14 + 24), (uint64_t *)(v14 + 36), (uint64_t *)((char *)a2 - 12));
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 287)
          {
            uint64_t v103 = (uint64_t *)(v14 + 12);
            BOOL v105 = (uint64_t *)v14 == a2 || v103 == a2;
            if (a5)
            {
              if (!v105)
              {
                uint64_t v106 = 0;
                unint64_t v107 = v14;
                do
                {
                  unint64_t v109 = v103;
                  uint64_t v110 = *(void *)(v107 + 12);
                  if (v110 < *(void *)v107)
                  {
                    int v111 = *(_DWORD *)(v107 + 20);
                    uint64_t v112 = v106;
                    do
                    {
                      uint64_t v113 = v14 + v112;
                      *(void *)(v113 + 12) = *(void *)(v14 + v112);
                      *(_DWORD *)(v113 + 20) = *(_DWORD *)(v14 + v112 + 8);
                      if (!v112)
                      {
                        uint64_t v108 = v14;
                        goto LABEL_118;
                      }
                      v112 -= 12;
                    }
                    while (v110 < *(void *)(v113 - 12));
                    uint64_t v108 = v14 + v112 + 12;
LABEL_118:
                    *(void *)uint64_t v108 = v110;
                    *(_DWORD *)(v108 + 8) = v111;
                  }
                  uint64_t v103 = (uint64_t *)((char *)v109 + 12);
                  v106 += 12;
                  unint64_t v107 = (unint64_t)v109;
                }
                while ((uint64_t *)((char *)v109 + 12) != a2);
              }
            }
            else if (!v105)
            {
              do
              {
                unint64_t v119 = (unint64_t)v103;
                uint64_t v120 = *(void *)(v10 + 12);
                if (v120 < *(void *)v10)
                {
                  int v121 = *(_DWORD *)(v10 + 20);
                  unint64_t v122 = v119;
                  do
                  {
                    unint64_t v123 = v122;
                    uint64_t v124 = *(void *)(v122 - 12);
                    v122 -= 12;
                    *(void *)unint64_t v123 = v124;
                    *(_DWORD *)(v123 + 8) = *(_DWORD *)(v123 - 4);
                  }
                  while (v120 < *(void *)(v123 - 24));
                  *(void *)unint64_t v122 = v120;
                  *(_DWORD *)(v122 + 8) = v121;
                }
                uint64_t v103 = (uint64_t *)(v119 + 12);
                unint64_t v10 = v119;
              }
              while ((uint64_t *)(v119 + 12) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((uint64_t *)v14 != a2)
            {
              return (unint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(v14, a2, a2);
            }
            return result;
          }
          unint64_t v17 = v16 >> 1;
          unint64_t v18 = v14 + 12 * (v16 >> 1);
          uint64_t v19 = *v11;
          if ((unint64_t)v15 >= 0x601) {
            break;
          }
          uint64_t v22 = *(void *)v14;
          if (*(void *)v14 < *(void *)v18)
          {
            if (v19 >= v22)
            {
              int v168 = *(_DWORD *)(v18 + 8);
              uint64_t v143 = *(void *)v18;
              uint64_t v44 = *(void *)v14;
              *(_DWORD *)(v18 + 8) = *(_DWORD *)(v14 + 8);
              *(void *)unint64_t v18 = v44;
              *(_DWORD *)(v14 + 8) = v168;
              *(void *)unint64_t v14 = v143;
              if (*v11 >= *(void *)v14) {
                goto LABEL_33;
              }
              int v161 = *(_DWORD *)(v14 + 8);
              uint64_t v136 = *(void *)v14;
              uint64_t v45 = *v11;
              *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v14 = v45;
            }
            else
            {
              int v161 = *(_DWORD *)(v18 + 8);
              uint64_t v136 = *(void *)v18;
              uint64_t v23 = *v11;
              *(_DWORD *)(v18 + 8) = *((_DWORD *)a2 - 1);
              *(void *)unint64_t v18 = v23;
            }
            *((_DWORD *)a2 - 1) = v161;
            uint64_t *v11 = v136;
LABEL_33:
            --a4;
            uint64_t v28 = *(void *)v14;
            if (a5) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          if (v19 >= v22) {
            goto LABEL_33;
          }
          int v164 = *(_DWORD *)(v14 + 8);
          uint64_t v139 = *(void *)v14;
          uint64_t v26 = *v11;
          *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
          *(void *)unint64_t v14 = v26;
          *((_DWORD *)a2 - 1) = v164;
          uint64_t *v11 = v139;
          if (*(void *)v14 >= *(void *)v18) {
            goto LABEL_33;
          }
          int v165 = *(_DWORD *)(v18 + 8);
          uint64_t v140 = *(void *)v18;
          uint64_t v27 = *(void *)v14;
          *(_DWORD *)(v18 + 8) = *(_DWORD *)(v14 + 8);
          *(void *)unint64_t v18 = v27;
          uint64_t v28 = v140;
          *(_DWORD *)(v14 + 8) = v165;
          *(void *)unint64_t v14 = v140;
          --a4;
          if (a5) {
            goto LABEL_56;
          }
LABEL_55:
          if (*(void *)(v14 - 12) < v28) {
            goto LABEL_56;
          }
          if (v28 >= *v11)
          {
            unint64_t v84 = v14 + 12;
            do
            {
              unint64_t v14 = v84;
              if (v84 >= (unint64_t)a2) {
                break;
              }
              v84 += 12;
            }
            while (v28 >= *(void *)v14);
          }
          else
          {
            do
            {
              uint64_t v83 = *(void *)(v14 + 12);
              v14 += 12;
            }
            while (v28 >= v83);
          }
          unint64_t v85 = a2;
          if (v14 < (unint64_t)a2)
          {
            unint64_t v85 = a2;
            do
            {
              uint64_t v86 = *(uint64_t *)((char *)v85 - 12);
              unint64_t v85 = (uint64_t *)((char *)v85 - 12);
            }
            while (v28 < v86);
          }
          int v87 = *(_DWORD *)(v10 + 8);
          while (v14 < (unint64_t)v85)
          {
            int v178 = *(_DWORD *)(v14 + 8);
            uint64_t v153 = *(void *)v14;
            uint64_t v88 = *v85;
            *(_DWORD *)(v14 + 8) = *((_DWORD *)v85 + 2);
            *(void *)unint64_t v14 = v88;
            *((_DWORD *)v85 + 2) = v178;
            *unint64_t v85 = v153;
            do
            {
              uint64_t v89 = *(void *)(v14 + 12);
              v14 += 12;
            }
            while (v28 >= v89);
            do
            {
              uint64_t v90 = *(uint64_t *)((char *)v85 - 12);
              unint64_t v85 = (uint64_t *)((char *)v85 - 12);
            }
            while (v28 < v90);
          }
          BOOL v5 = v14 - 12 >= v10;
          BOOL v6 = v14 - 12 == v10;
          if (v14 - 12 != v10)
          {
            uint64_t v91 = *(void *)(v14 - 12);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v14 - 4);
            *(void *)unint64_t v10 = v91;
          }
          a5 = 0;
          *(void *)(v14 - 12) = v28;
          *(_DWORD *)(v14 - 4) = v87;
        }
        uint64_t v20 = *(void *)v18;
        if (*(void *)v18 >= *(void *)v14)
        {
          if (v19 < v20)
          {
            int v162 = *(_DWORD *)(v18 + 8);
            uint64_t v137 = *(void *)v18;
            uint64_t v24 = *v11;
            *(_DWORD *)(v18 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v18 = v24;
            *((_DWORD *)a2 - 1) = v162;
            uint64_t *v11 = v137;
            if (*(void *)v18 < *(void *)v14)
            {
              int v163 = *(_DWORD *)(v14 + 8);
              uint64_t v138 = *(void *)v14;
              uint64_t v25 = *(void *)v18;
              *(_DWORD *)(v14 + 8) = *(_DWORD *)(v18 + 8);
              *(void *)unint64_t v14 = v25;
              *(_DWORD *)(v18 + 8) = v163;
              *(void *)unint64_t v18 = v138;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            int v166 = *(_DWORD *)(v14 + 8);
            uint64_t v141 = *(void *)v14;
            uint64_t v29 = *(void *)v18;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v18 + 8);
            *(void *)unint64_t v14 = v29;
            *(_DWORD *)(v18 + 8) = v166;
            *(void *)unint64_t v18 = v141;
            if (*v11 >= *(void *)v18) {
              goto LABEL_24;
            }
            int v160 = *(_DWORD *)(v18 + 8);
            uint64_t v135 = *(void *)v18;
            uint64_t v30 = *v11;
            *(_DWORD *)(v18 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v18 = v30;
          }
          else
          {
            int v160 = *(_DWORD *)(v14 + 8);
            uint64_t v135 = *(void *)v14;
            uint64_t v21 = *v11;
            *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 - 1);
            *(void *)unint64_t v14 = v21;
          }
          *((_DWORD *)a2 - 1) = v160;
          uint64_t *v11 = v135;
        }
LABEL_24:
        uint64_t v31 = (uint64_t *)(v14 + 12);
        unint64_t v32 = v14 + 12 * v17;
        uint64_t v35 = *(void *)(v32 - 12);
        unint64_t v33 = v32 - 12;
        uint64_t v34 = v35;
        uint64_t v36 = *v12;
        if (v35 >= *(void *)(v14 + 12))
        {
          if (v36 < v34)
          {
            int v167 = *(_DWORD *)(v33 + 8);
            uint64_t v142 = *(void *)v33;
            uint64_t v40 = *v12;
            *(_DWORD *)(v33 + 8) = *((_DWORD *)a2 - 4);
            *(void *)unint64_t v33 = v40;
            *((_DWORD *)a2 - 4) = v167;
            uint64_t *v12 = v142;
            if (*(void *)v33 < *v31)
            {
              uint64_t v41 = *v31;
              int v42 = *(_DWORD *)(v14 + 20);
              int v43 = *(_DWORD *)(v33 + 8);
              *uint64_t v31 = *(void *)v33;
              *(_DWORD *)(v14 + 20) = v43;
              *(_DWORD *)(v33 + 8) = v42;
              *(void *)unint64_t v33 = v41;
            }
          }
        }
        else if (v36 >= v34)
        {
          uint64_t v46 = *v31;
          int v47 = *(_DWORD *)(v14 + 20);
          int v48 = *(_DWORD *)(v33 + 8);
          *uint64_t v31 = *(void *)v33;
          *(_DWORD *)(v14 + 20) = v48;
          *(_DWORD *)(v33 + 8) = v47;
          *(void *)unint64_t v33 = v46;
          if (*v12 < v46)
          {
            int v169 = *(_DWORD *)(v33 + 8);
            uint64_t v144 = *(void *)v33;
            uint64_t v49 = *v12;
            *(_DWORD *)(v33 + 8) = *((_DWORD *)a2 - 4);
            *(void *)unint64_t v33 = v49;
            *((_DWORD *)a2 - 4) = v169;
            uint64_t *v12 = v144;
          }
        }
        else
        {
          uint64_t v37 = *v31;
          int v38 = *(_DWORD *)(v14 + 20);
          int v39 = *((_DWORD *)a2 - 4);
          *uint64_t v31 = *v12;
          *(_DWORD *)(v14 + 20) = v39;
          *((_DWORD *)a2 - 4) = v38;
          uint64_t *v12 = v37;
        }
        unint64_t v50 = (uint64_t *)(v14 + 24);
        unint64_t v51 = v14 + 12 * v17;
        uint64_t v54 = *(void *)(v51 + 12);
        unint64_t v52 = v51 + 12;
        uint64_t v53 = v54;
        uint64_t v55 = *v13;
        if (v54 >= *(void *)(v14 + 24))
        {
          if (v55 < v53)
          {
            int v170 = *(_DWORD *)(v52 + 8);
            uint64_t v145 = *(void *)v52;
            uint64_t v59 = *v13;
            *(_DWORD *)(v52 + 8) = *((_DWORD *)a2 - 7);
            *(void *)unint64_t v52 = v59;
            *((_DWORD *)a2 - 7) = v170;
            uint64_t *v13 = v145;
            if (*(void *)v52 < *v50)
            {
              uint64_t v60 = *v50;
              int v61 = *(_DWORD *)(v14 + 32);
              int v62 = *(_DWORD *)(v52 + 8);
              *unint64_t v50 = *(void *)v52;
              *(_DWORD *)(v14 + 32) = v62;
              *(_DWORD *)(v52 + 8) = v61;
              *(void *)unint64_t v52 = v60;
            }
          }
        }
        else if (v55 >= v53)
        {
          uint64_t v63 = *v50;
          int v64 = *(_DWORD *)(v14 + 32);
          int v65 = *(_DWORD *)(v52 + 8);
          *unint64_t v50 = *(void *)v52;
          *(_DWORD *)(v14 + 32) = v65;
          *(_DWORD *)(v52 + 8) = v64;
          *(void *)unint64_t v52 = v63;
          if (*v13 < v63)
          {
            int v171 = *(_DWORD *)(v52 + 8);
            uint64_t v146 = *(void *)v52;
            uint64_t v66 = *v13;
            *(_DWORD *)(v52 + 8) = *((_DWORD *)a2 - 7);
            *(void *)unint64_t v52 = v66;
            *((_DWORD *)a2 - 7) = v171;
            uint64_t *v13 = v146;
          }
        }
        else
        {
          uint64_t v56 = *v50;
          int v57 = *(_DWORD *)(v14 + 32);
          int v58 = *((_DWORD *)a2 - 7);
          *unint64_t v50 = *v13;
          *(_DWORD *)(v14 + 32) = v58;
          *((_DWORD *)a2 - 7) = v57;
          uint64_t *v13 = v56;
        }
        uint64_t v67 = *(void *)v18;
        uint64_t v68 = *(void *)v52;
        if (*(void *)v18 >= *(void *)v33)
        {
          if (v68 < v67)
          {
            int v173 = *(_DWORD *)(v18 + 8);
            uint64_t v148 = *(void *)v18;
            *(void *)unint64_t v18 = *(void *)v52;
            *(_DWORD *)(v18 + 8) = *(_DWORD *)(v52 + 8);
            *(_DWORD *)(v52 + 8) = v173;
            *(void *)unint64_t v52 = v148;
            if (*(void *)v18 < *(void *)v33)
            {
              int v174 = *(_DWORD *)(v33 + 8);
              uint64_t v149 = *(void *)v33;
              *(void *)unint64_t v33 = *(void *)v18;
              *(_DWORD *)(v33 + 8) = *(_DWORD *)(v18 + 8);
              *(_DWORD *)(v18 + 8) = v174;
              *(void *)unint64_t v18 = v149;
            }
          }
        }
        else
        {
          if (v68 >= v67)
          {
            int v175 = *(_DWORD *)(v33 + 8);
            uint64_t v150 = *(void *)v33;
            *(void *)unint64_t v33 = *(void *)v18;
            *(_DWORD *)(v33 + 8) = *(_DWORD *)(v18 + 8);
            *(_DWORD *)(v18 + 8) = v175;
            *(void *)unint64_t v18 = v150;
            if (*(void *)v52 >= *(void *)v18) {
              goto LABEL_54;
            }
            int v172 = *(_DWORD *)(v18 + 8);
            uint64_t v147 = *(void *)v18;
            *(void *)unint64_t v18 = *(void *)v52;
            *(_DWORD *)(v18 + 8) = *(_DWORD *)(v52 + 8);
          }
          else
          {
            int v172 = *(_DWORD *)(v33 + 8);
            uint64_t v147 = *(void *)v33;
            *(void *)unint64_t v33 = *(void *)v52;
            *(_DWORD *)(v33 + 8) = *(_DWORD *)(v52 + 8);
          }
          *(_DWORD *)(v52 + 8) = v172;
          *(void *)unint64_t v52 = v147;
        }
LABEL_54:
        int v176 = *(_DWORD *)(v14 + 8);
        uint64_t v151 = *(void *)v14;
        uint64_t v69 = *(void *)v18;
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(v18 + 8);
        *(void *)unint64_t v14 = v69;
        *(_DWORD *)(v18 + 8) = v176;
        *(void *)unint64_t v18 = v151;
        --a4;
        uint64_t v28 = *(void *)v14;
        if ((a5 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_56:
        uint64_t v70 = 0;
        int v71 = *(_DWORD *)(v14 + 8);
        do
        {
          uint64_t v72 = *(void *)(v14 + v70 + 12);
          v70 += 12;
        }
        while (v72 < v28);
        unint64_t v73 = v14 + v70;
        uint64_t v74 = a2;
        if (v70 == 12)
        {
          uint64_t v74 = a2;
          do
          {
            if (v73 >= (unint64_t)v74) {
              break;
            }
            uint64_t v76 = *(uint64_t *)((char *)v74 - 12);
            uint64_t v74 = (uint64_t *)((char *)v74 - 12);
          }
          while (v76 >= v28);
        }
        else
        {
          do
          {
            uint64_t v75 = *(uint64_t *)((char *)v74 - 12);
            uint64_t v74 = (uint64_t *)((char *)v74 - 12);
          }
          while (v75 >= v28);
        }
        v14 += v70;
        if (v73 < (unint64_t)v74)
        {
          unint64_t v77 = (unint64_t)v74;
          do
          {
            int v177 = *(_DWORD *)(v14 + 8);
            uint64_t v152 = *(void *)v14;
            uint64_t v78 = *(void *)v77;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v77 + 8);
            *(void *)unint64_t v14 = v78;
            *(_DWORD *)(v77 + 8) = v177;
            *(void *)unint64_t v77 = v152;
            do
            {
              uint64_t v79 = *(void *)(v14 + 12);
              v14 += 12;
            }
            while (v79 < v28);
            do
            {
              uint64_t v80 = *(void *)(v77 - 12);
              v77 -= 12;
            }
            while (v80 >= v28);
          }
          while (v14 < v77);
        }
        if (v14 - 12 != v10)
        {
          uint64_t v81 = *(void *)(v14 - 12);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(v14 - 4);
          *(void *)unint64_t v10 = v81;
        }
        *(void *)(v14 - 12) = v28;
        *(_DWORD *)(v14 - 4) = v71;
        if (v73 >= (unint64_t)v74) {
          break;
        }
LABEL_75:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,false>(v10, v14 - 12, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v82 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>((uint64_t *)v10, (uint64_t *)(v14 - 12));
      unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>((uint64_t *)v14, a2);
      if (result) {
        break;
      }
      if (!v82) {
        goto LABEL_75;
      }
    }
    a2 = (uint64_t *)(v14 - 12);
    if (!v82) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t *a1, uint64_t *a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 2))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      uint64_t v11 = *(uint64_t *)((char *)a2 - 12);
      unint64_t v10 = (uint64_t *)((char *)a2 - 12);
      if (v11 < *a1) {
        goto LABEL_10;
      }
      return 1;
    case 3uLL:
      uint64_t v12 = (uint64_t *)((char *)a1 + 12);
      uint64_t v13 = *(uint64_t *)((char *)a1 + 12);
      uint64_t v15 = *(uint64_t *)((char *)a2 - 12);
      unint64_t v10 = (uint64_t *)((char *)a2 - 12);
      uint64_t v14 = v15;
      if (v13 < *a1)
      {
        if (v14 < v13)
        {
LABEL_10:
          int v16 = *((_DWORD *)a1 + 2);
          uint64_t v17 = *a1;
          int v18 = *((_DWORD *)v10 + 2);
          *a1 = *v10;
          *((_DWORD *)a1 + 2) = v18;
          uint64_t *v10 = v17;
          *((_DWORD *)v10 + 2) = v16;
          return 1;
        }
        int v49 = *((_DWORD *)a1 + 2);
        uint64_t v50 = *a1;
        *a1 = *v12;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        uint64_t *v12 = v50;
        *((_DWORD *)a1 + 5) = v49;
        if (*v10 < *(uint64_t *)((char *)a1 + 12))
        {
          int v51 = *((_DWORD *)a1 + 5);
          uint64_t v52 = *v12;
          int v53 = *((_DWORD *)v10 + 2);
          uint64_t *v12 = *v10;
          *((_DWORD *)a1 + 5) = v53;
          uint64_t *v10 = v52;
          *((_DWORD *)v10 + 2) = v51;
          return 1;
        }
        return 1;
      }
      if (v14 >= v13) {
        return 1;
      }
      int v30 = *((_DWORD *)a1 + 5);
      uint64_t v31 = *v12;
      int v32 = *((_DWORD *)v10 + 2);
      uint64_t *v12 = *v10;
      *((_DWORD *)a1 + 5) = v32;
      uint64_t *v10 = v31;
      *((_DWORD *)v10 + 2) = v30;
      if (*(uint64_t *)((char *)a1 + 12) >= *a1) {
        return 1;
      }
      goto LABEL_45;
    case 4uLL:
      uint64_t v12 = (uint64_t *)((char *)a1 + 12);
      uint64_t v19 = *(uint64_t *)((char *)a1 + 12);
      uint64_t v20 = a1 + 3;
      uint64_t v21 = a1[3];
      uint64_t v22 = (uint64_t *)((char *)a2 - 12);
      uint64_t v23 = *a1;
      if (v19 >= *a1)
      {
        if (v21 < v19)
        {
          int v33 = *((_DWORD *)a1 + 5);
          uint64_t v34 = *v12;
          uint64_t *v12 = *v20;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *uint64_t v20 = v34;
          *((_DWORD *)a1 + 8) = v33;
          if (*v12 < v23)
          {
            int v35 = *((_DWORD *)a1 + 2);
            uint64_t v36 = *a1;
            *a1 = *v12;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            uint64_t *v12 = v36;
            *((_DWORD *)a1 + 5) = v35;
          }
        }
      }
      else
      {
        if (v21 >= v19)
        {
          int v54 = *((_DWORD *)a1 + 2);
          uint64_t v55 = *a1;
          *a1 = *v12;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
          uint64_t *v12 = v55;
          *((_DWORD *)a1 + 5) = v54;
          if (v21 >= *(uint64_t *)((char *)a1 + 12)) {
            goto LABEL_42;
          }
          int v24 = *((_DWORD *)a1 + 5);
          uint64_t v25 = *v12;
          uint64_t *v12 = *v20;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
        }
        else
        {
          int v24 = *((_DWORD *)a1 + 2);
          uint64_t v25 = *a1;
          *a1 = *v20;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        }
        *uint64_t v20 = v25;
        *((_DWORD *)a1 + 8) = v24;
      }
LABEL_42:
      if (*v22 >= *v20) {
        return 1;
      }
      int v56 = *((_DWORD *)a1 + 8);
      uint64_t v57 = *v20;
      int v58 = *((_DWORD *)a2 - 1);
      *uint64_t v20 = *v22;
      *((_DWORD *)a1 + 8) = v58;
      *uint64_t v22 = v57;
      *((_DWORD *)a2 - 1) = v56;
      if (*v20 >= *v12) {
        return 1;
      }
      int v59 = *((_DWORD *)a1 + 5);
      uint64_t v60 = *v12;
      uint64_t *v12 = *v20;
      *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
      *uint64_t v20 = v60;
      *((_DWORD *)a1 + 8) = v59;
      if (*(uint64_t *)((char *)a1 + 12) >= *a1) {
        return 1;
      }
LABEL_45:
      int v61 = *((_DWORD *)a1 + 2);
      uint64_t v62 = *a1;
      *a1 = *v12;
      *((_DWORD *)a1 + 2) = *((_DWORD *)v12 + 2);
      uint64_t *v12 = v62;
      *((_DWORD *)v12 + 2) = v61;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(a1, (uint64_t *)((char *)a1 + 12), a1 + 3, (uint64_t *)((char *)a1 + 36), (uint64_t *)((char *)a2 - 12));
      return 1;
    default:
      uint64_t v3 = a1 + 3;
      uint64_t v4 = a1[3];
      BOOL v5 = (uint64_t *)((char *)a1 + 12);
      uint64_t v6 = *(uint64_t *)((char *)a1 + 12);
      uint64_t v7 = *a1;
      if (v6 >= *a1)
      {
        if (v4 < v6)
        {
          int v26 = *((_DWORD *)a1 + 5);
          uint64_t v27 = *v5;
          *BOOL v5 = *v3;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *uint64_t v3 = v27;
          *((_DWORD *)a1 + 8) = v26;
          if (*v5 < v7)
          {
            int v28 = *((_DWORD *)a1 + 2);
            uint64_t v29 = *a1;
            *a1 = *v5;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *BOOL v5 = v29;
            *((_DWORD *)a1 + 5) = v28;
          }
        }
      }
      else if (v4 >= v6)
      {
        int v37 = *((_DWORD *)a1 + 2);
        uint64_t v38 = *a1;
        *a1 = *v5;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *BOOL v5 = v38;
        *((_DWORD *)a1 + 5) = v37;
        if (v4 < *(uint64_t *)((char *)a1 + 12))
        {
          int v39 = *((_DWORD *)a1 + 5);
          uint64_t v40 = *v5;
          *BOOL v5 = *v3;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *uint64_t v3 = v40;
          *((_DWORD *)a1 + 8) = v39;
        }
      }
      else
      {
        int v8 = *((_DWORD *)a1 + 2);
        uint64_t v9 = *a1;
        *a1 = *v3;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        *uint64_t v3 = v9;
        *((_DWORD *)a1 + 8) = v8;
      }
      uint64_t v41 = (uint64_t)a1 + 36;
      if ((uint64_t *)((char *)a1 + 36) == a2) {
        return 1;
      }
      uint64_t v42 = 0;
      int v43 = 0;
      break;
  }
  while (1)
  {
    uint64_t v44 = *(void *)v41;
    if (*(void *)v41 < *v3) {
      break;
    }
LABEL_35:
    uint64_t v3 = (uint64_t *)v41;
    v42 += 12;
    v41 += 12;
    if ((uint64_t *)v41 == a2) {
      return 1;
    }
  }
  int v45 = *(_DWORD *)(v41 + 8);
  uint64_t v46 = v42;
  do
  {
    uint64_t v47 = (uint64_t)a1 + v46;
    *(void *)(v47 + 36) = *(uint64_t *)((char *)a1 + v46 + 24);
    *(_DWORD *)(v47 + 44) = *(_DWORD *)((char *)a1 + v46 + 32);
    if (v46 == -24)
    {
      *a1 = v44;
      *((_DWORD *)a1 + 2) = v45;
      if (++v43 != 8) {
        goto LABEL_35;
      }
      return v41 + 12 == (void)a2;
    }
    v46 -= 12;
  }
  while (v44 < *(void *)(v47 + 12));
  uint64_t v48 = (uint64_t)a1 + v46;
  *(void *)(v48 + 36) = v44;
  *(_DWORD *)(v48 + 44) = v45;
  if (++v43 != 8) {
    goto LABEL_35;
  }
  return v41 + 12 == (void)a2;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v5)
    {
      int v10 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *a2;
      int v12 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v12;
      *a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      if (*a2 < *result)
      {
        int v13 = *((_DWORD *)result + 2);
        uint64_t v14 = *result;
        int v15 = *((_DWORD *)a2 + 2);
        void *result = *a2;
        *((_DWORD *)result + 2) = v15;
        *a2 = v14;
        *((_DWORD *)a2 + 2) = v13;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      int v7 = *((_DWORD *)result + 2);
      uint64_t v8 = *result;
      int v9 = *((_DWORD *)a3 + 2);
      void *result = *a3;
      *((_DWORD *)result + 2) = v9;
LABEL_9:
      *a3 = v8;
      *((_DWORD *)a3 + 2) = v7;
      goto LABEL_10;
    }
    int v16 = *((_DWORD *)result + 2);
    uint64_t v17 = *result;
    int v18 = *((_DWORD *)a2 + 2);
    void *result = *a2;
    *((_DWORD *)result + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    if (*a3 < v17)
    {
      int v7 = *((_DWORD *)a2 + 2);
      uint64_t v8 = *a2;
      int v19 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v19;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*a4 < *a3)
  {
    int v20 = *((_DWORD *)a3 + 2);
    uint64_t v21 = *a3;
    int v22 = *((_DWORD *)a4 + 2);
    *a3 = *a4;
    *((_DWORD *)a3 + 2) = v22;
    *a4 = v21;
    *((_DWORD *)a4 + 2) = v20;
    if (*a3 < *a2)
    {
      int v23 = *((_DWORD *)a2 + 2);
      uint64_t v24 = *a2;
      int v25 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v25;
      *a3 = v24;
      *((_DWORD *)a3 + 2) = v23;
      if (*a2 < *result)
      {
        int v26 = *((_DWORD *)result + 2);
        uint64_t v27 = *result;
        int v28 = *((_DWORD *)a2 + 2);
        void *result = *a2;
        *((_DWORD *)result + 2) = v28;
        *a2 = v27;
        *((_DWORD *)a2 + 2) = v26;
      }
    }
  }
  if (*a5 < *a4)
  {
    int v29 = *((_DWORD *)a4 + 2);
    uint64_t v30 = *a4;
    int v31 = *((_DWORD *)a5 + 2);
    *a4 = *a5;
    *((_DWORD *)a4 + 2) = v31;
    *a5 = v30;
    *((_DWORD *)a5 + 2) = v29;
    if (*a4 < *a3)
    {
      int v32 = *((_DWORD *)a3 + 2);
      uint64_t v33 = *a3;
      int v34 = *((_DWORD *)a4 + 2);
      *a3 = *a4;
      *((_DWORD *)a3 + 2) = v34;
      *a4 = v33;
      *((_DWORD *)a4 + 2) = v32;
      if (*a3 < *a2)
      {
        int v35 = *((_DWORD *)a2 + 2);
        uint64_t v36 = *a2;
        int v37 = *((_DWORD *)a3 + 2);
        *a2 = *a3;
        *((_DWORD *)a2 + 2) = v37;
        *a3 = v36;
        *((_DWORD *)a3 + 2) = v35;
        if (*a2 < *result)
        {
          int v38 = *((_DWORD *)result + 2);
          uint64_t v39 = *result;
          int v40 = *((_DWORD *)a2 + 2);
          void *result = *a2;
          *((_DWORD *)result + 2) = v40;
          *a2 = v39;
          *((_DWORD *)a2 + 2) = v38;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::IntegerEncoder::ValueLiteralPair *,operations_research::sat::IntegerEncoder::ValueLiteralPair *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)a1 == a2) {
    return a3;
  }
  uint64_t v3 = (uint64_t)a2 - a1;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  if ((uint64_t)a2 - a1 >= 13 && (unint64_t)v3 >= 0x18)
  {
    int64_t v43 = (unint64_t)(v4 - 2) >> 1;
    int64_t v44 = v43;
    do
    {
      if (v43 >= v44)
      {
        uint64_t v45 = (2 * v44) | 1;
        uint64_t v46 = (void *)(a1 + 12 * v45);
        if (2 * v44 + 2 >= v4)
        {
          int v49 = (void *)(a1 + 12 * v44);
          uint64_t v50 = *v49;
          if (*v46 >= *v49) {
            goto LABEL_69;
          }
        }
        else
        {
          uint64_t v47 = *(void *)((char *)v46 + 12);
          BOOL v48 = *v46 < v47;
          if (*v46 > v47) {
            uint64_t v47 = *v46;
          }
          if (v48)
          {
            uint64_t v46 = (void *)((char *)v46 + 12);
            uint64_t v45 = 2 * v44 + 2;
          }
          int v49 = (void *)(a1 + 12 * v44);
          uint64_t v50 = *v49;
          if (v47 >= *v49)
          {
LABEL_69:
            int v51 = *((_DWORD *)v49 + 2);
            while (1)
            {
              int v54 = v49;
              int v49 = v46;
              uint64_t v55 = *v46;
              *((_DWORD *)v54 + 2) = *((_DWORD *)v49 + 2);
              void *v54 = v55;
              if (v43 < v45) {
                break;
              }
              uint64_t v56 = (2 * v45) | 1;
              uint64_t v46 = (void *)(a1 + 12 * v56);
              uint64_t v45 = 2 * v45 + 2;
              if (v45 < v4)
              {
                uint64_t v52 = *v46;
                uint64_t v53 = *(void *)((char *)v46 + 12);
                if (*v46 <= v53) {
                  uint64_t v52 = *(void *)((char *)v46 + 12);
                }
                if (*v46 >= v53) {
                  uint64_t v45 = v56;
                }
                else {
                  uint64_t v46 = (void *)((char *)v46 + 12);
                }
                if (v52 < v50) {
                  break;
                }
              }
              else
              {
                uint64_t v45 = v56;
                if (*v46 < v50) {
                  break;
                }
              }
            }
            *int v49 = v50;
            *((_DWORD *)v49 + 2) = v51;
          }
        }
      }
      BOOL v16 = v44-- <= 0;
    }
    while (!v16);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 24)
    {
      uint64_t v6 = a2;
      do
      {
        if (*v6 < *(void *)a1)
        {
          int v7 = *((_DWORD *)v6 + 2);
          uint64_t v8 = *v6;
          int v9 = *(_DWORD *)(a1 + 8);
          *uint64_t v6 = *(void *)a1;
          *((_DWORD *)v6 + 2) = v9;
          *(void *)a1 = v8;
          *(_DWORD *)(a1 + 8) = v7;
        }
        uint64_t v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
LABEL_37:
      uint64_t v5 = a3;
      goto LABEL_38;
    }
    int v10 = (uint64_t *)(a1 + 24);
    uint64_t v11 = a2;
    while (1)
    {
      if (*v11 < *(void *)a1)
      {
        int v12 = *((_DWORD *)v11 + 2);
        uint64_t v13 = *v11;
        int v14 = *(_DWORD *)(a1 + 8);
        uint64_t *v11 = *(void *)a1;
        *((_DWORD *)v11 + 2) = v14;
        *(void *)a1 = v13;
        *(_DWORD *)(a1 + 8) = v12;
        uint64_t v15 = *(void *)(a1 + 12);
        if ((unint64_t)v4 < 3)
        {
          uint64_t v17 = (void *)(a1 + 12);
          uint64_t v18 = 1;
          uint64_t v19 = *(void *)a1;
          if (v15 >= *(void *)a1) {
            goto LABEL_26;
          }
        }
        else
        {
          BOOL v16 = v15 < *v10;
          if (v15 <= *v10) {
            uint64_t v15 = *v10;
          }
          if (v16) {
            uint64_t v17 = (void *)(a1 + 24);
          }
          else {
            uint64_t v17 = (void *)(a1 + 12);
          }
          if (v16) {
            uint64_t v18 = 2;
          }
          else {
            uint64_t v18 = 1;
          }
          uint64_t v19 = *(void *)a1;
          if (v15 >= *(void *)a1)
          {
LABEL_26:
            int v20 = *(_DWORD *)(a1 + 8);
            uint64_t v21 = (void *)a1;
            while (1)
            {
              uint64_t v24 = v21;
              uint64_t v21 = v17;
              uint64_t v25 = *v17;
              *((_DWORD *)v24 + 2) = *((_DWORD *)v21 + 2);
              void *v24 = v25;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18) {
                break;
              }
              uint64_t v26 = (2 * v18) | 1;
              uint64_t v17 = (void *)(a1 + 12 * v26);
              uint64_t v18 = 2 * v18 + 2;
              if (v18 < v4)
              {
                uint64_t v22 = *v17;
                uint64_t v23 = *(void *)((char *)v17 + 12);
                if (*v17 <= v23) {
                  uint64_t v22 = *(void *)((char *)v17 + 12);
                }
                if (*v17 >= v23) {
                  uint64_t v18 = v26;
                }
                else {
                  uint64_t v17 = (void *)((char *)v17 + 12);
                }
                if (v22 < v19) {
                  break;
                }
              }
              else
              {
                uint64_t v18 = v26;
                if (*v17 < v19) {
                  break;
                }
              }
            }
            *uint64_t v21 = v19;
            *((_DWORD *)v21 + 2) = v20;
          }
        }
      }
      uint64_t v11 = (uint64_t *)((char *)v11 + 12);
      if (v11 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 13)
  {
    int64_t v27 = v3 / 0xCuLL;
    do
    {
      uint64_t v28 = 0;
      uint64_t v57 = *(void *)a1;
      int v58 = *(_DWORD *)(a1 + 8);
      uint64_t v29 = a1;
      do
      {
        uint64_t v31 = v29 + 12 * v28 + 12;
        uint64_t v32 = (2 * v28) | 1;
        uint64_t v33 = 2 * v28 + 2;
        if (v33 < v27 && *(void *)v31 < *(void *)(v31 + 12))
        {
          v31 += 12;
          uint64_t v32 = v33;
        }
        uint64_t v30 = *(void *)v31;
        *(_DWORD *)(v29 + 8) = *(_DWORD *)(v31 + 8);
        *(void *)uint64_t v29 = v30;
        uint64_t v29 = v31;
        uint64_t v28 = v32;
      }
      while (v32 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 = (uint64_t *)((char *)a2 - 12);
      if ((uint64_t *)v31 == a2)
      {
        *(_DWORD *)(v31 + 8) = v58;
        *(void *)uint64_t v31 = v57;
      }
      else
      {
        uint64_t v34 = *a2;
        *(_DWORD *)(v31 + 8) = *((_DWORD *)a2 + 2);
        *(void *)uint64_t v31 = v34;
        *a2 = v57;
        *((_DWORD *)a2 + 2) = v58;
        uint64_t v35 = v31 - a1 + 12;
        if (v35 >= 13)
        {
          unint64_t v36 = (v35 / 0xCuLL - 2) >> 1;
          int v37 = (uint64_t *)(a1 + 12 * v36);
          uint64_t v38 = *(void *)v31;
          if (*v37 < *(void *)v31)
          {
            int v39 = *(_DWORD *)(v31 + 8);
            do
            {
              uint64_t v40 = v31;
              uint64_t v31 = (uint64_t)v37;
              uint64_t v41 = *v37;
              *(_DWORD *)(v40 + 8) = *(_DWORD *)(v31 + 8);
              *(void *)uint64_t v40 = v41;
              if (!v36) {
                break;
              }
              unint64_t v36 = (v36 - 1) >> 1;
              int v37 = (uint64_t *)(a1 + 12 * v36);
            }
            while (*v37 < v38);
            *(void *)uint64_t v31 = v38;
            *(_DWORD *)(v31 + 8) = v39;
          }
        }
      }
      BOOL v16 = v27-- <= 2;
    }
    while (!v16);
  }
  return v5;
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,long long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CCF2FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a2 + 1);
  unint64_t v5 = v4
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)));
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    uint64_t v13 = a1[1] + 16 * v12;
    int v14 = *(_DWORD *)v13;
    uint64_t v15 = *(void *)(v13 + 4);
    if (v14 == v3 && v15 == v4) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  unint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v14 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = *(void *)(v18 + 4)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v18)));
      unint64_t v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      uint64_t v21 = *a1;
      uint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v23 = (v15 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      char v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::PositiveOnlyIndex_tag_,int>,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = *(void *)(*(void *)(result + 8) + 16 * v14 + 4)
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(void *)(result + 8) + 16 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(void *)(result + 8) + 16 * v14))));
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          long long v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(void *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 40) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void std::vector<std::map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>>::__append(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      int8x16_t v11 = &v4[3 * a2];
      uint64_t v12 = 24 * a2;
      uint64_t v13 = v4 + 1;
      do
      {
        void *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(24 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v14 = &v10[24 * v6];
  unint64_t v15 = &v10[24 * v9];
  uint64_t v16 = 24 * a2;
  unint64_t v17 = &v14[24 * a2];
  unint64_t v18 = v14 + 8;
  do
  {
    *unint64_t v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  unint64_t v20 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19) {
      return;
    }
    goto LABEL_31;
  }
  uint64_t v21 = 0;
  do
  {
    while (1)
    {
      unint64_t v22 = &v14[v21];
      *((void *)v22 - 3) = *(void *)&v19[v21 - 24];
      unint64_t v23 = &v19[v21 - 16];
      uint64_t v24 = *(void *)v23;
      *(void *)&v14[v21 - 16] = *(void *)v23;
      uint64_t v25 = (uint64_t)&v14[v21 - 16];
      uint64_t v26 = *(void *)&v19[v21 - 8];
      *((void *)v22 - 1) = v26;
      if (!v26) {
        break;
      }
      *(void *)(v24 + 16) = v25;
      *(void *)&v19[v21 - 24] = v23;
      *(void *)unint64_t v23 = 0;
      *(void *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20) {
        goto LABEL_25;
      }
    }
    *((void *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  uint64_t v27 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      BOOL v28 = v19 - 24;
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v19 - 24), *((void **)v19 - 2));
      unint64_t v19 = v28;
    }
    while (v28 != v27);
    unint64_t v19 = v27;
  }
  if (v19)
  {
LABEL_31:
    operator delete(v19);
  }
}

void std::vector<operations_research::sat::IntegerTrail::TrailEntry>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x666666666666666) {
      unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int8x16_t v11 = (char *)operator new(20 * v10);
    }
    else
    {
      int8x16_t v11 = 0;
    }
    uint64_t v13 = &v11[20 * v7];
    unint64_t v14 = &v11[20 * v10];
    size_t v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<operations_research::sat::IntegerLiteral>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 12 * a2 - 12;
      if (v13 < 0xC) {
        goto LABEL_36;
      }
      unint64_t v14 = v13 / 0xC + 1;
      unint64_t v6 = &v5[12 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
      size_t v15 = v5 + 16;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 4) = -1;
        *((_DWORD *)v15 - 1) = -1;
        *(void *)((char *)v15 - 12) = 0;
        *size_t v15 = 0;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          *(_DWORD *)unint64_t v6 = -1;
          *(void *)(v6 + 4) = 0;
          v6 += 12;
        }
        while (v6 != &v5[12 * a2]);
      }
      unint64_t v6 = &v5[12 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v12 = (char *)operator new(12 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    long long v17 = &v12[12 * v8];
    unint64_t v18 = &v17[12 * a2];
    unint64_t v19 = 12 * a2 - 12;
    unint64_t v20 = v17;
    if (v19 < 0xC) {
      goto LABEL_37;
    }
    unint64_t v21 = v19 / 0xC + 1;
    unint64_t v20 = &v17[12 * (v21 & 0x3FFFFFFFFFFFFFFELL)];
    unint64_t v22 = &v12[12 * v8 + 16];
    uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *((_DWORD *)v22 - 4) = -1;
      *((_DWORD *)v22 - 1) = -1;
      *(void *)(v22 - 12) = 0;
      *(void *)unint64_t v22 = 0;
      v22 += 24;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_37:
      do
      {
        *(_DWORD *)unint64_t v20 = -1;
        *(void *)(v20 + 4) = 0;
        v20 += 12;
      }
      while (v20 != v18);
    }
    uint64_t v24 = &v12[12 * v11];
    if (v5 != v7)
    {
      do
      {
        uint64_t v25 = *(void *)(v6 - 12);
        v6 -= 12;
        int v26 = *((_DWORD *)v6 + 2);
        *(void *)(v17 - 12) = v25;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v26;
      }
      while (v6 != v7);
    }
    uint64_t v27 = *a1;
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
      operator delete(v27);
    }
  }
}

void std::vector<operations_research::Domain>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1];
    uint64_t v6 = 24 * a2;
    size_t v12 = operator new(24 * a2);
    uint64_t v13 = (uint64_t)v12 + v5 - v3;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(v2, v5, v5, v3, v3, v13, v13);
    unint64_t v8 = (void **)*a1;
    unint64_t v7 = (void **)a1[1];
    *a1 = v9;
    a1[1] = v13;
    a1[2] = (uint64_t)v12 + v6;
    if (v7 != v8)
    {
      unint64_t v10 = v7;
      do
      {
        char v11 = *((unsigned char *)v10 - 24);
        v10 -= 3;
        if (v11) {
          operator delete(*(v7 - 2));
        }
        unint64_t v7 = v10;
      }
      while (v10 != v8);
    }
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_23CCF3EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  char v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (char *)operator new(v2 + 9 + 12 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = a1[2];
  a1[5] = (char *)(v9 - (void)v10);
  char v11 = a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)char v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    uint64_t v25 = a1[4];
    if (!v25) {
      return;
    }
LABEL_21:
    *((void *)v25 + 4) = v13 >> 3;
    *((void *)v25 + 2) = 0;
    return;
  }
  size_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v19 = &v5[12 * (void)v12];
      unint64_t v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v19));
      unint64_t v21 = *a1;
      unint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v23 = (v14 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v15 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v13 += v14;
      char v16 = v20 & 0x7F;
      v21[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      uint64_t v17 = *(void *)v19;
      uint64_t v18 = (uint64_t)&a1[1][12 * v15];
      *(_DWORD *)(v18 + 8) = *((_DWORD *)v19 + 2);
      *(void *)uint64_t v18 = v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  uint64_t v25 = a1[4];
  if (v25) {
    goto LABEL_21;
  }
}

void std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::__append(void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[1];
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (!a2)
    {
LABEL_20:
      a1[1] = v7;
      return;
    }
    uint64_t v13 = 32 * a2;
    uint64_t v14 = &v7[4 * a2];
    while (1)
    {
      uint64_t v15 = *(void *)(a3 + 24);
      if (v15)
      {
        if (v15 == a3)
        {
          void v7[3] = v7;
          (*(void (**)(void, void *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v7);
          goto LABEL_15;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
      }
      void v7[3] = v15;
LABEL_15:
      v7 += 4;
      v13 -= 32;
      if (!v13)
      {
        unint64_t v7 = v14;
        goto LABEL_20;
      }
    }
  }
  uint64_t v8 = ((char *)v7 - (unsigned char *)*a1) >> 5;
  if ((v8 + a2) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v6 - (unsigned char *)*a1;
  uint64_t v10 = v9 >> 4;
  if (v9 >> 4 <= v8 + a2) {
    uint64_t v10 = v8 + a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11)
  {
    if (v11 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    size_t v12 = 0;
  }
  char v16 = &v12[32 * v8];
  uint64_t v31 = v16;
  uint64_t v33 = &v12[32 * v11];
  uint64_t v17 = 32 * a2;
  uint64_t v18 = &v16[32 * a2];
  do
  {
    uint64_t v19 = *(void *)(a3 + 24);
    if (!v19) {
      goto LABEL_25;
    }
    if (v19 != a3)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
LABEL_25:
      *((void *)v16 + 3) = v19;
      goto LABEL_26;
    }
    *((void *)v16 + 3) = v16;
    (*(void (**)(void, char *))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v16);
LABEL_26:
    v16 += 32;
    v17 -= 32;
  }
  while (v17);
  uint64_t v32 = v18;
  unint64_t v21 = (char *)*a1;
  unint64_t v20 = (char *)a1[1];
  if (v20 == *a1)
  {
    *a1 = v31;
    a1[1] = v18;
    a1[2] = v33;
    goto LABEL_48;
  }
  unint64_t v22 = (char **)(v31 - 8);
  while (2)
  {
    unint64_t v24 = (char *)*((void *)v20 - 1);
    uint64_t v25 = v20 - 32;
    unint64_t v23 = v22;
    if (!v24) {
      goto LABEL_33;
    }
    if (v25 != v24)
    {
      *unint64_t v22 = v24;
      unint64_t v23 = (char **)(v20 - 8);
LABEL_33:
      char *v23 = 0;
      goto LABEL_34;
    }
    *unint64_t v22 = (char *)(v22 - 3);
    (*(void (**)(void))(**((void **)v20 - 1) + 24))(*((void *)v20 - 1));
LABEL_34:
    v22 -= 4;
    unint64_t v20 = v25;
    if (v25 != v21) {
      continue;
    }
    break;
  }
  int v26 = (char *)*a1;
  unint64_t v20 = (char *)a1[1];
  *a1 = v22 + 1;
  a1[1] = v32;
  a1[2] = v33;
  if (v20 != v26)
  {
    uint64_t v27 = v20 - 32;
    BOOL v28 = v20 - 32;
    do
    {
      uint64_t v30 = (char *)*((void *)v28 + 3);
      if (v28 == v30)
      {
        (*(void (**)(char *))(*(void *)v28 + 32))(v28);
      }
      else if (v30)
      {
        (*(void (**)(char *))(*(void *)v30 + 40))(v30);
      }
      v27 -= 32;
      BOOL v29 = v28 == v26;
      v28 -= 32;
    }
    while (!v29);
    unint64_t v20 = v26;
  }
LABEL_48:
  if (v20) {
    operator delete(v20);
  }
}

void sub_23CCF45A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23CCF45A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      *(void *)(a1 + 16) = i - 32;
      uint64_t v4 = *(void *)(i - 8);
      if (v4 != i - 32) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)(i - 32) + 32))(i - 32);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23CCF4908(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::vector<operations_research::sat::IntegerLiteral>::__insert_with_size[abi:ne180100]<operations_research::sat::IntegerLiteral const*,operations_research::sat::IntegerLiteral const*>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 12;
  unint64_t v7 = (char *)(*(void *)a1 + 12 * v6);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  size_t v12 = *(unsigned char **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2)) < a5)
  {
    unint64_t v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 2);
    if (v13 > 0x1555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v25 = &v17[12 * v6];
    uint64_t v26 = 12 * a5;
    uint64_t v27 = &v25[12 * a5];
    BOOL v28 = v25;
    do
    {
      *(void *)BOOL v28 = *(void *)v9;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v9 + 2);
      v28 += 12;
      v9 += 12;
      v26 -= 12;
    }
    while (v26);
    uint64_t v29 = 12 * v16;
    uint64_t v30 = *(char **)a1;
    uint64_t v31 = v25;
    if (*(char **)a1 != v7)
    {
      uint64_t v32 = v7;
      uint64_t v31 = v25;
      do
      {
        uint64_t v33 = *(void *)(v32 - 12);
        v32 -= 12;
        int v34 = *((_DWORD *)v32 + 2);
        *(void *)(v31 - 12) = v33;
        v31 -= 12;
        *((_DWORD *)v31 + 2) = v34;
      }
      while (v32 != v30);
      size_t v12 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v35 = &v17[v29];
    if (v12 != v7) {
      memmove(v27, v7, v12 - v7);
    }
    unint64_t v36 = *(char **)a1;
    *(void *)a1 = v31;
    *(void *)(a1 + 8) = &v27[v12 - v7];
    *(void *)(a1 + 16) = v35;
    if (v36) {
      operator delete(v36);
    }
    return v25;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 2)) >= a5)
  {
    uint64_t v18 = &__src[12 * a5];
    unint64_t v20 = *(char **)(a1 + 8);
LABEL_18:
    unint64_t v21 = &v7[12 * a5];
    unint64_t v22 = (unint64_t)&v20[-12 * a5];
    unint64_t v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      unint64_t v23 = v20;
      do
      {
        uint64_t v24 = *(void *)v22;
        *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
        *(void *)unint64_t v23 = v24;
        v23 += 12;
        v22 += 12;
      }
      while (v22 < (unint64_t)v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v7[12 * a5], v7, v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  uint64_t v18 = &__src[4 * ((v12 - v7) >> 2)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((v12 - v7) >> 2)], a4 - v18);
  }
  unint64_t v20 = &v12[v19];
  *(void *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 8 * v13) == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    uint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 8 * v13 + 4;
}

void sub_23CCF4CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>()
{
}

void sub_23CCF4D58(_Unwind_Exception *a1)
{
  void *v1 = &unk_26F0C2FE8;
  uint64_t v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  operations_research::sat::Model::MyNew<operations_research::sat::RevIntRepository>((uint64_t)v1);
  MEMORY[0x23ECF2BC0](v1, 0x10B1C404D499D86);
  _Unwind_Resume(a1);
}

void operations_research::sat::RevIntRepository::~RevIntRepository(operations_research::sat::RevIntRepository *this)
{
  *(void *)this = &unk_26F0C2FE8;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26F0C2FE8;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void operations_research::RevRepository<int>::SetLevel(void *a1, int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v3 = (std::vector<int> *)(a1 + 2);
  uint64_t v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    ++a1[1];
    unint64_t v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      std::vector<int>::value_type __x = (a1[6] - a1[5]) >> 4;
      unint64_t v12 = v6 >> 2;
      std::vector<int>::size_type v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12) {
          a1[3] = v4 + 4 * v7;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      uint64_t v8 = (int *)(v4 + 4 * a2);
      unint64_t v9 = *v8;
      unint64_t v10 = v6 >> 2;
      std::vector<int>::size_type v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10) {
          a1[3] = v8;
        }
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      uint64_t v14 = a1[5];
      unint64_t v15 = (a1[6] - v14) >> 4;
      for (int i = v15 - 1; i >= (int)v9; --i)
        **(_DWORD **)(v14 + 16 * i) = *(_DWORD *)(v14 + 16 * i + 8);
      if (v9 <= v15)
      {
        if (v9 < v15) {
          a1[6] = v14 + 16 * v9;
        }
      }
      else
      {
        std::vector<std::pair<int *,int>>::__append(a1 + 5, v9 - v15);
      }
    }
  }
}

void *operations_research::RevRepository<int>::~RevRepository(void *a1)
{
  *a1 = &unk_26F0C2FE8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void operations_research::RevRepository<int>::~RevRepository(void *a1)
{
  *a1 = &unk_26F0C2FE8;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::vector<std::pair<int *,int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_37;
      }
      uint64_t v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v6 = &v5[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v18 = v5 + 16;
      uint64_t v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((void *)v18 - 2) = 0;
        *(void *)uint64_t v18 = 0;
        *((_DWORD *)v18 - 2) = 0;
        *((_DWORD *)v18 + 2) = 0;
        v18 += 32;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *(void *)uint64_t v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      uint64_t v6 = &v5[16 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  unint64_t v7 = (char *)*a1;
  uint64_t v8 = (uint64_t)&v5[-*a1] >> 4;
  unint64_t v9 = v8 + a2;
  if ((v8 + a2) >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(16 * v11);
    uint64_t v13 = (uint64_t)&v12[16 * v8];
    uint64_t v14 = v13 + 16 * a2;
    uint64_t v15 = v13;
    uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16) {
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v20 = v16 + 1;
    uint64_t v15 = v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v21 = v13 + 16;
    uint64_t v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v21 - 16) = 0;
      *(void *)uint64_t v21 = 0;
      *(_DWORD *)(v21 - 8) = 0;
      *(_DWORD *)(v21 + 8) = 0;
      v21 += 32;
      v22 -= 2;
    }
    while (v22);
    if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  unint64_t v12 = 0;
  uint64_t v13 = 16 * v8;
  uint64_t v14 = 16 * v8 + 16 * a2;
  uint64_t v15 = 16 * v8;
  uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v16) {
    goto LABEL_21;
  }
  do
  {
LABEL_24:
    *(void *)uint64_t v15 = 0;
    *(_DWORD *)(v15 + 8) = 0;
    v15 += 16;
  }
  while (v15 != v14);
LABEL_25:
  unint64_t v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    uint64_t v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (!v25) {
      return;
    }
    goto LABEL_28;
  }
  do
  {
    uint64_t v24 = v13 - 16;
    *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
    v6 -= 16;
    v13 -= 16;
  }
  while (v6 != v7);
  uint64_t v25 = (void *)*a1;
  *a1 = v24;
  a1[1] = v14;
  a1[2] = (uint64_t)v23;
  if (v25)
  {
LABEL_28:
    operator delete(v25);
  }
}

void *operations_research::sat::Model::Delete<operations_research::sat::RevIntRepository>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3010;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::RevIntRepository>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C3010;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::vector<std::deque<int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(char **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(48 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[48 * v7];
    uint64_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_22;
    }
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = &v13[v17];
      uint64_t v19 = &v5[v17];
      *((void *)v18 - 6) = *(void *)&v5[v17 - 48];
      *((void *)v18 - 5) = *(void *)&v5[v17 - 40];
      *((void *)v18 - 4) = *(void *)&v5[v17 - 32];
      *((void *)v18 - 3) = *(void *)&v5[v17 - 24];
      *((_OWORD *)v19 - 3) = 0uLL;
      *((_OWORD *)v19 - 2) = 0uLL;
      *((void *)v18 - 2) = *(void *)&v5[v17 - 16];
      *((void *)v18 - 1) = *(void *)&v5[v17 - 8];
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      v17 -= 48;
    }
    while (&v5[v17] != v6);
    uint64_t v20 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    *(void *)a1 = &v13[v17];
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v20)
    {
      do
      {
        v5 -= 48;
        std::deque<int>::~deque[abi:ne180100]((uint64_t)v5);
      }
      while (v5 != v20);
      uint64_t v5 = v20;
    }
    if (v5)
    {
LABEL_22:
      operator delete(v5);
    }
  }
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::~__func()
{
}

void *std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_26F0C3048;
  return result;
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C3048;
}

void std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v2);
  uint64_t v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v2);
  uint64_t v6 = *(int *)(v3 + 304);
  uint64_t v66 = 0;
  uint64_t v58 = v2;
  if (v6)
  {
    if ((v6 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = v5;
    unint64_t v8 = (int *)operator new(4 * v6);
    uint64_t v9 = 0;
    unint64_t v10 = &v8[v6];
    uint64_t v61 = v6;
    uint64_t v62 = (void *)(v7 + 56);
    unint64_t v11 = v8;
    size_t v12 = v8;
    uint64_t v65 = v4;
    uint64_t v59 = v7;
    uint64_t v60 = v3;
    while (1)
    {
      uint64_t v64 = v9;
      uint64_t v13 = *(int *)(*(void *)(v3 + 312) + 8 * v9 + 4);
      uint64_t v14 = *(void *)(v7 + 88);
      unint64_t v15 = (unint64_t)(*(void *)(v7 + 96) - v14) >> 5;
      uint64_t v16 = (void *)(v14 + 32 * v13);
      int v63 = v13;
      if ((int)v13 >= (int)v15) {
        uint64_t v17 = v62;
      }
      else {
        uint64_t v17 = v16;
      }
      unint64_t v20 = *v17;
      uint64_t v19 = (int *)(v17 + 1);
      unint64_t v18 = v20;
      if (v20) {
        uint64_t v19 = *(int **)v19;
      }
      if (v18 < 2)
      {
        uint64_t v21 = v64;
        goto LABEL_49;
      }
      uint64_t v22 = &v19[3 * (v18 >> 1)];
      char v23 = 1;
      do
      {
        unint64_t v24 = *(int *)(*(void *)(v4 + 408) + 4 * *v19);
        if (v24 == -1
          || ((*(void *)(*(void *)(*(void *)(v4 + 936) + 24) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        {
          goto LABEL_16;
        }
        int v25 = v24 ^ 1;
        if (v11 < v10)
        {
          char v23 = 0;
          *v11++ = v25;
          unint64_t v8 = v11;
          goto LABEL_16;
        }
        uint64_t v26 = v11 - v12;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v10 - (char *)v12) >> 1 > v27) {
          unint64_t v27 = ((char *)v10 - (char *)v12) >> 1;
        }
        if ((unint64_t)((char *)v10 - (char *)v12) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v29 = operator new(4 * v28);
          uint64_t v30 = (int *)&v29[4 * v26];
          int *v30 = v25;
          unint64_t v8 = v30 + 1;
          if (v11 == v12) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = (int *)(4 * v26);
          *(_DWORD *)(4 * v26) = v25;
          unint64_t v8 = (int *)(4 * v26 + 4);
          if (v11 == v12) {
            goto LABEL_34;
          }
        }
        unint64_t v31 = (char *)(v11 - 1) - (char *)v12;
        if (v31 < 0xBC)
        {
          uint64_t v32 = v11;
          goto LABEL_33;
        }
        if (&v29[(char *)v11 - (char *)v12 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[(char *)v11 - (char *)v12 - 4])
        {
          uint64_t v32 = v11;
          do
          {
LABEL_33:
            int v33 = *--v32;
            *--uint64_t v30 = v33;
          }
          while (v32 != v12);
          goto LABEL_34;
        }
        if ((int *)((char *)v11 - (v31 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v11 - 1)
        {
          uint64_t v32 = v11;
          goto LABEL_33;
        }
        if ((unint64_t)((char *)v12 - v29) < 0x20)
        {
          uint64_t v32 = v11;
          goto LABEL_33;
        }
        uint64_t v35 = (v31 >> 2) + 1;
        uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v32 = &v11[v36 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v30 = (int *)((char *)v30 - v36);
        int v37 = &v29[4 * v26 - 16];
        uint64_t v38 = v11 - 4;
        uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *int v37 = v40;
          v37 -= 2;
          v38 -= 8;
          v39 -= 8;
        }
        while (v39);
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
LABEL_34:
        unint64_t v10 = (int *)&v29[4 * v28];
        if (v12)
        {
          int v34 = v8;
          operator delete(v12);
          unint64_t v8 = v34;
          char v23 = 0;
          unint64_t v11 = v34;
        }
        else
        {
          char v23 = 0;
          unint64_t v11 = v8;
        }
        size_t v12 = v30;
        uint64_t v4 = v65;
LABEL_16:
        v19 += 3;
      }
      while (v19 != v22);
      uint64_t v66 = v8;
      uint64_t v7 = v59;
      uint64_t v3 = v60;
      uint64_t v21 = v64;
      if (v23)
      {
LABEL_49:
        int v41 = v63 ^ 1;
        if (v11 < v10)
        {
          int *v11 = v41;
          unint64_t v8 = v11 + 1;
        }
        else
        {
          uint64_t v42 = v11 - v12;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v12) >> 1 > v43) {
            unint64_t v43 = ((char *)v10 - (char *)v12) >> 1;
          }
          if ((unint64_t)((char *)v10 - (char *)v12) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            if (v44 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v45 = operator new(4 * v44);
            uint64_t v46 = (int *)&v45[4 * v42];
            *uint64_t v46 = v41;
            unint64_t v8 = v46 + 1;
            if (v11 != v12)
            {
LABEL_59:
              unint64_t v47 = (char *)(v11 - 1) - (char *)v12;
              if (v47 < 0xBC
                || &v45[(char *)v11 - (char *)v12 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[(char *)v11
                                                                                           - (char *)v12
                                                                                           - 4]
                || (int *)((char *)v11 - (v47 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v11 - 1
                || (unint64_t)((char *)v12 - v45) < 0x20)
              {
                BOOL v48 = v11;
                uint64_t v4 = v65;
              }
              else
              {
                uint64_t v51 = (v47 >> 2) + 1;
                uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
                BOOL v48 = &v11[v52 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v46 = (int *)((char *)v46 - v52);
                uint64_t v53 = &v45[4 * v42 - 16];
                int v54 = v11 - 4;
                uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
                uint64_t v4 = v65;
                do
                {
                  long long v56 = *(_OWORD *)v54;
                  *(v53 - 1) = *((_OWORD *)v54 - 1);
                  *uint64_t v53 = v56;
                  v53 -= 2;
                  v54 -= 8;
                  v55 -= 8;
                }
                while (v55);
                if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_62:
                  unint64_t v10 = (int *)&v45[4 * v44];
                  if (v12) {
                    goto LABEL_63;
                  }
                  goto LABEL_64;
                }
              }
              do
              {
                int v49 = *--v48;
                *--uint64_t v46 = v49;
              }
              while (v48 != v12);
              goto LABEL_62;
            }
          }
          else
          {
            uint64_t v45 = 0;
            uint64_t v46 = (int *)(4 * v42);
            *(_DWORD *)(4 * v42) = v41;
            unint64_t v8 = (int *)(4 * v42 + 4);
            if (v11 != v12) {
              goto LABEL_59;
            }
          }
          uint64_t v4 = v65;
          unint64_t v10 = (int *)&v45[4 * v44];
          if (v12)
          {
LABEL_63:
            uint64_t v50 = v8;
            operator delete(v12);
            unint64_t v8 = v50;
          }
LABEL_64:
          size_t v12 = v46;
          uint64_t v21 = v64;
        }
        uint64_t v66 = v8;
        unint64_t v11 = v8;
      }
      uint64_t v9 = v21 + 1;
      if (v9 == v61) {
        goto LABEL_76;
      }
    }
  }
  size_t v12 = 0;
LABEL_76:
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v3, 0);
  uint64_t v67 = (void (**)(void **))&unk_26F0BD480;
  v68[0] = v12;
  v68[1] = (int *)(v66 - v12);
  uint64_t v69 = (void **)&v67;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v68, v58);
  if (v69 == (void **)&v67)
  {
    v67[4]((void **)&v67);
    uint64_t v57 = v12;
    if (v12) {
LABEL_80:
    }
      operator delete(v57);
  }
  else
  {
    if (v69) {
      (*((void (**)(void))*v69 + 5))();
    }
    uint64_t v57 = v12;
    if (v12) {
      goto LABEL_80;
    }
  }
}

void sub_23CCF5C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23 == v23)
  {
    (*(void (**)(uint64_t *))(a20 + 32))(&a20);
  }
  else if (a23)
  {
    (*(void (**)(void))(*(void *)a23 + 40))();
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat56ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrackEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0,std::allocator<operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(void)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::IntegerSumLE::IntegerSumLE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_26F0C30C8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v13 = *(_DWORD **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  int64_t v14 = v12 - *(void *)a2;
  if (v12 != *(void *)a2)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = (char *)operator new(v12 - *(void *)a2);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v15;
    uint64_t v16 = &v15[4 * (v14 >> 2)];
    *(void *)(a1 + 24) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 16) = v16;
  }
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a6);
  *(void *)(a1 + 48) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a6);
  *(void *)(a1 + 56) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a6);
  uint64_t v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntegerValueRepository>(a6);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = v17;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 73) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v19 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  int64_t v20 = v18 - *(void *)a3;
  if (v18 == *(void *)a3)
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    if (v20 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = (char *)operator new(v18 - *(void *)a3);
    *(void *)(a1 + 88) = v21;
    *(void *)(a1 + 96) = v21;
    uint64_t v22 = &v21[4 * (v20 >> 2)];
    *(void *)(a1 + 104) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 96) = v22;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v23 = *(const void **)a4;
  int64_t v24 = *(void *)(a4 + 8) - *(void *)a4;
  if (v24)
  {
    if (v24 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    int v25 = (char *)operator new(v24);
    *(void *)(a1 + 112) = v25;
    *(void *)(a1 + 120) = v25;
    uint64_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a1 + 128) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a1 + 120) = v26;
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v58 = (void **)(a1 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (v21 == v22)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/integer_expr.cc", 44);
    uint64_t v57 = (void *)google::LogMessage::stream((google::LogMessage *)v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: !vars_.empty() ", 29);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
  }
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 136, (v22 - v21) >> 2);
  uint64_t v27 = *(void *)(a3 + 8);
  uint64_t v28 = v27 - *(void *)a3;
  if (v27 != *(void *)a3)
  {
    uint64_t v29 = 0;
    unint64_t v30 = v28 >> 2;
    uint64_t v31 = *(void *)(a1 + 112);
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    do
    {
      uint64_t v32 = *(void *)(v31 + 8 * v29);
      if (v32 < 0)
      {
        *(_DWORD *)(*(void *)(a1 + 88) + 4 * v29) ^= 1u;
        *(void *)(v31 + 8 * v29) = -v32;
      }
      ++v29;
    }
    while (v30 != v29);
  }
  int v33 = *(_DWORD **)a2;
  int v34 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v34)
  {
    uint64_t v35 = *(char **)(a1 + 168);
    while (1)
    {
      int v37 = *v33 ^ 1;
      unint64_t v38 = *(void *)(a1 + 176);
      if ((unint64_t)v35 >= v38) {
        break;
      }
      *(_DWORD *)uint64_t v35 = v37;
      uint64_t v36 = (uint64_t)(v35 + 4);
LABEL_22:
      *(void *)(a1 + 168) = v36;
      ++v33;
      uint64_t v35 = (char *)v36;
      if (v33 == v34) {
        goto LABEL_50;
      }
    }
    uint64_t v39 = (char *)*v58;
    uint64_t v40 = v35 - (unsigned char *)*v58;
    uint64_t v41 = v40 >> 2;
    unint64_t v42 = (v40 >> 2) + 1;
    if (v42 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = v38 - (void)v39;
    if (v43 >> 1 > v42) {
      unint64_t v42 = v43 >> 1;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v45 = operator new(4 * v44);
      uint64_t v46 = (int *)&v45[4 * v41];
      *uint64_t v46 = v37;
      uint64_t v36 = (uint64_t)(v46 + 1);
      if (v35 == v39) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = (int *)(4 * v41);
      *(_DWORD *)(4 * v41) = v37;
      uint64_t v36 = 4 * v41 + 4;
      if (v35 == v39) {
        goto LABEL_38;
      }
    }
    unint64_t v47 = v35 - 4 - v39;
    if (v47 >= 0xBC)
    {
      if (&v45[v40 - 4 - (v47 & 0xFFFFFFFFFFFFFFFCLL)] > &v45[v40 - 4])
      {
        BOOL v48 = v35;
      }
      else if (&v35[-(v47 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v35 - 4)
      {
        BOOL v48 = v35;
      }
      else if ((unint64_t)(v35 - &v45[v40]) >= 0x20)
      {
        uint64_t v50 = (v47 >> 2) + 1;
        uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        BOOL v48 = &v35[-v51];
        uint64_t v46 = (int *)((char *)v46 - v51);
        uint64_t v52 = &v45[4 * v41 - 16];
        uint64_t v53 = v35 - 16;
        uint64_t v54 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *uint64_t v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 8;
        }
        while (v54);
        if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          *(void *)(a1 + 160) = v46;
          *(void *)(a1 + 168) = v36;
          *(void *)(a1 + 176) = &v45[4 * v44];
          if (v39) {
            operator delete(v39);
          }
          goto LABEL_22;
        }
      }
      else
      {
        BOOL v48 = v35;
      }
    }
    else
    {
      BOOL v48 = v35;
    }
    do
    {
      int v49 = *((_DWORD *)v48 - 1);
      v48 -= 4;
      *--uint64_t v46 = v49;
    }
    while (v48 != v39);
    goto LABEL_38;
  }
LABEL_50:
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 73) = 0;
  return a1;
}

void sub_23CCF61A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, char a15)
{
  uint64_t v18 = (void *)v15[26];
  if (v18)
  {
    v15[27] = v18;
    operator delete(v18);
    uint64_t v19 = (void *)v15[23];
    if (!v19)
    {
LABEL_3:
      int64_t v20 = *a14;
      if (!*a14) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v19 = (void *)v15[23];
    if (!v19) {
      goto LABEL_3;
    }
  }
  v15[24] = v19;
  operator delete(v19);
  int64_t v20 = *a14;
  if (!*a14)
  {
LABEL_4:
    uint64_t v21 = *a11;
    if (!*a11) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  v15[21] = v20;
  operator delete(v20);
  uint64_t v21 = *a11;
  if (!*a11)
  {
LABEL_5:
    uint64_t v22 = *a12;
    if (!*a12) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v15[18] = v21;
  operator delete(v21);
  uint64_t v22 = *a12;
  if (!*a12)
  {
LABEL_6:
    uint64_t v23 = *a13;
    if (!*a13) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  v15[15] = v22;
  operator delete(v22);
  uint64_t v23 = *a13;
  if (!*a13)
  {
LABEL_8:
    int64_t v24 = *v16;
    if (*v16)
    {
      v15[2] = v24;
      operator delete(v24);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  unsigned char v15[12] = v23;
  operator delete(v23);
  goto LABEL_8;
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::RevIntegerValueRepository>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::RevIntegerValueRepository>(void)::d)
  {
LABEL_12:
    operations_research::sat::Model::MyNew<operations_research::sat::RevIntegerValueRepository>();
  }
  return v2[5];
}