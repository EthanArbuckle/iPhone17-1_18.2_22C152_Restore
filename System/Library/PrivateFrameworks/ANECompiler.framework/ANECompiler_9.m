void sub_21114496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchOrChannelSplit::TryBatchSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = ZinMirBatchOrChannelSplit::TryDRAMBatchSplit(a1, a2, a3);
  if (!result)
  {
    return ZinMirBatchOrChannelSplit::TryL2BatchSplit(a1, a2, a3);
  }
  return result;
}

uint64_t ZinMirBatchOrChannelSplit::TryL2ChannelSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), __p);
  unint64_t v6 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6 != 4) {
    goto LABEL_7;
  }
  v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0) {
    v7 = __p;
  }
  if (*(_DWORD *)v7 != 1869903201)
  {
LABEL_7:
    ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), &v18);
    uint64_t v8 = v20;
    if ((v20 & 0x80u) != 0) {
      uint64_t v8 = v19;
    }
    if (v8 == 6)
    {
      v9 = v18;
      if ((v20 & 0x80u) == 0) {
        v9 = (void **)&v18;
      }
      int v10 = *(_DWORD *)v9;
      int v11 = *((unsigned __int16 *)v9 + 2);
      BOOL v13 = v10 != 1869440365 || v11 != 31090;
      if (((char)v20 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v17 & 0x80) == 0) {
          goto LABEL_23;
        }
LABEL_26:
        operator delete(__p[0]);
        if (!v13) {
          return 0;
        }
        goto LABEL_27;
      }
    }
    else
    {
      BOOL v13 = 1;
      if (((char)v20 & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    operator delete(v18);
    goto LABEL_22;
  }
  BOOL v13 = 0;
  if ((v17 & 0x80) != 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (!v13) {
    return 0;
  }
LABEL_27:
  *(_DWORD *)((char *)&v18 + 3) = 256;
  LODWORD(v18) = 0;
  HIBYTE(v18) = 1;
  LODWORD(v19) = 0;
  ZinMirBatchOrChannelSplitter::ZinMirBatchOrChannelSplitter((ZinMirGraphSplitterBase *)__p, a1, a2, a3, (uint64_t)&v18);
  int v14 = ZinMirBatchOrChannelSplitter::Tile((ZinMirBatchOrChannelSplitter *)__p);
  ZinMirBatchOrChannelSplitter::~ZinMirBatchOrChannelSplitter((ZinIrControlFlowGraph **)__p);
  if (v14) {
    return 3;
  }
  return 0;
}

void sub_211144B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x11A7B9611A7B961) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x34F72C234F72C235 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x8D3DCB08D3DCB0) {
    unint64_t v9 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v11 = &v10[232 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[232 * v9];
  *int v11 = 0;
  v11[224] = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    std::construct_at[abi:ne180100]<TiledLayerTensorRegions,TiledLayerTensorRegions,TiledLayerTensorRegions*>((uint64_t)v11, a2);
    v11[224] = 1;
  }
  v14[2] = v11 + 232;
  std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_211144CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 296;
        std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(uint64_t a1)
{
  v2 = (void **)(a1 + 152);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 216);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 176);
  uint64_t v3 = v2;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 120, *(void **)(a1 + 128));
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 72, *(void **)(a1 + 80));
  std::__list_imp<ZinIrSection *>::clear((void *)(a1 + 48));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(void **)(a1 + 8));
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x34F72C234F72C235 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x11A7B9611A7B962) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 232 * v6;
    std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_211144E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::optional<TiledLayerTensorRegions>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_211144F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::optional<TiledLayerTensorRegions>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)(a4 + v7), (const TiledLayerTensorRegions *)(a2 + v7));
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_211144FDC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 232;
    do
    {
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](v4 + v2);
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      unint64_t v8 = v3;
      std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unsigned __int8 v17 = &v16[v14];
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer(&v15);
  }
}

void sub_2111451FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::reverse_iterator<std::vector<std::optional<TiledLayerTensorRegions>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0x34F72C234F72C235 * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::optional<TiledLayerTensorRegions>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 232 * a2;
    while (result != v7)
      uint64_t result = std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](result - 232);
    a1[1] = v7;
  }
  return result;
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(unsigned char **)(result - 8);
  if (0x34F72C234F72C235 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      long long v13 = &v7[232 * a2];
      do
      {
        *uint64_t v7 = 0;
        v7[224] = 0;
        v7 += 232;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x34F72C234F72C235 * ((uint64_t)&v7[-*a1] >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x11A7B9611A7B961) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x8D3DCB08D3DCB0) {
      unint64_t v11 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>>(result, v11);
    }
    else {
      char v12 = 0;
    }
    long long v14 = &v12[232 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[232 * v11];
    v15 = &v14[232 * a2];
    do
    {
      *long long v14 = 0;
      v14[224] = 0;
      v14 += 232;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::optional<TiledLayerTensorRegions>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_211145614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::optional<TiledLayerTensorRegions>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_211145690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  __n128 result = *(__n128 *)a2;
  long long v8 = *(_OWORD *)(a2 + 16);
  v6[1] = *(_OWORD *)a2;
  v6[2] = v8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * result.n128_u32[0] + 8) ^ HIDWORD(result.n128_u64[0]));
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (HIDWORD(result.n128_u64[0]) ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(result.n128_u64[0]) ^ (v9 >> 47) ^ v9)) >> 47));
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v4 = (void *)Subgraph::Subgraph(a1, a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  *(_OWORD *)(v4 + 19) = *(_OWORD *)(a2 + 152);
  v4[21] = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v4 + 22), (uint64_t *)(a2 + 176));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 216, (uint64_t *)(a2 + 216));
  long long v5 = *(_OWORD *)(a2 + 256);
  long long v6 = *(_OWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  return a1;
}

{
  void *v4;
  long long v5;
  long long v6;

  Subgraph::Subgraph((Subgraph *)a1, (const Subgraph *)a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v4 + 19, *(uint64_t **)(a2 + 152), *(uint64_t **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map(a1 + 176, a2 + 176);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set(a1 + 216, a2 + 216);
  long long v5 = *(_OWORD *)(a2 + 256);
  long long v6 = *(_OWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  return a1;
}

uint64_t std::vector<std::pair<Subgraph,SplitInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 296;
    uint64_t result = std::pair<Subgraph,SplitInfo>::pair[abi:ne180100](result - 296, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<Subgraph,SplitInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 296;
    std::__destroy_at[abi:ne180100]<std::pair<Subgraph,SplitInfo>,0>(i - 296);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<Subgraph,SplitInfo>::pair[abi:ne180100]<Subgraph,SplitInfo,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)Subgraph::Subgraph(a1, a2);
  v5[19] = 0;
  v5[20] = 0;
  v5[21] = 0;
  *(_OWORD *)(v5 + 19) = *(_OWORD *)a3;
  v5[21] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v5 + 22), (uint64_t *)(a3 + 24));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 216, (uint64_t *)(a3 + 64));
  long long v6 = *(_OWORD *)(a3 + 104);
  long long v7 = *(_OWORD *)(a3 + 120);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a3 + 136);
  *(_OWORD *)(a1 + 256) = v6;
  *(_OWORD *)(a1 + 272) = v7;
  return a1;
}

void std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::__destroy_at[abi:ne180100]<Subgraph,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C322FE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C322FE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  if (!**(unsigned char **)(a1 + 8))
  {
    uint64_t v4 = *a3;
    memset(v27, 0, sizeof(v27));
    if (ZinIrOpLayer::IsANELayer(v4))
    {
      uint64_t v5 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v4 + 32))(v4, 0, 0);
      ZinIrTensor::GetTensorSizeInBytes(v5);
      if (**(float **)(a1 + 16) < (float)v6)
      {
        int v7 = **(_DWORD **)(a1 + 24);
        if (*(_DWORD *)(*((void *)v4 + 8) + 8) == 85) {
          int v8 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v4 + 120))(v4);
        }
        else {
          int v8 = 0;
        }
        uint64_t v9 = (ZinReshapeLayer **)*((void *)v4 + 11);
        BOOL v10 = *((void *)v4 + 12) - (void)v9 >= 9uLL && v8 == 0;
        if (!v10 && *((void *)v4 + 15) - *((void *)v4 + 14) <= 8uLL)
        {
          while (1)
          {
            unint64_t v11 = *v9;
            if (*(_DWORD *)(*((void *)*v9 + 8) + 8) != 37)
            {
LABEL_15:
              char v13 = 0;
              goto LABEL_17;
            }
            uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v11);
            if (ZinIrTransposeInfo::HasDimension(ReshapeInfo, v7)) {
              break;
            }
            uint64_t v9 = (ZinReshapeLayer **)*((void *)v11 + 11);
            if (*((void *)v11 + 12) - (void)v9 >= 9uLL) {
              goto LABEL_15;
            }
          }
          char v13 = 1;
LABEL_17:
          long long v14 = (ZinReshapeLayer **)*((void *)v4 + 14);
          do
          {
            v15 = *v14;
            if (*(_DWORD *)(*((void *)*v14 + 8) + 8) != 37) {
              break;
            }
            uint64_t v16 = ZinReshapeLayer::GetReshapeInfo(v15);
            if (ZinIrTransposeInfo::HasDimension(v16, v7))
            {
              if (v13) {
                goto LABEL_34;
              }
              break;
            }
            long long v14 = (ZinReshapeLayer **)*((void *)v15 + 14);
          }
          while (*((void *)v15 + 15) - (void)v14 <= 8uLL);
        }
        if (BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(v4, **(unsigned char **)(a1 + 32) == 0, **(unsigned char **)(a1 + 32), **(_DWORD **)(a1 + 24), 0, (uint64_t)v27))
        {
          __dst = 0;
          v25 = 0;
          uint64_t v26 = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__dst, *((const void **)v4 + 11), *((void *)v4 + 12), (uint64_t)(*((void *)v4 + 12) - *((void *)v4 + 11)) >> 3);
          std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&__dst, (uint64_t)__dst, *((char **)v4 + 14), *((char **)v4 + 15), (uint64_t)(*((void *)v4 + 15) - *((void *)v4 + 14)) >> 3);
          unsigned __int8 v17 = (ZinIrOpLayer **)__dst;
          v18 = v25;
          if (__dst != v25)
          {
            unsigned __int8 v20 = *(int **)(a1 + 24);
            uint64_t v19 = *(char **)(a1 + 32);
            while (1)
            {
              v21 = *v17;
              memset(__p, 0, sizeof(__p));
              int IsLayerSplittable = BatchOrChannelSplitPressureBasedSubgraphIdentification::IsLayerSplittable(v21, *v19 == 0, *v19, *v20, 0, (uint64_t)__p);
              if (__p[0]) {
                operator delete(__p[0]);
              }
              if (IsLayerSplittable) {
                break;
              }
              if (++v17 == v18) {
                goto LABEL_32;
              }
            }
            **(unsigned char **)(a1 + 8) = 1;
          }
LABEL_32:
          if (__dst)
          {
            v25 = (ZinIrOpLayer **)__dst;
            operator delete(__dst);
          }
        }
      }
    }
LABEL_34:
    if (v27[0]) {
      operator delete(v27[0]);
    }
  }
  return 0;
}

void sub_211145CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::IsQualifiedForSplit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,ZinIrBasicBlock *&,std::vector<std::pair<Subgraph,SplitInfo>>>(uint64_t **a1, unint64_t *a2, void *a3, uint64_t a4)
{
  int v8 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        int v7 = *v10;
        int v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      int v7 = v10[1];
      if (!v7)
      {
        int v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v10 = a1 + 1;
LABEL_10:
    char v12 = (char *)operator new(0x40uLL);
    *((void *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

void std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<std::pair<Subgraph,SplitInfo>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C323040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C323040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  return ZinMirBatchOrChannelSplitter::AnalysisPerBasicBlock(*(ZinMirGraphSplitterBase **)(a1 + 8), *a2, *(unsigned int (****)(void, uint64_t *, uint64_t *, uint64_t, uint64_t))(a1 + 16), *(uint64_t ***)(a1 + 24), 0, 0);
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_0,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

void std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C323098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C323098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()(uint64_t a1, ZinIrTarget **a2)
{
  return 0;
}

uint64_t std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirBatchOrChannelSplitter::Tile(void)::$_1,std::allocator<ZinMirBatchOrChannelSplitter::Tile(void)::$_1>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t **ZinIrPaletteInfo::ZinIrPaletteInfo(uint64_t **a1, void **a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::shared_ptr<ZinIrConstData>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData>*,std::shared_ptr<ZinIrConstData>*>(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  a1[3] = a3;
  if (!a3 || (v5 = *a1, uint64_t v6 = a1[1], *a1 == v6)) {
    ZinAssertImpl("Error: palette info has empty palette data");
  }
  do
  {
    uint64_t v7 = *v5;
    int v8 = (std::__shared_weak_count *)v5[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v7) {
        goto LABEL_9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    else if (!v7)
    {
LABEL_9:
      ZinAssertImpl("Invalid palettized LUT const data.");
    }
    v5 += 2;
  }
  while (v5 != v6);
  return a1;
}

void sub_2111461BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::CreateWeightDataBitStream@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 7:
    case 8:
    case 9:
    case 10:
      operator new();
    case 11:
    case 12:
    case 13:
    case 14:
      operator new();
    case 15:
    case 16:
    case 17:
    case 18:
      operator new();
    case 19:
    case 20:
    case 21:
    case 22:
      operator new();
    case 23:
    case 24:
    case 25:
    case 26:
      operator new();
    default:
      uint64_t result = 0;
      *a2 = 0;
      return result;
  }
}

void *ZinIrWeight::ZinIrWeight(void *a1, uint64_t *a2, void *a3, int a4, int64x2_t *a5, int a6, char a7)
{
  BOOL v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  long long v14 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinIrWeightBase::ZinIrWeightBase((uint64_t)a1, &v13, a4, a5, 0, a6, a7);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *a1 = &unk_26C343C78;
  uint64_t v11 = a3[1];
  a1[35] = *a3;
  a1[36] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (!*a2) {
    ZinAssertImpl("ZinIrWeight received invalid underlying data", v13);
  }
  return a1;
}

void sub_211146468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v12 = *(std::__shared_weak_count **)(v10 + 288);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  ZinIrWeightBase::~ZinIrWeightBase((void **)v10);
  _Unwind_Resume(a1);
}

void ZinIrWeightBase::~ZinIrWeightBase(void **this)
{
  *this = &unk_26C348E90;
  uint64_t v2 = this + 20;
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  uint64_t v4 = v2;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (std::__shared_weak_count *)this[18];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *ZinIrWeight::ZinIrWeight(void *a1, void *a2, int a3, int64x2_t *a4, int a5, char a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  ZinIrWeightBase::ZinIrWeightBase((uint64_t)a1, &v10, a3, a4, 0, a5, a6);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *a1 = &unk_26C343C78;
  uint64_t v8 = a2[1];
  a1[35] = *a2;
  a1[36] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_21114659C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::CreateAlias()
{
}

void sub_211146778(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreatePartial()
{
}

void sub_211146964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::GetPaletteVectorSize(ZinIrWeight *this)
{
  uint64_t v1 = *((void *)this + 35);
  if (v1 && (*((_DWORD *)this + 2) - 7) <= 0x14) {
    return *(void *)(v1 + 24);
  }
  else {
    return 1;
  }
}

void ZinIrWeight::RemapByType(ZinIrWeight *this@<X0>, const ZinTensorDimensions *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 35);
  int v5 = *((_DWORD *)this + 2);
  if (v4) {
    BOOL v6 = (v5 - 7) > 0x14;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v4[3] >= 2uLL)
    {
      BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v7) {
        ZinIrWeight::RemapByType(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      *a3 = 0;
      return;
    }
    if (v4[1] - *v4 >= 0x11uLL) {
      ZinAssertImpl("Remapping is not supported for per-channel palettized kernels yet", a2);
    }
  }
  switch(v5)
  {
    case 1:
      ZinIrWeightBase::RemapData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 2:
    case 27:
      ZinIrWeightBase::RemapData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 4:
      ZinIrWeightBase::RemapData<std::vector<half>,ZinIrConstData_specialization<half>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 5:
      ZinIrWeightBase::RemapData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 6:
      ZinIrWeightBase::RemapData<std::vector<float>,ZinIrConstData_specialization<float>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 7:
    case 8:
    case 9:
    case 10:
      ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 11:
    case 12:
    case 13:
    case 14:
      ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 19:
    case 20:
    case 21:
    case 22:
      ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
      goto LABEL_24;
    case 23:
    case 24:
    case 25:
    case 26:
      ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a2, &v24);
LABEL_24:
      v23 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      if ((void)v24) {
        operator new();
      }
      return;
    default:
      BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v15) {
        ZinIrWeight::RemapByType(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      v23 = 0;
      break;
  }
  *a3 = 0;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_211146C10(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  MEMORY[0x21667D3C0](v2, 0x10B3C4034FA82A5);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeightBase::RemapData<std::vector<float>,ZinIrConstData_specialization<float>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<float>::reserve(&__p, *(void *)(a1 + 64) * *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v5 * v4;
    uint64_t v9 = *(void *)(a1 + 64);
    do
    {
      if (v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v7 / v8 + a2[1] * (v7 % v8);
        do
        {
          *(void *)&long long v26 = v11;
          *((void *)&v26 + 1) = v10;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v27 = 0;
          ZinIrWeightBase::GetAt<float>(a1);
          int v13 = v12;
          uint64_t v14 = v31;
          if (v31 >= v32)
          {
            uint64_t v16 = (char *)__p;
            uint64_t v17 = (v31 - (unsigned char *)__p) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = v32 - (unsigned char *)__p;
            if ((v32 - (unsigned char *)__p) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v32, v20);
              uint64_t v16 = (char *)__p;
              uint64_t v14 = v31;
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[4 * v17];
            *(_DWORD *)uint64_t v22 = v13;
            BOOL v15 = v22 + 4;
            while (v14 != v16)
            {
              int v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            __p = v22;
            v31 = v15;
            v32 = &v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(_DWORD *)v31 = v12;
            BOOL v15 = v14 + 4;
          }
          v31 = v15;
          ++v10;
          uint64_t v9 = *(void *)(a1 + 64);
        }
        while (v10 < v9);
        uint64_t v6 = *(void *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v26);
  *a3 = v26;
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211146E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<half>,ZinIrConstData_specialization<half>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<half>::reserve(&__p, *(void *)(a1 + 64) * *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v5 * v4;
    uint64_t v9 = *(void *)(a1 + 64);
    do
    {
      if (v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v7 / v8 + a2[1] * (v7 % v8);
        do
        {
          *(void *)&long long v26 = v11;
          *((void *)&v26 + 1) = v10;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v27 = 0;
          ZinIrWeightBase::GetAt<half>(a1);
          __int16 v13 = v12;
          uint64_t v14 = v31;
          if (v31 >= v32)
          {
            uint64_t v16 = (char *)__p;
            uint64_t v17 = v31 - (unsigned char *)__p;
            if (v31 - (unsigned char *)__p <= -3) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = v17 >> 1;
            if (v32 - (unsigned char *)__p <= (unint64_t)((v17 >> 1) + 1)) {
              uint64_t v19 = v18 + 1;
            }
            else {
              uint64_t v19 = v32 - (unsigned char *)__p;
            }
            if ((unint64_t)(v32 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v20 = v19;
            }
            if (v20)
            {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v32, v20);
              uint64_t v16 = (char *)__p;
              uint64_t v14 = v31;
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[2 * v18];
            *(_WORD *)uint64_t v22 = v13;
            BOOL v15 = v22 + 2;
            while (v14 != v16)
            {
              __int16 v23 = *((_WORD *)v14 - 1);
              v14 -= 2;
              *((_WORD *)v22 - 1) = v23;
              v22 -= 2;
            }
            __p = v22;
            v31 = v15;
            v32 = &v21[2 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(_WORD *)v31 = v12;
            BOOL v15 = v14 + 2;
          }
          v31 = v15;
          ++v10;
          uint64_t v9 = *(void *)(a1 + 64);
        }
        while (v10 < v9);
        uint64_t v6 = *(void *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v26);
  *a3 = v26;
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211147084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 64) * *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v26 = v5 * v4;
    uint64_t v8 = *(void *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(void *)&long long v28 = v10;
          *((void *)&v28 + 1) = v9;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v29 = 0;
          char v11 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
          char v12 = v11;
          __int16 v13 = v33;
          if (v33 >= v34)
          {
            unint64_t v15 = (unint64_t)__p;
            uint64_t v16 = v33 - (unsigned char *)__p;
            uint64_t v17 = v33 - (unsigned char *)__p + 1;
            if (v17 < 0) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = v34 - (unsigned char *)__p;
            if (2 * (v34 - (unsigned char *)__p) > (unint64_t)v17) {
              uint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v19 = v17;
            }
            if (v19) {
              uint64_t v20 = (char *)operator new(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[v16];
            uint64_t v22 = &v20[v16];
            *uint64_t v22 = v12;
            uint64_t v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              __int16 v23 = &v13[~v15];
              do
              {
                char v24 = *--v13;
                (v23--)[(void)v20] = v24;
              }
              while (v13 != (char *)v15);
              __int16 v13 = (char *)__p;
              uint64_t v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            char *v33 = v11;
            uint64_t v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          uint64_t v8 = *(void *)(a1 + 64);
        }
        while (v9 < v8);
        uint64_t v6 = *(void *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211147280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 64) * *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v26 = v5 * v4;
    uint64_t v8 = *(void *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(void *)&long long v28 = v10;
          *((void *)&v28 + 1) = v9;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v29 = 0;
          char v11 = ZinIrWeightBase::GetAt<unsigned char>(a1);
          char v12 = v11;
          __int16 v13 = v33;
          if (v33 >= v34)
          {
            unint64_t v15 = (unint64_t)__p;
            uint64_t v16 = v33 - (unsigned char *)__p;
            uint64_t v17 = v33 - (unsigned char *)__p + 1;
            if (v17 < 0) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = v34 - (unsigned char *)__p;
            if (2 * (v34 - (unsigned char *)__p) > (unint64_t)v17) {
              uint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v19 = v17;
            }
            if (v19) {
              uint64_t v20 = (char *)operator new(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[v16];
            uint64_t v22 = &v20[v16];
            *uint64_t v22 = v12;
            uint64_t v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              __int16 v23 = &v13[~v15];
              do
              {
                char v24 = *--v13;
                (v23--)[(void)v20] = v24;
              }
              while (v13 != (char *)v15);
              __int16 v13 = (char *)__p;
              uint64_t v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            char *v33 = v11;
            uint64_t v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          uint64_t v8 = *(void *)(a1 + 64);
        }
        while (v9 < v8);
        uint64_t v6 = *(void *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_21114747C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 64) * *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v26 = v5 * v4;
    uint64_t v8 = *(void *)(a1 + 64);
    do
    {
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = v7 / v26 + a2[1] * (v7 % v26);
        do
        {
          *(void *)&long long v28 = v10;
          *((void *)&v28 + 1) = v9;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v29 = 0;
          char v11 = ZinIrWeightBase::GetAt<signed char>(a1);
          char v12 = v11;
          __int16 v13 = v33;
          if (v33 >= v34)
          {
            unint64_t v15 = (unint64_t)__p;
            uint64_t v16 = v33 - (unsigned char *)__p;
            uint64_t v17 = v33 - (unsigned char *)__p + 1;
            if (v17 < 0) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = v34 - (unsigned char *)__p;
            if (2 * (v34 - (unsigned char *)__p) > (unint64_t)v17) {
              uint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v19 = v17;
            }
            if (v19) {
              uint64_t v20 = (char *)operator new(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[v16];
            uint64_t v22 = &v20[v16];
            *uint64_t v22 = v12;
            uint64_t v14 = v22 + 1;
            if (v13 != (char *)v15)
            {
              __int16 v23 = &v13[~v15];
              do
              {
                char v24 = *--v13;
                (v23--)[(void)v20] = v24;
              }
              while (v13 != (char *)v15);
              __int16 v13 = (char *)__p;
              uint64_t v21 = v20;
            }
            __p = v21;
            v33 = v14;
            v34 = &v20[v19];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            char *v33 = v11;
            uint64_t v14 = v13 + 1;
          }
          v33 = v14;
          ++v9;
          uint64_t v8 = *(void *)(a1 + 64);
        }
        while (v9 < v8);
        uint64_t v6 = *(void *)(a1 + 56);
      }
      ++v7;
    }
    while (v6 > v7);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v28);
  *a3 = v28;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211147678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  size_t v19 = &unk_26C351778;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(*(void *)(a1 + 64) * *(void *)(a1 + 56) + 7) >> 3);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 * v6;
    uint64_t v11 = *(void *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(void *)&long long v15 = v13;
          *((void *)&v15 + 1) = v12;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = 0;
          char v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
          ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v19, v14 & 1);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 64);
        }
        while (v12 < v11);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  size_t v19 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_2111477F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  size_t v19 = &unk_26C3517A8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(2 * *(void *)(a1 + 56) * *(void *)(a1 + 64) + 7) >> 3);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 * v6;
    uint64_t v11 = *(void *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(void *)&long long v15 = v13;
          *((void *)&v15 + 1) = v12;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = 0;
          char v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
          ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v19, v14 & 3);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 64);
        }
        while (v12 < v11);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  size_t v19 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211147998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  size_t v19 = &unk_26C32C000;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(3 * *(void *)(a1 + 56) * *(void *)(a1 + 64) + 7) >> 3);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 * v6;
    uint64_t v11 = *(void *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(void *)&long long v15 = v13;
          *((void *)&v15 + 1) = v12;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = 0;
          char v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
          ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v19, v14 & 7);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 64);
        }
        while (v12 < v11);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  size_t v19 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211147B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  size_t v19 = &unk_26C3517D8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(4 * *(void *)(a1 + 56) * *(void *)(a1 + 64) + 7) >> 3);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 * v6;
    uint64_t v11 = *(void *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(void *)&long long v15 = v13;
          *((void *)&v15 + 1) = v12;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = 0;
          char v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v19, v14 & 0xF);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 64);
        }
        while (v12 < v11);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  size_t v19 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211147CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::RemapData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  size_t v19 = &unk_26C351808;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(6 * *(void *)(a1 + 56) * *(void *)(a1 + 64) + 7) >> 3);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 * v6;
    uint64_t v11 = *(void *)(a1 + 64);
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v9 / v10 + a2[1] * (v9 % v10);
        do
        {
          *(void *)&long long v15 = v13;
          *((void *)&v15 + 1) = v12;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v16 = 0;
          char v14 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
          ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v19, v14 & 0x3F);
          ++v12;
          uint64_t v11 = *(void *)(a1 + 64);
        }
        while (v12 < v11);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>((uint64_t)&v19, &v15);
  *a3 = v15;
  size_t v19 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211147E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 280);
  if (!v2) {
    return 0;
  }
  if ((*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    return 0;
  }
  unint64_t v4 = *(void *)(v2 + 24);
  if (v4 < 2) {
    return 0;
  }
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  unint64_t v6 = *(void *)(a1 + 56);
  if (v6 % v4)
  {
    unint64_t v7 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v15 = v7;
      if (v2 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
        uint64_t v8 = *(void *)(v2 + 24);
      }
      else {
        uint64_t v8 = 1;
      }
      if (v7 >= ZinAlignPower2(v6, v8)) {
        break;
      }
      std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)v16, &v15, &v15);
      unint64_t v7 = v15 + 1;
      unint64_t v6 = *(void *)(a1 + 56);
      uint64_t v2 = *(void *)(a1 + 280);
    }
    uint64_t v2 = *(void *)(a1 + 280);
    if (!v2) {
      goto LABEL_15;
    }
  }
  if ((*(_DWORD *)(a1 + 8) - 7) > 0x14) {
LABEL_15:
  }
    unint64_t v9 = 1;
  else {
    unint64_t v9 = *(void *)(v2 + 24);
  }
  uint64_t v10 = *a2;
  if (a2[1] == *a2)
  {
LABEL_24:
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v16);
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  while (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v16, (unint64_t *)(v10 + v11)))
  {
    if (v12 % v9)
    {
      uint64_t v10 = *a2;
      if (v12 % v9 + v13 != *(void *)(*a2 + 8 * v12)) {
        break;
      }
    }
    else
    {
      uint64_t v10 = *a2;
      unint64_t v13 = *(void *)(*a2 + 8 * v12);
      if (v13 % v9) {
        break;
      }
    }
    ++v12;
    v11 += 8;
    if (v12 >= (a2[1] - v10) >> 3) {
      goto LABEL_24;
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v16);
  return 1;
}

void sub_211148050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::ShuffleChannelsByType(uint64_t a1@<X0>, uint64_t *a2@<X1>, const ZinIrVector *a3@<X2>, void *a4@<X8>)
{
  if (ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(a1, a2))
  {
    ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a3, v30);
    uint64_t v8 = *(void *)&v30[0];
    (*(void (**)(void, uint64_t *, const ZinIrVector *))(**(void **)&v30[0] + 48))(*(void *)&v30[0], a2, a3);
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  else
  {
    if (a3 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0) {
      ZinAssertImpl("kernel zero point is only supported for int8/uint8 kernels");
    }
    unint64_t v9 = *(void **)(a1 + 280);
    int v10 = *(_DWORD *)(a1 + 8);
    if (v9) {
      BOOL v11 = (v10 - 7) >= 0x15;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (v12 == 1 && v9[1] - *v9 >= 0x11uLL) {
      ZinAssertImpl("Channel shuffling is not supported for per-channel palettized kernels yet");
    }
    switch(v10)
    {
      case 1:
        ZinIrWeightBase::ShuffleChannelData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(a1, a2, (uint64_t)a3, 1, v30);
        goto LABEL_45;
      case 2:
      case 27:
        if (v12) {
          uint64_t v18 = v9[3];
        }
        else {
          uint64_t v18 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v18, v30);
        goto LABEL_45;
      case 4:
        ZinIrWeightBase::ShuffleChannelData<std::vector<half>,ZinIrConstData_specialization<half>>(a1, a2, (uint64_t)a3, 1, v30);
        goto LABEL_45;
      case 5:
        ZinIrWeightBase::ShuffleChannelData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(a1, a2, (uint64_t)a3, 1, v30);
        goto LABEL_45;
      case 6:
        ZinIrWeightBase::ShuffleChannelData<std::vector<float>,ZinIrConstData_specialization<float>>(a1, a2, (uint64_t)a3, 1, v30);
        goto LABEL_45;
      case 7:
      case 8:
      case 9:
      case 10:
        if (v9) {
          uint64_t v13 = v9[3];
        }
        else {
          uint64_t v13 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v13, v30);
        goto LABEL_45;
      case 11:
      case 12:
      case 13:
      case 14:
        if (v9) {
          uint64_t v14 = v9[3];
        }
        else {
          uint64_t v14 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v14, v30);
        goto LABEL_45;
      case 15:
      case 16:
      case 17:
      case 18:
        if (v9) {
          uint64_t v15 = v9[3];
        }
        else {
          uint64_t v15 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v15, v30);
        goto LABEL_45;
      case 19:
      case 20:
      case 21:
      case 22:
        if (v9) {
          uint64_t v16 = v9[3];
        }
        else {
          uint64_t v16 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v16, v30);
        goto LABEL_45;
      case 23:
      case 24:
      case 25:
      case 26:
        if (v9) {
          uint64_t v17 = v9[3];
        }
        else {
          uint64_t v17 = 1;
        }
        ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)a3, v17, v30);
LABEL_45:
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
        if (*(void *)&v30[0])
        {
          long long v28 = *(_OWORD *)(a1 + 72);
          v30[0] = *(_OWORD *)(a1 + 56);
          v30[1] = v28;
          uint64_t v29 = (a2[1] - *a2) >> 3;
          uint64_t v31 = *(void *)(a1 + 88);
          *(void *)&v30[0] = v29;
          operator new();
        }
        return;
      default:
        BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v19) {
          ZinIrWeight::ShuffleChannelsByType(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        uint64_t v27 = 0;
        break;
    }
    *a4 = 0;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
}

void sub_2111483DC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4034FA82A5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreateDePalettizedWeight(ZinIrWeight *this@<X0>, const ZinIrVector *a2@<X1>, void *a3@<X8>)
{
  int v6 = *((_DWORD *)this + 2);
  int v24 = 0;
  if (ZinKernelFormatGetPaletteFormat(v6, &v24))
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v7) {
      ZinIrWeight::CreateDePalettizedWeight(v7, v8, v9, v10, v11, v12, v13, v14);
    }
LABEL_4:
    *a3 = 0;
  }
  else
  {
    switch(v24)
    {
      case 1:
        ZinIrWeight::DePalettizeWeightData<signed char>((uint64_t)this, (uint64_t)a2, v25);
        break;
      case 2:
        ZinIrWeight::DePalettizeWeightData<unsigned char>((uint64_t)this, (uint64_t)a2, v25);
        break;
      case 4:
        ZinIrWeight::DePalettizeWeightData<half>((uint64_t)this, (uint64_t)a2, v25);
        break;
      case 5:
        ZinIrWeight::DePalettizeWeightData<e4m3_t>((uint64_t)this, (uint64_t)a2, v25);
        break;
      default:
        BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v15) {
          ZinIrWeight::CreateDePalettizedWeight(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        goto LABEL_4;
    }
    uint64_t v23 = (std::__shared_weak_count *)v25[1];
    if (v25[0]) {
      operator new();
    }
    *a3 = 0;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
}

void sub_21114865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<float>,ZinIrConstData_specialization<float>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<float>::reserve(&__p, *(void *)(a1 + 72) * *(void *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  v37 = a5;
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    v38 = a2;
    uint64_t v39 = a4;
    do
    {
      *(void *)&long long v41 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v41 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v42 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v42 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v43 = i;
                      int v24 = 0;
                      if ((uint64_t)v41 < *(void *)(a1 + 56))
                      {
                        uint64_t v25 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v41);
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v25) & 1) == 0)
                        {
                          ZinIrWeightBase::GetAt<float>(a1);
                          int v24 = v26;
                        }
                      }
                      uint64_t v27 = v45;
                      if (v45 >= v46)
                      {
                        uint64_t v29 = (char *)__p;
                        uint64_t v30 = (v45 - (unsigned char *)__p) >> 2;
                        unint64_t v31 = v30 + 1;
                        if ((unint64_t)(v30 + 1) >> 62) {
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v32 = v46 - (unsigned char *)__p;
                        if ((v46 - (unsigned char *)__p) >> 1 > v31) {
                          unint64_t v31 = v32 >> 1;
                        }
                        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v33 = v31;
                        }
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v46, v33);
                          uint64_t v29 = (char *)__p;
                          uint64_t v27 = v45;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v35 = &v34[4 * v30];
                        *(_DWORD *)v35 = v24;
                        long long v28 = v35 + 4;
                        while (v27 != v29)
                        {
                          int v36 = *((_DWORD *)v27 - 1);
                          v27 -= 4;
                          *((_DWORD *)v35 - 1) = v36;
                          v35 -= 4;
                        }
                        __p = v35;
                        v45 = v28;
                        v46 = &v34[4 * v33];
                        if (v29) {
                          operator delete(v29);
                        }
                      }
                      else
                      {
                        *(_DWORD *)v45 = v24;
                        long long v28 = v27 + 4;
                      }
                      v45 = v28;
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        a4 = v39;
        uint64_t v11 = *v38;
        uint64_t v10 = v38[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v40);
  _OWORD *v37 = v40;
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2111489F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<half>,ZinIrConstData_specialization<half>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<half>::reserve(&__p, *(void *)(a1 + 72) * *(void *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  v37 = a5;
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    v38 = a2;
    uint64_t v39 = a4;
    do
    {
      *(void *)&long long v41 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v41 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v42 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v42 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v43 = i;
                      __int16 v24 = 0;
                      if ((uint64_t)v41 < *(void *)(a1 + 56))
                      {
                        uint64_t v25 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v41);
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v25) & 1) == 0)
                        {
                          ZinIrWeightBase::GetAt<half>(a1);
                          __int16 v24 = v26;
                        }
                      }
                      uint64_t v27 = v45;
                      if (v45 >= v46)
                      {
                        uint64_t v29 = (char *)__p;
                        uint64_t v30 = v45 - (unsigned char *)__p;
                        if (v45 - (unsigned char *)__p <= -3) {
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v31 = v30 >> 1;
                        if (v46 - (unsigned char *)__p <= (unint64_t)((v30 >> 1) + 1)) {
                          uint64_t v32 = v31 + 1;
                        }
                        else {
                          uint64_t v32 = v46 - (unsigned char *)__p;
                        }
                        if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
                          uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          uint64_t v33 = v32;
                        }
                        if (v33)
                        {
                          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v46, v33);
                          uint64_t v29 = (char *)__p;
                          uint64_t v27 = v45;
                        }
                        else
                        {
                          v34 = 0;
                        }
                        v35 = &v34[2 * v31];
                        *(_WORD *)v35 = v24;
                        long long v28 = v35 + 2;
                        while (v27 != v29)
                        {
                          __int16 v36 = *((_WORD *)v27 - 1);
                          v27 -= 2;
                          *((_WORD *)v35 - 1) = v36;
                          v35 -= 2;
                        }
                        __p = v35;
                        v45 = v28;
                        v46 = &v34[2 * v33];
                        if (v29) {
                          operator delete(v29);
                        }
                      }
                      else
                      {
                        *(_WORD *)v45 = v24;
                        long long v28 = v27 + 2;
                      }
                      v45 = v28;
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        a4 = v39;
        uint64_t v11 = *v38;
        uint64_t v10 = v38[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v40);
  _OWORD *v37 = v40;
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211148D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<e4m3_t>,ZinIrConstData_specialization<e4m3_t>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __p = 0;
  v47 = 0;
  v48 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 72) * *(void *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  __int16 v36 = a5;
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.", a5);
  }
  unint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8 != *a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(a1 + 64);
    unint64_t v12 = v11;
    do
    {
      uint64_t v39 = v10;
      *(void *)&long long v43 = *(void *)(v9 + 8 * v10);
      if (v12)
      {
        unint64_t v13 = 0;
        unint64_t v14 = *(void *)(a1 + 72);
        unint64_t v15 = v14;
        do
        {
          *((void *)&v43 + 1) = v13;
          if (v15)
          {
            unint64_t v16 = 0;
            unint64_t v17 = *(void *)(a1 + 80);
            unint64_t v18 = v17;
            unint64_t v40 = v13;
            do
            {
              *(void *)&long long v44 = v16;
              if (v18)
              {
                unint64_t v41 = v16;
                unint64_t v19 = 0;
                unint64_t v20 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v44 + 1) = v19;
                  if (v20)
                  {
                    for (unint64_t i = 0; i < v20; ++i)
                    {
                      unint64_t v45 = i;
                      if ((uint64_t)v43 >= *(void *)(a1 + 56)
                        || (uint64_t v22 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v43),
                            ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v22) & 1) != 0))
                      {
                        char v23 = 0;
                      }
                      else
                      {
                        char v23 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
                      }
                      __int16 v24 = v47;
                      if (v47 >= v48)
                      {
                        unint64_t v26 = (unint64_t)__p;
                        uint64_t v27 = v47 - (unsigned char *)__p;
                        uint64_t v28 = v47 - (unsigned char *)__p + 1;
                        if (v28 < 0) {
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v29 = v48 - (unsigned char *)__p;
                        if (2 * (v48 - (unsigned char *)__p) > (unint64_t)v28) {
                          uint64_t v28 = 2 * v29;
                        }
                        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v30 = v28;
                        }
                        if (v30) {
                          uint64_t v31 = (char *)operator new(v30);
                        }
                        else {
                          uint64_t v31 = 0;
                        }
                        uint64_t v32 = &v31[v27];
                        uint64_t v33 = &v31[v27];
                        char *v33 = v23;
                        uint64_t v25 = v33 + 1;
                        if (v24 != (char *)v26)
                        {
                          v34 = &v24[~v26];
                          do
                          {
                            char v35 = *--v24;
                            (v34--)[(void)v31] = v35;
                          }
                          while (v24 != (char *)v26);
                          __int16 v24 = (char *)__p;
                          uint64_t v32 = v31;
                        }
                        __p = v32;
                        v47 = v25;
                        v48 = &v31[v30];
                        if (v24) {
                          operator delete(v24);
                        }
                      }
                      else
                      {
                        char *v47 = v23;
                        uint64_t v25 = v24 + 1;
                      }
                      v47 = v25;
                      unint64_t v20 = *(void *)(a1 + 88);
                    }
                    unint64_t v17 = *(void *)(a1 + 80);
                  }
                  ++v19;
                }
                while (v19 < v17);
                unint64_t v14 = *(void *)(a1 + 72);
                unint64_t v18 = v17;
                unint64_t v13 = v40;
                unint64_t v16 = v41;
              }
              ++v16;
            }
            while (v16 < v14);
            unint64_t v11 = *(void *)(a1 + 64);
            unint64_t v15 = v14;
          }
          ++v13;
        }
        while (v13 < v11);
        uint64_t v9 = *a2;
        uint64_t v8 = a2[1];
        unint64_t v12 = v11;
      }
      uint64_t v10 = v39 + a4;
    }
    while (v39 + a4 < (unint64_t)((v8 - v9) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&__p, &v42);
  *__int16 v36 = v42;
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2111490A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<unsigned char>,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 72) * *(void *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  v38 = a5;
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    uint64_t v39 = a3;
    do
    {
      uint64_t v42 = v9;
      uint64_t v10 = *(void *)(v8 + 8 * v9);
      *(void *)&long long v46 = v10;
      if (a3)
      {
        uint64_t v11 = *(void *)(a1 + 56);
        if (v10 >= v11) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v10;
        }
        char v13 = ZinIrVector::GetAt<unsigned char>(a3, v12);
      }
      else
      {
        char v13 = 0;
      }
      unint64_t v14 = *(void *)(a1 + 64);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v46 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            unint64_t v43 = v15;
            do
            {
              *(void *)&long long v47 = v18;
              if (v20)
              {
                unint64_t v44 = v18;
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v47 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v48 = i;
                      char v24 = v13;
                      if ((uint64_t)v46 < *(void *)(a1 + 56))
                      {
                        uint64_t v25 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v46);
                        char v24 = v13;
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v25) & 1) == 0)char v24 = ZinIrWeightBase::GetAt<unsigned char>(a1); {
                      }
                        }
                      unint64_t v26 = v50;
                      if (v50 >= v51)
                      {
                        unint64_t v28 = (unint64_t)__p;
                        uint64_t v29 = v50 - (unsigned char *)__p;
                        uint64_t v30 = v50 - (unsigned char *)__p + 1;
                        if (v30 < 0) {
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v31 = v51 - (unsigned char *)__p;
                        if (2 * (v51 - (unsigned char *)__p) > (unint64_t)v30) {
                          uint64_t v30 = 2 * v31;
                        }
                        if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v32 = v30;
                        }
                        if (v32) {
                          uint64_t v33 = (char *)operator new(v32);
                        }
                        else {
                          uint64_t v33 = 0;
                        }
                        v34 = &v33[v29];
                        char v35 = &v33[v29];
                        char *v35 = v24;
                        uint64_t v27 = v35 + 1;
                        if (v26 != (char *)v28)
                        {
                          __int16 v36 = &v26[~v28];
                          do
                          {
                            char v37 = *--v26;
                            (v36--)[(void)v33] = v37;
                          }
                          while (v26 != (char *)v28);
                          unint64_t v26 = (char *)__p;
                          v34 = v33;
                        }
                        __p = v34;
                        v50 = v27;
                        v51 = &v33[v32];
                        if (v26) {
                          operator delete(v26);
                        }
                      }
                      else
                      {
                        char *v50 = v24;
                        uint64_t v27 = v26 + 1;
                      }
                      v50 = v27;
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
                unint64_t v15 = v43;
                unint64_t v18 = v44;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v14 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      uint64_t v9 = v42 + a4;
      a3 = v39;
      uint64_t v8 = *a2;
    }
    while (v42 + a4 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v45);
  _OWORD *v38 = v45;
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211149430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<std::vector<signed char>,ZinIrConstData_specialization<signed char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __p = 0;
  v50 = 0;
  v51 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&__p, *(void *)(a1 + 72) * *(void *)(a1 + 64) * ((a2[1] - *a2) >> 3) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  v38 = a5;
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    uint64_t v39 = a3;
    do
    {
      uint64_t v42 = v9;
      uint64_t v10 = *(void *)(v8 + 8 * v9);
      *(void *)&long long v46 = v10;
      if (a3)
      {
        uint64_t v11 = *(void *)(a1 + 56);
        if (v10 >= v11) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v10;
        }
        char v13 = ZinIrVector::GetAt<signed char>(a3, v12);
      }
      else
      {
        char v13 = 0;
      }
      unint64_t v14 = *(void *)(a1 + 64);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v46 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            unint64_t v43 = v15;
            do
            {
              *(void *)&long long v47 = v18;
              if (v20)
              {
                unint64_t v44 = v18;
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v47 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v48 = i;
                      char v24 = v13;
                      if ((uint64_t)v46 < *(void *)(a1 + 56))
                      {
                        uint64_t v25 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v46);
                        char v24 = v13;
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v25) & 1) == 0)char v24 = ZinIrWeightBase::GetAt<signed char>(a1); {
                      }
                        }
                      unint64_t v26 = v50;
                      if (v50 >= v51)
                      {
                        unint64_t v28 = (unint64_t)__p;
                        uint64_t v29 = v50 - (unsigned char *)__p;
                        uint64_t v30 = v50 - (unsigned char *)__p + 1;
                        if (v30 < 0) {
                          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v31 = v51 - (unsigned char *)__p;
                        if (2 * (v51 - (unsigned char *)__p) > (unint64_t)v30) {
                          uint64_t v30 = 2 * v31;
                        }
                        if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v32 = v30;
                        }
                        if (v32) {
                          uint64_t v33 = (char *)operator new(v32);
                        }
                        else {
                          uint64_t v33 = 0;
                        }
                        v34 = &v33[v29];
                        char v35 = &v33[v29];
                        char *v35 = v24;
                        uint64_t v27 = v35 + 1;
                        if (v26 != (char *)v28)
                        {
                          __int16 v36 = &v26[~v28];
                          do
                          {
                            char v37 = *--v26;
                            (v36--)[(void)v33] = v37;
                          }
                          while (v26 != (char *)v28);
                          unint64_t v26 = (char *)__p;
                          v34 = v33;
                        }
                        __p = v34;
                        v50 = v27;
                        v51 = &v33[v32];
                        if (v26) {
                          operator delete(v26);
                        }
                      }
                      else
                      {
                        char *v50 = v24;
                        uint64_t v27 = v26 + 1;
                      }
                      v50 = v27;
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
                unint64_t v15 = v43;
                unint64_t v18 = v44;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v14 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v14);
      }
      uint64_t v9 = v42 + a4;
      a3 = v39;
      uint64_t v8 = *a2;
    }
    while (v42 + a4 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v45);
  _OWORD *v38 = v45;
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2111497BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v30 = &unk_26C351778;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(*(void *)(a1 + 72)* *(void *)(a1 + 64)* ((a2[1] - *a2) >> 3)* *(void *)(a1 + 80)* *(void *)(a1 + 88)+ 7) >> 3);
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    do
    {
      *(void *)&long long v27 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v27 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v28 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v29 = i;
                      if ((uint64_t)v27 >= *(void *)(a1 + 56)
                        || (unint64_t v24 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v27),
                            ((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v24) & 1) != 0))
                      {
                        char v25 = 0;
                      }
                      else
                      {
                        char v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1, v24);
                      }
                      ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v30, v25 & 1);
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  uint64_t v30 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211149A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v30 = &unk_26C3517A8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(2* *(void *)(a1 + 64)* *(void *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(void *)(a1 + 80)* *(void *)(a1 + 88)+ 7) >> 3);
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    do
    {
      *(void *)&long long v27 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v27 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v28 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v29 = i;
                      if ((uint64_t)v27 >= *(void *)(a1 + 56)
                        || (unint64_t v24 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v27),
                            ((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v24) & 1) != 0))
                      {
                        char v25 = 0;
                      }
                      else
                      {
                        char v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1, v24);
                      }
                      ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v30, v25 & 3);
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  uint64_t v30 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_211149D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v30 = &unk_26C32C000;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(3* *(void *)(a1 + 64)* *(void *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(void *)(a1 + 80)* *(void *)(a1 + 88)+ 7) >> 3);
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    do
    {
      *(void *)&long long v27 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v27 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v28 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v29 = i;
                      if ((uint64_t)v27 >= *(void *)(a1 + 56)
                        || (uint64_t v24 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v27),
                            ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v24) & 1) != 0))
                      {
                        char v25 = 0;
                      }
                      else
                      {
                        char v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1, v24);
                      }
                      ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v30, v25 & 7);
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  uint64_t v30 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114A090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v30 = &unk_26C3517D8;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(4* *(void *)(a1 + 64)* *(void *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(void *)(a1 + 80)* *(void *)(a1 + 88)+ 7) >> 3);
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    do
    {
      *(void *)&long long v27 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v27 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v28 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v29 = i;
                      if ((uint64_t)v27 >= *(void *)(a1 + 56)
                        || (unint64_t v24 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v27),
                            ((*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v24) & 1) != 0))
                      {
                        char v25 = 0;
                      }
                      else
                      {
                        char v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1, v24);
                      }
                      ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v30, v25 & 0xF);
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  uint64_t v30 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114A38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightBase::ShuffleChannelData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v30 = &unk_26C351808;
  std::vector<unsigned char>::reserve((unint64_t *)&__p[1], (unint64_t)(6* *(void *)(a1 + 64)* *(void *)(a1 + 72)* ((a2[1] - *a2) >> 3)* *(void *)(a1 + 80)* *(void *)(a1 + 88)+ 7) >> 3);
  if (a3 && (*(_DWORD *)(a1 + 8) - 7) < 0x15) {
    ZinAssertImpl("Padding a palettized weight with zero point is not supported.");
  }
  if (a4 != 1 && (*(_DWORD *)(a1 + 8) - 7) >= 0x15) {
    ZinAssertImpl("Palette vector size can be more than 1 only for palettized kernels.");
  }
  unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10 != *a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v14 = v13;
    do
    {
      *(void *)&long long v27 = *(void *)(v11 + 8 * v12);
      if (v14)
      {
        unint64_t v15 = 0;
        unint64_t v16 = *(void *)(a1 + 72);
        unint64_t v17 = v16;
        do
        {
          *((void *)&v27 + 1) = v15;
          if (v17)
          {
            unint64_t v18 = 0;
            unint64_t v19 = *(void *)(a1 + 80);
            unint64_t v20 = v19;
            do
            {
              *(void *)&long long v28 = v18;
              if (v20)
              {
                unint64_t v21 = 0;
                unint64_t v22 = *(void *)(a1 + 88);
                do
                {
                  *((void *)&v28 + 1) = v21;
                  if (v22)
                  {
                    for (unint64_t i = 0; i < v22; ++i)
                    {
                      unint64_t v29 = i;
                      if ((uint64_t)v27 >= *(void *)(a1 + 56)
                        || (uint64_t v24 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v27),
                            ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v24) & 1) != 0))
                      {
                        char v25 = 0;
                      }
                      else
                      {
                        char v25 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1, v24);
                      }
                      ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v30, v25 & 0x3F);
                      unint64_t v22 = *(void *)(a1 + 88);
                    }
                    unint64_t v19 = *(void *)(a1 + 80);
                  }
                  ++v21;
                }
                while (v21 < v19);
                unint64_t v16 = *(void *)(a1 + 72);
                unint64_t v20 = v19;
              }
              ++v18;
            }
            while (v18 < v16);
            unint64_t v13 = *(void *)(a1 + 64);
            unint64_t v17 = v16;
          }
          ++v15;
        }
        while (v15 < v13);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
        unint64_t v14 = v13;
      }
      v12 += a4;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>((uint64_t)&v30, &v26);
  *a5 = v26;
  uint64_t v30 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114A68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleByType(ZinIrWeight *this@<X0>, ZinIrVector *a2@<X3>, uint64_t a3@<X1>, uint64_t a4@<X2>, void *a5@<X8>)
{
  uint64_t v9 = (void *)*((void *)this + 35);
  int v10 = *((_DWORD *)this + 2);
  if (v9) {
    BOOL v11 = (v10 - 7) > 0x14;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (v9[3] >= 2uLL)
    {
      ZinIrWeight::CreateDePalettizedWeight(this, a2, &v22);
      uint64_t v12 = v22;
      (*(void (**)(void, uint64_t, uint64_t, ZinIrVector *))(*(void *)v22 + 56))(v22, a3, a4, a2);
      (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      return;
    }
    if (v9[1] - *v9 >= 0x11uLL) {
      ZinAssertImpl("Shuffling is not supported for per-channel palettized kernels yet");
    }
  }
  switch(v10)
  {
    case 1:
      ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>((uint64_t)this, a3, (uint64_t)a2, &v22);
      goto LABEL_22;
    case 2:
    case 27:
      ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>((uint64_t)this, a3, (uint64_t)a2, &v22);
      goto LABEL_22;
    case 4:
      ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 5:
      ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 6:
      ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 7:
    case 8:
    case 9:
    case 10:
      ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 11:
    case 12:
    case 13:
    case 14:
      ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 19:
    case 20:
    case 21:
    case 22:
      ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a3, &v22);
      goto LABEL_22;
    case 23:
    case 24:
    case 25:
    case 26:
      ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>((uint64_t)this, a3, &v22);
LABEL_22:
      unint64_t v21 = (std::__shared_weak_count *)*((void *)&v22 + 1);
      if ((void)v22) {
        operator new();
      }
      return;
    default:
      BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v13) {
        ZinIrWeight::ShuffleByType(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      unint64_t v21 = 0;
      break;
  }
  *a5 = 0;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_21114A9AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_21114AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_21114AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(a1, a2, (uint64_t)v7, a3);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v7);
}

void sub_21114AC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(a1, a2, (uint64_t)v9, a3, a4);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v9);
}

void sub_21114ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrWeight::ShuffleWeightDataUsingScratchBuffer<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(a1, a2, (uint64_t)v9, a3, a4);
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v9);
}

void sub_21114AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)__p = 0u;
  long long v5 = 0u;
  uint64_t v3 = &unk_26C351778;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  uint64_t v3 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114ADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)__p = 0u;
  long long v5 = 0u;
  uint64_t v3 = &unk_26C3517A8;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  uint64_t v3 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114AEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)__p = 0u;
  long long v5 = 0u;
  uint64_t v3 = &unk_26C32C000;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  uint64_t v3 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114AF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)__p = 0u;
  long long v5 = 0u;
  uint64_t v3 = &unk_26C3517D8;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  uint64_t v3 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114B020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(_OWORD *)__p = 0u;
  long long v5 = 0u;
  uint64_t v3 = &unk_26C351808;
  ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>(a1, a2, (uint64_t)&v3, a3);
  uint64_t v3 = &unk_26C3526F8;
  if (__p[1])
  {
    *(void **)&long long v5 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_21114B0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(ZinIrWeight *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  if (Is3bitPaletteKernelFormat(*((_DWORD *)this + 2)))
  {
    long long v4 = *(_OWORD *)((char *)v2 + 72);
    long long v170 = *(_OWORD *)((char *)v2 + 56);
    long long v171 = v4;
    uint64_t v172 = *((void *)v2 + 11);
    long long v169 = 0u;
    long long v168 = 0u;
    unint64_t SerializedWeightElementCount = 0;
    v167 = &unk_26C3517D8;
    int v5 = *((_DWORD *)v2 + 2);
    uint64_t v6 = *((void *)v2 + 35);
    unint64_t v7 = 1;
    if (v6 && (v5 - 7) <= 0x14) {
      unint64_t v7 = *(void *)(v6 + 24);
    }
    unint64_t SerializedWeightElementCount = GetSerializedWeightElementCount(v5, (unint64_t *)&v170, v7);
    uint64_t v150 = (uint64_t)v2;
    if ((*(uint64_t (**)(void))(**((void **)v2 + 17) + 184))(*((void *)v2 + 17)))
    {
      v154 = 0;
      size_t v8 = ZinDivRoundUp(SerializedWeightElementCount, 8uLL);
      LOBYTE(v160) = 0;
      std::vector<unsigned char>::vector(v152, v8, &v160);
      __p = 0;
      v164 = 0;
      v165 = 0;
      int v9 = *((_DWORD *)v2 + 2);
      unint64_t v10 = 1;
      uint64_t v11 = *((void *)v2 + 35);
      if (v11 && (v9 - 7) <= 0x14) {
        unint64_t v10 = *(void *)(v11 + 24);
      }
      int v12 = *((_DWORD *)v2 + 39);
      int64_t SerializedCoutElementCount = GetSerializedCoutElementCount(v170, v9, v10);
      *(void *)&long long v170 = SerializedCoutElementCount;
      if (v12 == 1145261902)
      {
        *(void *)&long long v170 = *((void *)&v170 + 1);
        *((void *)&v170 + 1) = SerializedCoutElementCount;
        int64_t SerializedCoutElementCount = v170;
      }
      if (SerializedCoutElementCount >= 1)
      {
        int64_t v14 = 0;
        v148 = a2;
        uint64_t v15 = *((void *)&v170 + 1);
        do
        {
          if (v15 >= 1)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v171;
            do
            {
              if (v17 >= 1)
              {
                uint64_t v18 = 0;
                uint64_t v19 = *((void *)&v171 + 1);
                do
                {
                  if (v19 >= 1)
                  {
                    uint64_t v20 = 0;
                    uint64_t v21 = v172;
                    do
                    {
                      if (v21 >= 1)
                      {
                        uint64_t v22 = 0;
                        do
                        {
                          *(void *)&long long v160 = v14;
                          *((void *)&v160 + 1) = v16;
                          *(void *)&long long v161 = v18;
                          *((void *)&v161 + 1) = v20;
                          uint64_t v162 = v22;
                          if (v12 == 1145261902)
                          {
                            *(void *)&long long v160 = v16;
                            *((void *)&v160 + 1) = v14;
                            *(void *)&long long v161 = v171 + ~v18;
                            *((void *)&v161 + 1) = *((void *)&v171 + 1) + ~v20;
                            uint64_t v162 = v21 + ~v22;
                          }
                          unint64_t v23 = (**(uint64_t (***)(ZinIrWeight *, long long *))v2)(v2, &v160);
                          if (((*(uint64_t (**)(void, unint64_t))(**((void **)v2 + 17) + 168))(*((void *)v2 + 17), v23) & 1) == 0)
                          {
                            uint64_t v24 = v152[0];
                            char v25 = v164;
                            if (v164 >= v165)
                            {
                              long long v27 = (char *)__p;
                              uint64_t v28 = (v164 - (unsigned char *)__p) >> 3;
                              unint64_t v29 = v28 + 1;
                              if ((unint64_t)(v28 + 1) >> 61) {
                                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                              }
                              uint64_t v30 = v165 - (unsigned char *)__p;
                              if ((v165 - (unsigned char *)__p) >> 2 > v29) {
                                unint64_t v29 = v30 >> 2;
                              }
                              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v31 = v29;
                              }
                              if (v31)
                              {
                                long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v165, v31);
                                long long v27 = (char *)__p;
                                char v25 = v164;
                              }
                              else
                              {
                                long long v32 = 0;
                              }
                              uint64_t v33 = (unint64_t *)&v32[8 * v28];
                              unint64_t *v33 = v23;
                              long long v26 = (char *)(v33 + 1);
                              while (v25 != v27)
                              {
                                unint64_t v34 = *((void *)v25 - 1);
                                v25 -= 8;
                                *--uint64_t v33 = v34;
                              }
                              __p = v33;
                              v164 = v26;
                              v165 = &v32[8 * v31];
                              if (v27) {
                                operator delete(v27);
                              }
                            }
                            else
                            {
                              *(void *)v164 = v23;
                              long long v26 = v25 + 8;
                            }
                            v164 = v26;
                            v24[v23 >> 3] |= 1 << (v23 & 7);
                            v154 = (char *)v154 + 1;
                            uint64_t v2 = (ZinIrWeight *)v150;
                          }
                          ++v22;
                          uint64_t v21 = v172;
                        }
                        while (v172 > v22);
                        uint64_t v19 = *((void *)&v171 + 1);
                      }
                      ++v20;
                    }
                    while (v19 > v20);
                    uint64_t v17 = v171;
                  }
                  ++v18;
                }
                while (v17 > v18);
                uint64_t v15 = *((void *)&v170 + 1);
              }
              ++v16;
            }
            while (v15 > v16);
            int64_t SerializedCoutElementCount = v170;
            a2 = v148;
          }
          ++v14;
        }
        while (SerializedCoutElementCount > v14);
      }
      char v35 = (uint64_t *)__p;
      __int16 v36 = (uint64_t *)v164;
      while (v35 != v36)
      {
        char v37 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>((uint64_t)v2, *v35);
        ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v167, v37 & 7);
        ++v35;
      }
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,void>((uint64_t)&v167, (uint64_t)v152, (uint64_t *)&v154, &SerializedWeightElementCount, &v160);
      v49 = (std::__shared_weak_count *)*((void *)&v160 + 1);
      uint64_t v48 = v160;
      if (__p)
      {
        v164 = (char *)__p;
        operator delete(__p);
      }
      if (v152[0])
      {
        v152[1] = v152[0];
        operator delete(v152[0]);
      }
    }
    else
    {
      if (SerializedWeightElementCount)
      {
        for (unint64_t i = 0; i < SerializedWeightElementCount; ++i)
        {
          char v47 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>(v150, i);
          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v167, v47 & 7);
        }
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>((uint64_t)&v167, &v160);
      v49 = (std::__shared_weak_count *)*((void *)&v160 + 1);
      uint64_t v48 = v160;
      uint64_t v2 = (ZinIrWeight *)v150;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v48 + 16))(v48))
    {
      v147 = v49;
      v149 = a2;
      int Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(*((_DWORD *)v2 + 2));
      v51 = (uint64_t *)*((void *)v2 + 35);
      if (v51 && (*((_DWORD *)v2 + 2) - 7) < 0x15)
      {
        int v52 = Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
        std::vector<std::shared_ptr<ZinIrConstData>>::vector(&__p, (v51[1] - *v51) >> 4);
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        if (!ZinKernelFormatGetBitDepth(*((_DWORD *)v2 + 2), &v159))
        {
          if (!ZinKernelFormatGetBitDepth(v52, &v158))
          {
            uint64_t v53 = *((void *)v2 + 35);
            if (v53 && (*((_DWORD *)v2 + 2) - 7) < 0x15)
            {
              uint64_t v54 = *(void *)(v53 + 24);
              uint64_t v55 = v54 * (1 << v159);
            }
            else
            {
              uint64_t v54 = 1;
              uint64_t v55 = 1 << v159;
            }
            unint64_t v151 = v55;
            long long v160 = 0u;
            long long v161 = 0u;
            LODWORD(v162) = 1065353216;
            uint64_t v56 = *v51;
            if (v51[1] != *v51)
            {
              unint64_t v57 = 0;
              unint64_t v58 = v54 * (1 << v158);
              while (2)
              {
                long long v59 = *(_OWORD *)(v56 + 16 * v57);
                long long v157 = v59;
                if (*((void *)&v59 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                switch(*(_DWORD *)(v150 + 8))
                {
                  case 0xF:
                    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v160, &v157))
                    {
                      goto LABEL_86;
                    }
                    ZinIrConstData::GetStdVector<signed char>(v157, &v154);
                    if (v151 < v58)
                    {
                      v102 = v155;
                      unint64_t v103 = v151;
                      do
                      {
                        if (v102 >= v156)
                        {
                          unint64_t v105 = (unint64_t)v154;
                          uint64_t v106 = v102 - (unsigned char *)v154;
                          uint64_t v107 = v102 - (unsigned char *)v154 + 1;
                          if (v107 < 0) {
                            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v108 = v156 - (unsigned char *)v154;
                          if (2 * (v156 - (unsigned char *)v154) > (unint64_t)v107) {
                            uint64_t v107 = 2 * v108;
                          }
                          if (v108 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v109 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v109 = v107;
                          }
                          if (v109) {
                            v110 = (char *)operator new(v109);
                          }
                          else {
                            v110 = 0;
                          }
                          v111 = &v110[v106];
                          v112 = &v110[v106];
                          char *v112 = 0;
                          v104 = v112 + 1;
                          if (v102 != (char *)v105)
                          {
                            v113 = &v102[~v105];
                            do
                            {
                              char v114 = *--v102;
                              (v113--)[(void)v110] = v114;
                            }
                            while (v102 != (char *)v105);
                            v102 = (char *)v154;
                            v111 = v110;
                          }
                          v154 = v111;
                          v155 = v104;
                          v156 = &v110[v109];
                          if (v102) {
                            operator delete(v102);
                          }
                        }
                        else
                        {
                          char *v102 = 0;
                          v104 = v102 + 1;
                        }
                        v155 = v104;
                        ++v103;
                        v102 = v104;
                      }
                      while (v103 != v58);
                    }
                    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&v154, v152);
                    v115 = (char *)__p + 16 * v57;
                    long long v116 = *(_OWORD *)v152;
                    v152[0] = 0;
                    v152[1] = 0;
                    v117 = (std::__shared_weak_count *)*((void *)v115 + 1);
                    *(_OWORD *)v115 = v116;
                    if (v117) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v117);
                    }
                    if (v152[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v152[1]);
                    }
                    v118 = __p;
                    *(_OWORD *)v152 = v157;
                    if (*((void *)&v157 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v157 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    long long v119 = v118[v57];
                    long long v153 = v119;
                    if (*((void *)&v119 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_205;
                  case 0x10:
                    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v160, &v157))
                    {
                      goto LABEL_86;
                    }
                    ZinIrConstData::GetStdVector<unsigned char>(v157, &v154);
                    if (v151 < v58)
                    {
                      v120 = v155;
                      unint64_t v121 = v151;
                      do
                      {
                        if (v120 >= v156)
                        {
                          unint64_t v123 = (unint64_t)v154;
                          uint64_t v124 = v120 - (unsigned char *)v154;
                          uint64_t v125 = v120 - (unsigned char *)v154 + 1;
                          if (v125 < 0) {
                            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v126 = v156 - (unsigned char *)v154;
                          if (2 * (v156 - (unsigned char *)v154) > (unint64_t)v125) {
                            uint64_t v125 = 2 * v126;
                          }
                          if (v126 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v127 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v127 = v125;
                          }
                          if (v127) {
                            v128 = (char *)operator new(v127);
                          }
                          else {
                            v128 = 0;
                          }
                          v129 = &v128[v124];
                          v130 = &v128[v124];
                          char *v130 = 0;
                          v122 = v130 + 1;
                          if (v120 != (char *)v123)
                          {
                            v131 = &v120[~v123];
                            do
                            {
                              char v132 = *--v120;
                              (v131--)[(void)v128] = v132;
                            }
                            while (v120 != (char *)v123);
                            v120 = (char *)v154;
                            v129 = v128;
                          }
                          v154 = v129;
                          v155 = v122;
                          v156 = &v128[v127];
                          if (v120) {
                            operator delete(v120);
                          }
                        }
                        else
                        {
                          char *v120 = 0;
                          v122 = v120 + 1;
                        }
                        v155 = v122;
                        ++v121;
                        v120 = v122;
                      }
                      while (v121 != v58);
                    }
                    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v154, v152);
                    v133 = (char *)__p + 16 * v57;
                    long long v134 = *(_OWORD *)v152;
                    v152[0] = 0;
                    v152[1] = 0;
                    v135 = (std::__shared_weak_count *)*((void *)v133 + 1);
                    *(_OWORD *)v133 = v134;
                    if (v135) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
                    }
                    if (v152[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v152[1]);
                    }
                    v136 = __p;
                    *(_OWORD *)v152 = v157;
                    if (*((void *)&v157 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v157 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    long long v137 = v136[v57];
                    long long v153 = v137;
                    if (*((void *)&v137 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_205;
                  case 0x11:
                    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v160, &v157))
                    {
                      goto LABEL_86;
                    }
                    ZinIrConstData::GetStdVector<half>(v157, &v154);
                    if (v151 < v58)
                    {
                      v66 = v155;
                      unint64_t v67 = v151;
                      do
                      {
                        if (v66 >= v156)
                        {
                          v69 = (char *)v154;
                          uint64_t v70 = v66 - (unsigned char *)v154;
                          if (v66 - (unsigned char *)v154 <= -3) {
                            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v71 = v70 >> 1;
                          if (v156 - (unsigned char *)v154 <= (unint64_t)((v70 >> 1) + 1)) {
                            uint64_t v72 = v71 + 1;
                          }
                          else {
                            uint64_t v72 = v156 - (unsigned char *)v154;
                          }
                          if ((unint64_t)(v156 - (unsigned char *)v154) >= 0x7FFFFFFFFFFFFFFELL) {
                            uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v73 = v72;
                          }
                          if (v73)
                          {
                            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v156, v73);
                            v69 = (char *)v154;
                            v66 = v155;
                          }
                          else
                          {
                            v74 = 0;
                          }
                          v75 = &v74[2 * v71];
                          *(_WORD *)v75 = 0;
                          v68 = v75 + 2;
                          while (v66 != v69)
                          {
                            __int16 v76 = *((_WORD *)v66 - 1);
                            v66 -= 2;
                            *((_WORD *)v75 - 1) = v76;
                            v75 -= 2;
                          }
                          v154 = v75;
                          v155 = v68;
                          v156 = &v74[2 * v73];
                          if (v69) {
                            operator delete(v69);
                          }
                        }
                        else
                        {
                          *(_WORD *)v66 = 0;
                          v68 = v66 + 2;
                        }
                        v155 = v68;
                        ++v67;
                        v66 = v68;
                      }
                      while (v67 != v58);
                    }
                    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v154, v152);
                    v77 = (char *)__p + 16 * v57;
                    long long v78 = *(_OWORD *)v152;
                    v152[0] = 0;
                    v152[1] = 0;
                    v79 = (std::__shared_weak_count *)*((void *)v77 + 1);
                    *(_OWORD *)v77 = v78;
                    if (v79) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
                    }
                    if (v152[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v152[1]);
                    }
                    v80 = __p;
                    *(_OWORD *)v152 = v157;
                    if (*((void *)&v157 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v157 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    long long v81 = v80[v57];
                    long long v153 = v81;
                    if (*((void *)&v81 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v81 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_205;
                  case 0x12:
                    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(&v160, &v157))
                    {
LABEL_86:
                      v60 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(&v160, &v157);
                      if (!v60) {
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
                      v61 = (char *)__p;
                      uint64_t v63 = v60[4];
                      uint64_t v62 = v60[5];
                      if (v62) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
                      }
                      v64 = &v61[16 * v57];
                      v65 = (std::__shared_weak_count *)*((void *)v64 + 1);
                      *(void *)v64 = v63;
                      *((void *)v64 + 1) = v62;
                      if (v65) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
                      }
                    }
                    else
                    {
                      ZinIrConstData::GetStdVector<e4m3_t>(v157, &v154);
                      unint64_t v82 = v151;
                      if (v151 < v58)
                      {
                        do
                        {
                          char v83 = ZinF32ToE4M3(0.0, 1, 0);
                          char v84 = v83;
                          v85 = v155;
                          if (v155 >= v156)
                          {
                            unint64_t v87 = (unint64_t)v154;
                            uint64_t v88 = v155 - (unsigned char *)v154;
                            uint64_t v89 = v155 - (unsigned char *)v154 + 1;
                            if (v89 < 0) {
                              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                            }
                            unint64_t v90 = v156 - (unsigned char *)v154;
                            if (2 * (v156 - (unsigned char *)v154) > (unint64_t)v89) {
                              uint64_t v89 = 2 * v90;
                            }
                            if (v90 >= 0x3FFFFFFFFFFFFFFFLL) {
                              size_t v91 = 0x7FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              size_t v91 = v89;
                            }
                            if (v91) {
                              v92 = (char *)operator new(v91);
                            }
                            else {
                              v92 = 0;
                            }
                            v93 = &v92[v88];
                            v94 = &v92[v88];
                            char *v94 = v84;
                            v86 = v94 + 1;
                            if (v85 != (char *)v87)
                            {
                              v95 = &v85[~v87];
                              do
                              {
                                char v96 = *--v85;
                                (v95--)[(void)v92] = v96;
                              }
                              while (v85 != (char *)v87);
                              v85 = (char *)v154;
                              v93 = v92;
                            }
                            v154 = v93;
                            v155 = v86;
                            v156 = &v92[v91];
                            if (v85) {
                              operator delete(v85);
                            }
                          }
                          else
                          {
                            char *v155 = v83;
                            v86 = v85 + 1;
                          }
                          v155 = v86;
                          ++v82;
                        }
                        while (v82 != v58);
                      }
                      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&v154, v152);
                      v97 = (char *)__p + 16 * v57;
                      long long v98 = *(_OWORD *)v152;
                      v152[0] = 0;
                      v152[1] = 0;
                      v99 = (std::__shared_weak_count *)*((void *)v97 + 1);
                      *(_OWORD *)v97 = v98;
                      if (v99) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
                      }
                      if (v152[1]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v152[1]);
                      }
                      v100 = __p;
                      *(_OWORD *)v152 = v157;
                      if (*((void *)&v157 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v157 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
                      long long v101 = v100[v57];
                      long long v153 = v101;
                      if (*((void *)&v101 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
LABEL_205:
                      std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>((uint64_t)&v160, v152, (long long *)v152);
                      if (*((void *)&v153 + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v153 + 1));
                      }
                      if (v152[1]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v152[1]);
                      }
                      if (v154)
                      {
                        v155 = (char *)v154;
                        operator delete(v154);
                      }
                    }
                    if (*((void *)&v157 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v157 + 1));
                    }
                    ++v57;
                    uint64_t v56 = *v51;
                    if (v57 < (v51[1] - *v51) >> 4) {
                      continue;
                    }
                    uint64_t v2 = (ZinIrWeight *)v150;
                    uint64_t v53 = *(void *)(v150 + 280);
                    break;
                  default:
                    BOOL v139 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v139) {
                      ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(v139, v140, v141, v142, v143, v144, v145, v146);
                    }
                    v49 = v147;
                    void *v149 = 0;
                    if (*((void *)&v157 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v157 + 1));
                    }
                    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::~__hash_table((uint64_t)&v160);
                    *(void *)&long long v160 = &__p;
                    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
                    goto LABEL_223;
                }
                break;
              }
            }
            void *v149 = 0;
            if (v53)
            {
              if ((*((_DWORD *)v2 + 2) - 7) > 0x14) {
                uint64_t v138 = 1;
              }
              else {
                uint64_t v138 = *(void *)(v53 + 24);
              }
            }
            else
            {
              uint64_t v138 = 1;
            }
            *(void *)&long long v157 = v138;
            std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>> &,unsigned long,void>((void **)&__p, (uint64_t **)&v157, &v154);
            operator new();
          }
          ZinAssertImpl("Faild to get upcasted pal4 format bit depth");
        }
        ZinAssertImpl("Faild to get pal3 format bit depth");
      }
      ZinAssertImpl("Error: This weight does not have palette info.");
    }
    *a2 = 0;
LABEL_223:
    v167 = &unk_26C3526F8;
    if (*((void *)&v168 + 1))
    {
      *(void *)&long long v169 = *((void *)&v168 + 1);
      operator delete(*((void **)&v168 + 1));
    }
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  else
  {
    BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v38) {
      ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    *a2 = 0;
  }
}

void sub_21114BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  *(void *)(v35 - 200) = &unk_26C3526F8;
  char v37 = *(void **)(v35 - 184);
  if (v37)
  {
    *(void *)(v35 - 176) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream4::push_back(ZinIrWeightDataBitStream4 *this, char a2)
{
  char v2 = a2 & 0xF;
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = v3 + 1;
  long long v4 = (unsigned char *)*((void *)this + 3);
  if (v3)
  {
    *(v4 - 1) |= 16 * v2;
  }
  else
  {
    unint64_t v6 = *((void *)this + 4);
    if ((unint64_t)v4 >= v6)
    {
      size_t v8 = (unsigned char **)((char *)this + 16);
      unint64_t v9 = *((void *)this + 2);
      unint64_t v10 = &v4[-v9];
      uint64_t v11 = (uint64_t)&v4[-v9 + 1];
      if (v11 < 0) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v6 - v9;
      if (2 * v12 > v11) {
        uint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        int64_t v14 = operator new(v13);
      }
      else {
        int64_t v14 = 0;
      }
      uint64_t v15 = &v14[v13];
      v10[(void)v14] = v2;
      uint64_t v7 = (uint64_t)&v10[(void)v14 + 1];
      if (v4 == (unsigned char *)v9)
      {
        int64_t v14 = &v10[(void)v14];
      }
      else
      {
        uint64_t v16 = &v4[~v9];
        do
        {
          char v17 = *--v4;
          (v16--)[(void)v14] = v17;
        }
        while (v4 != (unsigned char *)v9);
        long long v4 = *v8;
      }
      *((void *)this + 2) = v14;
      *((void *)this + 3) = v7;
      *((void *)this + 4) = v15;
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *long long v4 = v2;
      uint64_t v7 = (uint64_t)(v4 + 1);
    }
    *((void *)this + 3) = v7;
  }
}

unint64_t ZinIrConstData::GetStdVector<e4m3_t>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::vector<e4m3_t>::vector(a2, v4);
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (result <= i) {
      break;
    }
    *(unsigned char *)(*a2 + i) = ZinIrConstData::GetDataAt<e4m3_t>(a1);
  }
  return result;
}

void sub_21114C2F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinIrConstData::GetStdVector<half>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  std::vector<half>::vector(a2, v4);
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (result <= i) {
      break;
    }
    ZinIrConstData::GetDataAt<half>(a1);
    *(_WORD *)(*a2 + 2 * i) = v7;
  }
  return result;
}

void sub_21114C3C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream4::~ZinIrWeightDataBitStream4(ZinIrWeightDataBitStream4 *this)
{
  *(void *)this = &unk_26C3526F8;
  char v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C3526F8;
  char v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrWeight::Dilate(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  if (a2 == 1 && a3 == 1) {
    operator new();
  }
  if (!a5) {
    operator new();
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      ZinIrWeight::DilateUnpalettizedWeightData<signed char>(a1, a2, a3, a4, &v16);
      goto LABEL_12;
    case 2:
      ZinIrWeight::DilateUnpalettizedWeightData<unsigned char>(a1, a2, a3, a4, &v16);
      goto LABEL_12;
    case 4:
      if (*a4) {
        goto LABEL_29;
      }
      ZinIrWeight::DilateUnpalettizedWeightData<half>(a1, a2, a3, a4, &v16);
      goto LABEL_12;
    case 5:
      if (*a4) {
        goto LABEL_29;
      }
      ZinIrWeight::DilateUnpalettizedWeightData<e4m3_t>(a1, a2, a3, a4, &v16);
      goto LABEL_12;
    case 6:
      if (*a4) {
LABEL_29:
      }
        ZinAssertImpl("Zero point only exists in asymmetrically quantized kernel.");
      ZinIrWeight::DilateUnpalettizedWeightData<float>(a1, a2, a3, a4, &v16);
      goto LABEL_12;
    case 7:
    case 8:
    case 9:
    case 0xA:
      ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(a1, a2, a3, &v16);
      goto LABEL_12;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream2>(a1, a2, a3, &v16);
      goto LABEL_12;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream3>(a1, a2, a3, &v16);
      goto LABEL_12;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream4>(a1, a2, a3, &v16);
      goto LABEL_12;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream6>(a1, a2, a3, &v16);
      goto LABEL_12;
    case 0x1B:
      ZinIrWeight::DilatePalettizedWeightData<std::vector<unsigned char>>(a1, a2, a3, &v16);
LABEL_12:
      __int16 v7 = (std::__shared_weak_count *)v16.n128_u64[1];
      if (v16.n128_u64[0]) {
        operator new();
      }
      *a6 = 0;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      break;
    default:
      BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v8) {
        ZinIrWeight::Dilate(v8, v9, v10, v11, v12, v13, v14, v15);
      }
      *a6 = 0;
      break;
  }
}

void sub_21114C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MEMORY[0x21667D3C0](v10, 0x10B3C4034FA82A5);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<float>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v38 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v38 + 1;
  unint64_t v33 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v10 = v33 + 1;
  uint64_t v11 = *a4;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v50, v34 * v7 * v8 * (v38 + 1) * (v33 + 1));
  uint64_t v30 = v7;
  if (v7 >= 1)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v38 + 1;
    }
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v33 + 1;
    }
    uint64_t v29 = 4 * v34 * v8 * v10 * v9;
    uint64_t v31 = 0;
    uint64_t v32 = 4 * v8 * v9 * v10;
    uint64_t v36 = 4 * v8 * v9;
    uint64_t v37 = v14;
    uint64_t v41 = v13;
    do
    {
      if (v34 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v35 = v31;
        do
        {
          if (v33 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v15 = 0;
            uint64_t v39 = v35;
            do
            {
              if (v38 <= 0x7FFFFFFFFFFFFFFELL)
              {
                uint64_t v42 = v39;
                unint64_t v43 = 0;
                do
                {
                  if (v8 >= 1)
                  {
                    uint64_t v16 = 0;
                    uint64_t v17 = v42;
                    do
                    {
                      if (v43 % a2 || v15 % a3)
                      {
                        if (v11)
                        {
                          ZinIrVector::GetAt<float>(*a4, v12);
                          int v19 = v18;
                        }
                        else
                        {
                          int v19 = 0;
                        }
                        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        uint64_t v21 = (_DWORD *)(v51 + v17);
                        if (!v20) {
                          uint64_t v21 = v50;
                        }
                        _DWORD *v21 = v19;
                      }
                      else
                      {
                        *(void *)&long long v46 = v12;
                        *((void *)&v46 + 1) = v44;
                        unint64_t v47 = v15 / a3;
                        unint64_t v48 = v43 / a2;
                        uint64_t v49 = v16;
                        uint64_t v22 = (**(uint64_t (***)(void))a1)();
                        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v22)&& *a4)
                        {
                          ZinIrVector::GetAt<float>(*a4, v12);
                        }
                        else
                        {
                          ZinIrWeightBase::GetAt<float>(a1);
                        }
                        int v24 = v23;
                        int v25 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v26 = (_DWORD *)(v51 + v17);
                        if (!v25) {
                          long long v26 = v50;
                        }
                        *long long v26 = v24;
                      }
                      ++v16;
                      v17 += 4;
                    }
                    while (v8 != v16);
                  }
                  v42 += 4 * v8;
                  ++v43;
                }
                while (v43 != v41);
              }
              ++v15;
              v39 += v36;
            }
            while (v15 != v37);
          }
          v35 += v32;
          ++v44;
        }
        while (v44 != v34);
      }
      ++v12;
      v31 += v29;
    }
    while (v12 != v30);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v50, &v46);
  *a5 = v46;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v50);
}

void sub_21114CB70(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<half>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v38 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v38 + 1;
  unint64_t v33 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v10 = v33 + 1;
  uint64_t v11 = *a4;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v50, v34 * v7 * v8 * (v38 + 1) * (v33 + 1));
  uint64_t v30 = v7;
  if (v7 >= 1)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v38 + 1;
    }
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v33 + 1;
    }
    uint64_t v29 = 2 * v34 * v8 * v10 * v9;
    uint64_t v31 = 0;
    uint64_t v32 = 2 * v8 * v9 * v10;
    uint64_t v36 = 2 * v8 * v9;
    uint64_t v37 = v14;
    uint64_t v41 = v13;
    do
    {
      if (v34 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v35 = v31;
        do
        {
          if (v33 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v15 = 0;
            uint64_t v39 = v35;
            do
            {
              if (v38 <= 0x7FFFFFFFFFFFFFFELL)
              {
                uint64_t v42 = v39;
                unint64_t v43 = 0;
                do
                {
                  if (v8 >= 1)
                  {
                    uint64_t v16 = 0;
                    uint64_t v17 = v42;
                    do
                    {
                      if (v43 % a2 || v15 % a3)
                      {
                        if (v11)
                        {
                          ZinIrVector::GetAt<half>(*a4, v12);
                          __int16 v19 = v18;
                        }
                        else
                        {
                          __int16 v19 = 0;
                        }
                        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        uint64_t v21 = (_WORD *)(v51 + v17);
                        if (!v20) {
                          uint64_t v21 = v50;
                        }
                        _WORD *v21 = v19;
                      }
                      else
                      {
                        *(void *)&long long v46 = v12;
                        *((void *)&v46 + 1) = v44;
                        unint64_t v47 = v15 / a3;
                        unint64_t v48 = v43 / a2;
                        uint64_t v49 = v16;
                        uint64_t v22 = (**(uint64_t (***)(void))a1)();
                        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v22)&& *a4)
                        {
                          ZinIrVector::GetAt<half>(*a4, v12);
                        }
                        else
                        {
                          ZinIrWeightBase::GetAt<half>(a1);
                        }
                        __int16 v24 = v23;
                        int v25 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v26 = (_WORD *)(v51 + v17);
                        if (!v25) {
                          long long v26 = v50;
                        }
                        *long long v26 = v24;
                      }
                      ++v16;
                      v17 += 2;
                    }
                    while (v8 != v16);
                  }
                  v42 += 2 * v8;
                  ++v43;
                }
                while (v43 != v41);
              }
              ++v15;
              v39 += v36;
            }
            while (v15 != v37);
          }
          v35 += v32;
          ++v44;
        }
        while (v44 != v34);
      }
      ++v12;
      v31 += v29;
    }
    while (v12 != v30);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v50, &v46);
  *a5 = v46;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v50);
}

void sub_21114CF58(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<e4m3_t>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v34 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v34 + 1;
  unint64_t v29 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v30 = *(void *)(a1 + 64);
  uint64_t v10 = v29 + 1;
  uint64_t v11 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v45, v30 * v7 * v8 * (v34 + 1) * (v29 + 1));
  uint64_t v26 = v7;
  if (v7 >= 1)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v37 = v13;
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v29 + 1;
    }
    uint64_t v25 = v30 * v8 * v10 * v9;
    uint64_t v32 = v8 * v9;
    uint64_t v33 = v14;
    uint64_t v27 = 0;
    uint64_t v28 = v8 * v9 * v10;
    do
    {
      if (v30 >= 1)
      {
        uint64_t v39 = 0;
        uint64_t v31 = v27;
        do
        {
          if (v29 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v15 = 0;
            uint64_t v35 = v31;
            do
            {
              if (v34 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v38 = 0;
                uint64_t v16 = v35;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v38 % a2 || v15 % a3)
                      {
                        if (v11) {
                          char v18 = ZinIrVector::GetAt<e4m3_t>(*a4, v12);
                        }
                        else {
                          char v18 = 0;
                        }
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(void *)&long long v41 = v12;
                        *((void *)&v41 + 1) = v39;
                        unint64_t v42 = v15 / a3;
                        unint64_t v43 = v38 / a2;
                        uint64_t v44 = i;
                        uint64_t v21 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v41);
                        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v21)&& *a4)
                        {
                          char v22 = ZinIrVector::GetAt<e4m3_t>(*a4, v12);
                        }
                        else
                        {
                          char v22 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
                        }
                        char v18 = v22;
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      int v20 = (unsigned char *)(v46 + v16 + i);
                      if (!v19) {
                        int v20 = v45;
                      }
                      *int v20 = v18;
                    }
                  }
                  v16 += v8;
                  ++v38;
                }
                while (v38 != v37);
              }
              ++v15;
              v35 += v32;
            }
            while (v15 != v33);
          }
          v31 += v28;
          ++v39;
        }
        while (v39 != v30);
      }
      ++v12;
      v27 += v25;
    }
    while (v12 != v26);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v45, &v41);
  *a5 = v41;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v45);
}

void sub_21114D308(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<signed char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v34 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v34 + 1;
  unint64_t v29 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v30 = *(void *)(a1 + 64);
  uint64_t v10 = v29 + 1;
  uint64_t v11 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v45, v30 * v7 * v8 * (v34 + 1) * (v29 + 1));
  uint64_t v26 = v7;
  if (v7 >= 1)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v37 = v13;
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v29 + 1;
    }
    uint64_t v25 = v30 * v8 * v10 * v9;
    uint64_t v32 = v8 * v9;
    uint64_t v33 = v14;
    uint64_t v27 = 0;
    uint64_t v28 = v8 * v9 * v10;
    do
    {
      if (v30 >= 1)
      {
        uint64_t v39 = 0;
        uint64_t v31 = v27;
        do
        {
          if (v29 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v15 = 0;
            uint64_t v35 = v31;
            do
            {
              if (v34 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v38 = 0;
                uint64_t v16 = v35;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v38 % a2 || v15 % a3)
                      {
                        if (v11) {
                          char v18 = ZinIrVector::GetAt<signed char>(*a4, v12);
                        }
                        else {
                          char v18 = 0;
                        }
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(void *)&long long v41 = v12;
                        *((void *)&v41 + 1) = v39;
                        unint64_t v42 = v15 / a3;
                        unint64_t v43 = v38 / a2;
                        uint64_t v44 = i;
                        uint64_t v21 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v41);
                        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v21)&& *a4)
                        {
                          char v22 = ZinIrVector::GetAt<signed char>(*a4, v12);
                        }
                        else
                        {
                          char v22 = ZinIrWeightBase::GetAt<signed char>(a1);
                        }
                        char v18 = v22;
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      int v20 = (unsigned char *)(v46 + v16 + i);
                      if (!v19) {
                        int v20 = v45;
                      }
                      *int v20 = v18;
                    }
                  }
                  v16 += v8;
                  ++v38;
                }
                while (v38 != v37);
              }
              ++v15;
              v35 += v32;
            }
            while (v15 != v33);
          }
          v31 += v28;
          ++v39;
        }
        while (v39 != v30);
      }
      ++v12;
      v27 += v25;
    }
    while (v12 != v26);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v45, &v41);
  *a5 = v41;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v45);
}

void sub_21114D6BC(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DilateUnpalettizedWeightData<unsigned char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    ZinAssertImpl("wrong format type: expecting unpalettized format");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v34 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v34 + 1;
  unint64_t v29 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v30 = *(void *)(a1 + 64);
  uint64_t v10 = v29 + 1;
  uint64_t v11 = *a4;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v45, v30 * v7 * v8 * (v34 + 1) * (v29 + 1));
  uint64_t v26 = v7;
  if (v7 >= 1)
  {
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v37 = v13;
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v29 + 1;
    }
    uint64_t v25 = v30 * v8 * v10 * v9;
    uint64_t v32 = v8 * v9;
    uint64_t v33 = v14;
    uint64_t v27 = 0;
    uint64_t v28 = v8 * v9 * v10;
    do
    {
      if (v30 >= 1)
      {
        uint64_t v39 = 0;
        uint64_t v31 = v27;
        do
        {
          if (v29 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v15 = 0;
            uint64_t v35 = v31;
            do
            {
              if (v34 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v38 = 0;
                uint64_t v16 = v35;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v38 % a2 || v15 % a3)
                      {
                        if (v11) {
                          char v18 = ZinIrVector::GetAt<unsigned char>(*a4, v12);
                        }
                        else {
                          char v18 = 0;
                        }
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      else
                      {
                        *(void *)&long long v41 = v12;
                        *((void *)&v41 + 1) = v39;
                        unint64_t v42 = v15 / a3;
                        unint64_t v43 = v38 / a2;
                        uint64_t v44 = i;
                        uint64_t v21 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v41);
                        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v21)&& *a4)
                        {
                          char v22 = ZinIrVector::GetAt<unsigned char>(*a4, v12);
                        }
                        else
                        {
                          char v22 = ZinIrWeightBase::GetAt<unsigned char>(a1);
                        }
                        char v18 = v22;
                        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      }
                      int v20 = (unsigned char *)(v46 + v16 + i);
                      if (!v19) {
                        int v20 = v45;
                      }
                      *int v20 = v18;
                    }
                  }
                  v16 += v8;
                  ++v38;
                }
                while (v38 != v37);
              }
              ++v15;
              v35 += v32;
            }
            while (v15 != v33);
          }
          v31 += v28;
          ++v39;
        }
        while (v39 != v30);
      }
      ++v12;
      v27 += v25;
    }
    while (v12 != v26);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v45, &v41);
  *a5 = v41;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v45);
}

void sub_21114DA6C(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v1 - 128);
  _Unwind_Resume(a1);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v39 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v39 + 1;
  unint64_t v34 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v10 = v34 + 1;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v31 = v7;
  uint64_t v54 = v35 * v7 * v8 * (v39 + 1) * (v34 + 1);
  uint64_t v55 = &unk_26C351778;
  size_t v11 = ZinDivRoundUp(v54, 8uLL);
  uint64_t v45 = a1;
  unint64_t v29 = a4;
  v48.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v53, v11, &v48);
  uint64_t v52 = 0;
  if (v31 >= 1)
  {
    v44.n128_u64[0] = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v39 + 1;
    }
    uint64_t v42 = v12;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v30 = v35 * v8 * v10 * v9;
    uint64_t v37 = v8 * v9;
    uint64_t v38 = v13;
    uint64_t v32 = 0;
    uint64_t v33 = v8 * v9 * v10;
    do
    {
      if (v35 >= 1)
      {
        v44.n128_u64[1] = 0;
        uint64_t v36 = v32;
        do
        {
          if (v34 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v14 = 0;
            uint64_t v40 = v36;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v43 = 0;
                uint64_t v15 = v40;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v15 + i >= 0) {
                        uint64_t v17 = v15 + i;
                      }
                      else {
                        uint64_t v17 = v15 + i + 7;
                      }
                      if (!(v43 % a2) && !(v14 % a3))
                      {
                        char v18 = v53[0];
                        __n128 v48 = v44;
                        unint64_t v49 = v14 / a3;
                        unint64_t v50 = v43 / a2;
                        uint64_t v51 = i;
                        unint64_t v19 = (**(uint64_t (***)(uint64_t, __n128 *))v45)(v45, &v48);
                        if (((*(uint64_t (**)(void, unint64_t))(**(void **)(v45 + 136) + 168))(*(void *)(v45 + 136), v19) & 1) == 0)
                        {
                          char v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(v45, v19);
                          ZinIrWeightDataBitStream1::push_back((ZinIrWeightDataBitStream1 *)&v55, v20 & 1);
                          v18[v17 >> 3] |= 1 << (v15 + i - 8 * (v17 >> 3));
                          ++v52;
                        }
                      }
                    }
                  }
                  v15 += v8;
                  ++v43;
                }
                while (v43 != v42);
              }
              ++v14;
              v40 += v37;
            }
            while (v14 != v38);
          }
          v36 += v33;
          ++v44.n128_u64[1];
        }
        while (v44.n128_u64[1] != v35);
      }
      v32 += v30;
      ++v44.n128_u64[0];
    }
    while (v44.n128_u64[0] != v31);
  }
  switch(*(_DWORD *)(v45 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
LABEL_38:
      __n128 v47 = v48;
      (*(void (**)(unint64_t, __n128))(*(void *)v48.n128_u64[0] + 16))(v48.n128_u64[0], v48);
      *unint64_t v29 = v47;
      break;
    default:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v21) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      v29->n128_u64[0] = 0;
      v29->n128_u64[1] = 0;
      break;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  uint64_t v55 = &unk_26C3526F8;
  if (*((void *)&v56 + 1))
  {
    *(void *)&long long v57 = *((void *)&v56 + 1);
    operator delete(*((void **)&v56 + 1));
  }
}

void sub_21114DF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29)
{
  uint64_t v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(void *)(v29 - 160) = v31;
    operator delete(v31);
  }
  *(void *)(v29 - 136) = &unk_26C3526F8;
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream2>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v39 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v39 + 1;
  unint64_t v34 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v10 = v34 + 1;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v31 = v7;
  uint64_t v54 = v35 * v7 * v8 * (v39 + 1) * (v34 + 1);
  uint64_t v55 = &unk_26C3517A8;
  size_t v11 = ZinDivRoundUp(v54, 8uLL);
  uint64_t v45 = a1;
  uint64_t v29 = a4;
  v48.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v53, v11, &v48);
  uint64_t v52 = 0;
  if (v31 >= 1)
  {
    v44.n128_u64[0] = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v39 + 1;
    }
    uint64_t v42 = v12;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v30 = v35 * v8 * v10 * v9;
    uint64_t v37 = v8 * v9;
    uint64_t v38 = v13;
    uint64_t v32 = 0;
    uint64_t v33 = v8 * v9 * v10;
    do
    {
      if (v35 >= 1)
      {
        v44.n128_u64[1] = 0;
        uint64_t v36 = v32;
        do
        {
          if (v34 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v14 = 0;
            uint64_t v40 = v36;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v43 = 0;
                uint64_t v15 = v40;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v15 + i >= 0) {
                        uint64_t v17 = v15 + i;
                      }
                      else {
                        uint64_t v17 = v15 + i + 7;
                      }
                      if (!(v43 % a2) && !(v14 % a3))
                      {
                        char v18 = v53[0];
                        __n128 v48 = v44;
                        unint64_t v49 = v14 / a3;
                        unint64_t v50 = v43 / a2;
                        uint64_t v51 = i;
                        unint64_t v19 = (**(uint64_t (***)(uint64_t, __n128 *))v45)(v45, &v48);
                        if (((*(uint64_t (**)(void, unint64_t))(**(void **)(v45 + 136) + 168))(*(void *)(v45 + 136), v19) & 1) == 0)
                        {
                          char v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(v45, v19);
                          ZinIrWeightDataBitStream2::push_back((ZinIrWeightDataBitStream2 *)&v55, v20 & 3);
                          v18[v17 >> 3] |= 1 << (v15 + i - 8 * (v17 >> 3));
                          ++v52;
                        }
                      }
                    }
                  }
                  v15 += v8;
                  ++v43;
                }
                while (v43 != v42);
              }
              ++v14;
              v40 += v37;
            }
            while (v14 != v38);
          }
          v36 += v33;
          ++v44.n128_u64[1];
        }
        while (v44.n128_u64[1] != v35);
      }
      v32 += v30;
      ++v44.n128_u64[0];
    }
    while (v44.n128_u64[0] != v31);
  }
  switch(*(_DWORD *)(v45 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
LABEL_38:
      __n128 v47 = v48;
      (*(void (**)(unint64_t, __n128))(*(void *)v48.n128_u64[0] + 16))(v48.n128_u64[0], v48);
      *uint64_t v29 = v47;
      break;
    default:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v21) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      v29->n128_u64[0] = 0;
      v29->n128_u64[1] = 0;
      break;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  uint64_t v55 = &unk_26C3526F8;
  if (*((void *)&v56 + 1))
  {
    *(void *)&long long v57 = *((void *)&v56 + 1);
    operator delete(*((void **)&v56 + 1));
  }
}

void sub_21114E564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29)
{
  uint64_t v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(void *)(v29 - 160) = v31;
    operator delete(v31);
  }
  *(void *)(v29 - 136) = &unk_26C3526F8;
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream3>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v39 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v39 + 1;
  unint64_t v34 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v10 = v34 + 1;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v31 = v7;
  uint64_t v54 = v35 * v7 * v8 * (v39 + 1) * (v34 + 1);
  uint64_t v55 = &unk_26C32C000;
  size_t v11 = ZinDivRoundUp(v54, 8uLL);
  uint64_t v45 = a1;
  uint64_t v29 = a4;
  v48.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v53, v11, &v48);
  uint64_t v52 = 0;
  if (v31 >= 1)
  {
    v44.n128_u64[0] = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v39 + 1;
    }
    uint64_t v42 = v12;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v30 = v35 * v8 * v10 * v9;
    uint64_t v37 = v8 * v9;
    uint64_t v38 = v13;
    uint64_t v32 = 0;
    uint64_t v33 = v8 * v9 * v10;
    do
    {
      if (v35 >= 1)
      {
        v44.n128_u64[1] = 0;
        uint64_t v36 = v32;
        do
        {
          if (v34 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v14 = 0;
            uint64_t v40 = v36;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v43 = 0;
                uint64_t v15 = v40;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v15 + i >= 0) {
                        uint64_t v17 = v15 + i;
                      }
                      else {
                        uint64_t v17 = v15 + i + 7;
                      }
                      if (!(v43 % a2) && !(v14 % a3))
                      {
                        char v18 = v53[0];
                        __n128 v48 = v44;
                        unint64_t v49 = v14 / a3;
                        unint64_t v50 = v43 / a2;
                        uint64_t v51 = i;
                        uint64_t v19 = (**(uint64_t (***)(uint64_t, __n128 *))v45)(v45, &v48);
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v45 + 136) + 168))(*(void *)(v45 + 136), v19) & 1) == 0)
                        {
                          char v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(v45, v19);
                          ZinIrWeightDataBitStream3::push_back((ZinIrWeightDataBitStream3 *)&v55, v20 & 7);
                          v18[v17 >> 3] |= 1 << (v15 + i - 8 * (v17 >> 3));
                          ++v52;
                        }
                      }
                    }
                  }
                  v15 += v8;
                  ++v43;
                }
                while (v43 != v42);
              }
              ++v14;
              v40 += v37;
            }
            while (v14 != v38);
          }
          v36 += v33;
          ++v44.n128_u64[1];
        }
        while (v44.n128_u64[1] != v35);
      }
      v32 += v30;
      ++v44.n128_u64[0];
    }
    while (v44.n128_u64[0] != v31);
  }
  switch(*(_DWORD *)(v45 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
LABEL_38:
      __n128 v47 = v48;
      (*(void (**)(unint64_t, __n128))(*(void *)v48.n128_u64[0] + 16))(v48.n128_u64[0], v48);
      *uint64_t v29 = v47;
      break;
    default:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v21) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      v29->n128_u64[0] = 0;
      v29->n128_u64[1] = 0;
      break;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  uint64_t v55 = &unk_26C3526F8;
  if (*((void *)&v56 + 1))
  {
    *(void *)&long long v57 = *((void *)&v56 + 1);
    operator delete(*((void **)&v56 + 1));
  }
}

void sub_21114EB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29)
{
  uint64_t v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(void *)(v29 - 160) = v31;
    operator delete(v31);
  }
  *(void *)(v29 - 136) = &unk_26C3526F8;
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream4>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v39 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v39 + 1;
  unint64_t v34 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v10 = v34 + 1;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v31 = v7;
  uint64_t v54 = v35 * v7 * v8 * (v39 + 1) * (v34 + 1);
  uint64_t v55 = &unk_26C3517D8;
  size_t v11 = ZinDivRoundUp(v54, 8uLL);
  uint64_t v45 = a1;
  uint64_t v29 = a4;
  v48.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v53, v11, &v48);
  uint64_t v52 = 0;
  if (v31 >= 1)
  {
    v44.n128_u64[0] = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v39 + 1;
    }
    uint64_t v42 = v12;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v30 = v35 * v8 * v10 * v9;
    uint64_t v37 = v8 * v9;
    uint64_t v38 = v13;
    uint64_t v32 = 0;
    uint64_t v33 = v8 * v9 * v10;
    do
    {
      if (v35 >= 1)
      {
        v44.n128_u64[1] = 0;
        uint64_t v36 = v32;
        do
        {
          if (v34 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v14 = 0;
            uint64_t v40 = v36;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v43 = 0;
                uint64_t v15 = v40;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v15 + i >= 0) {
                        uint64_t v17 = v15 + i;
                      }
                      else {
                        uint64_t v17 = v15 + i + 7;
                      }
                      if (!(v43 % a2) && !(v14 % a3))
                      {
                        char v18 = v53[0];
                        __n128 v48 = v44;
                        unint64_t v49 = v14 / a3;
                        unint64_t v50 = v43 / a2;
                        uint64_t v51 = i;
                        unint64_t v19 = (**(uint64_t (***)(uint64_t, __n128 *))v45)(v45, &v48);
                        if (((*(uint64_t (**)(void, unint64_t))(**(void **)(v45 + 136) + 168))(*(void *)(v45 + 136), v19) & 1) == 0)
                        {
                          char v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(v45, v19);
                          ZinIrWeightDataBitStream4::push_back((ZinIrWeightDataBitStream4 *)&v55, v20 & 0xF);
                          v18[v17 >> 3] |= 1 << (v15 + i - 8 * (v17 >> 3));
                          ++v52;
                        }
                      }
                    }
                  }
                  v15 += v8;
                  ++v43;
                }
                while (v43 != v42);
              }
              ++v14;
              v40 += v37;
            }
            while (v14 != v38);
          }
          v36 += v33;
          ++v44.n128_u64[1];
        }
        while (v44.n128_u64[1] != v35);
      }
      v32 += v30;
      ++v44.n128_u64[0];
    }
    while (v44.n128_u64[0] != v31);
  }
  switch(*(_DWORD *)(v45 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
LABEL_38:
      __n128 v47 = v48;
      (*(void (**)(unint64_t, __n128))(*(void *)v48.n128_u64[0] + 16))(v48.n128_u64[0], v48);
      *uint64_t v29 = v47;
      break;
    default:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v21) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      v29->n128_u64[0] = 0;
      v29->n128_u64[1] = 0;
      break;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  uint64_t v55 = &unk_26C3526F8;
  if (*((void *)&v56 + 1))
  {
    *(void *)&long long v57 = *((void *)&v56 + 1);
    operator delete(*((void **)&v56 + 1));
  }
}

void sub_21114F124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29)
{
  uint64_t v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(void *)(v29 - 160) = v31;
    operator delete(v31);
  }
  *(void *)(v29 - 136) = &unk_26C3526F8;
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream6>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (*(_DWORD *)(a1 + 8) - 7) > 0x14) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v39 = (*(void *)(a1 + 80) - 1) * a2;
  uint64_t v9 = v39 + 1;
  unint64_t v34 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v10 = v34 + 1;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v31 = v7;
  uint64_t v54 = v35 * v7 * v8 * (v39 + 1) * (v34 + 1);
  uint64_t v55 = &unk_26C351808;
  size_t v11 = ZinDivRoundUp(v54, 8uLL);
  uint64_t v45 = a1;
  uint64_t v29 = a4;
  v48.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v53, v11, &v48);
  uint64_t v52 = 0;
  if (v31 >= 1)
  {
    v44.n128_u64[0] = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v39 + 1;
    }
    uint64_t v42 = v12;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v34 + 1;
    }
    uint64_t v30 = v35 * v8 * v10 * v9;
    uint64_t v37 = v8 * v9;
    uint64_t v38 = v13;
    uint64_t v32 = 0;
    uint64_t v33 = v8 * v9 * v10;
    do
    {
      if (v35 >= 1)
      {
        v44.n128_u64[1] = 0;
        uint64_t v36 = v32;
        do
        {
          if (v34 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v14 = 0;
            uint64_t v40 = v36;
            do
            {
              if (v39 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v43 = 0;
                uint64_t v15 = v40;
                do
                {
                  if (v8 >= 1)
                  {
                    for (uint64_t i = 0; i != v8; ++i)
                    {
                      if (v15 + i >= 0) {
                        uint64_t v17 = v15 + i;
                      }
                      else {
                        uint64_t v17 = v15 + i + 7;
                      }
                      if (!(v43 % a2) && !(v14 % a3))
                      {
                        char v18 = v53[0];
                        __n128 v48 = v44;
                        unint64_t v49 = v14 / a3;
                        unint64_t v50 = v43 / a2;
                        uint64_t v51 = i;
                        uint64_t v19 = (**(uint64_t (***)(uint64_t, __n128 *))v45)(v45, &v48);
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v45 + 136) + 168))(*(void *)(v45 + 136), v19) & 1) == 0)
                        {
                          char v20 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(v45, v19);
                          ZinIrWeightDataBitStream6::push_back((ZinIrWeightDataBitStream6 *)&v55, v20 & 0x3F);
                          v18[v17 >> 3] |= 1 << (v15 + i - 8 * (v17 >> 3));
                          ++v52;
                        }
                      }
                    }
                  }
                  v15 += v8;
                  ++v43;
                }
                while (v43 != v42);
              }
              ++v14;
              v40 += v37;
            }
            while (v14 != v38);
          }
          v36 += v33;
          ++v44.n128_u64[1];
        }
        while (v44.n128_u64[1] != v35);
      }
      v32 += v30;
      ++v44.n128_u64[0];
    }
    while (v44.n128_u64[0] != v31);
  }
  switch(*(_DWORD *)(v45 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
      goto LABEL_38;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v55, (uint64_t)v53, &v52, (unint64_t *)&v54, &v48);
LABEL_38:
      __n128 v47 = v48;
      (*(void (**)(unint64_t, __n128))(*(void *)v48.n128_u64[0] + 16))(v48.n128_u64[0], v48);
      *uint64_t v29 = v47;
      break;
    default:
      BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v21) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      v29->n128_u64[0] = 0;
      v29->n128_u64[1] = 0;
      break;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  uint64_t v55 = &unk_26C3526F8;
  if (*((void *)&v56 + 1))
  {
    *(void *)&long long v57 = *((void *)&v56 + 1);
    operator delete(*((void **)&v56 + 1));
  }
}

void sub_21114F704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29)
{
  uint64_t v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(void *)(v29 - 160) = v31;
    operator delete(v31);
  }
  *(void *)(v29 - 136) = &unk_26C3526F8;
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::DilatePalettizedWeightData<std::vector<unsigned char>>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!v5 || (uint64_t v6 = a1, (*(_DWORD *)(a1 + 8) - 7) > 0x14)) {
    ZinAssertImpl("wrong format type: expecting palettized format");
  }
  if (*(void *)(v5 + 24) >= 2uLL) {
    ZinAssertImpl("Error: dilation is not supported for vector palettized kernels yet");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 88);
  unint64_t v47 = (*(void *)(a1 + 80) - 1) * a2;
  unint64_t v43 = (*(void *)(a1 + 72) - 1) * a3;
  uint64_t v44 = *(void *)(a1 + 64);
  v65 = 0;
  v66 = 0;
  unint64_t v67 = 0;
  uint64_t v41 = v7;
  uint64_t v42 = v43 + 1;
  uint64_t v9 = v8;
  uint64_t v45 = v47 + 1;
  uint64_t v64 = v44 * v7 * v8 * (v47 + 1) * (v43 + 1);
  size_t v10 = ZinDivRoundUp(v64, 8uLL);
  uint64_t v40 = a4;
  v58.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(v63, v10, &v58);
  uint64_t v62 = 0;
  if (v41 >= 1)
  {
    v53.n128_u64[0] = 0;
    uint64_t v11 = v47 + 1;
    if (v45 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v50 = v11;
    uint64_t v51 = v6;
    uint64_t v12 = v43 + 1;
    if (v42 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v46 = v12;
    do
    {
      if (v44 >= 1)
      {
        v53.n128_u64[1] = 0;
        do
        {
          if (v43 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v56 = 0;
            do
            {
              if (v47 <= 0x7FFFFFFFFFFFFFFELL)
              {
                unint64_t v52 = 0;
                do
                {
                  if (v9 >= 1)
                  {
                    uint64_t v13 = 0;
                    unint64_t v14 = (v52 + (v56 + (v53.n128_u64[1] + v53.n128_u64[0] * v44) * v42) * v45) * v9;
                    do
                    {
                      if ((uint64_t)(v13 + v14) < 0 != __OFADD__(v13, v14)) {
                        uint64_t v15 = v13 + v14 + 7;
                      }
                      else {
                        uint64_t v15 = v13 + v14;
                      }
                      if (!(v52 % a2) && !(v56 % a3))
                      {
                        uint64_t v54 = v63[0];
                        __n128 v58 = v53;
                        unint64_t v59 = v56 / a3;
                        unint64_t v60 = v52 / a2;
                        uint64_t v61 = v13;
                        uint64_t v16 = (**(uint64_t (***)(uint64_t, __n128 *))v6)(v6, &v58);
                        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 136) + 168))(*(void *)(v6 + 136), v16) & 1) == 0)
                        {
                          char v17 = ZinIrWeightBase::GetAt<unsigned char>(v6);
                          char v18 = v17;
                          uint64_t v19 = v66;
                          if (v66 >= v67)
                          {
                            unint64_t v21 = (unint64_t)v65;
                            uint64_t v22 = v66 - v65;
                            uint64_t v23 = v66 - v65 + 1;
                            if (v23 < 0) {
                              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                            }
                            unint64_t v24 = v67 - v65;
                            if (2 * (v67 - v65) > (unint64_t)v23) {
                              uint64_t v23 = 2 * v24;
                            }
                            if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
                              size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              size_t v25 = v23;
                            }
                            if (v25)
                            {
                              size_t v49 = v25;
                              uint64_t v26 = (char *)operator new(v25);
                              size_t v25 = v49;
                            }
                            else
                            {
                              uint64_t v26 = 0;
                            }
                            uint64_t v27 = &v26[v22];
                            v26[v22] = v18;
                            uint64_t v20 = (uint64_t)&v26[v22 + 1];
                            if (v19 == (char *)v21)
                            {
                              uint64_t v6 = v51;
                            }
                            else
                            {
                              uint64_t v28 = &v19[~v21];
                              uint64_t v6 = v51;
                              do
                              {
                                char v29 = *--v19;
                                (v28--)[(void)v26] = v29;
                              }
                              while (v19 != (char *)v21);
                              uint64_t v19 = v65;
                              uint64_t v27 = v26;
                            }
                            v65 = v27;
                            v66 = (char *)v20;
                            unint64_t v67 = &v26[v25];
                            if (v19)
                            {
                              uint64_t v30 = v19;
                              uint64_t v31 = v20;
                              operator delete(v30);
                              uint64_t v20 = v31;
                            }
                          }
                          else
                          {
                            char *v66 = v17;
                            uint64_t v20 = (uint64_t)(v19 + 1);
                            uint64_t v6 = v51;
                          }
                          v66 = (char *)v20;
                          v54[v15 >> 3] |= 1 << (v13 + v14 - 8 * (v15 >> 3));
                          ++v62;
                        }
                      }
                      ++v13;
                    }
                    while (v13 != v9);
                  }
                  ++v52;
                }
                while (v52 != v50);
              }
              ++v56;
            }
            while (v56 != v46);
          }
          ++v53.n128_u64[1];
        }
        while (v53.n128_u64[1] != v44);
      }
      ++v53.n128_u64[0];
    }
    while (v53.n128_u64[0] != v41);
  }
  switch(*(_DWORD *)(v6 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
      goto LABEL_54;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
      goto LABEL_54;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
      goto LABEL_54;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
      goto LABEL_54;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
      goto LABEL_54;
    case 0x1B:
      std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>((uint64_t)&v65, (uint64_t)v63, &v62, (unint64_t *)&v64, &v58);
LABEL_54:
      __n128 v57 = v58;
      (*(void (**)(unint64_t, __n128))(*(void *)v58.n128_u64[0] + 16))(v58.n128_u64[0], v58);
      *uint64_t v40 = v57;
      break;
    default:
      BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v32) {
        ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      v40->n128_u64[0] = 0;
      v40->n128_u64[1] = 0;
      break;
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
}

void sub_21114FD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long a31)
{
  uint64_t v33 = *(void **)(v31 - 152);
  if (v33)
  {
    *(void *)(v31 - 144) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v31 - 120);
  if (v34)
  {
    *(void *)(v31 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeight::HeightSplitDeconv(ZinIrWeight *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v5 = *((_DWORD *)this + 2);
  if ((v5 - 7) >= 0x15)
  {
    switch(v5)
    {
      case 1:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(this, a2, a3, &v26);
        break;
      case 2:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(this, a2, a3, &v26);
        break;
      case 4:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(this, a2, a3, &v26);
        break;
      case 5:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(this, a2, a3, &v26);
        break;
      case 6:
        ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(this, a2, a3, &v26);
        break;
      default:
        BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v18) {
          ZinIrWeight::Dilate(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        goto LABEL_4;
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if ((void)v26)
    {
      long long v17 = *(_OWORD *)((char *)this + 72);
      long long v26 = *(_OWORD *)((char *)this + 56);
      long long v27 = v17;
      uint64_t v28 = *((void *)this + 11);
      *(void *)&long long v27 = a3;
      operator new();
    }
    *a4 = 0;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinIrWeight::HeightSplitDeconv(v6, v7, v8, v9, v10, v11, v12, v13);
    }
LABEL_4:
    *a4 = 0;
  }
}

void sub_211150000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MEMORY[0x21667D3C0](v10, 0x10B3C4034FA82A5);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (a1[9] <= a2) {
    ZinAssertImpl("New weight should never expand beyond old weight.");
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v37, v9 * v8 * v7 * a1[8]);
  if (v39 != v38)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      uint64_t v13 = v38;
      unint64_t v14 = (char *)(v38 + v10);
      if (!v12) {
        unint64_t v14 = v37;
      }
      *(_DWORD *)unint64_t v14 = 0;
      ++v11;
      v10 += 4;
    }
    while (v11 < (v39 - v13) >> 2);
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v15 = a1[8];
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v9 * v7;
    uint64_t v18 = a1[7];
    do
    {
      *(void *)&long long v34 = 0;
      if (v18 >= 1)
      {
        for (uint64_t i = 0; i < v18; *(void *)&v34 = i)
        {
          *(void *)&long long v35 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            uint64_t v20 = v17 * (i + *((void *)&v34 + 1) * v8);
            uint64_t v21 = a2;
            do
            {
              uint64_t v22 = a1[10];
              BOOL v23 = v22 < 1;
              uint64_t v24 = v22 - 1;
              *((void *)&v35 + 1) = v24;
              if (!v23)
              {
                do
                {
                  uint64_t v25 = a1[11];
                  uint64_t v36 = v25 - 1;
                  if (v25 >= 1)
                  {
                    uint64_t v26 = 4 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<float>((uint64_t)a1);
                      int v28 = v27;
                      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v30 = (char *)(v38 + v26);
                      if (!v29) {
                        uint64_t v30 = v37;
                      }
                      ++v20;
                      *(_DWORD *)uint64_t v30 = v28;
                      uint64_t v31 = v36--;
                      v26 += 4;
                    }
                    while (v31 > 0);
                    uint64_t v24 = *((void *)&v35 + 1);
                  }
                  *((void *)&v35 + 1) = v24 - 1;
                  BOOL v23 = v24-- <= 0;
                }
                while (!v23);
                uint64_t v21 = v35;
              }
              *(void *)&long long v35 = v21 - 2;
              BOOL v23 = v21 <= 1;
              v21 -= 2;
            }
            while (!v23);
            uint64_t i = v34;
            uint64_t v18 = a1[7];
          }
          ++i;
        }
        uint64_t v16 = *((void *)&v34 + 1);
        uint64_t v15 = a1[8];
      }
      *((void *)&v34 + 1) = ++v16;
    }
    while (v16 < v15);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v37, &v33);
  *a4 = v33;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_2111502C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (a1[9] <= a2) {
    ZinAssertImpl("New weight should never expand beyond old weight.");
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v37, v9 * v8 * v7 * a1[8]);
  if (v39 != v38)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      uint64_t v13 = v38;
      unint64_t v14 = (char *)(v38 + v10);
      if (!v12) {
        unint64_t v14 = v37;
      }
      *(_WORD *)unint64_t v14 = 0;
      ++v11;
      v10 += 2;
    }
    while (v11 < (v39 - v13) >> 1);
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v15 = a1[8];
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v9 * v7;
    uint64_t v18 = a1[7];
    do
    {
      *(void *)&long long v34 = 0;
      if (v18 >= 1)
      {
        for (uint64_t i = 0; i < v18; *(void *)&v34 = i)
        {
          *(void *)&long long v35 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            uint64_t v20 = v17 * (i + *((void *)&v34 + 1) * v8);
            uint64_t v21 = a2;
            do
            {
              uint64_t v22 = a1[10];
              BOOL v23 = v22 < 1;
              uint64_t v24 = v22 - 1;
              *((void *)&v35 + 1) = v24;
              if (!v23)
              {
                do
                {
                  uint64_t v25 = a1[11];
                  uint64_t v36 = v25 - 1;
                  if (v25 >= 1)
                  {
                    uint64_t v26 = 2 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<half>((uint64_t)a1);
                      __int16 v28 = v27;
                      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v30 = (char *)(v38 + v26);
                      if (!v29) {
                        uint64_t v30 = v37;
                      }
                      ++v20;
                      *(_WORD *)uint64_t v30 = v28;
                      uint64_t v31 = v36--;
                      v26 += 2;
                    }
                    while (v31 > 0);
                    uint64_t v24 = *((void *)&v35 + 1);
                  }
                  *((void *)&v35 + 1) = v24 - 1;
                  BOOL v23 = v24-- <= 0;
                }
                while (!v23);
                uint64_t v21 = v35;
              }
              *(void *)&long long v35 = v21 - 2;
              BOOL v23 = v21 <= 1;
              v21 -= 2;
            }
            while (!v23);
            uint64_t i = v34;
            uint64_t v18 = a1[7];
          }
          ++i;
        }
        uint64_t v16 = *((void *)&v34 + 1);
        uint64_t v15 = a1[8];
      }
      *((void *)&v34 + 1) = ++v16;
    }
    while (v16 < v15);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v37, &v33);
  *a4 = v33;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_211150540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (a1[9] <= a2) {
    ZinAssertImpl("New weight should never expand beyond old weight.");
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    unint64_t v10 = 0;
    do
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      int v12 = (char *)(v34 + v10);
      if (!v11) {
        int v12 = v33;
      }
      *int v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v13 = a1[8];
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v9 * v7;
    uint64_t v16 = a1[7];
    do
    {
      *(void *)&long long v30 = 0;
      if (v16 >= 1)
      {
        for (uint64_t i = 0; i < v16; *(void *)&v30 = i)
        {
          *(void *)&long long v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            uint64_t v18 = v15 * (i + *((void *)&v30 + 1) * v8);
            uint64_t v19 = a2;
            do
            {
              uint64_t v20 = a1[10];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *((void *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = a1[11];
                  uint64_t v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      char v24 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)a1);
                      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v26 = (char *)(v34 + v18);
                      if (!v25) {
                        uint64_t v26 = v33;
                      }
                      ++v18;
                      *uint64_t v26 = v24;
                      uint64_t v27 = v32--;
                    }
                    while (v27 > 0);
                    uint64_t v22 = *((void *)&v31 + 1);
                  }
                  *((void *)&v31 + 1) = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t v19 = v31;
              }
              *(void *)&long long v31 = v19 - 2;
              BOOL v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            uint64_t i = v30;
            uint64_t v16 = a1[7];
          }
          ++i;
        }
        uint64_t v14 = *((void *)&v30 + 1);
        uint64_t v13 = a1[8];
      }
      *((void *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_2111507A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (a1[9] <= a2) {
    ZinAssertImpl("New weight should never expand beyond old weight.");
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    unint64_t v10 = 0;
    do
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      int v12 = (char *)(v34 + v10);
      if (!v11) {
        int v12 = v33;
      }
      *int v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v13 = a1[8];
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v9 * v7;
    uint64_t v16 = a1[7];
    do
    {
      *(void *)&long long v30 = 0;
      if (v16 >= 1)
      {
        for (uint64_t i = 0; i < v16; *(void *)&v30 = i)
        {
          *(void *)&long long v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            uint64_t v18 = v15 * (i + *((void *)&v30 + 1) * v8);
            uint64_t v19 = a2;
            do
            {
              uint64_t v20 = a1[10];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *((void *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = a1[11];
                  uint64_t v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      char v24 = ZinIrWeightBase::GetAt<signed char>((uint64_t)a1);
                      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v26 = (char *)(v34 + v18);
                      if (!v25) {
                        uint64_t v26 = v33;
                      }
                      ++v18;
                      *uint64_t v26 = v24;
                      uint64_t v27 = v32--;
                    }
                    while (v27 > 0);
                    uint64_t v22 = *((void *)&v31 + 1);
                  }
                  *((void *)&v31 + 1) = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t v19 = v31;
              }
              *(void *)&long long v31 = v19 - 2;
              BOOL v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            uint64_t i = v30;
            uint64_t v16 = a1[7];
          }
          ++i;
        }
        uint64_t v14 = *((void *)&v30 + 1);
        uint64_t v13 = a1[8];
      }
      *((void *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_211150A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::HeightSplitDeconvData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (a1[9] <= a2) {
    ZinAssertImpl("New weight should never expand beyond old weight.");
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[10] * a3;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v33, v9 * v8 * v7 * a1[8]);
  if (v35 != v34)
  {
    unint64_t v10 = 0;
    do
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      int v12 = (char *)(v34 + v10);
      if (!v11) {
        int v12 = v33;
      }
      *int v12 = 0;
      ++v10;
    }
    while (v35 - v34 > v10);
  }
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v13 = a1[8];
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v9 * v7;
    uint64_t v16 = a1[7];
    do
    {
      *(void *)&long long v30 = 0;
      if (v16 >= 1)
      {
        for (uint64_t i = 0; i < v16; *(void *)&v30 = i)
        {
          *(void *)&long long v31 = a2;
          if ((a2 & 0x8000000000000000) == 0)
          {
            uint64_t v18 = v15 * (i + *((void *)&v30 + 1) * v8);
            uint64_t v19 = a2;
            do
            {
              uint64_t v20 = a1[10];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *((void *)&v31 + 1) = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = a1[11];
                  uint64_t v32 = v23 - 1;
                  if (v23 >= 1)
                  {
                    do
                    {
                      char v24 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)a1);
                      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v26 = (char *)(v34 + v18);
                      if (!v25) {
                        uint64_t v26 = v33;
                      }
                      ++v18;
                      *uint64_t v26 = v24;
                      uint64_t v27 = v32--;
                    }
                    while (v27 > 0);
                    uint64_t v22 = *((void *)&v31 + 1);
                  }
                  *((void *)&v31 + 1) = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t v19 = v31;
              }
              *(void *)&long long v31 = v19 - 2;
              BOOL v21 = v19 <= 1;
              v19 -= 2;
            }
            while (!v21);
            uint64_t i = v30;
            uint64_t v16 = a1[7];
          }
          ++i;
        }
        uint64_t v14 = *((void *)&v30 + 1);
        uint64_t v13 = a1[8];
      }
      *((void *)&v30 + 1) = ++v14;
    }
    while (v14 < v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v33, &v29);
  *a4 = v29;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v33);
}

void sub_211150C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::GetValueAsFloat(ZinIrWeight *a1)
{
  unint64_t v2 = (**(uint64_t (***)(ZinIrWeight *))a1)(a1);

  ZinIrWeight::GetValueAsFloat(a1, v2);
}

void ZinIrWeight::GetValueAsFloat(ZinIrWeight *this, unint64_t a2)
{
  switch(*((_DWORD *)this + 2))
  {
    case 1:
      ZinIrWeightBase::GetAt<signed char>((uint64_t)this);
      break;
    case 2:
    case 0x1B:
      ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
      break;
    case 4:
      ZinIrWeightBase::GetAt<half>((uint64_t)this);
      __asm { FCVT            S8, H0 }
      break;
    case 5:
      unsigned __int8 v16 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)this);
      ZinE4M3ToF32(v16, 0);
      break;
    case 6:
      ZinIrWeightBase::GetAt<float>((uint64_t)this);
      break;
    case 7:
    case 8:
    case 9:
    case 0xA:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>((uint64_t)this, a2);
      break;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>((uint64_t)this, a2);
      break;
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>((uint64_t)this, a2);
      break;
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>((uint64_t)this, a2);
      break;
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>((uint64_t)this, a2);
      break;
    default:
      BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2) {
        ZinIrWeight::GetValueAsFloat(v2, v3, v4, v5, v6, v7, v8, v9);
      }
      break;
  }
}

void ZinIrWeight::GetWeightValueAsFloat(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (!(*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 136) + 168))(*(void *)(a1 + 136), v4))
  {
    ZinIrWeight::GetValueAsFloat((ZinIrWeight *)a1, v4);
    uint64_t v6 = *(void *)(a1 + 280);
    if (v6)
    {
      if ((*(_DWORD *)(a1 + 8) - 7) <= 0x14)
      {
        unint64_t v7 = *a2 % *(void *)(v6 + 24) + *(void *)(v6 + 24) * (unint64_t)v5;
        PaletteData = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, *a2);
        if (v7 >= (*(uint64_t (**)(void))(*(void *)*PaletteData + 24))(*PaletteData)) {
          ZinAssertImpl("Palette LUT index out of range.");
        }
        uint64_t v9 = *(void (**)(void))(**(void **)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, *a2) + 40);
        v9();
      }
    }
  }
}

uint64_t ZinIrWeight::GetPaletteData(ZinIrWeight *this, unint64_t a2)
{
  BOOL v2 = (uint64_t *)*((void *)this + 35);
  if (!v2 || (*((_DWORD *)this + 2) - 7) >= 0x15) {
    ZinAssertImpl("Error: This weight does not have palette info.");
  }
  uint64_t result = *v2;
  uint64_t v4 = v2[1];
  if (result == v4) {
    ZinAssertImpl("Error: Palette data is empty.");
  }
  uint64_t v5 = v4 - result;
  if ((unint64_t)v5 >= 0x11)
  {
    if (a2 >= v5 >> 4) {
      ZinAssertImpl("GetPaletteData: out of bound access.");
    }
    result += 16 * a2;
  }
  return result;
}

BOOL ZinIrWeight::IsFirstPaletteLUTEntryNonZero(ZinIrWeight *this)
{
  uint64_t v1 = (void *)*((void *)this + 35);
  if (!v1 || (*((_DWORD *)this + 2) - 7) > 0x14) {
    ZinAssertImpl("Weights must have a palette LUT to check the LUT entry.");
  }
  unint64_t v3 = 0;
LABEL_4:
  if ((*((_DWORD *)this + 2) - 7) >= 0x15) {
LABEL_18:
  }
    ZinAssertImpl("Error: This weight does not have palette info.");
  unint64_t v4 = (uint64_t)(v1[1] - *v1) >> 4;
  if (v4 > v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v1 = (void *)*((void *)this + 35);
      if (v1)
      {
        if ((*((_DWORD *)this + 2) - 7) > 0x14) {
          unint64_t v6 = 1;
        }
        else {
          unint64_t v6 = v1[3];
        }
        if (v6 <= v5)
        {
          ++v3;
          goto LABEL_4;
        }
      }
      else if (v5)
      {
        goto LABEL_18;
      }
      PaletteData = (void *)ZinIrWeight::GetPaletteData(this, v3);
      char v8 = (*(uint64_t (**)(void, unint64_t))(*(void *)*PaletteData + 152))(*PaletteData, v5++);
    }
    while ((v8 & 1) == 0);
  }
  return v4 > v3;
}

uint64_t ZinIrWeight::IsZeroPointAt(ZinIrWeight *this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = *((_DWORD *)this + 2);
  v24[0] = a4;
  int v25 = a5;
  int v26 = v5;
  unint64_t v27 = a2;
  uint64_t v28 = a3;
  long long v29 = this;
  switch(v5)
  {
    case 1:
      int v9 = ZinIrWeightBase::GetAt<signed char>((uint64_t)this);
      return v9 == a5;
    case 2:
      int v9 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
      return v9 == a5;
    case 4:
    case 5:
      return (*(unsigned int (**)(void))(**((void **)this + 17) + 152))(*((void *)this + 17)) ^ 1;
    case 6:
      ZinIrWeightBase::GetAt<float>((uint64_t)this);
      __asm { FCVT            H0, S0 }
      if (a4) {
        return (_H0 & 0x7C00) == 0;
      }
      else {
        return (_H0 & 0x7FFF) == 0;
      }
    case 7:
    case 8:
    case 9:
    case 10:
      uint64_t v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>((uint64_t)this, a2) & 1;
      goto LABEL_16;
    case 11:
    case 12:
    case 13:
    case 14:
      uint64_t v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>((uint64_t)this, a2) & 3;
      goto LABEL_16;
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>((uint64_t)this, a2) & 7;
      goto LABEL_16;
    case 19:
    case 20:
    case 21:
    case 22:
      uint64_t v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>((uint64_t)this, a2) & 0xF;
      goto LABEL_16;
    case 23:
    case 24:
    case 25:
    case 26:
      uint64_t v7 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>((uint64_t)this, a2) & 0x3F;
      goto LABEL_16;
    case 27:
      uint64_t v7 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)this);
LABEL_16:
      uint64_t result = ZinIrWeight::IsZeroPointAt(long,long,BOOL,int)const::$_0::operator()(v24, v7);
      break;
    default:
      uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinIrWeight::IsZeroPointAt(result, v11, v12, v13, v14, v15, v16, v17);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t ZinIrWeight::IsZeroPointAt(long,long,BOOL,int)const::$_0::operator()(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 4);
  if ((*(uint64_t (**)(void, void))(**(void **)(v4 + 136) + 168))(*(void *)(v4 + 136), *((void *)a1 + 2)))
  {
    char v5 = 1;
    return v5 & 1;
  }
  int v36 = 0;
  ZinKernelFormatGetPaletteFormat(*((_DWORD *)a1 + 2), &v36);
  char v5 = 1;
  switch(v36)
  {
    case 1:
      unint64_t v6 = 0;
      char v5 = 1;
      while (1)
      {
        uint64_t v7 = *(void *)(v4 + 280);
        if (v7 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v8 = *(void *)(v7 + 24);
        }
        else {
          unint64_t v8 = 1;
        }
        if (v8 <= v6) {
          break;
        }
        PaletteData = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v10 = *(void *)(v4 + 280);
        if (v10 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 1;
        }
        v5 &= *((_DWORD *)a1 + 1) == (*(unsigned int (**)(void, unint64_t))(*(void *)*PaletteData
                                                                                              + 72))(*PaletteData, v6 + v11 * a2);
        ++v6;
      }
      return v5 & 1;
    case 2:
      unint64_t v12 = 0;
      char v13 = 1;
      while (1)
      {
        uint64_t v14 = *(void *)(v4 + 280);
        if (v14 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v15 = *(void *)(v14 + 24);
        }
        else {
          unint64_t v15 = 1;
        }
        if (v15 <= v12) {
          break;
        }
        uint64_t v16 = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v17 = *(void *)(v4 + 280);
        if (v17 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v18 = *(void *)(v17 + 24);
        }
        else {
          uint64_t v18 = 1;
        }
        int v19 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v16 + 120))(*v16, v12 + v18 * a2);
        if (v13) {
          BOOL v20 = *((_DWORD *)a1 + 1) == v19;
        }
        else {
          BOOL v20 = 0;
        }
        char v13 = v20;
        ++v12;
      }
      goto LABEL_59;
    case 4:
      unint64_t v21 = 0;
      char v22 = 1;
      break;
    case 5:
      unint64_t v27 = 0;
      char v13 = 1;
      while (1)
      {
        uint64_t v28 = *(void *)(v4 + 280);
        if (v28 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v29 = *(void *)(v28 + 24);
        }
        else {
          unint64_t v29 = 1;
        }
        if (v29 <= v27) {
          break;
        }
        long long v30 = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v31 = *(void *)(v4 + 280);
        if (v31 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v32 = *(void *)(v31 + 24);
        }
        else {
          uint64_t v32 = 1;
        }
        int v33 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v30 + 152))(*v30, v27 + v32 * a2) ^ 1;
        if (v13) {
          char v13 = v33;
        }
        else {
          char v13 = 0;
        }
        ++v27;
      }
LABEL_59:
      BOOL v34 = v13 == 0;
      goto LABEL_61;
    default:
      return v5 & 1;
  }
  while (1)
  {
    uint64_t v23 = *(void *)(v4 + 280);
    if (!v23 || (*(_DWORD *)(v4 + 8) - 7) > 0x14) {
      break;
    }
    if (*(void *)(v23 + 24) <= v21) {
      goto LABEL_60;
    }
LABEL_38:
    int v24 = *a1;
    uint64_t v25 = **(void **)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
    if (v24) {
      LOBYTE(v26) = (((__n128 (*)(void))*(void *)(v25 + 56))().n128_u32[0] & 0x7C00) == 0;
    }
    else {
      int v26 = (*(uint64_t (**)(void))(v25 + 152))() ^ 1;
    }
    if (v22) {
      char v22 = v26;
    }
    else {
      char v22 = 0;
    }
    ++v21;
  }
  if (!v21) {
    goto LABEL_38;
  }
LABEL_60:
  BOOL v34 = v22 == 0;
LABEL_61:
  char v5 = !v34;
  return v5 & 1;
}

uint64_t ZinIrWeight::IsElemZeroPointAt(ZinIrWeight *this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = *((_DWORD *)this + 2);
  v24[0] = a4;
  int v25 = a5;
  int v26 = v5;
  unint64_t v27 = a2;
  uint64_t v28 = a3;
  unint64_t v29 = this;
  switch(v5)
  {
    case 1:
      int Elem = ZinIrWeightBase::GetElemAt<signed char>((uint64_t)this);
      return Elem == a5;
    case 2:
      int Elem = ZinIrWeightBase::GetElemAt<unsigned char>((uint64_t)this);
      return Elem == a5;
    case 4:
    case 5:
      return (*(unsigned int (**)(void))(**((void **)this + 17) + 160))(*((void *)this + 17)) ^ 1;
    case 6:
      ZinIrWeightBase::GetElemAt<float>((uint64_t)this);
      __asm { FCVT            H0, S0 }
      if (a4) {
        return (_H0 & 0x7C00) == 0;
      }
      else {
        return (_H0 & 0x7FFF) == 0;
      }
    case 7:
    case 8:
    case 9:
    case 10:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint1>((uint64_t)this, a2) & 1;
      goto LABEL_16;
    case 11:
    case 12:
    case 13:
    case 14:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint2>((uint64_t)this, a2) & 3;
      goto LABEL_16;
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>((uint64_t)this, a2) & 7;
      goto LABEL_16;
    case 19:
    case 20:
    case 21:
    case 22:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint4>((uint64_t)this, a2) & 0xF;
      goto LABEL_16;
    case 23:
    case 24:
    case 25:
    case 26:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint6>((uint64_t)this, a2) & 0x3F;
      goto LABEL_16;
    case 27:
      uint64_t v7 = ZinIrWeightBase::GetElemAt<unsigned char>((uint64_t)this);
LABEL_16:
      uint64_t result = ZinIrWeight::IsElemZeroPointAt(long,long,BOOL,int)const::$_0::operator()(v24, v7);
      break;
    default:
      uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinIrWeight::IsElemZeroPointAt(result, v11, v12, v13, v14, v15, v16, v17);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t ZinIrWeight::IsElemZeroPointAt(long,long,BOOL,int)const::$_0::operator()(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 4);
  if ((*(uint64_t (**)(void, void))(**(void **)(v4 + 136) + 176))(*(void *)(v4 + 136), *((void *)a1 + 2)))
  {
    char v5 = 1;
    return v5 & 1;
  }
  int v36 = 0;
  ZinKernelFormatGetPaletteFormat(*((_DWORD *)a1 + 2), &v36);
  char v5 = 1;
  switch(v36)
  {
    case 1:
      unint64_t v6 = 0;
      char v5 = 1;
      while (1)
      {
        uint64_t v7 = *(void *)(v4 + 280);
        if (v7 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v8 = *(void *)(v7 + 24);
        }
        else {
          unint64_t v8 = 1;
        }
        if (v8 <= v6) {
          break;
        }
        PaletteData = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v10 = *(void *)(v4 + 280);
        if (v10 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v11 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v11 = 1;
        }
        v5 &= *((_DWORD *)a1 + 1) == (*(unsigned int (**)(void, unint64_t))(*(void *)*PaletteData
                                                                                              + 80))(*PaletteData, v6 + v11 * a2);
        ++v6;
      }
      return v5 & 1;
    case 2:
      unint64_t v12 = 0;
      char v13 = 1;
      while (1)
      {
        uint64_t v14 = *(void *)(v4 + 280);
        if (v14 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v15 = *(void *)(v14 + 24);
        }
        else {
          unint64_t v15 = 1;
        }
        if (v15 <= v12) {
          break;
        }
        uint64_t v16 = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v17 = *(void *)(v4 + 280);
        if (v17 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v18 = *(void *)(v17 + 24);
        }
        else {
          uint64_t v18 = 1;
        }
        int v19 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v16 + 128))(*v16, v12 + v18 * a2);
        if (v13) {
          BOOL v20 = *((_DWORD *)a1 + 1) == v19;
        }
        else {
          BOOL v20 = 0;
        }
        char v13 = v20;
        ++v12;
      }
      goto LABEL_59;
    case 4:
      unint64_t v21 = 0;
      char v22 = 1;
      break;
    case 5:
      unint64_t v27 = 0;
      char v13 = 1;
      while (1)
      {
        uint64_t v28 = *(void *)(v4 + 280);
        if (v28 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          unint64_t v29 = *(void *)(v28 + 24);
        }
        else {
          unint64_t v29 = 1;
        }
        if (v29 <= v27) {
          break;
        }
        long long v30 = (void *)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
        uint64_t v31 = *(void *)(v4 + 280);
        if (v31 && (*(_DWORD *)(v4 + 8) - 7) <= 0x14) {
          uint64_t v32 = *(void *)(v31 + 24);
        }
        else {
          uint64_t v32 = 1;
        }
        int v33 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v30 + 160))(*v30, v27 + v32 * a2) ^ 1;
        if (v13) {
          char v13 = v33;
        }
        else {
          char v13 = 0;
        }
        ++v27;
      }
LABEL_59:
      BOOL v34 = v13 == 0;
      goto LABEL_61;
    default:
      return v5 & 1;
  }
  while (1)
  {
    uint64_t v23 = *(void *)(v4 + 280);
    if (!v23 || (*(_DWORD *)(v4 + 8) - 7) > 0x14) {
      break;
    }
    if (*(void *)(v23 + 24) <= v21) {
      goto LABEL_60;
    }
LABEL_38:
    int v24 = *a1;
    uint64_t v25 = **(void **)ZinIrWeight::GetPaletteData((ZinIrWeight *)v4, *((void *)a1 + 3));
    if (v24) {
      LOBYTE(v26) = (((__n128 (*)(void))*(void *)(v25 + 64))().n128_u32[0] & 0x7C00) == 0;
    }
    else {
      int v26 = (*(uint64_t (**)(void))(v25 + 160))() ^ 1;
    }
    if (v22) {
      char v22 = v26;
    }
    else {
      char v22 = 0;
    }
    ++v21;
  }
  if (!v21) {
    goto LABEL_38;
  }
LABEL_60:
  BOOL v34 = v22 == 0;
LABEL_61:
  char v5 = !v34;
  return v5 & 1;
}

uint64_t ZinIrWeight::IsZeroPointAt(ZinIrWeight *a1, uint64_t *a2, int a3, int a4)
{
  unint64_t v8 = (**(uint64_t (***)(ZinIrWeight *))a1)(a1);
  uint64_t v9 = *a2;

  return ZinIrWeight::IsZeroPointAt(a1, v8, v9, a3, a4);
}

void ZinIrWeight::CreatePalettizedUnityWeight(int a1)
{
  if (ZinKernelFormatIsUnity(a1)) {
    operator new();
  }
  ZinAssertImpl("Invalid weight format");
}

void sub_211151F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void ZinIrWeight::FillWeight(int a1@<W0>, uint64_t *a2@<X1>, void *a3@<X8>, float _S0@<S0>)
{
  *a3 = 0;
  if ((a1 & 0xFFFFFFFD) == 4)
  {
    uint64_t v4 = a2[1] * *a2 * a2[2] * a2[3] * a2[4];
    __asm { FCVT            H0, S0 }
    LOWORD(v18) = _H0;
    std::vector<half>::vector(&__p, v4, &v18);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&__p, &v18);
    operator new();
  }
  if (a1 == 5)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = a2[2];
    uint64_t v13 = a2[3];
    uint64_t v14 = a2[4];
    LOBYTE(v18) = ZinF32ToE4M3(_S0, 0, 0);
    std::vector<e4m3_t>::vector(&__p, v11 * v10 * v12 * v13 * v14, &v18);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&__p, &v18);
    operator new();
  }
  if ((a1 & 0xFFFFFFFD) == 1)
  {
    size_t v15 = a2[1] * *a2 * a2[2] * a2[3] * a2[4];
    LOBYTE(v18) = (int)_S0;
    std::vector<signed char>::vector(&__p, v15, &v18);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&__p, &v18);
    operator new();
  }
  if (a1 == 2)
  {
    size_t v16 = a2[1] * *a2 * a2[2] * a2[3] * a2[4];
    LOBYTE(v18) = (int)_S0;
    std::vector<unsigned char>::vector(&__p, v16, &v18);
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&__p, &v18);
    operator new();
  }
  ZinAssertImpl("Invalid weight format\n");
}

void sub_211152334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  MEMORY[0x21667D3C0](v13, 0x10B3C4034FA82A5);
  if (__p) {
    operator delete(__p);
  }
  *uint64_t v11 = 0;
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreatePalettizedWeight(uint64_t a1@<X0>, float **a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a3 > a2[1] - *a2)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinIrWeight::CreatePalettizedWeight(v6, v7, v8, v9, v10, v11, v12, v13);
    }
LABEL_25:
    *a5 = 0;
    return;
  }
  int Pow2Log2 = ZinRoundUpToNextPow2Log2(a3);
  if (Pow2Log2 > 8)
  {
LABEL_8:
    uint64_t v18 = -1;
  }
  else
  {
    uint64_t v18 = Pow2Log2;
    while (1)
    {
      int PalettizedKernelFormat = GetPalettizedKernelFormat(v18, a1);
      if (ZinIrHalParameters::IsSupportedPaletteFormat(a4, PalettizedKernelFormat)) {
        break;
      }
      if (++v18 == 9) {
        goto LABEL_8;
      }
    }
  }
  double v20 = exp2((double)v18);
  int v21 = GetPalettizedKernelFormat(v18, a1);
  if (!v21) {
    goto LABEL_25;
  }
  long long v193 = 0uLL;
  int v22 = v21;
  switch((int)a1)
  {
    case 1:
      memset(&v192, 0, sizeof(v192));
      uint64_t v23 = (char *)a2[1] - (char *)*a2;
      if (v23)
      {
        std::vector<char>::__append(&v192, v23 >> 2);
        int v24 = *a2;
        uint64_t v25 = a2[1];
        if (*a2 != v25)
        {
          std::vector<char>::pointer begin = v192.__begin_;
          do
          {
            float v27 = *v24++;
            *begin++ = (int)v27;
          }
          while (v24 != v25);
        }
      }
      LOBYTE(v194) = 0;
      std::vector<signed char>::vector(&v190, (uint64_t)v20, &v194);
      std::__sort<std::__less<float,float> &,float *>();
      uint64_t v28 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v28 - *a2);
      unint64_t v29 = *a2;
      long long v30 = a2[1];
      if (*a2 != v30)
      {
        uint64_t v31 = v190;
        do
        {
          float v32 = *v29++;
          *v31++ = (int)v32;
        }
        while (v29 != v30);
      }
      v174 = 0;
      uint64_t v175 = 0;
      v173 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v173, v190, (uint64_t)v191, v191 - v190);
      __p = 0;
      long long v171 = 0;
      uint64_t v172 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v192.__begin_, (uint64_t)v192.__end_, v192.__end_ - v192.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v22, &v194);
      uint64_t v33 = v194;
      if ((void)v194)
      {
        (*(void (**)(void, int64_t))(*(void *)v194 + 24))(v194, v171 - (unsigned char *)__p);
        BOOL v34 = (char *)__p;
        uint64_t v35 = v171;
        while (v34 != v35)
        {
          char v36 = (char)v173;
          char v37 = (char)v174;
          uint64_t v38 = memchr(v173, *v34, v174 - (unsigned char *)v173);
          if (v38) {
            char v39 = (char)v38;
          }
          else {
            char v39 = v37;
          }
          (*(void (**)(uint64_t, void))(*(void *)v33 + 16))(v33, (v39 - v36));
          ++v34;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v33, &v188);
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      else
      {
        long long v194 = 0uLL;
        v195 = 0;
        uint64_t v89 = (char *)__p;
        unint64_t v90 = v171;
        if (__p != v171)
        {
          size_t v91 = 0;
          do
          {
            char v93 = (char)v173;
            char v92 = (char)v174;
            v94 = memchr(v173, *v89, v174 - (unsigned char *)v173);
            if (v94) {
              char v95 = (char)v94;
            }
            else {
              char v95 = v92;
            }
            char v96 = v95 - v93;
            if (v91 >= v195)
            {
              unint64_t v98 = v194;
              v99 = &v91[-v194];
              uint64_t v100 = (uint64_t)&v91[-v194 + 1];
              if (v100 < 0) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v101 = (unint64_t)&v195[-v194];
              if (2 * (uint64_t)&v195[-v194] > (unint64_t)v100) {
                uint64_t v100 = 2 * v101;
              }
              if (v101 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v102 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v102 = v100;
              }
              if (v102) {
                unint64_t v103 = (char *)operator new(v102);
              }
              else {
                unint64_t v103 = 0;
              }
              v104 = &v99[(void)v103];
              unint64_t v105 = &v99[(void)v103];
              *unint64_t v105 = v96;
              v97 = v105 + 1;
              if (v91 != (char *)v98)
              {
                uint64_t v106 = &v91[~v98];
                do
                {
                  char v107 = *--v91;
                  (v106--)[(void)v103] = v107;
                }
                while (v91 != (char *)v98);
                size_t v91 = (char *)v194;
                v104 = v103;
              }
              *(void *)&long long v194 = v104;
              *((void *)&v194 + 1) = v97;
              v195 = &v103[v102];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *size_t v91 = v96;
              v97 = v91 + 1;
            }
            *((void *)&v194 + 1) = v97;
            ++v89;
            size_t v91 = v97;
          }
          while (v89 != v90);
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v194, &v188);
        if ((void)v194)
        {
          *((void *)&v194 + 1) = v194;
          operator delete((void *)v194);
        }
      }
      uint64_t v109 = v188;
      unint64_t v108 = v189;
      uint64_t v188 = 0;
      v189 = 0;
      if (__p)
      {
        long long v171 = (char *)__p;
        operator delete(__p);
      }
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<signed char>,std::allocator<ZinIrConstData_specialization<signed char>>,std::vector<signed char>,void>((uint64_t)&v190, &v194);
      long long v110 = v194;
      long long v194 = 0uLL;
      v111 = (std::__shared_weak_count *)*((void *)&v193 + 1);
      long long v193 = v110;
      if (v111)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v111);
        if (*((void *)&v194 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v194 + 1));
        }
      }
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      if (v192.__begin_)
      {
        v192.__end_ = v192.__begin_;
        operator delete(v192.__begin_);
      }
      goto LABEL_220;
    case 2:
      memset(&v192, 0, sizeof(v192));
      uint64_t v60 = (char *)a2[1] - (char *)*a2;
      if (v60)
      {
        std::vector<char>::__append(&v192, v60 >> 2);
        uint64_t v61 = *a2;
        uint64_t v62 = a2[1];
        if (*a2 != v62)
        {
          std::vector<char>::pointer v63 = v192.__begin_;
          do
          {
            float v64 = *v61++;
            *v63++ = (int)v64;
          }
          while (v61 != v62);
        }
      }
      LOBYTE(v194) = 0;
      std::vector<unsigned char>::vector(&v190, (uint64_t)v20, &v194);
      std::__sort<std::__less<float,float> &,float *>();
      v65 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v65 - *a2);
      v66 = *a2;
      unint64_t v67 = a2[1];
      if (*a2 != v67)
      {
        v68 = v190;
        do
        {
          float v69 = *v66++;
          *v68++ = (int)v69;
        }
        while (v66 != v67);
      }
      long long v168 = 0;
      uint64_t v169 = 0;
      v167 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v167, v190, (uint64_t)v191, v191 - v190);
      v164 = 0;
      v165 = 0;
      uint64_t v166 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v164, v192.__begin_, (uint64_t)v192.__end_, v192.__end_ - v192.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v22, &v194);
      uint64_t v70 = v194;
      if ((void)v194)
      {
        (*(void (**)(void, int64_t))(*(void *)v194 + 24))(v194, v165 - (unsigned char *)v164);
        uint64_t v71 = (char *)v164;
        uint64_t v72 = v165;
        while (v71 != v72)
        {
          char v74 = (char)v167;
          char v73 = (char)v168;
          v75 = memchr(v167, *v71, v168 - (unsigned char *)v167);
          if (v75) {
            char v76 = (char)v75;
          }
          else {
            char v76 = v73;
          }
          (*(void (**)(uint64_t, void))(*(void *)v70 + 16))(v70, (v76 - v74));
          ++v71;
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v70, &v188);
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
      else
      {
        long long v194 = 0uLL;
        v195 = 0;
        v112 = (char *)v164;
        v113 = v165;
        if (v164 != v165)
        {
          char v114 = 0;
          do
          {
            char v116 = (char)v167;
            char v115 = (char)v168;
            v117 = memchr(v167, *v112, v168 - (unsigned char *)v167);
            if (v117) {
              char v118 = (char)v117;
            }
            else {
              char v118 = v115;
            }
            char v119 = v118 - v116;
            if (v114 >= v195)
            {
              unint64_t v121 = v194;
              v122 = &v114[-v194];
              uint64_t v123 = (uint64_t)&v114[-v194 + 1];
              if (v123 < 0) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v124 = (unint64_t)&v195[-v194];
              if (2 * (uint64_t)&v195[-v194] > (unint64_t)v123) {
                uint64_t v123 = 2 * v124;
              }
              if (v124 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v125 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v125 = v123;
              }
              if (v125) {
                unint64_t v126 = (char *)operator new(v125);
              }
              else {
                unint64_t v126 = 0;
              }
              size_t v127 = &v122[(void)v126];
              v128 = &v122[(void)v126];
              char *v128 = v119;
              v120 = v128 + 1;
              if (v114 != (char *)v121)
              {
                v129 = &v114[~v121];
                do
                {
                  char v130 = *--v114;
                  (v129--)[(void)v126] = v130;
                }
                while (v114 != (char *)v121);
                char v114 = (char *)v194;
                size_t v127 = v126;
              }
              *(void *)&long long v194 = v127;
              *((void *)&v194 + 1) = v120;
              v195 = &v126[v125];
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *char v114 = v119;
              v120 = v114 + 1;
            }
            *((void *)&v194 + 1) = v120;
            ++v112;
            char v114 = v120;
          }
          while (v112 != v113);
        }
        std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v194, &v188);
        if ((void)v194)
        {
          *((void *)&v194 + 1) = v194;
          operator delete((void *)v194);
        }
      }
      uint64_t v109 = v188;
      unint64_t v108 = v189;
      uint64_t v188 = 0;
      v189 = 0;
      if (v164)
      {
        v165 = (char *)v164;
        operator delete(v164);
      }
      if (v167)
      {
        long long v168 = v167;
        operator delete(v167);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v190, &v194);
      goto LABEL_213;
    case 4:
      memset(&v192, 0, sizeof(v192));
      std::vector<half>::resize((uint64_t)&v192, a2[1] - *a2);
      uint64_t v40 = *a2;
      uint64_t v41 = a2[1];
      if (*a2 != v41)
      {
        std::vector<char>::pointer v42 = v192.__begin_;
        do
        {
          int v43 = *(_DWORD *)v40++;
          _S0 = v43;
          __asm { FCVT            H0, S0 }
          *(_WORD *)std::vector<char>::pointer v42 = _S0;
          v42 += 2;
        }
        while (v40 != v41);
      }
      LOWORD(v194) = 0;
      std::vector<half>::vector(&v190, (uint64_t)v20, &v194);
      std::__sort<std::__less<float,float> &,float *>();
      size_t v49 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v49 - *a2);
      uint64_t v50 = *a2;
      uint64_t v51 = a2[1];
      unint64_t v52 = v190;
      if (*a2 != v51)
      {
        __n128 v53 = v190;
        do
        {
          int v54 = *(_DWORD *)v50++;
          _S0 = v54;
          __asm { FCVT            H0, S0 }
          *v53++ = _S0;
        }
        while (v50 != v51);
      }
      v186 = 0;
      uint64_t v187 = 0;
      v185 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v185, v52, (uint64_t)v191, (v191 - (unsigned char *)v52) >> 1);
      v182 = 0;
      v183 = 0;
      uint64_t v184 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&v182, v192.__begin_, (uint64_t)v192.__end_, (v192.__end_ - v192.__begin_) >> 1);
      ZinIrWeight::CreateWeightDataBitStream(v22, &v194);
      uint64_t v56 = v194;
      if ((void)v194)
      {
        (*(void (**)(void, int64_t))(*(void *)v194 + 24))(v194, ((char *)v183 - (unsigned char *)v182) >> 1);
        __n128 v57 = (short float *)v182;
        __n128 v58 = v183;
        while (1)
        {
          if (v57 == v58)
          {
            std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v56, &v188);
            (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
            goto LABEL_175;
          }
          if (v185 == v186)
          {
            LODWORD(v59) = v185;
          }
          else
          {
            unint64_t v59 = (short float *)v185;
            do
            {
              if (*v59 == *v57) {
                goto LABEL_41;
              }
              ++v59;
            }
            while (v59 != v186);
            LODWORD(v59) = v186;
          }
LABEL_41:
          (*(void (**)(uint64_t, void))(*(void *)v56 + 16))(v56, ((v59 - v185) >> 1));
          ++v57;
        }
      }
      long long v194 = 0uLL;
      v195 = 0;
      v131 = (short float *)v182;
      char v132 = v183;
      if (v182 == v183) {
        goto LABEL_173;
      }
      v133 = 0;
      do
      {
        if (v185 == v186)
        {
          long long v134 = (short float *)v185;
        }
        else
        {
          long long v134 = (short float *)v185;
          while (*v134 != *v131)
          {
            if (++v134 == v186)
            {
              long long v134 = v186;
              break;
            }
          }
        }
        unint64_t v135 = (char *)v134 - (unsigned char *)v185;
        if (v133 >= v195)
        {
          unint64_t v137 = v194;
          uint64_t v138 = &v133[-v194];
          uint64_t v139 = (uint64_t)&v133[-v194 + 1];
          if (v139 < 0) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v140 = (unint64_t)&v195[-v194];
          if (2 * (uint64_t)&v195[-v194] > (unint64_t)v139) {
            uint64_t v139 = 2 * v140;
          }
          if (v140 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v141 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v141 = v139;
          }
          if (v141) {
            uint64_t v142 = (char *)operator new(v141);
          }
          else {
            uint64_t v142 = 0;
          }
          uint64_t v143 = &v138[(void)v142];
          v138[(void)v142] = v135 >> 1;
          uint64_t v136 = (uint64_t)&v138[(void)v142 + 1];
          if (v133 != (char *)v137)
          {
            uint64_t v144 = &v133[~v137];
            do
            {
              char v145 = *--v133;
              (v144--)[(void)v142] = v145;
            }
            while (v133 != (char *)v137);
            v133 = (char *)v194;
            uint64_t v143 = v142;
          }
          *(void *)&long long v194 = v143;
          *((void *)&v194 + 1) = &v138[(void)v142 + 1];
          v195 = &v142[v141];
          if (v133) {
            operator delete(v133);
          }
        }
        else
        {
          char *v133 = v135 >> 1;
          uint64_t v136 = (uint64_t)(v133 + 1);
        }
        *((void *)&v194 + 1) = v136;
        ++v131;
        v133 = (char *)v136;
      }
      while (v131 != v132);
LABEL_173:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v194, &v188);
      if ((void)v194)
      {
        *((void *)&v194 + 1) = v194;
        operator delete((void *)v194);
      }
LABEL_175:
      uint64_t v109 = v188;
      unint64_t v108 = v189;
      uint64_t v188 = 0;
      v189 = 0;
      if (v182)
      {
        v183 = (short float *)v182;
        operator delete(v182);
      }
      if (v185)
      {
        v186 = (short float *)v185;
        operator delete(v185);
      }
      std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v190, &v194);
      goto LABEL_213;
    case 5:
      memset(&v192, 0, sizeof(v192));
      uint64_t v77 = (char *)a2[1] - (char *)*a2;
      if (v77)
      {
        std::vector<char>::__append(&v192, v77 >> 2);
        long long v78 = *a2;
        v79 = a2[1];
        if (*a2 != v79)
        {
          std::vector<char>::pointer v80 = v192.__begin_;
          do
            *v80++ = ZinF32ToE4M3(*v78++, 0, 0);
          while (v78 != v79);
        }
      }
      LOBYTE(v194) = ZinF32ToE4M3(0.0, 0, 0);
      std::vector<e4m3_t>::vector(&v190, (uint64_t)v20, &v194);
      std::__sort<std::__less<float,float> &,float *>();
      long long v81 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(*a2, a2[1]);
      std::vector<float>::resize((uint64_t)a2, v81 - *a2);
      unint64_t v82 = *a2;
      char v83 = a2[1];
      if (*a2 != v83)
      {
        char v84 = v190;
        do
          *v84++ = ZinF32ToE4M3(*v82++, 0, 0);
        while (v82 != v83);
      }
      v180 = 0;
      uint64_t v181 = 0;
      v179 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v179, v190, (uint64_t)v191, v191 - v190);
      v176 = 0;
      v177 = 0;
      uint64_t v178 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v176, v192.__begin_, (uint64_t)v192.__end_, v192.__end_ - v192.__begin_);
      ZinIrWeight::CreateWeightDataBitStream(v22, &v194);
      uint64_t v85 = v194;
      if ((void)v194)
      {
        (*(void (**)(void, int64_t))(*(void *)v194 + 24))(v194, v177 - (unsigned char *)v176);
        v86 = (unsigned __int8 *)v176;
        unint64_t v87 = v177;
        while (1)
        {
          if (v86 == v87)
          {
            std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>(v85, &v188);
            (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
            goto LABEL_208;
          }
          if (v179 == v180)
          {
            LOBYTE(v88) = (_BYTE)v179;
          }
          else
          {
            uint64_t v88 = (unsigned __int8 *)v179;
            do
            {
              if (*v88 == *v86) {
                goto LABEL_72;
              }
              ++v88;
            }
            while (v88 != v180);
            LOBYTE(v88) = (_BYTE)v180;
          }
LABEL_72:
          (*(void (**)(uint64_t, void))(*(void *)v85 + 16))(v85, ((_BYTE)v88 - (_BYTE)v179));
          ++v86;
        }
      }
      long long v194 = 0uLL;
      v195 = 0;
      uint64_t v146 = (unsigned __int8 *)v176;
      v147 = v177;
      if (v176 == v177) {
        goto LABEL_206;
      }
      v148 = 0;
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrWeight::CreatePalettizedWeight(a1);
      }
      *a5 = 0;
      goto LABEL_225;
  }
  do
  {
    if (v179 == v180)
    {
      LOBYTE(v149) = (_BYTE)v179;
    }
    else
    {
      v149 = (unsigned __int8 *)v179;
      while (*v149 != *v146)
      {
        if (++v149 == v180)
        {
          LOBYTE(v149) = (_BYTE)v180;
          break;
        }
      }
    }
    char v150 = (_BYTE)v149 - (_BYTE)v179;
    if (v148 >= v195)
    {
      unint64_t v152 = v194;
      long long v153 = &v148[-v194];
      uint64_t v154 = (uint64_t)&v148[-v194 + 1];
      if (v154 < 0) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v155 = (unint64_t)&v195[-v194];
      if (2 * (uint64_t)&v195[-v194] > (unint64_t)v154) {
        uint64_t v154 = 2 * v155;
      }
      if (v155 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v156 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v156 = v154;
      }
      if (v156) {
        long long v157 = (char *)operator new(v156);
      }
      else {
        long long v157 = 0;
      }
      uint64_t v158 = &v153[(void)v157];
      uint64_t v159 = &v153[(void)v157];
      *uint64_t v159 = v150;
      unint64_t v151 = v159 + 1;
      if (v148 != (char *)v152)
      {
        long long v160 = &v148[~v152];
        do
        {
          char v161 = *--v148;
          (v160--)[(void)v157] = v161;
        }
        while (v148 != (char *)v152);
        v148 = (char *)v194;
        uint64_t v158 = v157;
      }
      *(void *)&long long v194 = v158;
      *((void *)&v194 + 1) = v151;
      v195 = &v157[v156];
      if (v148) {
        operator delete(v148);
      }
    }
    else
    {
      char *v148 = v150;
      unint64_t v151 = v148 + 1;
    }
    *((void *)&v194 + 1) = v151;
    ++v146;
    v148 = v151;
  }
  while (v146 != v147);
LABEL_206:
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,std::vector<unsigned char>,void>((uint64_t)&v194, &v188);
  if ((void)v194)
  {
    *((void *)&v194 + 1) = v194;
    operator delete((void *)v194);
  }
LABEL_208:
  uint64_t v109 = v188;
  unint64_t v108 = v189;
  uint64_t v188 = 0;
  v189 = 0;
  if (v176)
  {
    v177 = (unsigned __int8 *)v176;
    operator delete(v176);
  }
  if (v179)
  {
    v180 = (unsigned __int8 *)v179;
    operator delete(v179);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<e4m3_t>,std::allocator<ZinIrConstData_specialization<e4m3_t>>,std::vector<e4m3_t>,void>((uint64_t)&v190, &v194);
LABEL_213:
  long long v162 = v194;
  long long v194 = 0uLL;
  v163 = (std::__shared_weak_count *)*((void *)&v193 + 1);
  long long v193 = v162;
  if (v163)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v163);
    if (*((void *)&v194 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v194 + 1));
    }
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v192.__begin_)
  {
    v192.__end_ = v192.__begin_;
    operator delete(v192.__begin_);
  }
LABEL_220:
  if (v109 && (void)v193)
  {
    std::vector<std::shared_ptr<ZinIrConstData>>::vector(&v194, 1uLL, &v193);
    std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>>,void>((void **)&v194, &v190);
    operator new();
  }
  *a5 = 0;
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
LABEL_225:
  if (*((void *)&v193 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v193 + 1));
  }
}

void sub_2111533E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  char v39 = *(void **)(v37 - 144);
  if (v39)
  {
    *(void *)(v37 - 136) = v39;
    operator delete(v39);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  uint64_t v40 = *(void **)(v37 - 208);
  if (v40)
  {
    *(void *)(v37 - 200) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(v37 - 184);
  if (v41)
  {
    *(void *)(v37 - 176) = v41;
    operator delete(v41);
  }
  std::vector<char>::pointer v42 = *(std::__shared_weak_count **)(v37 - 152);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrWeight::DePalettizeWeightData<signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 8);
  int v33 = 0;
  uint64_t v32 = 0;
  uint64_t result = ZinKernelFormatGetBitDepth(v6, &v32);
  if (result || (uint64_t result = ZinKernelFormatGetPaletteFormat(v6, &v33), result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0) {
      ZinAssertImpl("incompatible format with zero point");
    }
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v30, *(void *)(a1 + 64) * *(void *)(a1 + 56) * *(void *)(a1 + 72) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8 >= 1)
    {
      int64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v25 = a3;
      do
      {
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              uint64_t v14 = 0;
              uint64_t v15 = *(void *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  uint64_t v16 = 0;
                  uint64_t v17 = *(void *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      uint64_t v18 = 0;
                      while (2)
                      {
                        switch(v32)
                        {
                          case 1:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            Palettechar Data = (uint64_t *)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, v9);
                            char Data = ZinIrConstData::GetDataAt<signed char>(*PaletteData);
                            if (a2)
                            {
                              uint64_t v21 = *(void *)(a1 + 136);
                              *(void *)&long long v26 = v9;
                              *((void *)&v26 + 1) = v12;
                              uint64_t v27 = v14;
                              uint64_t v28 = v16;
                              uint64_t v29 = v18;
                              uint64_t v22 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v26);
                              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 168))(v21, v22)) {
                                char Data = ZinIrVector::GetAt<signed char>(a2, v9);
                              }
                            }
                            int v23 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            int v24 = (char *)(v31 + v10 + v18);
                            if (!v23) {
                              int v24 = v30;
                            }
                            *int v24 = Data;
                            ++v18;
                            uint64_t v17 = *(void *)(a1 + 88);
                            if (v18 < v17) {
                              continue;
                            }
                            uint64_t v15 = *(void *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            *uint64_t v25 = 0;
                            v25[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v30);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  uint64_t v13 = *(void *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              uint64_t v11 = *(void *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          uint64_t v8 = *(void *)(a1 + 56);
          a3 = v25;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v30, &v26);
    *(_OWORD *)a3 = v26;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v30);
  }
  return result;
}

void sub_211153AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 8);
  int v33 = 0;
  uint64_t v32 = 0;
  uint64_t result = ZinKernelFormatGetBitDepth(v6, &v32);
  if (result || (uint64_t result = ZinKernelFormatGetPaletteFormat(v6, &v33), result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0) {
      ZinAssertImpl("incompatible format with zero point");
    }
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v30, *(void *)(a1 + 64) * *(void *)(a1 + 56) * *(void *)(a1 + 72) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8 >= 1)
    {
      int64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v25 = a3;
      do
      {
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              uint64_t v14 = 0;
              uint64_t v15 = *(void *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  uint64_t v16 = 0;
                  uint64_t v17 = *(void *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      uint64_t v18 = 0;
                      while (2)
                      {
                        switch(v32)
                        {
                          case 1:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(void *)&long long v26 = v9;
                            *((void *)&v26 + 1) = v12;
                            uint64_t v27 = v14;
                            uint64_t v28 = v16;
                            uint64_t v29 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            Palettechar Data = (uint64_t *)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, v9);
                            char Data = ZinIrConstData::GetDataAt<unsigned char>(*PaletteData);
                            if (a2)
                            {
                              uint64_t v21 = *(void *)(a1 + 136);
                              *(void *)&long long v26 = v9;
                              *((void *)&v26 + 1) = v12;
                              uint64_t v27 = v14;
                              uint64_t v28 = v16;
                              uint64_t v29 = v18;
                              uint64_t v22 = (**(uint64_t (***)(uint64_t, long long *))a1)(a1, &v26);
                              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 168))(v21, v22)) {
                                char Data = ZinIrVector::GetAt<unsigned char>(a2, v9);
                              }
                            }
                            int v23 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            int v24 = (char *)(v31 + v10 + v18);
                            if (!v23) {
                              int v24 = v30;
                            }
                            *int v24 = Data;
                            ++v18;
                            uint64_t v17 = *(void *)(a1 + 88);
                            if (v18 < v17) {
                              continue;
                            }
                            uint64_t v15 = *(void *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            *uint64_t v25 = 0;
                            v25[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v30);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  uint64_t v13 = *(void *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              uint64_t v11 = *(void *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          uint64_t v8 = *(void *)(a1 + 56);
          a3 = v25;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v30, &v26);
    *(_OWORD *)a3 = v26;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v30);
  }
  return result;
}

void sub_211153EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<e4m3_t>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 8);
  int v31 = 0;
  uint64_t v30 = 0;
  uint64_t result = ZinKernelFormatGetBitDepth(v6, &v30);
  if (result || (uint64_t result = ZinKernelFormatGetPaletteFormat(v6, &v31), result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0) {
      ZinAssertImpl("incompatible format with zero point");
    }
    details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v28, *(void *)(a1 + 64) * *(void *)(a1 + 56) * *(void *)(a1 + 72) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8 >= 1)
    {
      int64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 64);
      int v23 = a3;
      do
      {
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              uint64_t v14 = 0;
              uint64_t v15 = *(void *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  uint64_t v16 = 0;
                  uint64_t v17 = *(void *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      uint64_t v18 = 0;
                      while (2)
                      {
                        switch(v30)
                        {
                          case 1:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_24;
                          case 2:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_24;
                          case 3:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_24;
                          case 4:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_24;
                          case 6:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_24;
                          case 8:
                            *(void *)&long long v24 = v9;
                            *((void *)&v24 + 1) = v12;
                            uint64_t v25 = v14;
                            uint64_t v26 = v16;
                            uint64_t v27 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_24:
                            Palettechar Data = (uint64_t *)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, v9);
                            char Data = ZinIrConstData::GetDataAt<e4m3_t>(*PaletteData);
                            int v21 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            uint64_t v22 = (char *)(v29 + v10 + v18);
                            if (!v21) {
                              uint64_t v22 = v28;
                            }
                            *uint64_t v22 = Data;
                            ++v18;
                            uint64_t v17 = *(void *)(a1 + 88);
                            if (v18 < v17) {
                              continue;
                            }
                            uint64_t v15 = *(void *)(a1 + 80);
                            v10 += v18;
                            break;
                          default:
                            void *v23 = 0;
                            v23[1] = 0;
                            return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v28);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  uint64_t v13 = *(void *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              uint64_t v11 = *(void *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          uint64_t v8 = *(void *)(a1 + 56);
          a3 = v23;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v28, &v24);
    *(_OWORD *)a3 = v24;
    return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v28);
  }
  return result;
}

void sub_21115423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::DePalettizeWeightData<half>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 8);
  int v34 = 0;
  uint64_t v33 = 0;
  uint64_t result = ZinKernelFormatGetBitDepth(v6, &v33);
  if (result || (uint64_t result = ZinKernelFormatGetPaletteFormat(v6, &v34), result))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if (a2 && (ZinKernelFormatIsQuantizationCompatible(*(_DWORD *)(a1 + 8)) & 1) == 0) {
      ZinAssertImpl("incompatible format with zero point");
    }
    details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v31, *(void *)(a1 + 64) * *(void *)(a1 + 56) * *(void *)(a1 + 72) * *(void *)(a1 + 80) * *(void *)(a1 + 88));
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8 >= 1)
    {
      int64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v25 = a3;
      do
      {
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(a1 + 72);
          do
          {
            if (v13 >= 1)
            {
              uint64_t v14 = 0;
              uint64_t v15 = *(void *)(a1 + 80);
              do
              {
                if (v15 >= 1)
                {
                  uint64_t v16 = 0;
                  uint64_t v17 = *(void *)(a1 + 88);
                  do
                  {
                    if (v17 >= 1)
                    {
                      uint64_t v18 = 0;
                      uint64_t v26 = v10;
                      uint64_t v19 = 2 * v10;
                      while (2)
                      {
                        switch(v33)
                        {
                          case 1:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
                            goto LABEL_23;
                          case 2:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
                            goto LABEL_23;
                          case 3:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
                            goto LABEL_23;
                          case 4:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
                            goto LABEL_23;
                          case 6:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
                            goto LABEL_23;
                          case 8:
                            *(void *)&long long v27 = v9;
                            *((void *)&v27 + 1) = v12;
                            uint64_t v28 = v14;
                            uint64_t v29 = v16;
                            uint64_t v30 = v18;
                            ZinIrWeightBase::GetAt<unsigned char>(a1);
LABEL_23:
                            Palettechar Data = (uint64_t *)ZinIrWeight::GetPaletteData((ZinIrWeight *)a1, v9);
                            ZinIrConstData::GetDataAt<half>(*PaletteData);
                            __int16 v22 = v21;
                            int v23 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            long long v24 = (char *)(v32 + v19);
                            if (!v23) {
                              long long v24 = v31;
                            }
                            *(_WORD *)long long v24 = v22;
                            ++v18;
                            uint64_t v17 = *(void *)(a1 + 88);
                            v19 += 2;
                            if (v18 < v17) {
                              continue;
                            }
                            uint64_t v15 = *(void *)(a1 + 80);
                            uint64_t v10 = v26 + v18;
                            break;
                          default:
                            *uint64_t v25 = 0;
                            v25[1] = 0;
                            return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v31);
                        }
                        break;
                      }
                    }
                    ++v16;
                  }
                  while (v16 < v15);
                  uint64_t v13 = *(void *)(a1 + 72);
                }
                ++v14;
              }
              while (v14 < v13);
              uint64_t v11 = *(void *)(a1 + 64);
            }
            ++v12;
          }
          while (v12 < v11);
          uint64_t v8 = *(void *)(a1 + 56);
          a3 = v25;
        }
        ++v9;
      }
      while (v9 < v8);
    }
    std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v31, &v27);
    *(_OWORD *)a3 = v27;
    return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v31);
  }
  return result;
}

void sub_2111545C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::CreateWeightWithNewPalette@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  char v5 = *(uint64_t **)(a1 + 280);
  if (!v5
    || (*(_DWORD *)(a1 + 8) - 7) > 0x14
    || (uint64_t v7 = *v5, *(void *)(*(void *)(a1 + 280) + 8) - v7 != 16))
  {
    ZinAssertImpl("Create weight with new palette is not supported for per-channel palettized kernels yet.");
  }
  if (!*a2
    || (uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v7 + 24))(), v10 != (*(uint64_t (**)(void))(*(void *)*a2 + 24))()))
  {
    ZinAssertImpl("wrong palette");
  }
  if (a3 > 5
    || ((1 << a3) & 0x36) == 0
    || (v16 = 0, uint64_t result = ZinKernelFormatGetPaletteFormat(*(_DWORD *)(a1 + 8), &v16), result))
  {
    ZinAssertImpl("wrong format");
  }
  if (v16 == a3)
  {
LABEL_12:
    uint64_t v12 = 1;
    std::vector<std::shared_ptr<ZinIrConstData>>::vector(v14, 1uLL, a2);
    uint64_t v13 = *(void *)(a1 + 280);
    if (v13)
    {
      if ((*(_DWORD *)(a1 + 8) - 7) > 0x14) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = *(void *)(v13 + 24);
      }
    }
    uint64_t v17 = (uint64_t *)v12;
    std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>>,unsigned long,void>(v14, &v17, &v15);
    operator new();
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
      if (((1 << a3) & 0x36) != 0) {
        goto LABEL_12;
      }
      goto LABEL_18;
    case 0x1B:
      if (a3 != 4) {
        goto LABEL_18;
      }
      goto LABEL_12;
    default:
LABEL_18:
      *a4 = 0;
      return result;
  }
}

void sub_211154900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  MEMORY[0x21667D3C0](v15, 0x10B3C4034FA82A5);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  *(void *)(v16 - 56) = &a10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 56));
  _Unwind_Resume(a1);
}

void ZinIrWeight::PadWeight(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 8);
  if ((v6 - 7) < 0x15)
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v7) {
      ZinIrWeight::PadWeight(v7, v8, v9, v10, v11, v12, v13, v14);
    }
LABEL_4:
    *a5 = 0;
    return;
  }
  if (v6 <= 27)
  {
    switch(v6)
    {
      case 1:
        goto LABEL_13;
      case 2:
        goto LABEL_14;
      case 4:
        goto LABEL_12;
      case 5:
        ZinIrWeight::PadWeightDataAndChangeLayout<e4m3_t>(a1, a2, a3, a4, &v28);
        long long v17 = v28;
        goto LABEL_16;
      case 6:
        ZinIrWeight::PadWeightDataAndChangeLayout<float>(a1, a2, a3, a4, &v28);
        long long v17 = v28;
        goto LABEL_16;
      default:
        goto LABEL_20;
    }
  }
  switch(v6)
  {
    case 28:
LABEL_13:
      ZinIrWeight::PadWeightDataAndChangeLayout<signed char>(a1, a2, a3, a4, &v28);
      long long v17 = v28;
      break;
    case 29:
LABEL_14:
      ZinIrWeight::PadWeightDataAndChangeLayout<unsigned char>(a1, a2, a3, a4, &v28);
      long long v17 = v28;
      break;
    case 30:
LABEL_12:
      ZinIrWeight::PadWeightDataAndChangeLayout<half>(a1, a2, a3, a4, &v28);
      long long v17 = v28;
      break;
    default:
LABEL_20:
      BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v20) {
        ZinIrWeight::PadWeight(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      goto LABEL_4;
  }
LABEL_16:
  if ((void)v17)
  {
    uint64_t v18 = *(void *)(a1 + 80) + *a2 + a2[1];
    uint64_t v19 = *(void *)(a1 + 72) + a2[2] + a2[3];
    long long v28 = *(_OWORD *)(a1 + 56);
    uint64_t v29 = v19;
    uint64_t v30 = v18;
    uint64_t v31 = *(void *)(a1 + 88) + a2[4] + a2[5];
    operator new();
  }
  *a5 = 0;
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
}

void sub_211154BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4034FA82A5);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<float>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *a4;
  if (*a4 && v8 != *(void *)(v9 + 56)) {
    ZinAssertImpl("kernel zero point must be per-cout");
  }
  uint64_t v104 = *(void *)(a1 + 88) + a2[4] + a2[5];
  uint64_t v105 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v108 = v104 * v105 * (*(void *)(a1 + 72) + a2[2] + a2[3]);
  uint64_t v102 = v108 * v7;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v110, v108 * v7 * v8);
  if (v112 != v111)
  {
    uint64_t v10 = 0;
    int64_t v11 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902) {
          uint64_t v12 = v11 / v108 % v8;
        }
        else {
          uint64_t v12 = v11 / v102;
        }
        ZinIrVector::GetAt<float>(*a4, (int)v12);
        int v14 = v15;
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        int v14 = 0;
      }
      uint64_t v16 = v111;
      long long v17 = (_DWORD *)(v111 + v10);
      if (!v13) {
        long long v17 = v110;
      }
      *long long v17 = v14;
      ++v11;
      v10 += 4;
    }
    while (v11 < (unint64_t)((v112 - v16) >> 2));
  }
  uint64_t v18 = (void *)a1;
  uint64_t v101 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(void *)&long long v113 = 0;
    uint64_t v19 = *(void *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v19 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v113 + 1) = 0;
          if (v21 >= 1)
          {
            for (uint64_t i = 0; i < v21; *((void *)&v113 + 1) = i)
            {
              uint64_t v23 = v18[9];
              BOOL v24 = v23 < 1;
              uint64_t v25 = v23 - 1;
              *(void *)&long long v114 = v25;
              if (!v24)
              {
                do
                {
                  uint64_t v26 = v18[10];
                  BOOL v24 = v26 < 1;
                  uint64_t v27 = v26 - 1;
                  *((void *)&v114 + 1) = v27;
                  if (!v24)
                  {
                    do
                    {
                      uint64_t v28 = v18[11];
                      uint64_t v29 = v28 - 1;
                      uint64_t v115 = v28 - 1;
                      if (v28 >= 1)
                      {
                        do
                        {
                          long long v30 = v113;
                          uint64_t v31 = a2[3];
                          long long v32 = v114;
                          uint64_t v33 = a2[1];
                          uint64_t v34 = a2[5];
                          ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                          int v36 = v35;
                          int v37 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v38 = (_DWORD *)(v111
                                         + 4
                                         * (v29
                                          + (v30 + *((void *)&v30 + 1) * v101) * v108
                                          + v34
                                          + (*((void *)&v32 + 1) + v33 + (v32 + v31) * v105) * v104));
                          if (!v37) {
                            uint64_t v38 = v110;
                          }
                          _DWORD *v38 = v36;
                          uint64_t v39 = v115;
                          uint64_t v29 = --v115;
                          uint64_t v18 = (void *)a1;
                        }
                        while (v39 > 0);
                        uint64_t v27 = *((void *)&v114 + 1);
                      }
                      *((void *)&v114 + 1) = v27 - 1;
                      BOOL v24 = v27-- <= 0;
                    }
                    while (!v24);
                    uint64_t v25 = v114;
                  }
                  *(void *)&long long v114 = v25 - 1;
                  BOOL v24 = v25-- <= 0;
                }
                while (!v24);
                uint64_t i = *((void *)&v113 + 1);
                uint64_t v21 = v18[8];
              }
              ++i;
            }
            uint64_t v20 = v113;
            uint64_t v19 = v18[7];
          }
          *(void *)&long long v113 = ++v20;
        }
        while (v20 < v19);
      }
    }
    else if (v19 >= 1)
    {
      uint64_t v61 = 0;
      uint64_t v62 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v113 + 1) = 0;
        if (v62 >= 1)
        {
          uint64_t v63 = 0;
          uint64_t v64 = v18[9];
          do
          {
            *(void *)&long long v114 = 0;
            if (v64 >= 1)
            {
              uint64_t v65 = 0;
              uint64_t v66 = v18[10];
              do
              {
                *((void *)&v114 + 1) = 0;
                if (v66 >= 1)
                {
                  uint64_t v67 = 0;
                  uint64_t v68 = v18[11];
                  do
                  {
                    uint64_t v115 = 0;
                    if (v68 >= 1)
                    {
                      uint64_t v69 = 0;
                      do
                      {
                        long long v70 = v113;
                        uint64_t v71 = a2[2];
                        long long v72 = v114;
                        uint64_t v73 = *a2;
                        uint64_t v74 = a2[4];
                        ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                        int v76 = v75;
                        int v77 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v78 = (_DWORD *)(v111
                                       + 4
                                       * (v69
                                        + *((void *)&v70 + 1) * v108
                                        + v70 * v102
                                        + v74
                                        + (*((void *)&v72 + 1) + v73 + (v72 + v71) * v105) * v104));
                        if (!v77) {
                          long long v78 = v110;
                        }
                        *long long v78 = v76;
                        uint64_t v69 = v115 + 1;
                        uint64_t v115 = v69;
                        uint64_t v18 = (void *)a1;
                        uint64_t v68 = *(void *)(a1 + 88);
                      }
                      while (v69 < v68);
                      uint64_t v67 = *((void *)&v114 + 1);
                      uint64_t v66 = *(void *)(a1 + 80);
                    }
                    *((void *)&v114 + 1) = ++v67;
                  }
                  while (v67 < v66);
                  uint64_t v65 = v114;
                  uint64_t v64 = v18[9];
                }
                *(void *)&long long v114 = ++v65;
              }
              while (v65 < v64);
              uint64_t v63 = *((void *)&v113 + 1);
              uint64_t v62 = v18[8];
            }
            *((void *)&v113 + 1) = ++v63;
          }
          while (v63 < v62);
          uint64_t v61 = v113;
          uint64_t v19 = v18[7];
        }
        *(void *)&long long v113 = ++v61;
      }
      while (v61 < v19);
    }
  }
  else
  {
    *(void *)&long long v113 = 0;
    uint64_t v40 = *(void *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v40 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v113 + 1) = 0;
          if (v42 >= 1)
          {
            for (uint64_t j = 0; j < v42; *((void *)&v113 + 1) = j)
            {
              uint64_t v44 = v18[9];
              BOOL v24 = v44 < 1;
              uint64_t v45 = v44 - 1;
              *(void *)&long long v114 = v45;
              if (!v24)
              {
                do
                {
                  uint64_t v46 = v18[10];
                  BOOL v24 = v46 < 1;
                  uint64_t v47 = v46 - 1;
                  *((void *)&v114 + 1) = v47;
                  if (!v24)
                  {
                    do
                    {
                      uint64_t v48 = v18[11];
                      uint64_t v115 = v48 - 1;
                      if (v48 >= 1)
                      {
                        do
                        {
                          long long v49 = v113;
                          uint64_t v50 = a2[2];
                          uint64_t v51 = v18[9];
                          uint64_t v52 = v18[10];
                          long long v53 = v114;
                          uint64_t v54 = *a2;
                          uint64_t v55 = v18[11];
                          uint64_t v56 = a2[4];
                          ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                          int v58 = v57;
                          int v59 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v60 = (_DWORD *)(v111
                                         + 4
                                         * (v49 * v102
                                          - v48
                                          + *((void *)&v49 + 1) * v108
                                          + v55
                                          + v56
                                          + (v52 + ~*((void *)&v53 + 1) + (v51 + v50 + ~(void)v53) * v105 + v54)
                                          * v104));
                          if (!v59) {
                            uint64_t v60 = v110;
                          }
                          _DWORD *v60 = v58;
                          uint64_t v48 = v115--;
                          uint64_t v18 = (void *)a1;
                        }
                        while (v48 > 0);
                        uint64_t v47 = *((void *)&v114 + 1);
                      }
                      *((void *)&v114 + 1) = v47 - 1;
                      BOOL v24 = v47-- <= 0;
                    }
                    while (!v24);
                    uint64_t v45 = v114;
                  }
                  *(void *)&long long v114 = v45 - 1;
                  BOOL v24 = v45-- <= 0;
                }
                while (!v24);
                uint64_t j = *((void *)&v113 + 1);
                uint64_t v42 = v18[8];
              }
              ++j;
            }
            uint64_t v41 = v113;
            uint64_t v40 = v18[7];
          }
          *(void *)&long long v113 = ++v41;
        }
        while (v41 < v40);
      }
    }
    else if (v40 >= 1)
    {
      uint64_t v79 = 0;
      uint64_t v80 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v113 + 1) = 0;
        if (v80 >= 1)
        {
          uint64_t v81 = 0;
          uint64_t v82 = v18[9];
          do
          {
            *(void *)&long long v114 = 0;
            if (v82 >= 1)
            {
              uint64_t v83 = 0;
              uint64_t v84 = v18[10];
              do
              {
                *((void *)&v114 + 1) = 0;
                if (v84 >= 1)
                {
                  uint64_t v85 = 0;
                  uint64_t v86 = v18[11];
                  do
                  {
                    uint64_t v115 = 0;
                    if (v86 >= 1)
                    {
                      uint64_t v87 = 0;
                      do
                      {
                        uint64_t v103 = v86;
                        long long v88 = v113;
                        uint64_t v89 = a2[3];
                        uint64_t v91 = v18[9];
                        uint64_t v90 = v18[10];
                        long long v92 = v114;
                        uint64_t v93 = a2[1];
                        uint64_t v94 = a2[5];
                        ZinIrWeightBase::GetAt<float>((uint64_t)v18);
                        int v96 = v95;
                        int v97 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        unint64_t v98 = (_DWORD *)(v111
                                       + 4
                                       * (v103
                                        + ~v87
                                        + (v88 + *((void *)&v88 + 1) * v101) * v108
                                        + v94
                                        + (v90 + ~*((void *)&v92 + 1) + (v91 + v89 + ~(void)v92) * v105 + v93)
                                        * v104));
                        if (!v97) {
                          unint64_t v98 = v110;
                        }
                        *unint64_t v98 = v96;
                        uint64_t v87 = v115 + 1;
                        uint64_t v115 = v87;
                        uint64_t v18 = (void *)a1;
                        uint64_t v86 = *(void *)(a1 + 88);
                      }
                      while (v87 < v86);
                      uint64_t v85 = *((void *)&v114 + 1);
                      uint64_t v84 = *(void *)(a1 + 80);
                    }
                    *((void *)&v114 + 1) = ++v85;
                  }
                  while (v85 < v84);
                  uint64_t v83 = v114;
                  uint64_t v82 = v18[9];
                }
                *(void *)&long long v114 = ++v83;
              }
              while (v83 < v82);
              uint64_t v81 = *((void *)&v113 + 1);
              uint64_t v80 = v18[8];
            }
            *((void *)&v113 + 1) = ++v81;
          }
          while (v81 < v80);
          uint64_t v79 = v113;
          uint64_t v40 = v18[7];
        }
        *(void *)&long long v113 = ++v79;
      }
      while (v79 < v40);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v110, &v109);
  *a5 = v109;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v110);
}

void sub_21115546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<half>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *a4;
  if (*a4 && v8 != *(void *)(v9 + 56)) {
    ZinAssertImpl("kernel zero point must be per-cout");
  }
  uint64_t v104 = *(void *)(a1 + 88) + a2[4] + a2[5];
  uint64_t v105 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v108 = v104 * v105 * (*(void *)(a1 + 72) + a2[2] + a2[3]);
  uint64_t v102 = v108 * v7;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v110, v108 * v7 * v8);
  if (v112 != v111)
  {
    uint64_t v10 = 0;
    int64_t v11 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902) {
          uint64_t v12 = v11 / v108 % v8;
        }
        else {
          uint64_t v12 = v11 / v102;
        }
        ZinIrVector::GetAt<half>(*a4, (int)v12);
        __int16 v14 = v15;
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        int v13 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        __int16 v14 = 0;
      }
      uint64_t v16 = v111;
      long long v17 = (_WORD *)(v111 + v10);
      if (!v13) {
        long long v17 = v110;
      }
      *long long v17 = v14;
      ++v11;
      v10 += 2;
    }
    while (v11 < (unint64_t)((v112 - v16) >> 1));
  }
  uint64_t v18 = (void *)a1;
  uint64_t v101 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(void *)&long long v113 = 0;
    uint64_t v19 = *(void *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v19 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v113 + 1) = 0;
          if (v21 >= 1)
          {
            for (uint64_t i = 0; i < v21; *((void *)&v113 + 1) = i)
            {
              uint64_t v23 = v18[9];
              BOOL v24 = v23 < 1;
              uint64_t v25 = v23 - 1;
              *(void *)&long long v114 = v25;
              if (!v24)
              {
                do
                {
                  uint64_t v26 = v18[10];
                  BOOL v24 = v26 < 1;
                  uint64_t v27 = v26 - 1;
                  *((void *)&v114 + 1) = v27;
                  if (!v24)
                  {
                    do
                    {
                      uint64_t v28 = v18[11];
                      uint64_t v29 = v28 - 1;
                      uint64_t v115 = v28 - 1;
                      if (v28 >= 1)
                      {
                        do
                        {
                          long long v30 = v113;
                          uint64_t v31 = a2[3];
                          long long v32 = v114;
                          uint64_t v33 = a2[1];
                          uint64_t v34 = a2[5];
                          ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                          __int16 v36 = v35;
                          int v37 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v38 = (_WORD *)(v111
                                        + 2
                                        * (v29
                                         + (v30 + *((void *)&v30 + 1) * v101) * v108
                                         + v34
                                         + (*((void *)&v32 + 1) + v33 + (v32 + v31) * v105) * v104));
                          if (!v37) {
                            uint64_t v38 = v110;
                          }
                          _WORD *v38 = v36;
                          uint64_t v39 = v115;
                          uint64_t v29 = --v115;
                          uint64_t v18 = (void *)a1;
                        }
                        while (v39 > 0);
                        uint64_t v27 = *((void *)&v114 + 1);
                      }
                      *((void *)&v114 + 1) = v27 - 1;
                      BOOL v24 = v27-- <= 0;
                    }
                    while (!v24);
                    uint64_t v25 = v114;
                  }
                  *(void *)&long long v114 = v25 - 1;
                  BOOL v24 = v25-- <= 0;
                }
                while (!v24);
                uint64_t i = *((void *)&v113 + 1);
                uint64_t v21 = v18[8];
              }
              ++i;
            }
            uint64_t v20 = v113;
            uint64_t v19 = v18[7];
          }
          *(void *)&long long v113 = ++v20;
        }
        while (v20 < v19);
      }
    }
    else if (v19 >= 1)
    {
      uint64_t v61 = 0;
      uint64_t v62 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v113 + 1) = 0;
        if (v62 >= 1)
        {
          uint64_t v63 = 0;
          uint64_t v64 = v18[9];
          do
          {
            *(void *)&long long v114 = 0;
            if (v64 >= 1)
            {
              uint64_t v65 = 0;
              uint64_t v66 = v18[10];
              do
              {
                *((void *)&v114 + 1) = 0;
                if (v66 >= 1)
                {
                  uint64_t v67 = 0;
                  uint64_t v68 = v18[11];
                  do
                  {
                    uint64_t v115 = 0;
                    if (v68 >= 1)
                    {
                      uint64_t v69 = 0;
                      do
                      {
                        long long v70 = v113;
                        uint64_t v71 = a2[2];
                        long long v72 = v114;
                        uint64_t v73 = *a2;
                        uint64_t v74 = a2[4];
                        ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                        __int16 v76 = v75;
                        int v77 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v78 = (_WORD *)(v111
                                      + 2
                                      * (v69
                                       + *((void *)&v70 + 1) * v108
                                       + v70 * v102
                                       + v74
                                       + (*((void *)&v72 + 1) + v73 + (v72 + v71) * v105) * v104));
                        if (!v77) {
                          long long v78 = v110;
                        }
                        *long long v78 = v76;
                        uint64_t v69 = v115 + 1;
                        uint64_t v115 = v69;
                        uint64_t v18 = (void *)a1;
                        uint64_t v68 = *(void *)(a1 + 88);
                      }
                      while (v69 < v68);
                      uint64_t v67 = *((void *)&v114 + 1);
                      uint64_t v66 = *(void *)(a1 + 80);
                    }
                    *((void *)&v114 + 1) = ++v67;
                  }
                  while (v67 < v66);
                  uint64_t v65 = v114;
                  uint64_t v64 = v18[9];
                }
                *(void *)&long long v114 = ++v65;
              }
              while (v65 < v64);
              uint64_t v63 = *((void *)&v113 + 1);
              uint64_t v62 = v18[8];
            }
            *((void *)&v113 + 1) = ++v63;
          }
          while (v63 < v62);
          uint64_t v61 = v113;
          uint64_t v19 = v18[7];
        }
        *(void *)&long long v113 = ++v61;
      }
      while (v61 < v19);
    }
  }
  else
  {
    *(void *)&long long v113 = 0;
    uint64_t v40 = *(void *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v40 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v113 + 1) = 0;
          if (v42 >= 1)
          {
            for (uint64_t j = 0; j < v42; *((void *)&v113 + 1) = j)
            {
              uint64_t v44 = v18[9];
              BOOL v24 = v44 < 1;
              uint64_t v45 = v44 - 1;
              *(void *)&long long v114 = v45;
              if (!v24)
              {
                do
                {
                  uint64_t v46 = v18[10];
                  BOOL v24 = v46 < 1;
                  uint64_t v47 = v46 - 1;
                  *((void *)&v114 + 1) = v47;
                  if (!v24)
                  {
                    do
                    {
                      uint64_t v48 = v18[11];
                      uint64_t v115 = v48 - 1;
                      if (v48 >= 1)
                      {
                        do
                        {
                          long long v49 = v113;
                          uint64_t v50 = a2[2];
                          uint64_t v51 = v18[9];
                          uint64_t v52 = v18[10];
                          long long v53 = v114;
                          uint64_t v54 = *a2;
                          uint64_t v55 = v18[11];
                          uint64_t v56 = a2[4];
                          ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                          __int16 v58 = v57;
                          int v59 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v60 = (_WORD *)(v111
                                        + 2
                                        * (v49 * v102
                                         - v48
                                         + *((void *)&v49 + 1) * v108
                                         + v55
                                         + v56
                                         + (v52 + ~*((void *)&v53 + 1) + (v51 + v50 + ~(void)v53) * v105 + v54)
                                         * v104));
                          if (!v59) {
                            uint64_t v60 = v110;
                          }
                          _WORD *v60 = v58;
                          uint64_t v48 = v115--;
                          uint64_t v18 = (void *)a1;
                        }
                        while (v48 > 0);
                        uint64_t v47 = *((void *)&v114 + 1);
                      }
                      *((void *)&v114 + 1) = v47 - 1;
                      BOOL v24 = v47-- <= 0;
                    }
                    while (!v24);
                    uint64_t v45 = v114;
                  }
                  *(void *)&long long v114 = v45 - 1;
                  BOOL v24 = v45-- <= 0;
                }
                while (!v24);
                uint64_t j = *((void *)&v113 + 1);
                uint64_t v42 = v18[8];
              }
              ++j;
            }
            uint64_t v41 = v113;
            uint64_t v40 = v18[7];
          }
          *(void *)&long long v113 = ++v41;
        }
        while (v41 < v40);
      }
    }
    else if (v40 >= 1)
    {
      uint64_t v79 = 0;
      uint64_t v80 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v113 + 1) = 0;
        if (v80 >= 1)
        {
          uint64_t v81 = 0;
          uint64_t v82 = v18[9];
          do
          {
            *(void *)&long long v114 = 0;
            if (v82 >= 1)
            {
              uint64_t v83 = 0;
              uint64_t v84 = v18[10];
              do
              {
                *((void *)&v114 + 1) = 0;
                if (v84 >= 1)
                {
                  uint64_t v85 = 0;
                  uint64_t v86 = v18[11];
                  do
                  {
                    uint64_t v115 = 0;
                    if (v86 >= 1)
                    {
                      uint64_t v87 = 0;
                      do
                      {
                        uint64_t v103 = v86;
                        long long v88 = v113;
                        uint64_t v89 = a2[3];
                        uint64_t v91 = v18[9];
                        uint64_t v90 = v18[10];
                        long long v92 = v114;
                        uint64_t v93 = a2[1];
                        uint64_t v94 = a2[5];
                        ZinIrWeightBase::GetAt<half>((uint64_t)v18);
                        __int16 v96 = v95;
                        int v97 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        unint64_t v98 = (_WORD *)(v111
                                      + 2
                                      * (v103
                                       + ~v87
                                       + (v88 + *((void *)&v88 + 1) * v101) * v108
                                       + v94
                                       + (v90 + ~*((void *)&v92 + 1) + (v91 + v89 + ~(void)v92) * v105 + v93) * v104));
                        if (!v97) {
                          unint64_t v98 = v110;
                        }
                        *unint64_t v98 = v96;
                        uint64_t v87 = v115 + 1;
                        uint64_t v115 = v87;
                        uint64_t v18 = (void *)a1;
                        uint64_t v86 = *(void *)(a1 + 88);
                      }
                      while (v87 < v86);
                      uint64_t v85 = *((void *)&v114 + 1);
                      uint64_t v84 = *(void *)(a1 + 80);
                    }
                    *((void *)&v114 + 1) = ++v85;
                  }
                  while (v85 < v84);
                  uint64_t v83 = v114;
                  uint64_t v82 = v18[9];
                }
                *(void *)&long long v114 = ++v83;
              }
              while (v83 < v82);
              uint64_t v81 = *((void *)&v113 + 1);
              uint64_t v80 = v18[8];
            }
            *((void *)&v113 + 1) = ++v81;
          }
          while (v81 < v80);
          uint64_t v79 = v113;
          uint64_t v40 = v18[7];
        }
        *(void *)&long long v113 = ++v79;
      }
      while (v79 < v40);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v110, &v109);
  *a5 = v109;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v110);
}

void sub_211155CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<e4m3_t>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *a4;
  if (*a4 && v8 != *(void *)(v9 + 56)) {
    ZinAssertImpl("kernel zero point must be per-cout");
  }
  uint64_t v100 = *(void *)(a1 + 88) + a2[4] + a2[5];
  uint64_t v101 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v104 = v100 * v101 * (*(void *)(a1 + 72) + a2[2] + a2[3]);
  uint64_t v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    int64_t v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902) {
          uint64_t v11 = v10 / v104 % v8;
        }
        else {
          uint64_t v11 = v10 / v98;
        }
        char v13 = ZinIrVector::GetAt<e4m3_t>(*a4, (int)v11);
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        char v13 = 0;
      }
      __int16 v14 = (unsigned char *)(v107 + v10);
      if (!v12) {
        __int16 v14 = v106;
      }
      *__int16 v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  __int16 v15 = (void *)a1;
  uint64_t v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(void *)&long long v109 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (uint64_t i = 0; i < v18; *((void *)&v109 + 1) = i)
            {
              uint64_t v20 = v15[9];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *(void *)&long long v110 = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = v15[10];
                  BOOL v21 = v23 < 1;
                  uint64_t v24 = v23 - 1;
                  *((void *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v25 = v15[11];
                      uint64_t v26 = v25 - 1;
                      uint64_t v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          long long v27 = v109;
                          uint64_t v28 = a2[3];
                          long long v29 = v110;
                          uint64_t v30 = a2[1];
                          uint64_t v31 = a2[5];
                          char v32 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                          int v33 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v34 = (unsigned char *)(v107
                                        + v26
                                        + (v27 + *((void *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((void *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33) {
                            uint64_t v34 = v106;
                          }
                          unsigned char *v34 = v32;
                          uint64_t v35 = v111;
                          uint64_t v26 = --v111;
                          __int16 v15 = (void *)a1;
                        }
                        while (v35 > 0);
                        uint64_t v24 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v24 - 1;
                      BOOL v21 = v24-- <= 0;
                    }
                    while (!v21);
                    uint64_t v22 = v110;
                  }
                  *(void *)&long long v110 = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t i = *((void *)&v109 + 1);
                uint64_t v18 = v15[8];
              }
              ++i;
            }
            uint64_t v17 = v109;
            uint64_t v16 = v15[7];
          }
          *(void *)&long long v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          uint64_t v58 = 0;
          uint64_t v59 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v59 >= 1)
            {
              uint64_t v60 = 0;
              uint64_t v61 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v63 >= 1)
                    {
                      uint64_t v64 = 0;
                      do
                      {
                        long long v65 = v109;
                        uint64_t v66 = a2[2];
                        long long v67 = v110;
                        uint64_t v68 = *a2;
                        uint64_t v69 = a2[4];
                        char v70 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                        int v71 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v72 = (unsigned char *)(v107
                                      + v64
                                      + *((void *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((void *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71) {
                          long long v72 = v106;
                        }
                        *long long v72 = v70;
                        uint64_t v64 = v111 + 1;
                        uint64_t v111 = v64;
                        __int16 v15 = (void *)a1;
                        uint64_t v63 = *(void *)(a1 + 88);
                      }
                      while (v64 < v63);
                      uint64_t v62 = *((void *)&v110 + 1);
                      uint64_t v61 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  uint64_t v60 = v110;
                  uint64_t v59 = v15[9];
                }
                *(void *)&long long v110 = ++v60;
              }
              while (v60 < v59);
              uint64_t v58 = *((void *)&v109 + 1);
              uint64_t v57 = v15[8];
            }
            *((void *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          uint64_t v56 = v109;
          uint64_t v16 = v15[7];
        }
        *(void *)&long long v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(void *)&long long v109 = 0;
    uint64_t v36 = *(void *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (uint64_t j = 0; j < v38; *((void *)&v109 + 1) = j)
            {
              uint64_t v40 = v15[9];
              BOOL v21 = v40 < 1;
              uint64_t v41 = v40 - 1;
              *(void *)&long long v110 = v41;
              if (!v21)
              {
                do
                {
                  uint64_t v42 = v15[10];
                  BOOL v21 = v42 < 1;
                  uint64_t v43 = v42 - 1;
                  *((void *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v44 = v15[11];
                      uint64_t v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          uint64_t v45 = v110;
                          uint64_t v94 = *((void *)&v109 + 1);
                          uint64_t v97 = v109;
                          uint64_t v46 = a2[2];
                          uint64_t v47 = v15[9];
                          uint64_t v48 = v15[10];
                          uint64_t v49 = *((void *)&v110 + 1);
                          uint64_t v50 = *a2;
                          uint64_t v51 = v15[11];
                          uint64_t v52 = a2[4];
                          char v53 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v55 = (unsigned char *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54) {
                            uint64_t v55 = v106;
                          }
                          *uint64_t v55 = v53;
                          uint64_t v44 = v111--;
                          __int16 v15 = (void *)a1;
                        }
                        while (v44 > 0);
                        uint64_t v43 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v43 - 1;
                      BOOL v21 = v43-- <= 0;
                    }
                    while (!v21);
                    uint64_t v41 = v110;
                  }
                  *(void *)&long long v110 = v41 - 1;
                  BOOL v21 = v41-- <= 0;
                }
                while (!v21);
                uint64_t j = *((void *)&v109 + 1);
                uint64_t v38 = v15[8];
              }
              ++j;
            }
            uint64_t v37 = v109;
            uint64_t v36 = v15[7];
          }
          *(void *)&long long v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      uint64_t v73 = 0;
      uint64_t v74 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v76 >= 1)
            {
              uint64_t v77 = 0;
              uint64_t v78 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  uint64_t v79 = 0;
                  uint64_t v80 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v80 >= 1)
                    {
                      uint64_t v81 = 0;
                      do
                      {
                        uint64_t v99 = v80;
                        uint64_t v82 = *((void *)&v109 + 1);
                        uint64_t v95 = v109;
                        uint64_t v83 = a2[3];
                        uint64_t v84 = v15[9];
                        uint64_t v85 = v15[10];
                        long long v86 = v110;
                        uint64_t v87 = a2[1];
                        uint64_t v88 = a2[5];
                        char v89 = ZinIrWeightBase::GetAt<e4m3_t>((uint64_t)v15);
                        int v90 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        uint64_t v91 = (unsigned char *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((void *)&v86 + 1) + (v84 + v83 + ~(void)v86) * v101 + v87) * v100);
                        if (!v90) {
                          uint64_t v91 = v106;
                        }
                        *uint64_t v91 = v89;
                        uint64_t v81 = v111 + 1;
                        uint64_t v111 = v81;
                        __int16 v15 = (void *)a1;
                        uint64_t v80 = *(void *)(a1 + 88);
                      }
                      while (v81 < v80);
                      uint64_t v79 = *((void *)&v110 + 1);
                      uint64_t v78 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  uint64_t v77 = v110;
                  uint64_t v76 = v15[9];
                }
                *(void *)&long long v110 = ++v77;
              }
              while (v77 < v76);
              uint64_t v75 = *((void *)&v109 + 1);
              uint64_t v74 = v15[8];
            }
            *((void *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          uint64_t v73 = v109;
          uint64_t v36 = v15[7];
        }
        *(void *)&long long v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_2111564F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<signed char>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *a4;
  if (*a4 && v8 != *(void *)(v9 + 56)) {
    ZinAssertImpl("kernel zero point must be per-cout");
  }
  uint64_t v100 = *(void *)(a1 + 88) + a2[4] + a2[5];
  uint64_t v101 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v104 = v100 * v101 * (*(void *)(a1 + 72) + a2[2] + a2[3]);
  uint64_t v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    int64_t v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902) {
          uint64_t v11 = v10 / v104 % v8;
        }
        else {
          uint64_t v11 = v10 / v98;
        }
        char v13 = ZinIrVector::GetAt<signed char>(*a4, (int)v11);
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        char v13 = 0;
      }
      __int16 v14 = (unsigned char *)(v107 + v10);
      if (!v12) {
        __int16 v14 = v106;
      }
      *__int16 v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  __int16 v15 = (void *)a1;
  uint64_t v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(void *)&long long v109 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (uint64_t i = 0; i < v18; *((void *)&v109 + 1) = i)
            {
              uint64_t v20 = v15[9];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *(void *)&long long v110 = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = v15[10];
                  BOOL v21 = v23 < 1;
                  uint64_t v24 = v23 - 1;
                  *((void *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v25 = v15[11];
                      uint64_t v26 = v25 - 1;
                      uint64_t v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          long long v27 = v109;
                          uint64_t v28 = a2[3];
                          long long v29 = v110;
                          uint64_t v30 = a2[1];
                          uint64_t v31 = a2[5];
                          char v32 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                          int v33 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v34 = (unsigned char *)(v107
                                        + v26
                                        + (v27 + *((void *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((void *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33) {
                            uint64_t v34 = v106;
                          }
                          unsigned char *v34 = v32;
                          uint64_t v35 = v111;
                          uint64_t v26 = --v111;
                          __int16 v15 = (void *)a1;
                        }
                        while (v35 > 0);
                        uint64_t v24 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v24 - 1;
                      BOOL v21 = v24-- <= 0;
                    }
                    while (!v21);
                    uint64_t v22 = v110;
                  }
                  *(void *)&long long v110 = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t i = *((void *)&v109 + 1);
                uint64_t v18 = v15[8];
              }
              ++i;
            }
            uint64_t v17 = v109;
            uint64_t v16 = v15[7];
          }
          *(void *)&long long v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          uint64_t v58 = 0;
          uint64_t v59 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v59 >= 1)
            {
              uint64_t v60 = 0;
              uint64_t v61 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v63 >= 1)
                    {
                      uint64_t v64 = 0;
                      do
                      {
                        long long v65 = v109;
                        uint64_t v66 = a2[2];
                        long long v67 = v110;
                        uint64_t v68 = *a2;
                        uint64_t v69 = a2[4];
                        char v70 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                        int v71 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v72 = (unsigned char *)(v107
                                      + v64
                                      + *((void *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((void *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71) {
                          long long v72 = v106;
                        }
                        *long long v72 = v70;
                        uint64_t v64 = v111 + 1;
                        uint64_t v111 = v64;
                        __int16 v15 = (void *)a1;
                        uint64_t v63 = *(void *)(a1 + 88);
                      }
                      while (v64 < v63);
                      uint64_t v62 = *((void *)&v110 + 1);
                      uint64_t v61 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  uint64_t v60 = v110;
                  uint64_t v59 = v15[9];
                }
                *(void *)&long long v110 = ++v60;
              }
              while (v60 < v59);
              uint64_t v58 = *((void *)&v109 + 1);
              uint64_t v57 = v15[8];
            }
            *((void *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          uint64_t v56 = v109;
          uint64_t v16 = v15[7];
        }
        *(void *)&long long v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(void *)&long long v109 = 0;
    uint64_t v36 = *(void *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (uint64_t j = 0; j < v38; *((void *)&v109 + 1) = j)
            {
              uint64_t v40 = v15[9];
              BOOL v21 = v40 < 1;
              uint64_t v41 = v40 - 1;
              *(void *)&long long v110 = v41;
              if (!v21)
              {
                do
                {
                  uint64_t v42 = v15[10];
                  BOOL v21 = v42 < 1;
                  uint64_t v43 = v42 - 1;
                  *((void *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v44 = v15[11];
                      uint64_t v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          uint64_t v45 = v110;
                          uint64_t v94 = *((void *)&v109 + 1);
                          uint64_t v97 = v109;
                          uint64_t v46 = a2[2];
                          uint64_t v47 = v15[9];
                          uint64_t v48 = v15[10];
                          uint64_t v49 = *((void *)&v110 + 1);
                          uint64_t v50 = *a2;
                          uint64_t v51 = v15[11];
                          uint64_t v52 = a2[4];
                          char v53 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v55 = (unsigned char *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54) {
                            uint64_t v55 = v106;
                          }
                          *uint64_t v55 = v53;
                          uint64_t v44 = v111--;
                          __int16 v15 = (void *)a1;
                        }
                        while (v44 > 0);
                        uint64_t v43 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v43 - 1;
                      BOOL v21 = v43-- <= 0;
                    }
                    while (!v21);
                    uint64_t v41 = v110;
                  }
                  *(void *)&long long v110 = v41 - 1;
                  BOOL v21 = v41-- <= 0;
                }
                while (!v21);
                uint64_t j = *((void *)&v109 + 1);
                uint64_t v38 = v15[8];
              }
              ++j;
            }
            uint64_t v37 = v109;
            uint64_t v36 = v15[7];
          }
          *(void *)&long long v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      uint64_t v73 = 0;
      uint64_t v74 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v76 >= 1)
            {
              uint64_t v77 = 0;
              uint64_t v78 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  uint64_t v79 = 0;
                  uint64_t v80 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v80 >= 1)
                    {
                      uint64_t v81 = 0;
                      do
                      {
                        uint64_t v99 = v80;
                        uint64_t v82 = *((void *)&v109 + 1);
                        uint64_t v95 = v109;
                        uint64_t v83 = a2[3];
                        uint64_t v84 = v15[9];
                        uint64_t v85 = v15[10];
                        long long v86 = v110;
                        uint64_t v87 = a2[1];
                        uint64_t v88 = a2[5];
                        char v89 = ZinIrWeightBase::GetAt<signed char>((uint64_t)v15);
                        int v90 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        uint64_t v91 = (unsigned char *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((void *)&v86 + 1) + (v84 + v83 + ~(void)v86) * v101 + v87) * v100);
                        if (!v90) {
                          uint64_t v91 = v106;
                        }
                        *uint64_t v91 = v89;
                        uint64_t v81 = v111 + 1;
                        uint64_t v111 = v81;
                        __int16 v15 = (void *)a1;
                        uint64_t v80 = *(void *)(a1 + 88);
                      }
                      while (v81 < v80);
                      uint64_t v79 = *((void *)&v110 + 1);
                      uint64_t v78 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  uint64_t v77 = v110;
                  uint64_t v76 = v15[9];
                }
                *(void *)&long long v110 = ++v77;
              }
              while (v77 < v76);
              uint64_t v75 = *((void *)&v109 + 1);
              uint64_t v74 = v15[8];
            }
            *((void *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          uint64_t v73 = v109;
          uint64_t v36 = v15[7];
        }
        *(void *)&long long v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_211156D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::PadWeightDataAndChangeLayout<unsigned char>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *a4;
  if (*a4 && v8 != *(void *)(v9 + 56)) {
    ZinAssertImpl("kernel zero point must be per-cout");
  }
  uint64_t v100 = *(void *)(a1 + 88) + a2[4] + a2[5];
  uint64_t v101 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v104 = v100 * v101 * (*(void *)(a1 + 72) + a2[2] + a2[3]);
  uint64_t v98 = v104 * v7;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v106, v104 * v7 * v8);
  if (v108 != v107)
  {
    int64_t v10 = 0;
    do
    {
      if (v9)
      {
        if (a3 == 1145261902) {
          uint64_t v11 = v10 / v104 % v8;
        }
        else {
          uint64_t v11 = v10 / v98;
        }
        char v13 = ZinIrVector::GetAt<unsigned char>(*a4, (int)v11);
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      }
      else
      {
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
        char v13 = 0;
      }
      __int16 v14 = (unsigned char *)(v107 + v10);
      if (!v12) {
        __int16 v14 = v106;
      }
      *__int16 v14 = v13;
      ++v10;
    }
    while (v108 - v107 > (unint64_t)v10);
  }
  __int16 v15 = (void *)a1;
  uint64_t v96 = v8;
  if (*(_DWORD *)(a1 + 156) == a3)
  {
    *(void *)&long long v109 = 0;
    uint64_t v16 = *(void *)(a1 + 56);
    if (a3 == 1145261902)
    {
      if (v16 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v18 >= 1)
          {
            for (uint64_t i = 0; i < v18; *((void *)&v109 + 1) = i)
            {
              uint64_t v20 = v15[9];
              BOOL v21 = v20 < 1;
              uint64_t v22 = v20 - 1;
              *(void *)&long long v110 = v22;
              if (!v21)
              {
                do
                {
                  uint64_t v23 = v15[10];
                  BOOL v21 = v23 < 1;
                  uint64_t v24 = v23 - 1;
                  *((void *)&v110 + 1) = v24;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v25 = v15[11];
                      uint64_t v26 = v25 - 1;
                      uint64_t v111 = v25 - 1;
                      if (v25 >= 1)
                      {
                        do
                        {
                          long long v27 = v109;
                          uint64_t v28 = a2[3];
                          long long v29 = v110;
                          uint64_t v30 = a2[1];
                          uint64_t v31 = a2[5];
                          char v32 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                          int v33 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v34 = (unsigned char *)(v107
                                        + v26
                                        + (v27 + *((void *)&v27 + 1) * v96) * v104
                                        + v31
                                        + (*((void *)&v29 + 1) + v30 + (v29 + v28) * v101) * v100);
                          if (!v33) {
                            uint64_t v34 = v106;
                          }
                          unsigned char *v34 = v32;
                          uint64_t v35 = v111;
                          uint64_t v26 = --v111;
                          __int16 v15 = (void *)a1;
                        }
                        while (v35 > 0);
                        uint64_t v24 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v24 - 1;
                      BOOL v21 = v24-- <= 0;
                    }
                    while (!v21);
                    uint64_t v22 = v110;
                  }
                  *(void *)&long long v110 = v22 - 1;
                  BOOL v21 = v22-- <= 0;
                }
                while (!v21);
                uint64_t i = *((void *)&v109 + 1);
                uint64_t v18 = v15[8];
              }
              ++i;
            }
            uint64_t v17 = v109;
            uint64_t v16 = v15[7];
          }
          *(void *)&long long v109 = ++v17;
        }
        while (v17 < v16);
      }
    }
    else if (v16 >= 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v57 >= 1)
        {
          uint64_t v58 = 0;
          uint64_t v59 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v59 >= 1)
            {
              uint64_t v60 = 0;
              uint64_t v61 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v61 >= 1)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v63 >= 1)
                    {
                      uint64_t v64 = 0;
                      do
                      {
                        long long v65 = v109;
                        uint64_t v66 = a2[2];
                        long long v67 = v110;
                        uint64_t v68 = *a2;
                        uint64_t v69 = a2[4];
                        char v70 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                        int v71 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        long long v72 = (unsigned char *)(v107
                                      + v64
                                      + *((void *)&v65 + 1) * v104
                                      + v65 * v98
                                      + v69
                                      + (*((void *)&v67 + 1) + v68 + (v67 + v66) * v101) * v100);
                        if (!v71) {
                          long long v72 = v106;
                        }
                        *long long v72 = v70;
                        uint64_t v64 = v111 + 1;
                        uint64_t v111 = v64;
                        __int16 v15 = (void *)a1;
                        uint64_t v63 = *(void *)(a1 + 88);
                      }
                      while (v64 < v63);
                      uint64_t v62 = *((void *)&v110 + 1);
                      uint64_t v61 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v62;
                  }
                  while (v62 < v61);
                  uint64_t v60 = v110;
                  uint64_t v59 = v15[9];
                }
                *(void *)&long long v110 = ++v60;
              }
              while (v60 < v59);
              uint64_t v58 = *((void *)&v109 + 1);
              uint64_t v57 = v15[8];
            }
            *((void *)&v109 + 1) = ++v58;
          }
          while (v58 < v57);
          uint64_t v56 = v109;
          uint64_t v16 = v15[7];
        }
        *(void *)&long long v109 = ++v56;
      }
      while (v56 < v16);
    }
  }
  else
  {
    *(void *)&long long v109 = 0;
    uint64_t v36 = *(void *)(a1 + 56);
    if (a3 == 1262703187)
    {
      if (v36 >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a1 + 64);
        do
        {
          *((void *)&v109 + 1) = 0;
          if (v38 >= 1)
          {
            for (uint64_t j = 0; j < v38; *((void *)&v109 + 1) = j)
            {
              uint64_t v40 = v15[9];
              BOOL v21 = v40 < 1;
              uint64_t v41 = v40 - 1;
              *(void *)&long long v110 = v41;
              if (!v21)
              {
                do
                {
                  uint64_t v42 = v15[10];
                  BOOL v21 = v42 < 1;
                  uint64_t v43 = v42 - 1;
                  *((void *)&v110 + 1) = v43;
                  if (!v21)
                  {
                    do
                    {
                      uint64_t v44 = v15[11];
                      uint64_t v111 = v44 - 1;
                      if (v44 >= 1)
                      {
                        do
                        {
                          uint64_t v45 = v110;
                          uint64_t v94 = *((void *)&v109 + 1);
                          uint64_t v97 = v109;
                          uint64_t v46 = a2[2];
                          uint64_t v47 = v15[9];
                          uint64_t v48 = v15[10];
                          uint64_t v49 = *((void *)&v110 + 1);
                          uint64_t v50 = *a2;
                          uint64_t v51 = v15[11];
                          uint64_t v52 = a2[4];
                          char v53 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v55 = (unsigned char *)(v107
                                        + v97 * v98
                                        - v44
                                        + v94 * v104
                                        + v51
                                        + v52
                                        + (v48 + ~v49 + (v47 + v46 + ~v45) * v101 + v50) * v100);
                          if (!v54) {
                            uint64_t v55 = v106;
                          }
                          *uint64_t v55 = v53;
                          uint64_t v44 = v111--;
                          __int16 v15 = (void *)a1;
                        }
                        while (v44 > 0);
                        uint64_t v43 = *((void *)&v110 + 1);
                      }
                      *((void *)&v110 + 1) = v43 - 1;
                      BOOL v21 = v43-- <= 0;
                    }
                    while (!v21);
                    uint64_t v41 = v110;
                  }
                  *(void *)&long long v110 = v41 - 1;
                  BOOL v21 = v41-- <= 0;
                }
                while (!v21);
                uint64_t j = *((void *)&v109 + 1);
                uint64_t v38 = v15[8];
              }
              ++j;
            }
            uint64_t v37 = v109;
            uint64_t v36 = v15[7];
          }
          *(void *)&long long v109 = ++v37;
        }
        while (v37 < v36);
      }
    }
    else if (v36 >= 1)
    {
      uint64_t v73 = 0;
      uint64_t v74 = *(void *)(a1 + 64);
      do
      {
        *((void *)&v109 + 1) = 0;
        if (v74 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = v15[9];
          do
          {
            *(void *)&long long v110 = 0;
            if (v76 >= 1)
            {
              uint64_t v77 = 0;
              uint64_t v78 = v15[10];
              do
              {
                *((void *)&v110 + 1) = 0;
                if (v78 >= 1)
                {
                  uint64_t v79 = 0;
                  uint64_t v80 = v15[11];
                  do
                  {
                    uint64_t v111 = 0;
                    if (v80 >= 1)
                    {
                      uint64_t v81 = 0;
                      do
                      {
                        uint64_t v99 = v80;
                        uint64_t v82 = *((void *)&v109 + 1);
                        uint64_t v95 = v109;
                        uint64_t v83 = a2[3];
                        uint64_t v84 = v15[9];
                        uint64_t v85 = v15[10];
                        long long v86 = v110;
                        uint64_t v87 = a2[1];
                        uint64_t v88 = a2[5];
                        char v89 = ZinIrWeightBase::GetAt<unsigned char>((uint64_t)v15);
                        int v90 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        uint64_t v91 = (unsigned char *)(v107
                                      + v99
                                      + ~v81
                                      + (v95 + v82 * v96) * v104
                                      + v88
                                      + (v85 + ~*((void *)&v86 + 1) + (v84 + v83 + ~(void)v86) * v101 + v87) * v100);
                        if (!v90) {
                          uint64_t v91 = v106;
                        }
                        *uint64_t v91 = v89;
                        uint64_t v81 = v111 + 1;
                        uint64_t v111 = v81;
                        __int16 v15 = (void *)a1;
                        uint64_t v80 = *(void *)(a1 + 88);
                      }
                      while (v81 < v80);
                      uint64_t v79 = *((void *)&v110 + 1);
                      uint64_t v78 = *(void *)(a1 + 80);
                    }
                    *((void *)&v110 + 1) = ++v79;
                  }
                  while (v79 < v78);
                  uint64_t v77 = v110;
                  uint64_t v76 = v15[9];
                }
                *(void *)&long long v110 = ++v77;
              }
              while (v77 < v76);
              uint64_t v75 = *((void *)&v109 + 1);
              uint64_t v74 = v15[8];
            }
            *((void *)&v109 + 1) = ++v75;
          }
          while (v75 < v74);
          uint64_t v73 = v109;
          uint64_t v36 = v15[7];
        }
        *(void *)&long long v109 = ++v73;
      }
      while (v73 < v36);
    }
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v106, &v105);
  *a5 = v105;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v106);
}

void sub_21115757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrWeight::SliceWeight(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if ((v5 - 7) >= 0x15)
  {
    switch(v5)
    {
      case 1:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>(a1, a2, a3, &v23);
        goto LABEL_15;
      case 2:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>(a1, a2, a3, &v23);
        goto LABEL_15;
      case 3:
        goto LABEL_9;
      case 4:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>(a1, a2, a3, &v23);
        goto LABEL_15;
      case 5:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>(a1, a2, a3, &v23);
        goto LABEL_15;
      case 6:
        ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>(a1, a2, a3, &v23);
LABEL_15:
        uint64_t v22 = (std::__shared_weak_count *)*((void *)&v23 + 1);
        if ((void)v23) {
          operator new();
        }
        *a4 = 0;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        return;
      default:
        if (v5 == 31) {
          break;
        }
LABEL_9:
        BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v14) {
          ZinIrWeight::SliceWeight(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        goto LABEL_4;
    }
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v6) {
    ZinIrWeight::SliceWeight(v6, v7, v8, v9, v10, v11, v12, v13);
  }
LABEL_4:
  *a4 = 0;
}

void sub_211157758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4034FA82A5);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[6] * a2[5] * a2[7];
  long long v41 = 0u;
  long long v40 = 0u;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)v37, v8 * v7 * a2[9]);
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a3 * a2[5];
  uint64_t v17 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v19 = *a2;
  uint64_t v39 = v19;
  uint64_t v34 = v15;
  if (v19 < v15)
  {
    uint64_t v20 = 0;
    uint64_t v35 = v13 * v9;
    uint64_t v21 = v17 * v11;
    uint64_t v22 = v16 * v10;
    uint64_t v23 = v18 * v12;
    do
    {
      uint64_t v24 = a2[1];
      *(void *)&long long v40 = v24;
      if (v24 < v35)
      {
        do
        {
          uint64_t v25 = a2[2];
          *((void *)&v40 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              uint64_t v26 = a2[3];
              *(void *)&long long v41 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((void *)&v41 + 1) = a2[4];
                  if (*((uint64_t *)&v41 + 1) < v23)
                  {
                    uint64_t v27 = 4 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<float>(a1);
                      int v29 = v28;
                      int v30 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v31 = (_DWORD *)(v38 + v27);
                      if (!v30) {
                        uint64_t v31 = v37;
                      }
                      ++v20;
                      _DWORD *v31 = v29;
                      *((void *)&v41 + 1) += a3[4];
                      v27 += 4;
                    }
                    while (*((uint64_t *)&v41 + 1) < v23);
                    uint64_t v16 = a3[3];
                    uint64_t v26 = v41;
                  }
                  v26 += v16;
                  *(void *)&long long v41 = v26;
                }
                while (v26 < v22);
                uint64_t v17 = a3[2];
                uint64_t v25 = *((void *)&v40 + 1);
              }
              v25 += v17;
              *((void *)&v40 + 1) = v25;
            }
            while (v25 < v21);
            uint64_t v13 = a3[1];
            uint64_t v24 = v40;
          }
          v24 += v13;
          *(void *)&long long v40 = v24;
        }
        while (v24 < v35);
        uint64_t v14 = *a3;
        uint64_t v19 = v39;
      }
      v19 += v14;
      uint64_t v39 = v19;
    }
    while (v19 < v34);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>((uint64_t)v37, &v36);
  *a4 = v36;
  return details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_2111579D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[6] * a2[5] * a2[7];
  long long v41 = 0u;
  long long v40 = 0u;
  details::ZinIrMappedData_Impl<half>::ZinIrMappedData_Impl((uint64_t)v37, v8 * v7 * a2[9]);
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a3 * a2[5];
  uint64_t v17 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v19 = *a2;
  uint64_t v39 = v19;
  uint64_t v34 = v15;
  if (v19 < v15)
  {
    uint64_t v20 = 0;
    uint64_t v35 = v13 * v9;
    uint64_t v21 = v17 * v11;
    uint64_t v22 = v16 * v10;
    uint64_t v23 = v18 * v12;
    do
    {
      uint64_t v24 = a2[1];
      *(void *)&long long v40 = v24;
      if (v24 < v35)
      {
        do
        {
          uint64_t v25 = a2[2];
          *((void *)&v40 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              uint64_t v26 = a2[3];
              *(void *)&long long v41 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((void *)&v41 + 1) = a2[4];
                  if (*((uint64_t *)&v41 + 1) < v23)
                  {
                    uint64_t v27 = 2 * v20;
                    do
                    {
                      ZinIrWeightBase::GetAt<half>(a1);
                      __int16 v29 = v28;
                      int v30 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      uint64_t v31 = (_WORD *)(v38 + v27);
                      if (!v30) {
                        uint64_t v31 = v37;
                      }
                      ++v20;
                      _WORD *v31 = v29;
                      *((void *)&v41 + 1) += a3[4];
                      v27 += 2;
                    }
                    while (*((uint64_t *)&v41 + 1) < v23);
                    uint64_t v16 = a3[3];
                    uint64_t v26 = v41;
                  }
                  v26 += v16;
                  *(void *)&long long v41 = v26;
                }
                while (v26 < v22);
                uint64_t v17 = a3[2];
                uint64_t v25 = *((void *)&v40 + 1);
              }
              v25 += v17;
              *((void *)&v40 + 1) = v25;
            }
            while (v25 < v21);
            uint64_t v13 = a3[1];
            uint64_t v24 = v40;
          }
          v24 += v13;
          *(void *)&long long v40 = v24;
        }
        while (v24 < v35);
        uint64_t v14 = *a3;
        uint64_t v19 = v39;
      }
      v19 += v14;
      uint64_t v39 = v19;
    }
    while (v19 < v34);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>((uint64_t)v37, &v36);
  *a4 = v36;
  return details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)v37);
}

void sub_211157C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  details::ZinIrMappedData_Impl<half>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[6] * a2[5] * a2[7];
  long long v39 = 0u;
  long long v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a3 * a2[5];
  uint64_t v17 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v19 = *a2;
  uint64_t v37 = v19;
  uint64_t v32 = v15;
  if (v19 < v15)
  {
    uint64_t v20 = 0;
    uint64_t v33 = v13 * v9;
    uint64_t v21 = v17 * v11;
    uint64_t v22 = v16 * v10;
    uint64_t v23 = v18 * v12;
    do
    {
      uint64_t v24 = a2[1];
      *(void *)&long long v38 = v24;
      if (v24 < v33)
      {
        do
        {
          uint64_t v25 = a2[2];
          *((void *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              uint64_t v26 = a2[3];
              *(void *)&long long v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((void *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      char v27 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
                      int v28 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      __int16 v29 = (unsigned char *)(v36 + v20);
                      if (!v28) {
                        __int16 v29 = v35;
                      }
                      ++v20;
                      *__int16 v29 = v27;
                      *((void *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    uint64_t v16 = a3[3];
                    uint64_t v26 = v39;
                  }
                  v26 += v16;
                  *(void *)&long long v39 = v26;
                }
                while (v26 < v22);
                uint64_t v17 = a3[2];
                uint64_t v25 = *((void *)&v38 + 1);
              }
              v25 += v17;
              *((void *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            uint64_t v13 = a3[1];
            uint64_t v24 = v38;
          }
          v24 += v13;
          *(void *)&long long v38 = v24;
        }
        while (v24 < v33);
        uint64_t v14 = *a3;
        uint64_t v19 = v37;
      }
      v19 += v14;
      uint64_t v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_211157E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[6] * a2[5] * a2[7];
  long long v39 = 0u;
  long long v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a3 * a2[5];
  uint64_t v17 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v19 = *a2;
  uint64_t v37 = v19;
  uint64_t v32 = v15;
  if (v19 < v15)
  {
    uint64_t v20 = 0;
    uint64_t v33 = v13 * v9;
    uint64_t v21 = v17 * v11;
    uint64_t v22 = v16 * v10;
    uint64_t v23 = v18 * v12;
    do
    {
      uint64_t v24 = a2[1];
      *(void *)&long long v38 = v24;
      if (v24 < v33)
      {
        do
        {
          uint64_t v25 = a2[2];
          *((void *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              uint64_t v26 = a2[3];
              *(void *)&long long v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((void *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      char v27 = ZinIrWeightBase::GetAt<signed char>(a1);
                      int v28 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      __int16 v29 = (unsigned char *)(v36 + v20);
                      if (!v28) {
                        __int16 v29 = v35;
                      }
                      ++v20;
                      *__int16 v29 = v27;
                      *((void *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    uint64_t v16 = a3[3];
                    uint64_t v26 = v39;
                  }
                  v26 += v16;
                  *(void *)&long long v39 = v26;
                }
                while (v26 < v22);
                uint64_t v17 = a3[2];
                uint64_t v25 = *((void *)&v38 + 1);
              }
              v25 += v17;
              *((void *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            uint64_t v13 = a3[1];
            uint64_t v24 = v38;
          }
          v24 += v13;
          *(void *)&long long v38 = v24;
        }
        while (v24 < v33);
        uint64_t v14 = *a3;
        uint64_t v19 = v37;
      }
      v19 += v14;
      uint64_t v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_211158060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::SliceWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = a2[8];
  uint64_t v8 = a2[6] * a2[5] * a2[7];
  long long v39 = 0u;
  long long v38 = 0u;
  details::ZinIrMappedData_Impl<e4m3_t>::ZinIrMappedData_Impl((uint64_t)v35, v8 * v7 * a2[9]);
  uint64_t v9 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a3 * a2[5];
  uint64_t v17 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v19 = *a2;
  uint64_t v37 = v19;
  uint64_t v32 = v15;
  if (v19 < v15)
  {
    uint64_t v20 = 0;
    uint64_t v33 = v13 * v9;
    uint64_t v21 = v17 * v11;
    uint64_t v22 = v16 * v10;
    uint64_t v23 = v18 * v12;
    do
    {
      uint64_t v24 = a2[1];
      *(void *)&long long v38 = v24;
      if (v24 < v33)
      {
        do
        {
          uint64_t v25 = a2[2];
          *((void *)&v38 + 1) = v25;
          if (v25 < v21)
          {
            do
            {
              uint64_t v26 = a2[3];
              *(void *)&long long v39 = v26;
              if (v26 < v22)
              {
                do
                {
                  *((void *)&v39 + 1) = a2[4];
                  if (*((uint64_t *)&v39 + 1) < v23)
                  {
                    do
                    {
                      char v27 = ZinIrWeightBase::GetAt<unsigned char>(a1);
                      int v28 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                               + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      __int16 v29 = (unsigned char *)(v36 + v20);
                      if (!v28) {
                        __int16 v29 = v35;
                      }
                      ++v20;
                      *__int16 v29 = v27;
                      *((void *)&v39 + 1) += a3[4];
                    }
                    while (*((uint64_t *)&v39 + 1) < v23);
                    uint64_t v16 = a3[3];
                    uint64_t v26 = v39;
                  }
                  v26 += v16;
                  *(void *)&long long v39 = v26;
                }
                while (v26 < v22);
                uint64_t v17 = a3[2];
                uint64_t v25 = *((void *)&v38 + 1);
              }
              v25 += v17;
              *((void *)&v38 + 1) = v25;
            }
            while (v25 < v21);
            uint64_t v13 = a3[1];
            uint64_t v24 = v38;
          }
          v24 += v13;
          *(void *)&long long v38 = v24;
        }
        while (v24 < v33);
        uint64_t v14 = *a3;
        uint64_t v19 = v37;
      }
      v19 += v14;
      uint64_t v37 = v19;
    }
    while (v19 < v32);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>((uint64_t)v35, &v34);
  *a4 = v34;
  return details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)v35);
}

void sub_211158288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeight::Transform(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v27 = 0;
  BOOL v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  if (*(void **)a2 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = a1;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*v6 + 32))(*v6, v8, &v27);
      uint64_t v8 = v27;
      v6 += 2;
    }
    while (v6 != v7);
  }
  uint64_t v27 = 0;
  uint64_t v9 = *a3;
  *a3 = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = *(void **)(a2 + 8);
    if (*(void **)a2 != v11)
    {
      uint64_t v12 = 0;
      do
      {
        long long v13 = *(_OWORD *)v10;
        uint64_t v14 = v10[1];
        if (v14)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
          uint64_t v12 = v25;
        }
        if ((unint64_t)v12 >= v26)
        {
          long long v23 = v13;
          uint64_t v15 = (v12 - v24) >> 4;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = (uint64_t)(v26 - (void)v24) >> 3;
          if (v16 <= v15 + 1) {
            unint64_t v16 = v15 + 1;
          }
          if (v26 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          v28[4] = &v26;
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v26, v17);
          uint64_t v19 = &v18[16 * v15];
          v28[0] = v18;
          v28[1] = v19;
          v28[3] = &v18[16 * v20];
          *(_OWORD *)uint64_t v19 = v23;
          v28[2] = v19 + 16;
          std::vector<std::shared_ptr<ZinIrTransform>>::__swap_out_circular_buffer((uint64_t *)&v24, v28);
          uint64_t v12 = v25;
          std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer(v28);
        }
        else
        {
          *(void *)uint64_t v12 = v13;
          *((void *)v12 + 1) = v14;
          v12 += 16;
        }
        uint64_t v25 = v12;
        v10 += 2;
      }
      while (v10 != v11);
    }
    ZinIrWeightBase::SetupMutableHistory(a1, *a3, (long long **)&v24);
    v28[0] = &v24;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  }
  uint64_t v21 = v27;
  uint64_t v27 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
  }
  return 0;
}

void sub_2111584C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a11;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a20);
  uint64_t v21 = a14;
  a14 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
  }
  _Unwind_Resume(a1);
}

void ZinIrWeight::MergeResizeNNConvWeight(uint64_t a1, int *a2)
{
  BOOL v2 = a2;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v35 = *(void *)(a1 + 56);
  uint64_t v31 = v5 + *(void *)(a1 + 80) - 1;
  uint64_t v32 = v4 + *(void *)(a1 + 72) - 1;
  uint64_t v33 = v6 + *(void *)(a1 + 88) - 1;
  LODWORD(v50) = 0;
  std::vector<float>::vector(&__p, v34 * v35 * v32 * v31 * v33, &v50);
  if ((int)v6 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v7 = 0;
    int v8 = v5;
    uint64_t v9 = v4;
    uint64_t v27 = v6;
    uint64_t v28 = v4;
    uint64_t v29 = v5;
    int v30 = v2;
    do
    {
      uint64_t v36 = v7;
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (v8 >= 1)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v10 = *(void *)v2;
              if (*(void *)(a1 + 280) && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
                ZinAssertImpl("invalid weight");
              }
              uint64_t v41 = *(void *)(a1 + 56);
              if (v41 >= 1)
              {
                uint64_t v11 = 0;
                uint64_t v13 = *(void *)(a1 + 80);
                uint64_t v12 = *(void *)(a1 + 88);
                uint64_t v47 = *(void *)(a1 + 72);
                uint64_t v14 = v47 + (v10 >> 32) - 1;
                uint64_t v15 = v13 + (int)v10 - 1;
                uint64_t v16 = v2[2] + v12 - 1;
                uint64_t v17 = 4 * v16;
                uint64_t v18 = v37 + 4 * v16 * (v39 + i * v15);
                uint64_t v19 = v14 * v16 * v15;
                uint64_t v44 = *(void *)(a1 + 64);
                uint64_t v40 = 4 * v19 * v44;
                uint64_t v42 = v18;
                uint64_t v43 = 4 * v19;
                uint64_t v46 = v17 * v15;
                do
                {
                  if (v44 >= 1)
                  {
                    uint64_t v20 = 0;
                    uint64_t v45 = v42;
                    do
                    {
                      if (v47 >= 1)
                      {
                        uint64_t v21 = 0;
                        uint64_t v48 = v45;
                        do
                        {
                          if (v13 >= 1)
                          {
                            uint64_t v22 = 0;
                            uint64_t v23 = v48;
                            do
                            {
                              if (v12 >= 1)
                              {
                                for (uint64_t j = 0; j != v12; ++j)
                                {
                                  uint64_t v50 = v11;
                                  uint64_t v51 = v20;
                                  uint64_t v52 = v21;
                                  uint64_t v53 = v22;
                                  uint64_t v54 = j;
                                  unint64_t v25 = (**(uint64_t (***)(uint64_t, uint64_t *))a1)(a1, &v50);
                                  ZinIrWeight::GetValueAsFloat((ZinIrWeight *)a1, v25);
                                  *(float *)((char *)__p + 4 * j + v23) = v26 + *(float *)((char *)__p + 4 * j + v23);
                                }
                              }
                              ++v22;
                              v23 += v17;
                            }
                            while (v22 != v13);
                          }
                          ++v21;
                          v48 += v46;
                        }
                        while (v21 != v47);
                      }
                      ++v20;
                      v45 += v43;
                    }
                    while (v20 != v44);
                  }
                  ++v11;
                  v42 += v40;
                }
                while (v11 != v41);
              }
              int v8 = v29;
              BOOL v2 = v30;
              ++v39;
              uint64_t v9 = v28;
            }
            while (v39 != v29);
          }
        }
      }
      uint64_t v7 = v36 + 1;
      v37 += 4;
    }
    while (v36 + 1 != v27);
  }
  uint64_t v50 = v35;
  uint64_t v51 = v34;
  uint64_t v52 = v32;
  uint64_t v53 = v31;
  uint64_t v54 = v33;
  operator new();
}

void sub_21115893C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  MEMORY[0x21667D3C0](v33, 0x10B3C4034FA82A5);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t ZinIrWeight::GetElementIndex(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 280);
  if (v2 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14) {
    unint64_t v3 = *(void *)(v2 + 24);
  }
  else {
    unint64_t v3 = 1;
  }
  return *(void *)(a1 + 96) * ((*a2 + *(void *)(a1 + 16)) / v3)
       + *(void *)(a1 + 104) * (a2[1] + *(void *)(a1 + 24))
       + *(void *)(a1 + 112) * (a2[2] + *(void *)(a1 + 32))
       + *(void *)(a1 + 120) * (a2[3] + *(void *)(a1 + 40))
       + *(void *)(a1 + 128) * (a2[4] + *(void *)(a1 + 48));
}

void *std::vector<std::shared_ptr<ZinIrConstData>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData>*,std::shared_ptr<ZinIrConstData>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinIrConstData>>,std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_211158B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ZinIrWeightDataBitStream4::reserve(ZinIrWeightDataBitStream4 *this, uint64_t a2)
{
}

void *std::vector<std::shared_ptr<ZinIrConstData>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_211158C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::shared_ptr<ZinIrConstData>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[2 * a2];
    do
    {
      *uint64_t v6 = *a3;
      uint64_t v8 = a3[1];
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_211158CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<e4m3_t>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_211158D3C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(float *a1, float *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      float v5 = *(v4 - 1);
      float v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      float v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        float v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStreamBase,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStreamBase,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211158E04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStreamBase,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStreamBase,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_211158E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStreamBase,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  float v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    float v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_211158ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrWeightDataBitStream1::push_back(ZinIrWeightDataBitStream1 *this, char a2)
{
  char v3 = a2 & 1;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = v4 + 1;
  uint64_t v5 = v4 & 7;
  if (v5)
  {
    *(unsigned char *)(*((void *)this + 3) - 1) |= v3 << v5;
  }
  else
  {
    uint64_t v7 = (unsigned char *)*((void *)this + 3);
    unint64_t v6 = *((void *)this + 4);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = (unsigned char **)((char *)this + 16);
      unint64_t v10 = *((void *)this + 2);
      uint64_t v11 = &v7[-v10];
      uint64_t v12 = (uint64_t)&v7[-v10 + 1];
      if (v12 < 0) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = v6 - v10;
      if (2 * v13 > v12) {
        uint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = operator new(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[v14];
      v11[(void)v15] = v3;
      uint64_t v8 = (uint64_t)&v11[(void)v15 + 1];
      if (v7 == (unsigned char *)v10)
      {
        uint64_t v15 = &v11[(void)v15];
      }
      else
      {
        uint64_t v17 = &v7[~v10];
        do
        {
          char v18 = *--v7;
          (v17--)[(void)v15] = v18;
        }
        while (v7 != (unsigned char *)v10);
        uint64_t v7 = *v9;
      }
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v8;
      *((void *)this + 4) = v16;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *uint64_t v7 = v3;
      uint64_t v8 = (uint64_t)(v7 + 1);
    }
    *((void *)this + 3) = v8;
  }
}

void ZinIrWeightDataBitStream1::reserve(ZinIrWeightDataBitStream1 *this, uint64_t a2)
{
}

void ZinIrWeightDataBitStream2::push_back(ZinIrWeightDataBitStream2 *this, char a2)
{
  char v3 = a2 & 3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = v4 + 1;
  uint64_t v5 = v4 & 3;
  if (v5)
  {
    *(unsigned char *)(*((void *)this + 3) - 1) |= v3 << (2 * v5);
  }
  else
  {
    uint64_t v7 = (unsigned char *)*((void *)this + 3);
    unint64_t v6 = *((void *)this + 4);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = (unsigned char **)((char *)this + 16);
      unint64_t v10 = *((void *)this + 2);
      uint64_t v11 = &v7[-v10];
      uint64_t v12 = (uint64_t)&v7[-v10 + 1];
      if (v12 < 0) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = v6 - v10;
      if (2 * v13 > v12) {
        uint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = operator new(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[v14];
      v11[(void)v15] = v3;
      uint64_t v8 = (uint64_t)&v11[(void)v15 + 1];
      if (v7 == (unsigned char *)v10)
      {
        uint64_t v15 = &v11[(void)v15];
      }
      else
      {
        uint64_t v17 = &v7[~v10];
        do
        {
          char v18 = *--v7;
          (v17--)[(void)v15] = v18;
        }
        while (v7 != (unsigned char *)v10);
        uint64_t v7 = *v9;
      }
      *((void *)this + 2) = v15;
      *((void *)this + 3) = v8;
      *((void *)this + 4) = v16;
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *uint64_t v7 = v3;
      uint64_t v8 = (uint64_t)(v7 + 1);
    }
    *((void *)this + 3) = v8;
  }
}

void ZinIrWeightDataBitStream2::reserve(ZinIrWeightDataBitStream2 *this, uint64_t a2)
{
}

void ZinIrWeightDataBitStream3::push_back(ZinIrWeightDataBitStream3 *this, char a2)
{
  unsigned int v2 = a2 & 7;
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = v3 + 1;
  switch(v3 & 7)
  {
    case 1:
      uint64_t v8 = *((void *)this + 3);
      char v9 = *(unsigned char *)(v8 - 1) | (8 * v2);
      goto LABEL_21;
    case 2:
      *(unsigned char *)(*((void *)this + 3) - 1) |= a2 << 6;
      unsigned int v10 = v2 >> 2;
      unint64_t v6 = (unsigned char *)*((void *)this + 3);
      unint64_t v11 = *((void *)this + 4);
      if ((unint64_t)v6 < v11) {
        goto LABEL_17;
      }
      uint64_t v12 = (unsigned char **)((char *)this + 16);
      unint64_t v13 = *((void *)this + 2);
      size_t v14 = &v6[-v13];
      uint64_t v15 = (uint64_t)&v6[-v13 + 1];
      if (v15 < 0) {
        goto LABEL_57;
      }
      unint64_t v16 = v11 - v13;
      if (2 * v16 > v15) {
        uint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v15;
      }
      if (v17) {
        char v18 = operator new(v17);
      }
      else {
        char v18 = 0;
      }
      uint64_t v31 = &v14[(void)v18];
      uint64_t v32 = (char *)v18 + v17;
      v14[(void)v18] = v10;
      uint64_t v20 = (uint64_t)&v14[(void)v18 + 1];
      if (v6 == (unsigned char *)v13) {
        goto LABEL_53;
      }
      uint64_t v33 = &v6[~v13];
      do
      {
        char v34 = *--v6;
        (v33--)[(void)v18] = v34;
      }
      while (v6 != (unsigned char *)v13);
      goto LABEL_52;
    case 3:
      uint64_t v8 = *((void *)this + 3);
      char v9 = *(unsigned char *)(v8 - 1) | (2 * v2);
      goto LABEL_21;
    case 4:
      uint64_t v8 = *((void *)this + 3);
      char v9 = *(unsigned char *)(v8 - 1) | (16 * v2);
      goto LABEL_21;
    case 5:
      *(unsigned char *)(*((void *)this + 3) - 1) |= a2 << 7;
      unsigned int v10 = v2 >> 1;
      unint64_t v6 = (unsigned char *)*((void *)this + 3);
      unint64_t v19 = *((void *)this + 4);
      if ((unint64_t)v6 < v19)
      {
LABEL_17:
        *unint64_t v6 = v10;
        uint64_t v7 = v6 + 1;
        goto LABEL_18;
      }
      uint64_t v12 = (unsigned char **)((char *)this + 16);
      unint64_t v26 = *((void *)this + 2);
      uint64_t v27 = &v6[-v26];
      uint64_t v28 = (uint64_t)&v6[-v26 + 1];
      if (v28 < 0) {
        goto LABEL_57;
      }
      unint64_t v29 = v19 - v26;
      if (2 * v29 > v28) {
        uint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v30 = v28;
      }
      if (v30) {
        char v18 = operator new(v30);
      }
      else {
        char v18 = 0;
      }
      uint64_t v31 = &v27[(void)v18];
      uint64_t v32 = (char *)v18 + v30;
      v27[(void)v18] = v10;
      uint64_t v20 = (uint64_t)&v27[(void)v18 + 1];
      if (v6 == (unsigned char *)v26) {
        goto LABEL_53;
      }
      uint64_t v37 = &v6[~v26];
      do
      {
        char v38 = *--v6;
        (v37--)[(void)v18] = v38;
      }
      while (v6 != (unsigned char *)v26);
      goto LABEL_52;
    case 6:
      uint64_t v8 = *((void *)this + 3);
      char v9 = *(unsigned char *)(v8 - 1) | (4 * v2);
      goto LABEL_21;
    case 7:
      uint64_t v8 = *((void *)this + 3);
      char v9 = *(unsigned char *)(v8 - 1) | (32 * v2);
LABEL_21:
      *(unsigned char *)(v8 - 1) = v9;
      return;
    default:
      unint64_t v6 = (unsigned char *)*((void *)this + 3);
      unint64_t v5 = *((void *)this + 4);
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v12 = (unsigned char **)((char *)this + 16);
        unint64_t v21 = *((void *)this + 2);
        uint64_t v22 = &v6[-v21];
        uint64_t v23 = (uint64_t)&v6[-v21 + 1];
        if (v23 < 0) {
LABEL_57:
        }
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        unint64_t v24 = v5 - v21;
        if (2 * v24 > v23) {
          uint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          char v18 = operator new(v25);
        }
        else {
          char v18 = 0;
        }
        uint64_t v31 = &v22[(void)v18];
        uint64_t v32 = (char *)v18 + v25;
        v22[(void)v18] = v2;
        uint64_t v20 = (uint64_t)&v22[(void)v18 + 1];
        if (v6 == (unsigned char *)v21)
        {
LABEL_53:
          char v18 = v31;
        }
        else
        {
          uint64_t v35 = &v6[~v21];
          do
          {
            char v36 = *--v6;
            (v35--)[(void)v18] = v36;
          }
          while (v6 != (unsigned char *)v21);
LABEL_52:
          unint64_t v6 = *v12;
        }
        *((void *)this + 2) = v18;
        *((void *)this + 3) = v20;
        *((void *)this + 4) = v32;
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_56;
      }
      *unint64_t v6 = v2;
      uint64_t v7 = v6 + 1;
LABEL_18:
      uint64_t v20 = (uint64_t)v7;
LABEL_56:
      *((void *)this + 3) = v20;
      return;
  }
}

void ZinIrWeightDataBitStream3::reserve(ZinIrWeightDataBitStream3 *this, uint64_t a2)
{
}

void ZinIrWeightDataBitStream6::push_back(ZinIrWeightDataBitStream6 *this, char a2)
{
  unsigned int v3 = a2 & 0x3F;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = v4 + 1;
  uint64_t v5 = v4 & 3;
  if (v5 == 2)
  {
    *(unsigned char *)(*((void *)this + 3) - 1) |= 16 * a2;
    unsigned int v9 = v3 >> 4;
    uint64_t v7 = (unsigned char *)*((void *)this + 3);
    unint64_t v10 = *((void *)this + 4);
    if ((unint64_t)v7 >= v10)
    {
      unint64_t v11 = (unsigned char **)((char *)this + 16);
      unint64_t v12 = *((void *)this + 2);
      unint64_t v13 = &v7[-v12];
      uint64_t v14 = (uint64_t)&v7[-v12 + 1];
      if (v14 >= 0)
      {
        unint64_t v15 = v10 - v12;
        if (2 * v15 > v14) {
          uint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          size_t v17 = operator new(v16);
        }
        else {
          size_t v17 = 0;
        }
        size_t v30 = &v13[(void)v17];
        uint64_t v31 = (char *)v17 + v16;
        v13[(void)v17] = v9;
        uint64_t v19 = (uint64_t)&v13[(void)v17 + 1];
        if (v7 != (unsigned char *)v12)
        {
          char v34 = &v7[~v12];
          do
          {
            char v35 = *--v7;
            (v34--)[(void)v17] = v35;
          }
          while (v7 != (unsigned char *)v12);
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      goto LABEL_54;
    }
    goto LABEL_16;
  }
  if (v5 == 1)
  {
    *(unsigned char *)(*((void *)this + 3) - 1) |= a2 << 6;
    unsigned int v9 = v3 >> 2;
    uint64_t v7 = (unsigned char *)*((void *)this + 3);
    unint64_t v18 = *((void *)this + 4);
    if ((unint64_t)v7 >= v18)
    {
      unint64_t v11 = (unsigned char **)((char *)this + 16);
      unint64_t v25 = *((void *)this + 2);
      unint64_t v26 = &v7[-v25];
      uint64_t v27 = (uint64_t)&v7[-v25 + 1];
      if (v27 >= 0)
      {
        unint64_t v28 = v18 - v25;
        if (2 * v28 > v27) {
          uint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v27;
        }
        if (v29) {
          size_t v17 = operator new(v29);
        }
        else {
          size_t v17 = 0;
        }
        size_t v30 = &v26[(void)v17];
        uint64_t v31 = (char *)v17 + v29;
        v26[(void)v17] = v9;
        uint64_t v19 = (uint64_t)&v26[(void)v17 + 1];
        if (v7 != (unsigned char *)v25)
        {
          uint64_t v32 = &v7[~v25];
          do
          {
            char v33 = *--v7;
            (v32--)[(void)v17] = v33;
          }
          while (v7 != (unsigned char *)v25);
          goto LABEL_49;
        }
LABEL_50:
        size_t v17 = v30;
LABEL_51:
        *((void *)this + 2) = v17;
        *((void *)this + 3) = v19;
        *((void *)this + 4) = v31;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_53;
      }
LABEL_54:
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
LABEL_16:
    *uint64_t v7 = v9;
    uint64_t v8 = v7 + 1;
    goto LABEL_17;
  }
  if (v5)
  {
    *(unsigned char *)(*((void *)this + 3) - 1) |= 4 * (_BYTE)v3;
    return;
  }
  uint64_t v7 = (unsigned char *)*((void *)this + 3);
  unint64_t v6 = *((void *)this + 4);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = (unsigned char **)((char *)this + 16);
    unint64_t v20 = *((void *)this + 2);
    unint64_t v21 = &v7[-v20];
    uint64_t v22 = (uint64_t)&v7[-v20 + 1];
    if (v22 >= 0)
    {
      unint64_t v23 = v6 - v20;
      if (2 * v23 > v22) {
        uint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v24 = v22;
      }
      if (v24) {
        size_t v17 = operator new(v24);
      }
      else {
        size_t v17 = 0;
      }
      size_t v30 = &v21[(void)v17];
      uint64_t v31 = (char *)v17 + v24;
      v21[(void)v17] = v3;
      uint64_t v19 = (uint64_t)&v21[(void)v17 + 1];
      if (v7 != (unsigned char *)v20)
      {
        char v36 = &v7[~v20];
        do
        {
          char v37 = *--v7;
          (v36--)[(void)v17] = v37;
        }
        while (v7 != (unsigned char *)v20);
LABEL_49:
        uint64_t v7 = *v11;
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  *uint64_t v7 = v3;
  uint64_t v8 = v7 + 1;
LABEL_17:
  uint64_t v19 = (uint64_t)v8;
LABEL_53:
  *((void *)this + 3) = v19;
}

void ZinIrWeightDataBitStream6::reserve(ZinIrWeightDataBitStream6 *this, uint64_t a2)
{
}

uint64_t std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>> &,unsigned long,void>@<X0>(void **a1@<X1>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrPaletteInfo>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<ZinIrConstData>> &,unsigned long,std::allocator<ZinIrPaletteInfo>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_21115974C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ZinIrPaletteInfo>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<ZinIrConstData>> &,unsigned long,std::allocator<ZinIrPaletteInfo>,0>(uint64_t a1, void **a2, uint64_t **a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C38BA08;
  ZinIrPaletteInfo::ZinIrPaletteInfo((uint64_t **)(a1 + 24), a2, *a3);
  return a1;
}

void sub_2111597AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211159808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_211159864(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2111598DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211159940(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_21115999C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_211159A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211159A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_211159AD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_211159B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211159BB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_211159C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_211159C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<float>,ZinIrScratchBufferBackedConstData_specialization<float>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    uint64_t v12 = 0;
    do
    {
      int v13 = 0;
      if (*v9 < *(void *)(a1 + 56)
        && v9[1] < *(void *)(a1 + 64)
        && v9[2] < *(void *)(a1 + 72)
        && v9[3] < *(void *)(a1 + 80)
        && v9[4] < *(void *)(a1 + 88))
      {
        ZinIrWeightBase::GetAt<float>(a1);
        int v13 = v14;
      }
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      size_t v16 = (_DWORD *)(*(void *)(a3 + 8) + v12);
      if (!v15) {
        size_t v16 = (_DWORD *)a3;
      }
      _DWORD *v16 = v13;
      v9 += 5;
      v12 += 4;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>(a3, v18);
  double result = v18[0];
  *a4 = *(_OWORD *)v18;
  return result;
}

void *std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,ZinIrScratchBuffer<float>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  double result = std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211159EA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<float>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<float>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389850;
  ZinIrScratchBufferBackedConstData_specialization<float>::ZinIrScratchBufferBackedConstData_specialization((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_211159F00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389850;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

ZinIrConstData *ZinIrScratchBufferBackedConstData_specialization<float>::ZinIrScratchBufferBackedConstData_specialization(ZinIrConstData *a1, uint64_t a2)
{
  ZinIrConstData::ZinIrConstData(a1);
  *uint64_t v4 = &unk_26C354DD8;
  details::ZinIrMappedData_Impl<float>::ZinIrMappedData_Impl((uint64_t)(v4 + 13), a2);
  return a1;
}

void sub_21115A000(_Unwind_Exception *a1)
{
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void ZinIrScratchBufferBackedConstData_specialization<float>::~ZinIrScratchBufferBackedConstData_specialization(void **a1)
{
  *a1 = &unk_26C354DD8;
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));

  ZinIrConstData::~ZinIrConstData(a1);
}

{
  uint64_t vars8;

  *a1 = &unk_26C354DD8;
  details::ZinIrMappedData_Impl<float>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);

  JUMPOUT(0x21667D3C0);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<half>,ZinIrScratchBufferBackedConstData_specialization<half>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    uint64_t v12 = 0;
    do
    {
      __int16 v13 = 0;
      if (*v9 < *(void *)(a1 + 56)
        && v9[1] < *(void *)(a1 + 64)
        && v9[2] < *(void *)(a1 + 72)
        && v9[3] < *(void *)(a1 + 80)
        && v9[4] < *(void *)(a1 + 88))
      {
        ZinIrWeightBase::GetAt<half>(a1);
        __int16 v13 = v14;
      }
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      size_t v16 = (_WORD *)(*(void *)(a3 + 8) + v12);
      if (!v15) {
        size_t v16 = (_WORD *)a3;
      }
      _WORD *v16 = v13;
      v9 += 5;
      v12 += 2;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<half>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<half>>,ZinIrScratchBuffer<half>,void>(a3, v18);
  double result = v18[0];
  *a4 = *(_OWORD *)v18;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<e4m3_t>,ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    uint64_t v12 = 0;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v13 = 0;
      }
      else
      {
        char v13 = ZinIrWeightBase::GetAt<e4m3_t>(a1);
      }
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      int v15 = (unsigned char *)(*(void *)(a3 + 8) + v12);
      if (!v14) {
        int v15 = (unsigned char *)a3;
      }
      unsigned char *v15 = v13;
      v9 += 5;
      ++v12;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>(a3, v17);
  double result = v17[0];
  *a4 = *(_OWORD *)v17;
  return result;
}

void *std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,ZinIrScratchBuffer<e4m3_t>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  double result = std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21115A578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__shared_ptr_emplace[abi:ne180100]<ZinIrScratchBuffer<e4m3_t>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3897A8;
  ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::ZinIrScratchBufferBackedConstData_specialization((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_21115A5D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C3897A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C3897A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinIrScratchBufferBackedConstData_specialization<e4m3_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

ZinIrConstData *ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::ZinIrScratchBufferBackedConstData_specialization(ZinIrConstData *a1, uint64_t a2)
{
  ZinIrConstData::ZinIrConstData(a1);
  *uint64_t v4 = &unk_26C354B50;
  details::ZinIrMappedData_Impl<signed char>::ZinIrMappedData_Impl((uint64_t)(v4 + 13), a2);
  return a1;
}

void sub_21115A6D4(_Unwind_Exception *a1)
{
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void ZinIrScratchBufferBackedConstData_specialization<e4m3_t>::~ZinIrScratchBufferBackedConstData_specialization(void **a1)
{
  *a1 = &unk_26C354B50;
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));

  ZinIrConstData::~ZinIrConstData(a1);
}

{
  uint64_t vars8;

  *a1 = &unk_26C354B50;
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl((uint64_t)(a1 + 13));
  ZinIrConstData::~ZinIrConstData(a1);

  JUMPOUT(0x21667D3C0);
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<unsigned char>,ZinIrScratchBufferBackedConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = *(void **)(a1 + 280);
  if (v10 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v10[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v10[1] - *v10 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unint64_t v11 = *(uint64_t **)(a2 + 48);
  }
  else {
    unint64_t v11 = (uint64_t *)a2;
  }
  uint64_t v12 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v11 != (uint64_t *)v12)
  {
    char v13 = (uint64_t *)v12;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 56);
      if (*v11 >= v15
        || v11[1] >= *(void *)(a1 + 64)
        || v11[2] >= *(void *)(a1 + 72)
        || v11[3] >= *(void *)(a1 + 80)
        || v11[4] >= *(void *)(a1 + 88))
      {
        if (!a4)
        {
          char v19 = 0;
          goto LABEL_23;
        }
        uint64_t v17 = v15 - 1;
        if (*v11 >= v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = *v11;
        }
        char v16 = ZinIrVector::GetAt<unsigned char>(a4, v18);
      }
      else
      {
        char v16 = ZinIrWeightBase::GetAt<unsigned char>(a1);
      }
      char v19 = v16;
LABEL_23:
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      unint64_t v21 = (unsigned char *)(*(void *)(a3 + 8) + v14);
      if (!v20) {
        unint64_t v21 = (unsigned char *)a3;
      }
      unsigned char *v21 = v19;
      v11 += 5;
      ++v14;
    }
    while (v11 != v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<unsigned char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<unsigned char>>,ZinIrScratchBuffer<unsigned char>,void>(a3, v23);
  double result = v23[0];
  *a5 = *(_OWORD *)v23;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrScratchBuffer<signed char>,ZinIrScratchBufferBackedConstData_specialization<signed char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = *(void **)(a1 + 280);
  if (v10 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v10[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v10[1] - *v10 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unint64_t v11 = *(uint64_t **)(a2 + 48);
  }
  else {
    unint64_t v11 = (uint64_t *)a2;
  }
  uint64_t v12 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v11 != (uint64_t *)v12)
  {
    char v13 = (uint64_t *)v12;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 56);
      if (*v11 >= v15
        || v11[1] >= *(void *)(a1 + 64)
        || v11[2] >= *(void *)(a1 + 72)
        || v11[3] >= *(void *)(a1 + 80)
        || v11[4] >= *(void *)(a1 + 88))
      {
        if (!a4)
        {
          char v19 = 0;
          goto LABEL_23;
        }
        uint64_t v17 = v15 - 1;
        if (*v11 >= v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = *v11;
        }
        char v16 = ZinIrVector::GetAt<signed char>(a4, v18);
      }
      else
      {
        char v16 = ZinIrWeightBase::GetAt<signed char>(a1);
      }
      char v19 = v16;
LABEL_23:
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      unint64_t v21 = (unsigned char *)(*(void *)(a3 + 8) + v14);
      if (!v20) {
        unint64_t v21 = (unsigned char *)a3;
      }
      unsigned char *v21 = v19;
      v11 += 5;
      ++v14;
    }
    while (v11 != v13);
  }
  std::allocate_shared[abi:ne180100]<ZinIrScratchBufferBackedConstData_specialization<signed char>,std::allocator<ZinIrScratchBufferBackedConstData_specialization<signed char>>,ZinIrScratchBuffer<signed char>,void>(a3, v23);
  double result = v23[0];
  *a5 = *(_OWORD *)v23;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream1,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v12 = 0;
      }
      else
      {
        char v12 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(a1);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v12 & 1);
      v9 += 5;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream1,void>(a3, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream2,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v12 = 0;
      }
      else
      {
        char v12 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(a1);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v12 & 3);
      v9 += 5;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream2,void>(a3, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream3,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v12 = 0;
      }
      else
      {
        char v12 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(a1);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v12 & 7);
      v9 += 5;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream3,void>(a3, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v12 = 0;
      }
      else
      {
        char v12 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(a1);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v12 & 0xF);
      v9 += 5;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>(a3, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

double ZinIrWeight::ShuffleWeightData<ZinIrWeightDataBitStream6,ZinIrConstData_specialization<unsigned char>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void **)(a1 + 280);
  if (v8 && (*(_DWORD *)(a1 + 8) - 7) <= 0x14)
  {
    if (v8[3] >= 2uLL) {
      ZinAssertImpl("Vector palettization is not supported for this transform.");
    }
    if (v8[1] - *v8 >= 0x11uLL) {
      ZinAssertImpl("Shuffling weight data is not supported for per-channel palettized kernels yet");
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_)) {
    unsigned int v9 = *(void **)(a2 + 48);
  }
  else {
    unsigned int v9 = (void *)a2;
  }
  uint64_t v10 = ZinIrScratchBuffer<ZinKernelPosition>::end(a2);
  if (v9 != (void *)v10)
  {
    unint64_t v11 = (void *)v10;
    do
    {
      if (*v9 >= *(void *)(a1 + 56)
        || v9[1] >= *(void *)(a1 + 64)
        || v9[2] >= *(void *)(a1 + 72)
        || v9[3] >= *(void *)(a1 + 80)
        || v9[4] >= *(void *)(a1 + 88))
      {
        char v12 = 0;
      }
      else
      {
        char v12 = ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(a1);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v12 & 0x3F);
      v9 += 5;
    }
    while (v9 != v11);
  }
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream6,void>(a3, v14);
  double result = v14[0];
  *a4 = *(_OWORD *)v14;
  return result;
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115B3B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115B414(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long &,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115B4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint64_t v10 = &unk_26C354458;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115B584(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,std::allocator<ZinIrConstData_specialization<unsigned char>>,ZinIrWeightDataBitStream4,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  double result = std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21115B608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrConstData_specialization<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::allocator<ZinIrConstData_specialization<unsigned char>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389380;
  std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>*>((ZinIrConstData *)(a1 + 3), a2);
  return a1;
}

void sub_21115B664(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

ZinIrConstData *std::construct_at[abi:ne180100]<ZinIrConstData_specialization<unsigned char>,ZinIrWeightDataBitStream4,ZinIrConstData_specialization<unsigned char>*>(ZinIrConstData *a1, uint64_t a2)
{
  __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrConstData_specialization<unsigned char>::ZinIrConstData_specialization(a1, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115B6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unsigned int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>> const,ZinIrHazardGraph::EdgeType>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::__unordered_map_hasher<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinIrConstData>,std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,std::equal_to<std::shared_ptr<ZinIrConstData>>,std::hash<std::shared_ptr<ZinIrConstData>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>>::__emplace_unique_key_args<std::shared_ptr<ZinIrConstData>,std::pair<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>>(uint64_t a1, void *a2, long long *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  uint64_t v15 = operator new(0x30uLL);
  v27[0] = v15;
  v27[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  long long v16 = *a3;
  long long v17 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v17;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *size_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = v14;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t v12 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v12;
}

void sub_21115B9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<ZinIrConstData>,std::shared_ptr<ZinIrConstData>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>> const,ZinIrHazardGraph::EdgeType>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115BAD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115BB2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115BBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint8x8_t v10 = &unk_26C3542A8;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115BC9C(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115BD40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115BD9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115BE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint8x8_t v10 = &unk_26C354380;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115BF0C(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115BFB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115C00C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115C0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint8x8_t v10 = &unk_26C32C168;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115C17C(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115C220(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115C27C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115C314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115C398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115C3F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115C48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint8x8_t v10 = &unk_26C354530;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115C564(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115C608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115C664(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream1,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115C6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  ZinIrConstData::ZinIrConstData((ZinIrConstData *)a1);
  *uint8x8_t v10 = &unk_26C354608;
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl((uint64_t)(v10 + 13), a3);
  details::ZinIrMappedData_Impl<unsigned char>::ZinIrMappedData_Impl(a1 + 136, a2);
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  if (a5 > 8 * (*(void *)(a1 + 120) - *(void *)(a1 + 112))) {
    ZinAssertImpl("compressed mask is the wrong size");
  }
  ZinIrCompressedConstData_specialization<float,(unsigned char)32>::VerifyMask(a1);
  return a1;
}

void sub_21115C7D4(_Unwind_Exception *a1)
{
  details::ZinIrMappedData_Impl<signed char>::~ZinIrMappedData_Impl(v2);
  ZinIrConstData::~ZinIrConstData(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115C878(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115C8D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115C9F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115CA4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115CAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115CB68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115CBC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115CC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115CCE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115CD3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115CDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115CE58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115CEB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115CFD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D02C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream2,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D1A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D2C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D31C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D494(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D5B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D60C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D728(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D784(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115D8A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115D8FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream3,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115D994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115DA18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115DA74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115DB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115DB90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115DBEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115DC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115DD08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115DD64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115DDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115DE80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115DEDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115DF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115DFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E054(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E170(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E1CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream4,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E2E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E344(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E460(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E4BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E634(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E7AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115E8C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115E924(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115E9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115EA40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_21115EA9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,ZinIrWeightDataBitStream6,std::vector<unsigned char>,unsigned long &,unsigned long const&,ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization(a1, (uint64_t)&__p, a3, *a4, *a5);
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21115EB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115EBB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389690;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)1>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115EC1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115EC98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C3896C8;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)2>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115ECFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115ED78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B40;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)3>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115EDDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115EE58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389700;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)4>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115EEBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115EF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389738;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)6>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115EF9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void *a5@<X8>)
{
  uint8x8_t v10 = operator new(0xF0uLL);
  double result = std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_21115F018(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned char>,std::vector<unsigned char>,unsigned long &,unsigned long const&,std::allocator<ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389770;
  ZinIrCompressedConstData_specialization<unsigned char,(unsigned char)8>::ZinIrCompressedConstData_specialization((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_21115F07C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>>,void>@<X0>(void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrPaletteInfo>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<ZinIrConstData>>,std::allocator<ZinIrPaletteInfo>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_21115F0D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ZinIrPaletteInfo>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<ZinIrConstData>>,std::allocator<ZinIrPaletteInfo>,0>(uint64_t a1, void **a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C38BA08;
  ZinIrPaletteInfo::ZinIrPaletteInfo((uint64_t **)(a1 + 24), a2, (uint64_t *)1);
  return a1;
}

void sub_21115F138(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<ZinIrPaletteInfo,std::allocator<ZinIrPaletteInfo>,std::vector<std::shared_ptr<ZinIrConstData>>,unsigned long,void>@<X0>(void **a1@<X1>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<ZinIrPaletteInfo>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<ZinIrConstData>> &,unsigned long,std::allocator<ZinIrPaletteInfo>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_21115F19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinIrWeight::CreateAlias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::RemapByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unsupported convolution kernel format while generating Unflatten layer\n", a5, a6, a7, a8, 0);
}

void ZinIrWeight::ShuffleChannelsByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::CreateDePalettizedWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid kernel format", a5, a6, a7, a8, 0);
}

void ZinIrWeight::ShuffleByType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::Create4bitPalWeightFrom3bitPalWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Attempting to upcast non-3bit palettized weight.", a5, a6, a7, a8, 0);
}

void ZinIrWeight::Dilate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::DilatePalettizedWeightData<ZinIrWeightDataBitStream1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::HeightSplitDeconv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::GetValueAsFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::IsZeroPointAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::IsElemZeroPointAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::CreatePalettizedWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrWeight::CreatePalettizedWeight(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid format for weight %d\n", (uint8_t *)v1, 8u);
}

void ZinIrWeight::PadWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Palette weight for Large stride convolution is not supported.", a5, a6, a7, a8, 0);
}

void ZinIrWeight::SliceWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Palette weight slicing is not supported.", a5, a6, a7, a8, 0);
}

CFMutableDictionaryRef ZinCreateRingBufferReaderUnit(const ZinIrUnitInfo *a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit(a1);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  ZinAddOffsetsToParamsDict(theDict, (uint64_t)a1 + 120, (uint64_t)a1 + 80, @"RingBufferReaderOffsetInfo");
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
  uint64_t v4 = (uint64_t *)*((void *)a1 + 22);
  if (v4)
  {
    uint64_t v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    unint64_t v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      unint64_t v7 = CFDictionaryCreateMutable(v2, 0, v5, v6);
      int valuePtr = v4[3];
      CFNumberRef v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      unint64_t v9 = ZinIrCoordinateToCFString((_DWORD *)v4 + 4);
      CFDictionaryAddValue(v7, @"Dimension", v9);
      CFDictionaryAddValue(v7, @"Size", v8);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
      CFRelease(v7);
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  CFDictionaryAddValue(theDict, @"RingBufferReaderOutputSizeInfo", Mutable);
  CFRelease(Mutable);
  CFDictionaryAddValue(Unit, @"Params", theDict);
  CFRelease(theDict);
  return Unit;
}

void ZinIrAffineTransformInfo::ZinIrAffineTransformInfo(ZinIrAffineTransformInfo *this, const ZinIrAffineTransformUnitInfo *a2)
{
  uint64_t v4 = (void *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 62);
  *uint64_t v4 = &unk_26C350C80;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v4 + 2), a2);
  *((void *)this + 2) = &unk_26C3525E0;
  long long v5 = *((_OWORD *)a2 + 10);
  long long v6 = *((_OWORD *)a2 + 11);
  uint64_t v7 = *((void *)a2 + 24);
  *((void *)this + 27) = 0;
  *((void *)this + 26) = v7;
  *((_OWORD *)this + 12) = v6;
  *((_OWORD *)this + 11) = v5;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>((void *)this + 27, *((const void **)a2 + 25), *((void *)a2 + 26), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 2));
}

void sub_21115F934(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void *ZinAffineTransformLayer::ZinAffineTransformLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  long long v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  uint8x8_t v10 = v6;
  uint64_t v11 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinTextureLayer::ZinTextureLayer(a1, &v11, &v9, a4);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *a1 = &unk_26C34FCE8;
  return a1;
}

void sub_21115FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ZinLayerNormLayer::ZinLayerNormLayer((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL ZinAffineTransformLayer::IsSplitable(uint64_t a1, unsigned int a2)
{
  if (a2 == 5) {
    ZinAssertImpl("Invalid axis", v2, v3);
  }
  return a2 < 2;
}

uint64_t ZinAffineTransformLayer::Lower(uint64_t a1)
{
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
  if (!*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 1893)) {
    ZinAssertImpl("Error: affine transform is not supported on this architecture");
  }
  if (ZinTextureLayerUtils::IsInformationStoredInWidthDimension(a1, 0)) {
    ZinTextureLayerUtils::ReshapeIndexTensor((void *)a1);
  }
  return 0;
}

uint64_t ZinAffineTransformLayer::LowerEngineTexture(ZinIrOpLayerGraph *a1, ZinTextureLayerUtils *a2, ZinANELayer *this, uint64_t **a4)
{
  uint64_t TextureIndexInput = ZinANELayer::GetTextureIndexInput(this);
  if (!TextureIndexInput) {
    ZinAssertImpl("Error: fail to get the transform matrix");
  }
  uint64_t v9 = (ZinIrOpLayer *)TextureIndexInput;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)TextureIndexInput + 32))(TextureIndexInput, 0, 0);
  if (!ZinTextureLayerUtils::EnforceIndexInterleave(a2, a1, v9, *(ZinIrOpLayer **)(v10 + 56), this, v11)) {
    ZinAssertImpl("Error: fail to insert the copy layer");
  }
  ZinTextureLayerUtils::InputFP16CopyCastIfNeeded((uint64_t **)a2, a1, **a4, this);
  return 0;
}

void ZinAffineTransformLayer::Clone()
{
}

void sub_21115FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinAffineTransformLayer::GetTextureUnitInfo(ZinAffineTransformLayer *this)
{
  return *((void *)this + 8) + 16;
}

void ZinAffineTransformLayer::CreateTELayer(size_t *this, const ZinIrHalParameters *a2)
{
  (*(void (**)(size_t *, void, void))(*this + 32))(this, 0, 0);
  if (*((char *)this + 47) >= 0) {
    size_t v3 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v3 = this[4];
  }
  uint64_t v4 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v3 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if (*((char *)this + 47) >= 0) {
      uint64_t v5 = (char *)(this + 3);
    }
    else {
      uint64_t v5 = (char *)this[3];
    }
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v12, "affine_dma");
  long long v6 = std::string::append(&v12, "_xfm", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v14 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)unint64_t v13 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    CFNumberRef v8 = v13;
  }
  else {
    CFNumberRef v8 = (void **)v13[0];
  }
  if (v14 >= 0) {
    std::string::size_type v9 = HIBYTE(v14);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v13[1];
  }
  uint64_t v10 = std::string::append(&v15, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v17 = v10->__r_.__value_.__r.__words[2];
  long long v16 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CreateTensor();
}

void sub_2111600E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  uint64_t v47 = *(std::__shared_weak_count **)(v45 - 72);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v45 - 113) < 0) {
    operator delete(*(void **)(v45 - 136));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAffineTransformLayer::ComputeOutputDimensions(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)*a2;
  long long v4 = *((_OWORD *)*a2 + 1);
  *(void *)(a3 + 32) = (*a2)[4];
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  uint64_t v5 = *(int8x16_t **)(a1 + 64);
  uint64_t v6 = (*a2)[5];
  if (**a2 > v6) {
    uint64_t v6 = **a2;
  }
  *(void *)a3 = v6;
  *(int8x16_t *)(a3 + 16) = vextq_s8(v5[11], v5[11], 8uLL);
  return 0;
}

uint64_t ZinAffineTransformLayer::GetPaddingMode(ZinAffineTransformLayer *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 8) + 120);
  if (*(void *)(*((void *)this + 8) + 128) == v1) {
    return 8;
  }
  else {
    return *(unsigned int *)(v1 + 4);
  }
}

uint64_t ZinAffineTransformLayer::SetPaddingMode(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 64);
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 128);
  while (v3 != v4)
  {
    *(_DWORD *)(v3 + 4) = a2;
    v3 += 8;
  }
  return result;
}

void ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = (_DWORD *)a2[10];
  uint64_t v4 = (_DWORD *)a2[11];
  if (v3 != v4)
  {
    while (*v3 != a3)
    {
      v3 += 3;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_4:
    DimensionToString(a3, v13);
    if (v14 >= 0) {
      uint64_t v5 = (const char *)v13;
    }
    else {
      uint64_t v5 = (const char *)v13[0];
    }
    ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v5);
  }
  long long v7 = (_DWORD *)a2[25];
  uint64_t v6 = (_DWORD *)a2[26];
  if (v7 != v6)
  {
    while (*v7 != a3)
    {
      v7 += 3;
      if (v7 == v6) {
        goto LABEL_12;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_12:
    DimensionToString(a3, v13);
    if (v14 >= 0) {
      CFNumberRef v8 = (const char *)v13;
    }
    else {
      CFNumberRef v8 = (const char *)v13[0];
    }
    ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v8);
  }
  int v9 = v7[2];
  if (v9)
  {
    if (v3[2] != v9) {
      ZinAssertImpl("Error: the input and output coordinate mode should be the same");
    }
    if (v3[1] != v7[1]) {
      ZinAssertImpl("Error: the input and output coordinate range should be the same");
    }
    uint64_t v10 = (_DWORD *)a2[13];
    long long v11 = (_DWORD *)a2[14];
    if (v10 != v11)
    {
      while (*v10 != a3)
      {
        v10 += 2;
        if (v10 == v11) {
          goto LABEL_23;
        }
      }
    }
    if (v10 == v11)
    {
LABEL_23:
      DimensionToString(a3, v13);
      if (v14 >= 0) {
        std::string v12 = (const char *)v13;
      }
      else {
        std::string v12 = (const char *)v13[0];
      }
      ZinAssertImpl("Error: can not find the input coordinate info for axis %s", v12);
    }
    if (v9 == 2)
    {
      if (v10[1] == 5) {
        ZinAssertImpl("Error: symmetric padding is invalid when the coordinate is reflective mode");
      }
    }
    else if (v9 == 1 && v10[1] == 6)
    {
      ZinAssertImpl("Error: reflective padding is invalid when the coordinate is symmetric mode");
    }
  }
}

void sub_211160400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinAffineTransformLayer::ValidateSemantics_Impl(uint64_t a1, char **a2, const ZinIrTextureUnitInfo *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 240) {
    ZinAssertImpl("Error: affine transform layer can only have two bottoms");
  }
  int v5 = *((_DWORD *)v3 + 30);
  if (v5 != 3)
  {
    ZinTensorFormatToString(v5, v16);
    if (v17 >= 0) {
      std::string v15 = (const char *)v16;
    }
    else {
      std::string v15 = (const char *)v16[0];
    }
    ZinAssertImpl("Error: the format of affine transform matrix should be fp16 but get %s", v15);
  }
  uint64_t v6 = *((void *)v3 + 16);
  uint64_t v7 = *((void *)v3 + 1);
  if (v7 != 1 && v7 != v6) {
    ZinAssertImpl("Error: invalid affine transform dimension. The batch size of the data tensor (%zd) should be the same as transform matrix (%zd) or 1", *((void *)v3 + 1), v6);
  }
  uint64_t v10 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v10 = v6;
  *(_OWORD *)(v10 + 8) = xmmword_211ED5560;
  int64x2_t v11 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 24) = v11;
  *((void *)v10 + 5) = v6;
  *((int64x2_t *)v10 + 3) = v11;
  *((_OWORD *)v10 + 4) = xmmword_211ED5560;
  if (!ZinTensorPosition::operator==((void *)v3 + 16, v10)
    && !ZinTensorPosition::operator==((void *)v3 + 16, (void *)v10 + 5))
  {
    ZinAssertImpl("Error: invalid affine transform matrix dimension N%zdC%zdH%zdW%zdD%zd. It should be either N%zdC6H1W1D1 or N%zdC1H1W6D1", *((void *)v3 + 16), *((void *)v3 + 17), *((void *)v3 + 18), *((void *)v3 + 19), *((void *)v3 + 20), *((void *)v3 + 16), *((void *)v3 + 16));
  }
  uint64_t v12 = *(void *)(a1 + 64);
  ZinLayerValidationUtils::ValidateTextureUnitsCommonProperties((void *)(v12 + 16), (const ZinIrTextureUnitInfo *)*(unsigned int *)v3, a3);
  unint64_t v13 = ZinLayerValidationUtils::ValidateCoordinateInfo((void *)(v12 + 216));
  ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency((uint64_t)v13, (void *)(v12 + 16), 3);
  ZinAffineTransformLayer::ValidateInOutputCoordinateConsistency(v14, (void *)(v12 + 16), 4);

  operator delete(v10);
}

void sub_2111605B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrAffineTransformInfo::~ZinIrAffineTransformInfo(ZinIrAffineTransformInfo *this)
{
  *(void *)this = &unk_26C350C80;
  uint64_t v2 = (ZinIrAffineTransformInfo *)((char *)this + 16);
  *((void *)this + 2) = &unk_26C3525E0;
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);

  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  ZinIrTextureUnitInfo *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C350C80;
  uint64_t v2 = (ZinIrAffineTransformInfo *)((char *)this + 16);
  *((void *)this + 2) = &unk_26C3525E0;
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void DumpTask<8u>(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int **a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a3 + 200);
  std::string::basic_string[abi:ne180100]<0>(&v78, "__nid0__tid");
  long long v16 = (ZinAneTdHw_v8 *)(v15 + 8);
  std::to_string(&v82, *(unsigned __int16 *)(v15 + 8));
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v17 = &v82;
  }
  else {
    char v17 = (std::string *)v82.__r_.__value_.__r.__words[0];
  }
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v82.__r_.__value_.__l.__size_;
  }
  float v19 = std::string::append(&v78, (const std::string::value_type *)v17, size);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v80, "__");
  if ((v81 & 0x80u) == 0) {
    unint64_t v21 = (const std::string::value_type *)v80;
  }
  else {
    unint64_t v21 = (const std::string::value_type *)v80[0];
  }
  if ((v81 & 0x80u) == 0) {
    std::string::size_type v22 = v81;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v80[1];
  }
  size_t v23 = std::string::append(&v79, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v74[16] = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v74 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 183);
  if (v25 >= 0) {
    unint64_t v26 = (const std::string::value_type *)(a3 + 160);
  }
  else {
    unint64_t v26 = *(const std::string::value_type **)(a3 + 160);
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 183);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 168);
  }
  char v28 = std::string::append((std::string *)v74, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v84 = v28->__r_.__value_.__r.__words[2];
  long long v83 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v74[23] & 0x80000000) != 0) {
    operator delete(*(void **)v74);
  }
  if ((char)v81 < 0) {
    operator delete(v80[0]);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  int v30 = *(_DWORD *)(a3 + 184);
  uint64_t v31 = (unsigned int *)(a9 + (v30 & 0xFFFFFFFC));
  *a7 = v31;
  uint64_t v32 = **a2;
  if (*(unsigned char *)(v32 + 2057))
  {
    if ((ZinAlignPower2(((*(_DWORD *)v16 >> 14) & 0x1FFCu) + v30, *(void *)(v32 + 504)) & 0x3F) == 0) {
      ZinAssertImpl("aligned_td_end_addr is divisible by 64");
    }
    uint64_t v31 = *a7;
  }
  unsigned int v33 = *(_DWORD *)(v15 + 8);
  *a7 = v31 + 1;
  unsigned int *v31 = v33;
  unsigned int v34 = *(_DWORD *)(v15 + 12);
  *a7 = v31 + 2;
  v31[1] = v34;
  unsigned int v35 = *(_DWORD *)(v15 + 16);
  *a7 = v31 + 3;
  v31[2] = v35;
  unsigned int v36 = *(_DWORD *)(v15 + 20);
  *a7 = v31 + 4;
  v31[3] = v36;
  unsigned int v37 = *(_DWORD *)(v15 + 24);
  *a7 = v31 + 5;
  v31[4] = v37;
  unsigned int v38 = *(_DWORD *)(v15 + 28);
  *a7 = v31 + 6;
  v31[5] = v38;
  unsigned int v39 = *(_DWORD *)(v15 + 32);
  *a7 = v31 + 7;
  v31[6] = v39;
  unsigned int v40 = *(_DWORD *)(v15 + 36);
  *a7 = v31 + 8;
  v31[7] = v40;
  if ((*(unsigned char *)(v15 + 36) & 2) != 0)
  {
    unsigned int v41 = *(_DWORD *)(v15 + 40);
    *a7 = v31 + 9;
    char v31[8] = v41;
  }
  RelocInfos = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos((ZinAneTdHw_v8 *)(v15 + 8));
  GetRegistersProgrammedAsRelocationCommands(RelocInfos, (uint64_t)&v79);
  ZinCodegen::GetDontCareRegisters<8u>((_DWORD *)v15, (uint64_t)&v78);
  uint64_t v43 = (unsigned int *)v78.__r_.__value_.__r.__words[2];
  if (v78.__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v79, v43 + 4, v43 + 4);
      uint64_t v43 = *(unsigned int **)v43;
    }
    while (v43);
  }
  uint64_t v73 = a3;
  memset(v74, 0, 24);
  uint64_t v44 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 44, 0x48uLL, 21760, *a7, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v44;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v44 = *a7;
  }
  uint64_t v45 = operator new(4uLL);
  *(void *)uint64_t v74 = v45;
  _DWORD *v45 = 60;
  *(void *)&v74[8] = v45 + 1;
  *(void *)&v74[16] = v45 + 1;
  uint64_t v46 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 500, 0x13uLL, 0, v44, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v46;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v46 = *a7;
  }
  memset(v74, 0, 24);
  uint64_t v47 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 584, 0x45uLL, 19712, v46, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v47;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v47 = *a7;
  }
  memset(v74, 0, 24);
  uint64_t v48 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 868, 0x1EuLL, 16640, v47, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v48;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v48 = *a7;
  }
  memset(v74, 0, 24);
  uint64_t v49 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 996, 0xEuLL, 17664, v48, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v49;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v49 = *a7;
  }
  memset(v74, 0, 24);
  uint64_t v50 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 1060, 0xBuLL, 18688, v49, 1, a6, a1, &v79, 0, (__int32 **)v74)];
  *a7 = v50;
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
    uint64_t v50 = *a7;
  }
  long long v51 = *(_OWORD *)(v15 + 1160);
  long long v75 = *(_OWORD *)(v15 + 1144);
  long long v76 = v51;
  v77[0] = *(_OWORD *)(v15 + 1176);
  long long v52 = *(_OWORD *)(v15 + 1128);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)(v15 + 1112);
  *(_OWORD *)&v74[16] = v52;
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(v15 + 1188);
  memset(&v82, 0, sizeof(v82));
  uint64_t v53 = &(*a7)[ZinRegisterPacking::ProcessRegisters((uint64_t)v74, 0x15uLL, 20736, v50, 1, a6, a1, &v79, 0, (__int32 **)&v82)];
  *a7 = v53;
  if (v82.__r_.__value_.__r.__words[0])
  {
    v82.__r_.__value_.__l.__size_ = v82.__r_.__value_.__r.__words[0];
    operator delete(v82.__r_.__value_.__l.__data_);
    uint64_t v53 = *a7;
  }
  long long v54 = *(_OWORD *)(v15 + 1220);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)(v15 + 1204);
  *(_OWORD *)&v74[16] = v54;
  long long v75 = *(_OWORD *)(v15 + 1236);
  *(void *)&long long v76 = *(void *)(v15 + 1252);
  memset(&v82, 0, sizeof(v82));
  *a7 += ZinRegisterPacking::ProcessRegisters((uint64_t)v74, 0xCuLL, 22784, v53, 1, a6, a1, &v79, 0, (__int32 **)&v82);
  if (v82.__r_.__value_.__r.__words[0])
  {
    v82.__r_.__value_.__l.__size_ = v82.__r_.__value_.__r.__words[0];
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  unint64_t v55 = *(void *)(v15 + 1312);
  *(_DWORD *)(v15 + 1196) = 57005;
  if (v55 >= 8)
  {
    uint64_t v56 = v15 + 1196;
    unint64_t v57 = v55 >> 3;
    do
    {
      uint64_t v58 = *a7;
      memset(v74, 0, 24);
      *a7 += ZinRegisterPacking::ProcessRegisters(v56, 1uLL, 20820, v58, 1, a6, a1, &v79, 0, (__int32 **)v74);
      if (*(void *)v74)
      {
        *(void *)&v74[8] = *(void *)v74;
        operator delete(*(void **)v74);
      }
      --v57;
    }
    while (v57);
  }
  uint64_t v59 = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos(v16);
  uint64_t v60 = *v59;
  uint64_t v61 = v59[1];
  if (*v59 != v61)
  {
    uint64_t v62 = *a7;
    do
    {
      unsigned int v63 = *(_DWORD *)(v60 + 32);
      *uint64_t v62 = v63;
      *a7 = v62 + 1;
      if (*(unsigned char *)v60)
      {
        uint64_t v64 = (uint64_t)v62 - a9 + 4;
        if (*(unsigned char *)(v60 + 1)) {
          AddBARRelocation(v60 + 8, a8, v64, (v63 & 0x8000) != 0, a2[7], 8 * ((void)v62 - a9) + 22, 7);
        }
        else {
          AddRelocation(v60 + 8, a8, v64, (v63 & 0x8000) != 0, a2[7]);
        }
      }
      unsigned int AddressOfRelocationCommand = GetAddressOfRelocationCommand((_DWORD *)(v60 + 32));
      unsigned int RegisterValueFromAddress = ZinAneTdHw_v8::GetRegisterValueFromAddress(v16, AddressOfRelocationCommand);
      long long v67 = *a7;
      *long long v67 = RegisterValueFromAddress;
      uint64_t v62 = v67 + 1;
      *a7 = v62;
      if ((v63 & 0x8000) != 0)
      {
        int v68 = GetAddressOfRelocationCommand((_DWORD *)(v60 + 32));
        unsigned int v69 = ZinAneTdHw_v8::GetRegisterValueFromAddress(v16, v68 + 4);
        char v70 = *a7;
        *char v70 = v69;
        uint64_t v62 = v70 + 1;
        *a7 = v62;
      }
      v60 += 40;
    }
    while (v60 != v61);
  }
  uint64_t v71 = *(unsigned int *)(v73 + 184);
  unsigned int v72 = (*(uint64_t (**)(void))(**(void **)(v73 + 200) + 16))(*(void *)(v73 + 200));
  AddSymbol((uint64_t)&v83, a8, v71, 4 * v72, a2[7]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v78);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v79);
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
}

void sub_211160E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTds<8u>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  uint64_t v46 = (uint64_t)&v46;
  uint64_t v47 = &v46;
  uint64_t v48 = 0;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 8));
  uint64_t v11 = ZinIrCodegenHandleTdsMakeList<8u>((uint64_t **)a1, a2, a3, &v46, (uint64_t)a4, a5);
  if (v11)
  {
    BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v12) {
      ZinIrCodegenHandleTds<8u>(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    size_t v21 = *a4;
    if (v21)
    {
      std::string::size_type v22 = malloc_type_calloc(v21, 4uLL, 0x100004052888210uLL);
      if (v22)
      {
        uint64_t v11 = ZinIrCodegenValidateTds<8u>(*(uint64_t **)a1, *(void *)(a1 + 24), (uint64_t)&v46);
        if (v11)
        {
          BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v23) {
            ZinIrCodegenHandleTds<8u>(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          free(v22);
        }
        else
        {
          uint64_t v45 = (uint64_t *)v22;
          ZinIrMemoryPool::GetSections(*(void *)(a1 + 24), 1, v44);
          uint64_t v41 = *(void *)(v44[1] + 16);
          std::__list_imp<ZinIrSection *>::clear(v44);
          DumpSegment<8u>(AddressDefaultValueMapping, (uint64_t **)a1, (uint64_t)a4, (uint64_t)&v46, (uint64_t)a5, &v45, v41, (uint64_t)v22);
          for (uint64_t i = v47; i != &v46; uint64_t i = (uint64_t *)i[1])
          {
            uint64_t v43 = (ZinAneInstruction *)i[2];
            if (v43)
            {
              ZinAneInstruction::~ZinAneInstruction(v43);
              MEMORY[0x21667D3C0]();
            }
          }
          uint64_t v11 = 0;
          *(void *)(v41 + 24) = v22;
        }
      }
      else
      {
        BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v31) {
          ZinIrCodegenHandleTds<8u>(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        for (uint64_t j = v47; j != &v46; uint64_t j = (uint64_t *)j[1])
        {
          unsigned int v40 = (ZinAneInstruction *)j[2];
          if (v40)
          {
            ZinAneInstruction::~ZinAneInstruction(v40);
            MEMORY[0x21667D3C0]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, @"MemoryAllocationFailure");
        uint64_t v11 = 3;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v46);
  return v11;
}

void sub_2111611A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<8u>(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  CFNumberRef v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", (uint8_t *)buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", (uint8_t *)buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  int v9 = (ZinIrOpLayer **)*v8;
  uint64_t v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    uint64_t v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9)) {
        break;
      }
      ++v9;
    }
    while (v9 != v10);
    int v9 = (ZinIrOpLayer **)*v8;
    uint64_t v11 = (ZinIrOpLayer **)v8[1];
  }
  do
  {
    BOOL v12 = v11;
    if (v11 == v9) {
      break;
    }
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  uint64_t v76 = **a1;
  uint64_t v77 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(buf, 0, sizeof(buf));
  int v88 = 1065353216;
  memset(v85, 0, sizeof(v85));
  int v86 = 1065353216;
  uint64_t v73 = (uint64_t)v8;
  uint64_t v14 = *v8;
  uint64_t v13 = v8[1];
  unint64_t v15 = (v13 - *v8) >> 3;
  __p = 0;
  long long v83 = 0;
  uint64_t v84 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v13, v13, v14, v14, v15);
  uint64_t v16 = (ZinIrOpLayer **)__p;
  uint64_t v17 = v83;
  if (__p != v83)
  {
    do
    {
      unsigned __int8 v81 = 0;
      unsigned __int8 v81 = *v16;
      if (ZinIrOpLayer::IsANELayer(v81))
      {
        v80[3] = 0;
        operator new();
      }
      ++v16;
    }
    while (v16 != v17);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v77) && !*(unsigned char *)(v76 + 2088)
    || (uint64_t v18 = ZinCodegenEnableInterKernelReuse(8, a1, (uint64_t)a4), !v18))
  {
    uint64_t v19 = *(int8x8_t **)(*(void *)(a4[1] + 16) + 200);
    __int32 v20 = v19[115].i32[0];
    v19[109] = vorr_s8(v19[109], (int8x8_t)vdup_n_s32(0x500030u));
    v19[115].i32[0] = v20 | 0x500030;
    if ((void *)a4[1] != a4)
    {
      uint64_t v21 = 0;
      std::string::size_type v22 = a4;
      do
      {
        uint64_t v23 = *(void *)(*(void *)(*v22 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 368))(v23, v21);
        uint64_t v24 = *(void *)(*(void *)(*v22 + 16) + 200);
        uint64_t v21 = (*(unsigned int (**)(uint64_t))(*(void *)v24 + 16))(v24) - 1;
        std::string::size_type v22 = (void *)*v22;
      }
      while (v22 != (void *)a4[1]);
    }
    unsigned int v25 = ZinAlignPower2(2, *(void *)(v76 + 504));
    if (SetInstructionMemOffset<8u>((uint64_t)a4, v76, (*a1)[1], v25))
    {
      BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v26) {
        ZinIrCodegenHandleTdsMakeList<8u>(v26, v27, v28, v29, v30, v31, v32, v33);
      }
LABEL_70:
      uint64_t v18 = 3;
      goto LABEL_71;
    }
    LegalizeNetworks<8u>(a1, a4, (_DWORD *)a5, (uint64_t)a6, v85);
    uint64_t v34 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v78, (uint64_t)buf);
    uint64_t v35 = v34[1];
    v89[5] = *(unsigned char *)(v35 + 472);
    *(_WORD *)&v89[3] = *(_WORD *)(v35 + 100);
    uint64_t v36 = *(unsigned __int8 *)(v35 + 95);
    int v37 = (char)v36;
    if ((v36 & 0x80u) != 0) {
      uint64_t v36 = *(void *)(v35 + 80);
    }
    if (v36 == 9)
    {
      if (v37 >= 0) {
        uint64_t v38 = v35 + 72;
      }
      else {
        uint64_t v38 = *(void *)(v35 + 72);
      }
      uint64_t v39 = *(void *)v38;
      int v40 = *(unsigned __int8 *)(v38 + 8);
      BOOL v42 = v39 == 0x30336E2E67343168 && v40 == 49;
    }
    else
    {
      BOOL v42 = 0;
    }
    if (*(unsigned char *)(v35 + 536)) {
      char v43 = 1;
    }
    else {
      char v43 = v42;
    }
    v89[6] = v43;
    uint64_t v44 = (void *)a4[1];
    if (v44 != a4)
    {
      uint64_t v45 = (unsigned char *)v44[2];
      uint64_t v46 = &v79;
      do
        uint64_t v46 = (uint64_t *)*v46;
      while (v46 && (unsigned char *)v46[3] != v45);
      v89[0] = v45[199];
      v89[2] = v45[196];
      v89[1] = v45[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v45, v34);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v78);
    uint64_t v47 = (void *)a4[1];
    if (v47 != a4)
    {
      uint64_t v49 = **a1;
      uint64_t v48 = (float *)(*a1)[1];
      uint64_t v50 = &_os_log_internal;
      while (1)
      {
        uint64_t v51 = v47[2];
        uint64_t v52 = *(void *)(v51 + 200);
        unint64_t v53 = 4 * (*(unsigned int (**)(uint64_t))(*(void *)v52 + 16))(v52);
        if (*(void *)(v49 + 296) > v53 || *(void *)(v49 + 304) < v53) {
          break;
        }
        v54.i32[0] = *(_DWORD *)(v52 + 24) & 0x3FFFFFF;
        int8x8_t v56 = vcnt_s8(v54);
        v56.i16[0] = vaddlv_u8((uint8x8_t)v56);
        uint64_t v57 = *(void *)(a5 + 16);
        *(void *)(a5 + 8) += v56.u32[0];
        v56.i32[0] = *(_DWORD *)(v52 + 16) & 0x3FFFFFF;
        uint8x8_t v58 = (uint8x8_t)vcnt_s8(v56);
        v58.i16[0] = vaddlv_u8(v58);
        *(void *)(a5 + 16) = v57 + v58.u32[0];
        unsigned int v59 = *(unsigned __int16 *)(v52 + 12);
        if (*(_DWORD *)(a5 + 32) > v59) {
          unsigned int v59 = *(_DWORD *)(a5 + 32);
        }
        *(_DWORD *)(a5 + 32) = v59;
        float v60 = v48[97];
        if (v60 > 0.0)
        {
          LOWORD(v55) = *(_WORD *)(v52 + 12);
          if (v60 < (float)v55) {
            ++*(_DWORD *)(a5 + 36);
          }
        }
        LODWORD(v80[0]) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v48, (float *)v80))
        {
          int v61 = *(unsigned __int16 *)(v52 + 12);
          float v62 = *(float *)v80;
          if (*(float *)v80 < (float)v61 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            unsigned int v63 = (void *)(v51 + 160);
            if (*(char *)(v51 + 183) < 0) {
              unsigned int v63 = (void *)*v63;
            }
            *(_DWORD *)char v89 = 136315650;
            *(void *)&v89[4] = v63;
            __int16 v90 = 2048;
            double v91 = v62;
            __int16 v92 = 2048;
            double v93 = (double)v61;
            _os_log_error_impl(&dword_210C72000, v50, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", v89, 0x20u);
          }
        }
        uint64_t v47 = (void *)v47[1];
        if (v47 == a4) {
          goto LABEL_64;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<17u>();
      }
      ZinIrNetworkStatus::SetError(a6, @"InvalidTotalTDSize");
      goto LABEL_70;
    }
LABEL_64:
    uint64_t v18 = ZinIrContextSwitchValidator<8u>(a4);
    if (v18)
    {
      BOOL v64 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v64) {
        ZinIrCodegenHandleTdsMakeList<8u>(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    else
    {
      uint64_t v18 = SetTensorKernelDependency<8u>(v73, buf, a6);
      if (!v18)
      {
        if ((*((unsigned char *)v77 + 97) & 0x20) != 0) {
          ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
        }
        uint64_t v18 = 0;
      }
    }
  }
LABEL_71:
  if (__p)
  {
    long long v83 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  return v18;
}

void sub_211161D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v33 - 208);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<8u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5 == a3)
  {
LABEL_10:
    uint64_t v15 = ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v4, a3);
    if (v15)
    {
      uint64_t v16 = v15;
      BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v17) {
        ZinIrCodegenValidateTds<8u>(v17, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    else
    {
      uint64_t v33 = ZinValidateTd<8u>::CheckPEReductionAccumulationRetention(a3);
      if (v33)
      {
        uint64_t v16 = v33;
        BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v34) {
          ZinIrCodegenValidateTds<8u>(v34, v35, v36, v37, v38, v39, v40, v41);
        }
      }
      else
      {
        uint64_t v42 = ZinValidateTd<8u>::ValidateDepMode(a3);
        if (v42)
        {
          uint64_t v16 = v42;
          BOOL v43 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v43) {
            ZinIrCodegenValidateTds<8u>(v43, v44, v45, v46, v47, v48, v49, v50);
          }
        }
        else
        {
          uint64_t v51 = ZinValidateTd<8u>::ValidateRCASDependency(a3);
          if (v51)
          {
            uint64_t v16 = v51;
            BOOL v52 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v52) {
              ZinIrCodegenValidateTds<8u>(v52, v53, v54, v55, v56, v57, v58, v59);
            }
          }
          else
          {
            uint64_t v60 = ZinValidateTd<8u>::ValidateL2CircularBuffer(a3);
            if (v60)
            {
              uint64_t v16 = v60;
              BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v61) {
                ZinIrCodegenValidateTds<8u>(v61, v62, v63, v64, v65, v66, v67, v68);
              }
            }
            else
            {
              uint64_t v69 = ZinValidateTd<8u>::ValidateCachePrefetchKernelTaskInterval(a3, *(_DWORD *)(v4 + 8));
              if (v69)
              {
                uint64_t v16 = v69;
                BOOL v70 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v70) {
                  ZinIrCodegenValidateTds<8u>(v70, v71, v72, v73, v74, v75, v76, v77);
                }
              }
              else
              {
                uint64_t v16 = ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(*(void *)(v4 + 528), a3);
                if (v16)
                {
                  BOOL v78 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v78) {
                    ZinIrCodegenValidateTds<8u>(v78, v79, v80, v81, v82, v83, v84, v85);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v8 = 0;
    int v9 = *(unsigned __int8 *)(a1[1] + 130);
    while (1)
    {
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(void *)(v10 + 200);
      int v13 = *(unsigned __int16 *)(v11 + 8);
      uint64_t v12 = v11 + 8;
      if (v13 != v8) {
        break;
      }
      if (!*(unsigned char *)(v10 + 188))
      {
        uint64_t v14 = ZinValidateTd<8u>::Test(a1, a2, v12, *(unsigned __int8 *)(v10 + 198), v9 != 0);
        if (v14)
        {
          uint64_t v16 = v14;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrCodegenValidateTds<17u>();
          }
          return v16;
        }
      }
      if (*(unsigned char *)(v10 + 198)) {
        int v8 = 0;
      }
      else {
        ++v8;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == a3) {
        goto LABEL_10;
      }
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ZinIrCodegenValidateTds<1u>(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    return 3;
  }
  return v16;
}

void DumpSegment<8u>(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  BOOL v8 = *(unsigned char *)((*a2)[1] + 366) == 0;
  uint64_t v9 = *a2[8];
  if (a2[8][1] != v9)
  {
    unint64_t v15 = 0;
    uint64_t v26 = a4;
    do
    {
      uint64_t v16 = (unsigned int *)(v9 + 80 * v15);
      uint64_t v17 = *(void *)(a4 + 8);
      uint64_t v18 = v16[11];
      if (v18)
      {
        unint64_t v19 = v18 + 1;
        do
        {
          uint64_t v17 = *(void *)(v17 + 8);
          --v19;
        }
        while (v19 > 1);
      }
      uint64_t v20 = *v16;
      uint64_t v21 = v17;
      if (v20)
      {
        unint64_t v22 = v20 + 1;
        uint64_t v21 = v17;
        do
        {
          uint64_t v21 = *(void *)(v21 + 8);
          --v22;
        }
        while (v22 > 1);
      }
      *a6 = (uint64_t *)(a8 + (*(_DWORD *)(v9 + 80 * v15 + 36) & 0xFFFFFFFC));
      uint64_t v23 = DumpSegmentHeader<17u,ZinAneSegmentHeader_V2>(v15, (uint64_t)v16, a4, a6);
      std::operator+<char>();
      AddSymbol((uint64_t)&__p, a7, 0, 4 * v23, a2[7]);
      if (v28 < 0) {
        operator delete(__p);
      }
      while (v17 != v21)
      {
        DumpTask<8u>(a1, a2, *(void *)(v17 + 16), v24, v25, v8, (unsigned int **)a6, a7, a8);
        uint64_t v17 = *(void *)(v17 + 8);
      }
      ++v15;
      uint64_t v9 = *a2[8];
      a4 = v26;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[8][1] - v9) >> 4));
  }
}

void sub_21116221C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::GetSizeInWords(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 5) == 1) {
    int v2 = 9;
  }
  else {
    int v2 = 8;
  }
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1264));
  int v4 = *(unsigned __int8 *)(a1 + 1260);
  RelocInfos = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos((ZinAneTdHw_v8 *)(a1 + 8));
  GetRegistersProgrammedAsRelocationCommands(RelocInfos, (uint64_t)v32);
  ZinCodegen::GetDontCareRegisters<8u>((_DWORD *)a1, (uint64_t)v30);
  for (uint64_t i = v31; i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v32, i + 4, i + 4);
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v7 = ZinRegisterPacking::ProcessRegisters(a1 + 44, 0x48uLL, 21760, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  BOOL v8 = operator new(4uLL);
  __p = v8;
  *BOOL v8 = 60;
  char v28 = v8 + 1;
  uint64_t v29 = v8 + 1;
  int v9 = ZinRegisterPacking::ProcessRegisters(a1 + 500, 0x13uLL, 0, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v10 = ZinRegisterPacking::ProcessRegisters(a1 + 584, 0x45uLL, 19712, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v11 = ZinRegisterPacking::ProcessRegisters(a1 + 868, 0x1EuLL, 16640, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  int v26 = v11;
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v25 = ZinRegisterPacking::ProcessRegisters(a1 + 1060, 0xBuLL, 18688, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  int v12 = v9;
  int v13 = v2;
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  uint64_t v14 = (ZinAneTdHw_v8 *)(a1 + 8);
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v15 = ZinRegisterPacking::ProcessRegisters(a1 + 1112, 0x15uLL, 20736, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  int v16 = v7;
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v17 = ZinRegisterPacking::ProcessRegisters(a1 + 996, 0xEuLL, 17664, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  __p = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v18 = ZinRegisterPacking::ProcessRegisters(a1 + 1204, 0xCuLL, 22784, 0, 0, v4, AddressDefaultValueMapping, v32, 0, (__int32 **)&__p);
  if (__p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  unint64_t v19 = *(void *)(a1 + 1312);
  uint64_t v20 = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos(v14);
  uint64_t v21 = v16 + v13 + v12 + v10 + v26 + v25 + v15 + v17 + v18 + (v19 >> 2);
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  while (v22 != v23)
  {
    uint64_t v21 = GetSizeInWordsOfRelocationCommand(v22 + 32) + v21;
    v22 += 40;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32);
  return v21;
}

void sub_2111625F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t SetInstructionMemOffset<8u>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a1)
  {
    uint64_t v7 = a4;
    do
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v8 + 200);
      *(_DWORD *)(v8 + 184) = v7;
      if (*(unsigned char *)(a2 + 2057)) {
        AdjustTaskSizeForRdar107730882<8u>(v8, a2);
      }
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, 25);
      uint64_t v7 = ZinAlignPower2(v7 + (4 * v10), *(void *)(a2 + 504));
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a1);
  }
  return 0;
}

uint64_t LegalizeNetworks<8u>(uint64_t **a1, void *a2, _DWORD *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = **a1;
  unint64_t v8 = *(unsigned int *)((*a1)[1] + 548);
  if ((int)v8 < 1)
  {
    int v10 = (unint64_t *)(v7 + 608);
  }
  else
  {
    *(void *)&long long v30 = *(unsigned int *)((*a1)[1] + 548);
    BOOL v9 = *(void *)(v7 + 608) >= v8;
    int v10 = (unint64_t *)&v30;
    if (!v9) {
      int v10 = (unint64_t *)(v7 + 608);
    }
  }
  unint64_t v11 = *v10;
  unsigned int v12 = ZinAlignPower2(2, *(void *)(v7 + 504));
  int v13 = (void *)a2[1];
  if (v13 != a2)
  {
    unint64_t v14 = v12;
    unint64_t v15 = v12;
    do
    {
      uint64_t v16 = v13[2];
      if (v15 == v14) {
        *(unsigned char *)(v16 + 196) = 1;
      }
      int v17 = *(_WORD **)(v16 + 200);
      if (!v17[4]) {
        *(unsigned char *)(v16 + 199) = 1;
      }
      unsigned int v18 = (*(uint64_t (**)(_WORD *, uint64_t))(*(void *)v17 + 24))(v17, 25);
      v15 += ZinAlignPower2(4 * v18, *(void *)(v7 + 504));
      if (v15 <= v11)
      {
        if (*(unsigned char *)(v16 + 198))
        {
          *(unsigned char *)(v16 + 197) = 1;
          unint64_t v15 = v14;
          if ((*(unsigned int (**)(_WORD *, uint64_t))(*(void *)v17 + 24))(v17, 4) != 1) {
            ZinAssertImpl("Incorrect network boundary", a5);
          }
        }
      }
      else
      {
        __int16 v19 = *(_WORD *)(*(void *)(v13[2] + 200) + 8);
        do
        {
          if (!v19) {
            ZinAssertImpl("Cannot find valid segment boundary", a5);
          }
          int v13 = (void *)*v13;
          uint64_t v20 = v13[2];
          uint64_t v21 = *(_WORD **)(v20 + 200);
          __int16 v19 = v21[4];
        }
        while (!(*(unsigned int (**)(_WORD *, uint64_t))(*(void *)v21 + 24))(v21, 4));
        *(unsigned char *)(v20 + 197) = 1;
        unint64_t v15 = v14;
      }
      int v13 = (void *)v13[1];
    }
    while (v13 != a2);
  }
  *(unsigned char *)(*(void *)(*a2 + 16) + 197) = 1;
  CollectSegmentStats<8u>(**a1, (uint64_t)a2, a5, (uint64_t *)&v30);
  uint64_t v22 = a1[8];
  std::vector<ZinIrCodegenTDPartitionStats>::__vdeallocate(v22);
  *(_OWORD *)uint64_t v22 = v30;
  v22[2] = v31;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  uint64_t v32 = (void **)&v30;
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v23 = *(void *)(*a2 + 16);
  unsigned int v24 = *(_DWORD *)(v23 + 184);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v23 + 200) + 24))(*(void *)(v23 + 200), 25);
  int v26 = result + (v24 >> 2);
  *a3 = v26;
  uint64_t v27 = *a1[8];
  if (a1[8][1] - v27 == 80 && v26 != *(_DWORD *)(v27 + 12)) {
    ZinAssertImpl("Error");
  }
  return result;
}

uint64_t ZinIrContextSwitchValidator<8u>(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 16);
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 200) + 24))(*(void *)(v2 + 200), 4))
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      ZinIrContextSwitchValidator<8u>(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 2;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 200) + 24))(*(void *)(v2 + 200), 49))
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinIrContextSwitchValidator<8u>(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 2;
  }
  uint64_t v20 = (void *)a1[1];
  if (v20 != a1)
  {
    while (1)
    {
      uint64_t v21 = v20[2];
      uint64_t v22 = *(void *)(v21 + 200);
      if ((~*(_DWORD *)(v22 + 920) & 3) == 0)
      {
        if ((*(unsigned int (**)(void, uint64_t))(*(void *)v22 + 24))(*(void *)(v21 + 200), 4)) {
          break;
        }
      }
      if ((*(unsigned char *)(v22 + 997) & 8) != 0
        && (*(unsigned int (**)(void, uint64_t))(**(void **)(v21 + 200) + 24))(*(void *)(v21 + 200), 4))
      {
        BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v31) {
          ZinIrContextSwitchValidator<8u>(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        return 2;
      }
      uint64_t v20 = (void *)v20[1];
      if (v20 == a1) {
        return 0;
      }
    }
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinIrContextSwitchValidator<8u>(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 2;
  }
  return 0;
}

uint64_t SetTensorKernelDependency<8u>(uint64_t a1, void *a2, CFArrayRef *a3)
{
  memset(v43, 0, sizeof(v43));
  int v44 = 1065353216;
  BOOL v3 = *(void ***)a1;
  uint64_t v4 = *(void ***)(a1 + 8);
  if (*(void ***)a1 == v4)
  {
LABEL_37:
    uint64_t v23 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v42 = *v3;
      if ((*(uint64_t (**)(void *))(*v42 + 120))(v42))
      {
        uint64_t v41 = 0;
        (*(void (**)(ZinIrTensor **__return_ptr))(*v42 + 128))(&v34);
        RootTensor = ZinIrTensor::GetRootTensor(v34);
        if (__p) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
        }
        uint64_t v41 = RootTensor;
        if ((*(_DWORD *)(*(void *)(*((void *)RootTensor + 12) + 64) + 8) & 0xFFFFFFFE) != 0x1C)
        {
          uint64_t v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v43, &v41);
          if (!v7)
          {
            ZinIrTensor::GetAllChildrenInTree(v41, (uint64_t *)&v34);
            ZinIrTensor::ConvertRawVectorFromPtrVector((uint64_t **)&v34, (char **)&v38);
            uint64_t v45 = &v34;
            std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
            uint64_t v8 = v39;
            if (v39 >= v40)
            {
              uint64_t v10 = (v39 - (unsigned char *)v38) >> 3;
              if ((unint64_t)(v10 + 1) >> 61) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v11 = (v40 - (unsigned char *)v38) >> 2;
              if (v11 <= v10 + 1) {
                unint64_t v11 = v10 + 1;
              }
              if ((unint64_t)(v40 - (unsigned char *)v38) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v12 = v11;
              }
              if (v12) {
                uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v12);
              }
              else {
                uint64_t v13 = 0;
              }
              uint64_t v14 = (ZinIrTensor **)&v13[8 * v10];
              *uint64_t v14 = v41;
              uint64_t v9 = (uint64_t)(v14 + 1);
              uint64_t v16 = (char *)v38;
              uint64_t v15 = v39;
              if (v39 != v38)
              {
                do
                {
                  uint64_t v17 = (ZinIrTensor *)*((void *)v15 - 1);
                  v15 -= 8;
                  *--uint64_t v14 = v17;
                }
                while (v15 != v16);
                uint64_t v15 = (char *)v38;
              }
              uint64_t v38 = v14;
              uint64_t v39 = (char *)v9;
              uint64_t v40 = &v13[8 * v12];
              if (v15) {
                operator delete(v15);
              }
            }
            else
            {
              *(void *)uint64_t v39 = v41;
              uint64_t v9 = (uint64_t)(v8 + 8);
            }
            uint64_t v39 = (char *)v9;
            uint64_t v34 = v41;
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            __p = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v38, v9, (v9 - (uint64_t)v38) >> 3);
            uint64_t v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)v43, &v34, (uint64_t)&v34);
            if (__p)
            {
              uint64_t v36 = __p;
              operator delete(__p);
            }
            if (v38)
            {
              uint64_t v39 = (char *)v38;
              operator delete(v38);
            }
          }
          uint64_t v38 = 0;
          uint64_t v18 = v7[3];
          uint64_t v19 = v7[4];
          while (v18 != v19)
          {
            uint64_t v20 = *(void **)(*(void *)v18 + 96);
            if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v20)
              && v20[45] <= v42[45]
              && (!v38 || *((void *)v38 + 6) < v20[6]))
            {
              uint64_t v38 = v20;
            }
            v18 += 8;
          }
          uint64_t v21 = *(void *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a2, &v38)[3]+ 200);
          uint64_t v34 = (ZinIrTensor *)&v42;
          uint64_t v22 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a2, &v42, (uint64_t)&std::piecewise_construct, (void **)&v34)[3];
          (*(void (**)(void, uint64_t, void))(**(void **)(v22 + 200) + 32))(*(void *)(v22 + 200), 8, *(unsigned __int16 *)(v21 + 8));
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v22 + 200) + 24))(*(void *)(v22 + 200), 5) != 1)break; {
        }
          }
      }
      if (++v3 == v4) {
        goto LABEL_37;
      }
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      SetTensorKernelDependency<8u>(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    ZinIrNetworkStatus::SetError(a3, @"InvalidHWHeader");
    uint64_t v23 = 3;
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v43);
  return v23;
}

void sub_211162EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t ZinAneTd<8u>::GetField(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 23:
    case 24:
      unsigned int v3 = *(_DWORD *)(a1 + 876);
      return (v3 >> 2) & 3;
    case 4:
      return *(_DWORD *)(a1 + 36) & 1;
    case 5:
      return (*(_DWORD *)(a1 + 36) >> 1) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 40);
    case 9:
      return *(_WORD *)(a1 + 38) & 7;
    case 12:
      unsigned int v3 = *(_DWORD *)(a1 + 872);
      return (v3 >> 2) & 3;
    case 14:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
      return *(_DWORD *)(a1 + 16) & 0x3FFFFFF;
    case 15:
      unsigned int v4 = *(_DWORD *)(a1 + 872);
      goto LABEL_28;
    case 16:
      unsigned int v5 = *(_DWORD *)(a1 + 872);
      goto LABEL_30;
    case 17:
      unsigned int v4 = *(_DWORD *)(a1 + 920);
      goto LABEL_28;
    case 18:
      unsigned int v5 = *(_DWORD *)(a1 + 920);
      goto LABEL_30;
    case 19:
      unsigned int v6 = *(_DWORD *)(a1 + 872);
      goto LABEL_32;
    case 20:
      unsigned int v7 = *(_DWORD *)(a1 + 872);
      goto LABEL_34;
    case 21:
      unsigned int v6 = *(_DWORD *)(a1 + 920);
      goto LABEL_32;
    case 22:
      unsigned int v7 = *(_DWORD *)(a1 + 920);
      goto LABEL_34;
    case 25:
      return *(_WORD *)(a1 + 10) & 0x7FF;
    case 26:
      unsigned int v8 = *(_DWORD *)(a1 + 964);
      return (v8 >> 2) & 0x1FFFFFFF;
    case 27:
      unsigned int v8 = *(_DWORD *)(a1 + 968);
      return (v8 >> 2) & 0x1FFFFFFF;
    case 28:
      int v9 = *(_DWORD *)(a1 + 964);
      goto LABEL_25;
    case 29:
      int v9 = *(_DWORD *)(a1 + 968);
LABEL_25:
      uint64_t result = v9 & 3;
      break;
    case 40:
      uint64_t result = (*(_DWORD *)(a1 + 36) >> 3) & 1;
      break;
    case 41:
      unsigned int v4 = *(_DWORD *)(a1 + 876);
LABEL_28:
      uint64_t result = (v4 >> 4) & 1;
      break;
    case 42:
      unsigned int v5 = *(_DWORD *)(a1 + 876);
LABEL_30:
      uint64_t result = (v5 >> 5) & 1;
      break;
    case 43:
      unsigned int v6 = *(_DWORD *)(a1 + 876);
LABEL_32:
      uint64_t result = (v6 >> 20) & 1;
      break;
    case 44:
      unsigned int v7 = *(_DWORD *)(a1 + 876);
LABEL_34:
      uint64_t result = (v7 >> 22) & 1;
      break;
    case 49:
      uint64_t result = *(unsigned int *)(a1 + 32);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetField(uint64_t result, int a2, int a3)
{
  switch(a2)
  {
    case 4:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFE | a3 & 1;
      goto LABEL_26;
    case 5:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFD | (2 * (a3 & 1));
      goto LABEL_26;
    case 8:
      *(_WORD *)(result + 40) = a3;
      return result;
    case 9:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFF8FFFF | ((a3 & 7) << 16);
      goto LABEL_26;
    case 12:
      unsigned int v4 = *(_DWORD *)(result + 872) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_14;
    case 13:
      unsigned int v5 = *(_DWORD *)(result + 876) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_31;
    case 15:
      unsigned int v4 = *(_DWORD *)(result + 872) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_14;
    case 16:
      unsigned int v4 = *(_DWORD *)(result + 872) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_14;
    case 17:
      unsigned int v6 = *(_DWORD *)(result + 920) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_17;
    case 18:
      unsigned int v6 = *(_DWORD *)(result + 920) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_17;
    case 19:
      unsigned int v4 = *(_DWORD *)(result + 872) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_14;
    case 20:
      unsigned int v4 = *(_DWORD *)(result + 872) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_14:
      *(_DWORD *)(result + 872) = v4;
      return result;
    case 21:
      unsigned int v6 = *(_DWORD *)(result + 920) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_17;
    case 22:
      unsigned int v6 = *(_DWORD *)(result + 920) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_17:
      *(_DWORD *)(result + 920) = v6;
      return result;
    case 25:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xF800FFFF | ((a3 & 0x7FF) << 16);
      return result;
    case 26:
      unsigned int v7 = *(_DWORD *)(result + 964) & 0x80000003 | (4 * (a3 & 0x1FFFFFFF));
      goto LABEL_22;
    case 27:
      unsigned int v8 = *(_DWORD *)(result + 968) & 0x80000003 | (4 * (a3 & 0x1FFFFFFF));
      goto LABEL_24;
    case 28:
      unsigned int v7 = *(_DWORD *)(result + 964) & 0xFFFFFFFC | a3 & 3;
LABEL_22:
      *(_DWORD *)(result + 964) = v7;
      return result;
    case 29:
      unsigned int v8 = *(_DWORD *)(result + 968) & 0xFFFFFFFC | a3 & 3;
LABEL_24:
      *(_DWORD *)(result + 968) = v8;
      return result;
    case 40:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFFFFFF7 | (8 * (a3 & 1));
LABEL_26:
      *(_DWORD *)(result + 36) = v3;
      return result;
    case 41:
      unsigned int v5 = *(_DWORD *)(result + 876) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_31;
    case 42:
      unsigned int v5 = *(_DWORD *)(result + 876) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_31;
    case 43:
      unsigned int v5 = *(_DWORD *)(result + 876) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_31;
    case 44:
      unsigned int v5 = *(_DWORD *)(result + 876) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_31:
      *(_DWORD *)(result + 876) = v5;
      break;
    case 49:
      *(_DWORD *)(result + 32) = a3;
      break;
    case 50:
      *(_DWORD *)(result + 16) = *(_DWORD *)(result + 16) & 0xFC000000 | a3 & 0x3FFFFFF;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleUserTags(uint64_t a1, uint64_t a2)
{
  int v4 = ZinEngineLayerMirInfo::HasDmaRead(*(void *)(a2 + 264), 0);
  int IsCompressed = 0;
  if (v4) {
    int IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(void *)(a2 + 264)
  }
                                                                                           + 712));
  uint64_t result = ZinEngineLayerMirInfo::HasDmaRead(*(void *)(a2 + 264), 1);
  int v7 = result;
  if (!result)
  {
    int v8 = 0;
    if (!*(void *)(a2 + 200)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t result = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(void *)(a2 + 264) + 808));
  int v8 = result;
  if (!*(void *)(a2 + 200)) {
    goto LABEL_9;
  }
  if (*(void *)(a2 + 192) != 1)
  {
LABEL_8:
    if (!*(void *)(a2 + 192))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 496))(a2);
      v7 |= result;
      int v9 = *(_DWORD *)(a2 + 360);
      if ((v4 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
LABEL_9:
    int v9 = *(_DWORD *)(a2 + 360);
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 496))(a2);
  int v9 = *(_DWORD *)(a2 + 360);
LABEL_12:
  uint64_t result = ZinAneTd<8u>::SetTileDmaSrcDma1UserTag(a1, v9);
  if (IsCompressed)
  {
    uint64_t result = ZinAneTd<8u>::SetTileDmaSrcCompressedMdUserTag(a1, v9);
    if ((v7 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (!v7) {
    goto LABEL_18;
  }
LABEL_16:
  uint64_t result = ZinAneTd<8u>::SetTileDmaSrcDma2UserTag(a1, v9);
  if (v8) {
    uint64_t result = ZinAneTd<8u>::SetTileDmaSrcCompressed2MdUserTag(a1, v9);
  }
LABEL_18:
  if ((*(_DWORD *)(*(void *)(a2 + 264) + 1632) - 1) <= 1) {
    uint64_t result = ZinAneTd<8u>::SetTileDmaDstUserTag(a1, v9);
  }
  uint64_t v10 = *(void *)(a2 + 136);
  if (v10)
  {
    unint64_t v11 = *(void **)(v10 + 800);
    if (v11)
    {
      uint64_t v12 = v11[4];
      uint64_t v13 = v11[2];
      uint64_t v14 = v11[3];
      uint64_t v15 = v11[1];
      if (v11[5]) {
        uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcCoeffUserTag(a1, v9);
      }
      if (v14) {
        uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcPostScaleUserTag(a1, v9);
      }
      if (v12) {
        uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcBiasUserTag(a1, v9);
      }
      if (v15) {
        uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutUserTag(a1, v9);
      }
      if (v13) {
        uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcPaletteLutUserTag(a1, v9);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    return ZinAneTd<8u>::SetCachePrefetchDmaUserTag(a1, v9);
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleEWCommon(uint64_t a1, ZinIrOpLayer *this)
{
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  uint64_t v5 = *(void *)(*((void *)this + 57) + 64);
  int v13 = 0;
  unint64_t v6 = *(void *)(InputTensor + 48);
  BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(InputTensor + 56), (unsigned int *)(*(void *)(a1 + 1296) + 40), &v13);
  if (result)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v13 & 0x1FFFF;
    *(_DWORD *)(a1 + 532) &= 0xF801FFFF;
    ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
    BOOL result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v6);
    if (result)
    {
      BOOL result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
      if (result)
      {
        BOOL result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
        if (result)
        {
          ZinAneTd<8u>::SetUnicastEn(a1, **((unsigned __int8 **)this + 33));
          if (*((void *)this + 12) - *((void *)this + 11) == 16)
          {
            unint64_t v8 = 2;
            unint64_t v9 = 2;
          }
          else
          {
            uint64_t v10 = *((void *)this + 33);
            unint64_t v8 = *(void *)(v10 + 80);
            unint64_t v9 = *(void *)(v10 + 96);
          }
          int v12 = 0;
          BOOL result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(void *)(a1 + 1296) + 40), &v12);
          if (result)
          {
            *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v12 & 0x1FFFF;
            ZinAneTd<8u>::SetUnicastCin(a1, v9);
            *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFF7FFF | ((*(_DWORD *)(v5 + 12) == 2) << 15);
            unsigned int v11 = *(_DWORD *)(v5 + 12);
            if (v11 >= 8) {
              return 0;
            }
            else {
              return (0x9Eu >> v11) & 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonMACBypassMode(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2[33];
  if (!v2)
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinAneTd<8u>::HandleCommonMACBypassMode(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  ZinAneTd<8u>::SetUnicastEn(a1, *v2);
  *(_DWORD *)(a1 + 532) &= 0xF801FFFF;
  ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
  ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
  ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
  ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
  uint64_t v5 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  if (!ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(void *)(v5 + 48))
    || !ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL)
    || !ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL))
  {
    return 0;
  }
  unint64_t v6 = *(void *)(a2[33] + 96);

  return ZinAneTd<8u>::SetUnicastCin(a1, v6);
}

uint64_t ZinAneTd<8u>::HandleCommonRCAS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
  BOOL v4 = ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(void *)(*(void *)(v2 + 264) + 104));
  int v5 = v4 & ZinAneTd<8u>::SetUnicastCin(a1, *(void *)(*(void *)(v2 + 264) + 96));
  LODWORD(v2) = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, 0);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, 0);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgSx(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgSy(a1, 1uLL);
  LODWORD(v2) = v2 & ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
  return v5 & v2 & ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
}

BOOL ZinAneTd<8u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 432);
  uint64_t v5 = *(void *)(v4 + 64);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 376))(&v19, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 384))(&v15, a2);
  if (*(void *)(a2 + 264))
  {
    int v14 = 0;
    BOOL result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 72), (unsigned int *)(*(void *)(a1 + 1296) + 104), &v14);
    if (result)
    {
      *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFC1FFFF | ((v14 & 0x1F) << 17);
      int v14 = 0;
      BOOL result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 64), (unsigned int *)(*(void *)(a1 + 1296) + 96), &v14);
      if (result)
      {
        *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xF83FFFFF | ((v14 & 0x1F) << 22);
        ZinAneTd<8u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
        ZinAneTd<8u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
        BOOL result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v19);
        if (result)
        {
          switch(*(_DWORD *)(*(void *)(v4 + 64) + 104))
          {
            case 6:
            case 8:
              BOOL result = ZinAneTd<8u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                BOOL result = ZinAneTd<8u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  BOOL result = ZinAneTd<8u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    BOOL result = ZinAneTd<8u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      BOOL result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, *(void *)(v5 + 16));
                      if (result)
                      {
                        BOOL result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, *(void *)(v5 + 24));
                        if (result)
                        {
                          BOOL result = ZinAneTd<8u>::SetUnicastCin(a1, 1uLL);
                          if (result)
                          {
                            int v14 = 0;
                            BOOL result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(void *)(a1 + 1296) + 40), &v14);
                            if (result)
                            {
                              *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v14 & 0x1FFFF;
                              int v14 = 0;
                              BOOL result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(void *)(a1 + 1296) + 48), &v14);
                              if (result)
                              {
                                *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v14 & 0x1FFFF;
                                ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            case 7:
            case 9:
              BOOL result = ZinAneTd<8u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                BOOL result = ZinAneTd<8u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  BOOL result = ZinAneTd<8u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    BOOL result = ZinAneTd<8u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      int v14 = 0;
                      BOOL result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(void *)(a1 + 1296) + 40), &v14);
                      if (result)
                      {
                        *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v14 & 0x1FFFF;
                        int v14 = 0;
                        BOOL result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(void *)(a1 + 1296) + 48), &v14);
                        if (result)
                        {
                          *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v14 & 0x1FFFF;
                          ZinAneTd<8u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                          BOOL result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, v19);
                          if (result)
                          {
                            BOOL result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, 1uLL);
                            if (result)
                            {
                              BOOL result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, 1uLL);
                              if (result)
                              {
                                if (!ZinAneTd<8u>::SetUnicastCin(a1, v20)) {
                                  return 0;
                                }
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            default:
LABEL_28:
              BOOL result = 1;
              break;
          }
        }
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<8u>::HandleCommonArgMinMax(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  if (!a2[33])
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<8u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  uint64_t v5 = *((void *)a2[54] + 8);
  BOOL result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, a3);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<8u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<8u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    BOOL result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, *(void *)(v5 + 16));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, *(void *)(v5 + 24));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<8u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<8u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<8u>::SetUnicastEn(a1, *a2[33]);
  int v14 = a2[33];
  if (!*v14) {
    return 1;
  }
  ZinAneTd<8u>::SetUnicastCin(a1, *((void *)v14 + 12));
  LODWORD(v16) = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 10), (unsigned int *)(*(void *)(a1 + 1296) + 40), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 11), (unsigned int *)(*(void *)(a1 + 1296) + 48), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConvOpcode(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr, void *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, void *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    uint64_t v4 = (int *)a2[17];
    unint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 4);
    BOOL result = ZinAneTd<8u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      BOOL result = ZinAneTd<8u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        BOOL result = ZinAneTd<8u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          unint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 3);
          BOOL result = ZinAneTd<8u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            BOOL result = ZinAneTd<8u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              BOOL result = ZinAneTd<8u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<8u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<8u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<8u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<8u>::SetCommonConvCfgOy(a1, v4[86]);
                int v16 = 0;
                BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 80), (unsigned int *)(*(void *)(a1 + 1296) + 40), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v16 & 0x1FFFF;
                  int v16 = 0;
                  BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 88), (unsigned int *)(*(void *)(a1 + 1296) + 48), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 516) & 0xFFFE0000 | v16 & 0x1FFFF;
                    BOOL result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, *(void *)(a2[33] + 104));
                    if (result)
                    {
                      uint64_t v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<8u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<8u>::SetUnicastCin(a1, *(void *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<8u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::ForceHazardStalls(_DWORD *a1)
{
  a1[146] = a1[146] & 0xCFFFFFFF | 0x10000000;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 15, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 16, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 17, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 18, 1);
  a1[139] |= 0x800000u;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 19, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 20, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 21, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 22, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 41, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 42, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 43, 1);
  uint64_t v2 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32);

  return v2(a1, 44, 1);
}

uint64_t ZinAneTd<8u>::SetRAWdmaDependency(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a3 == 1)
  {
    ZinAneTd<8u>::SetRAWdmaDependencySrc2(a1, a2, a4, a5);
    return 1;
  }
  if (!a3)
  {
    ZinAneTd<8u>::SetRAWdmaDependencySrc1(a1, a2, a4, a5);
    return 1;
  }
  return 0;
}

uint64_t ZinAneTd<8u>::HasDmaConfigDependent(uint64_t a1)
{
  return *(_DWORD *)(a1 + 584) & ((*(_DWORD *)(a1 + 584) & 0x30000000) != 0);
}

uint64_t ZinAneTd<8u>::HandleDMADepErrata(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 24))(a1, 1);
  if (result == 1)
  {
    a1[146] = a1[146] & 0xCFFFFFFF | 0x10000000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 24))(a1, 0);
    if (result != 1) {
      return (a1[146] & 0x30000000) == 0x10000000;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleCommonConfigFormatAndConvParams(uint64_t a1, int a2, unint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = ZinAneTd<8u>::SetOrReturnWin(a1, a3[3]);
  if (result)
  {
    uint64_t result = ZinAneTd<8u>::SetOrReturnHin(a1, a3[2]);
    if (result)
    {
      int v12 = 0;
      uint64_t result = ZinCodegenUtil::ValueToRegister(a3[1], (unsigned int *)(*(void *)(a1 + 1296) + 40), &v12);
      if (result)
      {
        *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 512) & 0xFFFE0000 | v12 & 0x1FFFF;
        ZinAneTd<8u>::SetCommonInFmt(a1, a2);
        ZinAneTd<8u>::SetCommonOutFmt(a1, a4);
        uint64_t result = ZinAneTd<8u>::SetCommonConvCfgOx(a1, 1uLL);
        if (result)
        {
          uint64_t result = ZinAneTd<8u>::SetCommonConvCfgOy(a1, 1uLL);
          if (result)
          {
            uint64_t result = ZinAneTd<8u>::SetOrReturnNumGroups(a1, 1uLL);
            if (result)
            {
              ZinAneTd<8u>::SetUnicastEn(a1, 0);
              ZinAneTd<8u>::SetUnicastCin(a1, 1uLL);
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, a6);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConfigOutputDimension(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 2);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 4);
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 3);
  if (!ZinAneTd<8u>::SetOrReturnWout(a1, v5) || !ZinAneTd<8u>::SetOrReturnHout(a1, v6)) {
    return 0;
  }

  return ZinAneTd<8u>::SetOrReturnCout(a1, v4);
}

BOOL ZinAneTd<8u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 544) = 0;
  BOOL v4 = ZinAneTd<8u>::SetTileHeight(a1, *(void *)(a2 + 200));
  BOOL result = 0;
  if (v4)
  {
    BOOL result = ZinAneTd<8u>::SetTileOverlap(a1, *(void *)(a2 + 216));
    if (result)
    {
      BOOL result = ZinAneTd<8u>::SetTileOverlapPadTop(a1, *(void *)(a2 + 208));
      if (result)
      {
        BOOL result = ZinAneTd<8u>::SetTileOverlapPadBottom(a1, *(void *)(a2 + 224));
        if (result)
        {
          *(_DWORD *)(a1 + 556) = 0;
          ZinAneTd<8u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
          int v18 = 0;
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
          uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          int Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
          BOOL result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(void *)(a1 + 1296) + 256), &v18);
          if (result)
          {
            *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC7FFFF | ((v18 & 7) << 19);
            int v18 = 0;
            int v9 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 136));
            int v10 = v9 >= 4 ? 4 : v9;
            BOOL result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(void *)(a1 + 1296) + 232), &v18);
            if (result)
            {
              *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFF8FF | ((v18 & 7) << 8);
              int v18 = 0;
              int v11 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 120));
              int v12 = v11 >= 4 ? 4 : v11;
              BOOL result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(void *)(a1 + 1296) + 240), &v18);
              if (result)
              {
                *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFF8FFF | ((v18 & 7) << 12);
                int v18 = 0;
                int v13 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 128));
                if (v13 >= 4) {
                  int v14 = 4;
                }
                else {
                  int v14 = v13;
                }
                BOOL result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(void *)(a1 + 1296) + 248), &v18);
                if (result)
                {
                  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFF8FFFF | ((v18 & 7) << 16);
                  int v18 = 0;
                  uint64_t v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
                  uint64_t v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
                  int v17 = ZinRoundUpToNextPow2Log2(v16);
                  BOOL result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(void *)(a1 + 1296) + 256), &v18);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC7FFFF | ((v18 & 7) << 19);
                    *(void *)(a1 + 576) = 0;
                    *(_DWORD *)(a1 + 560) = 0x100000;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleCommonConfigPerArch(ZinIrHalH13g *a1, ZinEngineLayerMirInfo **a2, unint64_t a3)
{
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
  char Pow2Log2 = ZinRoundUpToNextPow2Log2(OCGSize);
  ZinAneTd<8u>::SetNEOcgSize((uint64_t)a1, Pow2Log2);
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 44))(&v23, a2);
  (*((void (**)(void *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 41))(v22, a2);
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 42))(a2);
  int v10 = v9;
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 43))(a2);
  int v12 = v11;
  unint64_t v13 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 45))(a2, 1);
  unint64_t v14 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 1);
  ZinAneTd<8u>::SetCommonConvCfg3dKd((uint64_t)a1, v22[2]);
  ZinAneTd<8u>::SetCommonConvCfg3dPz((uint64_t)a1, v24);
  ZinAneTd<8u>::SetCommonConvCfg3dSz((uint64_t)a1, v10);
  ZinAneTd<8u>::SetCommonConvCfg3dOz((uint64_t)a1, v12);
  BOOL result = ZinAneTd<8u>::SetOrReturnDin((uint64_t)a1, v13);
  if (result)
  {
    BOOL result = ZinAneTd<8u>::SetOrReturnDout((uint64_t)a1, v14);
    if (result)
    {
      ZinIrHalH13g::~ZinIrHalH13g(a1);
      int v16 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2);
      ZinAneTd<8u>::SetOutputTranspose((uint64_t)a1, v16);
      int v17 = a2[33];
      if (*((unsigned char *)v17 + 8))
      {
        if (!*((unsigned char *)v17 + 40)) {
          ZinAssertImpl("kernel_group_stride should have value when kernel_stride_enable is set");
        }
        unint64_t v18 = ZinAlignPower2(*((void *)v17 + 4), a3);
        int v19 = a2[33];
        if (!*((unsigned char *)v19 + 24)) {
          ZinAssertImpl("kernel_ocg_stride should have value when kernel_stride_enable is set");
        }
        unint64_t v20 = v18 / a3;
        unint64_t v21 = ZinAlignPower2(*((void *)v19 + 2), a3);
        ZinAneTd<8u>::SetKernelStrideRegisters((uint64_t)a1, v20, v21 / a3);
        int v17 = a2[33];
      }
      ZinAneTd<8u>::SetFillLowerNEFirst((uint64_t)a1, *((unsigned __int8 *)v17 + 2));
      ZinAneTd<1u>::Set1DWinogradMode((uint64_t)a1, *((unsigned __int8 *)a2[33] + 148));
      ZinAneTd<1u>::SetNEHalfWUMode((uint64_t)a1, *((unsigned char *)a2[33] + 149));
      return 1;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleTileDmaSrcConfig(ZinIrHalH13g *a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this)) {
    ZinAssertImpl("Only NE layers allowed\n");
  }
  if (*((void *)this + 12) - *((void *)this + 11) < 0x20uLL)
  {
    uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    uint64_t v37 = 0;
    int v36 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v37, v11);
    if (ZinMemSourceIndexTranslator::GetL2SrcType(this, 0, &v36))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinAneTd<17u>::HandleTileDmaSrcConfig();
      }
LABEL_6:
      unsigned int v12 = 0;
      int v13 = 1;
      goto LABEL_7;
    }
    BOOL v22 = v36 != 0;
    uint64_t v23 = v37;
    uint64_t v24 = *(void *)(*((void *)this + 33) + 96 * v37 + 752);
    if (!v24)
    {
      int v13 = 1;
      unsigned int v12 = 1;
      goto LABEL_7;
    }
    uint64_t v25 = *((void *)this + 25);
    if (v25 && (unint64_t v26 = *((void *)this + 24), v26 <= 1))
    {
      LOBYTE(v34) = v26 == 1;
      BYTE4(v34) = v26 != 1;
      LODWORD(v33) = 1;
      BYTE4(v33) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 304))(v25);
      uint64_t v23 = v37;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    uint64_t v27 = (void *)*((void *)this + (int)v23 + 30);
    if (v27) {
    if (!ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, a1, *((void *)this + 33), v23, v22, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), SBYTE4(v34), v34, SBYTE4(v33), (uint64_t)v27))goto LABEL_6;
    }
    **(void **)(a5 + 128) = v24;
    uint64_t v35 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v35, v28);
    uint64_t v29 = *(void *)(*((void *)this + 33) + 96 * v35 + 752);
    if (v29)
    {
      if (v33 && *((void *)this + 12) - *((void *)this + 11) >= 9uLL)
      {
        uint64_t v30 = (const void *)*((void *)this + (int)v35 + 30);
        if (v30) {
        else
        }
          uint64_t v31 = 0;
        int v13 = 1;
        uint64_t v32 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 1uLL);
        if (!ZinCodegen::SetSecondarySourceDMA<8u>(v32, (uint64_t)a1, *((void *)this + 33), v35, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), SBYTE4(v34), v34, SBYTE4(v33), (uint64_t)v31))goto LABEL_32; {
        uint64_t v29 = *(void *)(*((void *)this + 33) + 96 * v35 + 752);
        }
      }
      int v13 = 0;
      *(void *)(*(void *)(a5 + 128) + 8) = v29;
    }
    else
    {
      int v13 = 0;
    }
LABEL_32:
    unsigned int v12 = 0;
LABEL_7:
    if (v13) {
      return v12;
    }
    else {
      return 1;
    }
  }
  uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<8u>::HandleTileDmaSrcConfig(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleL2Config(uint64_t a1, void *a2, void *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = *(_DWORD *)(a2[8] + 8);
  if (v6 == 85)
  {
    if (!a2[54]) {
      goto LABEL_28;
    }
    uint64_t v10 = a2[17];
    int v9 = *(_DWORD *)(v10 + 376);
    int v11 = (_DWORD *)a3[183];
    unsigned int v12 = (_DWORD *)a3[184];
    if (v11 != v12)
    {
      while (*v11 != v9)
      {
        if (++v11 == v12)
        {
          int v11 = (_DWORD *)a3[184];
          break;
        }
      }
    }
    if (v11 == v12 || v9 == 4 || v9 == 2)
    {
      BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v13) {
        ZinAneTd<8u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      return 0;
    }
    int v23 = *(_DWORD *)(v10 + 380);
    uint64_t v22 = a1;
    goto LABEL_27;
  }
  if (v6 == 90)
  {
    int v21 = *(_DWORD *)(*(void *)(a2[57] + 64) + 12);
    if (v21 == 8)
    {
      uint64_t v22 = a1;
      int v9 = 4;
    }
    else
    {
      if (v21 != 7) {
        goto LABEL_28;
      }
      uint64_t v22 = a1;
      int v9 = 2;
    }
    goto LABEL_26;
  }
  if (v6 != 89) {
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)(a2[54] + 64);
  int v8 = *(_DWORD *)(v7 + 104);
  if (!v8)
  {
    if (*(_DWORD *)(v7 + 100) == 2)
    {
      int v9 = 2;
      goto LABEL_24;
    }
LABEL_41:
    BOOL v63 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v63) {
      ZinAneTd<8u>::HandleL2Config(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    return 0;
  }
  if (v8 != 1)
  {
    int v9 = *(_DWORD *)(v7 + 100);
    goto LABEL_24;
  }
  if (*(_DWORD *)(v7 + 100) != 4) {
    goto LABEL_41;
  }
  int v9 = 4;
LABEL_24:
  uint64_t v22 = a1;
LABEL_26:
  int v23 = 0;
LABEL_27:
  ZinAneTd<8u>::SetPaddingMode(v22, v9, v23);
LABEL_28:
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2[33], 0);
  ZinAneTd<8u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<8u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v39) {
      ZinAneTd<1u>::HandleNEControlCommon(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    return 0;
  }
  uint64_t v25 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2[33]);
  if (!L2WrSymbol)
  {
    BOOL v47 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v47) {
      ZinAneTd<8u>::HandleL2Config(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    return 0;
  }
  uint64_t v27 = (uint64_t)L2WrSymbol;
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    BOOL v55 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v55) {
      ZinAneTd<17u>::HandleL2Config(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    return 0;
  }
  ZinAneTd<8u>::SetL2ResultType(a1, *(_DWORD *)(a2[33] + 1632));
  ZinAneTd<8u>::SetL2BfrMode(a1, *(unsigned __int8 *)(a2[33] + 312));
  ZinAneTd<8u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v25 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(void *)(a2[33] + 320));
  uint64_t v28 = a2[33];
  if ((*(_DWORD *)(v28 + 1632) - 1) > 1)
  {
    unsigned int v30 = 1;
  }
  else
  {
    uint64_t v29 = ZinTensorDescriptorDmaInterleave(*(void *)(v28 + 944) + 208);
    unsigned int v30 = v29;
    if (!v29)
    {
      BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v31) {
        ZinAneTd<6u>::HandleL2Config(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      return 0;
    }
  }
  ZinAneTd<8u>::SetL2ResultInterleave(a1, v30);
  ZinAneTd<8u>::SetL2ResultBaseAddr(a1, *(void *)(v27 + 16) % a3[51] / a3[52]);
  ZinAneTd<8u>::SetL2ResultChannelStride(a1, *(_DWORD *)(a2[33] + 280));
  long long v77 = *(_OWORD *)(v27 + 520);
  __int16 OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v77);
  __int16 NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v77);
  ZinAneTd<8u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<8u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<8u>(a1, v27) & 1) == 0) {
    return 0;
  }
  uint64_t v76 = 0;
  BOOL L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v25 + 48), *(const ZinTensorDimensions **)(a2[33] + 272), *(unsigned int *)(*(void *)(a1 + 1296) + 396), &v76, v73);
  if (L2RowStride)
  {
    ZinAneTd<8u>::SetL2ResultRowStride(a1, v76);
    ZinAneTd<8u>::SetL2ResultDepthStride(a1, *(_DWORD *)(a2[33] + 296));
    ZinAneTd<8u>::SetL2ResultGroupStride(a1, *(_DWORD *)(a2[33] + 288));
    if (a2[47]) {
      *(_DWORD *)(a1 + 868) |= 1u;
    }
  }
  return L2RowStride;
}

BOOL ZinAneTd<8u>::HandleNEConfig(uint64_t a1, uint64_t a2, const ZinIrHalParameters *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v7 = (ZinIrKernel **)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 136);
  if (!v6)
  {
    BOOL KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
    int v9 = 0;
    int v10 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = *(unsigned __int8 *)(v6 + 448);
  int v9 = (v8 >> 3) & 1;
  int v10 = (v8 >> 4) & 1;
  BOOL KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
  if ((v8 & 4) == 0)
  {
LABEL_7:
    BOOL ShouldUseSparseBinaryForCompression = 0;
    BOOL v16 = 0;
    int v14 = 4;
    goto LABEL_8;
  }
  unsigned int v12 = *v7;
  BOOL v13 = *(unsigned __int8 **)(*((void *)*v7 + 100) + 40);
  if (!v13)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<8u>::HandleNEConfig(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  int v14 = *((_DWORD *)v12 + 44);
  int v15 = *v13;
  BOOL v16 = v15 != 0;
  if (v15)
  {
    BOOL ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v12);
    unsigned int v12 = *v7;
  }
  else
  {
    BOOL ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v12))
  {
    int v33 = ZinLog2OfPow2(*((void *)*v7 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize(a1, v33);
  }
LABEL_8:
  ZinAneTd<8u>::SetKernelPalettizedEn(a1, v14);
  ZinAneTd<8u>::SetKernelPalettizedBits(a1, v14);
  ZinAneTd<8u>::SetKernelSparseFmt(a1, v16);
  ZinAneTd<8u>::SetKernelSparseBinary(a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<8u>::SetGroupKernelReuse(a1, KernelGroupReuse);
  int v65 = 0;
  int MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v65);
  BOOL result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<8u>::SetOpMode(a1, v65);
    int MacCfgKernelMode = GetMacCfgKernelMode((const ZinNELayer *)a2, a3);
    ZinAneTd<8u>::SetKernelMode(a1, MacCfgKernelMode);
    BOOL MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<8u>::SetPassthroughEnable(a1, MacCfgPassthroughEnable);
    int v64 = 0;
    int KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v65, &v64);
    BOOL result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<8u>::SetKernelFmt(a1, v64);
      uint64_t v23 = *(void *)(a2 + 420);
      if ((v23 & 0xFF00000000) == 0) {
        ZinAssertImpl("Binary point is missing from NE layer.");
      }
      ZinAneTd<8u>::SetNEBinaryPoint(a1, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2) & 1) == 0)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ZinAneTd<8u>::HandleNEConfig(result, v34, v35, v36, v37, v38, v39, v40);
        return 0;
      }
      uint64_t v24 = *(void *)(a2 + 392);
      if (v24) {
        int v25 = *(_DWORD *)(v24 + 192);
      }
      else {
        int v25 = 0;
      }
      ZinAneTd<8u>::SetNENonLinearMode(a1, v25, (uint64_t)a3 + 1536);
      uint64_t v41 = *(ZinDeQuantLayer **)(a2 + 408);
      if (v41)
      {
        int ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v41);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset(a1, 1, ScalarZeroPoint);
      }
      if (v9)
      {
        unint64_t v43 = *(void *)((char *)*v7 + 180);
        char v44 = 1;
      }
      else
      {
        unint64_t v43 = 0;
        char v44 = 0;
      }
      ZinAneTd<8u>::SetNEPostScale(a1, v43, v44);
      if (v10)
      {
        unint64_t v45 = *(void *)((char *)*v7 + 188);
        char v46 = 1;
      }
      else
      {
        char v46 = 0;
        unint64_t v45 = 0;
      }
      ZinAneTd<8u>::SetNEBias(a1, v45, v46);
      if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 85) {
        uint64_t v47 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      }
      else {
        uint64_t v47 = 0;
      }
      ZinAneTd<8u>::SetNEMatrixVectorBias(a1, (ZinIrKernel **)(a2 + 136), v47);
      if (*v7) {
        int HasZeroPoint = ZinIrKernel::HasZeroPoint(*v7);
      }
      else {
        int HasZeroPoint = 0;
      }
      ZinAneTd<4u>::SetKernelAsymQuantEn(a1, HasZeroPoint);
      v50 = *v7 && (uint64_t v49 = (unsigned __int8 *)*((void *)*v7 + 100)) != 0 && *v49 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros(a1, v50);
      int v51 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
      uint64_t v52 = *(void *)(a2 + 136);
      if (v51)
      {
        if (*(_DWORD *)(v52 + 408) != 1) {
          ZinAssertImpl("Tensor kernel is not using aligned format!");
        }
        BOOL v53 = 0;
      }
      else if (v52)
      {
        BOOL v53 = *(_DWORD *)(v52 + 408) != 1;
      }
      else
      {
        BOOL v53 = 1;
      }
      ZinAneTd<8u>::SetKernelAlignmentFormat(a1, v53);
      ZinAneTd<4u>::SetDoubleInt8Enable(a1, *(unsigned __int8 *)(*(void *)(a2 + 264) + 1));
      ZinAneTd<8u>::SetKernelSparseBlockSize(a1, 0);
      uint64_t v54 = *(ZinIrKernel **)(a2 + 136);
      if (v54 && ZinIrKernel::HasVectorPalettizedWeight(v54) && **(unsigned char **)(*((void *)*v7 + 100) + 40))
      {
        char v55 = ZinLog2OfPow2(*((void *)*v7 + 52));
        ZinAneTd<8u>::SetKernelSparseBlockSize(a1, v55);
      }
      if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 89)
      {
        unsigned int v56 = *(_DWORD *)(*(void *)(*(void *)(a2 + 432) + 64) + 104);
        ZinAneTd<8u>::SetArgOutputSelect(a1, v56);
        ZinAneTd<8u>::SetMaxPoolMode(a1, v56);
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, a2)) {
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<8u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinAneTd<8u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 64) + 8) != 93) {
    return 1;
  }
  uint64_t v3 = *(void *)(*(void *)(a2 + 432) + 64);
  BOOL v4 = *(void **)(v3 + 48);
  if (v4 == (void *)(v3 + 56))
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      unint64_t v6 = v4[4];
      if (v6 >= 8) {
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          BOOL v4 = v8;
        }
        while (!v9);
      }
      v5 |= 1 << v6;
      BOOL v4 = v8;
    }
    while (v8 != (void *)(v3 + 56));
  }
  ZinAneTd<8u>::SetRcasKeyMask(a1, v5);
  ZinAneTd<8u>::SetRcasMode(a1, *(_DWORD *)(v3 + 12));
  ZinAneTd<8u>::SetRcasSenseBit(a1, *(_DWORD *)(v3 + 24));
  ZinAneTd<8u>::SetRcasSenseAxis(a1, *(_DWORD *)(v3 + 20));
  ZinAneTd<8u>::SetRcasCmpBit(a1, *(_DWORD *)(v3 + 40));
  int v10 = *(_DWORD *)(v3 + 16);
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t v11 = a1;
      unsigned int v12 = 7;
    }
    else
    {
      if (v10 != 2) {
        return 1;
      }
      uint64_t v11 = a1;
      unsigned int v12 = 9;
    }
    ZinAneTd<8u>::SetMaxPoolMode(v11, v12);
    return 1;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<8u>::HandleNEConfigRCASCfg(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleNEConfigRoundCfg(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 584))(a2))
  {
    BOOL v4 = *(int **)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 576))(a2) + 64);
    ZinAneTd<8u>::SetStochasticRoundMode(a1, v4[3]);
    uint64_t v5 = 0;
    v8[0] = ZinIrStochasticRoundInfo::GetSeeds((ZinIrStochasticRoundInfo *)v4);
    v8[1] = v6;
    do
    {
      ZinAneTd<8u>::SetStochasticRoundSeed(a1, *((_DWORD *)v8 + v5), v5);
      ++v5;
    }
    while (v5 != 4);
    ZinAneTd<8u>::SetStochasticRoundIntegerBits(a1, v4[8]);
  }
  return 1;
}

BOOL ZinAneTd<8u>::HandleTileDmaDstConfig(int a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this)) {
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  }
  BOOL v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v10 = *((void *)this + 32);
  if (v10) {
    BOOL v11 = *(_DWORD *)(*(void *)(v10 + 64) + 8) == 102;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v12 = *((void *)this + 33);
  if ((*(_DWORD *)(v12 + 1632) - 1) > 1) {
    return 1;
  }
  uint64_t v13 = *(void *)(a5 + 200);
  uint64_t v14 = *(void *)(a3 + 528);
  unint64_t v15 = *(void *)(a3 + 560);

  return ZinCodegen::SetResultDMA<8u>(v9, v13, v12, a4, v14, v15, v11);
}

uint64_t ZinAneTd<8u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t *a2, uint64_t *a3, ZinIrMemoryPool *a4, uint64_t a5)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, *(int *)(*a3 + 8));
  ZinAneTd<8u>::InitializeKernelDmaSrcConfig(a1);
  ZinAneTd<8u>::HandleKernelDmaSrcConfigAligned((_DWORD *)a1, (ZinIrOpLayer *)a2, a3, a4);
  char v15 = 0;
  ZinAneTd<8u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, a5, a2 + 17, &v15);
  if (!v15) {
    return 1;
  }
  ZinAneTd<17u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, (uint64_t)a3, a5);
  unsigned __int8 v14 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock((const ZinIrOpLayer *)a2, a4, &v14)) {
    return 0;
  }
  if (*(unsigned char *)(a3[1] + 378)) {
    BOOL v11 = *(unsigned char *)(a5 + 24) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v12 = *(void *)(a5 + 8) - 24;
  uint64_t v10 = 1;
  ZinAneTdHw_v8::AddRelocInfo((uint64_t *)(a1 + 8), v12, 5444, v14, 1, 1, v11, 0);
  if (*(unsigned char *)(*a3 + 1271)) {
    ZinAneTd<8u>::SetKernelDmaSrcConfigPrefetch(a1, a2[33] + 1264);
  }
  return v10;
}

uint64_t ZinAneTd<8u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  if (!*(void *)(a2 + 264))
  {
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v16) {
      ZinAneTd<8u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    CFStringRef v15 = @"CodeGenerationFailure";
    goto LABEL_10;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  unsigned __int8 v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader(a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    CFStringRef v15 = @"InvalidHWHeader";
    goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
  {
    if (!HandlePELayer<8u>((ZinIrOpLayer *)a2, a3, a4, **a6, a5))
    {
      CFStringRef v15 = @"PEConfigFailure";
LABEL_10:
      ZinIrNetworkStatus::SetError(a7, v15);
      return 0;
    }
  }
  else
  {
    if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2)) {
      ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
    }
    if (!HandleNELayer<8u>((const ZinIrOpLayer *)a2, a3, (ZinAneInstruction *)a4, (int **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0; {
  }
    }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, **a6, a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a2);
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 352))(a1, a2, a6[2]);
      if (ZinAneTd<8u>::CodegenIntermediateMCacheDSIDs(a1, a2, *a6, (uint64_t)a6[2]))
      {
        if (ZinAneTd<8u>::CreateSeedRelocations(a1, (ZinIrOpLayer *)a2, (*a6)[1], (uint64_t)a6[2]))
        {
          if (*(unsigned char *)(a4 + 198)) {
            *(_DWORD *)(*(void *)(a4 + 200) + 44) |= 0x80u;
          }
          return 1;
        }
        else
        {
          uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result)
          {
            ZinAneTd<17u>::HandleEngineLayer();
            return 0;
          }
        }
      }
      else
      {
        uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result)
        {
          ZinAneTd<17u>::HandleEngineLayer();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::HandleTextureConfig(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a3[25])
  {
    uint64_t v5 = a3[24];
    if (v5)
    {
      if (v5 != 1) {
        return 1;
      }
      uint64_t v6 = a3 + 31;
    }
    else
    {
      uint64_t v6 = a3 + 30;
    }
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (v5)
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        unsigned int v8 = __p[0];
        uint64_t v9 = *((void *)__p[0] + 1);
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        unsigned int v8 = __p[0];
        uint64_t v9 = *(void *)__p[0];
      }
      long long v10 = *(_OWORD *)(v9 + 64);
      v24[0] = *(_OWORD *)(v9 + 48);
      v24[1] = v10;
      uint64_t v25 = *(void *)(v9 + 80);
      __p[1] = v8;
      operator delete(v8);
      if (!ZinAneTd<8u>::SetTextureExtMax(a1, v24)) {
        ZinAssertImpl("Codegen Error: Invalid TexExt XY/GZ is given");
      }
      *(_DWORD *)(a1 + 784) |= 0x100000u;
      LODWORD(__p[0]) = *(_DWORD *)(v7 + 192);
      ZinAneTd<8u>::SetTextureMode(a1, __p);
      BOOL v11 = *(void **)(v7 + 196);
      uint64_t v21 = *(void *)(v7 + 232);
      __p[0] = v11;
      ZinAneTd<8u>::SetTextureNormalization(a1, (int *)__p, (int *)&v21);
      __p[0] = *(void **)(v7 + 204);
      ZinAneTd<8u>::SetTextureFilter(a1, __p);
      LOWORD(__p[0]) = *(_WORD *)(v7 + 212);
      ZinAneTd<8u>::SetTextureWrap(a1, (unsigned __int8 *)__p);
      ZinAneTd<8u>::SetTextureIndexTensorInterleave(a1, *(void *)(v7 + 224));
      ZinAneTd<8u>::SetTextureBackgroundEn(a1, *(unsigned __int8 *)(v7 + 214));
      if (*(unsigned char *)(v7 + 214)) {
        ZinAneTd<8u>::SetTextureBackgroundVal(a1, *(_WORD *)(v7 + 216));
      }
      *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)(a1 + 690)) & 0xF) << 8);
      if (*(unsigned char *)(a2 + 1253) && *(unsigned char *)(v7 + 215))
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 1);
        ZinAneTd<8u>::SetL2Src1DmaFormat(a1, 3);
      }
      else
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 0);
        *(_DWORD *)(a1 + 872) = *(_DWORD *)(a1 + 872) & 0xFFFFFF3F | ((*(_DWORD *)(a1 + 688) & 3) << 6);
      }
      int v12 = *(_DWORD *)(v7 + 192);
      if ((v12 - 1) <= 1)
      {
        *(_OWORD *)__p = *(_OWORD *)(v7 + 240);
        int v23 = *(_DWORD *)(v7 + 256);
        ZinAneTd<8u>::SetTextureSrcPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 260);
        int v23 = *(_DWORD *)(v7 + 276);
        ZinAneTd<8u>::SetTextureIndPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 280);
        int v23 = *(_DWORD *)(v7 + 296);
        ZinAneTd<8u>::SetTextureIdxPermute(a1, __p);
        int v12 = *(_DWORD *)(v7 + 192);
      }
      if ((v12 - 3) <= 1)
      {
        uint64_t v13 = *(void *)(v7 + 264);
        uint64_t v14 = *(void *)(v7 + 272);
        if (*(void *)(a2 + 2080) < (unint64_t)((v14 - v13) >> 5)) {
          ZinAssertImpl("Codegen Error: Invalid Texture CropCfg");
        }
        if (v14 != v13)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          do
          {
            ZinAneTd<8u>::SetTextureCropCfg(a1, (_DWORD *)(v13 + v15), v16++);
            uint64_t v13 = *(void *)(v7 + 264);
            v15 += 32;
          }
          while (v16 < (*(void *)(v7 + 272) - v13) >> 5);
        }
        uint64_t v17 = *(void *)(v7 + 240);
        uint64_t v18 = *(void *)(v7 + 248);
        if (*(void *)(a2 + 2072) < (unint64_t)((v18 - v17) >> 2)) {
          ZinAssertImpl("Codegen Error: Invalid Texture CropCoeff");
        }
        if (v18 != v17)
        {
          unint64_t v19 = 0;
          do
          {
            ZinAneTd<8u>::SetTextureCropCoeff(a1, *(_DWORD *)(v17 + 4 * v19), v19);
            ++v19;
            uint64_t v17 = *(void *)(v7 + 240);
          }
          while (v19 < (*(void *)(v7 + 248) - v17) >> 2);
        }
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 288);
        ZinAneTd<8u>::SetTextureGroupValue(a1, __p);
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 292);
        ZinAneTd<8u>::SetTextureDepthValue(a1, __p);
        ZinAneTd<8u>::SetTextureCropBatchSplit(a1, *(unsigned __int8 *)(v7 + 296));
      }
    }
  }
  return 1;
}

uint64_t ZinAneTd<8u>::HandleL2Hazards(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayer *a4, void *a5)
{
  uint64_t v21 = a4;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a5, &v21)[3];
  uint64_t v7 = (unsigned __int8 *)*((void *)a4 + 33);
  if (*((void *)a4 + 12) != *((void *)a4 + 11))
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a4, v8);
      if ((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(void *)a4 + 200))(a4, InputTensor)) {
        goto LABEL_21;
      }
      if (!ZinIrOpLayer::IsANELayer(a4)) {
        goto LABEL_21;
      }
      unsigned int v23 = 0;
      if (ZinMemSourceIndexTranslator::GetL2SrcType(a4, v8, (int *)&v23)) {
        goto LABEL_21;
      }
      L2SrcDep = (_DWORD *)ZinMirL2Config::GetL2SrcDep((uint64_t)(v7 + 120), v23);
      LODWORD(v21) = *L2SrcDep;
      std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v22, (uint64_t)(L2SrcDep + 2));
      if (v23 > 2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v11 = dword_211EF59D8[v23];
        uint64_t v12 = dword_211EF59E4[v23];
        uint64_t v13 = dword_211EF59F0[v23];
      }
      if (v21) {
        break;
      }
      if (v23 <= 2) {
        goto LABEL_15;
      }
LABEL_16:
      uint64_t v20 = 0;
      if (GetProgrammedDependencyOffsetAndDimension((uint64_t)v22, &v20, (_DWORD *)&v20 + 1))
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
        return 0;
      }
      (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), v12, v20);
      if ((HIDWORD(v20) - 1) >= 3) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = HIDWORD(v20);
      }
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), v13, v14);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
LABEL_21:
      if (++v8 >= (uint64_t)(*((void *)a4 + 12) - *((void *)a4 + 11)) >> 3) {
        goto LABEL_22;
      }
    }
    if (v21 != 2 && v21 != 1 || v23 >= 3) {
      goto LABEL_16;
    }
LABEL_15:
    (*(void (**)(void, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), v11);
    goto LABEL_16;
  }
LABEL_22:
  if (!*(unsigned char *)(v6 + 188))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 15, v7[328]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 16, v7[329]);
    if (v7[330]) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v7[332];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 41, v15);
    if (v7[331]) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v7[333];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 42, v16);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 17, v7[334]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 18, v7[335]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 19, v7[336]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 20, v7[337]);
    if (v7[338]) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v7[340];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 43, v17);
    if (v7[339]) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v7[341];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 44, v18);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 21, v7[342]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 22, v7[343]);
  }
  return 1;
}

void sub_2111667F0(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unint64_t ZinAneTd<8u>::SetRAWdmaDependencySrc1(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  ZinAneTd<8u>::SetTileDmaSrc1DependencyMode(a1, a2);
  if (a2 == 1) {
    ZinAneTd<8u>::SetTileDmaSrc1DependencyOffset(a1, a4);
  }

  return ZinAneTd<8u>::SetTileDmaSrc1DependencyInterval(a1, a3);
}

unint64_t ZinAneTd<8u>::SetRAWdmaDependencySrc2(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  ZinAneTd<8u>::SetTileDmaSrc2DependencyMode(a1, a2);
  if (a2 == 1) {
    ZinAneTd<8u>::SetTileDmaSrc2DependencyOffset(a1, a4);
  }

  return ZinAneTd<8u>::SetTileDmaSrc2DependencyInterval(a1, a3);
}

uint64_t ZinAneTd<8u>::InitializeKernelDmaSrcConfig(uint64_t a1)
{
  for (uint64_t i = 0; i != 16; ++i)
    ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaCacheHint(a1, 1, i);
  ZinAneTd<8u>::SetKernelDmaSrcPostScaleDmaCacheHint(a1, 1);
  ZinAneTd<8u>::SetKernelDmaSrcBiasDmaCacheHint(a1, 1);
  ZinAneTd<8u>::SetKernelDmaSrcPaletteLutDmaCacheHint(a1, 1);

  return ZinAneTd<8u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(a1, 1);
}

void ZinAneTd<8u>::HandleKernelDmaSrcConfigAligned(_DWORD *a1, ZinIrOpLayer *a2, void *a3, ZinIrMemoryPool *a4)
{
  uint64_t v4 = *((void *)a2 + 17);
  if (v4 && *(void *)(v4 + 800))
  {
    unsigned __int8 v41 = 0;
    if (ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a2, a4, &v41)) {
      ZinAssertImpl("Cannot get barid for kernels");
    }
    unint64_t v39 = *(void *)(*a3 + 528);
    unint64_t v8 = (long long *)*((void *)a2 + 17);
    if (*(unsigned char *)(a3[1] + 132))
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v40.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      ZinIrKernel::GetFinalHash((ZinIrKernel *)v8, &v42);
      long long v10 = std::string::insert(&v42, 0, "K", 1uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v12 = *(void **)(v4 + 800);
    uint64_t v13 = v12[1];
    BOOL v14 = v13 != 0;
    if (v13)
    {
      int v15 = ZinDivRoundUp(v13, v39);
      uint64_t v16 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      uint64_t v18 = &v42;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, size + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v19 = &v40;
        }
        else {
          unint64_t v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v18, v19, size);
      }
      strcpy((char *)v18 + size, "_actlut");
      ZinAneTd<8u>::SetAlignedKernelNonLinearLut((uint64_t)a1, v16, (uint64_t)&v42, v15);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v20 = v12[2];
    if (v20)
    {
      int v21 = ZinDivRoundUp(v20, v39);
      uint64_t v22 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v40.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v23 + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v42;
      }
      else {
        uint64_t v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v23)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v25 = &v40;
        }
        else {
          uint64_t v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_pallut");
      ZinAneTd<8u>::SetAlignedKernelPaletteLut((uint64_t)a1, v22, (uint64_t)&v42, v21);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      BOOL v14 = 1;
    }
    uint64_t v26 = v12[3];
    if (v26)
    {
      int v27 = ZinDivRoundUp(v26, v39);
      uint64_t v28 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = v40.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v29 + 6);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v42;
      }
      else {
        uint64_t v30 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v29)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v40;
        }
        else {
          uint64_t v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v30, v31, v29);
      }
      strcpy((char *)v30 + v29, "_scale");
      ZinAneTd<8u>::SetAlignedKernelPostScale(a1, v28, (uint64_t)&v42, v27);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      uint64_t v32 = v12[4];
      if (!v32) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v32 = v12[4];
      if (!v32)
      {
        if (!v14)
        {
LABEL_72:
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_68:
        ZinAneTd<8u>::SetKernelDmaSrcEnable((uint64_t)a1);
        a1[11] = a1[11] & 0xFFFFFFDF | (32 * **(unsigned __int8 **)(*(void *)(v4 + 800) + 40));
        if (*(_DWORD *)(*((void *)a2 + 17) + 176))
        {
          uint64_t v38 = *(void *)(*(void *)(v4 + 800) + 40);
          if (!*(unsigned char *)v38) {
            ZinAneTd<8u>::SetAlignedCoeffSizePerCh((uint64_t)a1, *(void *)(v38 + 8));
          }
        }
        ZinAneTd<8u>::SetAlignedKernelRelocationCommand((uint64_t)a1, v12, v41, (const void **)&v40.__r_.__value_.__l.__data_, *(unsigned __int8 *)(a3[1] + 378));
        goto LABEL_72;
      }
    }
    int v33 = ZinDivRoundUp(v32, v39);
    uint64_t v34 = v41;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v35 + 5);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if (v35)
    {
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v40;
      }
      else {
        uint64_t v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, "_bias");
    ZinAneTd<8u>::SetAlignedKernelBias(a1, v34, (uint64_t)&v42, v33);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    goto LABEL_68;
  }
}

void sub_211166DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::HandleKernelDmaSrcConfigCoeffBuffer(uint64_t result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  if (*a5 && (uint64_t v12 = *(void *)(v11 + 800)) != 0)
  {
    char v29 = 0;
    uint64_t v28 = *(void *)(v11 + 800);
    uint64_t v13 = *(void *)(v12 + 40);
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v13 = 0;
    char v29 = 1;
  }
  if (v11) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(v10 + 528);
    uint64_t v18 = 40;
    do
    {
      if (v15
        && (ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]),
            MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v16))
      {
        uint64_t v20 = *(void *)(*(void *)(v13 + 32) + v18);
        BOOL v21 = v20 != 0;
        *a6 |= v21;
        ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
        if (v20)
        {
          ZinAneTd<8u>::SetKernelDmaSrcEnable(v9);
          uint64_t v22 = *(void *)(v13 + 32);
          if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v13 + 40) - v22) >> 3) <= v16) {
            ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
          }
          if (*(unsigned char *)(*a3 + 1255))
          {
            if (*((unsigned char *)a2[33] + 2))
            {
              if ((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2))
              {
                unsigned int v23 = ZinDivRoundUp(*((void *)a2[33] + 6), v17);
                ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
                LODWORD(v24) = ZinDivRoundUp(*(void *)(*((void *)a2[33] + 7) + 8 * v16), v17);
                goto LABEL_32;
              }
              uint64_t v22 = *(void *)(v13 + 32);
            }
            unsigned int v26 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
            ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
            if ((v29 & 1) != 0 || !*(unsigned char *)(v28 + 1)) {
              unint64_t v27 = *(void *)(*(void *)(v13 + 32) + v18 - 40);
            }
            else {
              unint64_t v27 = **(void **)(v13 + 32);
            }
            unint64_t v24 = v27 / v17;
LABEL_32:
            ZinAneTd<8u>::SetKernelDmaSrcCoeffBaseOffset(v9, v24, v16);
          }
          else
          {
            unsigned int v25 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
            ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v25, v16);
          }
          uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
          goto LABEL_23;
        }
      }
      else
      {
        ZinAneTd<8u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
      }
      uint64_t result = ZinAneTd<8u>::SetKernelDmaSrcCoeffMemBufferSize(v9, 1u, v16);
LABEL_23:
      ++v16;
      v18 += 56;
    }
    while (v16 < *(unsigned int *)(*a3 + 8));
  }
  return result;
}

BOOL HandlePELayer<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(ZinIrHalH13g **)(a3 + 200);
  uint64_t v10 = (void *)*((void *)a1 + 33);
  SetPatchSettings<8u>((uint64_t)v9, (uint64_t)(v10 + 15));
  unint64_t v11 = (*(uint64_t (**)(ZinIrOpLayer *, void))(*(void *)a1 + 368))(a1, 0);
  ZinAneTd<8u>::SetOrReturnNumGroups((uint64_t)v9, v11);
  if ((PECodegenUtils::HandlePrimarySourceTensor<8u>(a1, a4, a5, v9) & 1) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleSecondarySourceTensor<8u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleTernarySourceTensor<8u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  uint64_t v12 = *((void *)a1 + 32);
  if (v12) {
    BOOL v13 = *(_DWORD *)(*(void *)(v12 + 64) + 8) == 102;
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t v15 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  if (PECodegenUtils::HandleOutputTensor<8u>(v15, (uint64_t)v10, (void *)a4, a5, (uint64_t)v9, v13))
  {
    if (*(unsigned char *)(a4 + 1584))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 576))(a1))
      {
        unint64_t v16 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 584))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v16);
        ZinAneTd<7u>::SetQuantizationSrc1InputOffset();
      }
      if (*(unsigned char *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 592))(a1))
      {
        unint64_t v17 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 600))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v17);
        ZinAneTd<7u>::SetQuantizationSrc2InputOffset();
      }
    }
    switch(*(_DWORD *)(*((void *)a1 + 8) + 8))
    {
      case 'Q':
        char v18 = PECodegenUtils::HandlePEElementWiseLayer<8u>(a4, a1, v9);
        goto LABEL_29;
      case 'R':
        if (*(unsigned char *)(a3 + 188))
        {
          char v18 = PECodegenUtils::HandlePESecureFlushLayer<8u>((uint64_t)v9, *(_DWORD *)(a3 + 192));
LABEL_29:
          char v19 = v18;
LABEL_30:
          if (*(unsigned char *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 672))(a1))
          {
            uint64_t v20 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 768))(a1);
            ZinDeQuantLayer::GetScalarZeroPoint(v20);
            ZinAneTd<7u>::SetPEOutputQuantization();
          }
          if (v19)
          {
            if (!*(unsigned char *)(a4 + 1252))
            {
              if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 568))(a1))
              {
                ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 0);
                ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 1);
              }
              ZinIrHalH13g::~ZinIrHalH13g(v9);
            }
            **(void **)(a3 + 128) = v10[94];
            *(void *)(*(void *)(a3 + 128) + 8) = v10[106];
            *(void *)(a3 + 152) = v10[118];
            return 1;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          HandlePELayer<17u>();
        }
        else
        {
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          HandlePELayer<8u>(result, v21, v22, v23, v24, v25, v26, v27);
        }
        break;
      case 'S':
        char v18 = PECodegenUtils::HandlePEPoolLayer<8u>(a4, a1, (uint64_t)v9);
        goto LABEL_29;
      case 'T':
        char v18 = PECodegenUtils::HandlePEGOCLayer<8u>(a4, (uint64_t)a1, v9);
        goto LABEL_29;
      default:
        char v19 = 0;
        goto LABEL_30;
    }
    return 0;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    HandlePELayer<17u>();
    return 0;
  }
  return result;
}

BOOL HandleNELayer<8u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, int **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  BOOL v13 = (ZinIrHalH13g *)*((void *)a3 + 25);
  unsigned __int8 v32 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v32)
    || (unsigned __int8 v31 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v31)))
  {
LABEL_3:
    CFStringRef v14 = @"CodeGenerationFailure";
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  uint64_t v16 = *((void *)a1 + 17);
  if (v16 && *(void *)(v16 + 800))
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    unint64_t v17 = *(void **)(*((void *)a1 + 17) + 800);
    if (v17[1]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[2]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[4]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[3]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
  }
  if (ZinAneInstruction::HandleCommonConfig(a3, a1, (const ZinIrHalParameters *)*a4, a7))
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int **, ZinIrMemoryPool *, ZinAneInstruction *))(*(void *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"KernelDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(*(void *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *))(**((void **)a3 + 25) + 256))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"L2AllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *))(**((void **)a3 + 25) + 264))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"NEConfigFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(**((void **)a3 + 25) + 304))(*((void *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMADestinationAllocationFailure";
      goto LABEL_4;
    }
    if (!ZinAneTd<8u>::ValidateOCGSizes(v13, (uint64_t)a1, *a4))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      goto LABEL_3;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    if ((*((_DWORD *)v13 + 127) & 3) == 3
      || (unsigned int v18 = *((_DWORD *)v13 + 266),
          int v30 = dword_211EF5A14[*((_DWORD *)v13 + 127) & 3],
          int v19 = *((_DWORD *)v13 + 265) & 3,
          v19 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    int v20 = (char)(v18 >> 5) >> 3;
    int v21 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v19, &v30);
    unsigned int v22 = *((_DWORD *)v13 + 269);
    if (ZinIrOpLayer::IsNELayer(a1) && v21 + v20 + (HIWORD(v22) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    uint64_t v23 = (ZinIrKernel *)*((void *)a1 + 17);
    if (v23)
    {
      if (ZinIrKernel::HasBias(v23))
      {
        uint64_t v24 = *((void *)a1 + 17);
        if (*(void *)(v24 + 576))
        {
          uint64_t v25 = (ZinDynamicRange **)(v24 + 576);
          double v26 = ldexp(1.0, v21 + v20 + ((int)(*((_DWORD *)v13 + 268) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v25, v26, v27, v28, v29))
          {
            ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              HandleNELayer<17u>();
            }
            return 0;
          }
        }
      }
    }
    if (!*((unsigned char *)*a4 + 1243) || (ZinAneTd<8u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0) {
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::CodegenIntermediateMCacheDSIDs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  int v8 = *(unsigned __int8 *)(a3[1] + 130);
  uint64_t v9 = *(_DWORD **)(a2 + 264);
  int v10 = v9[358];
  if (v10 == 2) {
    goto LABEL_16;
  }
  int DSIDFromPriorityHalAndSecureMode = GetDSIDFromPriorityHalAndSecureMode(v10, v7, v8 != 0);
  ZinAneTd<8u>::SetTileDmaSrc1DataSetId(a1, DSIDFromPriorityHalAndSecureMode);
  if (*(unsigned char *)(v7 + 1248))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
    int v12 = *(_DWORD *)(*(void *)(a2 + 264) + 1432);
    if (v12 == 1)
    {
      if (*(unsigned char *)(a4 + 10))
      {
        uint64_t v13 = *(unsigned __int16 *)(a4 + 8);
        goto LABEL_13;
      }
    }
    else
    {
      if (v12)
      {
        uint64_t v13 = 0;
        goto LABEL_13;
      }
      if (*(unsigned char *)(a4 + 6))
      {
        uint64_t v13 = *(unsigned __int16 *)(a4 + 4);
LABEL_13:
        ZinAneTdHw_v8::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 4928, v13, 0, 0, 0, 0);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = *(_DWORD **)(a2 + 264);
        goto LABEL_16;
      }
    }
    ZinAssertImpl("Missing Bar for MCache");
  }
  uint64_t v9 = *(_DWORD **)(a2 + 264);
  if (!DSIDFromPriorityHalAndSecureMode && v9[350] == 2) {
    return 0;
  }
LABEL_16:
  int v14 = v9[359];
  if (v14 != 2)
  {
    int v15 = GetDSIDFromPriorityHalAndSecureMode(v14, v7, v8 != 0);
    ZinAneTd<8u>::SetTileDmaSrc2DataSetId(a1, v15);
    if (*(unsigned char *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
      int v16 = *(_DWORD *)(*(void *)(a2 + 264) + 1436);
      if (v16 == 1)
      {
        if (*(unsigned char *)(a4 + 10))
        {
          uint64_t v17 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_28;
        }
      }
      else
      {
        if (v16)
        {
          uint64_t v17 = 0;
          goto LABEL_28;
        }
        if (*(unsigned char *)(a4 + 6))
        {
          uint64_t v17 = *(unsigned __int16 *)(a4 + 4);
LABEL_28:
          ZinAneTdHw_v8::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 4929, v17, 0, 0, 0, 0);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_31;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    uint64_t v9 = *(_DWORD **)(a2 + 264);
    if (!v15 && v9[355] == 2) {
      return 0;
    }
  }
LABEL_31:
  int v18 = v9[360];
  if (v18 != 2)
  {
    int v19 = GetDSIDFromPriorityHalAndSecureMode(v18, v7, v8 != 0);
    ZinAneTd<8u>::SetTileDmaDstDataSetId(a1, v19);
    if (*(unsigned char *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
      int v20 = *(_DWORD *)(*(void *)(a2 + 264) + 1440);
      if (v20 == 1)
      {
        if (*(unsigned char *)(a4 + 10))
        {
          uint64_t v21 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_43;
        }
      }
      else
      {
        if (v20)
        {
          uint64_t v21 = 0;
          goto LABEL_43;
        }
        if (*(unsigned char *)(a4 + 6))
        {
          uint64_t v21 = *(unsigned __int16 *)(a4 + 4);
LABEL_43:
          ZinAneTdHw_v8::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 5184, v21, 0, 0, 0, 0);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_46;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    uint64_t v9 = *(_DWORD **)(a2 + 264);
    if (!v19 && v9[353] == 2) {
      return 0;
    }
  }
LABEL_46:
  int v23 = v9[361];
  if (v23 != 2)
  {
    char v24 = GetDSIDFromPriorityHalAndSecureMode(v23, v7, v8 != 0);
    uint64_t v25 = *(void *)(a2 + 136);
    if (v25 && (uint64_t v26 = *(void *)(v25 + 800)) != 0) {
      uint64_t v27 = *(void *)(v26 + 40);
    }
    else {
      uint64_t v27 = 0;
    }
    BOOL v28 = !v25 || v27 == 0;
    BOOL v29 = !v28;
    if (*(_DWORD *)(v7 + 8))
    {
      unint64_t v30 = 0;
      uint64_t v31 = 40;
      do
      {
        if (v29)
        {
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a2 + 264));
          if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v30)
          {
            if (*(void *)(*(void *)(v27 + 32) + v31))
            {
              ZinAneTd<8u>::SetKernelDmaSrcDataSetId(a1, v24, v30);
              if (*(unsigned char *)(v7 + 1248))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
                int v33 = *(_DWORD *)(*(void *)(a2 + 264) + 1444);
                if (v33 == 1)
                {
                  if (!*(unsigned char *)(a4 + 10)) {
LABEL_75:
                  }
                    ZinAssertImpl("Missing Bar for MCache");
                  uint64_t v34 = *(unsigned __int16 *)(a4 + 8);
                }
                else if (v33)
                {
                  uint64_t v34 = 0;
                }
                else
                {
                  if (!*(unsigned char *)(a4 + 6)) {
                    goto LABEL_75;
                  }
                  uint64_t v34 = *(unsigned __int16 *)(a4 + 4);
                }
                ZinAneTdHw_v8::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, (v30 + 5448) & 0x3FFFFFFF, v34, 0, 0, 0, 0);
                if (v36 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        ++v30;
        v31 += 56;
      }
      while (v30 < *(unsigned int *)(v7 + 8));
    }
  }
  return 1;
}

void sub_211167EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<8u>::CreateSeedRelocations(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4)
{
  if (ZinIrOpLayer::IsNELayer(this))
  {
    if (*(unsigned char *)(a4 + 20))
    {
      uint64_t v18 = *(void *)(a4 + 12);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 584))(this))
      {
        uint64_t v8 = *(unsigned __int8 *)(a3 + 471);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a3 + 456);
        }
        if (v8 == 7)
        {
          int v10 = v9 >= 0 ? (int *)(a3 + 448) : *(int **)(a3 + 448);
          int v11 = *v10;
          int v12 = *(int *)((char *)v10 + 3);
          if (v11 == 1634629956 && v12 == 1667853665)
          {
            uint64_t v14 = 0;
            int v15 = (uint64_t *)(a1 + 8);
            do
            {
              uint64_t v16 = *((unsigned __int16 *)&__p[-1] + v14);
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
              ZinAneTdHw_v8::AddRelocInfo(v15, (uint64_t)__p, (v14 + 4679), v16, 0, 0, 1, 0);
              if (v20 < 0) {
                operator delete(__p[0]);
              }
              ++v14;
            }
            while (v14 != 4);
          }
        }
      }
    }
  }
  return 1;
}

void sub_211168074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SetPatchSettings<8u>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = ZinAneTd<8u>::SetPatchHeight(a1, *(void *)(a2 + 128));
  int v5 = v4 & ZinAneTd<8u>::SetPatchWidth(a1, *(void *)(a2 + 120));
  BOOL v6 = ZinAneTd<8u>::SetTileHeight(a1, *(void *)(a2 + 80));
  int v7 = v5 & v6 & ZinAneTd<8u>::SetTileOverlap(a1, *(void *)(a2 + 96));
  BOOL v8 = ZinAneTd<8u>::SetTileOverlapPadBottom(a1, *(void *)(a2 + 104));
  uint64_t v9 = v7 & v8 & ZinAneTd<8u>::SetTileOverlapPadTop(a1, *(void *)(a2 + 88));
  ZinAneTd<7u>::SetTileOverlapPadReflect(a1, *(unsigned __int8 *)(a2 + 112));
  return v9;
}

uint64_t PECodegenUtils::HandlePrimarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, ZinIrHalH13g *a4)
{
  uint64_t v23 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 0);
  (*(void (**)(void *__return_ptr, ZinIrOpLayer *))(*(void *)a1 + 376))(v22, a1);
  int v21 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 0, &v21))
  {
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
    return result;
  }
  BOOL v11 = v21 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, 0, &v23, v9);
  ZinAneTd<8u>::SetOrReturnWin((uint64_t)a4, v22[3]);
  ZinAneTd<8u>::SetOrReturnHin((uint64_t)a4, v22[2]);
  ZinAneTd<8u>::SetOrReturnDin((uint64_t)a4, v22[4]);
  ZinAneTd<8u>::SetOrReturnCin((uint64_t)a4, v22[1]);
  TileSrc = (int *)ZinMirL2Config::GetTileSrc(*((void *)a1 + 33) + 120, v21);
  ZinAneTd<8u>::SetCommonInFmt((uint64_t)a4, *TileSrc);
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((void *)a1 + 33), v21);
  ZinAneTd<8u>::SetL2Src1SourceType((uint64_t)a4, L2RdMode);
  if (!*((void *)a1 + 25))
  {
    BOOL v15 = 0;
    goto LABEL_8;
  }
  uint64_t v14 = *((void *)a1 + 24);
  BOOL v15 = v14 == 0;
  if (v14 != 1)
  {
LABEL_8:
    int v16 = 0;
    goto LABEL_9;
  }
  int v16 = 1;
LABEL_9:
  if (!ZinEngineLayerMirInfo::HasDmaRead(*((void *)a1 + 33), v21)) {
    return ZinCodegen::SetPrimaryL2SourceBuffer<8u>(a2, (uint64_t)a1, a4);
  }
  uint64_t v17 = v23;
  uint64_t v18 = (const void *)*((void *)a1 + (int)v23 + 30);
  int v19 = v18
  if ((v15 | v16) == 1)
  {
    char v20 = (*(uint64_t (**)(void))(**((void **)a1 + 25) + 304))(*((void *)a1 + 25));
    uint64_t v17 = v23;
  }
  else
  {
    char v20 = 0;
  }
  uint64_t result = ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, a4, *((void *)a1 + 33), v17, v11, a3, *(void *)(a2 + 528), *(void *)(a2 + 560), v15, v16, v20, (uint64_t)v19);
  if (result) {
    return ZinCodegen::SetPrimaryL2SourceBuffer<8u>(a2, (uint64_t)a1, a4);
  }
  return result;
}

BOOL PECodegenUtils::HandleSecondarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  BOOL v29 = a5;
  if (*((void *)a1 + 12) - *((void *)a1 + 11) < 0x10uLL) {
    return 1;
  }
  uint64_t v28 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 1uLL);
  int v27 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 1uLL, &v27))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    PECodegenUtils::HandlePrimarySourceTensor<17u>();
    return 0;
  }
  BOOL v13 = v27 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)1, &v28, v12);
  int v14 = v27;
  if (v27 == 1)
  {
    TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
    ZinAneTd<8u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
    ZinAneTd<8u>::SetPESecondSource((uint64_t)a5, 2);
    int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v27);
    ZinAneTd<8u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    int v14 = v27;
  }
  if (v14 == 2) {
    int v17 = 0;
  }
  else {
    int v17 = ZinEngineLayerMirInfo::HasDmaRead(a2, v14);
  }
  uint64_t v18 = *((void *)a1 + 25);
  if (!v18)
  {
    BOOL v20 = 0;
LABEL_16:
    int v21 = 0;
    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  uint64_t v19 = *((void *)a1 + 24);
  BOOL v20 = v19 == 0;
  if (v19 != 1) {
    goto LABEL_16;
  }
  int v21 = 1;
  if (!v17) {
    goto LABEL_28;
  }
LABEL_17:
  uint64_t v26 = v13;
  if ((v20 | v21) == 1) {
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 304))(v18);
  }
  else {
    char v22 = 0;
  }
  uint64_t v23 = v28;
  char v24 = (void *)*((void *)a1 + (int)v28 + 30);
  if (v21)
  {
    if (v24) {
    if ((ZinCodegen::SetPrimarySourceDMA<8u>(InputTensor, a5, a2, v23, v26, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), v20, 1, v22, (uint64_t)v24) & 1) == 0)return 0;
    }
  }
  else
  {
    if (v24) {
    BOOL v25 = ZinCodegen::SetSecondarySourceDMA<8u>(InputTensor, (uint64_t)a5, a2, v23, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), v20, 0, v22, (uint64_t)v24);
    }
    BOOL result = 0;
    if (!v25) {
      return result;
    }
  }
LABEL_28:
  if (v27 != 2) {
    return v27 != 1 || ZinCodegen::SetSecondaryL2SourceBuffer<8u>(a3, a1, a5);
  }
  if (!*(unsigned char *)(a3 + 1130)) {
    ZinAssertImpl("Error: PE indexing is not supported");
  }
  BOOL result = PECodegenUtils::HandlePEIndexingBuffer<8u>((uint64_t)InputTensor, a3, a2, (uint64_t *)&v29);
  if (result) {
    return 1;
  }
  return result;
}

BOOL PECodegenUtils::HandleTernarySourceTensor<8u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  if (*((void *)a1 + 12) - *((void *)a1 + 11) < 0x18uLL) {
    return 1;
  }
  uint64_t v19 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 2uLL);
  int v18 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 2uLL, &v18))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
  }
  else
  {
    ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)2, &v19, v12);
    if (v18 == 1)
    {
      TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
      ZinAneTd<8u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
      int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v18);
      ZinAneTd<8u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    }
    if (*((void *)a1 + 25) && *((void *)a1 + 24) == 1)
    {
      uint64_t v15 = v19;
      int v16 = (void *)*((void *)a1 + (int)v19 + 30);
      if (v16) {
      BOOL v17 = ZinCodegen::SetSecondarySourceDMA<8u>(InputTensor, (uint64_t)a5, a2, v15, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), 0, 1, 1, (uint64_t)v16);
      }
      BOOL result = 0;
      if (v17) {
        return 1;
      }
    }
    else
    {
      if (v18 != 1) {
        return 1;
      }
      BOOL result = ZinCodegen::SetSecondaryL2SourceBuffer<8u>(a3, a1, a5);
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandleOutputTensor<8u>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12 = *(_DWORD *)(a1 + 88);
  ZinAneTd<8u>::SetOrReturnWout(a5, *(void *)(a1 + 72));
  ZinAneTd<8u>::SetOrReturnHout(a5, *(void *)(a1 + 64));
  ZinAneTd<8u>::SetOrReturnDout(a5, *(void *)(a1 + 80));
  ZinAneTd<8u>::SetOrReturnCout(a5, *(void *)(a1 + 56));
  ZinAneTd<8u>::SetCommonOutFmt(a5, v12);
  ZinAneTd<8u>::SetL2ResultType(a5, *(_DWORD *)(a2 + 1632));
  if ((*(_DWORD *)(a2 + 1632) - 1) <= 1
    && !ZinCodegen::SetResultDMA<8u>((ZinIrTensor *)a1, a5, a2, a4, a3[66], a3[70], a6))
  {
    return 0;
  }
  unint64_t v13 = *(void *)(ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2) + 16) % a3[51] / a3[52];
  *(_DWORD *)(a5 + 924) = *(_DWORD *)(a5 + 924) & 0xFFE0000F | (16 * (v13 & 0x1FFFF));
  if (!CheckRegValueRange(v13, (unsigned int *)(*(void *)(a5 + 1296) + 376))) {
    return 0;
  }
  *(_DWORD *)(a5 + 928) = *(_DWORD *)(a5 + 928) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 280) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 280), (unsigned int *)(*(void *)(a5 + 1296) + 384))) {
    return 0;
  }
  *(_DWORD *)(a5 + 940) = *(_DWORD *)(a5 + 940) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 288) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 288), (unsigned int *)(*(void *)(a5 + 1296) + 408))) {
    return 0;
  }
  *(_DWORD *)(a5 + 936) = *(_DWORD *)(a5 + 936) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 296) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 296), (unsigned int *)(*(void *)(a5 + 1296) + 400))) {
    return 0;
  }
  *(_DWORD *)(a5 + 932) = *(_DWORD *)(a5 + 932) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 272) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 272), (unsigned int *)(*(void *)(a5 + 1296) + 392))) {
    return 0;
  }
  uint64_t L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2);
  long long v19 = *(_OWORD *)(L2WrSymbol + 520);
  __int16 NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v19);
  ZinAneTd<8u>::SetL2ResultWrapAddr(a5, NumNeededNEs);
  __int16 OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v19);
  ZinAneTd<8u>::SetL2ResultWrapAddrOffset(a5, OCGSize);
  uint64_t v17 = ZinCodegen::SetL2ResultWrapInfo<8u>(a5, L2WrSymbol);
  if (v17) {
    ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a5, *(void *)(a2 + 320));
  }
  return v17;
}

uint64_t PECodegenUtils::HandlePEElementWiseLayer<8u>(uint64_t a1, ZinCodegen *this, ZinIrHalH13g *a3)
{
  unsigned int HWTaskType = ZinCodegen::GetHWTaskType(this, this);
  ZinAneTd<8u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
  int v7 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 608))(this);
  ZinAneTd<8u>::SetPESrc1ReLu((uint64_t)a3, v7);
  int v8 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 616))(this);
  ZinAneTd<8u>::SetPESrc2ReLu((uint64_t)a3, v8);
  int v9 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 640))(this);
  ZinAneTd<8u>::SetPESrc1Transpose((uint64_t)a3, v9);
  int v10 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 648))(this);
  ZinAneTd<8u>::SetPESrc2Transpose((uint64_t)a3, v10);
  if ((*(unsigned int (**)(ZinCodegen *))(*(void *)this + 656))(this)
    && *(void *)((*(uint64_t (**)(ZinCodegen *))(*(void *)this + 696))(this) + 64))
  {
    uint64_t v11 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 696))(this);
    ZinAneTd<8u>::SetPESrc1Broadcast((uint64_t)a3, *(void *)(v11 + 64) + 16);
  }
  if ((*(unsigned int (**)(ZinCodegen *))(*(void *)this + 664))(this)
    && *(void *)((*(uint64_t (**)(ZinCodegen *))(*(void *)this + 704))(this) + 64))
  {
    uint64_t v12 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 704))(this);
    ZinAneTd<8u>::SetPESrc2Broadcast((uint64_t)a3, *(void *)(v12 + 64) + 16, 0);
  }
  uint64_t v13 = *((void *)this + 57);
  if (v13)
  {
    ZinAneTd<8u>::SetPEIndexMode((uint64_t)a3, *(_DWORD *)(*(void *)(v13 + 64) + 12));
    ZinAneTd<8u>::SetPEIndexTranspose((uint64_t)a3, *((void *)this + 58) != 0);
    uint64_t v14 = *((void *)this + 59);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15) {
        ZinAneTd<8u>::SetPEIndexBroadcast((uint64_t)a3, v15 + 16);
      }
    }
    ZinAneTd<8u>::SetPEMaxIndex((uint64_t)a3, *(void *)(*(void *)(v13 + 64) + 16));
  }
  ZinIrScaledEWInfo::ZinIrScaledEWInfo((uint64_t)&v36, 0, 0, 0, 1.0, 1.0, 0.0);
  uint64_t v16 = *((void *)this + 60);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 64);
    *(_DWORD *)uint64_t v37 = *(_DWORD *)(v17 + 8);
    __int16 v18 = *(_WORD *)(v17 + 28);
    *(_OWORD *)&v37[4] = *(_OWORD *)(v17 + 12);
    *(_WORD *)&v37[20] = v18;
    int v19 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 568))(this);
  }
  else
  {
    int v19 = 0;
  }
  ZinAneTd<8u>::SetPEBias((uint64_t)a3, *(float *)&v37[16]);
  ZinAneTd<8u>::SetPEScale((uint64_t)a3, *(float *)&v37[12]);
  ZinAneTd<8u>::SetPEPreScale((uint64_t)a3, *(float *)&v37[8]);
  if (!ZinAneTd<8u>::SetPEOperationMode((uint64_t)a3, *(int *)&v37[4]))
  {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v36);
    return 0;
  }
  ZinAneTd<8u>::SetPEFirstSource((uint64_t)a3, v37[20] == 0);
  if (v37[21]) {
    int v20 = 3;
  }
  else {
    int v20 = 2;
  }
  if (v19) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  ZinAneTd<8u>::SetPESecondSource((uint64_t)a3, v21);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v36);
  if (!PECodegenUtils::HandlePECommonPostOps<8u>(a1, a3, this)) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, ZinCodegen *))(*(void *)this + 384))(&v36, this);
  ZinAneTd<8u>::SetOrReturnHout((uint64_t)a3, *(unint64_t *)&v37[8]);
  ZinAneTd<8u>::SetOrReturnWout((uint64_t)a3, *(unint64_t *)&v37[16]);
  ZinAneTd<8u>::SetOrReturnCout((uint64_t)a3, *(unint64_t *)v37);
  ZinAneTd<8u>::SetOrReturnDout((uint64_t)a3, v38);
  uint64_t v22 = (uint64_t)a3 + 8;
  int Win = ZinGetRegisterProgramming<8u>::GetWin(v22);
  int Wout = ZinGetRegisterProgramming<8u>::GetWout(v22);
  int Hin = ZinGetRegisterProgramming<8u>::GetHin(v22);
  int Hout = ZinGetRegisterProgramming<8u>::GetHout(v22);
  int Cin = ZinGetRegisterProgramming<8u>::GetCin(v22);
  int Cout = ZinGetRegisterProgramming<8u>::GetCout(v22);
  int Din = ZinGetRegisterProgramming<8u>::GetDin(v22);
  int Dout = ZinGetRegisterProgramming<8u>::GetDout(v22);
  BOOL v33 = Win == Wout && Hin == Hout && Cin == Cout && Din == Dout;
  uint64_t v34 = v33;
  if (!v33 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    PECodegenUtils::HandlePEElementWiseLayer<17u>();
  }
  return v34;
}

void sub_211169044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)va);
  _Unwind_Resume(a1);
}

uint64_t PECodegenUtils::HandlePEGOCLayer<8u>(uint64_t a1, uint64_t a2, ZinIrHalH13g *a3)
{
  __p = 0;
  char v44 = 0;
  uint64_t v45 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  uint64_t v7 = *(void *)(a2 + 440);
  if (v7)
  {
    unsigned int HWTaskType = ZinCodegen::GetHWTaskType((ZinCodegen *)a2, v6);
    ZinAneTd<8u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 608))(a2);
    ZinAneTd<8u>::SetPESrc1ReLu((uint64_t)a3, v9);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 616))(a2);
    ZinAneTd<8u>::SetPESrc2ReLu((uint64_t)a3, v10);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 640))(a2);
    ZinAneTd<8u>::SetPESrc1Transpose((uint64_t)a3, v11);
    uint64_t v12 = *(void *)(v7 + 64);
    ZinAneTd<8u>::SetPESrc2Transpose((uint64_t)a3, *(unsigned __int8 *)(v12 + 80));
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 656))(a2)
      && *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 696))(a2) + 64))
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 696))(a2);
      ZinAneTd<8u>::SetPESrc1Broadcast((uint64_t)a3, *(void *)(v13 + 64) + 16);
    }
    if (*(void *)(v12 + 64)) {
      ZinAneTd<8u>::SetPESrc2Broadcast((uint64_t)a3, v12 + 40, 1);
    }
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a2 + 440);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 64);
      if (v16)
      {
        ZinAneTd<8u>::SetPEPreScale((uint64_t)a3, *(float *)(v16 + 12));
        ZinAneTd<8u>::SetPEFirstSource((uint64_t)a3, *(unsigned char *)(v16 + 16) == 0);
        if (*(unsigned char *)(v16 + 17)) {
          int v17 = 3;
        }
        else {
          int v17 = 2;
        }
        ZinAneTd<8u>::SetPESecondSource((uint64_t)a3, v17);
        if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 792))(a2))
        {
          int v18 = 1;
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 800))(a2))
          {
LABEL_21:
            if (*(unsigned char *)(a1 + 1129)) {
              PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a3, (ZinPELayer *)a2);
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 680))(a2))
            {
              (*(void (**)(uint64_t))(*(void *)a2 + 776))(a2);
              ZinIrHalH13g::~ZinIrHalH13g(a3);
            }
            int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 408))(a2);
            ZinAneTd<8u>::SetPEOutputCtoW((uint64_t)a3, v28);
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 384))(v42, a2);
            ZinAneTd<8u>::SetOrReturnHout((uint64_t)a3, (unint64_t)v42[2]);
            ZinAneTd<8u>::SetOrReturnWout((uint64_t)a3, (unint64_t)v42[3]);
            ZinAneTd<8u>::SetOrReturnCout((uint64_t)a3, (unint64_t)v42[1]);
            ZinAneTd<8u>::SetOrReturnDout((uint64_t)a3, (unint64_t)v42[4]);
            uint64_t v29 = (uint64_t)a3 + 8;
            int Win = ZinGetRegisterProgramming<8u>::GetWin((uint64_t)a3 + 8);
            int Wout = ZinGetRegisterProgramming<8u>::GetWout(v29);
            int Hin = ZinGetRegisterProgramming<8u>::GetHin(v29);
            int Hout = ZinGetRegisterProgramming<8u>::GetHout(v29);
            int Cin = ZinGetRegisterProgramming<8u>::GetCin(v29);
            int Cout = ZinGetRegisterProgramming<8u>::GetCout(v29);
            int Din = ZinGetRegisterProgramming<8u>::GetDin(v29);
            int Dout = ZinGetRegisterProgramming<8u>::GetDout(v29);
            BOOL v40 = Win == Wout && Hin == Hout && Cin == Cout && Din == Dout;
            uint64_t v14 = v40;
            if (!v40 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              PECodegenUtils::HandlePEElementWiseLayer<17u>();
            }
            goto LABEL_40;
          }
          unsigned int v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 816))(a2) + 192) - 25;
          if (v27 >= 6) {
            ZinAssertImpl("Error: Invalid non linear mode");
          }
          int v18 = dword_211EF59FC[v27];
        }
        ZinAneTd<8u>::SetPECondition((uint64_t)a3, v18);
        goto LABEL_21;
      }
    }
  }
  else
  {
    BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v19) {
      PECodegenUtils::HandlePEGOCLayer<8u>(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    uint64_t v14 = 0;
  }
LABEL_40:
  if (__p)
  {
    char v44 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_211169588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL PECodegenUtils::HandlePEPoolLayer<8u>(uint64_t a1, ZinCodegen *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*((void *)a2 + 54) + 64);
  if (ZinAneTd<8u>::SetCommonConvCfgKw(a3, *(void *)(v6 + 16))
    && ZinAneTd<8u>::SetCommonConvCfgKh(a3, *(void *)(v6 + 24))
    && ZinAneTd<8u>::SetCommonConvCfgSx(a3, *(int *)(v6 + 40))
    && ZinAneTd<8u>::SetCommonConvCfgSy(a3, *(int *)(v6 + 44))
    && ZinAneTd<8u>::SetCommonConvCfgOx(a3, 1uLL)
    && ZinAneTd<8u>::SetCommonConvCfgOy(a3, 1uLL)
    && (*(_DWORD *)(a3 + 532) = *(_DWORD *)(a3 + 532) & 0xFFC1FFFF | ((*(_DWORD *)(v6 + 64) & 0x1F) << 17),
        CheckRegValueRange(*(int *)(v6 + 64), (unsigned int *)(*(void *)(a3 + 1296) + 104)))
    && (*(_DWORD *)(a3 + 532) = *(_DWORD *)(a3 + 532) & 0xF83FFFFF | ((*(_DWORD *)(v6 + 72) & 0x1F) << 22),
        CheckRegValueRange(*(int *)(v6 + 72), (unsigned int *)(*(void *)(a3 + 1296) + 96))))
  {
    if ((*(unsigned int (**)(ZinCodegen *))(*(void *)a2 + 608))(a2))
    {
      int v7 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 608))(a2);
      ZinAneTd<8u>::SetPESrc1ReLu(a3, v7);
    }
    if ((*(unsigned int (**)(ZinCodegen *))(*(void *)a2 + 568))(a2))
    {
      int v9 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 616))(a2);
      ZinAneTd<8u>::SetPESrc2ReLu(a3, v9);
      int v10 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 648))(a2);
      ZinAneTd<8u>::SetPESrc2Transpose(a3, v10);
    }
    uint64_t v11 = *(void *)(*((void *)a2 + 54) + 64);
    unsigned int HWTaskType = ZinCodegen::GetHWTaskType(a2, v8);
    ZinAneTd<8u>::SetCommonTaskType(a3, HWTaskType);
    ZinAneTd<8u>::SetPEFirstSource(a3, 1);
    if (*(unsigned char *)(v11 + 116)) {
      ZinAneTd<8u>::SetPESecondSource(a3, 2);
    }
    ZinAneTd<8u>::SetPEPreScale(a3, *(float *)(v11 + 112));
    int v13 = *(_DWORD *)(v11 + 104);
    if (v13 == 2)
    {
      unsigned int v14 = *(_DWORD *)(a3 + 996) & 0xFFFFFFFC | (*(unsigned char *)(v11 + 108) == 0);
      int v15 = 1;
      goto LABEL_27;
    }
    if (v13 == 1)
    {
      if (*(_DWORD *)(v11 + 100) == 4)
      {
        unsigned int v14 = *(_DWORD *)(a3 + 996) | 3;
        int v15 = 4;
        goto LABEL_27;
      }
      BOOL v40 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v40) {
        PECodegenUtils::HandlePEPoolLayer<8u>(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    else if (v13)
    {
      BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v24) {
        PECodegenUtils::HandlePEPoolLayer<8u>(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    else
    {
      if (*(_DWORD *)(v11 + 100) == 2)
      {
        unsigned int v14 = *(_DWORD *)(a3 + 996) & 0xFFFFFFFC | 2;
        int v15 = 2;
LABEL_27:
        *(_DWORD *)(a3 + 996) = v14;
        ZinAneTd<8u>::SetPaddingMode(a3, v15, 0);
        PECodegenUtils::HandlePECommonPostOps<8u>(a1, (ZinIrHalH13g *)a3, a2);
        return 1;
      }
      BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v32) {
        PECodegenUtils::HandlePEPoolLayer<8u>(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<8u>(result, v48, v49, v50, v51, v52, v53, v54);
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<8u>(result, v17, v18, v19, v20, v21, v22, v23);
      return 0;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandlePESecureFlushLayer<8u>(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFF0F | 0x30;
  ZinAneTd<8u>::SetCommonSrc2InFmt(a1, 2);
  ZinAneTd<8u>::SetNEOcgSize(a1, 3);
  ZinAneTd<8u>::SetKernelDmaSrcKid(a1, 0);
  ZinAneTd<8u>::SetKernelDmaSrcNoReuseHint(a1, 0);
  ZinAneTd<8u>::SetL2Src1ChannelStride(a1, 0);
  ZinAneTd<8u>::SetL2Src1DepthStride(a1, 0);
  ZinAneTd<8u>::SetL2Src1GroupStride(a1, 0);
  *(_DWORD *)(a1 + 888) &= 0xFFE0000F;
  ZinAneTd<8u>::SetL2Src2ChannelStride(a1, 0);
  ZinAneTd<8u>::SetL2Src2DepthStride(a1, 0);
  ZinAneTd<8u>::SetL2Src2GroupStride(a1, 0);
  *(_DWORD *)(a1 + 908) &= 0xFFE0000F;
  ZinAneTd<8u>::SetKernelFmt(a1, 2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinAneTd<8u>::SetKernelMode(a1, 0);
  ZinAneTd<8u>::SetOpMode(a1, 0);
  ZinAneTd<8u>::SetNEPostScale(a1, 0, 1);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a1 + 996) & 0xFFF3FFFF | 0x80000;
  ZinAneTd<8u>::SetPatchHeight(a1, 1uLL);
  ZinAneTd<8u>::SetTileDmaDstDepthStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstGroupStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstChannelStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaDstRowStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1CacheHint(a1, 1, 1, 1);
  ZinAneTd<8u>::SetTileDmaSrc2CacheHint(a1, 1, 1, 1);
  ZinAneTd<8u>::SetTileDmaSrc1DepthStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1GroupStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1ChannelStride(a1, 0);
  ZinAneTd<8u>::SetTileDmaSrc1RowStride(a1, 0);
  v4.i64[0] = 0x3F0000003FLL;
  v4.i64[1] = 0x3F0000003FLL;
  *(int8x16_t *)(a1 + 632) = vandq_s8(*(int8x16_t *)(a1 + 632), v4);
  *(_DWORD *)(a1 + 588) |= 1u;
  ZinAneTd<8u>::SetTileDmaSrc1Interleave(a1, 8u);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a1 + 688) & 0xFFFFCFFF | 0x1000;
  ZinAneTd<8u>::SetTileDmaSrc2Interleave(a1, 8u);
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 692) & 0xFFFFCFFF | 0x1000;
  *(_DWORD *)(a1 + 1112) &= ~0x1000000u;
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0CFCFFF | 0x8100000;
  ZinAneTd<8u>::SetL2Src1Interleave(a1, 8u);
  ZinAneTd<8u>::SetL2Src1SourceType(a1, 2);
  ZinAneTd<8u>::SetL2Src2Interleave(a1, 8u);
  ZinAneTd<8u>::SetL2Src2SourceType(a1, 2);
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFFFFC | 1;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 18, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 17, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 22, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 21, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 16, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 15, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 20, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 19, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 42, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 41, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 44, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, 43, 0);
  if (a2 == 2)
  {
    ZinAneTd<8u>::SetOrReturnHin(a1, 4uLL);
    ZinAneTd<8u>::SetOrReturnWin(a1, 0x10uLL);
    ZinAneTd<8u>::SetOrReturnHout(a1, 4uLL);
    ZinAneTd<8u>::SetOrReturnWout(a1, 0x10uLL);
    ZinAneTd<8u>::SetPatchHeight(a1, 2uLL);
    ZinAneTd<8u>::SetTileHeight(a1, 4u);
    *(_DWORD *)(a1 + 920) = *(_DWORD *)(a1 + 920) & 0xFFFFF0F7 | 0x300;
    *(_DWORD *)(a1 + 932) = *(_DWORD *)(a1 + 932) & 0xFFE0000F | 0x10;
    ZinAneTd<8u>::SetL2Src1Interleave(a1, 3u);
    ZinAneTd<8u>::SetL2Src2Interleave(a1, 3u);
    *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0FFFFFF | 0x3000000;
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a1 + 1128) & 0x3F | 0x40;
    ZinAneTd<8u>::SetTileDmaSrc1Interleave(a1, 3u);
    *(_DWORD *)(a1 + 688) &= 0xFFFFCFFF;
    *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 608) & 0x3F | 0x40;
    ZinAneTd<8u>::SetTileDmaSrc2Interleave(a1, 3u);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 632) & 0x3F | 0x40;
    *(_DWORD *)(a1 + 692) &= 0xFFFFCFFF;
    return 1;
  }
  else if (a2 == 1)
  {
    uint64_t v5 = 1;
    ZinAneTd<8u>::SetOrReturnHin(a1, 1uLL);
    ZinAneTd<8u>::SetOrReturnWin(a1, 0x10uLL);
    ZinAneTd<8u>::SetOrReturnHout(a1, 1uLL);
    ZinAneTd<8u>::SetOrReturnWout(a1, 0x10uLL);
    *(_DWORD *)(a1 + 920) &= 0xFFFFFFF4;
    ZinAneTd<8u>::SetL2Src1DmaFormat(a1, 3);
    ZinAneTd<8u>::SetL2Src2DmaFormat(a1, 3);
    *(_DWORD *)(a1 + 1112) &= ~1u;
    *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xF0EFFFFF | 0x1000000;
    *(void *)(a1 + 688) = *(void *)&vand_s8(*(int8x8_t *)(a1 + 688), (int8x8_t)vdup_n_s32(0xFFFFCFFC)) | 0x100000001;
  }
  else
  {
    uint64_t v5 = 0;
    if (!a2)
    {
      ZinAneTd<8u>::SetCommonInFmt(a1, 3);
      ZinAneTd<8u>::SetCommonSrc2InFmt(a1, 3);
      *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFFFFCF | 0x20;
      uint64_t v5 = 1;
      ZinAneTd<8u>::SetOrReturnHin(a1, 1uLL);
      ZinAneTd<8u>::SetOrReturnWin(a1, 0x40uLL);
      ZinAneTd<8u>::SetOrReturnHout(a1, 1uLL);
      ZinAneTd<8u>::SetOrReturnWout(a1, 0x40uLL);
      ZinAneTd<8u>::SetTileDmaDstandL2DstFifoMode(a1, 0);
      ZinAneTd<8u>::SetTileDmaDstandL2DstInterleave(a1, 8u);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 18, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 17, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 22, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 21, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 16, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 15, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 20, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 19, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 42, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 41, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 44, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 43, 1);
      ZinAneTd<8u>::SetTileDmaSrc1Format(a1, 1, 0);
      ZinAneTd<8u>::SetTileDmaSrc2Format(a1, 1, 0);
      *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a1 + 1168) & 0xFFFFCFFF | 0x1000;
    }
  }
  return v5;
}

BOOL PECodegenUtils::HandlePEIndexingBuffer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(a3, 2);
  if (!L2RdSymbol)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  int v9 = L2RdSymbol;
  if (ZinIrSymbol::GetMemType(L2RdSymbol) != 2)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<17u>::HandleL2Config(result, v27, v28, v29, v30, v31, v32, v33);
    return 0;
  }
  unint64_t v10 = *((void *)v9 + 2);
  unint64_t v11 = *(void *)(a2 + 416);
  if (v10 % v11)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  ZinAneTd<8u>::SetL2Src2BaseAddress(*a4, v10 % *(void *)(a2 + 408) / v11);
  uint64_t v34 = *a4;
  uint64_t v35 = a3 + 120;
  uint64_t TileSrc = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2ChannelStride(v34, *(ZinCodegenUtil **)(TileSrc + 16));
  uint64_t v37 = *a4;
  uint64_t v38 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2GroupStride(v37, *(ZinCodegenUtil **)(v38 + 32));
  uint64_t v39 = *a4;
  uint64_t v40 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2RowStride(v39, (ZinCodegen *)(a1 + 48), *(ZinTensorDimensions **)(v40 + 8), v41, v42);
  uint64_t v43 = *a4;
  uint64_t v44 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<8u>::SetL2Src2DepthStride(v43, *(ZinCodegenUtil **)(v44 + 24));
  return 1;
}

BOOL PECodegenUtils::HandlePECommonPostOps<8u>(uint64_t a1, ZinIrHalH13g *a2, ZinPELayer *a3)
{
  (*(void (**)(void *__return_ptr, ZinPELayer *))(*(void *)a3 + 376))(v18, a3);
  if ((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 792))(a3))
  {
    int v6 = 1;
LABEL_6:
    ZinAneTd<8u>::SetPECondition((uint64_t)a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 800))(a3))
  {
    int v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6) {
      ZinAssertImpl("Error: Invalid non linear mode");
    }
    int v6 = dword_211EF59FC[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (*((void *)a3 + 63) && (CodegenReduction<8u>((uint64_t)a3, (uint64_t)v18, (uint64_t)a2) & 1) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePECommonPostOps<17u>();
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1129))
    {
      uint64_t v8 = *((void *)a3 + 67);
      if (v8)
      {
        uint64_t OutputScale = ZinPELayer::GetOutputScale(a3);
        uint64_t OutputBias = ZinPELayer::GetOutputBias(a3);
        unint64_t v11 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 768))(a3);
        PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForAbsGOC<8u>((uint64_t)a2, v8, OutputScale, OutputBias, v11);
      }
      else
      {
        uint64_t v13 = *((void *)a3 + 68);
        if (v13)
        {
          uint64_t v14 = ZinPELayer::GetOutputScale(a3);
          uint64_t v15 = ZinPELayer::GetOutputBias(a3);
          uint64_t v16 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 768))(a3);
          PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForZeroCompareGOC<8u>((uint64_t)a2, v13, v14, v15, v16);
        }
        else
        {
          PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a2, a3);
        }
      }
    }
    if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 680))(a3))
    {
      (*(void (**)(ZinPELayer *))(*(void *)a3 + 776))(a3);
      ZinIrHalH13g::~ZinIrHalH13g(a2);
    }
    int v17 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 408))(a3);
    ZinAneTd<8u>::SetPEOutputCtoW((uint64_t)a2, v17);
    return 1;
  }
  return result;
}

uint64_t CodegenReduction<8u>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 504) + 64);
  int v7 = *(_DWORD *)(v6 + 12);
  uint64_t v16 = 0;
  signed int v8 = *(_DWORD *)(a1 + 528);
  int OutputReductionFinalScaleValue = ZinPEElementWiseLayer::GetOutputReductionFinalScaleValue((ZinPEElementWiseLayer *)a1, (float *)&v16 + 1);
  int OutputReductionEpsilonValue = ZinPEElementWiseLayer::GetOutputReductionEpsilonValue((ZinPEElementWiseLayer *)a1, (float *)&v16);
  uint64_t result = 0;
  if (OutputReductionFinalScaleValue)
  {
    if (OutputReductionEpsilonValue)
    {
      unsigned int v12 = *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 16) * *(_DWORD *)(a2 + 32);
      int v13 = CodegenReductionMode<8u>(v7, a3);
      int v14 = v13 & CodegenReductionPostProcess<8u>(v8, a3);
      BOOL v15 = CodegenReductionFinalScaleEpsilon<8u>(v7, v12, a3, *((float *)&v16 + 1), *(float *)&v16);
      LOBYTE(v12) = *(_DWORD *)(v6 + 40) == 1;
      uint64_t result = v14 & v15 & CodegenReductionResult<8u>(v7, (void *)a2, a3);
      *(_DWORD *)(a3 + 996) = *(_DWORD *)(a3 + 996) & 0xFFFFF7FF | ((v12 & 1) << 11);
    }
  }
  return result;
}

float PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForAbsGOC<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinDeQuantLayer *a5)
{
  if (*(unsigned char *)(a3 + 8)) {
    float v8 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a3 + 4), *(float *)a3);
  }
  else {
    float v8 = 1.0;
  }
  if (*(unsigned char *)(a4 + 8)) {
    float v9 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a4 + 4), *(float *)a4);
  }
  else {
    float v9 = 0.0;
  }
  float v10 = 1.0;
  if (a5 && ZinQuantLayer::HasScale(a5)) {
    float v10 = 1.0 / ZinDeQuantLayer::GetScalarScale(a5);
  }
  float v11 = v8 * v10;
  if ((float)(v8 * v10) <= 0.0) {
    int v12 = -8388608;
  }
  else {
    int v12 = 2139095040;
  }
  float v13 = 0.0;
  if ((float)(v8 * v10) != 0.0 && v9 != 0.0) {
    float v13 = v9 * v11;
  }
  *(_DWORD *)(a1 + 996) |= 0x20u;
  *(_DWORD *)(a1 + 1032) = 2139095040;
  *(float *)(a1 + 1044) = v11;
  *(float *)(a1 + 1048) = v13;
  *(void *)(a1 + 1020) = 0x7F800000FF800000;
  *(_DWORD *)(a1 + 1028) = v12;
  float result = -(float)(v8 * v10);
  *(float *)(a1 + 1036) = result;
  *(float *)(a1 + 1040) = v13;
  return result;
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForZeroCompareGOC<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinQuantLayer *a5)
{
  if (*(unsigned char *)(a3 + 8)) {
    float v9 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a3 + 4), *(float *)a3);
  }
  else {
    float v9 = 1.0;
  }
  if (*(unsigned char *)(a4 + 8)) {
    float v10 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(a4 + 4), *(float *)a4);
  }
  else {
    float v10 = 0.0;
  }
  float v11 = 1.0;
  float v12 = 1.0;
  if (a5)
  {
    unsigned int v13 = ZinQuantLayer::HasScale(a5);
    float v12 = 1.0;
    if (v13) {
      float v12 = 1.0 / ZinDeQuantLayer::GetScalarScale(a5);
    }
  }
  float v14 = v9 * v12;
  float v15 = 0.0;
  if (v14 != 0.0 && v10 != 0.0) {
    float v15 = v10 * v14;
  }
  int v17 = 2;
  int v18 = 1;
  switch(*(_DWORD *)(a2 + 192))
  {
    case 0x19:
      goto LABEL_22;
    case 0x1A:
      goto LABEL_21;
    case 0x1B:
      int v17 = 3;
      goto LABEL_21;
    case 0x1C:
      int v18 = 4;
      goto LABEL_22;
    case 0x1D:
      int v18 = 5;
      goto LABEL_22;
    case 0x1E:
      int v17 = 6;
      goto LABEL_21;
    default:
      int v17 = 0;
LABEL_21:
      float v11 = 0.0;
      int v18 = v17;
LABEL_22:
      float v19 = 0.0;
      float v20 = 1.0;
      if ((v18 - 2) >= 3) {
        float v21 = 0.0;
      }
      else {
        float v21 = 1.0;
      }
      if ((v18 - 5) >= 2 && v18 != 2) {
        float v20 = 0.0;
      }
      BOOL v23 = v20 == 0.0;
      BOOL v24 = v21 == 0.0;
      *(_DWORD *)(a1 + 996) |= 0x20u;
      if (v14 == 0.0) {
        BOOL v23 = 1;
      }
      float v25 = v20 * v14;
      if (v14 == 0.0) {
        BOOL v24 = 1;
      }
      if (v23) {
        float v25 = 0.0;
      }
      *(float *)(a1 + 1032) = v15 + v25;
      *(void *)(a1 + 1020) = 0x33800000B3800000;
      float v26 = v21 * v14;
      if (v24) {
        float v26 = 0.0;
      }
      *(float *)(a1 + 1028) = v15 + v26;
      *(float *)(a1 + 1036) = v15;
      *(float *)(a1 + 1044) = v15;
      if (v11 == 0.0)
      {
        *(_DWORD *)(a1 + 1040) = 0;
      }
      else
      {
        float v27 = v11 * v14;
        BOOL v28 = v14 == 0.0;
        if (v14 == 0.0) {
          float v29 = 0.0;
        }
        else {
          float v29 = v11 * v14;
        }
        *(float *)(a1 + 1040) = v29;
        if (!v28) {
          float v19 = v27;
        }
      }
      *(float *)(a1 + 1048) = v19;
      return;
  }
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>(uint64_t a1, ZinPELayer *a2)
{
  if (((*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 680))(a2) & 1) != 0
    || ZinPELayer::HasOutputScaleOrBias(a2)
    || (*(unsigned int (**)(ZinPELayer *))(*(void *)a2 + 672))(a2))
  {
    uint64_t v4 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 776))(a2);
    uint64_t v5 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 784))(a2);
    uint64_t OutputScale = ZinPELayer::GetOutputScale(a2);
    uint64_t OutputBias = ZinPELayer::GetOutputBias(a2);
    float v8 = (PiecewiseLinearFunctionParams *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 768))(a2);
    PiecewiseLinearFunctionParams::PiecewiseLinearFunctionParams((uint64_t)&v85, v4, OutputScale, OutputBias, v5, v8);
    if (*(unsigned char *)(OutputScale + 8)
      || (!v8 ? (v9 = *(unsigned char *)(OutputBias + 8) == 0) : (v9 = 0), v9 ? (BOOL v10 = v5 == 0) : (BOOL v10 = 0), !v10))
    {
      BOOL v11 = v87 == 0.0;
      BOOL v12 = v88 == 0.0;
      float v13 = v86;
      if (v85 == 0.0) {
        BOOL v11 = 1;
      }
      float v14 = v87 * v85;
      if (v85 == 0.0) {
        BOOL v12 = 1;
      }
      float v15 = v85 * v88;
      if (v11) {
        float v14 = 0.0;
      }
      if (v12) {
        float v15 = 0.0;
      }
      *(_DWORD *)(a1 + 996) |= 0x20u;
      *(void *)(a1 + 1020) = 0x7F800000FF800000;
      if (v14 <= 0.0) {
        int v16 = 2139095040;
      }
      else {
        int v16 = -8388608;
      }
      *(_DWORD *)(a1 + 1028) = v16;
      if (v14 <= 0.0) {
        int v17 = -8388608;
      }
      else {
        int v17 = 2139095040;
      }
      *(_DWORD *)(a1 + 1032) = v17;
      *(float *)(a1 + 1036) = v14;
      float v18 = v13 + v15;
      *(float *)(a1 + 1040) = v18;
      *(float *)(a1 + 1044) = v14;
      *(float *)(a1 + 1048) = v18;
    }
    uint64_t v19 = v5 ? v5 : v4;
    if (v19)
    {
      switch(*(_DWORD *)(v19 + 192))
      {
        case 1:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          float v21 = v87;
          float v20 = v88;
          float v22 = (float)-v88 / v87;
          *(float *)(a1 + 1020) = v22;
          float v23 = v86;
          *(float *)(a1 + 1028) = v86;
          *(_DWORD *)(a1 + 1024) = 2139095040;
          if (v21 <= 0.0) {
            int v24 = -8388608;
          }
          else {
            int v24 = 2139095040;
          }
          *(_DWORD *)(a1 + 1032) = v24;
          float v25 = v23;
          if (v21 <= 0.0)
          {
            *(_DWORD *)(a1 + 1020) = -8388608;
            *(_DWORD *)(a1 + 1028) = 2139095040;
            *(float *)(a1 + 1024) = v22;
            *(float *)(a1 + 1032) = v23;
          }
          float v26 = v85;
          BOOL v27 = v21 == 0.0;
          BOOL v28 = v20 == 0.0;
          if (v85 == 0.0) {
            BOOL v27 = 1;
          }
          float v29 = v21 * v85;
          if (v85 == 0.0) {
            BOOL v28 = 1;
          }
          if (v27) {
            float v30 = 0.0;
          }
          else {
            float v30 = v29;
          }
          *(float *)(a1 + 1044) = v30;
          float v31 = v20 * v26;
          if (v28) {
            float v31 = 0.0;
          }
          *(float *)(a1 + 1048) = v31 + v25;
          if (v29 == 0.0) {
            float v32 = 0.0;
          }
          else {
            float v32 = v29;
          }
          *(float *)(a1 + 1036) = ZinF32ToNearestF19(v32);
          BOOL v33 = v85 == 0.0 || v88 == 0.0;
          float v34 = v88 * v85;
          if (v33) {
            float v34 = 0.0;
          }
          *(float *)(a1 + 1040) = v86 + v34;
          return;
        case 5:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          *(float *)(a1 + 1020) = (float)(-2.5 - v88) / v87;
          *(float *)(a1 + 1028) = ZinF32ToNearestF19(0.0);
          *(float *)(a1 + 1024) = (float)(2.5 - v88) / v87;
          *(float *)(a1 + 1032) = ZinF32ToNearestF19(v85 + v86);
          BOOL v51 = v87 == 0.0;
          float v52 = (float)(v88 * 0.2) + 0.5;
          BOOL v53 = v52 == 0.0;
          float v54 = v86;
          if (v85 == 0.0) {
            BOOL v51 = 1;
          }
          float v48 = (float)(v87 * v85) * 0.2;
          if (v85 == 0.0) {
            BOOL v53 = 1;
          }
          if (v51) {
            float v48 = 0.0;
          }
          float v55 = v85 * v52;
          if (v53) {
            float v55 = 0.0;
          }
          *(float *)(a1 + 1036) = v48;
          float v50 = v54 + v55;
          goto LABEL_81;
        case 7:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          float v35 = *(float *)(v19 + 204);
          float v36 = *(float *)(v19 + 208);
          float v37 = (float)(v35 - v88) / v87;
          BOOL v38 = v35 == 0.0;
          BOOL v39 = v36 == 0.0;
          if (v85 == 0.0) {
            BOOL v38 = 1;
          }
          float v40 = v35 * v85;
          if (v85 == 0.0) {
            BOOL v39 = 1;
          }
          if (v38) {
            float v41 = 0.0;
          }
          else {
            float v41 = v40;
          }
          if (v39) {
            float v42 = 0.0;
          }
          else {
            float v42 = v36 * v85;
          }
          float v43 = v86 + v41;
          float v44 = v86 + v42;
          *(float *)(a1 + 1024) = ZinF32ToNearestF19((float)(v36 - v88) / v87);
          *(float *)(a1 + 1020) = ZinF32ToNearestF19(v37);
          *(float *)(a1 + 1032) = ZinF32ToNearestF19(v44);
          *(float *)(a1 + 1028) = ZinF32ToNearestF19(v43);
          BOOL v45 = v87 == 0.0;
          BOOL v46 = v88 == 0.0;
          float v47 = v86;
          float v48 = v87 * v85;
          float v49 = v85 * v88;
          if (v85 == 0.0)
          {
            BOOL v45 = 1;
            BOOL v46 = 1;
          }
          if (v45) {
            float v48 = 0.0;
          }
          if (v46) {
            float v49 = 0.0;
          }
          *(float *)(a1 + 1036) = v48;
          float v50 = v47 + v49;
LABEL_81:
          *(float *)(a1 + 1040) = v50;
          *(float *)(a1 + 1044) = v48;
          *(float *)(a1 + 1048) = v50;
          return;
        case 8:
          *(_DWORD *)(a1 + 996) |= 0x20u;
          *(void *)(a1 + 1020) = 0x7F800000FF800000;
          float v57 = v87;
          float v56 = v88;
          BOOL v58 = v87 == 0.0;
          BOOL v59 = v88 == 0.0;
          float v61 = v85;
          float v60 = v86;
          BOOL v62 = v85 == 0.0;
          BOOL v63 = v85 <= 0.0;
          if (v85 <= 0.0) {
            int v64 = 2139095040;
          }
          else {
            int v64 = -8388608;
          }
          *(_DWORD *)(a1 + 1028) = v64;
          if (v63) {
            int v65 = -8388608;
          }
          else {
            int v65 = 2139095040;
          }
          *(_DWORD *)(a1 + 1032) = v65;
          float v66 = *(float *)(v19 + 216);
          int v67 = v62 || v58;
          int v68 = v62 || v59;
          float v69 = 0.0;
          if (v67) {
            float v70 = 0.0;
          }
          else {
            float v70 = v61 * v57;
          }
          *(float *)(a1 + 1044) = v70;
          float v71 = v61 * v56;
          if (v68) {
            float v71 = 0.0;
          }
          *(float *)(a1 + 1048) = v60 + v71;
          uint64_t v72 = (float *)operator new(0xCuLL);
          uint64_t v73 = v72;
          uint64_t v74 = 0;
          *uint64_t v72 = v57;
          v72[1] = v61;
          v72[2] = v66;
          break;
        default:
          ZinAssertImpl("Unexpected activation function!!!");
      }
      while (v72[v74] != 0.0)
      {
        if (++v74 == 3)
        {
          float v69 = v66 * (float)(v61 * v57);
          break;
        }
      }
      *(float *)(a1 + 1036) = ZinF32ToNearestF19(v69);
      operator delete(v73);
      float v75 = v88;
      float v76 = v85;
      long long v77 = (float *)operator new(0xCuLL);
      uint64_t v78 = 0;
      float *v77 = v75;
      v77[1] = v66;
      _OWORD v77[2] = v76;
      while (v77[v78] != 0.0)
      {
        if (++v78 == 3)
        {
          float v79 = (float)(v66 * v75) * v76;
          goto LABEL_108;
        }
      }
      float v79 = 0.0;
LABEL_108:
      *(float *)(a1 + 1040) = v79 + v86;
      operator delete(v77);
      float v80 = v87;
      float v81 = v85;
      uint64_t v82 = (float *)operator new(0xCuLL);
      uint64_t v83 = 0;
      *uint64_t v82 = v80;
      v82[1] = v81;
      v82[2] = v66;
      do
      {
        if (v82[v83] == 0.0)
        {
          int v84 = 2139095040;
          goto LABEL_115;
        }
        ++v83;
      }
      while (v83 != 3);
      if ((float)(v66 * (float)(v80 * v81)) <= 0.0) {
        int v84 = 2139095040;
      }
      else {
        int v84 = -8388608;
      }
LABEL_115:
      *(_DWORD *)(a1 + 1028) = v84;
      operator delete(v82);
    }
  }
}

void sub_21116B19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CodegenReductionMode<8u>(int a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v15[0] = xmmword_211EF5990;
  v15[1] = unk_211EF59A0;
  v15[2] = xmmword_211EF59B0;
  std::map<ZinIrReductionType,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo>>>::map[abi:ne180100]((uint64_t)&v13, (int *)v15, 4);
  LODWORD(v15[0]) = 5;
  *(void *)((char *)v15 + 4) = 0x200000002;
  std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>(&v13, (int *)v15, (uint64_t)v15);
  LODWORD(v15[0]) = 4;
  *(void *)((char *)v15 + 4) = 0x400000003;
  std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>(&v13, (int *)v15, (uint64_t)v15);
  uint64_t v4 = v14[0];
  if (!v14[0]) {
    goto LABEL_19;
  }
  uint64_t v5 = v14;
  do
  {
    uint64_t v6 = v4;
    int v7 = v5;
    int v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1) {
      uint64_t v5 = (void **)v4;
    }
    else {
      ++v4;
    }
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  if (v5 != v14 && (v8 >= a1 ? (BOOL v9 = v6) : (BOOL v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    int v12 = *((_DWORD *)v5 + 9);
    *(_DWORD *)(a2 + 996) = *(_DWORD *)(a2 + 996) & 0xFFFFFFFC | v5[4] & 3;
    ZinAneTd<8u>::SetPaddingMode(a2, v12, 0);
    uint64_t v10 = 1;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      CodegenReductionMode<17u>(a1);
    }
    uint64_t v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14[0]);
  return v10;
}

void sub_21116B348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL CodegenReductionPostProcess<8u>(signed int a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v17 = xmmword_211EF59C0;
  uint64_t v18 = 0x200000010;
  std::map<ZinIrNonLinearMode,unsigned int>::map[abi:ne180100]((uint64_t)&v14, (int *)&v17, 3);
  *(void *)&long long v17 = 0x30000000FLL;
  std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>(&v14, (int *)&v17, (uint64_t *)&v17);
  uint64_t v4 = v15[0];
  if (!v15[0]) {
    goto LABEL_19;
  }
  uint64_t v5 = v15;
  do
  {
    uint64_t v6 = v4;
    int v7 = v5;
    signed int v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1) {
      uint64_t v5 = (void **)v4;
    }
    else {
      ++v4;
    }
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  if (v5 != v15 && (v8 >= a1 ? (BOOL v9 = v6) : (BOOL v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    unint64_t v13 = *((unsigned int *)v5 + 8);
    *(_DWORD *)(a2 + 996) = *(_DWORD *)(a2 + 996) & 0xFFFFCFFF | ((v5[4] & 3) << 12);
    BOOL v11 = CheckRegValueRange(v13, (unsigned int *)(*(void *)(a2 + 1296) + 608));
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinIrEnumToStringUtil::NonLinearModeToString(a1, &v17);
      CodegenReductionPostProcess<17u>((char *)&v17, (uint64_t)v16, v10);
    }
    BOOL v11 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_21116B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL CodegenReductionFinalScaleEpsilon<8u>(int a1, unsigned int a2, uint64_t a3, float a4, float a5)
{
  if (a1 == 3) {
    a4 = (float)(1.0 / (float)a2) * a4;
  }
  if (a4 == 0.0 || (LODWORD(a4) & 0x7F800000) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      CodegenReductionFinalScaleEpsilon<8u>(result, v8, v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  else
  {
    ZinAneTd<8u>::SetPEFinalScale(a3, a4);
    *(float *)(a3 + 1008) = ZinF32ToNearestF19(a5);
    return 1;
  }
  return result;
}

uint64_t CodegenReductionResult<8u>(int a1, void *a2, uint64_t a3)
{
  if ((a1 & 0xFFFFFFFE) != 4) {
    return 1;
  }
  int v14 = 0;
  BOOL ReductionResultIndexGlobal = GetReductionResultIndexGlobalArg<8u>(a2, &v14);
  if (ReductionResultIndexGlobal)
  {
    *(_DWORD *)(a3 + 996) = *(_DWORD *)(a3 + 996) & 0xFFFFF9FF | ((v14 & 3) << 9);
  }
  else
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      CodegenReductionResult<8u>(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return ReductionResultIndexGlobal;
}

uint64_t std::map<ZinIrReductionType,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<8u>(ZinIrReductionType,ZinAneTd<8u> *)::ModeInfo>>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 12 * a3;
    do
    {
      std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_hint_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 12;
    }
    while (v6);
  }
  return a1;
}

void sub_21116B69C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL GetReductionResultIndexGlobalArg<8u>(void *a1, int *a2)
{
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  if (v3 <= 1) {
    unsigned int v4 = v2 > 1;
  }
  else {
    unsigned int v4 = (v2 > 1) + 1;
  }
  uint64_t v5 = a1[4];
  if (v5 > 1) {
    ++v4;
  }
  if (v4 >= 2)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      GetReductionResultIndexGlobalArg<8u>(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    return result;
  }
  if (v3 >= 2)
  {
    int v14 = 2;
LABEL_14:
    *a2 = v14;
    return 1;
  }
  if (v5 > 1)
  {
    int v14 = 3;
    goto LABEL_14;
  }
  if (v2 < 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      GetReductionResultIndexGlobalArg<8u>(result, v15, v16, v17, v18, v19, v20, v21);
      return 0;
    }
  }
  else
  {
    BOOL result = 1;
    *a2 = 1;
  }
  return result;
}

void PECodegenUtils::HandlePECommonPostOps<8u>(uint64_t a1, ZinIrHalH13g *a2, ZinPELayer *a3)
{
  if ((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 792))(a3))
  {
    int v6 = 1;
LABEL_6:
    ZinAneTd<8u>::SetPECondition((uint64_t)a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 800))(a3))
  {
    unsigned int v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6) {
      ZinAssertImpl("Error: Invalid non linear mode");
    }
    int v6 = dword_211EF59FC[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (!*(unsigned char *)(a1 + 1584))
  {
    if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 672))(a3))
    {
      uint64_t v8 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 768))(a3);
      if (ZinQuantLayer::HasZeroPoint(v8)) {
        ZinAssertImpl("Unexpected quantization zero_point\n");
      }
    }
  }
  if (*(unsigned char *)(a1 + 1129)) {
    PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<8u>((uint64_t)a2, a3);
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 680))(a3))
  {
    (*(void (**)(ZinPELayer *))(*(void *)a3 + 776))(a3);
    ZinIrHalH13g::~ZinIrHalH13g(a2);
  }
}

BOOL ZinAneTd<8u>::ValidateOCGSizes(_DWORD *a1, uint64_t a2, int *a3)
{
  unsigned int v5 = *(_DWORD *)(*(void *)(a2 + 64) + 8) - 85;
  BOOL v6 = v5 > 5;
  int v7 = (1 << v5) & 0x31;
  BOOL v8 = v6 || v7 == 0;
  if (v8 && !*(void *)(a2 + 384)) {
    return 1;
  }
  unsigned int v9 = a1[132] & 7;
  unint64_t v10 = a1[133];
  uint64_t v11 = (v10 >> 28) & 3;
  unint64_t v12 = v10 >> 30;
  unint64_t v13 = a1[134];
  uint64_t v14 = (v13 >> 13) & 3;
  if ((a1[139] & 0xC) == 4)
  {
    switch(v11 * v12 * v14)
    {
      case 1:
        if (v9 < 6) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 2:
        if (v9 < 5) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 4:
        if (v9 < 4) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 8:
        if (v9 < 3) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      default:
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_51;
        }
        break;
    }
  }
  else
  {
    unsigned int v23 = a1[127] & 3;
    if (v23 > 1)
    {
      if (v23 == 2)
      {
        switch(v11 * v12 * v14)
        {
          case 1:
            if (v9 < 5) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 2:
            if (v9 < 4) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 4:
            if (v9 < 3) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 8:
            if (v9 >= 2)
            {
              BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (result)
              {
LABEL_62:
                ZinAneTd<17u>::ValidateOCGSizes(result, v16, v17, v18, v19, v20, v21, v22);
                return 0;
              }
            }
            else
            {
LABEL_56:
              uint64_t v39 = v13 & 0x1F;
              if ((a1[134] & 0x1Fu) < 2) {
                return 1;
              }
              v41.i64[1] = 1 << v9;
              int NESmallSourceMode = ZinAneTd<8u>::GetNESmallSourceMode((uint64_t)a1);
              __int16 v48 = 0;
              uint64_t v40 = a1[134] >> 6;
              v41.i64[0] = v39;
              uint64_t v43 = v40;
              uint64_t v44 = v11;
              unint64_t v45 = v12;
              uint64_t v46 = v14;
              if ((a1[127] & 3) == 3) {
                ZinAssertImpl("Error: Invalid tensor format", *(_OWORD *)&v41);
              }
              int v42 = dword_211EF5A14[a1[127] & 3];
              BOOL result = ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v41, a3) == 0;
            }
            break;
          default:
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result)
            {
LABEL_51:
              ZinAneTd<17u>::ValidateOCGSizes(result, v32, v33, v34, v35, v36, v37, v38);
              return 0;
            }
            break;
        }
      }
      else
      {
        BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v24) {
          ZinAneTd<8u>::ValidateOCGSizes(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        return 0;
      }
    }
    else
    {
      switch(v11 * v12 * v14)
      {
        case 1:
          if (v9 < 4) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 2:
          if (v9 < 3) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 4:
          if (v9 < 2) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 8:
          if (!v9) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        default:
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_51;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<8u>::SetDPE(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (*(unsigned char *)(a1 + 508) & 0x22) == 0 && (*(unsigned char *)(a1 + 1060) & 2) == 0;
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1504))
  {
    int v3 = 7;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 1064);
    if ((v4 & 7) != 0)
    {
      if (v2) {
        int v3 = 5;
      }
      else {
        int v3 = 2;
      }
      if ((*(_DWORD *)(a1 + 1064) & 7u) >= 3) {
        int v3 = 0;
      }
    }
    else
    {
      BOOL v5 = !v2;
      if (v2) {
        int v3 = 3;
      }
      else {
        int v3 = 0;
      }
      if (v5) {
        int v6 = 1;
      }
      else {
        int v6 = 4;
      }
      if ((v4 & 8) != 0) {
        int v3 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a1 + 564) & 0xFFFFFFF0 | v3;
  return 1;
}

uint64_t AdjustTaskSizeForRdar107730882<8u>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 200);
  uint64_t v5 = 4 * (*(unsigned int (**)(void *, uint64_t))(*v4 + 24))(v4, 25);
  uint64_t v6 = *(unsigned int *)(a1 + 184) + v5;
  uint64_t result = ZinAlignPower2(v6, *(void *)(a2 + 504));
  if ((result & 0x3F) == 0)
  {
    if ((unint64_t)(result - v6) >= 8) {
      uint64_t v8 = 16 * ((unint64_t)(result - v6) < 0x10);
    }
    else {
      uint64_t v8 = 8;
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, unint64_t))(*v4 + 32))(v4, 25, (unint64_t)(v8 + v5) >> 2);
    v4[164] = v8;
  }
  return result;
}

void CollectSegmentStats<8u>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  long long v49 = xmmword_211ED50C0;
  char v50 = 0;
  int v53 = 0;
  unsigned int v54 = 0;
  float v56 = 0;
  float v57 = 0;
  __p = 0;
  unsigned int v7 = ZinAlignPower2(2, *(void *)(a1 + 504));
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 != a2)
  {
    uint64_t v44 = 0;
    uint64_t v9 = 0;
    uint64_t v42 = v7;
    unsigned int v43 = v7 >> 2;
    do
    {
      uint64_t v46 = *(void *)(v8 + 16);
      uint64_t v10 = *(void *)(v46 + 200);
      int v11 = *(unsigned __int16 *)(v10 + 8);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46))ZinAssertImpl("Incorrect internal state: collect segment stats"); {
      unint64_t v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46);
      }
      unint64_t v13 = v12;
      if (!v12) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = v56;
      if (v56 >= v57)
      {
        uint64_t v16 = (v56 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (v57 - (unsigned char *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v57 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v57, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v16];
        *(void *)uint64_t v20 = v13[3];
        uint64_t v15 = v20 + 8;
        uint64_t v22 = (char *)__p;
        uint64_t v21 = v56;
        if (v56 != __p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)__p;
        }
        __p = v20;
        float v56 = v15;
        float v57 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)float v56 = v12[3];
        uint64_t v15 = v14 + 8;
      }
      float v56 = v15;
      if (v47)
      {
        uint64_t v24 = v9;
      }
      else
      {
        HIDWORD(v49) = v9;
        uint64_t v25 = *(void *)(a2 + 8);
        if (v25 == v8)
        {
          int v26 = 0;
        }
        else
        {
          int v26 = 0;
          do
          {
            ++v26;
            uint64_t v25 = *(void *)(v25 + 8);
          }
          while (v25 != v8);
        }
        uint64_t v24 = v9 + v42;
        int v53 = v26;
        uint64_t v44 = v9;
      }
      uint64_t v27 = v46;
      *(_DWORD *)(v46 + 184) = v24;
      if (*(unsigned char *)(a1 + 2057))
      {
        if (a4[1] != *a4)
        {
          *(void *)(v10 + 1312) = 0;
          (*(void (**)(uint64_t, void))(*(void *)v10 + 368))(v10, 0);
          uint64_t v27 = v46;
        }
        AdjustTaskSizeForRdar107730882<8u>(v27, a1);
      }
      unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      uint64_t v9 = ZinAlignPower2(v24 + 4 * v28, *(void *)(a1 + 504));
      int v29 = v47;
      if (!v47)
      {
        DWORD2(v47) = v11;
        DWORD1(v47) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) - 1;
        int v29 = v47;
      }
      LODWORD(v47) = v29 + 1;
      if (*(unsigned char *)(v46 + 197))
      {
        unsigned int v54 = *(_DWORD *)(v46 + 184);
        uint64_t v30 = v54;
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, 25);
        HIDWORD(v47) += v31 + ((unint64_t)(v30 - v44) >> 2);
        LODWORD(v48) = v43;
        unint64_t v32 = a4[1];
        if (v32 >= a4[2])
        {
          uint64_t v33 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a4, &v47);
        }
        else
        {
          std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a4, &v47);
          uint64_t v33 = v32 + 80;
        }
        a4[1] = v33;
        __int16 v51 = 0;
        char v52 = 0;
        uint64_t v48 = 0;
        long long v47 = 0uLL;
        long long v49 = xmmword_211ED50C0;
        char v50 = 0;
        int v53 = 0;
        unsigned int v54 = 0;
        if (__p)
        {
          float v56 = (char *)__p;
          operator delete(__p);
        }
        __p = 0;
        float v56 = 0;
        float v57 = 0;
        uint64_t v9 = ZinAlignPower2(v9, *(void *)(a1 + 616));
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != a2);
  }
  uint64_t v34 = *a4;
  uint64_t v35 = a4[1];
  uint64_t v36 = v35 - *a4;
  if (v35 != *a4)
  {
    unint64_t v37 = 0;
    LODWORD(v38) = 0;
    unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * (v36 >> 4);
    while (1)
    {
      uint64_t v40 = v34 + 80 * v37;
      *(_DWORD *)(v40 + 20) = 1;
      *(_DWORD *)(v40 + 24) = v38;
      int64x2_t v41 = (_DWORD *)(v40 + 20);
      unint64_t v38 = (v38 + 1);
      v41[2] = v38;
      if (v39 - 1 == v37) {
        break;
      }
      if (!*(_DWORD *)(v34 + 80 * v38 + 8)) {
        goto LABEL_48;
      }
LABEL_49:
      unint64_t v37 = v38;
      if (v39 <= v38) {
        goto LABEL_50;
      }
    }
    *int64x2_t v41 = 0;
    v41[2] = -1;
LABEL_48:
    *(unsigned char *)(v34 + 80 * v37 + 40) = 1;
    goto LABEL_49;
  }
LABEL_50:
  if (__p)
  {
    float v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_21116C3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
}

uint64_t ZinValidateTd<8u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  *(void *)((char *)&v2754[1] + 4) = *MEMORY[0x263EF8340];
  unsigned int v5 = *(_DWORD *)(a3 + 548);
  unsigned int v6 = (v5 >> 8) & 7;
  unsigned int v7 = (v5 >> 12) & 7;
  if (v7 > v6)
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinValidateTd<8u>::Test(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 3;
  }
  unsigned int v16 = HIWORD(v5) & 7;
  if (v7 > v16)
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinValidateTd<8u>::Test(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 3;
  }
  if (v6 > v16)
  {
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ZinValidateTd<8u>::Test(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    return 3;
  }
  int v34 = (*(_DWORD *)(a3 + 1052) >> 10) & 1;
  if (v34 != ((*(_DWORD *)(a3 + 36) >> 4) & 1))
  {
    BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v45) {
      ZinValidateTd<8u>::Test(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    return 3;
  }
  unsigned int v35 = *(_DWORD *)(a3 + 500);
  unint64_t v36 = v35 & 3;
  if ((v35 & 3) == 3)
  {
    BOOL v37 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v37) {
      ZinValidateTd<8u>::Test(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    return 3;
  }
  uint64_t v55 = *a1;
  unint64_t v2729 = *(unsigned int *)(a3 + 492);
  uint64_t v2731 = a1[1];
  int v2727 = *(_DWORD *)(a3 + 496);
  unint64_t v56 = *(unsigned int *)(a3 + 512);
  uint64_t v2749 = (v56 >> 16) & 0x7FFF;
  unint64_t v57 = v56 & 0x7FFF;
  int v2725 = *(_DWORD *)(a3 + 516);
  int v2737 = *(_DWORD *)(a3 + 504);
  int v58 = *(_DWORD *)(a3 + 508);
  int v2741 = *(_DWORD *)(a3 + 520);
  unint64_t v59 = *(unsigned int *)(a3 + 524);
  unint64_t v60 = (v59 >> 6) & 0x3F;
  uint64_t v61 = v59 & 0x3F;
  uint64_t v62 = (v59 >> 28) & 3;
  unint64_t v2743 = v59;
  unint64_t WUCost = v59 >> 30;
  unint64_t v2739 = *(unsigned int *)(a3 + 528);
  uint64_t v64 = (v2739 >> 13) & 3;
  unsigned int v65 = *(_DWORD *)(a3 + 532);
  LODWORD(v66) = *(_DWORD *)(a3 + 912);
  unint64_t v67 = *(unsigned int *)(a3 + 1160);
  LODWORD(v68) = *(_DWORD *)(a3 + 1056);
  int v2724 = *(_DWORD *)(a3 + 540);
  unsigned int v69 = *(_DWORD *)(a3 + 544);
  unsigned int v2733 = *(_DWORD *)(a3 + 860);
  int v70 = (v2733 >> 2) & 3;
  unint64_t v2721 = *(unsigned int *)(a3 + 536);
  unint64_t v71 = v2721 & 0x7FFF;
  int v2723 = *(_DWORD *)(a3 + 988);
  int v72 = dword_211ED50F0[(v5 >> 2) & 3];
  unsigned int v2745 = dword_211EF5A14[v36];
  int v73 = *(_DWORD *)(a3 + 776);
  int v2735 = v5 & 0xC;
  if (v2735 == 4)
  {
    if (v6 != v7 || v6 != v16)
    {
      BOOL v103 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v103) {
        ZinValidateTd<8u>::Test(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      return 3;
    }
    if (v61 >= 9)
    {
      BOOL v129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v129) {
        ZinValidateTd<8u>::Test(v129, v130, v131, v132, v133, v134, v135, v136);
      }
      return 3;
    }
    if (v6 >= 5)
    {
      BOOL v137 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v137) {
        ZinValidateTd<8u>::Test(v137, v138, v139, v140, v141, v142, v143, v144);
      }
      return 3;
    }
    int v2708 = WUCost;
    if (v6 != 4)
    {
      if (v61 != 1 || v60 != 1)
      {
        BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v194) {
          return 3;
        }
        goto LABEL_80;
      }
      if (v62 != 1 || WUCost != 1 || v64 != 1)
      {
        BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v266) {
          return 3;
        }
LABEL_733:
        ZinValidateTd<17u>::Test(v266, v267, v268, v269, v270, v271, v272, v273);
        return 3;
      }
      if (v70 == 2)
      {
        BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v154) {
          return 3;
        }
LABEL_731:
        ZinValidateTd<17u>::Test(v154, v155, v156, v157, v158, v159, v160, v161);
        return 3;
      }
    }
    int v2677 = *(_DWORD *)(a3 + 776);
    uint64_t v2679 = v55;
    unint64_t v2710 = v67;
    int v2713 = v62;
    char v2682 = a5;
    unsigned int v2685 = a4;
    uint64_t v2703 = v61;
    unint64_t v2674 = v60;
    int v2719 = v58;
    uint64_t v2688 = a2;
    unsigned int v2698 = v65;
    char v2716 = v66;
    LODWORD(v66) = v34;
    int v2694 = *(_DWORD *)(a3 + 1056);
    unint64_t v68 = v57;
    int v74 = dword_211ED50F0[(v5 >> 2) & 3];
    unint64_t WUCost = NERasterization::GetWUCost((1 << v6), (1 << v6), (1 << v6), v71, v72, 0, v57, v2749, 0, 0, v2745, v55);
    int v72 = v74;
    unint64_t v67 = v2710;
    LODWORD(v62) = v2713;
    uint64_t v61 = v2703;
    uint64_t v64 = (v2739 >> 13) & 3;
    unsigned int v65 = v2698;
    unint64_t v60 = v2674;
    unint64_t v57 = v68;
    LOWORD(v68) = v2694;
    LOBYTE(v73) = v2677;
    a2 = v2688;
    LODWORD(v36) = v35 & 3;
    int v34 = v66;
    LOBYTE(v66) = v2716;
    unint64_t v71 = v2721 & 0x7FFF;
    int v58 = v2719;
    a5 = v2682;
    a4 = v2685;
    uint64_t v55 = v2679;
    BOOL v1298 = WUCost == 1;
    LODWORD(WUCost) = v2708;
    if (!v1298)
    {
      BOOL v186 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v186) {
        ZinValidateTd<8u>::Test(v186, v187, v188, v189, v190, v191, v192, v193);
      }
      return 3;
    }
  }
  unsigned int v2707 = v64;
  unsigned int v2709 = WUCost;
  char v2678 = v73;
  unsigned int v2673 = (v35 >> 4) & 3;
  BOOL v75 = v2673 != 2;
  if (v36 == 2 && v2673 != 2)
  {
    unint64_t v2711 = v67;
    int v2714 = v62;
    char v2683 = a5;
    unsigned int v2686 = a4;
    uint64_t v2680 = v55;
    unsigned int v76 = v2745;
    uint64_t v2704 = v61;
    unint64_t v2675 = v60;
    uint64_t v2689 = a2;
    int v2692 = v36;
    unsigned int v2699 = v65;
    char v2717 = v66;
    unint64_t v66 = v71;
    unsigned int v2746 = v69;
    int v77 = v34;
    __int16 v2695 = v68;
    unint64_t v68 = v57;
    int HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v55, v76, (1 << (BYTE2(v5) & 7)), (1 << v7), (1 << v6), v72, 0, v2749, v57, 0, 0);
    BOOL v75 = v2673 != 2;
    unint64_t v67 = v2711;
    LODWORD(v62) = v2714;
    uint64_t v61 = v2704;
    unsigned int v65 = v2699;
    unint64_t v60 = v2675;
    unint64_t v57 = v68;
    LOWORD(v68) = v2695;
    a2 = v2689;
    LODWORD(v36) = v2692;
    int v34 = v77;
    unsigned int v69 = v2746;
    unint64_t v71 = v66;
    LOBYTE(v66) = v2717;
    a5 = v2683;
    a4 = v2686;
    uint64_t v55 = v2680;
    if (HasWorkUnitWidthOf8)
    {
      BOOL v79 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v79) {
        ZinValidateTd<8u>::Test(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      return 3;
    }
  }
  if ((*(unsigned char *)(a3 + 864) & 2) != 0
    && *(void *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 876) >> 4) & 0x1FFFF) > *(void *)(v55 + 464))
  {
    BOOL v87 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v87) {
      ZinValidateTd<8u>::Test(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    return 3;
  }
  if ((*(unsigned char *)(a3 + 868) & 2) != 0
    && *(void *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 896) >> 4) & 0x1FFFF) > *(void *)(v55 + 464))
  {
    BOOL v95 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v95) {
      ZinValidateTd<8u>::Test(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    return 3;
  }
  if ((*(unsigned char *)(a3 + 912) & 2) != 0
    && *(void *)(v55 + 416) * (((unint64_t)*(unsigned int *)(a3 + 920) >> 4) & 0x1FFFF) > *(void *)(v55 + 464))
  {
    BOOL v111 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v111) {
      ZinValidateTd<8u>::Test(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    return 3;
  }
  int v2720 = v58;
  char v2718 = v66;
  int v119 = v68 & 7;
  if (!(v5 >> 4))
  {
    if ((v68 & 7) != 0)
    {
      if (v119 == 3)
      {
        int v145 = *(_DWORD *)(a3 + 1056);
        if ((v145 & 0x80000) != 0)
        {
          if ((v2733 & 8) == 0)
          {
            BOOL v250 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v250) {
              ZinValidateTd<8u>::Test(v250, v251, v252, v253, v254, v255, v256, v257);
            }
            return 3;
          }
        }
        else if ((v70 - 1) >= 2)
        {
          BOOL v146 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v146) {
            ZinValidateTd<8u>::Test(v146, v147, v148, v149, v150, v151, v152, v153);
          }
          return 3;
        }
        if ((v145 & 0x800000) != 0)
        {
          BOOL v282 = v60 >= 2 || v61 >= 2;
          if (v282 && v70 != 2)
          {
            BOOL v283 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v283) {
              ZinValidateTd<8u>::Test(v283, v284, v285, v286, v287, v288, v289, v290);
            }
            return 3;
          }
        }
      }
      else if (v70)
      {
        BOOL v178 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v178) {
          return 3;
        }
        goto LABEL_557;
      }
    }
    else if (((v2733 >> 2) & 1 | 2) != 2)
    {
      BOOL v170 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v170) {
        ZinValidateTd<8u>::Test(v170, v171, v172, v173, v174, v175, v176, v177);
      }
      return 3;
    }
    if (((v5 & 8) != 0 || v2735 == 4 && v6 <= 2) && v70 == 2)
    {
      BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v154) {
        return 3;
      }
      goto LABEL_731;
    }
  }
  unsigned int v120 = v65 & 0x1FFF;
  if (v34)
  {
    if (v120 <= 1)
    {
      BOOL v162 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v162) {
        ZinValidateTd<8u>::Test(v162, v163, v164, v165, v166, v167, v168, v169);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1056) & 7) != 0)
    {
      BOOL v121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v121) {
        ZinValidateTd<8u>::Test(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1056) & 0x4018) == 8)
    {
      BOOL v202 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v202) {
        ZinValidateTd<8u>::Test(v202, v203, v204, v205, v206, v207, v208, v209);
      }
      return 3;
    }
  }
  unsigned int v2671 = v5 >> 4;
  unint64_t v2712 = v67;
  unsigned int v2715 = v62;
  uint64_t v210 = (v2743 >> 13) & 3;
  unint64_t v211 = v2739;
  uint64_t v212 = *(void *)&v2737 & 0x1FFFFLL;
  uint64_t v2734 = (v2743 >> 15) & 3;
  unint64_t v213 = v58 & 0x1FFFF;
  uint64_t v2676 = v2739 >> 6;
  uint64_t v214 = v2741 & 7;
  unint64_t v2742 = (v2743 >> 17) & 0x1F;
  unint64_t v2738 = v2739 & 0x1F;
  unint64_t v2744 = (v2743 >> 22) & 0x1F;
  unint64_t v215 = (v2739 >> 8) & 0xF;
  unsigned int v2740 = HIWORD(v65);
  if (v119 == 1)
  {
    if (v212 != v213)
    {
      BOOL v242 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v242) {
        return 3;
      }
      goto LABEL_104;
    }
    if (v214)
    {
      BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v216) {
        return 3;
      }
LABEL_89:
      ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
      return 3;
    }
    uint64_t v2706 = v61;
    if (v61 == 1)
    {
      uint64_t v2669 = (v211 >> 8) & 0xF;
      BOOL v2747 = v75;
      unint64_t v2670 = v210;
      __int16 v2696 = v68;
      int v2702 = v70;
      uint64_t v299 = a2;
      if (v60 == 1)
      {
        if (v2738 == 1)
        {
          if (v210 == 1)
          {
            if (v2734 == 1)
            {
              if (v2676 == 1)
              {
                if (v2742)
                {
                  BOOL v300 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v300) {
                    return 3;
                  }
LABEL_141:
                  ZinValidateTd<17u>::Test(v300, v301, v302, v303, v304, v305, v306, v307);
                  return 3;
                }
                if (v2744)
                {
                  BOOL v432 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v432) {
                    return 3;
                  }
LABEL_224:
                  ZinValidateTd<17u>::Test(v432, v433, v434, v435, v436, v437, v438, v439);
                  return 3;
                }
                if (v2669)
                {
                  BOOL v448 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v448) {
                    return 3;
                  }
LABEL_232:
                  ZinValidateTd<17u>::Test(v448, v449, v450, v451, v452, v453, v454, v455);
                  return 3;
                }
                if (v2715 == 1)
                {
                  if (v2709 == 1)
                  {
                    if (v2707 == 1)
                    {
                      if ((v65 & 0x4000) == 0)
                      {
                        BOOL v472 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v472) {
                          return 3;
                        }
LABEL_246:
                        ZinValidateTd<10u>::Test(v472, v473, v474, v475, v476, v477, v478, v479);
                        return 3;
                      }
                      if (HIWORD(v65) != 1)
                      {
                        BOOL v577 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v577) {
                          ZinValidateTd<8u>::Test(v577, v578, v579, v580, v581, v582, v583, v584);
                        }
                        return 3;
                      }
                      if (v2735 == 4)
                      {
                        BOOL v553 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v553) {
                          return 3;
                        }
LABEL_284:
                        ZinValidateTd<10u>::Test(v553, v554, v555, v556, v557, v558, v559, v560);
                        return 3;
                      }
                      LODWORD(v68) = v36;
                      unint64_t v36 = v71;
                      v593 = (void *)v55;
                      if (((*(_DWORD *)(a3 + 1052) ^ *(_DWORD *)(a3 + 500)) & 3) != 0)
                      {
                        BOOL v594 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v594) {
                          return 3;
                        }
LABEL_301:
                        ZinValidateTd<17u>::Test(v594, v595, v596, v597, v598, v599, v600, v601);
                        return 3;
                      }
                      if ((v2696 & 8) == 0)
                      {
                        BOOL v611 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v611) {
                          return 3;
                        }
LABEL_312:
                        ZinValidateTd<8u>::Test(v611, v612, v613, v614, v615, v616, v617, v618);
                        return 3;
                      }
                      if ((v2696 & 0x10) == 0)
                      {
                        if ((v2696 & 0x4000) == 0)
                        {
                          unint64_t v619 = v57;
                          int v620 = v34;
                          unsigned int v630 = *(_DWORD *)(a3 + 536) & 0x7FFF;
                          if (v630 != 1) {
                            unsigned int v630 = v2749 % v630 == 1;
                          }
                          if (!v16) {
                            unsigned int v630 = 1;
                          }
                          if (!v7 && v630)
                          {
                            if (v68 > 1)
                            {
                              if (v619 % v593[232] <= v593[234])
                              {
                                BOOL v776 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (!v776) {
                                  return 3;
                                }
                                goto LABEL_428;
                              }
                            }
                            else if (v619 % v593[233] <= v593[232])
                            {
                              BOOL v622 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (!v622) {
                                return 3;
                              }
LABEL_327:
                              ZinValidateTd<6u>::Test(v622, v623, v624, v625, v626, v627, v628, v629);
                              return 3;
                            }
                          }
                          if (!v7 && (*(_DWORD *)(a3 + 536) & 0x7FFF0000) != 0)
                          {
                            BOOL v672 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            if (!v672) {
                              return 3;
                            }
LABEL_362:
                            ZinValidateTd<10u>::Test(v672, v673, v674, v675, v676, v677, v678, v679);
                            return 3;
                          }
                          goto LABEL_368;
                        }
                        BOOL v648 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v648) {
                          return 3;
                        }
LABEL_348:
                        ZinValidateTd<8u>::Test(v648, v649, v650, v651, v652, v653, v654, v655);
                        return 3;
                      }
                      BOOL v640 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (!v640) {
                        return 3;
                      }
LABEL_344:
                      ZinValidateTd<8u>::Test(v640, v641, v642, v643, v644, v645, v646, v647);
                      return 3;
                    }
                    BOOL v537 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v537) {
                      return 3;
                    }
LABEL_800:
                    ZinValidateTd<17u>::Test(v537, v538, v539, v540, v541, v542, v543, v544);
                    return 3;
                  }
                  BOOL v521 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v521) {
                    return 3;
                  }
LABEL_791:
                  ZinValidateTd<17u>::Test(v521, v522, v523, v524, v525, v526, v527, v528);
                  return 3;
                }
                BOOL v496 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v496) {
                  return 3;
                }
LABEL_778:
                ZinValidateTd<17u>::Test(v496, v497, v498, v499, v500, v501, v502, v503);
                return 3;
              }
              BOOL v416 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v416) {
                return 3;
              }
LABEL_432:
              ZinValidateTd<17u>::Test(v416, v417, v418, v419, v420, v421, v422, v423);
              return 3;
            }
            BOOL v400 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v400) {
              return 3;
            }
LABEL_211:
            ZinValidateTd<17u>::Test(v400, v401, v402, v403, v404, v405, v406, v407);
            return 3;
          }
          BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v379) {
            return 3;
          }
LABEL_197:
          ZinValidateTd<17u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
          return 3;
        }
        BOOL v371 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v371) {
          return 3;
        }
LABEL_434:
        ZinValidateTd<17u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
        return 3;
      }
      BOOL v339 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v339) {
        return 3;
      }
LABEL_176:
      ZinValidateTd<17u>::Test(v339, v340, v341, v342, v343, v344, v345, v346);
      return 3;
    }
    BOOL v331 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v331) {
      return 3;
    }
LABEL_172:
    ZinValidateTd<17u>::Test(v331, v332, v333, v334, v335, v336, v337, v338);
    return 3;
  }
  if (v119 == 2)
  {
    if (v212 != 2 * v213)
    {
      BOOL v234 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v234) {
        ZinValidateTd<8u>::Test(v234, v235, v236, v237, v238, v239, v240, v241);
      }
      return 3;
    }
    if (v214)
    {
      BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v216) {
        return 3;
      }
      goto LABEL_89;
    }
    uint64_t v2706 = v61;
    if (v61 == 1)
    {
      uint64_t v2669 = (v211 >> 8) & 0xF;
      BOOL v2747 = v75;
      unint64_t v2670 = v210;
      __int16 v2696 = v68;
      int v2702 = v70;
      uint64_t v299 = a2;
      if (v60 == 1)
      {
        if (v2738 == 1)
        {
          if (v210 == 1)
          {
            if (v2734 == 1)
            {
              if (v2676 == 1)
              {
                if (v2742)
                {
                  BOOL v300 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v300) {
                    return 3;
                  }
                  goto LABEL_141;
                }
                if (v2744)
                {
                  BOOL v432 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v432) {
                    return 3;
                  }
                  goto LABEL_224;
                }
                if (v2669)
                {
                  BOOL v448 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v448) {
                    return 3;
                  }
                  goto LABEL_232;
                }
                if (v2715 == 1)
                {
                  if (v2709 == 1)
                  {
                    if (v2707 == 1)
                    {
                      if ((v65 & 0x4000) == 0)
                      {
                        BOOL v472 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v472) {
                          return 3;
                        }
                        goto LABEL_246;
                      }
                      if (HIWORD(v65) != 2)
                      {
                        BOOL v569 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v569) {
                          ZinValidateTd<8u>::Test(v569, v570, v571, v572, v573, v574, v575, v576);
                        }
                        return 3;
                      }
                      if (v2735 == 4)
                      {
                        BOOL v553 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v553) {
                          return 3;
                        }
                        goto LABEL_284;
                      }
                      LODWORD(v68) = v36;
                      unint64_t v36 = v71;
                      v593 = (void *)v55;
                      if (((*(_DWORD *)(a3 + 1052) ^ *(_DWORD *)(a3 + 500)) & 3) != 0)
                      {
                        BOOL v594 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v594) {
                          return 3;
                        }
                        goto LABEL_301;
                      }
                      if ((v2696 & 8) == 0)
                      {
                        BOOL v611 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v611) {
                          return 3;
                        }
                        goto LABEL_312;
                      }
                      if ((v2696 & 0x10) == 0)
                      {
                        if ((v2696 & 0x4000) == 0)
                        {
                          unint64_t v619 = v57;
                          int v620 = v34;
                          unsigned int v621 = *(_DWORD *)(a3 + 536) & 0x7FFF;
                          if (v621 != 1) {
                            unsigned int v621 = v2749 % v621 == 1;
                          }
                          if (!v16) {
                            unsigned int v621 = 1;
                          }
                          if (v7 || !v621) {
                            goto LABEL_359;
                          }
                          if (v68 <= 1)
                          {
                            if (v619 % v593[233] <= v593[232])
                            {
                              BOOL v622 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (!v622) {
                                return 3;
                              }
                              goto LABEL_327;
                            }
LABEL_359:
                            if (!v7 && (*(_DWORD *)(a3 + 536) & 0x7FFF0000) != 0)
                            {
                              BOOL v672 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (!v672) {
                                return 3;
                              }
                              goto LABEL_362;
                            }
LABEL_368:
                            unsigned int v224 = v119 - 3;
                            uint64_t v55 = (uint64_t)v593;
                            unint64_t v71 = v36;
                            int v34 = v620;
                            a2 = v299;
                            LODWORD(v36) = v68;
                            unint64_t v57 = v619;
                            int v70 = v2702;
                            LOWORD(v68) = v2696;
                            uint64_t v61 = v2706;
                            BOOL v75 = v2747;
                            unint64_t v215 = v2669;
                            goto LABEL_96;
                          }
                          if (v619 % v593[232] > v593[234]) {
                            goto LABEL_359;
                          }
                          BOOL v776 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (!v776) {
                            return 3;
                          }
LABEL_428:
                          ZinValidateTd<10u>::Test(v776, v777, v778, v779, v780, v781, v782, v783);
                          return 3;
                        }
                        BOOL v648 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v648) {
                          return 3;
                        }
                        goto LABEL_348;
                      }
                      BOOL v640 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (!v640) {
                        return 3;
                      }
                      goto LABEL_344;
                    }
                    BOOL v537 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v537) {
                      return 3;
                    }
                    goto LABEL_800;
                  }
                  BOOL v521 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v521) {
                    return 3;
                  }
                  goto LABEL_791;
                }
                BOOL v496 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v496) {
                  return 3;
                }
                goto LABEL_778;
              }
              BOOL v416 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v416) {
                return 3;
              }
              goto LABEL_432;
            }
            BOOL v400 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v400) {
              return 3;
            }
            goto LABEL_211;
          }
          BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v379) {
            return 3;
          }
          goto LABEL_197;
        }
        BOOL v371 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v371) {
          return 3;
        }
        goto LABEL_434;
      }
      BOOL v339 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v339) {
        return 3;
      }
      goto LABEL_176;
    }
    BOOL v331 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v331) {
      return 3;
    }
    goto LABEL_172;
  }
  unsigned int v224 = v119 - 3;
  unint64_t v2670 = v210;
  if ((v119 - 3) <= 1 && v36 != (*(_DWORD *)(a3 + 1052) & 3))
  {
    BOOL v274 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v274) {
      ZinValidateTd<8u>::Test(v274, v275, v276, v277, v278, v279, v280, v281);
    }
    return 3;
  }
LABEL_96:
  unint64_t v2705 = v61;
  int v225 = (v5 >> 19) & 7;
  if ((v5 & 0x10000000) != 0)
  {
    if (*(void *)(v55 + 1088) < v57)
    {
      BOOL v258 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v258) {
        ZinValidateTd<8u>::Test(v258, v259, v260, v261, v262, v263, v264, v265);
      }
      return 3;
    }
    unsigned int v2700 = v65;
    if (*(void *)(v55 + 1080) < v213)
    {
      BOOL v291 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v291) {
        ZinValidateTd<8u>::Test(v291, v292, v293, v294, v295, v296, v297, v298);
      }
      return 3;
    }
    BOOL v316 = v75;
    uint64_t v2691 = a2;
    unint64_t v317 = v71;
    uint64_t v318 = v55;
    unsigned int v319 = 1 << v214 << ((v5 >> 19) & 7);
    if (*(unsigned char *)(v2731 + 527) || (int v320 = *(unsigned __int8 *)(v55 + 1270), *(unsigned char *)(v318 + 1270))) {
      int v320 = v319 >= v213;
    }
    if (v2673 <= 1)
    {
      char v321 = (v319 & 0xF) != 0 ? v320 : 1;
      if ((v321 & 1) == 0)
      {
        BOOL v363 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v363) {
          ZinValidateTd<8u>::Test(v363, v364, v365, v366, v367, v368, v369, v370);
        }
        return 3;
      }
    }
    int v322 = (v319 & 7) == 0 || v316;
    if (((v322 | v320) & 1) == 0)
    {
      BOOL v347 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v347) {
        ZinValidateTd<8u>::Test(v347, v348, v349, v350, v351, v352, v353, v354);
      }
      return 3;
    }
    if (v2735 == 4 && v214 >= 5)
    {
      BOOL v323 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v323) {
        ZinValidateTd<8u>::Test(v323, v324, v325, v326, v327, v328, v329, v330);
      }
      return 3;
    }
    uint64_t v55 = v318;
    unint64_t v71 = v317;
    a2 = v2691;
    unsigned int v65 = v2700;
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v266) {
        return 3;
      }
      goto LABEL_733;
    }
  }
  if (v2742 >= v2705 || *(void *)(v55 + 144) < v2742)
  {
    BOOL v226 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v226) {
      ZinValidateTd<8u>::Test(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    return 3;
  }
  unsigned int v2701 = v65;
  __int16 v2697 = v68;
  uint64_t v2690 = a2;
  int v2693 = v36;
  unint64_t v2736 = v212;
  unsigned int v2748 = v69;
  int v2667 = (v5 >> 19) & 7;
  unsigned int v2668 = v214;
  unint64_t v2732 = v2720 & 0x1FFFF;
  unsigned int v2666 = v120;
  int v2665 = v34;
  unint64_t v2672 = v71;
  char v2684 = a5;
  int v2687 = a4;
  if (v2744 >= v60 || *(void *)(v55 + 152) < v2744)
  {
    BOOL v308 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v308) {
      ZinValidateTd<8u>::Test(v308, v309, v310, v311, v312, v313, v314, v315);
    }
    return 3;
  }
  uint64_t v2681 = v55;
  if (v215 >= v2738 || *(void *)(v55 + 160) < v215)
  {
    BOOL v355 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v355) {
      ZinValidateTd<8u>::Test(v355, v356, v357, v358, v359, v360, v361, v362);
    }
    return 3;
  }
  unint64_t v387 = v57;
  uint64_t v2663 = ((int)v57 - 1) * (uint64_t)(int)v2670;
  int64_t v2664 = v2729 & 0x7FFF;
  unint64_t v388 = v2663 - v2742;
  if ((uint64_t)(v2663 - v2742) >= v2664)
  {
    BOOL v408 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v408) {
      ZinValidateTd<8u>::Test(v408, v409, v410, v411, v412, v413, v414, v415);
    }
    return 3;
  }
  uint64_t v2662 = ((int)v2749 - 1) * (uint64_t)(int)v2734;
  unint64_t v389 = v2662 - v2744;
  uint64_t v2730 = (v2729 >> 16) & 0x7FFF;
  if ((uint64_t)(v2662 - v2744) >= v2730)
  {
    BOOL v424 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v424) {
      ZinValidateTd<8u>::Test(v424, v425, v426, v427, v428, v429, v430, v431);
    }
    return 3;
  }
  unsigned int v2726 = v2725 & 0x7FFF;
  int64_t v390 = (int)(v2726 - 1) * (uint64_t)(int)v2676 - v215;
  int64_t v2728 = v2727 & 0x7FFF;
  if (v390 >= v2728)
  {
    BOOL v440 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v440) {
      ZinValidateTd<8u>::Test(v440, v441, v442, v443, v444, v445, v446, v447);
    }
    return 3;
  }
  unint64_t v391 = v60;
  if (v5 >> 4)
  {
    if ((v388 & 0x8000000000000000) != 0)
    {
      BOOL v464 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v464) {
        ZinValidateTd<8u>::Test(v464, v465, v466, v467, v468, v469, v470, v471);
      }
      return 3;
    }
    if ((v389 & 0x8000000000000000) != 0)
    {
      BOOL v480 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v480) {
        ZinValidateTd<8u>::Test(v480, v481, v482, v483, v484, v485, v486, v487);
      }
      return 3;
    }
    if (v390 < 0)
    {
      BOOL v504 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v504) {
        ZinValidateTd<8u>::Test(v504, v505, v506, v507, v508, v509, v510, v511);
      }
      return 3;
    }
  }
  if ((uint64_t)(v388 + ((v2705 - 1 + v2670) & -(uint64_t)v2670)) < v2664)
  {
    BOOL v392 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v392) {
      ZinValidateTd<6u>::Test(v392, v393, v394, v395, v396, v397, v398, v399);
    }
    return 3;
  }
  if ((uint64_t)(v389 + ((v2734 + v60 - 1) & -v2734)) < v2730)
  {
    BOOL v456 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v456) {
      ZinValidateTd<6u>::Test(v456, v457, v458, v459, v460, v461, v462, v463);
    }
    return 3;
  }
  if ((uint64_t)(v390 + ((v2738 + v2676 - 1) & -v2676)) < v2728)
  {
    BOOL v488 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v488) {
      ZinValidateTd<8u>::Test(v488, v489, v490, v491, v492, v493, v494, v495);
    }
    return 3;
  }
  unint64_t v512 = *(void *)(v2681 + 368);
  unint64_t v2661 = (v2676 * v212) * (unint64_t)(v2670 * v2734);
  if (v2661 > v512)
  {
    BOOL v513 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v513) {
      ZinValidateTd<8u>::Test(v513, v514, v515, v516, v517, v518, v519, v520);
    }
    return 3;
  }
  unint64_t v2660 = v2707 * v213 * (unint64_t)(v2715 * v2709);
  if (v2660 > v512)
  {
    BOOL v529 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v529) {
      ZinValidateTd<8u>::Test(v529, v530, v531, v532, v533, v534, v535, v536);
    }
    return 3;
  }
  if (v2715 * (unint64_t)v57 > *(void *)(v2681 + 320))
  {
    BOOL v545 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v545) {
      ZinValidateTd<8u>::Test(v545, v546, v547, v548, v549, v550, v551, v552);
    }
    return 3;
  }
  if (v2709 * (unint64_t)v2749 > *(void *)(v2681 + 336))
  {
    BOOL v561 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v561) {
      ZinValidateTd<8u>::Test(v561, v562, v563, v564, v565, v566, v567, v568);
    }
    return 3;
  }
  if (v2707 * (unint64_t)v2726 > *(void *)(v2681 + 352))
  {
    BOOL v585 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v585) {
      ZinValidateTd<8u>::Test(v585, v586, v587, v588, v589, v590, v591, v592);
    }
    return 3;
  }
  if (v5 & 0x20000000) == 0 && ((v65 >> 14))
  {
    unsigned int v602 = v212 / v2740;
    if (v212 % v2740)
    {
      BOOL v603 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v603) {
        ZinValidateTd<8u>::Test(v603, v604, v605, v606, v607, v608, v609, v610);
      }
      return 3;
    }
    uint64_t v631 = v213 / v602;
    if (v213 % v602)
    {
      BOOL v632 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v632) {
        ZinValidateTd<8u>::Test(v632, v633, v634, v635, v636, v637, v638, v639);
      }
      return 3;
    }
    if (v631 > 1 << v214)
    {
      BOOL v656 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v656) {
        ZinValidateTd<8u>::Test(v656, v657, v658, v659, v660, v661, v662, v663);
      }
      return 3;
    }
    if (v631 < 1 << v214 && v631 << v225 < v213)
    {
      BOOL v664 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v664) {
        ZinValidateTd<8u>::Test(v664, v665, v666, v667, v668, v669, v670, v671);
      }
      return 3;
    }
    if (v631 >= 2 && (v602 & ((1 << v225) + 0x1FFFF)) != 0)
    {
      BOOL v680 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v680) {
        ZinValidateTd<8u>::Test(v680, v681, v682, v683, v684, v685, v686, v687);
      }
      return 3;
    }
  }
  if (v36 == 2)
  {
    if (v2670 == 2)
    {
      if (*(void *)(v2681 + 80) < v2705)
      {
        BOOL v688 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v688) {
          ZinValidateTd<6u>::Test(v688, v689, v690, v691, v692, v693, v694, v695);
        }
        return 3;
      }
    }
    else if (*(void *)(v2681 + 88) < v2705)
    {
      BOOL v704 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v704) {
        ZinValidateTd<8u>::Test(v704, v705, v706, v707, v708, v709, v710, v711);
      }
      return 3;
    }
  }
  else if (v2670 == 2)
  {
    if (*(void *)(v2681 + 56) < v2705)
    {
      BOOL v696 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v696) {
        ZinValidateTd<6u>::Test(v696, v697, v698, v699, v700, v701, v702, v703);
      }
      return 3;
    }
  }
  else if (*(void *)(v2681 + 64) < v2705)
  {
    BOOL v712 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v712) {
      ZinValidateTd<8u>::Test(v712, v713, v714, v715, v716, v717, v718, v719);
    }
    return 3;
  }
  if (v2734 == 2)
  {
    if (*(void *)(v2681 + 104) < v60)
    {
      BOOL v720 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v720) {
        ZinValidateTd<6u>::Test(v720, v721, v722, v723, v724, v725, v726, v727);
      }
      return 3;
    }
  }
  else if (*(void *)(v2681 + 112) < v60)
  {
    BOOL v728 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v728) {
      ZinValidateTd<8u>::Test(v728, v729, v730, v731, v732, v733, v734, v735);
    }
    return 3;
  }
  if (v119)
  {
    if (v2676 == 2)
    {
      if (*(void *)(v2681 + 176) < v2738)
      {
        BOOL v736 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v736) {
          ZinValidateTd<8u>::Test(v736, v737, v738, v739, v740, v741, v742, v743);
        }
        return 3;
      }
    }
    else if (*(void *)(v2681 + 168) < v2738)
    {
      BOOL v752 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v752) {
        ZinValidateTd<8u>::Test(v752, v753, v754, v755, v756, v757, v758, v759);
      }
      return 3;
    }
  }
  else if (v2676 == 2)
  {
    if (*(void *)(v2681 + 120) < v2738)
    {
      BOOL v744 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v744) {
        ZinValidateTd<8u>::Test(v744, v745, v746, v747, v748, v749, v750, v751);
      }
      return 3;
    }
  }
  else if (*(void *)(v2681 + 128) < v2738)
  {
    BOOL v760 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v760) {
      ZinValidateTd<8u>::Test(v760, v761, v762, v763, v764, v765, v766, v767);
    }
    return 3;
  }
  uint64_t v2658 = (v2721 >> 21) & 0x1F;
  unint64_t v2659 = v2724 & 0xF;
  unsigned int v2656 = v2671 - 7;
  uint64_t v2657 = (v2721 >> 26) & 0x1F;
  uint64_t v2722 = (v2721 >> 16) & 0x1F;
  if (!(v5 >> 4)) {
    goto LABEL_582;
  }
  if ((*(unsigned char *)(a3 + 966) & 7) != 0 && ZinValidateTd<8u>::ValidatePEIndex(a3, (void *)v2681))
  {
    BOOL v768 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v768) {
      ZinValidateTd<8u>::Test(v768, v769, v770, v771, v772, v773, v774, v775);
    }
    return 3;
  }
  if (v2715 != 1 || v2709 != 1 || v2707 != 1)
  {
    BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v266) {
      return 3;
    }
    goto LABEL_733;
  }
  if (v2676 != 1)
  {
    BOOL v416 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v416) {
      return 3;
    }
    goto LABEL_432;
  }
  if (v2738 != 1)
  {
    BOOL v371 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v371) {
      return 3;
    }
    goto LABEL_434;
  }
  if (v2736 != v2732)
  {
    BOOL v242 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v242) {
      return 3;
    }
LABEL_104:
    ZinValidateTd<10u>::Test(v242, v243, v244, v245, v246, v247, v248, v249);
    return 3;
  }
  if (v2728 != v2726)
  {
    BOOL v784 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v784) {
      ZinValidateTd<8u>::Test(v784, v785, v786, v787, v788, v789, v790, v791);
    }
    return 3;
  }
  if (v70 == 2)
  {
    BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v154) {
      return 3;
    }
    goto LABEL_731;
  }
  if (*(void *)(v2681 + 976) > v2659)
  {
    BOOL v792 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v792) {
      ZinValidateTd<8u>::Test(v792, v793, v794, v795, v796, v797, v798, v799);
    }
    return 3;
  }
  if (v2658 > v2722)
  {
    BOOL v800 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v800) {
      ZinValidateTd<8u>::Test(v800, v801, v802, v803, v804, v805, v806, v807);
    }
    return 3;
  }
  if (v2657 > v2722)
  {
    BOOL v808 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v808) {
      ZinValidateTd<8u>::Test(v808, v809, v810, v811, v812, v813, v814, v815);
    }
    return 3;
  }
  if (v2722 >= v2672)
  {
    BOOL v824 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v824) {
      ZinValidateTd<8u>::Test(v824, v825, v826, v827, v828, v829, v830, v831);
    }
    return 3;
  }
  if (v2749 - v2722 + v2658 + v2657 > *(void *)(v2681 + 1008) * (v2672 - v2722))
  {
    BOOL v816 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v816) {
      ZinValidateTd<8u>::Test(v816, v817, v818, v819, v820, v821, v822, v823);
    }
    return 3;
  }
  int v832 = v2723 & 3;
  if (v2671 != 8 && v2671 != 1)
  {
    if (v2742 | v2744)
    {
      BOOL v865 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v865) {
        ZinValidateTd<8u>::Test(v865, v866, v867, v868, v869, v870, v871, v872);
      }
      return 3;
    }
    if (v2705 == 1 && v391 == 1)
    {
      if (v2670 != 1)
      {
        BOOL v881 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v881) {
          ZinValidateTd<8u>::Test(v881, v882, v883, v884, v885, v886, v887, v888);
        }
        return 3;
      }
      if (v2730 != v2749)
      {
        BOOL v897 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v897) {
          ZinValidateTd<8u>::Test(v897, v898, v899, v900, v901, v902, v903, v904);
        }
        return 3;
      }
      if (v2664 != v387)
      {
        BOOL v913 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v913) {
          ZinValidateTd<8u>::Test(v913, v914, v915, v916, v917, v918, v919, v920);
        }
        return 3;
      }
      if ((v2748 & 0x100) != 0)
      {
        if ((v2748 & 1) == 0 && v2664 != 1)
        {
          BOOL v929 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v929) {
            ZinValidateTd<8u>::Test(v929, v930, v931, v932, v933, v934, v935, v936);
          }
          return 3;
        }
        if ((v2748 & 2) == 0 && v2730 != 1)
        {
          BOOL v953 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v953) {
            ZinValidateTd<8u>::Test(v953, v954, v955, v956, v957, v958, v959, v960);
          }
          return 3;
        }
      }
      if ((v2748 & 0x200) != 0)
      {
        if (v2671 != 4 && ((v2748 >> 4) & 1) == 0 && v2664 != 1)
        {
          BOOL v945 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v945) {
            ZinValidateTd<8u>::Test(v945, v946, v947, v948, v949, v950, v951, v952);
          }
          return 3;
        }
        if (v2671 != 4 && ((v2748 >> 5) & 1) == 0 && v2730 != 1)
        {
          BOOL v969 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v969) {
            ZinValidateTd<8u>::Test(v969, v970, v971, v972, v973, v974, v975, v976);
          }
          return 3;
        }
      }
      if (v2671 != 4) {
        goto LABEL_511;
      }
      if ((v2748 & 1) == 0)
      {
        if ((v2748 & 2) == 0)
        {
          if ((v2748 & 0x10) == 0)
          {
            if ((v2748 & 0x20) == 0) {
              goto LABEL_555;
            }
            BOOL v849 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v849) {
              return 3;
            }
LABEL_476:
            ZinValidateTd<17u>::Test(v849, v850, v851, v852, v853, v854, v855, v856);
            return 3;
          }
          BOOL v1001 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v1001) {
            return 3;
          }
LABEL_559:
          ZinValidateTd<17u>::Test(v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008);
          return 3;
        }
        BOOL v977 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v977) {
          return 3;
        }
LABEL_542:
        ZinValidateTd<17u>::Test(v977, v978, v979, v980, v981, v982, v983, v984);
        return 3;
      }
      BOOL v961 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v961) {
        return 3;
      }
LABEL_535:
      ZinValidateTd<17u>::Test(v961, v962, v963, v964, v965, v966, v967, v968);
      return 3;
    }
    BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v194) {
      return 3;
    }
LABEL_80:
    ZinValidateTd<19u>::Test(v194, v195, v196, v197, v198, v199, v200, v201);
    return 3;
  }
  if (*(void *)(v2681 + 144) < v2742)
  {
    BOOL v833 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v833) {
      ZinValidateTd<8u>::Test(v833, v834, v835, v836, v837, v838, v839, v840);
    }
    return 3;
  }
  if (*(void *)(v2681 + 152) < v2744)
  {
    BOOL v841 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v841) {
      ZinValidateTd<8u>::Test(v841, v842, v843, v844, v845, v846, v847, v848);
    }
    return 3;
  }
  if (*(void *)(v2681 + 1016) < v2705)
  {
    BOOL v857 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v857) {
      ZinValidateTd<8u>::Test(v857, v858, v859, v860, v861, v862, v863, v864);
    }
    return 3;
  }
  if (*(void *)(v2681 + 1024) < v391)
  {
    BOOL v873 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v873) {
      ZinValidateTd<8u>::Test(v873, v874, v875, v876, v877, v878, v879, v880);
    }
    return 3;
  }
  if ((uint64_t)(v2705 - v2742 + v2663) < v2664)
  {
    BOOL v889 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v889) {
      ZinValidateTd<8u>::Test(v889, v890, v891, v892, v893, v894, v895, v896);
    }
    return 3;
  }
  if ((uint64_t)(v391 - v2744 + v2662) < v2730)
  {
    BOOL v905 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v905) {
      ZinValidateTd<8u>::Test(v905, v906, v907, v908, v909, v910, v911, v912);
    }
    return 3;
  }
  if ((v2748 & 8) != 0)
  {
    BOOL v937 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v937) {
      ZinValidateTd<8u>::Test(v937, v938, v939, v940, v941, v942, v943, v944);
    }
    return 3;
  }
  if (v2748)
  {
    BOOL v961 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v961) {
      return 3;
    }
    goto LABEL_535;
  }
  if ((v2748 & 2) != 0)
  {
    BOOL v977 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v977) {
      return 3;
    }
    goto LABEL_542;
  }
  if ((v2748 & 4) != 0)
  {
    BOOL v985 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v985) {
      ZinValidateTd<8u>::Test(v985, v986, v987, v988, v989, v990, v991, v992);
    }
    return 3;
  }
  if ((v2748 & 0x10) != 0)
  {
    BOOL v1001 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v1001) {
      return 3;
    }
    goto LABEL_559;
  }
  if ((v2748 & 0x20) != 0)
  {
    BOOL v849 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v849) {
      return 3;
    }
    goto LABEL_476;
  }
  if ((v2748 & 0x40) != 0)
  {
    BOOL v1685 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1685) {
      ZinValidateTd<8u>::Test(v1685, v1686, v1687, v1688, v1689, v1690, v1691, v1692);
    }
    return 3;
  }
  if (v2671 == 1)
  {
    if ((v2748 & 0x80) != 0)
    {
      BOOL v1717 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1717) {
        ZinValidateTd<8u>::Test(v1717, v1718, v1719, v1720, v1721, v1722, v1723, v1724);
      }
      return 3;
    }
    if ((v2748 & 0x200) != 0)
    {
      BOOL v1749 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1749) {
        ZinValidateTd<8u>::Test(v1749, v1750, v1751, v1752, v1753, v1754, v1755, v1756);
      }
      return 3;
    }
  }
  if ((v2748 & 0x100) != 0)
  {
    BOOL v1701 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1701) {
      ZinValidateTd<8u>::Test(v1701, v1702, v1703, v1704, v1705, v1706, v1707, v1708);
    }
    return 3;
  }
  if ((v2748 & 0x400) != 0)
  {
    BOOL v1741 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1741) {
      ZinValidateTd<8u>::Test(v1741, v1742, v1743, v1744, v1745, v1746, v1747, v1748);
    }
    return 3;
  }
LABEL_511:
  if (v2656 > 0xFFFFFFFD || v2671 == 8 || v2671 == 1)
  {
    if (v832 == 3)
    {
      if (v70 != 3)
      {
        BOOL v993 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v993) {
          ZinValidateTd<8u>::Test(v993, v994, v995, v996, v997, v998, v999, v1000);
        }
        return 3;
      }
      goto LABEL_565;
    }
    if (v832 == 2)
    {
      if (v70 != 1)
      {
        BOOL v921 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v921) {
          ZinValidateTd<8u>::Test(v921, v922, v923, v924, v925, v926, v927, v928);
        }
        return 3;
      }
      goto LABEL_565;
    }
    if (!v70)
    {
      if ((v2723 & 0x600) != 0)
      {
        BOOL v1009 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1009) {
          ZinValidateTd<8u>::Test(v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1016);
        }
        return 3;
      }
      goto LABEL_565;
    }
    BOOL v178 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v178) {
      return 3;
    }
LABEL_557:
    ZinValidateTd<10u>::Test(v178, v179, v180, v181, v182, v183, v184, v185);
    return 3;
  }
LABEL_555:
  if (v70)
  {
    BOOL v178 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v178) {
      return 3;
    }
    goto LABEL_557;
  }
LABEL_565:
  if (v2656 >= 0xFFFFFFFE)
  {
    if (v832 == 1)
    {
      BOOL v1025 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1025) {
        ZinValidateTd<8u>::Test(v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032);
      }
      return 3;
    }
    if (v2722)
    {
      BOOL v1645 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1645) {
        ZinValidateTd<8u>::Test(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652);
      }
      return 3;
    }
    if (*(void *)(v2681 + 960) < v2732
      && (v2664 > 1 << v2659
       || v2730 > 1 << (v2724 >> 4)
       || v2728 != 1))
    {
      BOOL v1693 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1693) {
        ZinValidateTd<8u>::Test(v1693, v1694, v1695, v1696, v1697, v1698, v1699, v1700);
      }
      return 3;
    }
  }
  if ((v2748 & 0x100) != 0 && ((v2748 >> 9) & 1) != 0 && *(void *)(v2681 + 1064) < v2736)
  {
    BOOL v1017 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1017) {
      ZinValidateTd<8u>::Test(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024);
    }
    return 3;
  }
  if ((v2748 & 0x400) != 0)
  {
    if (*(void *)(v2681 + 1072) < v2732)
    {
      BOOL v1653 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1653) {
        ZinValidateTd<8u>::Test(v1653, v1654, v1655, v1656, v1657, v1658, v1659, v1660);
      }
      return 3;
    }
    if (v2671 - 2 <= 2)
    {
      if (v387 != 1)
      {
        BOOL v1709 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1709) {
          ZinValidateTd<8u>::Test(v1709, v1710, v1711, v1712, v1713, v1714, v1715, v1716);
        }
        return 3;
      }
      if (v2749 != 1)
      {
        BOOL v1677 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1677) {
          ZinValidateTd<8u>::Test(v1677, v1678, v1679, v1680, v1681, v1682, v1683, v1684);
        }
        return 3;
      }
    }
  }
  if (*(unsigned char *)(v2681 + 1336)
    && (v2748 & 1) != 0
    && ((v2748 >> 1) & 1) == 0
    && (*(_DWORD *)(a3 + 964) & 0x70000) == 0x40000
    && *(void *)(v2681 + 320) - 8 < (unint64_t)v2664)
  {
    BOOL v1033 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1033) {
      ZinValidateTd<17u>::Test(v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040);
    }
    return 3;
  }
LABEL_582:
  if (v119 == 5)
  {
    if (!*(unsigned char *)(v2681 + 1128))
    {
      BOOL v1049 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1049) {
        ZinValidateTd<8u>::Test(v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056);
      }
      return 3;
    }
    if (v2693 != 2)
    {
      BOOL v1057 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1057) {
        ZinValidateTd<8u>::Test(v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064);
      }
      return 3;
    }
    if (v2673 != 2)
    {
      BOOL v1065 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1065) {
        ZinValidateTd<8u>::Test(v1065, v1066, v1067, v1068, v1069, v1070, v1071, v1072);
      }
      return 3;
    }
    if (v16 != 4 || v7 != 4 || v6 != 4)
    {
      BOOL v1073 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1073) {
        ZinValidateTd<8u>::Test(v1073, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
      }
      return 3;
    }
    if ((v2672 & 0xF) != 0 && v2672 != 8)
    {
      BOOL v1041 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1041) {
        ZinValidateTd<8u>::Test(v1041, v1042, v1043, v1044, v1045, v1046, v1047, v1048);
      }
      return 3;
    }
    if (v2722 || v2658 || v2657)
    {
      BOOL v1089 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1089) {
        ZinValidateTd<8u>::Test(v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096);
      }
      return 3;
    }
    if (v2664 != v387 || v2730 != v2749 || v2728 != v2726)
    {
      BOOL v1097 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1097) {
        ZinValidateTd<8u>::Test(v1097, v1098, v1099, v1100, v1101, v1102, v1103, v1104);
      }
      return 3;
    }
    if (v2736)
    {
      BOOL v1105 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1105) {
        ZinValidateTd<8u>::Test(v1105, v1106, v1107, v1108, v1109, v1110, v1111, v1112);
      }
      return 3;
    }
    if (v2705 != 1 || v391 != 1 || v2738 != 1)
    {
      BOOL v1113 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1113) {
        return 3;
      }
      goto LABEL_627;
    }
    if (v2670 != 1 || v2734 != 1 || v2676 != 1)
    {
      BOOL v1121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1121) {
        return 3;
      }
      goto LABEL_629;
    }
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v266) {
        return 3;
      }
      goto LABEL_733;
    }
    if ((*(unsigned char *)(a3 + 548) & 0xC) != 0)
    {
      BOOL v1081 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1081) {
        ZinValidateTd<8u>::Test(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
      }
      return 3;
    }
    if (v2664 >= 9)
    {
      BOOL v1140 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1140) {
        ZinValidateTd<8u>::Test(v1140, v1141, v1142, v1143, v1144, v1145, v1146, v1147);
      }
      return 3;
    }
    unsigned int v1129 = *(_DWORD *)(a3 + 1072);
    if ((v2701 >> 14)) {
      int v1130 = 0;
    }
    else {
      int v1130 = (v5 >> 19) & 7;
    }
    unsigned int v1131 = v1130 + v2668;
    if ((v1129 & 0x100000) != 0)
    {
      if (v2736 != 2 * v2732)
      {
        BOOL v1164 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1164) {
          ZinValidateTd<8u>::Test(v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171);
        }
        return 3;
      }
      if (v2668 >= 4)
      {
        BOOL v1172 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1172) {
          ZinValidateTd<8u>::Test(v1172, v1173, v1174, v1175, v1176, v1177, v1178, v1179);
        }
        return 3;
      }
      if ((v2701 & 0x4000) != 0 && v2740 != 2 << v2668)
      {
        BOOL v1148 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1148) {
          ZinValidateTd<8u>::Test(v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155);
        }
        return 3;
      }
      if (v1131 < ((v1129 >> 8) & 7))
      {
        BOOL v1188 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1188) {
          ZinValidateTd<8u>::Test(v1188, v1189, v1190, v1191, v1192, v1193, v1194, v1195);
        }
        return 3;
      }
    }
    else
    {
      if (v2732 != v2736)
      {
        BOOL v1156 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1156) {
          ZinValidateTd<8u>::Test(v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163);
        }
        return 3;
      }
      if (v2668 >= 4 && (v2668 != 4 || (v1129 & 0x400) != 0))
      {
        BOOL v1204 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1204) {
          ZinValidateTd<8u>::Test(v1204, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
        }
        return 3;
      }
      if ((v2701 & 0x4000) != 0 && v2740 != 1 << v2668)
      {
        BOOL v1132 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1132) {
          ZinValidateTd<8u>::Test(v1132, v1133, v1134, v1135, v1136, v1137, v1138, v1139);
        }
        return 3;
      }
      if (v1131 <= ((v1129 >> 8) & 7))
      {
        BOOL v1180 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1180) {
          ZinValidateTd<8u>::Test(v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187);
        }
        return 3;
      }
    }
    if ((v2701 & 0x4000) != 0)
    {
      if ((v2720 & ~(-1 << v2668)) != 0)
      {
        BOOL v1212 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1212) {
          ZinValidateTd<8u>::Test(v1212, v1213, v1214, v1215, v1216, v1217, v1218, v1219);
        }
        return 3;
      }
      if (v2740 != v2736)
      {
        if ((*(_DWORD *)(a3 + 864) & 3) == 2
          && v2736 != 1
          && 1 << v1131 < ((*(_DWORD *)(a3 + 864) >> 8) & 0xFu) << (v2736 >= v2740))
        {
          BOOL v1597 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1597) {
            ZinValidateTd<8u>::Test(v1597, v1598, v1599, v1600, v1601, v1602, v1603, v1604);
          }
          return 3;
        }
        if ((*(_DWORD *)(a3 + 912) & 3) == 2
          && v2732 != 1
          && 1 << v1131 < ((*(_DWORD *)(a3 + 912) >> 8) & 0xFu) << (v2736 >= v2740))
        {
          BOOL v1605 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1605) {
            ZinValidateTd<8u>::Test(v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
          }
          return 3;
        }
      }
    }
    else if (v2732 != 1 << v1131)
    {
      BOOL v1196 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1196) {
        ZinValidateTd<8u>::Test(v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203);
      }
      return 3;
    }
    if ((v2697 & 8) == 0)
    {
      BOOL v1220 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1220) {
        ZinValidateTd<8u>::Test(v1220, v1221, v1222, v1223, v1224, v1225, v1226, v1227);
      }
      return 3;
    }
    if ((v2697 & 0x10) != 0)
    {
      BOOL v1589 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1589) {
        ZinValidateTd<8u>::Test(v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596);
      }
      return 3;
    }
    if ((v2697 & 0x4000) != 0)
    {
      BOOL v1629 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1629) {
        ZinValidateTd<8u>::Test(v1629, v1630, v1631, v1632, v1633, v1634, v1635, v1636);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1052) & 3) != 2)
    {
      BOOL v1637 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1637) {
        ZinValidateTd<8u>::Test(v1637, v1638, v1639, v1640, v1641, v1642, v1643, v1644);
      }
      return 3;
    }
  }
  int v1228 = *(_DWORD *)(a3 + 1076) & 3;
  if (v224 <= 2 && v1228)
  {
    BOOL v1229 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1229) {
      ZinValidateTd<8u>::Test(v1229, v1230, v1231, v1232, v1233, v1234, v1235, v1236);
    }
    return 3;
  }
  if (v1228 && !ZinSeedUtils::ValidateHWSeeds((unsigned int *)(a3 + 1080), v214, v212, (unsigned int *)a4))
  {
    BOOL v1246 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1246) {
      ZinValidateTd<8u>::Test(v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253);
    }
    return 3;
  }
  if (*(unsigned char *)(v2681 + 1234))
  {
    unint64_t v1237 = *(void *)(v2681 + 368);
    if (v2661 > v1237)
    {
      BOOL v1238 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1238) {
        ZinValidateTd<8u>::Test(v1238, v1239, v1240, v1241, v1242, v1243, v1244, v1245);
      }
      return 3;
    }
    if (v2660 > v1237)
    {
      BOOL v1263 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1263) {
        ZinValidateTd<8u>::Test(v1263, v1264, v1265, v1266, v1267, v1268, v1269, v1270);
      }
      return 3;
    }
  }
  else
  {
    unint64_t v1254 = *(void *)(v2681 + 368);
    if ((v2670 * v2734 * v2736) * (unint64_t)v2666 > v1254)
    {
      BOOL v1255 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1255) {
        ZinValidateTd<6u>::Test(v1255, v1256, v1257, v1258, v1259, v1260, v1261, v1262);
      }
      return 3;
    }
    if (v2715 * v2709 * v2732 * (unint64_t)v2666 > v1254)
    {
      BOOL v1271 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1271) {
        ZinValidateTd<6u>::Test(v1271, v1272, v1273, v1274, v1275, v1276, v1277, v1278);
      }
      return 3;
    }
  }
  if ((v2718 & 8) != 0)
  {
    int v1287 = v2712 & 3;
    if (v1287 == 2)
    {
      float v1288 = 1.25;
    }
    else if (v1287 == 3)
    {
      float v1288 = 4.0;
    }
    else
    {
      float v1288 = 1.0;
      if (v1287 == 1) {
        float v1288 = 2.0;
      }
    }
    unint64_t v1297 = (v2712 >> 24) & 0xF;
    if (v5 >> 4)
    {
      BOOL v1298 = v1287 == 1 && v2673 == 2;
      if (v1298) {
        float v1288 = 2.0;
      }
      uint64_t v1299 = (1 << v2659) >> (v2693 == 2);
      if ((v2748 >> 10)) {
        uint64_t v1299 = v2720 & 0x1FFFF;
      }
      if ((((uint64_t)(float)(v1288 * (float)v1299) * v1297) & 0x3FLL) == 0
        || v2656 > 0xFFFFFFFD
        || v387 <= 1 << v2659)
      {
        goto LABEL_703;
      }
      BOOL v1300 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1300) {
        return 3;
      }
    }
    else
    {
      unsigned int v1308 = 0x100u >> (BYTE2(v5) & 7);
      uint64_t v1309 = (1 << v2667 << v2668);
      if ((v5 & 0x10000000) != 0) {
        BOOL v1310 = v2732 > v1309;
      }
      else {
        BOOL v1310 = (*(unsigned char *)(a3 + 548) & 0xC) == 0 && v387 > v1308;
      }
      int v1311 = !v1310;
      unsigned int v1312 = v1308 >> (v2693 == 2);
      if ((v5 & 0x10000000) == 0) {
        uint64_t v1309 = v1312 * v2715;
      }
      if ((uint64_t)(((uint64_t)(float)(v1288 * (float)v1309) * v1297) & 0x800000000000003FLL) < 1 || v1311)
      {
        unint64_t v1313 = 0;
        unsigned int v1314 = WORD1(v2712) & 7;
        uint64_t v1315 = 1;
        uint64_t v1316 = 4;
        do
        {
          if ((v1315 & (v2712 >> 28)) != 0) {
            ++v1313;
          }
          v1315 *= 2;
          --v1316;
        }
        while (v1316);
        BOOL v1310 = v1297 > v1313;
        int64_t v1317 = v1297 - v1313;
        if (!v1310)
        {
          BOOL v1337 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1337) {
            ZinValidateTd<6u>::Test(v1337, v1338, v1339, v1340, v1341, v1342, v1343, v1344);
          }
          return 3;
        }
        if ((v5 & 0x10000000) != 0)
        {
          if (v387 > v1312 && (v1312 * v2715 % v1317 || v1314 != 0))
          {
            BOOL v1346 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1346) {
              ZinValidateTd<8u>::Test(v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353);
            }
            return 3;
          }
        }
        else
        {
          uint64_t v1318 = (1 << (v2667 + v2668));
          if (v2732 > v1318)
          {
            if (v1318 % v1317)
            {
              BOOL v1319 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1319) {
                ZinValidateTd<8u>::Test(v1319, v1320, v1321, v1322, v1323, v1324, v1325, v1326);
              }
              return 3;
            }
            if (v1314)
            {
              BOOL v1386 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1386) {
                ZinValidateTd<8u>::Test(v1386, v1387, v1388, v1389, v1390, v1391, v1392, v1393);
              }
              return 3;
            }
          }
        }
        goto LABEL_703;
      }
      BOOL v1300 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1300) {
        return 3;
      }
    }
    ZinValidateTd<17u>::Test(v1300, v1301, v1302, v1303, v1304, v1305, v1306, v1307);
    return 3;
  }
LABEL_703:
  if ((*(unsigned char *)(a3 + 1056) & 0x40) != 0)
  {
    if (v2715 != 1 || v2709 != 1 || v2707 != 1)
    {
      BOOL v266 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v266) {
        return 3;
      }
      goto LABEL_733;
    }
    if (v2670 == 1 && v2734 == 1 && v2676 == 1)
    {
      if (v2705 == 1 && v391 == 1 && v2738 == 1)
      {
        if (v2736 <= 1)
        {
          BOOL v1354 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1354) {
            ZinValidateTd<8u>::Test(v1354, v1355, v1356, v1357, v1358, v1359, v1360, v1361);
          }
          return 3;
        }
        if ((v2701 & 0x4000) != 0)
        {
          BOOL v1370 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1370) {
            ZinValidateTd<8u>::Test(v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
          }
          return 3;
        }
        if ((*(_DWORD *)(a3 + 548) & 0xC) == 4)
        {
          BOOL v1289 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1289) {
            ZinValidateTd<8u>::Test(v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296);
          }
          return 3;
        }
        if ((v2697 & 8) != 0)
        {
          BOOL v1405 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1405) {
            ZinValidateTd<8u>::Test(v1405, v1406, v1407, v1408, v1409, v1410, v1411, v1412);
          }
          return 3;
        }
        if ((v5 & 8) == 0) {
          goto LABEL_705;
        }
        goto LABEL_728;
      }
      BOOL v1113 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1113) {
        return 3;
      }
LABEL_627:
      ZinValidateTd<10u>::Test(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
      return 3;
    }
    BOOL v1121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v1121) {
      return 3;
    }
LABEL_629:
    ZinValidateTd<10u>::Test(v1121, v1122, v1123, v1124, v1125, v1126, v1127, v1128);
    return 3;
  }
  if ((v5 & 8) == 0) {
    goto LABEL_705;
  }
  if (v2715 != 1)
  {
    BOOL v496 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v496) {
      return 3;
    }
    goto LABEL_778;
  }
  if (v2709 != 1)
  {
    BOOL v521 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v521) {
      return 3;
    }
    goto LABEL_791;
  }
  if (v2707 != 1)
  {
    BOOL v537 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v537) {
      return 3;
    }
    goto LABEL_800;
  }
LABEL_728:
  if ((v5 & 0x10000000) != 0)
  {
    BOOL v1362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1362) {
      ZinValidateTd<17u>::Test(v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1369);
    }
    return 3;
  }
  if (v70 == 2)
  {
    BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v154) {
      return 3;
    }
    goto LABEL_731;
  }
  if ((v2693 == 2) != (v2673 == 2))
  {
    BOOL v1378 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1378) {
      ZinValidateTd<8u>::Test(v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385);
    }
    return 3;
  }
  unint64_t v1394 = v387 << (v2693 == 2);
  unint64_t v1395 = ((uint64_t)(double)(uint64_t)((v2705 - 1) / v2670) + v387) << (v2693 == 2);
  int v1396 = (*(_DWORD *)(a3 + 548) >> 2) & 3;
  if (v1396 == 3)
  {
    if (v1394 <= *(void *)(v2681 + 1176))
    {
      BOOL v1465 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1465) {
        ZinValidateTd<8u>::Test(v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472);
      }
      return 3;
    }
    if (v1395 > *(void *)(v2681 + 1184))
    {
      BOOL v1432 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1432) {
        ZinValidateTd<8u>::Test(v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439);
      }
      return 3;
    }
  }
  else if (v1396 == 2)
  {
    if (v1394 <= *(void *)(v2681 + 1160))
    {
      BOOL v1473 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1473) {
        ZinValidateTd<8u>::Test(v1473, v1474, v1475, v1476, v1477, v1478, v1479, v1480);
      }
      return 3;
    }
    if (v1395 > *(void *)(v2681 + 1168))
    {
      BOOL v1397 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1397) {
        ZinValidateTd<8u>::Test(v1397, v1398, v1399, v1400, v1401, v1402, v1403, v1404);
      }
      return 3;
    }
  }
LABEL_705:
  if ((*(unsigned char *)(a3 + 1162) & 7) != 0)
  {
    BOOL v1279 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1279) {
      ZinValidateTd<6u>::Test(v1279, v1280, v1281, v1282, v1283, v1284, v1285, v1286);
    }
    return 3;
  }
  uint64_t result = ZinValidateTd<8u>::CheckKMEMBufferSizes(v2681, a3);
  if (result) {
    return result;
  }
  uint64_t result = ZinValidateTd<8u>::VerifyL2InplaceAllocation((_DWORD *)a3);
  if (result) {
    return result;
  }
  uint64_t result = ZinValidateTd<8u>::CheckInRangeDmaAccess(v2681, v2690, a3);
  if (result) {
    return result;
  }
  unsigned int v1327 = *(_DWORD *)(a3 + 864);
  unsigned int v1328 = (v1327 & 3) - 1;
  if (v1328 <= 1 && (*(unsigned char *)(a3 + 576) & 1) == 0)
  {
    BOOL v1329 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1329) {
      ZinValidateTd<8u>::Test(v1329, v1330, v1331, v1332, v1333, v1334, v1335, v1336);
    }
    return 3;
  }
  unsigned int v1413 = *(_DWORD *)(a3 + 868);
  unsigned int v1414 = (v1413 & 3) - 1;
  if (v1414 <= 1 && (*(unsigned char *)(a3 + 580) & 1) == 0)
  {
    BOOL v1415 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1415) {
      ZinValidateTd<8u>::Test(v1415, v1416, v1417, v1418, v1419, v1420, v1421, v1422);
    }
    return 3;
  }
  if ((v2678 & 7) != 0)
  {
    int v1423 = *(unsigned __int8 *)(a3 + 683);
    if (v1328 > 1)
    {
      if (((v1423 ^ (v1413 >> 8)) & 0xF) != 0)
      {
        BOOL v1440 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1440) {
          ZinValidateTd<8u>::Test(v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447);
        }
        return 3;
      }
    }
    else if (((v1423 ^ (v1327 >> 8)) & 0xF) != 0)
    {
      BOOL v1424 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1424) {
        return 3;
      }
      goto LABEL_832;
    }
  }
  else
  {
    if (v1328 <= 1 && ((*(unsigned __int8 *)(a3 + 683) ^ (v1327 >> 8)) & 0xF) != 0)
    {
      BOOL v1424 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v1424) {
        return 3;
      }
LABEL_832:
      ZinValidateTd<17u>::Test(v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431);
      return 3;
    }
    if (v1414 <= 1 && ((*(unsigned __int8 *)(a3 + 687) ^ (v1413 >> 8)) & 0xF) != 0)
    {
      BOOL v1448 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1448) {
        ZinValidateTd<8u>::Test(v1448, v1449, v1450, v1451, v1452, v1453, v1454, v1455);
      }
      return 3;
    }
  }
  if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 708), 5) != v1327 >> 27)
  {
    BOOL v1481 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1481) {
      ZinValidateTd<8u>::Test(v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488);
    }
    return 3;
  }
  if (v2678 & 7) != 0 && (*(unsigned char *)(a3 + 580))
  {
    unsigned int v1489 = *(_DWORD *)(a3 + 868);
    if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 708), 5) != v1489 >> 27)
    {
      BOOL v1509 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1509) {
        ZinValidateTd<8u>::Test(v1509, v1510, v1511, v1512, v1513, v1514, v1515, v1516);
      }
      return 3;
    }
  }
  else
  {
    unsigned int v1456 = *(_DWORD *)(a3 + 868);
    if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 724), 5) != v1456 >> 27)
    {
      BOOL v1457 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1457) {
        ZinValidateTd<8u>::Test(v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
      }
      return 3;
    }
  }
  int v1490 = *(_DWORD *)(a3 + 576);
  if ((v1490 & 0xD0) != 0xC0)
  {
    int v1491 = v1490 >> 4;
    if (v1491 != 2 && v1491 != 4)
    {
      BOOL v1525 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1525) {
        ZinValidateTd<8u>::Test(v1525, v1526, v1527, v1528, v1529, v1530, v1531, v1532);
      }
      return 3;
    }
  }
  int v1492 = *(_DWORD *)(a3 + 584);
  if ((v1492 & 0xD0) != 0xC0)
  {
    int v1493 = v1492 >> 4;
    if (v1493 != 2 && v1493 != 4)
    {
      BOOL v1549 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1549) {
        ZinValidateTd<8u>::Test(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556);
      }
      return 3;
    }
  }
  if ((v1492 & 0xD) != 0xC)
  {
    int v1494 = v1492 & 0xF;
    if (v1494 != 2 && v1494 != 4)
    {
      BOOL v1557 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1557) {
        ZinValidateTd<8u>::Test(v1557, v1558, v1559, v1560, v1561, v1562, v1563, v1564);
      }
      return 3;
    }
  }
  int v1495 = *(_DWORD *)(a3 + 580);
  if ((v1495 & 0xD0) != 0xC0)
  {
    int v1496 = v1495 >> 4;
    if (v1496 != 2 && v1496 != 4)
    {
      BOOL v1565 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1565) {
        ZinValidateTd<8u>::Test(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572);
      }
      return 3;
    }
  }
  int v1497 = *(_DWORD *)(a3 + 588);
  if ((v1497 & 0xD0) != 0xC0)
  {
    int v1498 = v1497 >> 4;
    if (v1498 != 2 && v1498 != 4)
    {
      BOOL v1573 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1573) {
        ZinValidateTd<8u>::Test(v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580);
      }
      return 3;
    }
  }
  if ((v1497 & 0xD) != 0xC)
  {
    int v1499 = v1497 & 0xF;
    if (v1499 != 2 && v1499 != 4)
    {
      BOOL v1581 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1581) {
        ZinValidateTd<8u>::Test(v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588);
      }
      return 3;
    }
  }
  int v1500 = *(_DWORD *)(a3 + 1104);
  if ((v1500 & 0xF0) != 0x30 && (v1500 & 0xD0) != 0xD0)
  {
    BOOL v1501 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1501) {
      ZinValidateTd<8u>::Test(v1501, v1502, v1503, v1504, v1505, v1506, v1507, v1508);
    }
    return 3;
  }
  uint64_t v1517 = 68;
  v1518 = &_os_log_internal;
  do
  {
    int v1519 = *(_DWORD *)(a3 + v1517) >> 4;
    if ((*(_DWORD *)(a3 + v1517) & 0xD0) != 0xC0 && v1519 != 2 && v1519 != 4)
    {
      if (os_log_type_enabled(v1518, OS_LOG_TYPE_ERROR)) {
        ZinValidateTd<8u>::Test(v2753, v2754, v1523);
      }
      if (v1519 != 4 && v1519 != 2) {
        return 3;
      }
    }
    v1517 += 4;
  }
  while (v1517 != 132);
  int v1533 = *(_DWORD *)(a3 + 276);
  long long v2752 = xmmword_211ED50D0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0]) {
    goto LABEL_916;
  }
  unsigned int v1534 = v1533 >> 4;
  v1535 = v2751;
  v1536 = v2751[0];
  do
  {
    v1537 = v1536;
    v1538 = v1535;
    unsigned int v1539 = *((_DWORD *)v1536 + 7);
    if (v1539 >= v1534) {
      v1535 = (void **)v1536;
    }
    else {
      ++v1536;
    }
    v1536 = (void *)*v1536;
  }
  while (v1536);
  if (v1535 == v2751 || (v1539 >= v1534 ? (v1540 = v1537) : (v1540 = v1538), v1534 < *((_DWORD *)v1540 + 7)))
  {
LABEL_916:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    BOOL v1541 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1541) {
      ZinValidateTd<8u>::Test(v1541, v1542, v1543, v1544, v1545, v1546, v1547, v1548);
    }
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  int v1613 = *(_DWORD *)(a3 + 260);
  long long v2752 = xmmword_211ED50D0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0]) {
    goto LABEL_951;
  }
  unsigned int v1614 = v1613 >> 4;
  v1615 = v2751;
  v1616 = v2751[0];
  do
  {
    v1617 = v1616;
    v1618 = v1615;
    unsigned int v1619 = *((_DWORD *)v1616 + 7);
    if (v1619 >= v1614) {
      v1615 = (void **)v1616;
    }
    else {
      ++v1616;
    }
    v1616 = (void *)*v1616;
  }
  while (v1616);
  if (v1615 == v2751 || (v1619 >= v1614 ? (v1620 = v1617) : (v1620 = v1618), v1614 < *((_DWORD *)v1620 + 7)))
  {
LABEL_951:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    BOOL v1621 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1621) {
      ZinValidateTd<8u>::Test(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628);
    }
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  int v1661 = *(_DWORD *)(a3 + 292);
  long long v2752 = xmmword_211ED50E0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0]) {
    goto LABEL_976;
  }
  unsigned int v1662 = v1661 >> 4;
  v1663 = v2751;
  v1664 = v2751[0];
  do
  {
    v1665 = v1664;
    v1666 = v1663;
    unsigned int v1667 = *((_DWORD *)v1664 + 7);
    if (v1667 >= v1662) {
      v1663 = (void **)v1664;
    }
    else {
      ++v1664;
    }
    v1664 = (void *)*v1664;
  }
  while (v1664);
  if (v1663 == v2751 || (v1667 >= v1662 ? (v1668 = v1665) : (v1668 = v1666), v1662 < *((_DWORD *)v1668 + 7)))
  {
LABEL_976:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    BOOL v1669 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1669) {
      ZinValidateTd<8u>::Test(v1669, v1670, v1671, v1672, v1673, v1674, v1675, v1676);
    }
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  int v1725 = *(_DWORD *)(a3 + 308);
  long long v2752 = xmmword_211ED50E0;
  std::set<unsigned int>::set[abi:ne180100]((uint64_t)v2750, (unsigned int *)&v2752, 4);
  if (!v2751[0]) {
    goto LABEL_1006;
  }
  unsigned int v1726 = v1725 >> 4;
  v1727 = v2751;
  v1728 = v2751[0];
  do
  {
    v1729 = v1728;
    v1730 = v1727;
    unsigned int v1731 = *((_DWORD *)v1728 + 7);
    if (v1731 >= v1726) {
      v1727 = (void **)v1728;
    }
    else {
      ++v1728;
    }
    v1728 = (void *)*v1728;
  }
  while (v1728);
  if (v1727 == v2751 || (v1731 >= v1726 ? (v1732 = v1729) : (v1732 = v1730), v1726 < *((_DWORD *)v1732 + 7)))
  {
LABEL_1006:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
    BOOL v1733 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1733) {
      ZinValidateTd<8u>::Test(v1733, v1734, v1735, v1736, v1737, v1738, v1739, v1740);
    }
    return 3;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2750, v2751[0]);
  if ((*(unsigned char *)(a3 + 696) & 1) != 0
    || (*(unsigned char *)(a3 + 776) & 7) != 0
    || (v2671 | 2) != 2
    && (v2730 >= 2 && *(_DWORD *)(a3 + 600) <= 0x3Fu && ((v2748 >> 1) & 1) == 0
     || v2736 >= 2 && *(_DWORD *)(a3 + 604) <= 0x3Fu && ((v2748 >> 3) & 1) == 0
     || v2728 >= 2 && *(_DWORD *)(a3 + 608) <= 0x3Fu && ((v2748 >> 2) & 1) == 0
     || v2666 >= 2 && *(_DWORD *)(a3 + 612) <= 0x3Fu))
  {
    if ((*(_DWORD *)(a3 + 576) & 0xF0) == 0x40)
    {
      BOOL v1757 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1757) {
        ZinValidateTd<8u>::Test(v1757, v1758, v1759, v1760, v1761, v1762, v1763, v1764);
      }
      return 3;
    }
    int v1765 = *(_DWORD *)(a3 + 584);
    if ((v1765 & 0xF) == 4)
    {
      BOOL v1766 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1766) {
        ZinValidateTd<8u>::Test(v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
      }
      return 3;
    }
    if ((v1765 & 0xF0) == 0x40)
    {
      BOOL v1774 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1774) {
        ZinValidateTd<8u>::Test(v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781);
      }
      return 3;
    }
  }
  if ((*(unsigned char *)(a3 + 712) & 1) != 0 || (*(unsigned char *)(a3 + 776) & 7) != 0)
  {
LABEL_1052:
    if ((*(_DWORD *)(a3 + 580) & 0xF0) == 0x40)
    {
      BOOL v1782 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1782) {
        ZinValidateTd<8u>::Test(v1782, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
      }
      return 3;
    }
    int v1790 = *(_DWORD *)(a3 + 588);
    if ((v1790 & 0xF) == 4)
    {
      BOOL v1791 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1791) {
        ZinValidateTd<8u>::Test(v1791, v1792, v1793, v1794, v1795, v1796, v1797, v1798);
      }
      return 3;
    }
    if ((v1790 & 0xF0) == 0x40)
    {
      BOOL v1799 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1799) {
        ZinValidateTd<8u>::Test(v1799, v1800, v1801, v1802, v1803, v1804, v1805, v1806);
      }
      return 3;
    }
LABEL_1061:
    if (v2671 > 5 || ((1 << v2671) & 0x25) == 0) {
      goto LABEL_1113;
    }
    goto LABEL_1063;
  }
  if ((v2671 | 2) != 2)
  {
    if (v2730 < 2 || *(_DWORD *)(a3 + 624) > 0x3Fu || ((v2748 >> 5))
      && (v2736 < 2 || *(_DWORD *)(a3 + 628) > 0x3Fu || ((v2748 >> 7) & 1) != 0)
      && (v2728 < 2 || *(_DWORD *)(a3 + 632) > 0x3Fu || ((v2748 >> 6) & 1) != 0)
      && (v2666 < 2 || *(_DWORD *)(a3 + 636) > 0x3Fu))
    {
      goto LABEL_1061;
    }
    goto LABEL_1052;
  }
LABEL_1063:
  if ((*(unsigned char *)(a3 + 966) & 7) == 0 && (*(_DWORD *)(a3 + 500) & 0xC) != 8)
  {
    BOOL v1816 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1816) {
      ZinValidateTd<8u>::Test(v1816, v1817, v1818, v1819, v1820, v1821, v1822, v1823);
    }
    return 3;
  }
  if (!v2671)
  {
    int v1807 = *(_DWORD *)(a3 + 540);
    if ((v1807 & 0xF0) != 0x10)
    {
      BOOL v1824 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1824) {
        ZinValidateTd<8u>::Test(v1824, v1825, v1826, v1827, v1828, v1829, v1830, v1831);
      }
      return 3;
    }
    if ((v1807 & 0xF) != 9)
    {
      BOOL v1832 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1832) {
        ZinValidateTd<8u>::Test(v1832, v1833, v1834, v1835, v1836, v1837, v1838, v1839);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 996) != 1065353216)
    {
      BOOL v1840 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1840) {
        ZinValidateTd<8u>::Test(v1840, v1841, v1842, v1843, v1844, v1845, v1846, v1847);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1004) != 1065353216)
    {
      BOOL v1848 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1848) {
        ZinValidateTd<8u>::Test(v1848, v1849, v1850, v1851, v1852, v1853, v1854, v1855);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1008) != 1065353216)
    {
      BOOL v1856 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1856) {
        ZinValidateTd<8u>::Test(v1856, v1857, v1858, v1859, v1860, v1861, v1862, v1863);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1000))
    {
      BOOL v1808 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1808) {
        ZinValidateTd<8u>::Test(v1808, v1809, v1810, v1811, v1812, v1813, v1814, v1815);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1012) != -8388608)
    {
      BOOL v1872 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1872) {
        ZinValidateTd<8u>::Test(v1872, v1873, v1874, v1875, v1876, v1877, v1878, v1879);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1016) != 2139095040)
    {
      BOOL v1880 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1880) {
        ZinValidateTd<8u>::Test(v1880, v1881, v1882, v1883, v1884, v1885, v1886, v1887);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1020) != -8388608)
    {
      BOOL v1888 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1888) {
        ZinValidateTd<8u>::Test(v1888, v1889, v1890, v1891, v1892, v1893, v1894, v1895);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1024) != 2139095040)
    {
      BOOL v1896 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1896) {
        ZinValidateTd<8u>::Test(v1896, v1897, v1898, v1899, v1900, v1901, v1902, v1903);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1028) != 1065353216)
    {
      BOOL v1904 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1904) {
        ZinValidateTd<8u>::Test(v1904, v1905, v1906, v1907, v1908, v1909, v1910, v1911);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1036) != 1065353216)
    {
      BOOL v1912 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1912) {
        ZinValidateTd<8u>::Test(v1912, v1913, v1914, v1915, v1916, v1917, v1918, v1919);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 992))
    {
      BOOL v1864 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1864) {
        ZinValidateTd<8u>::Test(v1864, v1865, v1866, v1867, v1868, v1869, v1870, v1871);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1032))
    {
      BOOL v1920 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1920) {
        ZinValidateTd<8u>::Test(v1920, v1921, v1922, v1923, v1924, v1925, v1926, v1927);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1040))
    {
      BOOL v1928 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1928) {
        ZinValidateTd<8u>::Test(v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1935);
      }
      return 3;
    }
  }
LABEL_1113:
  int v1936 = *(_DWORD *)(a3 + 1052);
  if ((v1936 & 4) == 0 && (*(_DWORD *)(a3 + 1052) & 0xF0) != 0x80)
  {
    BOOL v1937 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1937) {
      ZinValidateTd<8u>::Test(v1937, v1938, v1939, v1940, v1941, v1942, v1943, v1944);
    }
    return 3;
  }
  int v1945 = *(_DWORD *)(a3 + 1056);
  if ((v1945 & 7) != 3 && (v1945 & 0xF00000) != 0x100000)
  {
    BOOL v1946 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1946) {
      ZinValidateTd<8u>::Test(v1946, v1947, v1948, v1949, v1950, v1951, v1952, v1953);
    }
    return 3;
  }
  int v1954 = *(_DWORD *)(a3 + 576);
  if ((v1954 & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 576) & 0xF0) != 0x20)
    {
      BOOL v1964 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1964) {
        ZinValidateTd<8u>::Test(v1964, v1965, v1966, v1967, v1968, v1969, v1970, v1971);
      }
      return 3;
    }
    int v1955 = *(_DWORD *)(a3 + 584);
    if ((v1955 & 0xF0) != 0x20)
    {
      BOOL v1972 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1972) {
        ZinValidateTd<8u>::Test(v1972, v1973, v1974, v1975, v1976, v1977, v1978, v1979);
      }
      return 3;
    }
    if ((v1955 & 0xF) != 2)
    {
      BOOL v1980 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1980) {
        ZinValidateTd<8u>::Test(v1980, v1981, v1982, v1983, v1984, v1985, v1986, v1987);
      }
      return 3;
    }
    if ((v1954 & 0xFF00) != 0)
    {
      BOOL v1956 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1956) {
        ZinValidateTd<8u>::Test(v1956, v1957, v1958, v1959, v1960, v1961, v1962, v1963);
      }
      return 3;
    }
  }
  if ((*(unsigned char *)(a3 + 776) & 7) == 0)
  {
    int v1988 = *(_DWORD *)(a3 + 580);
    if (v1988) {
      goto LABEL_1148;
    }
    if ((*(_DWORD *)(a3 + 580) & 0xF0) == 0x20)
    {
      int v1989 = *(_DWORD *)(a3 + 588);
      if ((v1989 & 0xF0) == 0x20)
      {
        if ((v1989 & 0xF) == 2)
        {
          if ((v1988 & 0xFF00) != 0)
          {
            BOOL v1990 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1990) {
              ZinValidateTd<8u>::Test(v1990, v1991, v1992, v1993, v1994, v1995, v1996, v1997);
            }
            return 3;
          }
LABEL_1148:
          int v2022 = *(_DWORD *)(a3 + 780);
          if ((v2022 & 0x7000) == 0x5000)
          {
            if ((v2022 & 0xE00) == 0xA00)
            {
              if ((v2022 & 0x1C0) == 0x140)
              {
                if ((v2022 & 0x38) == 0x28)
                {
                  if ((v2022 & 7) == 5)
                  {
                    int v2023 = *(_DWORD *)(a3 + 784);
                    if ((v2023 & 0x70000000) == 0x50000000)
                    {
                      if ((v2023 & 0xE000000) == 0xA000000)
                      {
                        if ((v2023 & 0x1C00000) == 0x1400000)
                        {
                          if ((v2023 & 0x380000) == 0x280000)
                          {
                            if ((v2023 & 0x70000) == 0x50000)
                            {
                              if ((*(_DWORD *)(a3 + 784) & 0x7000) == 0x5000)
                              {
                                if ((*(_DWORD *)(a3 + 784) & 0xE00) == 0xA00)
                                {
                                  if ((*(_DWORD *)(a3 + 784) & 0x1C0) == 0x140)
                                  {
                                    if ((*(_DWORD *)(a3 + 784) & 0x38) == 0x28)
                                    {
                                      if ((*(_DWORD *)(a3 + 784) & 7) == 5)
                                      {
                                        uint64_t v2024 = 0;
                                        while (1)
                                        {
                                          int v2025 = *(_DWORD *)(a3 + 804 + v2024);
                                          if ((~v2025 & 0xF000000) != 0) {
                                            break;
                                          }
                                          if ((~v2025 & 0x70000) != 0)
                                          {
                                            BOOL v2163 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v2163) {
                                              ZinValidateTd<8u>::Test(v2163, v2164, v2165, v2166, v2167, v2168, v2169, v2170);
                                            }
                                            return 3;
                                          }
                                          if ((~v2025 & 0xF00) != 0)
                                          {
                                            BOOL v2171 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v2171) {
                                              ZinValidateTd<8u>::Test(v2171, v2172, v2173, v2174, v2175, v2176, v2177, v2178);
                                            }
                                            return 3;
                                          }
                                          if ((~v2025 & 7) != 0)
                                          {
                                            BOOL v2179 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v2179) {
                                              ZinValidateTd<8u>::Test(v2179, v2180, v2181, v2182, v2183, v2184, v2185, v2186);
                                            }
                                            return 3;
                                          }
                                          v2024 += 4;
                                          if (v2024 == 24) {
                                            goto LABEL_1169;
                                          }
                                        }
                                        BOOL v2155 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v2155) {
                                          ZinValidateTd<8u>::Test(v2155, v2156, v2157, v2158, v2159, v2160, v2161, v2162);
                                        }
                                      }
                                      else
                                      {
                                        BOOL v2147 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v2147) {
                                          ZinValidateTd<8u>::Test(v2147, v2148, v2149, v2150, v2151, v2152, v2153, v2154);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      BOOL v2139 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                      if (v2139) {
                                        ZinValidateTd<8u>::Test(v2139, v2140, v2141, v2142, v2143, v2144, v2145, v2146);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    BOOL v2131 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    if (v2131) {
                                      ZinValidateTd<8u>::Test(v2131, v2132, v2133, v2134, v2135, v2136, v2137, v2138);
                                    }
                                  }
                                }
                                else
                                {
                                  BOOL v2123 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  if (v2123) {
                                    ZinValidateTd<8u>::Test(v2123, v2124, v2125, v2126, v2127, v2128, v2129, v2130);
                                  }
                                }
                              }
                              else
                              {
                                BOOL v2115 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (v2115) {
                                  ZinValidateTd<8u>::Test(v2115, v2116, v2117, v2118, v2119, v2120, v2121, v2122);
                                }
                              }
                            }
                            else
                            {
                              BOOL v2107 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (v2107) {
                                ZinValidateTd<8u>::Test(v2107, v2108, v2109, v2110, v2111, v2112, v2113, v2114);
                              }
                            }
                          }
                          else
                          {
                            BOOL v2099 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            if (v2099) {
                              ZinValidateTd<8u>::Test(v2099, v2100, v2101, v2102, v2103, v2104, v2105, v2106);
                            }
                          }
                        }
                        else
                        {
                          BOOL v2091 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v2091) {
                            ZinValidateTd<8u>::Test(v2091, v2092, v2093, v2094, v2095, v2096, v2097, v2098);
                          }
                        }
                      }
                      else
                      {
                        BOOL v2083 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v2083) {
                          ZinValidateTd<8u>::Test(v2083, v2084, v2085, v2086, v2087, v2088, v2089, v2090);
                        }
                      }
                    }
                    else
                    {
                      BOOL v2075 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v2075) {
                        ZinValidateTd<8u>::Test(v2075, v2076, v2077, v2078, v2079, v2080, v2081, v2082);
                      }
                    }
                  }
                  else
                  {
                    BOOL v2067 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v2067) {
                      ZinValidateTd<8u>::Test(v2067, v2068, v2069, v2070, v2071, v2072, v2073, v2074);
                    }
                  }
                }
                else
                {
                  BOOL v2059 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v2059) {
                    ZinValidateTd<8u>::Test(v2059, v2060, v2061, v2062, v2063, v2064, v2065, v2066);
                  }
                }
              }
              else
              {
                BOOL v2051 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v2051) {
                  ZinValidateTd<8u>::Test(v2051, v2052, v2053, v2054, v2055, v2056, v2057, v2058);
                }
              }
            }
            else
            {
              BOOL v2043 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v2043) {
                ZinValidateTd<8u>::Test(v2043, v2044, v2045, v2046, v2047, v2048, v2049, v2050);
              }
            }
          }
          else
          {
            BOOL v2035 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v2035) {
              ZinValidateTd<8u>::Test(v2035, v2036, v2037, v2038, v2039, v2040, v2041, v2042);
            }
          }
          return 3;
        }
        BOOL v2014 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v2014) {
          ZinValidateTd<8u>::Test(v2014, v2015, v2016, v2017, v2018, v2019, v2020, v2021);
        }
      }
      else
      {
        BOOL v2006 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v2006) {
          ZinValidateTd<8u>::Test(v2006, v2007, v2008, v2009, v2010, v2011, v2012, v2013);
        }
      }
    }
    else
    {
      BOOL v1998 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1998) {
        ZinValidateTd<8u>::Test(v1998, v1999, v2000, v2001, v2002, v2003, v2004, v2005);
      }
    }
    return 3;
  }
LABEL_1169:
  int v2026 = *(_DWORD *)(a3 + 1104);
  if ((v2026 & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 1104) & 0xF0) != 0x30)
    {
      BOOL v2187 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2187) {
        ZinValidateTd<8u>::Test(v2187, v2188, v2189, v2190, v2191, v2192, v2193, v2194);
      }
      return 3;
    }
    if ((v2026 & 0xFF00) != 0)
    {
      BOOL v2027 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2027) {
        ZinValidateTd<8u>::Test(v2027, v2028, v2029, v2030, v2031, v2032, v2033, v2034);
      }
      return 3;
    }
  }
  for (uint64_t i = 0; i != 64; i += 4)
  {
    unsigned int v2196 = *(_DWORD *)(a3 + i + 196);
    if (v2196 <= 0x3F)
    {
      BOOL v2207 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2207) {
        ZinValidateTd<8u>::Test(v2207, v2208, v2209, v2210, v2211, v2212, v2213, v2214);
      }
      return 3;
    }
    int v2197 = *(_DWORD *)(a3 + i + 68);
    if ((v2197 & 1) == 0)
    {
      if ((*(_DWORD *)(a3 + i + 68) & 0xF0) != 0x20)
      {
        BOOL v2215 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v2215) {
          ZinValidateTd<8u>::Test(v2215, v2216, v2217, v2218, v2219, v2220, v2221, v2222);
        }
        return 3;
      }
      if ((v2196 & 0xFFFFFFC0) != 0x40)
      {
        BOOL v2223 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v2223) {
          ZinValidateTd<8u>::Test(v2223, v2224, v2225, v2226, v2227, v2228, v2229, v2230);
        }
        return 3;
      }
      if ((v2197 & 0xFF00) != 0)
      {
        BOOL v2231 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v2231) {
          ZinValidateTd<8u>::Test(v2231, v2232, v2233, v2234, v2235, v2236, v2237, v2238);
        }
        return 3;
      }
    }
  }
  unsigned int v2198 = *(_DWORD *)(a3 + 280);
  if (v2198 <= 0x3F)
  {
    BOOL v2199 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2199) {
      ZinValidateTd<8u>::Test(v2199, v2200, v2201, v2202, v2203, v2204, v2205, v2206);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 276) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 276) & 0xF0) == 0x20)
    {
      if ((v2198 & 0xFFFFFFC0) == 0x40) {
        goto LABEL_1235;
      }
      BOOL v2256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2256) {
        ZinValidateTd<8u>::Test(v2256, v2257, v2258, v2259, v2260, v2261, v2262, v2263);
      }
    }
    else
    {
      BOOL v2248 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2248) {
        ZinValidateTd<8u>::Test(v2248, v2249, v2250, v2251, v2252, v2253, v2254, v2255);
      }
    }
    return 3;
  }
LABEL_1235:
  unsigned int v2239 = *(_DWORD *)(a3 + 264);
  if (v2239 <= 0x3F)
  {
    BOOL v2240 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2240) {
      ZinValidateTd<8u>::Test(v2240, v2241, v2242, v2243, v2244, v2245, v2246, v2247);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 260) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 260) & 0xF0) != 0x20)
    {
      BOOL v2273 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2273) {
        ZinValidateTd<8u>::Test(v2273, v2274, v2275, v2276, v2277, v2278, v2279, v2280);
      }
      return 3;
    }
    if ((v2239 & 0xFFFFFFC0) != 0x40)
    {
      BOOL v2281 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2281) {
        ZinValidateTd<8u>::Test(v2281, v2282, v2283, v2284, v2285, v2286, v2287, v2288);
      }
      return 3;
    }
  }
  unsigned int v2264 = *(_DWORD *)(a3 + 296);
  if (v2264 <= 0x3F)
  {
    BOOL v2265 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2265) {
      ZinValidateTd<8u>::Test(v2265, v2266, v2267, v2268, v2269, v2270, v2271, v2272);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 292) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 292) & 0xF0) != 0x20)
    {
      BOOL v2298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2298) {
        ZinValidateTd<8u>::Test(v2298, v2299, v2300, v2301, v2302, v2303, v2304, v2305);
      }
      return 3;
    }
    if ((v2264 & 0xFFFFFFC0) != 0x40)
    {
      BOOL v2306 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2306) {
        ZinValidateTd<8u>::Test(v2306, v2307, v2308, v2309, v2310, v2311, v2312, v2313);
      }
      return 3;
    }
  }
  unsigned int v2289 = *(_DWORD *)(a3 + 312);
  if (v2289 <= 0x3F)
  {
    BOOL v2290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2290) {
      ZinValidateTd<8u>::Test(v2290, v2291, v2292, v2293, v2294, v2295, v2296, v2297);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 308) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 308) & 0xF0) != 0x20)
    {
      BOOL v2324 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2324) {
        ZinValidateTd<8u>::Test(v2324, v2325, v2326, v2327, v2328, v2329, v2330, v2331);
      }
      return 3;
    }
    if ((v2289 & 0xFFFFFFC0) != 0x40)
    {
      BOOL v2332 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2332) {
        ZinValidateTd<8u>::Test(v2332, v2333, v2334, v2335, v2336, v2337, v2338, v2339);
      }
      return 3;
    }
  }
  int v2314 = (*(_DWORD *)(a3 + 28) >> 3) & 1;
  unsigned int v2315 = *(_DWORD *)(a3 + 1196);
  if (v2314 != ((v2315 >> 1) & 1))
  {
    BOOL v2340 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2340) {
      ZinValidateTd<8u>::Test(v2340, v2341, v2342, v2343, v2344, v2345, v2346, v2347);
    }
    return 3;
  }
  if ((~v2315 & 3) == 0)
  {
    BOOL v2316 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2316) {
      ZinValidateTd<8u>::Test(v2316, v2317, v2318, v2319, v2320, v2321, v2322, v2323);
    }
    return 3;
  }
  int v2348 = *(_DWORD *)(a3 + 1204);
  if ((v2348 & 0xF0) != 0xE0)
  {
    BOOL v2358 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2358) {
      ZinValidateTd<8u>::Test(v2358, v2359, v2360, v2361, v2362, v2363, v2364, v2365);
    }
    return 3;
  }
  if (v2314)
  {
    if ((v2315 & 0x200) != 0) {
      goto LABEL_1335;
    }
  }
  else
  {
    if ((v2315 & 4) != 0)
    {
      BOOL v2366 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2366) {
        ZinValidateTd<8u>::Test(v2366, v2367, v2368, v2369, v2370, v2371, v2372, v2373);
      }
      return 3;
    }
    if ((v2315 & 8) != 0)
    {
      BOOL v2374 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v2374) {
        return 3;
      }
      goto LABEL_1295;
    }
    if ((v2315 & 0x10) != 0)
    {
      BOOL v2382 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2382) {
        ZinValidateTd<8u>::Test(v2382, v2383, v2384, v2385, v2386, v2387, v2388, v2389);
      }
      return 3;
    }
    if ((v2315 & 0x20) != 0)
    {
      BOOL v2390 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2390) {
        ZinValidateTd<8u>::Test(v2390, v2391, v2392, v2393, v2394, v2395, v2396, v2397);
      }
      return 3;
    }
    if ((v2315 & 0x40) != 0)
    {
      BOOL v2398 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2398) {
        ZinValidateTd<8u>::Test(v2398, v2399, v2400, v2401, v2402, v2403, v2404, v2405);
      }
      return 3;
    }
    if ((v2315 & 0x80) != 0)
    {
      BOOL v2406 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2406) {
        ZinValidateTd<8u>::Test(v2406, v2407, v2408, v2409, v2410, v2411, v2412, v2413);
      }
      return 3;
    }
    if ((v2315 & 0x100) != 0)
    {
      BOOL v2414 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2414) {
        ZinValidateTd<8u>::Test(v2414, v2415, v2416, v2417, v2418, v2419, v2420, v2421);
      }
      return 3;
    }
    if ((v2315 & 0x200) != 0)
    {
      BOOL v2422 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2422) {
        ZinValidateTd<8u>::Test(v2422, v2423, v2424, v2425, v2426, v2427, v2428, v2429);
      }
      return 3;
    }
    int v2349 = *(_DWORD *)(a3 + 1200);
    if ((v2349 & 7) != 0)
    {
      BOOL v2350 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2350) {
        ZinValidateTd<8u>::Test(v2350, v2351, v2352, v2353, v2354, v2355, v2356, v2357);
      }
      return 3;
    }
    if ((v2349 & 0x1FF00) != 0x10000)
    {
      BOOL v2438 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2438) {
        ZinValidateTd<8u>::Test(v2438, v2439, v2440, v2441, v2442, v2443, v2444, v2445);
      }
      return 3;
    }
    if ((v2349 & 0xF00000) != 0)
    {
      BOOL v2430 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2430) {
        ZinValidateTd<8u>::Test(v2430, v2431, v2432, v2433, v2434, v2435, v2436, v2437);
      }
      return 3;
    }
    if ((v2348 & 0xC) != 0)
    {
      BOOL v2446 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2446) {
        ZinValidateTd<8u>::Test(v2446, v2447, v2448, v2449, v2450, v2451, v2452, v2453);
      }
      return 3;
    }
    if ((v2348 & 0xFF00) != 0)
    {
      BOOL v2454 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2454) {
        ZinValidateTd<8u>::Test(v2454, v2455, v2456, v2457, v2458, v2459, v2460, v2461);
      }
      return 3;
    }
    if (*(_DWORD *)(a3 + 1212) >= 0x80u)
    {
      BOOL v2470 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2470) {
        ZinValidateTd<8u>::Test(v2470, v2471, v2472, v2473, v2474, v2475, v2476, v2477);
      }
      return 3;
    }
    if ((*(_WORD *)(a3 + 1216) & 0x3FF) != 0)
    {
      BOOL v2462 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2462) {
        ZinValidateTd<8u>::Test(v2462, v2463, v2464, v2465, v2466, v2467, v2468, v2469);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 1220) & 0x3FFFFF80) != 0x80)
    {
      BOOL v2486 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2486) {
        ZinValidateTd<8u>::Test(v2486, v2487, v2488, v2489, v2490, v2491, v2492, v2493);
      }
      return 3;
    }
    if (*(_WORD *)(a3 + 1232))
    {
      BOOL v2478 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2478) {
        ZinValidateTd<8u>::Test(v2478, v2479, v2480, v2481, v2482, v2483, v2484, v2485);
      }
      return 3;
    }
    if (*(unsigned char *)(a3 + 1240))
    {
      BOOL v2502 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2502) {
        ZinValidateTd<8u>::Test(v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509);
      }
      return 3;
    }
  }
  if (v2315 >= 0x10000)
  {
    BOOL v2510 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2510) {
      ZinValidateTd<8u>::Test(v2510, v2511, v2512, v2513, v2514, v2515, v2516, v2517);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1224) & 0xFFE0000) != 0x20000)
  {
    BOOL v2518 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2518) {
      ZinValidateTd<8u>::Test(v2518, v2519, v2520, v2521, v2522, v2523, v2524, v2525);
    }
    return 3;
  }
LABEL_1335:
  if ((*(_DWORD *)(a3 + 1200) & 7) == 0 && (*(_DWORD *)(a3 + 1200) & 0xF0) != 0xA0)
  {
    BOOL v2494 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2494) {
      ZinValidateTd<8u>::Test(v2494, v2495, v2496, v2497, v2498, v2499, v2500, v2501);
    }
    return 3;
  }
  if ((v2315 & 0x20) == 0 && (unsigned __int16)*(_DWORD *)(a3 + 1228))
  {
    BOOL v2526 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2526) {
      ZinValidateTd<8u>::Test(v2526, v2527, v2528, v2529, v2530, v2531, v2532, v2533);
    }
    return 3;
  }
  if ((v2315 & 0x40) == 0 && *(_DWORD *)(a3 + 1228) >= 0x10000u)
  {
    BOOL v2534 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2534) {
      ZinValidateTd<8u>::Test(v2534, v2535, v2536, v2537, v2538, v2539, v2540, v2541);
    }
    return 3;
  }
  if ((v2315 & 0x80) == 0 && (*(unsigned char *)(a3 + 1240) & 1) == 0 && *(unsigned char *)(a3 + 1238))
  {
    BOOL v2542 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2542) {
      ZinValidateTd<8u>::Test(v2542, v2543, v2544, v2545, v2546, v2547, v2548, v2549);
    }
    return 3;
  }
  if ((v2315 & 0x100) == 0 && *(unsigned char *)(a3 + 1236))
  {
    BOOL v2550 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2550) {
      ZinValidateTd<8u>::Test(v2550, v2551, v2552, v2553, v2554, v2555, v2556, v2557);
    }
    return 3;
  }
  unsigned int v2558 = *(_DWORD *)(a3 + 1240);
  if ((v2558 & 1) == 0)
  {
    if ((v2558 & 0xF0) != 0)
    {
      BOOL v2559 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2559) {
        ZinValidateTd<8u>::Test(v2559, v2560, v2561, v2562, v2563, v2564, v2565, v2566);
      }
      return 3;
    }
    if ((v2558 & 0xFF00) != 0)
    {
      BOOL v2567 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2567) {
        ZinValidateTd<8u>::Test(v2567, v2568, v2569, v2570, v2571, v2572, v2573, v2574);
      }
      return 3;
    }
    if ((v2558 & 0xFF0000) != 0)
    {
      BOOL v2575 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2575) {
        ZinValidateTd<8u>::Test(v2575, v2576, v2577, v2578, v2579, v2580, v2581, v2582);
      }
      return 3;
    }
    if (HIBYTE(v2558))
    {
      BOOL v2591 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2591) {
        ZinValidateTd<8u>::Test(v2591, v2592, v2593, v2594, v2595, v2596, v2597, v2598);
      }
      return 3;
    }
  }
  if (!v2665
    && (*(_DWORD *)(a3 + 548) & 0x20000000) != 0
    && v2666 >= 2
    && (uint64_t)((int)((v2732 >> (v2667 + v2668)) - 1) * (uint64_t)(*(_DWORD *)(a3 + 64) >> 6)
               + ((unint64_t)*(unsigned int *)(a3 + 196) >> 6)) > (uint64_t)((unint64_t)*(unsigned int *)(a3 + 60) >> 6)
    && (*(unsigned char *)(a3 + 44) & 2) != 0)
  {
    BOOL v2599 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2599) {
      ZinValidateTd<8u>::Test(v2599, v2600, v2601, v2602, v2603, v2604, v2605, v2606);
    }
    return 3;
  }
  if (v2558 & (v2315 >> 7))
  {
    BOOL v2583 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2583) {
      ZinValidateTd<8u>::Test(v2583, v2584, v2585, v2586, v2587, v2588, v2589, v2590);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1196) & 0x220) == 0x200)
  {
    BOOL v2607 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2607) {
      ZinValidateTd<8u>::Test(v2607, v2608, v2609, v2610, v2611, v2612, v2613, v2614);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1196) & 0xA) == 2 && (v2687 & 1) == 0)
  {
    BOOL v2615 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2615) {
      ZinValidateTd<8u>::Test(v2615, v2616, v2617, v2618, v2619, v2620, v2621, v2622);
    }
    return 3;
  }
  if (v2687 && (v2684 & 1) == 0)
  {
    if ((v2315 & 2) == 0)
    {
      BOOL v2623 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v2623) {
        ZinValidateTd<8u>::Test(v2623, v2624, v2625, v2626, v2627, v2628, v2629, v2630);
      }
      return 3;
    }
    if ((v2315 & 8) != 0)
    {
      BOOL v2374 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v2374) {
        return 3;
      }
LABEL_1295:
      ZinValidateTd<19u>::Test(v2374, v2375, v2376, v2377, v2378, v2379, v2380, v2381);
      return 3;
    }
  }
  if (!v2672)
  {
    BOOL v2639 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2639) {
      ZinValidateTd<6u>::Test(v2639, v2640, v2641, v2642, v2643, v2644, v2645, v2646);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1056) & 7) != 5 && v2672 > v2749)
  {
    BOOL v2631 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2631) {
      ZinValidateTd<6u>::Test(v2631, v2632, v2633, v2634, v2635, v2636, v2637, v2638);
    }
    return 3;
  }
  if ((*(_DWORD *)(a3 + 1052) & 3) == 2) {
    char v2647 = v1936 >> 4;
  }
  else {
    char v2647 = (v1936 >> 4) + 1;
  }
  if (*(void *)(v2681 + 488) < (unint64_t)(1 << v2647))
  {
    BOOL v2648 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2648) {
      ZinValidateTd<8u>::Test(v2648, v2649, v2650, v2651, v2652, v2653, v2654, v2655);
    }
    return 3;
  }
  uint64_t result = ZinValidateTd<8u>::ValidationForNonZeroFields(a3);
  if (!result)
  {
    uint64_t result = ZinValidateTd<8u>::CheckRedundantKDMARegisters(a3);
    if (!result) {
      return ZinValidateTd<8u>::ValidateFillLowerNEFirst(v2681, a3);
    }
  }
  return result;
}

uint64_t ZinValidateTd<8u>::CheckPEReductionAccumulationRetention(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0;
  }
  LOBYTE(v2) = 0;
  int v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 16) + 200);
    if (v2) {
      break;
    }
    int v5 = *(_DWORD *)(v4 + 996);
    int v6 = v5 & 3;
LABEL_8:
    unsigned int v8 = v5 & 0x800;
    BOOL v7 = v8 == 0;
    unsigned int v2 = v8 >> 11;
    if (!v7) {
      int v3 = v6;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0;
    }
  }
  if ((*(_DWORD *)(v4 + 556) >> 4) - 7 >= 0xFFFFFFFE)
  {
    int v5 = *(_DWORD *)(v4 + 996);
    int v6 = v5 & 3;
    if (v6 == v3) {
      goto LABEL_8;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinValidateTd<17u>::CheckPEReductionAccumulationRetention();
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateDepMode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  __p = 0;
  if (v1 == a1)
  {
    unint64_t v2 = 0;
  }
  else
  {
    unint64_t v2 = 0;
    uint64_t v3 = v1;
    do
    {
      ++v2;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a1);
  }
  std::vector<ZinAneInstruction *>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinAneInstruction *,void *>,std::__list_const_iterator<ZinAneInstruction *,void *>>((char *)&__p, v1, a1, v2);
  uint64_t v4 = __p;
  if (v21 == __p)
  {
    uint64_t v9 = 0;
    if (!__p) {
      return v9;
    }
    goto LABEL_25;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v4[v5] + 200);
    unsigned int v7 = (*(unsigned char *)(v6 + 872) & 0xC) != 0;
    if ((*(unsigned char *)(v6 + 876) & 0xC) != 0) {
      ++v7;
    }
    if (v7 >= 2) {
      break;
    }
    unint64_t v8 = *(unsigned int *)(v6 + 584);
    if ((v8 & 0x30000000) == 0x20000000)
    {
      uint64_t v9 = ZinValidateTd<8u>::ValidateDepModeSrc1(*(void *)(v4[v5 - ((v8 >> 24) & 0xF) - 1] + 200) + 8, v6 + 8);
      if (v9) {
        goto LABEL_24;
      }
      uint64_t v4 = __p;
    }
    unint64_t v10 = *(unsigned int *)(v6 + 588);
    if ((v10 & 0x30000000) == 0x20000000)
    {
      uint64_t v9 = ZinValidateTd<8u>::ValidateDepModeSrc2(*(void *)(v4[v5 - ((v10 >> 24) & 0xF) - 1] + 200) + 8, v6 + 8);
      if (v9) {
        goto LABEL_24;
      }
      uint64_t v4 = __p;
    }
    if (++v5 >= (unint64_t)((v21 - (unsigned char *)v4) >> 3))
    {
      uint64_t v9 = 0;
      goto LABEL_24;
    }
  }
  BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v11) {
    ZinValidateTd<8u>::ValidateDepMode(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v9 = 3;
LABEL_24:
  uint64_t v4 = __p;
  if (__p)
  {
LABEL_25:
    uint64_t v21 = v4;
    operator delete(v4);
  }
  return v9;
}

void sub_2111712D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<8u>::ValidateRCASDependency(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0;
  }
  BOOL v2 = 0;
  while (1)
  {
    BOOL v3 = v2;
    uint64_t v4 = *(_DWORD **)(*(void *)(v1 + 16) + 200);
    BOOL v2 = (v4[266] & 7) == 5;
    if (!v3 || (v4[266] & 7) != 5) {
      goto LABEL_10;
    }
    int v5 = v4[218];
    if ((v5 & 3) == 2) {
      break;
    }
    if ((v5 & 3) == 0 && (v5 & 0x20) == 0)
    {
      BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v7) {
        ZinValidateTd<8u>::ValidateRCASDependency(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      return 3;
    }
LABEL_10:
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0;
    }
  }
  if ((v4[146] & 0x30000001) != 1) {
    goto LABEL_10;
  }
  BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v15) {
    ZinValidateTd<8u>::ValidateRCASDependency(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateL2CircularBuffer(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while (2)
  {
    if (v1 == a1) {
      return 0;
    }
    uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 200);
    unsigned int v3 = *(_DWORD *)(v2 + 948);
    switch(v3 & 7)
    {
      case 1u:
        uint64_t v4 = *(_DWORD *)(v2 + 512) & 0x1FFFF;
        goto LABEL_10;
      case 2u:
        LOWORD(v5) = *(_WORD *)(v2 + 502);
        goto LABEL_8;
      case 3u:
        int v5 = *(_DWORD *)(v2 + 504);
LABEL_8:
        uint64_t v4 = v5 & 0x7FFF;
        goto LABEL_10;
      case 4u:
        uint64_t v4 = *(_DWORD *)(v2 + 540) & 0x1FFF;
LABEL_10:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 952)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 952) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 952) >> 16))
        {
          break;
        }
        BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v11) {
          ZinValidateTd<8u>::ValidateL2CircularBuffer(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        return 3;
      default:
        uint64_t v4 = 0;
        break;
    }
    int v6 = 0;
    switch((v3 >> 4) & 7)
    {
      case 1u:
        uint64_t v4 = *(_DWORD *)(v2 + 512) & 0x1FFFF;
        goto LABEL_18;
      case 2u:
        LOWORD(v7) = *(_WORD *)(v2 + 502);
        goto LABEL_16;
      case 3u:
        int v7 = *(_DWORD *)(v2 + 504);
LABEL_16:
        uint64_t v4 = v7 & 0x7FFF;
        goto LABEL_18;
      case 4u:
        uint64_t v4 = *(_DWORD *)(v2 + 540) & 0x1FFF;
LABEL_18:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 956)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 956) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 956) >> 16))
        {
          int v6 = 1;
LABEL_21:
          switch((v3 >> 8) & 7)
          {
            case 0u:
              goto LABEL_31;
            case 1u:
              uint64_t v4 = *(_DWORD *)(v2 + 516) & 0x1FFFFLL;
              goto LABEL_29;
            case 2u:
              LOWORD(v8) = *(_WORD *)(v2 + 522);
              goto LABEL_27;
            case 3u:
              int v8 = *(_DWORD *)(v2 + 524);
LABEL_27:
              uint64_t v4 = v8 & 0x7FFF;
              goto LABEL_29;
            case 4u:
              uint64_t v4 = *(_DWORD *)(v2 + 540) & 0x1FFFLL;
              goto LABEL_29;
            default:
              if (!v6) {
                goto LABEL_31;
              }
LABEL_29:
              unint64_t v9 = *(unsigned int *)(v2 + 960);
              if ((_WORD)v9 && v4 - (unsigned __int16)v9 > (uint64_t)(v9 >> 16))
              {
                BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v27) {
                  ZinValidateTd<8u>::ValidateL2CircularBuffer(v27, v28, v29, v30, v31, v32, v33, v34);
                }
                return 3;
              }
LABEL_31:
              uint64_t v1 = *(void *)(v1 + 8);
              break;
          }
          continue;
        }
        BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v19) {
          ZinValidateTd<8u>::ValidateL2CircularBuffer(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        return 3;
      default:
        goto LABEL_21;
    }
  }
}

uint64_t ZinValidateTd<8u>::ValidateCachePrefetchKernelTaskInterval(uint64_t a1, unsigned int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  BOOL v19 = 0;
  if (v3 == a1)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3;
    do
    {
      ++v4;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a1);
  }
  std::vector<ZinAneInstruction *>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinAneInstruction *,void *>,std::__list_const_iterator<ZinAneInstruction *,void *>>((char *)&v19, v3, a1, v4);
  int v6 = v19;
  if (v20 == v19)
  {
LABEL_27:
    BOOL v12 = 0;
    if (!v19) {
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v20 = v6;
    operator delete(v6);
    goto LABEL_32;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = (v20 - v19) >> 3;
  if (a2 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = a2;
  }
  if (v9 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = (v20 - v19) >> 3;
  }
  BOOL v12 = 1;
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)&v19[8 * v7] + 200);
    if ((*(unsigned char *)(v13 + 1205) & 2) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v8 = v7;
        while (!a2)
        {
LABEL_25:
          if (++v8 == v9)
          {
            unint64_t v8 = -1;
            goto LABEL_16;
          }
        }
        uint64_t v14 = 0;
        uint64_t v15 = *(void *)(*(void *)&v19[8 * v8] + 200);
        unsigned int v16 = *(unsigned __int16 *)(v15 + 1206);
        uint64_t v17 = v15 + 76;
        while (((v16 >> v14) & 1) == 0 || (*(_DWORD *)(v17 + 4 * v14) & 2) == 0)
        {
          if (v10 == ++v14) {
            goto LABEL_25;
          }
        }
      }
LABEL_16:
      if (v8 - v7 < *(unsigned __int16 *)(v13 + 1236)) {
        break;
      }
    }
    BOOL v12 = ++v7 < v9;
    if (v7 == v11) {
      goto LABEL_27;
    }
  }
  if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    if (!v6) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  *(_DWORD *)buf = 136315138;
  uint64_t v23 = "cache_dma_pre_config.terminate_task_interval.kernel_task_interval <= find_next_terminating_kernel_src_dma_task_index(i) - i";
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s\n", buf, 0xCu);
  int v6 = v19;
  if (v19) {
    goto LABEL_31;
  }
LABEL_32:
  if (v12) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = *(_DWORD **)(*(void *)(v2 + 16) + 200);
    uint64_t v112 = 0;
    int v106 = (v5[148] >> 8) & 7;
    unsigned __int8 IsTileDmaSrc1Compressed = ZinGetRegisterProgramming<8u>::IsTileDmaSrc1Compressed((uint64_t)(v5 + 2));
    if (IsTileDmaSrc1Compressed)
    {
      int v6 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc1GranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        BOOL v82 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v82) {
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        return 3;
      }
      int v6 = IsTileDmaSrc1Compressed;
    }
    if (v106 == 1 && v6) {
      break;
    }
    if (v106 == 5)
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v18) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      goto LABEL_29;
    }
    uint64_t v112 = 0;
    int v107 = (v5[149] >> 8) & 7;
    unsigned __int8 IsTileDmaSrc2Compressed = ZinGetRegisterProgramming<8u>::IsTileDmaSrc2Compressed((uint64_t)(v5 + 2));
    if (IsTileDmaSrc2Compressed)
    {
      int v7 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaSrc2GranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        BOOL v90 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v90) {
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        return 3;
      }
      int v7 = IsTileDmaSrc2Compressed;
    }
    if (v107 == 1 && v7)
    {
      BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v34) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      goto LABEL_35;
    }
    if (v107 == 5)
    {
      BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v42) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v42, v43, v44, v45, v46, v47, v48, v49);
      }
LABEL_35:
      BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v50) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      return 3;
    }
    uint64_t v112 = 0;
    int v108 = (v5[279] >> 8) & 7;
    unsigned __int8 IsTileDmaDstCompressed = ZinGetRegisterProgramming<8u>::IsTileDmaDstCompressed((uint64_t)(v5 + 2));
    if (IsTileDmaDstCompressed)
    {
      int v8 = 1;
    }
    else
    {
      if (ZinRegisterProgrammingAnalysis<8u>::CalculateLinearDmaDstGranularityInX((uint64_t)(v5 + 2), a1, &v112))
      {
        BOOL v98 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v98) {
          ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        return 3;
      }
      int v8 = IsTileDmaDstCompressed;
    }
    if (v108 == 1 && v8)
    {
      BOOL v58 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v58) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      goto LABEL_41;
    }
    if (v108 == 5)
    {
      BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v66) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v66, v67, v68, v69, v70, v71, v72, v73);
      }
LABEL_41:
      BOOL v74 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v74) {
        ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      return 3;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2) {
      return 0;
    }
  }
  BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v10) {
    ZinIrTdValidationUtil::ValidateDramCircularBuffer<17u>(v10, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_29:
  BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v26) {
    ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndex(uint64_t a1, void *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 548) >> 4;
  if (v2 <= 8 && ((1 << v2) & 0x112) != 0)
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      ZinValidateTd<8u>::ValidatePEIndex(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 864) & 3) != 0)
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v13) {
      ZinValidateTd<8u>::ValidatePEIndex(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 868) & 3) != 0)
  {
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v21) {
      ZinValidateTd<8u>::ValidatePEIndex(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    return 3;
  }
  if (v2 == 3 && ((*(_DWORD *)(a1 + 500) ^ (*(_DWORD *)(a1 + 500) >> 2)) & 3) != 0)
  {
    BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v29) {
      ZinValidateTd<8u>::ValidatePEIndex(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    return 3;
  }
  unsigned int v37 = *(_DWORD *)(a1 + 964);
  unint64_t v38 = *(unsigned int *)(a1 + 512);
  uint64_t v39 = v38 & 0x7FFF;
  uint64_t v40 = *(_DWORD *)(a1 + 508) & 0x1FFFF;
  unsigned int v41 = *(_DWORD *)(a1 + 544);
  switch(HIWORD(v37) & 7)
  {
    case 1:
      if (a2[48] > (unint64_t)(unsigned __int16)*(_DWORD *)(a1 + 964)) {
        return 0;
      }
      BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v50) {
        ZinValidateTd<8u>::ValidatePEIndex(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      return 3;
    case 2:
      int v42 = HIBYTE(v37) & 1;
      int v43 = (v41 >> 2) & 1;
      uint64_t v39 = *(_DWORD *)(a1 + 516) & 0x7FFF;
      unint64_t v44 = a2[44];
      goto LABEL_29;
    case 3:
      unint64_t v45 = a2[42];
      if ((v41 & 2) != 0) {
        goto LABEL_40;
      }
      uint64_t v46 = (v38 >> 16) & 0x7FFF;
      unsigned int v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
      goto LABEL_37;
    case 4:
      unint64_t v45 = a2[40];
      if ((v41 & 0x100) != 0)
      {
        if ((v41 & 1) == 0)
        {
          unsigned int v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
          uint64_t v46 = v40;
          goto LABEL_37;
        }
      }
      else if ((v41 & 1) == 0)
      {
        unsigned int v47 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        uint64_t v46 = v38 & 0x7FFF;
LABEL_37:
        return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v47, v46, v45);
      }
LABEL_40:
      unsigned int v58 = (unsigned __int16)*(_DWORD *)(a1 + 964);
      return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(v58, v45);
    case 5:
      unint64_t v44 = a2[46];
      int v42 = (v37 >> 25) & 1;
      int v43 = (v41 >> 3) & 1;
      if ((v41 & 0x100) != 0)
      {
LABEL_29:
        unsigned int v48 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        uint64_t v49 = v39;
      }
      else
      {
        unsigned int v48 = (unsigned __int16)*(_DWORD *)(a1 + 964);
        uint64_t v49 = v40;
      }
      return ZinValidateTd<8u>::ValidatePEIndexMaxIndex(v48, v49, v44, v43, v42);
    default:
      return 3;
  }
}

uint64_t ZinValidateTd<8u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = ((unint64_t)*(unsigned int *)(a2 + 548) >> 19) & 7;
  unint64_t v5 = 1 << v4;
  int v6 = *(_DWORD *)(a2 + 1052);
  uint64_t v38 = 0;
  std::vector<unsigned long>::vector(__p, 1 << v4, &v38);
  uint64_t v7 = 0;
  uint64_t v8 = (unint64_t *)__p[0];
  do
  {
    v8[v7] = (unint64_t)*(unsigned int *)(a2 + 196 + 4 * v7) >> 6;
    ++v7;
  }
  while (v5 != v7);
  uint64_t v9 = *(int *)(a1 + 8);
  if (v5 < v9)
  {
    uint64_t v10 = v9 - v5;
    uint64_t v11 = (char *)(a2 + 4 * v5 + 68);
    while (1)
    {
      char v12 = *v11;
      v11 += 4;
      if (v12) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v21) {
      ZinValidateTd<8u>::CheckKMEMBufferSizes(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v13 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    uint64_t v14 = 2;
    if (v5 > 2) {
      uint64_t v14 = 1 << v4;
    }
    unint64_t v17 = *v8;
    uint64_t v15 = v8 + 1;
    unint64_t v16 = v17;
    uint64_t v18 = v14 - 1;
    while (1)
    {
      unint64_t v20 = *v15++;
      unint64_t v19 = v20;
      if (v20 > v16) {
        break;
      }
      unint64_t v16 = v19;
      if (!--v18)
      {
        uint64_t v13 = 0;
        goto LABEL_20;
      }
    }
    BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v29) {
      ZinValidateTd<8u>::CheckKMEMBufferSizes(v29, v30, v31, v32, v33, v34, v35, v36);
    }
LABEL_19:
    uint64_t v13 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

uint64_t ZinValidateTd<8u>::VerifyL2InplaceAllocation(_DWORD *a1)
{
  int v1 = (a1[218] >> 4) & 0x1FFFF;
  unsigned int v2 = a1[223];
  int v3 = (a1[229] >> 4) & 0x1FFFF;
  int v4 = a1[136];
  int v5 = a1[137];
  unsigned int v6 = v5 >> 4;
  if (v1 == v3)
  {
    unsigned int v7 = a1[131];
    if ((v7 & 0x3F) != 1)
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v18) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      return 3;
    }
    if ((v7 & 0xFC0) != 0x40)
    {
      BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v26) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      return 3;
    }
    int v8 = a1[132];
    if ((v8 & 0x1F) != 1)
    {
      BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v34) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      return 3;
    }
    if ((v7 & 0x30000000) != 0x10000000)
    {
      BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v42) {
        ZinValidateTd<10u>::VerifyL2InplaceAllocation(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      return 3;
    }
    if (v7 >> 30 != 1)
    {
      BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v50) {
        ZinValidateTd<10u>::VerifyL2InplaceAllocation(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      return 3;
    }
    if ((v8 & 0x6000) != 0x2000)
    {
      BOOL v58 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v58) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      return 3;
    }
    if ((v7 & 0x6000) != 0x2000)
    {
      BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v66) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      return 3;
    }
    if ((v7 & 0x18000) != 0x8000)
    {
      BOOL v74 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v74) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v74, v75, v76, v77, v78, v79, v80, v81);
      }
      return 3;
    }
    if ((v8 & 0xC0) != 0x40)
    {
      BOOL v82 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v82) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      return 3;
    }
    int v9 = a1[134];
    if ((v9 & 0x1F0000) != 0)
    {
      BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v10) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      return 3;
    }
    if ((v9 & 0x3E00000) != 0)
    {
      BOOL v90 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v90) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      return 3;
    }
    if ((v9 & 0x7C000000) != 0)
    {
      BOOL v98 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v98) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      return 3;
    }
    if (v6 >= 7)
    {
      BOOL v115 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v115) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v115, v116, v117, v118, v119, v120, v121, v122);
      }
      return 3;
    }
    int v106 = a1[128] ^ a1[123];
    if ((v106 & 0x7FFF) != 0)
    {
      BOOL v107 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v107) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v107, v108, v109, v110, v111, v112, v113, v114);
      }
      return 3;
    }
    if ((v106 & 0x7FFF0000) != 0)
    {
      BOOL v123 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v123) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v123, v124, v125, v126, v127, v128, v129, v130);
      }
      return 3;
    }
    if (((a1[129] ^ a1[124]) & 0x7FFF) != 0)
    {
      BOOL v131 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v131) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      return 3;
    }
    if (!(v5 >> 4))
    {
      unint64_t v147 = a1[133];
      unint64_t v148 = v147 >> 16;
      if ((v147 & 0x4000) != 0
        && (a1[130] & 7) == 0
        && (a1[127] & 0x1FFFF) * (unint64_t)v148 != (a1[126] & 0x1FFFF))
      {
        BOOL v149 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v149) {
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v149, v150, v151, v152, v153, v154, v155, v156);
        }
        return 3;
      }
      if ((v5 & 0x10000000) != 0)
      {
        BOOL v224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v224) {
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v224, v225, v226, v227, v228, v229, v230, v231);
        }
        return 3;
      }
      if (((a1[219] >> 4) & 0x1FFFF) * (unint64_t)v148 < (((unint64_t)a1[230] >> 4) & 0x1FFFF))
      {
        BOOL v208 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v208) {
          ZinValidateTd<8u>::VerifyL2InplaceAllocation(v208, v209, v210, v211, v212, v213, v214, v215);
        }
        return 3;
      }
      return 0;
    }
    if ((a1[137] & 0xE0) != 0x20 && v6 != 4)
    {
      BOOL v139 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v139) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      return 3;
    }
    if ((v4 & 0x400) != 0)
    {
      BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v216) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v216, v217, v218, v219, v220, v221, v222, v223);
      }
      return 3;
    }
    if ((v4 & 0x100) != 0)
    {
      BOOL v232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v232) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v232, v233, v234, v235, v236, v237, v238, v239);
      }
      return 3;
    }
    if ((v4 & 8) != 0)
    {
      BOOL v240 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v240) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v240, v241, v242, v243, v244, v245, v246, v247);
      }
      return 3;
    }
    if (v4)
    {
      BOOL v248 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v248) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v248, v249, v250, v251, v252, v253, v254, v255);
      }
      return 3;
    }
    if ((v4 & 2) != 0)
    {
      BOOL v256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v256) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v256, v257, v258, v259, v260, v261, v262, v263);
      }
      return 3;
    }
    if ((v4 & 4) != 0)
    {
      BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v264) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v264, v265, v266, v267, v268, v269, v270, v271);
      }
      return 3;
    }
  }
  if (v6 > 6 || ((1 << v6) & 0x58) == 0) {
    return 0;
  }
  uint64_t result = 0;
  int v159 = (v2 >> 4) & 0x1FFFF;
  if (v159 == v3 && v159 != v1)
  {
    if ((v4 & 0x200) != 0)
    {
      BOOL v160 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v160) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v160, v161, v162, v163, v164, v165, v166, v167);
      }
      return 3;
    }
    if ((v4 & 0x80) != 0)
    {
      BOOL v168 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v168) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v168, v169, v170, v171, v172, v173, v174, v175);
      }
      return 3;
    }
    if ((v4 & 0x10) != 0)
    {
      BOOL v176 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v176) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v176, v177, v178, v179, v180, v181, v182, v183);
      }
      return 3;
    }
    if ((v4 & 0x20) != 0)
    {
      BOOL v184 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v184) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v184, v185, v186, v187, v188, v189, v190, v191);
      }
      return 3;
    }
    if ((v4 & 0x40) != 0)
    {
      BOOL v192 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v192) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v192, v193, v194, v195, v196, v197, v198, v199);
      }
      return 3;
    }
    if (v6 != 3)
    {
      BOOL v200 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v200) {
        ZinValidateTd<8u>::VerifyL2InplaceAllocation(v200, v201, v202, v203, v204, v205, v206, v207);
      }
      return 3;
    }
    return 0;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::CheckInRangeDmaAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    ZinIrMemoryPool::GetSections(a2, 4, &v298);
    uint64_t v269 = *((void *)v299 + 2);
    std::__list_imp<ZinIrSection *>::clear(&v298);
  }
  else
  {
    uint64_t v269 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 528);
  LOBYTE(v296) = 0;
  char v297 = 0;
  LOBYTE(v294) = 0;
  char v295 = 0;
  LOBYTE(v292) = 0;
  char v293 = 0;
  LOBYTE(v290) = 0;
  char v291 = 0;
  LOBYTE(v288) = 0;
  char v289 = 0;
  LOBYTE(v286) = 0;
  char v287 = 0;
  RelocInfos = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos((ZinAneTdHw_v8 *)a3);
  uint64_t v7 = *RelocInfos;
  uint64_t v8 = RelocInfos[1];
  if (*RelocInfos != v8)
  {
    do
    {
      unsigned int v9 = *(_DWORD *)(v7 + 32) & 0x7FFF;
      if (v9 > 0x1351)
      {
        switch(v9)
        {
          case 0x1352u:
            int v288 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v289;
            goto LABEL_18;
          case 0x1442u:
            int v292 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v293;
            goto LABEL_18;
          case 0x1448u:
            int v286 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v287;
            goto LABEL_18;
        }
      }
      else
      {
        switch(v9)
        {
          case 0x1344u:
            int v296 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v297;
            goto LABEL_18;
          case 0x134Au:
            int v294 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v295;
            goto LABEL_18;
          case 0x1350u:
            int v290 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
            BOOL v10 = &v291;
LABEL_18:
            *BOOL v10 = 1;
            break;
        }
      }
      v7 += 40;
    }
    while (v7 != v8);
  }
  int v11 = *(_DWORD *)(a3 + 544);
  int v270 = *(_DWORD *)(a3 + 548);
  unsigned int v12 = *(unsigned char *)(a3 + 683) & 0xF;
  if ((v11 & 2) != 0) {
    int v13 = 1;
  }
  else {
    int v13 = HIWORD(*(_DWORD *)(a3 + 492)) & 0x7FFF;
  }
  if ((v11 & 4) != 0) {
    int v14 = 1;
  }
  else {
    int v14 = *(_DWORD *)(a3 + 496) & 0x7FFF;
  }
  double v15 = 1.0;
  if ((v11 & 8) == 0) {
    double v15 = (double)((*(_DWORD *)(a3 + 504) & 0x1FFFFu) / v12);
  }
  if ((v11 & 0x100) != 0)
  {
    int v16 = *(_DWORD *)(a3 + 492) & 0x7FFF;
    if (v11) {
      int v16 = 1;
    }
    double v15 = (double)v16;
  }
  uint64_t v265 = a1;
  int v267 = *(_DWORD *)(a3 + 776) & 7;
  if (v267)
  {
    double v15 = (double)((*(unsigned __int16 *)(a3 + 800) + 1) / v12);
    int v13 = *(unsigned __int16 *)(a3 + 798) + 1;
    int v14 = HIWORD(*(_DWORD *)(a3 + 792)) + 1;
    int v17 = (unsigned __int16)*(_DWORD *)(a3 + 792) + 1;
  }
  else
  {
    int v17 = *(_DWORD *)(a3 + 532) & 0x1FFF;
  }
  unsigned int v18 = *(_DWORD *)(a3 + 592) >> 6;
  int v19 = *(_DWORD *)(a3 + 696);
  uint64_t v298 = 0;
  uint64_t v299 = 0;
  v300[0] = 0;
  unsigned int v20 = *(_DWORD *)(a3 + 600);
  if (v19)
  {
    uint64_t v21 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v300, 1uLL);
    if ((v19 & 4) != 0) {
      int v29 = 16;
    }
    else {
      int v29 = 32;
    }
    unsigned int v30 = v18 + (v20 >> 6) * v5 * vcvtps_s32_f32((float)v13 / (float)v29);
    uint64_t v22 = v298;
    uint64_t v31 = v299;
    uint64_t v25 = &v21[v28];
    unsigned int *v21 = v30;
    BOOL v26 = v21 + 1;
    while (v31 != v22)
    {
      unsigned int v32 = *--v31;
      *--uint64_t v21 = v32;
    }
  }
  else
  {
    uint64_t v21 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v300, 1uLL);
    uint64_t v22 = v298;
    uint64_t v23 = v299;
    uint64_t v25 = &v21[v24];
    unsigned int *v21 = v18 + v13 * v5 * (v20 >> 6);
    BOOL v26 = v21 + 1;
    while (v23 != v22)
    {
      unsigned int v27 = *--v23;
      *--uint64_t v21 = v27;
    }
  }
  uint64_t v298 = v21;
  uint64_t v299 = v26;
  v300[0] = v25;
  if (v22) {
    operator delete(v22);
  }
  int v266 = v19;
  uint64_t v299 = v26;
  unsigned int v33 = ((double)v18 + (double)(v5 * ((unint64_t)*(unsigned int *)(a3 + 604) >> 6)) * v15);
  BOOL v34 = (char *)v300[0];
  if ((unint64_t)v26 >= v300[0])
  {
    uint64_t v36 = v298;
    uint64_t v37 = v26 - v298;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v39 = v300[0] - (void)v298;
    if ((uint64_t)(v300[0] - (void)v298) >> 1 > v38) {
      unint64_t v38 = v39 >> 1;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v300, v40);
      uint64_t v36 = v298;
      BOOL v26 = v299;
    }
    else
    {
      uint64_t v41 = 0;
    }
    BOOL v42 = (unsigned int *)&v41[4 * v37];
    BOOL v34 = &v41[4 * v40];
    *BOOL v42 = v33;
    uint64_t v35 = v42 + 1;
    while (v26 != v36)
    {
      unsigned int v43 = *--v26;
      *--BOOL v42 = v43;
    }
    uint64_t v298 = v42;
    uint64_t v299 = v35;
    v300[0] = v34;
    if (v36)
    {
      operator delete(v36);
      BOOL v34 = (char *)v300[0];
    }
  }
  else
  {
    *BOOL v26 = v33;
    uint64_t v35 = v26 + 1;
  }
  uint64_t v299 = v35;
  unsigned int v44 = v18 + v14 * v5 * (*(_DWORD *)(a3 + 608) >> 6);
  if (v35 >= (unsigned int *)v34)
  {
    uint64_t v46 = v298;
    uint64_t v47 = v35 - v298;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = v34 - (char *)v298;
    if (v49 >> 1 > v48) {
      unint64_t v48 = v49 >> 1;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v300, v50);
      uint64_t v46 = v298;
      uint64_t v35 = v299;
    }
    else
    {
      uint64_t v51 = 0;
    }
    uint64_t v52 = (unsigned int *)&v51[4 * v47];
    BOOL v34 = &v51[4 * v50];
    *uint64_t v52 = v44;
    uint64_t v45 = v52 + 1;
    while (v35 != v46)
    {
      unsigned int v53 = *--v35;
      *--uint64_t v52 = v53;
    }
    uint64_t v298 = v52;
    uint64_t v299 = v45;
    v300[0] = v34;
    if (v46)
    {
      operator delete(v46);
      BOOL v34 = (char *)v300[0];
    }
  }
  else
  {
    unsigned int *v35 = v44;
    uint64_t v45 = v35 + 1;
  }
  uint64_t v299 = v45;
  unsigned int v54 = v18 + v17 * v5 * (*(_DWORD *)(a3 + 612) >> 6);
  if (v45 >= (unsigned int *)v34)
  {
    uint64_t v56 = v298;
    uint64_t v57 = v45 - v298;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v34 - (char *)v298;
    if (v59 >> 1 > v58) {
      unint64_t v58 = v59 >> 1;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    if (v60)
    {
      uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v300, v60);
      uint64_t v56 = v298;
      uint64_t v45 = v299;
    }
    else
    {
      uint64_t v61 = 0;
    }
    uint64_t v62 = (unsigned int *)&v61[4 * v57];
    uint64_t v63 = &v61[4 * v60];
    *uint64_t v62 = v54;
    uint64_t v55 = v62 + 1;
    while (v45 != v56)
    {
      unsigned int v64 = *--v45;
      *--uint64_t v62 = v64;
    }
    uint64_t v298 = v62;
    uint64_t v299 = v55;
    v300[0] = v63;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    unsigned int *v45 = v54;
    uint64_t v55 = v45 + 1;
  }
  int v65 = v270 >> 4;
  unsigned int v66 = *(_DWORD *)(a3 + 544);
  if (v65 == 4) {
    int v67 = 1;
  }
  else {
    int v67 = (v66 >> 5) & 1;
  }
  uint64_t v299 = v55;
  if (v65 == 8) {
    int v67 = 1;
  }
  if (v67) {
    unsigned int GatherModeIndexHeightDimension = 1;
  }
  else {
    unsigned int GatherModeIndexHeightDimension = HIWORD(*(_DWORD *)(a3 + 492)) & 0x7FFF;
  }
  if ((v66 & 0x40) != 0) {
    int GatherModeIndexDepthDimension = 1;
  }
  else {
    int GatherModeIndexDepthDimension = *(_DWORD *)(a3 + 496) & 0x7FFF;
  }
  double v70 = 1.0;
  double v71 = 1.0;
  if ((v66 & 0x80) == 0) {
    double v71 = (double)((*(_DWORD *)(a3 + 504) & 0x1FFFFu) / (*(unsigned char *)(a3 + 687) & 0xFu));
  }
  int v72 = (v66 >> 4) & 1;
  if (v65 == 4) {
    int v72 = 1;
  }
  if (v65 == 8) {
    int v72 = 1;
  }
  if (!v72) {
    double v70 = (double)(*(_DWORD *)(a3 + 492) & 0x7FFF);
  }
  if ((v11 & 0x200) != 0) {
    double GatherModeIndexPlaneDimension = v70;
  }
  else {
    double GatherModeIndexPlaneDimension = v71;
  }
  if (v267 == 2)
  {
    int GatherModeIndexGroupDimension = *(_DWORD *)(a3 + 532) & 0x1FFF;
    double GatherModeIndexPlaneDimension = 1.0;
    unsigned int GatherModeIndexHeightDimension = 1;
    int GatherModeIndexDepthDimension = 1;
  }
  else if (v267 == 1)
  {
    int GatherModeIndexGroupDimension = ZinValidateTd<8u>::GetGatherModeIndexGroupDimension(a3);
    int GatherModeIndexDepthDimension = ZinValidateTd<8u>::GetGatherModeIndexDepthDimension(a3);
    double GatherModeIndexPlaneDimension = (double)ZinValidateTd<8u>::GetGatherModeIndexPlaneDimension(a3);
    unsigned int GatherModeIndexHeightDimension = ZinValidateTd<8u>::GetGatherModeIndexHeightDimension(a3);
  }
  else
  {
    int GatherModeIndexGroupDimension = *(_DWORD *)(a3 + 532) & 0x1FFF;
  }
  unsigned int v74 = *(_DWORD *)(a3 + 616) >> 6;
  int v75 = *(_DWORD *)(a3 + 712);
  __p = 0;
  uint64_t v284 = 0;
  uint64_t v285 = 0;
  unsigned int v76 = *(_DWORD *)(a3 + 624);
  int v264 = v75;
  if (v75)
  {
    uint64_t v77 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v285, 1uLL);
    if ((v75 & 4) != 0) {
      int v82 = 16;
    }
    else {
      int v82 = 32;
    }
    uint64_t v79 = &v77[v81];
    unsigned int *v77 = v74 + (v76 >> 6) * v5 * vcvtps_s32_f32((float)GatherModeIndexHeightDimension / (float)v82);
    uint64_t v80 = v77 + 1;
  }
  else
  {
    uint64_t v77 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v285, 1uLL);
    uint64_t v79 = &v77[v78];
    unsigned int *v77 = v74 + GatherModeIndexHeightDimension * v5 * (v76 >> 6);
    uint64_t v80 = v77 + 1;
  }
  __p = v77;
  uint64_t v285 = v79;
  uint64_t v284 = v80;
  unsigned int v83 = ((double)v74
                     + (double)(v5 * ((unint64_t)*(unsigned int *)(a3 + 628) >> 6))
                     * GatherModeIndexPlaneDimension);
  uint64_t v84 = (char *)v79;
  if (v80 >= v79)
  {
    uint64_t v86 = (unsigned int *)__p;
    uint64_t v87 = ((char *)v80 - (unsigned char *)__p) >> 2;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = (char *)v285 - (unsigned char *)__p;
    if (((char *)v285 - (unsigned char *)__p) >> 1 > v88) {
      unint64_t v88 = v89 >> 1;
    }
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v285, v90);
      uint64_t v86 = (unsigned int *)__p;
      uint64_t v80 = v284;
    }
    else
    {
      uint64_t v91 = 0;
    }
    uint64_t v92 = (unsigned int *)&v91[4 * v87];
    uint64_t v84 = &v91[4 * v90];
    unsigned int *v92 = v83;
    uint64_t v85 = v92 + 1;
    while (v80 != v86)
    {
      unsigned int v93 = *--v80;
      *--uint64_t v92 = v93;
    }
    __p = v92;
    uint64_t v284 = v85;
    uint64_t v285 = (unsigned int *)v84;
    if (v86)
    {
      operator delete(v86);
      uint64_t v84 = (char *)v285;
    }
  }
  else
  {
    unsigned int *v80 = v83;
    uint64_t v85 = v80 + 1;
  }
  uint64_t v284 = v85;
  unsigned int v94 = v74 + GatherModeIndexDepthDimension * v5 * (*(_DWORD *)(a3 + 632) >> 6);
  if (v85 >= (unsigned int *)v84)
  {
    uint64_t v96 = (unsigned int *)__p;
    uint64_t v97 = ((char *)v85 - (unsigned char *)__p) >> 2;
    unint64_t v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v99 = v84 - (unsigned char *)__p;
    if (v99 >> 1 > v98) {
      unint64_t v98 = v99 >> 1;
    }
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v100 = v98;
    }
    if (v100)
    {
      uint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v285, v100);
      uint64_t v96 = (unsigned int *)__p;
      uint64_t v85 = v284;
    }
    else
    {
      uint64_t v101 = 0;
    }
    uint64_t v102 = &v101[4 * v97];
    uint64_t v84 = &v101[4 * v100];
    *(_DWORD *)uint64_t v102 = v94;
    uint64_t v95 = (unsigned int *)(v102 + 4);
    while (v85 != v96)
    {
      int v103 = *--v85;
      *((_DWORD *)v102 - 1) = v103;
      v102 -= 4;
    }
    __p = v102;
    uint64_t v284 = v95;
    uint64_t v285 = (unsigned int *)v84;
    if (v96)
    {
      operator delete(v96);
      uint64_t v84 = (char *)v285;
    }
  }
  else
  {
    unsigned int *v85 = v94;
    uint64_t v95 = v85 + 1;
  }
  uint64_t v284 = v95;
  unsigned int v104 = v74 + GatherModeIndexGroupDimension * v5 * (*(_DWORD *)(a3 + 636) >> 6);
  if (v95 >= (unsigned int *)v84)
  {
    int v106 = (unsigned int *)__p;
    uint64_t v107 = ((char *)v95 - (unsigned char *)__p) >> 2;
    unint64_t v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v109 = v84 - (unsigned char *)__p;
    if (v109 >> 1 > v108) {
      unint64_t v108 = v109 >> 1;
    }
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v110 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v110 = v108;
    }
    if (v110)
    {
      uint64_t v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v285, v110);
      int v106 = (unsigned int *)__p;
      uint64_t v95 = v284;
    }
    else
    {
      uint64_t v111 = 0;
    }
    uint64_t v112 = &v111[4 * v107];
    uint64_t v113 = &v111[4 * v110];
    *(_DWORD *)uint64_t v112 = v104;
    uint64_t v105 = (unsigned int *)(v112 + 4);
    while (v95 != v106)
    {
      int v114 = *--v95;
      *((_DWORD *)v112 - 1) = v114;
      v112 -= 4;
    }
    __p = v112;
    uint64_t v284 = v105;
    uint64_t v285 = (unsigned int *)v113;
    if (v106) {
      operator delete(v106);
    }
  }
  else
  {
    unsigned int *v95 = v104;
    uint64_t v105 = v95 + 1;
  }
  unsigned int v115 = v65 - 5;
  uint64_t v284 = v105;
  unsigned int v116 = *(unsigned char *)(a3 + 1163) & 0xF;
  if ((v65 - 5) < 2) {
    int v117 = 1;
  }
  else {
    int v117 = HIWORD(*(_DWORD *)(a3 + 512)) & 0x7FFF;
  }
  if (v115 < 2) {
    int v118 = 1;
  }
  else {
    int v118 = *(_DWORD *)(a3 + 516) & 0x7FFF;
  }
  if (v115 < 2) {
    unsigned int v119 = 1;
  }
  else {
    unsigned int v119 = *(_DWORD *)(a3 + 512) & 0x7FFF;
  }
  int v120 = v119 / v116;
  if (v11 & 0x400 | v270 & 0x10000000) {
    unsigned int v121 = v120;
  }
  else {
    unsigned int v121 = (*(_DWORD *)(a3 + 508) & 0x1FFFFu) / v116;
  }
  unsigned int v122 = *(_DWORD *)(a3 + 1112) >> 6;
  int v123 = *(_DWORD *)(a3 + 1168);
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  BOOL v282 = 0;
  unsigned int v124 = *(_DWORD *)(a3 + 1120);
  if (v123)
  {
    uint64_t v125 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v282, 1uLL);
    if ((v123 & 4) != 0) {
      int v130 = 16;
    }
    else {
      int v130 = 32;
    }
    uint64_t v127 = &v125[v129];
    *uint64_t v125 = v122 + (v124 >> 6) * v5 * vcvtps_s32_f32((float)v117 / (float)v130);
    uint64_t v128 = v125 + 1;
  }
  else
  {
    uint64_t v125 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v282, 1uLL);
    uint64_t v127 = &v125[v126];
    *uint64_t v125 = v122 + v117 * v5 * (v124 >> 6);
    uint64_t v128 = v125 + 1;
  }
  uint64_t v280 = v125;
  BOOL v282 = v127;
  uint64_t v281 = v128;
  unsigned int v131 = ((double)v122
                      + (double)(v5 * ((unint64_t)*(unsigned int *)(a3 + 1124) >> 6)) * (double)v121);
  uint64_t v132 = (char *)v127;
  if (v128 >= v127)
  {
    uint64_t v134 = (unsigned int *)v280;
    uint64_t v135 = ((char *)v128 - (unsigned char *)v280) >> 2;
    unint64_t v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v137 = (char *)v282 - (unsigned char *)v280;
    if (((char *)v282 - (unsigned char *)v280) >> 1 > v136) {
      unint64_t v136 = v137 >> 1;
    }
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v138 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v138 = v136;
    }
    if (v138)
    {
      BOOL v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v282, v138);
      uint64_t v134 = (unsigned int *)v280;
      uint64_t v128 = v281;
    }
    else
    {
      BOOL v139 = 0;
    }
    uint64_t v140 = (unsigned int *)&v139[4 * v135];
    uint64_t v132 = &v139[4 * v138];
    *uint64_t v140 = v131;
    uint64_t v133 = v140 + 1;
    while (v128 != v134)
    {
      unsigned int v141 = *--v128;
      *--uint64_t v140 = v141;
    }
    uint64_t v280 = v140;
    uint64_t v281 = v133;
    BOOL v282 = (unsigned int *)v132;
    if (v134)
    {
      operator delete(v134);
      uint64_t v132 = (char *)v282;
    }
  }
  else
  {
    unsigned int *v128 = v131;
    uint64_t v133 = v128 + 1;
  }
  uint64_t v281 = v133;
  unsigned int v142 = v122 + v118 * v5 * (*(_DWORD *)(a3 + 1128) >> 6);
  if (v133 >= (unsigned int *)v132)
  {
    uint64_t v144 = (unsigned int *)v280;
    uint64_t v145 = ((char *)v133 - (unsigned char *)v280) >> 2;
    unint64_t v146 = v145 + 1;
    if ((unint64_t)(v145 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v147 = v132 - (unsigned char *)v280;
    if (v147 >> 1 > v146) {
      unint64_t v146 = v147 >> 1;
    }
    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v148 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v148 = v146;
    }
    if (v148)
    {
      BOOL v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v282, v148);
      uint64_t v144 = (unsigned int *)v280;
      uint64_t v133 = v281;
    }
    else
    {
      BOOL v149 = 0;
    }
    uint64_t v150 = &v149[4 * v145];
    uint64_t v132 = &v149[4 * v148];
    *(_DWORD *)uint64_t v150 = v142;
    uint64_t v143 = (unsigned int *)(v150 + 4);
    while (v133 != v144)
    {
      int v151 = *--v133;
      *((_DWORD *)v150 - 1) = v151;
      v150 -= 4;
    }
    uint64_t v280 = v150;
    uint64_t v281 = v143;
    BOOL v282 = (unsigned int *)v132;
    if (v144)
    {
      operator delete(v144);
      uint64_t v132 = (char *)v282;
    }
  }
  else
  {
    unsigned int *v133 = v142;
    uint64_t v143 = v133 + 1;
  }
  uint64_t v281 = v143;
  unsigned int v152 = v122 + (*(_DWORD *)(a3 + 1132) >> 6) * v5 * (*(_DWORD *)(a3 + 532) & 0x1FFF);
  if (v143 >= (unsigned int *)v132)
  {
    uint64_t v154 = (unsigned int *)v280;
    uint64_t v155 = ((char *)v143 - (unsigned char *)v280) >> 2;
    unint64_t v156 = v155 + 1;
    if ((unint64_t)(v155 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v157 = v132 - (unsigned char *)v280;
    if (v157 >> 1 > v156) {
      unint64_t v156 = v157 >> 1;
    }
    if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v158 = v156;
    }
    if (v158)
    {
      int v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v282, v158);
      uint64_t v154 = (unsigned int *)v280;
      uint64_t v143 = v281;
    }
    else
    {
      int v159 = 0;
    }
    BOOL v160 = &v159[4 * v155];
    uint64_t v161 = &v159[4 * v158];
    *(_DWORD *)BOOL v160 = v152;
    uint64_t v153 = (unsigned int *)(v160 + 4);
    while (v143 != v154)
    {
      int v162 = *--v143;
      *((_DWORD *)v160 - 1) = v162;
      v160 -= 4;
    }
    uint64_t v280 = v160;
    uint64_t v281 = v153;
    BOOL v282 = (unsigned int *)v161;
    if (v154) {
      operator delete(v154);
    }
  }
  else
  {
    *uint64_t v143 = v152;
    uint64_t v153 = v143 + 1;
  }
  uint64_t v281 = v153;
  if (ZinIrTdValidationUtil::VerifyDmaAccess(v269, &v298, (uint64_t)&v296, (unsigned int **)&__p, (uint64_t)&v294, (unsigned int **)&v280, (uint64_t)&v292))
  {
    uint64_t v163 = 3;
  }
  else
  {
    uint64_t v164 = *(void *)(v265 + 560);
    unsigned int v165 = *(_DWORD *)(a3 + 640);
    uint64_t v277 = 0;
    uint64_t v278 = 0;
    unint64_t v279 = 0;
    unsigned int v166 = *(_DWORD *)(a3 + 648);
    BOOL v274 = 0;
    uint64_t v275 = 0;
    unint64_t v276 = 0;
    unsigned int v167 = *(_DWORD *)(a3 + 1136);
    uint64_t v271 = 0;
    uint64_t v272 = 0;
    unint64_t v273 = 0;
    if (v266)
    {
      unsigned int v168 = *(_DWORD *)(a3 + 656);
      uint64_t v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v279, 1uLL);
      unsigned int v170 = v165 >> 6;
      unint64_t v172 = (unint64_t)&v169[4 * v171];
      *(_DWORD *)uint64_t v169 = (v165 >> 6) + (v168 >> 7) * v164;
      uint64_t v173 = v169 + 4;
      uint64_t v277 = v169;
      unint64_t v279 = v172;
      uint64_t v278 = v169 + 4;
      int v174 = v170 + (*(_DWORD *)(a3 + 660) >> 7) * v164;
      if ((unint64_t)(v169 + 4) >= v172)
      {
        BOOL v176 = (char *)v277;
        uint64_t v177 = (v173 - (unsigned char *)v277) >> 2;
        unint64_t v178 = v177 + 1;
        if ((unint64_t)(v177 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v179 = v172 - (void)v277;
        if (v179 >> 1 > v178) {
          unint64_t v178 = v179 >> 1;
        }
        if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v180 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v180 = v178;
        }
        if (v180)
        {
          uint64_t v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v279, v180);
          BOOL v176 = (char *)v277;
          uint64_t v173 = v278;
        }
        else
        {
          uint64_t v181 = 0;
        }
        uint64_t v182 = &v181[4 * v177];
        unint64_t v172 = (unint64_t)&v181[4 * v180];
        *(_DWORD *)uint64_t v182 = v174;
        uint64_t v175 = v182 + 4;
        while (v173 != v176)
        {
          int v183 = *((_DWORD *)v173 - 1);
          v173 -= 4;
          *((_DWORD *)v182 - 1) = v183;
          v182 -= 4;
        }
        uint64_t v277 = v182;
        uint64_t v278 = v175;
        unint64_t v279 = v172;
        if (v176)
        {
          operator delete(v176);
          unint64_t v172 = v279;
        }
      }
      else
      {
        *((_DWORD *)v169 + 1) = v174;
        uint64_t v175 = v169 + 8;
      }
      uint64_t v278 = v175;
      int v184 = v170 + (*(_DWORD *)(a3 + 664) >> 7) * v164;
      if ((unint64_t)v175 >= v172)
      {
        uint64_t v186 = (char *)v277;
        uint64_t v187 = (v175 - (unsigned char *)v277) >> 2;
        unint64_t v188 = v187 + 1;
        if ((unint64_t)(v187 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v189 = v172 - (void)v277;
        if (v189 >> 1 > v188) {
          unint64_t v188 = v189 >> 1;
        }
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v190 = v188;
        }
        if (v190)
        {
          uint64_t v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v279, v190);
          uint64_t v186 = (char *)v277;
          uint64_t v175 = v278;
        }
        else
        {
          uint64_t v191 = 0;
        }
        BOOL v192 = &v191[4 * v187];
        uint64_t v193 = &v191[4 * v190];
        *(_DWORD *)BOOL v192 = v184;
        uint64_t v185 = v192 + 4;
        while (v175 != v186)
        {
          int v194 = *((_DWORD *)v175 - 1);
          v175 -= 4;
          *((_DWORD *)v192 - 1) = v194;
          v192 -= 4;
        }
        uint64_t v277 = v192;
        uint64_t v278 = v185;
        unint64_t v279 = (unint64_t)v193;
        if (v186) {
          operator delete(v186);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v175 = v184;
        uint64_t v185 = v175 + 4;
      }
      uint64_t v278 = v185;
    }
    if (v264)
    {
      unsigned int v195 = v166 >> 6;
      int v196 = (v166 >> 6) + (*(_DWORD *)(a3 + 668) >> 7) * v164;
      uint64_t v198 = v275;
      uint64_t v197 = (char *)v276;
      if ((unint64_t)v275 >= v276)
      {
        BOOL v200 = (char *)v274;
        uint64_t v201 = (v275 - (unsigned char *)v274) >> 2;
        unint64_t v202 = v201 + 1;
        if ((unint64_t)(v201 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v203 = v276 - (void)v274;
        if ((uint64_t)(v276 - (void)v274) >> 1 > v202) {
          unint64_t v202 = v203 >> 1;
        }
        if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v204 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v204 = v202;
        }
        if (v204)
        {
          uint64_t v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v276, v204);
          BOOL v200 = (char *)v274;
          uint64_t v198 = v275;
        }
        else
        {
          uint64_t v205 = 0;
        }
        uint64_t v206 = &v205[4 * v201];
        uint64_t v197 = &v205[4 * v204];
        *(_DWORD *)uint64_t v206 = v196;
        uint64_t v199 = v206 + 4;
        while (v198 != v200)
        {
          int v207 = *((_DWORD *)v198 - 1);
          v198 -= 4;
          *((_DWORD *)v206 - 1) = v207;
          v206 -= 4;
        }
        BOOL v274 = v206;
        uint64_t v275 = v199;
        unint64_t v276 = (unint64_t)v197;
        if (v200)
        {
          operator delete(v200);
          uint64_t v197 = (char *)v276;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v275 = v196;
        uint64_t v199 = v198 + 4;
      }
      uint64_t v275 = v199;
      int v208 = v195 + (*(_DWORD *)(a3 + 672) >> 7) * v164;
      if (v199 >= v197)
      {
        uint64_t v210 = (char *)v274;
        uint64_t v211 = (v199 - (unsigned char *)v274) >> 2;
        unint64_t v212 = v211 + 1;
        if ((unint64_t)(v211 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v213 = v197 - (unsigned char *)v274;
        if (v213 >> 1 > v212) {
          unint64_t v212 = v213 >> 1;
        }
        if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v214 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v214 = v212;
        }
        if (v214)
        {
          uint64_t v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v276, v214);
          uint64_t v210 = (char *)v274;
          uint64_t v199 = v275;
        }
        else
        {
          uint64_t v215 = 0;
        }
        BOOL v216 = &v215[4 * v211];
        uint64_t v197 = &v215[4 * v214];
        *(_DWORD *)BOOL v216 = v208;
        uint64_t v209 = v216 + 4;
        while (v199 != v210)
        {
          int v217 = *((_DWORD *)v199 - 1);
          v199 -= 4;
          *((_DWORD *)v216 - 1) = v217;
          v216 -= 4;
        }
        BOOL v274 = v216;
        uint64_t v275 = v209;
        unint64_t v276 = (unint64_t)v197;
        if (v210)
        {
          operator delete(v210);
          uint64_t v197 = (char *)v276;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v199 = v208;
        uint64_t v209 = v199 + 4;
      }
      uint64_t v275 = v209;
      int v218 = v195 + (*(_DWORD *)(a3 + 676) >> 7) * v164;
      if (v209 >= v197)
      {
        uint64_t v220 = (char *)v274;
        uint64_t v221 = (v209 - (unsigned char *)v274) >> 2;
        unint64_t v222 = v221 + 1;
        if ((unint64_t)(v221 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v223 = v197 - (unsigned char *)v274;
        if (v223 >> 1 > v222) {
          unint64_t v222 = v223 >> 1;
        }
        if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v224 = v222;
        }
        if (v224)
        {
          uint64_t v225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v276, v224);
          uint64_t v220 = (char *)v274;
          uint64_t v209 = v275;
        }
        else
        {
          uint64_t v225 = 0;
        }
        uint64_t v226 = &v225[4 * v221];
        uint64_t v227 = &v225[4 * v224];
        *(_DWORD *)uint64_t v226 = v218;
        uint64_t v219 = v226 + 4;
        while (v209 != v220)
        {
          int v228 = *((_DWORD *)v209 - 1);
          v209 -= 4;
          *((_DWORD *)v226 - 1) = v228;
          v226 -= 4;
        }
        BOOL v274 = v226;
        uint64_t v275 = v219;
        unint64_t v276 = (unint64_t)v227;
        if (v220) {
          operator delete(v220);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v209 = v218;
        uint64_t v219 = v209 + 4;
      }
      uint64_t v275 = v219;
    }
    if (v123)
    {
      unsigned int v229 = v167 >> 6;
      int v230 = (v167 >> 6) + (*(_DWORD *)(a3 + 1144) >> 7) * v164;
      BOOL v232 = v272;
      uint64_t v231 = (char *)v273;
      if ((unint64_t)v272 >= v273)
      {
        uint64_t v234 = (char *)v271;
        uint64_t v235 = (v272 - (unsigned char *)v271) >> 2;
        unint64_t v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v237 = v273 - (void)v271;
        if ((uint64_t)(v273 - (void)v271) >> 1 > v236) {
          unint64_t v236 = v237 >> 1;
        }
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v238 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v238 = v236;
        }
        if (v238)
        {
          uint64_t v239 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v273, v238);
          uint64_t v234 = (char *)v271;
          BOOL v232 = v272;
        }
        else
        {
          uint64_t v239 = 0;
        }
        BOOL v240 = &v239[4 * v235];
        uint64_t v231 = &v239[4 * v238];
        *(_DWORD *)BOOL v240 = v230;
        uint64_t v233 = v240 + 4;
        while (v232 != v234)
        {
          int v241 = *((_DWORD *)v232 - 1);
          v232 -= 4;
          *((_DWORD *)v240 - 1) = v241;
          v240 -= 4;
        }
        uint64_t v271 = v240;
        uint64_t v272 = v233;
        unint64_t v273 = (unint64_t)v231;
        if (v234)
        {
          operator delete(v234);
          uint64_t v231 = (char *)v273;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v272 = v230;
        uint64_t v233 = v232 + 4;
      }
      uint64_t v272 = v233;
      int v242 = v229 + (*(_DWORD *)(a3 + 1148) >> 7) * v164;
      if (v233 >= v231)
      {
        uint64_t v244 = (char *)v271;
        uint64_t v245 = (v233 - (unsigned char *)v271) >> 2;
        unint64_t v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v247 = v231 - (unsigned char *)v271;
        if (v247 >> 1 > v246) {
          unint64_t v246 = v247 >> 1;
        }
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v248 = v246;
        }
        if (v248)
        {
          uint64_t v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v273, v248);
          uint64_t v244 = (char *)v271;
          uint64_t v233 = v272;
        }
        else
        {
          uint64_t v249 = 0;
        }
        uint64_t v250 = &v249[4 * v245];
        uint64_t v231 = &v249[4 * v248];
        *(_DWORD *)uint64_t v250 = v242;
        uint64_t v243 = v250 + 4;
        while (v233 != v244)
        {
          int v251 = *((_DWORD *)v233 - 1);
          v233 -= 4;
          *((_DWORD *)v250 - 1) = v251;
          v250 -= 4;
        }
        uint64_t v271 = v250;
        uint64_t v272 = v243;
        unint64_t v273 = (unint64_t)v231;
        if (v244)
        {
          operator delete(v244);
          uint64_t v231 = (char *)v273;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v233 = v242;
        uint64_t v243 = v233 + 4;
      }
      uint64_t v272 = v243;
      int v252 = v229 + (*(_DWORD *)(a3 + 1152) >> 7) * v164;
      if (v243 >= v231)
      {
        uint64_t v254 = (char *)v271;
        uint64_t v255 = (v243 - (unsigned char *)v271) >> 2;
        unint64_t v256 = v255 + 1;
        if ((unint64_t)(v255 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v257 = v231 - (unsigned char *)v271;
        if (v257 >> 1 > v256) {
          unint64_t v256 = v257 >> 1;
        }
        if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v258 = v256;
        }
        if (v258)
        {
          uint64_t v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v273, v258);
          uint64_t v254 = (char *)v271;
          uint64_t v243 = v272;
        }
        else
        {
          uint64_t v259 = 0;
        }
        uint64_t v260 = &v259[4 * v255];
        uint64_t v261 = &v259[4 * v258];
        *(_DWORD *)uint64_t v260 = v252;
        uint64_t v253 = v260 + 4;
        while (v243 != v254)
        {
          int v262 = *((_DWORD *)v243 - 1);
          v243 -= 4;
          *((_DWORD *)v260 - 1) = v262;
          v260 -= 4;
        }
        uint64_t v271 = v260;
        uint64_t v272 = v253;
        unint64_t v273 = (unint64_t)v261;
        if (v254) {
          operator delete(v254);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v243 = v252;
        uint64_t v253 = v243 + 4;
      }
      uint64_t v272 = v253;
    }
    if ((v264 | v266 | v123)) {
      uint64_t v163 = ZinIrTdValidationUtil::VerifyDmaAccess(v269, (unsigned int **)&v277, (uint64_t)&v290, (unsigned int **)&v274, (uint64_t)&v288, (unsigned int **)&v271, (uint64_t)&v286);
    }
    else {
      uint64_t v163 = 0;
    }
    if (v271)
    {
      uint64_t v272 = (char *)v271;
      operator delete(v271);
    }
    if (v274)
    {
      uint64_t v275 = (char *)v274;
      operator delete(v274);
    }
    if (v277)
    {
      uint64_t v278 = (char *)v277;
      operator delete(v277);
    }
  }
  if (v280)
  {
    uint64_t v281 = (unsigned int *)v280;
    operator delete(v280);
  }
  if (__p)
  {
    uint64_t v284 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v298)
  {
    uint64_t v299 = v298;
    operator delete(v298);
  }
  return v163;
}

void sub_211173874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  int v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(void *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<8u>::ValidationForNonZeroFields(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 496) & 0x7FFF) != 0)
  {
    if ((*(_WORD *)(a1 + 516) & 0x7FFF) != 0)
    {
      unsigned int v1 = *(_DWORD *)(a1 + 524);
      if ((v1 & 0x30000000) != 0)
      {
        if (v1 >> 30)
        {
          int v34 = *(_DWORD *)(a1 + 528);
          if ((v34 & 0x6000) != 0)
          {
            if ((v1 & 0x6000) != 0)
            {
              if ((v1 & 0x18000) != 0)
              {
                if ((v34 & 0xC0) != 0)
                {
                  if ((v1 & 0x3F) != 0)
                  {
                    if ((v1 & 0xFC0) != 0)
                    {
                      if ((v34 & 0x1F) != 0)
                      {
                        unsigned int v35 = *(_DWORD *)(a1 + 532);
                        if (HIWORD(v35))
                        {
                          if ((v35 & 0x1FFF) != 0)
                          {
                            if ((*(_WORD *)(a1 + 536) & 0x7FFF) != 0)
                            {
                              if ((*(unsigned char *)(a1 + 865) & 0xF) != 0)
                              {
                                if ((*(unsigned char *)(a1 + 869) & 0xF) != 0)
                                {
                                  if ((*(unsigned char *)(a1 + 913) & 0xF) != 0)
                                  {
                                    if ((*(unsigned char *)(a1 + 683) & 0xF) != 0)
                                    {
                                      if ((*(unsigned char *)(a1 + 687) & 0xF) != 0)
                                      {
                                        if ((*(_WORD *)(a1 + 696) & 0x3F0) != 0)
                                        {
                                          if ((*(_DWORD *)(a1 + 700) & 0x1FFFF) != 0)
                                          {
                                            if ((*(_DWORD *)(a1 + 704) & 0x1FFFF) != 0)
                                            {
                                              if ((*(unsigned char *)(a1 + 1163) & 0xF) != 0) {
                                                return 0;
                                              }
                                              BOOL v181 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                              if (v181) {
                                                ZinValidateTd<8u>::ValidationForNonZeroFields(v181, v182, v183, v184, v185, v186, v187, v188);
                                              }
                                            }
                                            else
                                            {
                                              BOOL v173 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                              if (v173) {
                                                ZinValidateTd<8u>::ValidationForNonZeroFields(v173, v174, v175, v176, v177, v178, v179, v180);
                                              }
                                            }
                                          }
                                          else
                                          {
                                            BOOL v165 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v165) {
                                              ZinValidateTd<8u>::ValidationForNonZeroFields(v165, v166, v167, v168, v169, v170, v171, v172);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          BOOL v157 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                          if (v157) {
                                            ZinValidateTd<8u>::ValidationForNonZeroFields(v157, v158, v159, v160, v161, v162, v163, v164);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        BOOL v149 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v149) {
                                          ZinValidateTd<8u>::ValidationForNonZeroFields(v149, v150, v151, v152, v153, v154, v155, v156);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      BOOL v141 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                      if (v141) {
                                        ZinValidateTd<8u>::ValidationForNonZeroFields(v141, v142, v143, v144, v145, v146, v147, v148);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    BOOL v133 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    if (v133) {
                                      ZinValidateTd<8u>::ValidationForNonZeroFields(v133, v134, v135, v136, v137, v138, v139, v140);
                                    }
                                  }
                                }
                                else
                                {
                                  BOOL v125 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  if (v125) {
                                    ZinValidateTd<8u>::ValidationForNonZeroFields(v125, v126, v127, v128, v129, v130, v131, v132);
                                  }
                                }
                              }
                              else
                              {
                                BOOL v117 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (v117) {
                                  ZinValidateTd<8u>::ValidationForNonZeroFields(v117, v118, v119, v120, v121, v122, v123, v124);
                                }
                              }
                            }
                            else
                            {
                              BOOL v109 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (v109) {
                                ZinValidateTd<8u>::ValidationForNonZeroFields(v109, v110, v111, v112, v113, v114, v115, v116);
                              }
                            }
                          }
                          else
                          {
                            BOOL v101 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            if (v101) {
                              ZinValidateTd<8u>::ValidationForNonZeroFields(v101, v102, v103, v104, v105, v106, v107, v108);
                            }
                          }
                        }
                        else
                        {
                          BOOL v36 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v36) {
                            ZinValidateTd<8u>::ValidationForNonZeroFields(v36, v37, v38, v39, v40, v41, v42, v43);
                          }
                        }
                      }
                      else
                      {
                        BOOL v92 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v92) {
                          ZinValidateTd<8u>::ValidationForNonZeroFields(v92, v93, v94, v95, v96, v97, v98, v99);
                        }
                      }
                    }
                    else
                    {
                      BOOL v84 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v84) {
                        ZinValidateTd<8u>::ValidationForNonZeroFields(v84, v85, v86, v87, v88, v89, v90, v91);
                      }
                    }
                  }
                  else
                  {
                    BOOL v76 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v76) {
                      ZinValidateTd<8u>::ValidationForNonZeroFields(v76, v77, v78, v79, v80, v81, v82, v83);
                    }
                  }
                }
                else
                {
                  BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v68) {
                    ZinValidateTd<8u>::ValidationForNonZeroFields(v68, v69, v70, v71, v72, v73, v74, v75);
                  }
                }
              }
              else
              {
                BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v60) {
                  ZinValidateTd<8u>::ValidationForNonZeroFields(v60, v61, v62, v63, v64, v65, v66, v67);
                }
              }
            }
            else
            {
              BOOL v52 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v52) {
                ZinValidateTd<8u>::ValidationForNonZeroFields(v52, v53, v54, v55, v56, v57, v58, v59);
              }
            }
          }
          else
          {
            BOOL v44 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v44) {
              ZinValidateTd<8u>::ValidationForNonZeroFields(v44, v45, v46, v47, v48, v49, v50, v51);
            }
          }
        }
        else
        {
          BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v2) {
            ZinValidateTd<8u>::ValidationForNonZeroFields(v2, v3, v4, v5, v6, v7, v8, v9);
          }
        }
      }
      else
      {
        BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v26) {
          ZinValidateTd<8u>::ValidationForNonZeroFields(v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v18) {
        ZinValidateTd<8u>::ValidationForNonZeroFields(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }
  else
  {
    BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v10) {
      ZinValidateTd<8u>::ValidationForNonZeroFields(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::CheckRedundantKDMARegisters(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 1052);
  unsigned int v2 = *(_DWORD *)(a1 + 36);
  if (((v2 ^ (v1 >> 19)) & 3) != 0)
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else if ((((v2 >> 2) ^ (v1 >> 17)) & 3) != 0)
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else if (((v2 >> 5) ^ (v1 >> 8)))
  {
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v20) {
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    if ((((v2 >> 4) ^ (v1 >> 10)) & 1) == 0) {
      return 0;
    }
    BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v28) {
      ZinValidateTd<8u>::CheckRedundantKDMARegisters(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 551) & 0x20) == 0) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a2 + 524);
  if ((v3 & 0x30000000) != 0x10000000)
  {
    BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v14) {
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return 3;
  }
  if (v3 >> 30 != 1)
  {
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 3;
  }
  if ((*(_DWORD *)(a2 + 528) & 0x6000) != 0x2000)
  {
    BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v30) {
      ZinValidateTd<8u>::VerifyL2InplaceAllocation(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    return 3;
  }
  unint64_t v4 = *(unsigned int *)(a2 + 532);
  if ((v4 & 0x4000) != 0)
  {
    if ((*(_DWORD *)(a2 + 1056) & 7) != 4)
    {
      BOOL v55 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v55) {
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      return 3;
    }
    unint64_t v38 = v4 >> 16;
    if (v38 != 1 << (*(_DWORD *)(a2 + 520) & 7))
    {
      BOOL v71 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v71) {
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      return 3;
    }
    if (*(void *)(a1 + 880) < v38)
    {
      BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v39) {
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      return 3;
    }
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 1052);
  if ((v5 & 0x100) != 0)
  {
    BOOL v47 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v47) {
      ZinValidateTd<8u>::ValidateFillLowerNEFirst(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    return 3;
  }
  if ((v5 & 0x10000) != 0)
  {
    if ((*(unsigned char *)(a2 + 1056) & 8) != 0)
    {
      BOOL v63 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v63) {
        ZinValidateTd<8u>::ValidateFillLowerNEFirst(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      return 3;
    }
    return 0;
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v6) {
    ZinValidateTd<8u>::ValidateFillLowerNEFirst(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndex(unsigned int a1, uint64_t a2, unint64_t a3, char a4, int a5)
{
  if (!a5 || (a4 & 1) != 0) {
    return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(a1, a3);
  }
  else {
    return ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(a1, a2, a3);
  }
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a3 - a2 >= (unint64_t)a1) {
    return 0;
  }
  BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v3) {
    ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(unsigned int a1, unint64_t a2)
{
  if (a1 < a2) {
    return 0;
  }
  BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v3) {
    ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return 3;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexGroupDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 780) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexDepthDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 780) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexPlaneDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 780) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<8u>::GetGatherModeIndexHeightDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 780) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 504) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 492);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 494);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 496);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 532) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinIrTdValidationUtil::ValidateKernelCaching<8u>(uint64_t a1, uint64_t a2)
{
  *(void *)((char *)&v110[1] + 4) = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 2088)) {
    return 0;
  }
  ZinCodegenUtil::SplitInstructionListByHWNetwork(a2, &v93);
  uint64_t v3 = v93;
  uint64_t v84 = v94;
  if (v93 == v94) {
    goto LABEL_85;
  }
LABEL_3:
  v92[0] = 0;
  v92[1] = 0;
  uint64_t v91 = (uint64_t *)v92;
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    goto LABEL_84;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    unint64_t v6 = *(unsigned int *)(*(void *)(v5 + 200) + 44);
    LODWORD(v88[0]) = HIWORD(*(_DWORD *)(*(void *)(v5 + 200) + 44));
    if (*(void *)(a1 + 2096) < v6 >> 16) {
      ZinAssertImpl("Invalid KID");
    }
    if (v6 >= 0x10000)
    {
      v85[0] = v88;
      uint64_t v7 = std::__tree<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v91, (unsigned int *)v88, (uint64_t)&std::piecewise_construct, v85);
      uint64_t v8 = v7[6];
      uint64_t v9 = v7[7];
      if (v8 >= v9)
      {
        uint64_t v11 = v7[5];
        uint64_t v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = (char *)v9 - (char *)v11;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 7), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (uint64_t *)&v16[8 * v12];
        *uint64_t v17 = v5;
        uint64_t v10 = v17 + 1;
        uint64_t v19 = v7[5];
        uint64_t v18 = v7[6];
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = *--v18;
            *--uint64_t v17 = v20;
          }
          while (v18 != v19);
          uint64_t v18 = v7[5];
        }
        void v7[5] = v17;
        v7[6] = v10;
        v7[7] = (uint64_t *)&v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v8 = v5;
        uint64_t v10 = v8 + 1;
      }
      v7[6] = v10;
      goto LABEL_25;
    }
    if ((v6 & 0x40) != 0) {
      break;
    }
LABEL_25:
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3)
    {
      uint64_t v21 = v91;
      if (v91 == (uint64_t *)v92) {
        goto LABEL_84;
      }
      while (1)
      {
        uint64_t v22 = v21[5];
        unint64_t v23 = v21[6] - v22;
        if (v23 < 9)
        {
          if (v23 != 8 || (*(_DWORD *)(*(void *)(*(void *)v22 + 200) + 44) & 0x240) != 0x40) {
            goto LABEL_73;
          }
          BOOL v76 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v76) {
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          goto LABEL_89;
        }
        uint64_t v24 = *(void *)(*(void *)v22 + 200);
        int v25 = *(_DWORD *)(v24 + 44);
        if ((v25 & 0x40) == 0)
        {
          BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v60) {
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          goto LABEL_89;
        }
        if ((v25 & 0x200) != 0)
        {
          BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v68) {
            ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          goto LABEL_89;
        }
        RelocInfos = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos((ZinAneTdHw_v8 *)(v24 + 8));
        FindRelocationInfo(RelocInfos, 21776, v88);
        if (!v90)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v109, v110, v43);
            goto LABEL_67;
          }
          goto LABEL_89;
        }
        uint64_t v27 = v21[5];
        uint64_t v28 = v21[6] - v27;
        if ((unint64_t)v28 < 9)
        {
          char v37 = 1;
          goto LABEL_69;
        }
        unint64_t v29 = v28 >> 3;
        uint64_t v30 = v24 + 140;
        unint64_t v31 = 1;
        while (1)
        {
          uint64_t v32 = *(void *)(*(void *)(v27 + 8 * v31) + 200);
          int v33 = *(_DWORD *)(v32 + 44);
          if (v31 != v29 - 1) {
            break;
          }
          if ((v33 & 0x200) == 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v107, &v108, v48);
            }
            goto LABEL_67;
          }
LABEL_37:
          uint64_t v34 = (uint64_t *)ZinAneTdHw_v8::GetRelocInfos((ZinAneTdHw_v8 *)(v32 + 8));
          FindRelocationInfo(v34, 21776, v85);
          if (v87)
          {
            if (ZinAneRelocInfo::operator==((unsigned __int8 *)v88, (unsigned __int8 *)v85))
            {
              uint64_t v35 = v32 + 140;
              uint64_t v36 = -64;
              while (((*(_DWORD *)(v35 + v36) ^ *(_DWORD *)(v30 + v36)) & 1) == 0)
              {
                if ((*(_DWORD *)(v35 + v36 + 64) ^ *(_DWORD *)(v30 + v36 + 64)) >= 0x40)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v97, &v98, v41);
                  }
                  goto LABEL_55;
                }
                if ((*(_DWORD *)(v35 + v36 + 128) ^ *(_DWORD *)(v30 + v36 + 128)) >= 0x40)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v95, &v96, v42);
                  }
                  goto LABEL_55;
                }
                v36 += 4;
                if (!v36)
                {
                  char v37 = 1;
                  goto LABEL_56;
                }
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v99, &v100, v40);
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v101, &v102, v39);
            }
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              goto LABEL_67;
            }
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v103, &v104, v38);
          }
LABEL_55:
          char v37 = 0;
LABEL_56:
          if (v87 && v86 < 0) {
            operator delete(v85[1]);
          }
          if (v37)
          {
            ++v31;
            uint64_t v27 = v21[5];
            unint64_t v29 = (v21[6] - v27) >> 3;
            if (v31 < v29) {
              continue;
            }
          }
          goto LABEL_69;
        }
        if ((v33 & 0x200) == 0) {
          goto LABEL_37;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v105, &v106, v49);
        }
LABEL_67:
        char v37 = 0;
LABEL_69:
        if (v90 && v89 < 0) {
          operator delete(v88[1]);
        }
        if ((v37 & 1) == 0) {
          goto LABEL_89;
        }
LABEL_73:
        uint64_t v44 = (uint64_t *)v21[1];
        if (v44)
        {
          do
          {
            uint64_t v45 = v44;
            uint64_t v44 = (uint64_t *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            uint64_t v45 = (uint64_t *)v21[2];
            BOOL v46 = *v45 == (void)v21;
            uint64_t v21 = v45;
          }
          while (!v46);
        }
        uint64_t v21 = v45;
        if (v45 == (uint64_t *)v92)
        {
LABEL_84:
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v91, v92[0]);
          v3 += 24;
          if (v3 == v84)
          {
LABEL_85:
            uint64_t v50 = 0;
            goto LABEL_90;
          }
          goto LABEL_3;
        }
      }
    }
  }
  BOOL v51 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v51) {
    ZinIrTdValidationUtil::ValidateKernelCaching<8u>(v51, v52, v53, v54, v55, v56, v57, v58);
  }
LABEL_89:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v91, v92[0]);
  uint64_t v50 = 3;
LABEL_90:
  v88[0] = (void **)&v93;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](v88);
  return v50;
}

void sub_211174820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,char *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,char a42)
{
  if (a26 && a24 < 0) {
    operator delete(__p);
  }
  if (a35)
  {
    if (a33 < 0) {
      operator delete(a28);
    }
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a37, a40);
  a27 = &a42;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t ZinValidateTd<8u>::ValidateDepModeSrc1(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 508);
  int v5 = *(_DWORD *)(a2 + 504);
  if ((*(_DWORD *)(a2 + 768) & 3) == 1) {
    int v6 = ConvertCustomUnsignedTypeToInt32((*(_DWORD *)(a2 + 768) >> 2) & 0x1FFFFFFF, 0x1DuLL);
  }
  else {
    int v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 680);
  int v8 = ZinCountOnes<unsigned int>(v7 >> 28);
  if (*(unsigned char *)(a2 + 545))
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 3;
  }
  if ((*(unsigned char *)(a2 + 776) & 7) != 0)
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    return 3;
  }
  if ((*(unsigned char *)(a2 + 585) & 7) != 0)
  {
    BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v26) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 545) & 4) != 0)
  {
    BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v42) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 551) & 0x10) != 0)
  {
    BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v50) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 1109) & 7) != 0)
  {
    BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v34) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 3;
  }
  int v58 = *(_DWORD *)(a2 + 680);
  int v59 = *(_DWORD *)(a1 + 1160);
  unsigned int v60 = v59 ^ v58;
  if (((v59 ^ v58) & 0xF000000) != 0)
  {
    BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v61) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    return 3;
  }
  if ((v60 & 3) != 0)
  {
    BOOL v69 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v69) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    return 3;
  }
  if (v60 >> 28)
  {
    BOOL v85 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v85) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    return 3;
  }
  if ((v58 & 0x70000) != 0)
  {
    BOOL v77 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v77) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    return 3;
  }
  if ((v59 & 0x70000) != 0)
  {
    BOOL v93 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v93) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    return 3;
  }
  if ((*(_WORD *)(a1 + 514) & 0x7FFFu) * (*(_DWORD *)(a1 + 524) >> 30) >= 2
    && ((*(_WORD *)(a2 + 494) & 0x7FFE) != 0 || (*(_DWORD *)(a2 + 548) & 0xF0) == 0x40)
    && (*(_DWORD *)(a1 + 1120) ^ *(_DWORD *)(a2 + 600)) >= 0x40)
  {
    BOOL v129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v129) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    return 3;
  }
  if (((*(_DWORD *)(a1 + 528) >> 13) & 3) * (*(_DWORD *)(a1 + 516) & 0x7FFFu) >= 2
    && (*(_WORD *)(a2 + 496) & 0x7FFE) != 0
    && (*(_DWORD *)(a1 + 1128) ^ *(_DWORD *)(a2 + 608)) >= 0x40)
  {
    BOOL v146 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v146) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    return 3;
  }
  unsigned int v101 = v4 & 0x1FFFF;
  unsigned int v102 = v5 & 0x1FFFF;
  unsigned int v103 = (HIBYTE(v7) & 0xF) - v8;
  BOOL v104 = (v4 & 0x1FFFF) == (v5 & 0x1FFFF) && v6 % (int)v101 == 0;
  unsigned int v105 = v101 / v103;
  int v106 = v101 % v103;
  unsigned int v107 = v102 / v103;
  BOOL v108 = !v106 && !(v102 % v103) && v6 % (int)v103 == 0;
  unsigned int v109 = *(_DWORD *)(a1 + 1124) >> 6;
  unsigned int v110 = *(_DWORD *)(a2 + 604) >> 6;
  if (v105 >= 2 && v107 >= 2 && v110 != v109)
  {
    BOOL v111 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v111) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    return 3;
  }
  unsigned int v119 = *(_DWORD *)(a1 + 532) & 0x1FFF;
  unsigned int v120 = *(_DWORD *)(a2 + 532) & 0x1FFF;
  if (v104)
  {
    uint64_t result = 0;
    if (v119 >= 2 && v120 >= 2 && v119 != v120)
    {
      BOOL v121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v121) {
        ZinValidateTd<17u>::ValidateDepModeSrc1(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      return 3;
    }
  }
  else
  {
    if (!v108) {
      return 0;
    }
    unsigned int v137 = *(_DWORD *)(a1 + 1132) >> 6;
    if (v119 >= 2)
    {
      if (v105 < 2)
      {
        if (v105 == 1 && v107 >= 2 && v137 != v110)
        {
          BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v154) {
            ZinValidateTd<17u>::ValidateDepModeSrc1(v154, v155, v156, v157, v158, v159, v160, v161);
          }
          return 3;
        }
      }
      else if ((double)v105 * (double)v109 != (double)v137)
      {
        BOOL v138 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v138) {
          ZinValidateTd<17u>::ValidateDepModeSrc1(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        return 3;
      }
    }
    unsigned int v162 = *(_DWORD *)(a2 + 612) >> 6;
    if (v120 >= 2)
    {
      if (v107 < 2)
      {
        if (v105 >= 2 && v107 == 1 && v162 != v109)
        {
          BOOL v171 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v171) {
            ZinValidateTd<17u>::ValidateDepModeSrc1(v171, v172, v173, v174, v175, v176, v177, v178);
          }
          return 3;
        }
      }
      else if ((double)v107 * (double)v110 != (double)v162)
      {
        BOOL v163 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v163) {
          ZinValidateTd<17u>::ValidateDepModeSrc1(v163, v164, v165, v166, v167, v168, v169, v170);
        }
        return 3;
      }
    }
    uint64_t result = 0;
    if (v119 >= 2 && v105 == 1 && v120 >= 2 && v107 == 1 && v137 != v162)
    {
      BOOL v179 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v179) {
        ZinValidateTd<17u>::ValidateDepModeSrc1(v179, v180, v181, v182, v183, v184, v185, v186);
      }
      return 3;
    }
  }
  return result;
}

uint64_t ZinValidateTd<8u>::ValidateDepModeSrc2(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 508);
  int v5 = *(_DWORD *)(a2 + 504);
  if ((*(_DWORD *)(a2 + 772) & 3) == 1) {
    int v6 = ConvertCustomUnsignedTypeToInt32((*(_DWORD *)(a2 + 772) >> 2) & 0x1FFFFFFF, 0x1DuLL);
  }
  else {
    int v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 684);
  int v8 = ZinCountOnes<unsigned int>(v7 >> 28);
  if ((*(unsigned char *)(a2 + 545) & 2) != 0)
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinValidateTd<8u>::ValidateDepModeSrc2(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 3;
  }
  if ((*(unsigned char *)(a2 + 776) & 7) != 0)
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    return 3;
  }
  if ((*(unsigned char *)(a2 + 589) & 7) != 0)
  {
    BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v26) {
      ZinValidateTd<8u>::ValidateDepModeSrc2(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 545) & 4) != 0)
  {
    BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v42) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 551) & 0x10) != 0)
  {
    BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v50) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    return 3;
  }
  if ((*(unsigned char *)(a1 + 1109) & 7) != 0)
  {
    BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v34) {
      ZinValidateTd<8u>::ValidateDepModeSrc1(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 3;
  }
  int v58 = *(_DWORD *)(a2 + 684);
  int v59 = *(_DWORD *)(a1 + 1160);
  unsigned int v60 = v59 ^ v58;
  if (((v59 ^ v58) & 0xF000000) != 0)
  {
    BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v61) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    return 3;
  }
  if ((v60 & 3) != 0)
  {
    BOOL v69 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v69) {
      ZinValidateTd<8u>::ValidateDepModeSrc2(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    return 3;
  }
  if (v60 >> 28)
  {
    BOOL v85 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v85) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    return 3;
  }
  if ((v58 & 0x70000) != 0)
  {
    BOOL v77 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v77) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    return 3;
  }
  if ((v59 & 0x70000) != 0)
  {
    BOOL v93 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v93) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    return 3;
  }
  if ((*(_WORD *)(a1 + 514) & 0x7FFFu) * (*(_DWORD *)(a1 + 524) >> 30) >= 2
    && ((*(_WORD *)(a2 + 494) & 0x7FFE) != 0 || (*(_DWORD *)(a2 + 548) & 0xF0) == 0x40)
    && (*(_DWORD *)(a1 + 1120) ^ *(_DWORD *)(a2 + 624)) >= 0x40)
  {
    BOOL v129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v129) {
      ZinValidateTd<8u>::ValidateDepModeSrc2(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    return 3;
  }
  if (((*(_DWORD *)(a1 + 528) >> 13) & 3) * (*(_DWORD *)(a1 + 516) & 0x7FFFu) >= 2
    && (*(_WORD *)(a2 + 496) & 0x7FFE) != 0
    && (*(_DWORD *)(a1 + 1128) ^ *(_DWORD *)(a2 + 632)) >= 0x40)
  {
    BOOL v146 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v146) {
      ZinValidateTd<8u>::ValidateDepModeSrc2(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    return 3;
  }
  unsigned int v101 = v4 & 0x1FFFF;
  unsigned int v102 = v5 & 0x1FFFF;
  unsigned int v103 = (HIBYTE(v7) & 0xF) - v8;
  BOOL v104 = (v4 & 0x1FFFF) == (v5 & 0x1FFFF) && v6 % (int)v101 == 0;
  unsigned int v105 = v101 / v103;
  int v106 = v101 % v103;
  unsigned int v107 = v102 / v103;
  BOOL v108 = !v106 && !(v102 % v103) && v6 % (int)v103 == 0;
  unsigned int v109 = *(_DWORD *)(a1 + 1124) >> 6;
  unsigned int v110 = *(_DWORD *)(a2 + 628) >> 6;
  if (v105 >= 2 && v107 >= 2 && v110 != v109)
  {
    BOOL v111 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v111) {
      ZinValidateTd<17u>::ValidateDepModeSrc1(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    return 3;
  }
  unsigned int v119 = *(_DWORD *)(a1 + 532) & 0x1FFF;
  unsigned int v120 = *(_DWORD *)(a2 + 532) & 0x1FFF;
  if (v104)
  {
    uint64_t result = 0;
    if (v119 >= 2 && v120 >= 2 && v119 != v120)
    {
      BOOL v121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v121) {
        ZinValidateTd<17u>::ValidateDepModeSrc1(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      return 3;
    }
  }
  else
  {
    if (!v108) {
      return 0;
    }
    unsigned int v137 = *(_DWORD *)(a1 + 1132) >> 6;
    if (v119 >= 2)
    {
      if (v105 < 2)
      {
        if (v105 == 1 && v107 >= 2 && v137 != v110)
        {
          BOOL v154 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v154) {
            ZinValidateTd<17u>::ValidateDepModeSrc1(v154, v155, v156, v157, v158, v159, v160, v161);
          }
          return 3;
        }
      }
      else if ((double)v105 * (double)v109 != (double)v137)
      {
        BOOL v138 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v138) {
          ZinValidateTd<17u>::ValidateDepModeSrc1(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        return 3;
      }
    }
    unsigned int v162 = *(_DWORD *)(a2 + 636) >> 6;
    if (v120 >= 2)
    {
      if (v107 < 2)
      {
        if (v105 >= 2 && v107 == 1 && v162 != v109)
        {
          BOOL v171 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v171) {
            ZinValidateTd<17u>::ValidateDepModeSrc1(v171, v172, v173, v174, v175, v176, v177, v178);
          }
          return 3;
        }
      }
      else if ((double)v107 * (double)v110 != (double)v162)
      {
        BOOL v163 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v163) {
          ZinValidateTd<17u>::ValidateDepModeSrc1(v163, v164, v165, v166, v167, v168, v169, v170);
        }
        return 3;
      }
    }
    uint64_t result = 0;
    if (v119 >= 2 && v105 == 1 && v120 >= 2 && v107 == 1 && v137 != v162)
    {
      BOOL v179 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v179) {
        ZinValidateTd<17u>::ValidateDepModeSrc1(v179, v180, v181, v182, v183, v184, v185, v186);
      }
      return 3;
    }
  }
  return result;
}

void ZinIrCodegenHandleTds<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Invalid TD exists\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Error during network codegen\n", a5, a6, a7, a8, 0);
}

void ZinIrCodegenHandleTdsMakeList<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Instruction offset could not be calculated\n", a5, a6, a7, a8, 0);
}

void ZinIrCodegenValidateTds<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation for CachePrefetchKernelTaskInterval failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation for L2 circular buffer failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation for RCAS failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation for DepMode failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation for PE Reduction Accumulation Retention failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation kernel caching failure.\n", a5, a6, a7, a8, 0);
}

void ZinIrContextSwitchValidator<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "TDs with PEAccKeep set cannot be context switch points\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Producing chained buffers cannot be context switch points\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Last task of the network should have no live outs set\n", a5, a6, a7, a8, 0);
}

void SetTensorKernelDependency<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleCommonMACBypassMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleCommonPoolOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleCommonConvOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleL2Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Max/Min Pooling should always be used with negative/positive padding mode.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid Padding mode for Conv\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<8u>::HandleNEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to set NE Round Cfg registers", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Weight on layer but no kernel data\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<8u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<8u>::HandleEngineLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void HandlePELayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PECodegenUtils::HandlePEGOCLayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PECodegenUtils::HandlePEPoolLayer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Pooling operation not supported.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Max Pooling padding mode is not Negative\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Min Pooling padding mode is not Positive\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: DoPoolKernel failed", a5, a6, a7, a8, 0);
}

void CodegenReductionFinalScaleEpsilon<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CodegenReductionResult<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void GetReductionResultIndexGlobalArg<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Reduction dimension index not supported.\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<8u>::ValidateOCGSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<8u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::Test(uint8_t *a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_noalloc_v8 || kernel_dma_src_c"
        "oeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_alloc_v8 || kernel_dma_src_coeff_cache_hint =="
        " ane_kernel_dma_src_coeff_dma_config_cache_hint_depri_v8 || kernel_dma_src_coeff_cache_hint == ane_kernel_dma_sr"
        "c_coeff_dma_config_cache_hint_drop_v8";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s\n", a1);
}

void ZinValidateTd<8u>::ValidateDepMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<8u>::ValidateRCASDependency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidateL2CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinIrTdValidationUtil::ValidateDramCircularBuffer<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidatePEIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::VerifyL2InplaceAllocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidationForNonZeroFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::CheckRedundantKDMARegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidatePEIndexMaxIndexForBroadcastedIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<8u>::ValidatePEIndexMaxIndexForNonBroadcastedIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrTdValidationUtil::ValidateKernelCaching<8u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidateDepModeSrc1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<8u>::ValidateDepModeSrc2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

uint64_t ZinIrCrossProductUnit::TensorDimensions(ZinIrCrossProductUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4 = *((void *)this + 1);
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  *((void *)a3 + 4) = *(void *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

void ZinIrCrossProductUnit::CreateOpcode(ZinIrCrossProductUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_211180D34(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void ZinIrCrossProductUnit::CreateLayer(ZinIrCrossProductUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_211180E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPESecureFlushPerf::GetPECostPerPatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  a8[3] = (a5 + a7 - 1) / a7 * ((a4 + a6 - 1) / a6);
  unsigned __int8 v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unint64_t v10 = a8[3];
  uint64_t v11 = 4;
  if ((v9 & (v10 < 4)) == 0) {
    uint64_t v11 = a8[3];
  }
  a8[1] = v10;
  a8[2] = v11;
  *a8 = v10;
  return 0;
}

void RtProcedureGraphNode::~RtProcedureGraphNode(RtProcedureGraphNode *this)
{
  int v2 = (RtOperationGraph *)*((void *)this + 3);
  if (v2)
  {
    RtOperationGraph::~RtOperationGraph(v2);
    MEMORY[0x21667D3C0]();
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x21667D3C0](v3, 0x1000C40504FFAC1);
  }
  RtOperationAdjacencies::~RtOperationAdjacencies((RtProcedureGraphNode *)((char *)this + 40));
}

ZinIrKernel *ValidateKernelQuantizationSemantics(ZinIrKernel **a1)
{
  uint64_t result = *a1;
  if (*((void *)result + 73) || *((void *)result + 77))
  {
    float v15 = 0.0;
    int v14 = 0;
    ZinIrKernel::HasSingularScale(result, &v15);
    ZinIrKernel::HasSingularZeroPoint(*a1, &v14);
    if (ZinIrKernel::HasPerCoutScale(*a1))
    {
      int ScaleFormat = ZinIrKernel::GetScaleFormat(*a1);
      if ((ScaleFormat & 0xFFFFFFFD) != 4)
      {
        ZinIrKernelFormatToString(ScaleFormat, v12);
        if (v13 >= 0) {
          unint64_t v10 = (const char *)v12;
        }
        else {
          unint64_t v10 = (const char *)v12[0];
        }
        ZinAssertImpl("Error: invalid format %s for per-cout scale. Only fp16 and fp32 are supported", v10);
      }
      *(float *)&double v4 = v15;
      if (v15 != 0.0) {
        ZinAssertImpl("Error: per-cout scale and scalar scale cannot be defined simultaneously", v4);
      }
    }
    if (ZinIrKernel::HasPerCoutZeroPoint(*a1) && v14) {
      ZinAssertImpl("Error: per-cout zero point and scalar zero point cannot be defined simultaneously");
    }
    BOOL HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*a1);
    float v6 = v15;
    uint64_t result = (ZinIrKernel *)ZinIrKernel::HasPerCoutZeroPoint(*a1);
    if (v14) {
      int v7 = 1;
    }
    else {
      int v7 = (int)result;
    }
    if (HasPerCoutScale || v6 != 0.0 || v7)
    {
      uint64_t v8 = *((void *)*a1 + 73);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 152)) {
          ZinAssertImpl("Error: mutable kernels are not supported with kernel quantization");
        }
      }
    }
    if (v7)
    {
      unsigned int WeightFormat = ZinIrKernel::GetWeightFormat(*a1);
      if ((ZinKernelFormatIsQuantizationCompatible(WeightFormat) & 1) == 0)
      {
        ZinIrKernelFormatToString(WeightFormat, v12);
        if (v13 >= 0) {
          uint64_t v11 = (const char *)v12;
        }
        else {
          uint64_t v11 = (const char *)v12[0];
        }
        ZinAssertImpl("Error: unsupported kernel format %s for kernel zero point. Only int8 and uint8 kernel formats are supported.", v11);
      }
      uint64_t result = (ZinIrKernel *)ZinIrKernel::HasPerCoutZeroPoint(*a1);
      if ((result & 1) == 0)
      {
        if (WeightFormat == 1)
        {
          uint64_t result = (ZinIrKernel *)ZinInRange<signed char>(v14);
          if ((result & 1) == 0) {
            ZinAssertImpl("Error: scalar zero point = %d is out of bounds for int8 format", v14);
          }
        }
        else
        {
          uint64_t result = (ZinIrKernel *)ZinInRange<unsigned char>(v14);
          if ((result & 1) == 0) {
            ZinAssertImpl("Error: scalar zero point = %d is out of bounds for uint8 format", v14);
          }
        }
      }
    }
  }
  return result;
}

void sub_211181214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ValidateKernelFormatSemantics(ZinIrKernel **a1)
{
  uint64_t result = ZinIrKernel::GetWeightFormat(*a1);
  uint64_t v3 = *((void *)*a1 + 73);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 152))
    {
      int v4 = result;
      uint64_t result = FormatValidForMutableLayer(result);
      if ((result & 1) == 0)
      {
        ZinIrKernelFormatToString(v4, v6);
        if (v7 >= 0) {
          long long v5 = (const char *)v6;
        }
        else {
          long long v5 = (const char *)v6[0];
        }
        ZinAssertImpl("Error: invalid mutable kernel format %s for conv layer", v5);
      }
    }
  }
  return result;
}

void sub_2111812B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ZinIrKernel **ValidateKernelFootprint(ZinIrKernel **result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  long long v5 = *result;
  uint64_t v6 = *((void *)*result + 73);
  if (v6)
  {
    BOOL v7 = *((int *)v5 + 96) <= 1 && *((_DWORD *)v5 + 97) <= 1;
    if (v7 && *((int *)v5 + 98) <= 1)
    {
      uint64_t v11 = result;
      uint64_t v12 = *((void *)v5 + 33);
      v41.i64[0] = *((void *)v5 + 34);
      v41.i64[1] = v12;
      uint64_t v42 = *((void *)v5 + 35);
      unsigned int v37 = *(_DWORD *)(v6 + 8);
      char v13 = *((unsigned char *)v5 + 448);
      BOOL HasPerCoutScale = ZinIrKernel::HasPerCoutScale(v5);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutScale);
      int v16 = v15;
      BOOL HasPerCoutZeroPoint = ZinIrKernel::HasPerCoutZeroPoint(*v11);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutZeroPoint);
      char v19 = v18;
      uint64_t PaletteVectorSize = ZinIrKernel::GetPaletteVectorSize(*v11);
      BOOL v21 = (v13 & 0x40) == 0;
      unsigned int v35 = v13 & 0x40;
      uint64_t v22 = a5;
      int v23 = v35 >> 6;
      if (v21) {
        uint64_t v24 = (int *)((char *)v5 + 328);
      }
      else {
        uint64_t v24 = (int *)((char *)v5 + 340);
      }
      unint64_t EstimatedFootprintPerCoutElement = ZinKernelGetEstimatedFootprintPerCoutElement(*(void *)(a2 + 16) / *((void *)v5 + 50), v35 >> 6, v24, &v41, *(_DWORD *)a2, v37, v22, v16, v19, PaletteVectorSize);
      uint64_t result = (ZinIrKernel **)ZinKernelFitsInKMEM(*(void *)(a2 + 16) / *((void *)v5 + 50), v23, 0, v24, &v41, *(_DWORD *)a2, v37, v22, v16, v19, PaletteVectorSize);
      if ((result & 1) == 0)
      {
        ZinKernelComputeStrideExpansion(v22, v24, (unint64_t *)&v41, *(_DWORD *)a2, v23, v40);
        unsigned int v25 = *((unsigned __int8 *)v5 + 448);
        uint64_t v26 = *((void *)v5 + 50);
        unint64_t v27 = a3[1];
        unint64_t v29 = a3[4];
        uint64_t v28 = a3[5];
        unint64_t v30 = a3[3];
        unsigned int v31 = *(_DWORD *)a2;
        char v32 = *(unsigned char *)(a4 + 384);
        LOBYTE(v38[0]) = 0;
        char v39 = 0;
        int CanUseKernelStreaming = ZinMirConvUtils::CanUseKernelStreaming(v25 >> 7, v26, v42, v40[5], v27, v28, v30, v29, v31, (uint64_t)v22, v32, v38);
        std::__optional_destruct_base<ZinMirL2Config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v38);
        if (!CanUseKernelStreaming
          || (uint64_t result = (ZinIrKernel **)ZinKernelFitsInKMEM(*(void *)(a2 + 16) / *((void *)v5 + 50), v35 != 0, 1, v24, &v41, *(_DWORD *)a2, v37, v22, v16, v19, PaletteVectorSize), !result))
        {
          ZinAssertImpl("Error: Convolution configuration cannot fit in KMEM (Given: %zub, Max: %zub)", EstimatedFootprintPerCoutElement, v22[60]);
        }
      }
    }
  }
  return result;
}

void sub_211181520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__optional_destruct_base<ZinMirL2Config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ValidateKernelFormat(ZinIrKernel **a1, uint64_t a2)
{
  uint64_t result = ZinIrKernel::GetWeightFormat(*a1);
  int v4 = result;
  if (!*(unsigned char *)(a2 + 1260))
  {
    uint64_t result = ZinKernelFormatGetUnderlyingType(result);
    if (result == 5) {
      ZinAssertImpl("E4M3 not supported as kernel format on this architecture");
    }
  }
  if ((v4 - 7) <= 0x14)
  {
    uint64_t result = ZinIrHalParameters::IsSupportedPaletteFormat(a2, v4);
    if ((result & 1) == 0)
    {
      if (!Is3bitPaletteKernelFormat(v4)
        || (int Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(v4),
            uint64_t result = ZinIrHalParameters::IsSupportedPaletteFormat(a2, Upcasted4bitPaletteFormatFrom3bitPaletteFormat),
            (result & 1) == 0))
      {
        ZinIrKernelFormatToString(v4, v7);
        if (v8 >= 0) {
          uint64_t v6 = (const char *)v7;
        }
        else {
          uint64_t v6 = (const char *)v7[0];
        }
        ZinAssertImpl("Error: invalid palette kernel format %s for conv layer", v6);
      }
    }
  }
  return result;
}

void sub_211181600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ValidatePaletteVectorSize(ZinIrKernel **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = *a1;
  unint64_t v9 = *((void *)*a1 + 33);
  v28[0] = *((void *)*a1 + 34);
  v28[1] = v9;
  v28[2] = *((void *)v8 + 35);
  unint64_t PaletteVectorSize = ZinIrKernel::GetPaletteVectorSize(v8);
  uint64_t v11 = PaletteVectorSize;
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a4 + 1592);
  while (PaletteVectorSize != 1 << v12)
  {
    if (v13 + 1 == ++v12)
    {
      if (PaletteVectorSize == 1 || v13 > 1) {
        ZinAssertImpl("Error: invalid kernel palette vector size %zu. It should be 2's power of 0 ~ %zu", PaletteVectorSize, v13);
      }
LABEL_6:
      ZinAssertImpl("Error: vector palettized weights are not supported");
    }
  }
  if (PaletteVectorSize != 1 && v13 <= 1) {
    goto LABEL_6;
  }
  unint64_t v14 = *((void *)v8 + 50);
  if (v14 >= 2 && *(void *)(a3 + 16) / v14 % PaletteVectorSize) {
    ZinAssertImpl("Error: invalid kernel palette vector size %zu for output channel = %zu, num_group = %zu", PaletteVectorSize, *(void *)(a3 + 16), v14);
  }
  if (PaletteVectorSize >= 2)
  {
    if (!*(unsigned char *)(a4 + 1590)) {
      ZinAssertImpl("Error: vector palettization with vector std::string::size_type size = %zu > 1 is not supported", PaletteVectorSize);
    }
    uint64_t v15 = *((void *)*a1 + 73);
    if (v15 && *(unsigned char *)(v15 + 152)) {
      ZinAssertImpl("Error: mutable kernels are not supported with vector palettization");
    }
    int v16 = (char *)v8 + 340;
    unsigned int v17 = *((unsigned char *)v8 + 448) & 0x40;
    if ((*((unsigned char *)v8 + 448) & 0x40) == 0) {
      int v16 = (char *)v8 + 328;
    }
    size_t v26 = *(void *)v16;
    int v27 = *((_DWORD *)v16 + 2);
    ZinKernelComputeStrideExpansion((void *)a4, (int *)&v26, v28, *(_DWORD *)a2, v17 >> 6, (int *)&v22);
    if (v24 * v23 * v25 != 1) {
      ZinAssertImpl("Error: invalid output stride [%d, %d, %d]. Only support stride = 1 for vector palettization", v23, v24, v25);
    }
    if ((*((unsigned char *)v8 + 448) & 0x40) != 0) {
      ZinAssertImpl("Error: deconv with vector palettization is not supported");
    }
    if (ZinMirConvUtils::IsChannelwiseConvolution(*(ZinMirConvUtils **)(a2 + 16), *(ZinMirConvUtils **)(a3 + 16), *((ZinMirConvUtils **)v8 + 50)))
    {
      ZinAssertImpl("Invalid kernel palette vector size.");
    }
  }
  size_t v26 = 0;
  int WeightFormat = ZinIrKernel::GetWeightFormat(*a1);
  uint64_t result = ZinKernelGetPaletteLUTSize(WeightFormat, v11, &v26);
  if (result)
  {
    ZinIrKernelFormatToString(WeightFormat, &v22);
    if (v25 >= 0) {
      BOOL v21 = (const char *)&v22;
    }
    else {
      BOOL v21 = v22;
    }
    ZinAssertImpl("Error: failed to get palette LUT size due to invalid kernel format %s", v21);
  }
  size_t v20 = *(void *)(a4 + 488);
  if (v26 > v20) {
    ZinAssertImpl("Error: invalid palette LUT std::string::size_type size = %zu bytes. It should not exceed %zu bytes", v26, v20);
  }
  return result;
}

void sub_21118186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *ZinIrHalH15c::GetParams(ZinIrHalH15c *this)
{
  uint64_t v156 = *MEMORY[0x263EF8340];
  {
    ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters = xmmword_211EDFBD0;
    dword_26777CA30 = 8;
    unk_26777CA38 = xmmword_211EDFBE0;
    unk_26777CA48 = xmmword_211ED32E0;
    unk_26777CA58 = xmmword_211ED32F0;
    unk_26777CA68 = xmmword_211ED2760;
    unk_26777CA78 = xmmword_211ED3300;
    unk_26777CA88 = xmmword_211ED32F0;
    unk_26777CA98 = xmmword_211ED2610;
    unk_26777CAA8 = xmmword_211ED3310;
    unk_26777CAB8 = xmmword_211ED3320;
    unk_26777CAC8 = xmmword_211ED2640;
    unk_26777CAD8 = vdupq_n_s64(4uLL);
    qword_26777CAE8 = 4;
    xmmword_26777CAF0 = xmmword_211EF5A60;
    unk_26777CB00 = unk_211EF5A70;
    xmmword_26777CB10 = xmmword_211EF5A60;
    unk_26777CB20 = unk_211EF5A70;
    qword_26777CB40 = 4;
    xmmword_26777CB30 = xmmword_211EF5A80;
    xmmword_26777CB48 = xmmword_211ED2650;
    xmmword_26777CB58 = xmmword_211ED2660;
    xmmword_26777CB68 = xmmword_211ED2660;
    xmmword_26777CB78 = xmmword_211ED2660;
    xmmword_26777CB88 = xmmword_211ED2670;
    xmmword_26777CB98 = xmmword_211ED2680;
    xmmword_26777CBA8 = xmmword_211ED2690;
    xmmword_26777CBB8 = xmmword_211ED26A0;
    xmmword_26777CBC8 = xmmword_211ED26B0;
    xmmword_26777CBD8 = xmmword_211ED2780;
    xmmword_26777CBE8 = xmmword_211ED4650;
    xmmword_26777CBF8 = xmmword_211ED26E0;
    xmmword_26777CC08 = xmmword_211ED26F0;
    xmmword_26777CC18 = xmmword_211ED3340;
    xmmword_26777CC28 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777CC38 = xmmword_211ED3390;
    xmmword_26777CC48 = xmmword_211ED2720;
    xmmword_26777CC58 = xmmword_211ED2730;
    xmmword_26777CC68 = xmmword_211ED2740;
    xmmword_26777CC78 = xmmword_211ED3350;
    xmmword_26777CC88 = xmmword_211EDFBF0;
    qword_26777CC98 = 0;
    word_26777CCA0 = 256;
    xmmword_26777CCA8 = xmmword_211ED2760;
    xmmword_26777CCB8 = xmmword_211ED2770;
    xmmword_26777CCC8 = xmmword_211ED2780;
    qword_26777CCD8 = 0x10000;
    byte_26777CCE0 = 122;
    xmmword_26777CCE8 = xmmword_211ED3370;
    dword_26777CCF8 = 520097776;
    qword_26777CCFC = 0xFFFFFFEB0000000BLL;
    xmmword_26777CD08 = xmmword_211ED27A0;
    xmmword_26777CD18 = xmmword_211ED27B0;
    xmmword_26777CD28 = xmmword_211ED27C0;
    int64x2_t v117 = vdupq_n_s64(8uLL);
    long long v118 = xmmword_211ED3380;
    long long v119 = xmmword_211ED3390;
    long long v120 = xmmword_211ED2730;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777CD38, (uint64_t)&v117, 4uLL);
    xmmword_26777CD50 = xmmword_211ED33A0;
    unk_26777CD60 = xmmword_211ED27E0;
    xmmword_26777CD70 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777CD80 = xmmword_211ED2610;
    unk_26777CD90 = vdupq_n_s64(8uLL);
    unk_26777CDA0 = xmmword_211ED27F0;
    unk_26777CDB0 = xmmword_211ED2800;
    unk_26777CDC0 = vdupq_n_s64(0x100uLL);
    unk_26777CDD0 = vdupq_n_s64(0x80uLL);
    unk_26777CDE0 = xmmword_211ED33B0;
    unk_26777CDF0 = xmmword_211ED33C0;
    unk_26777CE00 = xmmword_211ED2830;
    unk_26777CE10 = xmmword_211ED2840;
    unk_26777CE20 = xmmword_211ED2850;
    unk_26777CE30 = vdupq_n_s64(2uLL);
    unk_26777CE40 = xmmword_211ED2660;
    unk_26777CE50 = vdupq_n_s64(0x4000uLL);
    unk_26777CE60 = xmmword_211ED2860;
    unk_26777CE70 = 257;
    byte_26777CE76 = 0;
    unk_26777CE72 = 0;
    unk_26777CE77 = 1;
    unk_26777CE7F = 0x101010101010101;
    unk_26777CE79 = 0x101010101010101;
    unk_26777CE87 = 16843008;
    byte_26777CE8F = 0;
    unk_26777CE90 = 16842753;
    word_26777CE94 = 1;
    qword_26777CE96 = 0x101010101010101;
    word_26777CE9E = 0;
    unk_26777CEA0 = xmmword_211ED2760;
    unk_26777CEB0 = xmmword_211ED2880;
    unk_26777CEC0 = 40;
    unk_26777CED0 = 0;
    unk_26777CEC8 = 0;
    word_26777CED8 = 1;
    *(int *)((char *)&dword_26777CEDA + 3) = 16843009;
    dword_26777CEDA = 16843009;
    unk_26777CEE8 = 16;
    byte_26777CEF0 = 0;
    unk_26777CEF1 = 16843009;
    unk_26777CEF9 = 0x101010100010000;
    unk_26777CF01 = 16844808;
    unk_26777CF05 = 0;
    unk_26777CF07 = 16843009;
    byte_26777CF0B = 1;
    unk_26777CF0C = 0x1010100010000;
    unk_26777CF14 = 16777472;
    word_26777CF18 = 2056;
    unk_26777CF20 = xmmword_211ED33F0;
    unk_26777CF30 = 4;
    word_26777CF38 = 0;
    unk_26777CF3C = 1;
    unk_26777CF40 = 0x10000;
    word_26777CF44 = 257;
    byte_26777CF46 = 1;
    unk_26777CF47 = 0;
    unk_26777CF4B = 0x606000000010101;
    unk_26777CF53 = 65792;
    unk_26777CF57 = 256;
    byte_26777CF59 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777CF60, "Simple");
    qword_26777CF78 = 50331648;
    dword_26777CF80 = 1071225242;
    *(void *)algn_26777CF84 = 0x230000000ELL;
    *(_OWORD *)&algn_26777CF84[12] = xmmword_211ED2890;
    *(int64x2_t *)&algn_26777CF84[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_26777CF84[44] = xmmword_211ED27D0;
    qword_26777CFC0 = 8;
    byte_26777CFC8 = 0;
    unk_26777CFCC = 0xF3E800000;
    byte_26777CFD4 = 1;
    long long v155 = xmmword_211ED28B0;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777CFD8, &v155, 4uLL);
    v153[0] = xmmword_211EF5A98;
    v153[1] = unk_211EF5AA8;
    v154[0] = xmmword_211EF5AB8;
    *(_OWORD *)((char *)v154 + 12) = *(long long *)((char *)&xmmword_211EF5AB8 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777CFF0, v153, 0xFuLL);
    v151[4] = xmmword_211EF5B14;
    v151[5] = unk_211EF5B24;
    v152[0] = xmmword_211EF5B34;
    *(_OWORD *)((char *)v152 + 12) = *(long long *)((char *)&xmmword_211EF5B34 + 12);
    v151[0] = xmmword_211EF5AD4;
    v151[1] = unk_211EF5AE4;
    v151[2] = xmmword_211EF5AF4;
    v151[3] = unk_211EF5B04;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777D008, v151, 0x1FuLL);
    v149[7] = unk_211EF5BC0;
    v149[8] = xmmword_211EF5BD0;
    v150[0] = unk_211EF5BE0;
    *(_OWORD *)((char *)v150 + 12) = unk_211EF5BEC;
    v149[4] = xmmword_211EF5B90;
    v149[5] = unk_211EF5BA0;
    v149[6] = xmmword_211EF5BB0;
    v149[0] = xmmword_211EF5B50;
    v149[1] = unk_211EF5B60;
    v149[2] = xmmword_211EF5B70;
    v149[3] = unk_211EF5B80;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777D020, v149, 0x2BuLL);
    int v113 = 2;
    long long v114 = xmmword_211ED28C0;
    uint64_t v115 = 0x1100000002;
    int v116 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v34, &v113, 1uLL);
    v117.i32[0] = 641877825;
    long long v118 = 0uLL;
    v117.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v117.i64[1], v34, (uint64_t)v35, 0xCCCCCCCCCCCCCCCDLL * ((v35 - (unsigned char *)v34) >> 3));
    int v109 = 2;
    long long v110 = xmmword_211ED28C0;
    uint64_t v111 = 0x1100000002;
    int v112 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v32, &v109, 1uLL);
    LODWORD(v119) = 759318337;
    long long v120 = 0uLL;
    *((void *)&v119 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((void *)&v119 + 1, v32, (uint64_t)v33, 0xCCCCCCCCCCCCCCCDLL * ((v33 - (unsigned char *)v32) >> 3));
    int v105 = 2;
    long long v106 = xmmword_211ED28C0;
    uint64_t v107 = 0x1100000002;
    int v108 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v30, &v105, 1uLL);
    int v121 = 792872769;
    memset(v122, 0, sizeof(v122));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v122, v30, (uint64_t)v31, 0xCCCCCCCCCCCCCCCDLL * ((v31 - (unsigned char *)v30) >> 3));
    int v101 = 2;
    long long v102 = xmmword_211ED28C0;
    uint64_t v103 = 0x1100000002;
    int v104 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v28, &v101, 1uLL);
    int v123 = 2084718401;
    memset(v124, 0, sizeof(v124));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v124, v28, (uint64_t)v29, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)v28) >> 3));
    int v97 = 10;
    int64x2_t v98 = vdupq_n_s64(1uLL);
    uint64_t v99 = 0x800000001;
    int v100 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v26, &v97, 1uLL);
    int v125 = 642527542;
    memset(v126, 0, sizeof(v126));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v126, v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - (unsigned char *)v26) >> 3));
    int v93 = 3;
    int64x2_t v94 = vdupq_n_s64(1uLL);
    uint64_t v95 = 0x700000002;
    int v96 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v24, &v93, 1uLL);
    int v127 = 642527336;
    memset(v128, 0, sizeof(v128));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v128, v24, (uint64_t)v25, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)v24) >> 3));
    int v89 = 3;
    int64x2_t v90 = vdupq_n_s64(1uLL);
    uint64_t v91 = 0x700000002;
    int v92 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v22, &v89, 1uLL);
    int v129 = 759967848;
    memset(v130, 0, sizeof(v130));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v130, v22, (uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (unsigned char *)v22) >> 3));
    int v85 = 3;
    int64x2_t v86 = vdupq_n_s64(1uLL);
    uint64_t v87 = 0x700000002;
    int v88 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v20, &v85, 1uLL);
    int v131 = 793522280;
    memset(v132, 0, sizeof(v132));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v132, v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - (unsigned char *)v20) >> 3));
    int v81 = 3;
    int64x2_t v82 = vdupq_n_s64(1uLL);
    uint64_t v83 = 0x700000002;
    int v84 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v18, &v81, 1uLL);
    int v133 = 2085367912;
    memset(v134, 0, sizeof(v134));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v134, v18, (uint64_t)v19, 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)v18) >> 3));
    int v77 = 3;
    long long v78 = xmmword_211ED28C0;
    uint64_t v79 = 0x1300000002;
    int v80 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v16, &v77, 1uLL);
    int v135 = 642934849;
    memset(v136, 0, sizeof(v136));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v136, v16, (uint64_t)v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)v16) >> 3));
    int v73 = 3;
    long long v74 = xmmword_211ED28C0;
    uint64_t v75 = 0x1300000002;
    int v76 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v14, &v73, 1uLL);
    int v137 = 760375361;
    memset(v138, 0, sizeof(v138));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v138, v14, (uint64_t)v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)v14) >> 3));
    int v69 = 3;
    long long v70 = xmmword_211ED28C0;
    uint64_t v71 = 0x1300000002;
    int v72 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v12, &v69, 1uLL);
    int v139 = 793929793;
    memset(v140, 0, sizeof(v140));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v140, v12, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)v12) >> 3));
    int v65 = 3;
    long long v66 = xmmword_211ED28C0;
    uint64_t v67 = 0x1300000002;
    int v68 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v10, &v65, 1uLL);
    int v141 = 2085775425;
    memset(v142, 0, sizeof(v142));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v142, v10, (uint64_t)v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - (unsigned char *)v10) >> 3));
    int v57 = 2;
    int64x2_t v58 = vdupq_n_s64(1uLL);
    uint64_t v59 = 0x100000001;
    int v60 = 0;
    int v61 = 2;
    long long v62 = xmmword_211ED2790;
    uint64_t v63 = 0x900000002;
    int v64 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v8, &v57, 2uLL);
    int v143 = 641230384;
    memset(v144, 0, sizeof(v144));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v144, v8, (uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v8) >> 3));
    int v49 = 2;
    int64x2_t v50 = vdupq_n_s64(1uLL);
    uint64_t v51 = 0x100000001;
    int v52 = 0;
    int v53 = 2;
    long long v54 = xmmword_211ED2790;
    uint64_t v55 = 0x900000002;
    int v56 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v6, &v49, 2uLL);
    int v145 = 641234480;
    memset(v146, 0, sizeof(v146));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v146, v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 3));
    int v45 = 3;
    int64x2_t v46 = vdupq_n_s64(1uLL);
    uint64_t v47 = 0x700000002;
    int v48 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v45, 1uLL);
    int v147 = 707153000;
    memset(v148, 0, sizeof(v148));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v148, __p, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_26777D038, (unsigned int *)&v117, 16);
    word_26777D050 = 0;
    byte_26777D052 = 1;
    *(_DWORD *)algn_26777D053 = 0;
    qword_26777D058 = 0;
    dword_26777D060 = 0;
    unk_26777D068 = 0u;
    word_26777D088 = 257;
    qword_26777D0B0 = 8;
    unk_26777D078 = 0u;
    xmmword_26777D090 = xmmword_211EF5C00;
    unk_26777D0A0 = unk_211EF5C10;
    unk_26777D0B8 = xmmword_211EF5A50;
    v43[0] = xmmword_211EF5C28;
    v43[1] = unk_211EF5C38;
    _OWORD v43[2] = xmmword_211EF5C48;
    uint64_t v44 = 0x41E19CF8E0000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777D0C8, v43, 7uLL);
    long long v41 = xmmword_211EF5C60;
    uint64_t v42 = 0x41CDEBE980000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777D0E0, &v41, 3uLL);
    v39[0] = xmmword_211EF5C78;
    v39[1] = unk_211EF5C88;
    uint64_t v40 = 0x41E7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777D0F8, v39, 5uLL);
    v38[4] = xmmword_211EF5CE0;
    v38[5] = unk_211EF5CF0;
    v38[6] = xmmword_211EF5D00;
    v38[0] = xmmword_211EF5CA0;
    v38[1] = unk_211EF5CB0;
    v38[2] = xmmword_211EF5CC0;
    v38[3] = unk_211EF5CD0;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777D110, (double *)v38, 7);
    xmmword_26777D128 = xmmword_211ED28E0;
    v36[0] = xmmword_211EF5D10;
    v36[1] = unk_211EF5D20;
    v36[2] = xmmword_211EF5D30;
    int v37 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777D138, v36, 0xDuLL);
    xmmword_26777D150 = xmmword_211ED3410;
    unk_26777D160 = xmmword_211ED28F0;
    qword_26777D170 = 64;
    unk_26777D178 = 0x101010101010101;
    unk_26777D17E = 0x101010101010101;
    unk_26777D208 = 0u;
    *(_OWORD *)&algn_26777D213[5] = 0u;
    unk_26777D188 = 0u;
    unk_26777D198 = 0u;
    unk_26777D1A8 = 0u;
    unk_26777D1B8 = 0u;
    unk_26777D1C8 = 0u;
    unk_26777D1D8 = 0u;
    unk_26777D1E8 = 0u;
    unk_26777D1F8 = 0u;
    word_26777D210 = 257;
    byte_26777D212 = 1;
    byte_26777D220 = 0;
    word_26777D228 = 256;
    dword_26777D230 = 0;
    byte_26777D234 = 0;
    *(_DWORD *)algn_26777D22A = 0;
    byte_26777D235 = 1;
    unk_26777D238 = xmmword_211ED4690;
    byte_26777D248 = 1;
    qword_26777D250 = 0xFFFFLL;
    byte_26777D258 = 0;
    qword_26777D260 = 0;
    word_26777D268 = 257;
    byte_26777D26A = 1;
    uint64_t v2 = 512;
    qword_26777D270 = 0x80000000;
    do
    {
      uint64_t v3 = *(void **)((char *)&v114 + v2 + 8);
      if (v3)
      {
        *(uint64_t *)((char *)&v115 + v2) = (uint64_t)v3;
        operator delete(v3);
      }
      v2 -= 32;
    }
    while (v2);
    if (__p)
    {
      long long v5 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      BOOL v7 = v6;
      operator delete(v6);
    }
    if (v8)
    {
      unint64_t v9 = v8;
      operator delete(v8);
    }
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    if (v14)
    {
      uint64_t v15 = v14;
      operator delete(v14);
    }
    if (v16)
    {
      unsigned int v17 = v16;
      operator delete(v16);
    }
    if (v18)
    {
      char v19 = v18;
      operator delete(v18);
    }
    if (v20)
    {
      BOOL v21 = v20;
      operator delete(v20);
    }
    if (v22)
    {
      int v23 = v22;
      operator delete(v22);
    }
    if (v24)
    {
      int v25 = v24;
      operator delete(v24);
    }
    if (v26)
    {
      int v27 = v26;
      operator delete(v26);
    }
    if (v28)
    {
      unint64_t v29 = v28;
      operator delete(v28);
    }
    if (v30)
    {
      unsigned int v31 = v30;
      operator delete(v30);
    }
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    if (v34)
    {
      unsigned int v35 = v34;
      operator delete(v34);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters, &dword_210C72000);
  }
  return &ZinIrHalH15c::GetParams(void)const::ZinIrHalH15cParameters;
}

void sub_2111829D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v33, *(void **)(v33 + 8));
  if (qword_26777D0F8)
  {
    qword_26777D100 = qword_26777D0F8;
    operator delete((void *)qword_26777D0F8);
  }
  if (qword_26777D0E0)
  {
    qword_26777D0E8 = qword_26777D0E0;
    operator delete((void *)qword_26777D0E0);
  }
  if (qword_26777D0C8)
  {
    qword_26777D0D0 = qword_26777D0C8;
    operator delete((void *)qword_26777D0C8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v32, *(void **)(v32 + 8));
  uint64_t v36 = 512;
  while (1)
  {
    int v37 = *(void **)((char *)&STACK[0x5D0] + v36 - 24);
    if (v37)
    {
      *(unint64_t *)((char *)&STACK[0x5D0] + v36 - 16) = (unint64_t)v37;
      operator delete(v37);
    }
    v36 -= 32;
    if (!v36)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a20) {
        operator delete(a20);
      }
      if (a23) {
        operator delete(a23);
      }
      if (a26) {
        operator delete(a26);
      }
      if (a29) {
        operator delete(a29);
      }
      if (a32)
      {
        v34[1] = a32;
        operator delete(a32);
      }
      uint64_t v38 = (void *)v34[3];
      if (v38)
      {
        v34[4] = v38;
        operator delete(v38);
      }
      char v39 = (void *)v34[6];
      if (v39)
      {
        v34[7] = v39;
        operator delete(v39);
      }
      uint64_t v40 = (void *)v34[9];
      if (v40)
      {
        v34[10] = v40;
        operator delete(v40);
      }
      long long v41 = (void *)v34[12];
      if (v41)
      {
        v34[13] = v41;
        operator delete(v41);
      }
      uint64_t v42 = (void *)v34[15];
      if (v42)
      {
        v34[16] = v42;
        operator delete(v42);
      }
      uint64_t v43 = (void *)v34[18];
      if (v43)
      {
        v34[19] = v43;
        operator delete(v43);
      }
      uint64_t v44 = (void *)v34[21];
      if (v44)
      {
        v34[22] = v44;
        operator delete(v44);
      }
      int v45 = (void *)v34[24];
      if (v45)
      {
        v34[25] = v45;
        operator delete(v45);
      }
      int64x2_t v46 = (void *)v34[27];
      if (v46)
      {
        v34[28] = v46;
        operator delete(v46);
      }
      uint64_t v47 = (void *)v34[30];
      if (v47)
      {
        v34[31] = v47;
        operator delete(v47);
      }
      if (qword_26777D020)
      {
        qword_26777D028 = qword_26777D020;
        operator delete((void *)qword_26777D020);
      }
      if (qword_26777D008)
      {
        qword_26777D010 = qword_26777D008;
        operator delete((void *)qword_26777D008);
      }
      if (qword_26777CFF0)
      {
        qword_26777CFF8 = qword_26777CFF0;
        operator delete((void *)qword_26777CFF0);
      }
      if (qword_26777CFD8)
      {
        qword_26777CFE0 = qword_26777CFD8;
        operator delete((void *)qword_26777CFD8);
      }
      if (byte_26777CF77 < 0) {
        operator delete((void *)qword_26777CF60);
      }
      if (qword_26777CD38)
      {
        qword_26777CD40 = qword_26777CD38;
        operator delete((void *)qword_26777CD38);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_211182CC0()
{
}

void sub_211182CD0()
{
}

void sub_211182CE0()
{
}

void sub_211182CF0()
{
}

void sub_211182D00()
{
}

void sub_211182D10()
{
}

void sub_211182D20()
{
}

void sub_211182D30()
{
}

void sub_211182D40()
{
}

void sub_211182D50()
{
}

void sub_211182D68()
{
}

void sub_211182D70()
{
}

void sub_211182D78()
{
}

void sub_211182D80()
{
}

void sub_211182D88()
{
}

void sub_211182D90()
{
}

void sub_211182D98()
{
}

uint64_t ZinParseCostVolumeUnit(const __CFDictionary *a1, float *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    if (!ZinParseCFNumberToken<(CFNumberType)3,int>(v6, @"DisparityDirection", @"InvalidCostVolumeDisparityDirection", a2 + 20, a3, 0)&& !ZinParseCFNumberToken<(CFNumberType)3,int>(v6, @"DisparityRange", @"InvalidCostVolumeDisparityRange", a2 + 21, a3, 0))
    {
      a2[22] = ParseScaleFactor(v6, @"Scale0");
      float v8 = ParseScaleFactor(v6, @"Scale1");
      uint64_t result = 0;
      a2[23] = v8;
      return result;
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
  }
  return 3;
}

float ParseScaleFactor(const __CFDictionary *a1, const __CFString *a2)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  _S8 = 1.0;
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      __int16 valuePtr = 0;
      CFNumberGetValue(v4, kCFNumberSInt16Type, &valuePtr);
      _H0 = valuePtr;
      __asm { FCVT            S8, H0 }
    }
  }
  return _S8;
}

BOOL ZinOpLayerUtils::IsPEPool(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((void *)this + 8) + 8) == 83;
}

BOOL ZinOpLayerUtils::HasReductionLayer(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((void *)this + 8) + 8) == 81 && *((void *)this + 63) != 0;
}

BOOL ZinOpLayerUtils::IsPEDynamicGOC(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((void *)this + 8) + 8) == 84;
}

BOOL ZinOpLayerUtils::IsReLU(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *(_DWORD *)(*((void *)this + 8) + 8) == 4 && *((_DWORD *)this + 48) == 1;
}

uint64_t ZinOpLayerUtils::IsCopy(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 9) {
    return 1;
  }
  uint64_t result = ZinIrOpLayer::IsANELayer(this);
  if (result)
  {
    CFNumberRef v4 = *(uint64_t (**)(ZinOpLayerUtils *))(*(void *)this + 536);
    return v4(this);
  }
  return result;
}

BOOL ZinOpLayerUtils::HasSingleFanInSingleFanout(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  return *((void *)this + 12) - *((void *)this + 11) == 8
      && *((void *)this + 15) - *((void *)this + 14) == 8;
}

BOOL ZinOpLayerUtils::IsConnectedToLiveOut(ZinOpLayerUtils *this, const ZinIrOpLayer *a2)
{
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((void *)this + 15);
  if (v2 != v3)
  {
    while (*(_DWORD *)(*(void *)(*(void *)v2 + 64) + 8) != 31)
    {
      v2 += 8;
      if (v2 == v3) {
        return 0;
      }
    }
  }
  return v2 != v3;
}

void ZinOpLayerUtils::GetTensorInfoFromLayers(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<ZinIrTensorInfo>::reserve((void **)a2, (a1[1] - *a1) >> 3);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (!*(void *)v4) {
        ZinAssertImpl("Failed to get tensor info from layers. Layer was null.");
      }
      (*(void (**)(long long *__return_ptr))(**(void **)v4 + 80))(&v36);
      CFTypeID v7 = *(_OWORD **)(a2 + 8);
      unint64_t v6 = *(void *)(a2 + 16);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v15 = *(_OWORD **)a2;
        unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v7 - *(void *)a2) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0x222222222222222) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v15) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x111111111111111) {
          unint64_t v19 = 0x222222222222222;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          size_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>(a2 + 16, v19);
          uint64_t v15 = *(_OWORD **)a2;
          CFTypeID v7 = *(_OWORD **)(a2 + 8);
        }
        else
        {
          size_t v20 = 0;
        }
        BOOL v21 = &v20[120 * v16];
        long long v22 = v36;
        long long v23 = v37;
        long long v24 = v39;
        *((_OWORD *)v21 + 2) = v38;
        *((_OWORD *)v21 + 3) = v24;
        *(_OWORD *)BOOL v21 = v22;
        *((_OWORD *)v21 + 1) = v23;
        long long v25 = v40;
        long long v26 = v41;
        long long v27 = v42;
        *((void *)v21 + 14) = v43;
        *((_OWORD *)v21 + 5) = v26;
        *((_OWORD *)v21 + 6) = v27;
        *((_OWORD *)v21 + 4) = v25;
        if (v7 == v15)
        {
          unsigned int v35 = &v20[120 * v16];
        }
        else
        {
          uint64_t v28 = &v20[120 * v16];
          do
          {
            long long v29 = *(_OWORD *)((char *)v7 - 120);
            long long v30 = *(_OWORD *)((char *)v7 - 104);
            long long v31 = *(_OWORD *)((char *)v7 - 88);
            *(_OWORD *)(v28 - 72) = *(_OWORD *)((char *)v7 - 72);
            *(_OWORD *)(v28 - 88) = v31;
            *(_OWORD *)(v28 - 104) = v30;
            *(_OWORD *)(v28 - 120) = v29;
            long long v32 = *(_OWORD *)((char *)v7 - 56);
            long long v33 = *(_OWORD *)((char *)v7 - 40);
            long long v34 = *(_OWORD *)((char *)v7 - 24);
            unsigned int v35 = v28 - 120;
            *((_DWORD *)v28 - 2) = *((_DWORD *)v7 - 2);
            *(_OWORD *)(v28 - 24) = v34;
            *(_OWORD *)(v28 - 40) = v33;
            *(_OWORD *)(v28 - 56) = v32;
            CFTypeID v7 = (_OWORD *)((char *)v7 - 120);
            v28 -= 120;
          }
          while (v7 != v15);
        }
        unint64_t v14 = v21 + 120;
        *(void *)a2 = v35;
        *(void *)(a2 + 8) = v21 + 120;
        *(void *)(a2 + 16) = &v20[120 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        long long v8 = v36;
        long long v9 = v37;
        long long v10 = v39;
        void v7[2] = v38;
        v7[3] = v10;
        *CFTypeID v7 = v8;
        v7[1] = v9;
        long long v11 = v40;
        long long v12 = v41;
        long long v13 = v42;
        *((void *)v7 + 14) = v43;
        void v7[5] = v12;
        v7[6] = v13;
        v7[4] = v11;
        unint64_t v14 = (char *)v7 + 120;
      }
      *(void *)(a2 + 8) = v14;
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void sub_2111832BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ZinIrTensorInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>(v3, a2);
    CFTypeID v7 = &v6[v5];
    long long v9 = &v6[120 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 120);
        long long v14 = *(_OWORD *)(v10 - 104);
        long long v15 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v12 - 88) = v15;
        *(_OWORD *)(v12 - 104) = v14;
        *(_OWORD *)(v12 - 120) = v13;
        long long v16 = *(_OWORD *)(v10 - 56);
        long long v17 = *(_OWORD *)(v10 - 40);
        long long v18 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v18;
        *(_OWORD *)(v12 - 40) = v17;
        *(_OWORD *)(v12 - 56) = v16;
        v12 -= 120;
        v10 -= 120;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t CpGraph::CpGraph(uint64_t a1, long long *a2)
{
  uint64_t v4 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::ZinIrNgraph(a1);
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_DWORD *)(v4 + 184) = 1065353216;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_DWORD *)(v4 + 224) = 1065353216;
  int64_t v5 = (std::string *)(v4 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_211183470(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v2);
  ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::~ZinIrNgraph(v1);
  _Unwind_Resume(a1);
}

void CpGraph::~CpGraph(void **this)
{
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)(this + 24));
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)(this + 19));
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  uint64_t v2 = this[13];
  if (v2)
  {
    this[14] = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)(this + 8));
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)(this + 3));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, this[1]);
}

uint64_t CpGraph::AddLayer(uint64_t result, unint64_t a2, const std::string *a3, uint64_t *a4, void *a5, unint64_t a6, const std::string *a7)
{
  long long v12 = (std::string *)result;
  unint64_t v19 = a6;
  unint64_t v20 = a2;
  for (uint64_t i = *(void **)(result + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v14 = i[4];
    if (v14 <= a2)
    {
      if (v14 >= a2) {
        return result;
      }
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(result, &v20);
  CpGraph::SetLayerName((uint64_t)v12, v20, a3);
  uint64_t v15 = *a4;
  if (a4[1] != *a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      CpGraph::AddTensor(v12, *(void *)(v15 + 8 * v18), (const std::string *)(*a5 + v17));
      ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v12, (unint64_t *)(*a4 + v16), &v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
      ++v18;
      uint64_t v15 = *a4;
      v17 += 24;
      v16 += 8;
    }
    while (v18 < (a4[1] - *a4) >> 3);
  }
  CpGraph::AddTensor(v12, a6, a7);
  return ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v12, &v20, &v19, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2)
  {
LABEL_7:
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a1, a2, (uint64_t *)a2);
    return 1;
  }
  unint64_t v3 = *a2;
  while (1)
  {
    unint64_t v4 = v2[4];
    if (v3 >= v4) {
      break;
    }
LABEL_6:
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (v4 < v3)
  {
    ++v2;
    goto LABEL_6;
  }
  return 0;
}

std::string *CpGraph::SetLayerName(uint64_t a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6 = a2;
  CFTypeID v7 = &v6;
  unint64_t v4 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 152, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::string::operator=(v4 + 1, a3);
}

std::string *CpGraph::AddTensor(std::string *result, unint64_t a2, const std::string *a3)
{
  uint64_t v4 = (uint64_t)result;
  unint64_t v7 = a2;
  for (uint64_t i = (void *)result->__r_.__value_.__l.__size_; i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v6 <= a2)
    {
      if (v6 >= a2) {
        return result;
      }
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode((uint64_t)result, &v7);
  return CpGraph::SetTensorName(v4, v7, a3);
}

uint64_t ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(void *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8 = a1 + 1;
  long long v9 = (void *)a1[1];
  if (!v9) {
    goto LABEL_12;
  }
  unint64_t v10 = *a2;
  long long v11 = a1 + 1;
  long long v12 = (void *)a1[1];
  do
  {
    unint64_t v13 = v12[4];
    BOOL v14 = v13 >= v10;
    if (v13 >= v10) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v12 + 1;
    }
    if (v14) {
      long long v11 = v12;
    }
    long long v12 = (void *)*v15;
  }
  while (*v15);
  if (v11 == v8 || v10 < v11[4]) {
LABEL_12:
  }
    long long v11 = a1 + 1;
  if (!v9) {
    return 0;
  }
  unint64_t v16 = *a3;
  uint64_t v17 = a1 + 1;
  do
  {
    unint64_t v18 = v9[4];
    BOOL v19 = v18 >= v16;
    if (v18 >= v16) {
      unint64_t v20 = v9;
    }
    else {
      unint64_t v20 = v9 + 1;
    }
    if (v19) {
      uint64_t v17 = v9;
    }
    long long v9 = (void *)*v20;
  }
  while (*v20);
  if (v17 == v8) {
    return 0;
  }
  unint64_t v22 = v17[4];
  BOOL v21 = v17 + 4;
  if (v16 < v22 || v11 == v8) {
    return 0;
  }
  long long v25 = v11 + 4;
  uint64_t v67 = (unint64_t **)(v11 + 4);
  long long v26 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(a1 + 3, (unint64_t **)&v67);
  if (v26)
  {
    long long v27 = v26;
    uint64_t v28 = v26 + 3;
    long long v29 = (uint64_t **)v26[4];
    if ((a4 & 0x8000000000000000) != 0)
    {
      uint64_t v33 = (uint64_t)(v26 + 5);
      unint64_t v34 = (unint64_t)v27[5];
      if ((unint64_t)v29 >= v34)
      {
        uint64_t v36 = ((char *)v29 - (char *)*v28) >> 3;
        if ((unint64_t)(v36 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v34 - (void)*v28;
        uint64_t v38 = v37 >> 2;
        if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
          uint64_t v38 = v36 + 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39) {
          long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v33, v39);
        }
        else {
          long long v40 = 0;
        }
        long long v41 = (uint64_t **)&v40[8 * v36];
        long long v42 = (uint64_t *)&v40[8 * v39];
        *long long v41 = v21;
        unsigned int v35 = (uint64_t *)(v41 + 1);
        uint64_t v44 = v27[3];
        uint64_t v43 = v27[4];
        if (v43 != v44)
        {
          do
          {
            int v45 = (uint64_t *)*--v43;
            *--long long v41 = v45;
          }
          while (v43 != v44);
          uint64_t v43 = *v28;
        }
        v27[3] = (uint64_t *)v41;
        v27[4] = v35;
        v27[5] = v42;
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *long long v29 = v21;
        unsigned int v35 = (uint64_t *)(v29 + 1);
      }
      v27[4] = v35;
    }
    else
    {
      long long v30 = (char *)*v28;
      if (a4 > ((char *)v29 - (char *)*v28) >> 3) {
        return 0;
      }
      uint64_t v67 = (unint64_t **)v21;
      std::vector<std::reference_wrapper<unsigned long long const>>::insert((uint64_t)(v26 + 3), &v30[8 * a4], &v67);
    }
  }
  else
  {
    long long v31 = (char *)operator new(8uLL);
    *(void *)long long v31 = v21;
    long long v66 = v25;
    uint64_t v67 = &v66;
    long long v32 = (char *)std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>((uint64_t)(a1 + 3), &v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v32 + 24, v31, (uint64_t)(v31 + 8), 1uLL);
    operator delete(v31);
  }
  uint64_t v67 = (unint64_t **)v21;
  int64x2_t v46 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(a1 + 8, (unint64_t **)&v67);
  if (!v46)
  {
    uint64_t v51 = (char *)operator new(8uLL);
    *(void *)uint64_t v51 = v25;
    long long v66 = (unint64_t *)v21;
    uint64_t v67 = &v66;
    int v52 = (char *)std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>((uint64_t)(a1 + 8), &v66, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v52 + 24, v51, (uint64_t)(v51 + 8), 1uLL);
    operator delete(v51);
    return 1;
  }
  uint64_t v47 = v46;
  int v48 = v46 + 3;
  int v49 = (unint64_t **)v46[4];
  if ((a5 & 0x8000000000000000) != 0)
  {
    uint64_t v53 = (uint64_t)(v46 + 5);
    unint64_t v54 = (unint64_t)v47[5];
    if ((unint64_t)v49 >= v54)
    {
      uint64_t v56 = ((char *)v49 - (char *)*v48) >> 3;
      if ((unint64_t)(v56 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v54 - (void)*v48;
      uint64_t v58 = v57 >> 2;
      if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
        uint64_t v58 = v56 + 1;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v58;
      }
      if (v59) {
        int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v53, v59);
      }
      else {
        int v60 = 0;
      }
      int v61 = (unint64_t **)&v60[8 * v56];
      long long v62 = (uint64_t *)&v60[8 * v59];
      char *v61 = v25;
      uint64_t v55 = (uint64_t *)(v61 + 1);
      int v64 = v47[3];
      uint64_t v63 = v47[4];
      if (v63 != v64)
      {
        do
        {
          int v65 = (unint64_t *)*--v63;
          *--int v61 = v65;
        }
        while (v63 != v64);
        uint64_t v63 = *v48;
      }
      v47[3] = (uint64_t *)v61;
      v47[4] = v55;
      v47[5] = v62;
      if (v63) {
        operator delete(v63);
      }
    }
    else
    {
      unsigned __int8 *v49 = v25;
      uint64_t v55 = (uint64_t *)(v49 + 1);
    }
    v47[4] = v55;
    return 1;
  }
  int64x2_t v50 = (char *)*v48;
  if (a5 <= ((char *)v49 - (char *)*v48) >> 3)
  {
    uint64_t v67 = (unint64_t **)v25;
    std::vector<std::reference_wrapper<unsigned long long const>>::insert((uint64_t)(v46 + 3), &v50[8 * a5], &v67);
    return 1;
  }
  return 0;
}

void sub_211183AE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *CpGraph::SetTensorName(uint64_t a1, unint64_t a2, const std::string *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = &v6;
  uint64_t v4 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 192, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::string::operator=(v4 + 1, a3);
}

BOOL CpGraph::GetTensorName(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v7 = a2;
  uint64_t v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)(a1 + 192), &v7);
  int64_t v5 = v4;
  if (v4) {
    std::string::operator=(a3, v4 + 1);
  }
  return v5 != 0;
}

BOOL CpGraph::GetLayerName(uint64_t a1, unint64_t a2, std::string *a3)
{
  unint64_t v7 = a2;
  uint64_t v4 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)(a1 + 152), &v7);
  int64_t v5 = v4;
  if (v4) {
    std::string::operator=(a3, v4 + 1);
  }
  return v5 != 0;
}

void CpGraph::GetLayers(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this + 1;
  unint64_t v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    int64_t v5 = this + 19;
    uint64_t v6 = (uint64_t)(a2 + 2);
    do
    {
      unint64_t v7 = *((void *)v3 + 4);
      unint64_t v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v22))
      {
        long long v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          long long v11 = *a2;
          uint64_t v12 = v9 - *a2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v15);
            long long v11 = *a2;
            long long v9 = a2[1];
          }
          else
          {
            unint64_t v16 = 0;
          }
          uint64_t v17 = (unint64_t *)&v16[8 * v12];
          *uint64_t v17 = v7;
          unint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            unint64_t v18 = *--v9;
            *--uint64_t v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *long long v9 = v7;
          unint64_t v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      BOOL v19 = (CpGraph *)*((void *)v3 + 1);
      if (v19)
      {
        do
        {
          unint64_t v20 = (CpGraph **)v19;
          BOOL v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (CpGraph **)*((void *)v3 + 2);
          BOOL v21 = *v20 == v3;
          unint64_t v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      unint64_t v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_211183D68(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CpGraph::GetTensors(CpGraph **this@<X0>, unint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this + 1;
  unint64_t v3 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    int64_t v5 = this + 24;
    uint64_t v6 = (uint64_t)(a2 + 2);
    do
    {
      unint64_t v7 = *((void *)v3 + 4);
      unint64_t v22 = v7;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v22))
      {
        long long v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          long long v11 = *a2;
          uint64_t v12 = v9 - *a2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v6, v15);
            long long v11 = *a2;
            long long v9 = a2[1];
          }
          else
          {
            unint64_t v16 = 0;
          }
          uint64_t v17 = (unint64_t *)&v16[8 * v12];
          *uint64_t v17 = v7;
          unint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            unint64_t v18 = *--v9;
            *--uint64_t v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (unint64_t *)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *long long v9 = v7;
          unint64_t v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      BOOL v19 = (CpGraph *)*((void *)v3 + 1);
      if (v19)
      {
        do
        {
          unint64_t v20 = (CpGraph **)v19;
          BOOL v19 = *(CpGraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (CpGraph **)*((void *)v3 + 2);
          BOOL v21 = *v20 == v3;
          unint64_t v3 = (CpGraph *)v20;
        }
        while (!v21);
      }
      unint64_t v3 = (CpGraph *)v20;
    }
    while (v20 != v2);
  }
}

void sub_211183EF0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *CpGraph::GetOutputTensor(CpGraph *this, unint64_t *a2)
{
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v7);
  if (result)
  {
    unint64_t v7 = (unint64_t *)&v6;
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 3, &v7);
    int64_t v5 = (char *)this + 104;
    if (v4) {
      int64_t v5 = (char *)(v4 + 3);
    }
    return ***(void ****)v5;
  }
  return result;
}

char *CpGraph::GetInputTensors@<X0>(CpGraph *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = a2;
  uint64_t v12 = a2;
  uint64_t result = (char *)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&v12);
  if (result)
  {
    uint64_t v12 = (unint64_t *)&v11;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 8, &v12);
    unint64_t v7 = (char *)this + 104;
    if (v6) {
      unint64_t v7 = (char *)(v6 + 3);
    }
    unint64_t v8 = *(void ***)v7;
    long long v9 = (void **)*((void *)v7 + 1);
    unint64_t v10 = ((uint64_t)v9 - *(void *)v7) >> 3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>((char *)a3, v8, v9, v10);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t CpGraph::CreateDotString@<X0>(CpGraph **this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"digraph D {", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet((const std::locale *)&v37, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v37);
  std::ostream::put();
  std::ostream::flush();
  int64_t v5 = *this;
  if (*this != (CpGraph *)(this + 1))
  {
    do
    {
      unint64_t v6 = *((void *)v5 + 4);
      std::string::basic_string[abi:ne180100]<0>(&v37, &byte_211F4AA5D);
      std::string::basic_string[abi:ne180100]<0>(&__p, &byte_211F4AA5D);
      v40.__r_.__value_.__r.__words[0] = v6;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this + 19, (unint64_t *)&v40))
      {
        CpGraph::GetLayerName((uint64_t)this, v6, &v37);
        if (v43 < 0)
        {
          uint64_t v42 = 5;
          p_p = (char *)__p;
        }
        else
        {
          char v43 = 5;
          p_p = (char *)&__p;
        }
        p_p[4] = 114;
        *(_DWORD *)p_p = 1702453612;
        long long v9 = p_p + 5;
      }
      else
      {
        CpGraph::GetTensorName((uint64_t)this, v6, &v37);
        if (v43 < 0)
        {
          uint64_t v42 = 6;
          unint64_t v8 = (char *)__p;
        }
        else
        {
          char v43 = 6;
          unint64_t v8 = (char *)&__p;
        }
        *((_WORD *)v8 + 2) = 29295;
        *(_DWORD *)unint64_t v8 = 1936614772;
        long long v9 = v8 + 6;
      }
      *long long v9 = 0;
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t", 1);
      std::to_string(&v40, v6);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v11 = &v40;
      }
      else {
        long long v11 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" [label=\"", 9);
      std::to_string(&v39, v6);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = &v39;
      }
      else {
        unint64_t v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
      if (v43 >= 0) {
        BOOL v19 = &__p;
      }
      else {
        BOOL v19 = __p;
      }
      if (v43 >= 0) {
        uint64_t v20 = v43;
      }
      else {
        uint64_t v20 = v42;
      }
      BOOL v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v37;
      }
      else {
        long long v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v37.__r_.__value_.__l.__size_;
      }
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"];\n", 4);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (v43 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      long long v26 = (CpGraph *)*((void *)v5 + 1);
      if (v26)
      {
        do
        {
          long long v27 = v26;
          long long v26 = *(CpGraph **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          long long v27 = (CpGraph *)*((void *)v5 + 2);
          BOOL v28 = *(void *)v27 == (void)v5;
          int64_t v5 = v27;
        }
        while (!v28);
      }
      int64_t v5 = v27;
    }
    while (v27 != (CpGraph *)(this + 1));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  for (uint64_t i = this[5]; i; uint64_t i = *(CpGraph **)i)
  {
    v37.__r_.__value_.__r.__words[0] = *((void *)i + 2);
    uint64_t v38 = 0;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v37.__r_.__value_.__l.__size_, *((const void **)i + 3), *((void *)i + 4), (uint64_t)(*((void *)i + 4) - *((void *)i + 3)) >> 3);
    long long v31 = (char *)v37.__r_.__value_.__r.__words[2];
    long long v30 = (char *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_ != v37.__r_.__value_.__r.__words[2])
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t", 1);
        long long v32 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" -> ", 4);
        uint64_t v33 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)";\n", 2);
        v30 += 8;
      }
      while (v30 != v31);
      long long v30 = (char *)v37.__r_.__value_.__l.__size_;
    }
    if (v30)
    {
      v37.__r_.__value_.__r.__words[2] = (std::string::size_type)v30;
      operator delete(v30);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"}", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, a2);
  v44[0] = *MEMORY[0x263F8C2B8];
  uint64_t v34 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v45 = v34;
  v46[0] = MEMORY[0x263F8C318] + 16;
  if (v47 < 0) {
    operator delete((void *)v46[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v48);
}

void sub_21118456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
}

uint64_t CpGraph::IdentifyConnectedComponents(void *a1, void *a2, uint64_t *a3)
{
  memset(v69, 0, sizeof(v69));
  int v70 = 1065353216;
  uint64_t v7 = *a3;
  for (uint64_t i = a3[1];
        i != v7;
  a3[1] = v7;
  unint64_t v8 = a1 + 1;
  long long v9 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    uint64_t v10 = 0;
    uint64_t v63 = (uint64_t **)(a1 + 13);
    int v60 = a1 + 3;
    int v61 = a1 + 8;
    uint64_t v56 = a1 + 1;
    do
    {
      int v68 = (void *)v9[4];
      if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, (unint64_t *)&v68)&& !std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, (unint64_t *)&v68))
      {
        unint64_t v11 = (unint64_t)v68;
        uint64_t v12 = (unint64_t *)operator new(8uLL);
        uint64_t v57 = v9;
        *uint64_t v12 = v11;
        long long v62 = v12 + 1;
        *(void *)&long long v71 = v11;
        *((void *)&v71 + 1) = v10;
        std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,ZinIrOpLayer *> const&>((uint64_t)v69, (unint64_t *)&v71, &v71);
        __p = v68;
        unint64_t v13 = v10 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v10 + 1)
        {
          std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, (unint64_t *)&__p, &__p);
        }
        else
        {
          long long v71 = 0u;
          long long v72 = 0u;
          int v73 = 1065353216;
          std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, (unint64_t *)&__p, &__p);
          unint64_t v14 = a3[1];
          if (v14 >= a3[2])
          {
            uint64_t v15 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
          }
          else
          {
            std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
            uint64_t v15 = v14 + 40;
            a3[1] = v14 + 40;
          }
          a3[1] = v15;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
        }
        std::string::size_type v16 = (char *)(v12 + 1);
        do
        {
          uint64_t v58 = v16;
          unint64_t v59 = v12;
          uint64_t v17 = v12;
          __p = 0;
          long long v66 = 0;
          uint64_t v67 = 0;
          do
          {
            unint64_t v64 = 0;
            unint64_t v64 = *v17;
            *(void *)&long long v71 = &v64;
            unint64_t v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v61, (unint64_t **)&v71);
            BOOL v19 = v18 + 3;
            if (!v18) {
              BOOL v19 = v63;
            }
            BOOL v21 = (unint64_t **)*v19;
            uint64_t v20 = (unint64_t **)v19[1];
            while (v21 != v20)
            {
              unint64_t v22 = *v21;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, *v21))
              {
                if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v22))
                {
                  long long v23 = v66;
                  if (v66 >= (unint64_t *)v67)
                  {
                    long long v25 = (unint64_t *)__p;
                    uint64_t v26 = ((char *)v66 - (unsigned char *)__p) >> 3;
                    unint64_t v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 61) {
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v28 = v67 - (unsigned char *)__p;
                    if ((v67 - (unsigned char *)__p) >> 2 > v27) {
                      unint64_t v27 = v28 >> 2;
                    }
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v29 = v27;
                    }
                    if (v29)
                    {
                      long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v67, v29);
                      long long v25 = (unint64_t *)__p;
                      long long v23 = v66;
                    }
                    else
                    {
                      long long v30 = 0;
                    }
                    long long v31 = (unint64_t *)&v30[8 * v26];
                    unint64_t *v31 = *v22;
                    std::string::size_type v24 = v31 + 1;
                    while (v23 != v25)
                    {
                      unint64_t v32 = *--v23;
                      *--long long v31 = v32;
                    }
                    __p = v31;
                    long long v66 = v24;
                    uint64_t v67 = &v30[8 * v29];
                    if (v25) {
                      operator delete(v25);
                    }
                  }
                  else
                  {
                    unint64_t *v66 = *v22;
                    std::string::size_type v24 = v23 + 1;
                  }
                  long long v66 = v24;
                  *(void *)&long long v71 = v22;
                  *((void *)&v71 + 1) = v10;
                  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(v69, (uint64_t **)&v71);
                }
                v74[0] = *v22;
                if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v13)
                {
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, v74, v74);
                }
                else
                {
                  long long v71 = 0u;
                  long long v72 = 0u;
                  int v73 = 1065353216;
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, v74, v74);
                  unint64_t v33 = a3[1];
                  if (v33 >= a3[2])
                  {
                    uint64_t v34 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
                  }
                  else
                  {
                    std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
                    uint64_t v34 = v33 + 40;
                    a3[1] = v33 + 40;
                  }
                  a3[1] = v34;
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
                }
              }
              ++v21;
            }
            *(void *)&long long v71 = &v64;
            unsigned int v35 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(v60, (unint64_t **)&v71);
            uint64_t v36 = v35 + 3;
            if (!v35) {
              uint64_t v36 = v63;
            }
            uint64_t v38 = (unint64_t **)*v36;
            std::string v37 = (unint64_t **)v36[1];
            while (v38 != v37)
            {
              std::string v39 = *v38;
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v69, *v38))
              {
                if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v39))
                {
                  std::string v40 = v66;
                  if (v66 >= (unint64_t *)v67)
                  {
                    uint64_t v42 = (unint64_t *)__p;
                    uint64_t v43 = ((char *)v66 - (unsigned char *)__p) >> 3;
                    unint64_t v44 = v43 + 1;
                    if ((unint64_t)(v43 + 1) >> 61) {
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v45 = v67 - (unsigned char *)__p;
                    if ((v67 - (unsigned char *)__p) >> 2 > v44) {
                      unint64_t v44 = v45 >> 2;
                    }
                    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v46 = v44;
                    }
                    if (v46)
                    {
                      char v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v67, v46);
                      uint64_t v42 = (unint64_t *)__p;
                      std::string v40 = v66;
                    }
                    else
                    {
                      char v47 = 0;
                    }
                    uint64_t v48 = (unint64_t *)&v47[8 * v43];
                    unint64_t *v48 = *v39;
                    long long v41 = v48 + 1;
                    while (v40 != v42)
                    {
                      unint64_t v49 = *--v40;
                      *--uint64_t v48 = v49;
                    }
                    __p = v48;
                    long long v66 = v41;
                    uint64_t v67 = &v47[8 * v46];
                    if (v42) {
                      operator delete(v42);
                    }
                  }
                  else
                  {
                    unint64_t *v66 = *v39;
                    long long v41 = v40 + 1;
                  }
                  long long v66 = v41;
                  *(void *)&long long v71 = v39;
                  *((void *)&v71 + 1) = v10;
                  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(v69, (uint64_t **)&v71);
                }
                v74[0] = *v39;
                if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) >= v13)
                {
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(*a3 + 40 * v10, v74, v74);
                }
                else
                {
                  long long v71 = 0u;
                  long long v72 = 0u;
                  int v73 = 1065353216;
                  std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)&v71, v74, v74);
                  unint64_t v50 = a3[1];
                  if (v50 >= a3[2])
                  {
                    uint64_t v51 = std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(a3, (uint64_t)&v71);
                  }
                  else
                  {
                    std::unordered_set<unsigned long long>::unordered_set(a3[1], (uint64_t)&v71);
                    uint64_t v51 = v50 + 40;
                    a3[1] = v50 + 40;
                  }
                  a3[1] = v51;
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v71);
                }
              }
              ++v38;
            }
            ++v17;
          }
          while (v17 != v62);
          uint64_t v12 = (unint64_t *)__p;
          long long v62 = v66;
          std::string::size_type v16 = v67;
          __p = v59;
          uint64_t v67 = v58;
          if (v59)
          {
            long long v66 = v59;
            operator delete(v59);
          }
        }
        while (v62 != v12);
        if (v12) {
          operator delete(v12);
        }
        ++v10;
        unint64_t v8 = v56;
        long long v9 = v57;
      }
      int v52 = (void *)v9[1];
      if (v52)
      {
        do
        {
          uint64_t v53 = v52;
          int v52 = (void *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          uint64_t v53 = (void *)v9[2];
          BOOL v54 = *v53 == (void)v9;
          long long v9 = v53;
        }
        while (!v54);
      }
      long long v9 = v53;
    }
    while (v53 != v8);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v69);
}

void sub_211184BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  *(void *)(v23 + 8) = v24;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v26 - 144);
  operator delete(v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>,std::__wrap_iter<std::reference_wrapper<unsigned long long const> const*>>(char *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unint64_t v8 = *a2++;
      *v7++ = *v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_211184CE8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unordered_set<unsigned long long>>::__push_back_slow_path<std::unordered_set<unsigned long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[40 * v4];
  std::string::size_type v16 = &v10[40 * v9];
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)v14, a2);
  uint64_t v15 = v14 + 40;
  std::vector<std::unordered_map<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_211184DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<ZinIrOpLayer *,ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_211184E6C(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::reference_wrapper<unsigned long long const>>::insert(uint64_t a1, char *__src, void *a3)
{
  unint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    }
    else {
      BOOL v19 = 0;
    }
    __p = v19;
    unint64_t v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    uint64_t v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    unint64_t v4 = std::vector<ZinGOCLayer const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v10 = __src + 8;
    uint64_t v11 = v6 - 8;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)unint64_t v4 = *a3;
  }
  return v4;
}

void sub_211184FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>(void *a1, unint64_t **a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = **a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = **a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*result[2] == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = **a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = **a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v3 == v8)
    {
      if (*result[2] == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::__emplace_unique_key_args<std::reference_wrapper<unsigned long long const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<unsigned long long const>&&>,std::tuple<>>(uint64_t a1, unint64_t **a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = **a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = **a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*(void *)v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v14 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v14;
  void v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v11 = *v22;
LABEL_38:
    *unint64_t v22 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v21 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_211185320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::string>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::string>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::string>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_211185570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_impl<std::pair<unsigned long long const&,unsigned long>>(void *a1, uint64_t **a2)
{
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = 0;
  unint64_t v5 = a2[1];
  uint64_t v6 = **a2;
  v4[2] = v6;
  v4[3] = v5;
  v4[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__node_insert_unique(a1, v4);
  if ((v8 & 1) == 0) {
    operator delete(v4);
  }
  return inserted;
}

void sub_2111856BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinParseMatrixDecompositionUnit(const __CFDictionary *a1, ZinIrMatrixDecompositionUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v6, @"Epsilon");
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFNumberGetTypeID())
      {
        __int16 valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt16Type, &valuePtr);
        _H0 = valuePtr;
        __asm { FCVT            S0, H0 }
        *((_DWORD *)a2 + 40) = _S0;
      }
    }
    BOOL v17 = CFDictionaryGetValue(v6, @"Type");
    if (v17
      && (v18 = (BOOL)v17, CFTypeID v19 = CFGetTypeID(v17), v19 == CFStringGetTypeID())
      && !CFStringToMatrixDecompositionType(v18, (int *)a2 + 20))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinParseMatrixDecompositionUnit();
      }
      CFStringRef v27 = @"InvalidMatrixDecompositionType";
    }
    else
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(v6, @"RotationAxis");
      if (!result) {
        return result;
      }
      CFArrayRef v21 = (const __CFArray *)result;
      CFTypeID v22 = CFGetTypeID((CFTypeRef)result);
      if (v22 != CFArrayGetTypeID() || CFArrayGetCount(v21) < 1) {
        return 0;
      }
      CFIndex v23 = 0;
      uint64_t v24 = (char *)a2 + 88;
      uint64_t v25 = (char *)a2 + 112;
      uint64_t v26 = (char *)a2 + 136;
      CFStringRef v27 = @"InvalidRotationAxis";
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v21, v23);
        if (!ValueAtIndex) {
          break;
        }
        CFNumberRef v29 = ValueAtIndex;
        CFTypeID v30 = CFGetTypeID(ValueAtIndex);
        if (v30 != CFNumberGetTypeID()) {
          break;
        }
        char v35 = 0;
        CFNumberGetValue(v29, kCFNumberSInt8Type, &v35);
        char v34 = v35 & 1;
        BOOL v33 = (v35 & 2) != 0;
        BOOL v32 = (v35 & 4) != 0;
        std::vector<BOOL>::push_back((uint64_t)v24, &v34);
        std::vector<BOOL>::push_back((uint64_t)v25, &v33);
        std::vector<BOOL>::push_back((uint64_t)v26, &v32);
        ++v23;
        CFIndex Count = CFArrayGetCount(v21);
        uint64_t result = 0;
        if (Count <= v23) {
          return result;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseMatrixDecompositionUnit();
    }
    CFStringRef v27 = @"InvalidParamSyntax";
  }
  ZinIrUnitStatus::SetError(a3, v27);
  return 3;
}

void ZinParseMatrixDecompositionUnit()
{
  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing matrix decomposition params.\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid matrix decomposition type.\n", v0, 2u);
}

void *ZinLiveStateLayer::ZinLiveStateLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  CFTypeID v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v8 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, a2, &v9, a4, &v8);
  CFDictionaryRef v6 = v8;
  CFNumberRef v8 = 0;
  if (v6)
  {
    ZinIrKernel::~ZinIrKernel(v6);
    MEMORY[0x21667D3C0]();
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *a1 = &unk_26C34AFE0;
  return a1;
}

void sub_211185A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ZinIrKernel *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinLiveStateLayer::LowerEngine(uint64_t a1)
{
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 164)) {
    ZinAssertImpl("Compressed format unsupported for live states");
  }
  return 0;
}

void ZinLiveStateLayer::Clone()
{
}

void sub_211185BE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  ZinDropoutLayer::Clone(&a12, a1, a2, (uint64_t)&a13);
  BOOL v17 = a13;
  MEMORY[0x21667D3C0](v13, 0x10B3C4024B96488);
  _Unwind_Resume(v17);
}

uint64_t ZinL2Access::GetSymbol(ZinL2Access *this)
{
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  else {
    return **(void **)this;
  }
}

uint64_t ZinL2Access::SetSymbols(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 != a2) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  *(_DWORD *)(a1 + 24) = a3;
  return 1;
}

uint64_t ZinL2Access::RemoveSymbol(uint64_t this)
{
  *(void *)(this + 8) = *(void *)this;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void ZinCreatePEUnit(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  CFDictionaryRef v6 = *(long long **)(a1 + 40);
  CFTypeID v7 = *(long long **)(a1 + 48);
  memset(&v96, 0, sizeof(v96));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&v96, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  memset(&__p, 0, sizeof(__p));
  int v92 = 0;
  long long v93 = 0u;
  *(_OWORD *)int64x2_t v94 = 0u;
  *(void *)&v94[16] = -1;
  int64x2_t v90 = &unk_26C34CEC8;
  *(_OWORD *)&uint8_t v95[4] = xmmword_211EDF3A0;
  __asm { FMOV            V8.2S, #1.0 }
  *(void *)&v95[20] = _D8;
  *(_DWORD *)uint64_t v95 = 0;
  *(_DWORD *)&v95[28] = 0;
  unint64_t v12 = (std::string *)(a1 + 80);
  if (*(unsigned char *)(a1 + 192))
  {
    std::string::operator=(&__p, (const std::string *)(a1 + 88));
    int v92 = *(_DWORD *)(a1 + 112);
    if (&v90 != (void **)v12) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v93, *(std::string **)(a1 + 120), *(long long **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
    }
    long long v13 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)&v94[8] = *(_OWORD *)(a1 + 144);
    long long v14 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)uint64_t v95 = v13;
    *(_OWORD *)&v95[16] = v14;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v15 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v15 = *(void *)(a1 + 16);
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v15 + 25);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v15)
    {
      if (*(char *)(a1 + 31) >= 0) {
        BOOL v17 = (const void *)(a1 + 8);
      }
      else {
        BOOL v17 = *(const void **)(a1 + 8);
      }
      memmove(p_str, v17, v15);
    }
    strcpy((char *)p_str + v15, ".first_operand_input_relu");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    *(void *)&v94[8] = *(void *)(a1 + 64);
    *(void *)&v94[16] = *(void *)(a1 + 72);
    BOOL v18 = *(long long **)(a1 + 40);
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v19 = *v18;
      __str.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v19;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v93, &__str, &v108, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    NeuronCFMutableDictionaryRef Unit = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v90);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    CFStringRef v22 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)p_p, 0x8000100u);
    CFDictionaryAddValue(a3, v22, NeuronUnit);
    CFRelease(v22);
    CFRelease(NeuronUnit);
    std::string::operator=(v96.__begin_, &__p);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3) >= 2 && *(unsigned char *)(a1 + 312) != 0)
  {
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    DWORD2(v108) = 0;
    *(void *)&long long v108 = 0;
    long long v109 = 0u;
    *(_OWORD *)long long v110 = 0u;
    *(void *)&v110[16] = -1;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34CEC8;
    *(_OWORD *)&v111[4] = xmmword_211EDF3A0;
    *(void *)&v111[20] = _D8;
    *(_DWORD *)uint64_t v111 = 0;
    *(_DWORD *)&v111[28] = 0;
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], (const std::string *)(a1 + 88));
    DWORD2(v108) = *(_DWORD *)(a1 + 112);
    if (&__str != v12) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v109, *(std::string **)(a1 + 120), *(long long **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
    }
    long long v24 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)&unsigned char v110[8] = *(_OWORD *)(a1 + 144);
    long long v25 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)uint64_t v111 = v24;
    *(_OWORD *)&v111[16] = v25;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v26 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v26 = *(void *)(a1 + 16);
    }
    CFStringRef v27 = &v97;
    std::string::basic_string[abi:ne180100]((uint64_t)&v97, v26 + 26);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      CFStringRef v27 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    uint64_t v28 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
    if (v26)
    {
      if (*(char *)(a1 + 31) >= 0) {
        CFNumberRef v29 = (const void *)(a1 + 8);
      }
      else {
        CFNumberRef v29 = *(const void **)(a1 + 8);
      }
      memmove(v27, v29, v26);
    }
    strcpy((char *)v27 + v26, ".second_operand_input_relu");
    if (SBYTE7(v108) < 0) {
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    *(void *)&long long v108 = *((void *)&v97.__r_.__value_.__l + 2);
    *(void *)&unsigned char v110[8] = *(void *)(a1 + 64);
    *(void *)&v110[16] = *(void *)(a1 + 72);
    uint64_t v30 = *(void *)(a1 + 40);
    if (*(char *)(v30 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v30 + 24), *(void *)(v30 + 32));
    }
    else {
      std::string v97 = *(std::string *)(v30 + 24);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v109, &v97, &v98, 1uLL);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    long long v31 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&__str);
    if ((SBYTE7(v108) & 0x80u) == 0) {
      std::string::size_type size = &__str.__r_.__value_.__s.__data_[8];
    }
    else {
      std::string::size_type size = (const char *)__str.__r_.__value_.__l.__size_;
    }
    CFStringRef v33 = CFStringCreateWithCString(*v28, size, 0x8000100u);
    CFDictionaryAddValue(a3, v33, v31);
    CFRelease(v33);
    CFRelease(v31);
    std::string::operator=(v96.__begin_ + 1, (const std::string *)&__str.__r_.__value_.__r.__words[1]);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&__str.__r_.__value_.__l.__data_);
  }
  std::function<void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(a2, a1, (uint64_t)&v96, (uint64_t)a3);
  memset(&v85, 0, sizeof(v85));
  int v86 = 0;
  long long v87 = 0u;
  *(_OWORD *)int v88 = 0u;
  *(void *)&v88[16] = -1;
  int v84 = &unk_26C348608;
  int v89 = 0;
  char v34 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (*(unsigned char *)(a1 + 408))
  {
    std::string::operator=(&v85, (const std::string *)(a1 + 328));
    int v86 = *(_DWORD *)(a1 + 352);
    if (&v84 != (void **)(a1 + 320)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v87, *(std::string **)(a1 + 360), *(long long **)(a1 + 368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 3));
    }
    *(_OWORD *)&v88[8] = *(_OWORD *)(a1 + 384);
    int v89 = *(_DWORD *)(a1 + 400);
    if (*(char *)(a1 + 31) >= 0) {
      size_t v35 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v35 = *(void *)(a1 + 16);
    }
    uint64_t v36 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v35 + 4);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v35)
    {
      if (*(char *)(a1 + 31) >= 0) {
        std::string v37 = (const void *)(a1 + 8);
      }
      else {
        std::string v37 = *(const void **)(a1 + 8);
      }
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, ".abs");
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    std::string v85 = __str;
    *(_OWORD *)&v88[8] = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v87, v96.__begin_, (long long *)v96.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v85;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v96, &__str, &v108, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    EWCFMutableDictionaryRef Unit = ZinCreateEWUnit((const ZinIrEWUnitInfo *)&v84);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v39 = &v85;
    }
    else {
      std::string v39 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    CFStringRef v40 = CFStringCreateWithCString(*v34, (const char *)v39, 0x8000100u);
    CFDictionaryAddValue(a3, v40, EWUnit);
    CFRelease(v40);
    CFRelease(EWUnit);
  }
  memset(&v79, 0, sizeof(v79));
  int v80 = 0;
  long long v81 = 0u;
  *(_OWORD *)int64x2_t v82 = 0u;
  *(void *)&v82[16] = -1;
  long long v78 = &unk_26C34CEC8;
  *(_DWORD *)uint64_t v83 = 0;
  *(_OWORD *)&v83[4] = xmmword_211EDF3A0;
  *(void *)&v83[20] = _D8;
  *(_DWORD *)&v83[28] = 0;
  if (*(unsigned char *)(a1 + 528))
  {
    std::string::operator=(&v79, (const std::string *)(a1 + 424));
    int v80 = *(_DWORD *)(a1 + 448);
    if (&v78 != (void **)(a1 + 416)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v81, *(std::string **)(a1 + 456), *(long long **)(a1 + 464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 464) - *(void *)(a1 + 456)) >> 3));
    }
    long long v41 = *(_OWORD *)(a1 + 496);
    *(_OWORD *)&v82[8] = *(_OWORD *)(a1 + 480);
    long long v42 = *(_OWORD *)(a1 + 512);
    *(_OWORD *)uint64_t v83 = v41;
    *(_OWORD *)&v83[16] = v42;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v43 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v43 = *(void *)(a1 + 16);
    }
    unint64_t v44 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v43 + 18);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v44 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v43)
    {
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v45 = (const void *)(a1 + 8);
      }
      else {
        uint64_t v45 = *(const void **)(a1 + 8);
      }
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, ".output_activation");
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    std::string v79 = __str;
    *(void *)&v82[8] = *(void *)(a1 + 64);
    *(void *)&v82[16] = *(void *)(a1 + 72);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v81, v96.__begin_, (long long *)v96.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v79;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v96, &__str, &v108, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    unint64_t v46 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v78);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v47 = &v79;
    }
    else {
      char v47 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    CFStringRef v48 = CFStringCreateWithCString(*v34, (const char *)v47, 0x8000100u);
    CFDictionaryAddValue(a3, v48, v46);
    CFRelease(v48);
    CFRelease(v46);
  }
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
  DWORD2(v108) = 0;
  *(void *)&long long v108 = 0;
  long long v109 = 0u;
  *(_OWORD *)long long v110 = 0u;
  *(void *)&v110[16] = -1;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C349940;
  *(_WORD *)uint64_t v111 = 0;
  *(void *)&v111[4] = 1065353216;
  *(_WORD *)&v111[12] = 0;
  *(void *)&v111[16] = 0;
  v111[24] = 0;
  *(void *)&v111[28] = -1;
  *(void *)&v111[40] = -1;
  LOBYTE(v112) = 0;
  *(void *)((char *)&v112 + 4) = -1;
  uint64_t v113 = -1;
  if (*(unsigned char *)(a1 + 688))
  {
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], (const std::string *)(a1 + 544));
    DWORD2(v108) = *(_DWORD *)(a1 + 568);
    if (&__str != (std::string *)(a1 + 536)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v109, *(std::string **)(a1 + 576), *(long long **)(a1 + 584), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 584) - *(void *)(a1 + 576)) >> 3));
    }
    long long v49 = *(_OWORD *)(a1 + 616);
    *(_OWORD *)&unsigned char v110[8] = *(_OWORD *)(a1 + 600);
    long long v50 = *(_OWORD *)(a1 + 632);
    long long v51 = *(_OWORD *)(a1 + 664);
    *(_OWORD *)&v111[32] = *(_OWORD *)(a1 + 648);
    long long v112 = v51;
    uint64_t v113 = *(void *)(a1 + 680);
    *(_OWORD *)uint64_t v111 = v49;
    *(_OWORD *)&v111[16] = v50;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v52 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v52 = *(void *)(a1 + 16);
    }
    uint64_t v53 = &v97;
    std::string::basic_string[abi:ne180100]((uint64_t)&v97, v52 + 11);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v53 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if (v52)
    {
      if (*(char *)(a1 + 31) >= 0) {
        BOOL v54 = (const void *)(a1 + 8);
      }
      else {
        BOOL v54 = *(const void **)(a1 + 8);
      }
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, ".output_goc");
    if (SBYTE7(v108) < 0) {
      operator delete((void *)__str.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
    *(void *)&long long v108 = *((void *)&v97.__r_.__value_.__l + 2);
    *(void *)&unsigned char v110[8] = *(void *)(a1 + 64);
    *(void *)&v110[16] = *(void *)(a1 + 72);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v109, v96.__begin_, (long long *)v96.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
    if (SBYTE7(v108) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, (const std::string::value_type *)__str.__r_.__value_.__l.__size_, __str.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
      v97.__r_.__value_.__r.__words[2] = v108;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v96, &v97, &v98, 1uLL);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    GOCCFMutableDictionaryRef Unit = ZinCreateGOCUnit((const ZinIrGOCUnitInfo *)&__str);
    if ((SBYTE7(v108) & 0x80u) == 0) {
      uint64_t v56 = &__str.__r_.__value_.__s.__data_[8];
    }
    else {
      uint64_t v56 = (const char *)__str.__r_.__value_.__l.__size_;
    }
    CFStringRef v57 = CFStringCreateWithCString(*v34, v56, 0x8000100u);
    CFDictionaryAddValue(a3, v57, GOCUnit);
    CFRelease(v57);
    CFRelease(GOCUnit);
  }
  if (*(unsigned char *)(a1 + 808))
  {
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C345B80;
    if (*(char *)(a1 + 727) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v97.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(a1 + 704), *(void *)(a1 + 712));
    }
    else
    {
      *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 704);
      *(void *)&long long v98 = *(void *)(a1 + 720);
    }
    DWORD2(v98) = *(_DWORD *)(a1 + 728);
    memset(&v99, 0, sizeof(v99));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *(long long **)(a1 + 736), *(long long **)(a1 + 744), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 744) - *(void *)(a1 + 736)) >> 3));
    long long v58 = *(_OWORD *)(a1 + 760);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34CEC8;
    long long v59 = *(_OWORD *)(a1 + 776);
    long long v60 = *(_OWORD *)(a1 + 792);
    long long v100 = v58;
    long long v101 = v59;
    long long v102 = v60;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v61 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v61 = *(void *)(a1 + 16);
    }
    long long v62 = &v105;
    std::string::basic_string[abi:ne180100]((uint64_t)&v105, v61 + 20);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v62 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if (v61)
    {
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v63 = (const void *)(a1 + 8);
      }
      else {
        uint64_t v63 = *(const void **)(a1 + 8);
      }
      memmove(v62, v63, v61);
    }
    strcpy((char *)v62 + v61, ".post_goc_activation");
    if (SBYTE7(v98) < 0) {
      operator delete((void *)v97.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
    *(void *)&long long v98 = *((void *)&v105.__r_.__value_.__l + 2);
    long long v100 = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v99, v96.__begin_, (long long *)v96.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
    if (SBYTE7(v98) < 0)
    {
      std::string::__init_copy_ctor_external(&v105, (const std::string::value_type *)v97.__r_.__value_.__l.__size_, v97.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__r.__words[1];
      v105.__r_.__value_.__r.__words[2] = v98;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v96, &v105, (long long *)&v106, 1uLL);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
    unint64_t v64 = ZinCreateNeuronUnit((const ZinIrNeuronUnitInfo *)&v97);
    if ((SBYTE7(v98) & 0x80u) == 0) {
      int v65 = &v97.__r_.__value_.__s.__data_[8];
    }
    else {
      int v65 = (const char *)v97.__r_.__value_.__l.__size_;
    }
    CFStringRef v66 = CFStringCreateWithCString(*v34, v65, 0x8000100u);
    CFDictionaryAddValue(a3, v66, v64);
    CFRelease(v66);
    CFRelease(v64);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v97.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 960))
  {
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C345B80;
    if (*(char *)(a1 + 847) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v97.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(a1 + 824), *(void *)(a1 + 832));
    }
    else
    {
      *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 824);
      *(void *)&long long v98 = *(void *)(a1 + 840);
    }
    DWORD2(v98) = *(_DWORD *)(a1 + 848);
    memset(&v99, 0, sizeof(v99));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *(long long **)(a1 + 856), *(long long **)(a1 + 864), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 3));
    long long v67 = *(_OWORD *)(a1 + 880);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34BFA0;
    long long v68 = *(_OWORD *)(a1 + 896);
    long long v69 = *(_OWORD *)(a1 + 912);
    long long v100 = v67;
    long long v101 = v68;
    long long v70 = *(_OWORD *)(a1 + 928);
    long long v71 = *(_OWORD *)(a1 + 944);
    long long v102 = v69;
    long long v103 = v70;
    long long v104 = v71;
    if (*(char *)(a1 + 31) >= 0) {
      size_t v72 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v72 = *(void *)(a1 + 16);
    }
    int v73 = &v105;
    std::string::basic_string[abi:ne180100]((uint64_t)&v105, v72 + 6);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v73 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if (v72)
    {
      if (*(char *)(a1 + 31) >= 0) {
        long long v74 = (const void *)(a1 + 8);
      }
      else {
        long long v74 = *(const void **)(a1 + 8);
      }
      memmove(v73, v74, v72);
    }
    strcpy((char *)v73 + v72, ".quant");
    if (SBYTE7(v98) < 0) {
      operator delete((void *)v97.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
    *(void *)&long long v98 = *((void *)&v105.__r_.__value_.__l + 2);
    long long v100 = *(_OWORD *)(a1 + 64);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v99, v96.__begin_, (long long *)v96.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
    QuantCFMutableDictionaryRef Unit = ZinCreateQuantUnit((const ZinIrQuantUnitInfo *)&v97);
    if ((SBYTE7(v98) & 0x80u) == 0) {
      int v76 = &v97.__r_.__value_.__s.__data_[8];
    }
    else {
      int v76 = (const char *)v97.__r_.__value_.__l.__size_;
    }
    CFStringRef v77 = CFStringCreateWithCString(*v34, v76, 0x8000100u);
    CFDictionaryAddValue(a3, v77, QuantUnit);
    CFRelease(v77);
    CFRelease(QuantUnit);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v97.__r_.__value_.__l.__data_);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&__str.__r_.__value_.__l.__data_);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v78);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v84);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v90);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_211186D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  STACK[0x220] = (unint64_t)&a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_211186F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t CpAllocGraph::CpAllocGraph(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  CpGraph::CpGraph(a1, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  return a1;
}

void sub_211187048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CpAllocGraph::~CpAllocGraph(CpAllocGraph *this)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 408);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 384, *((void **)this + 49));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 344);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 320, *((void **)this + 41));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 296, *((void **)this + 38));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 256);

  CpGraph::~CpGraph((void **)this);
}

uint64_t CpAllocGraph::AddLayer(uint64_t result, unint64_t a2, const std::string *a3, uint64_t a4, uint64_t *a5, void *a6, unint64_t a7, const std::string *a8)
{
  long long v14 = (std::string *)result;
  unint64_t v21 = a7;
  unint64_t v22 = a2;
  for (uint64_t i = *(void **)(result + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v16 = i[4];
    if (v16 <= a2)
    {
      if (v16 >= a2) {
        return result;
      }
      ++i;
    }
  }
  ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddNode(result, &v22);
  unint64_t v23 = v22;
  long long v24 = &v23;
  std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&v14[10].__r_.__value_.__r.__words[2], &v23, (uint64_t)&std::piecewise_construct, &v24)[3] = a4;
  CpGraph::SetLayerName((uint64_t)v14, v22, a3);
  uint64_t v17 = *a5;
  if (a5[1] != *a5)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      CpGraph::AddTensor(v14, *(void *)(v17 + 8 * v20), (const std::string *)(*a6 + v19));
      ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v14, (unint64_t *)(*a5 + v18), &v22, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
      ++v20;
      uint64_t v17 = *a5;
      v19 += 24;
      v18 += 8;
    }
    while (v20 < (a5[1] - *a5) >> 3);
  }
  CpGraph::AddTensor(v14, a7, a8);
  return ZinIrNgraph<unsigned long long,std::less<unsigned long long>>::AddEdge(v14, &v22, &v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t *CpAllocGraph::SetChainableTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 24, (unint64_t *)&v5);
  if (result) {
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 37, (unint64_t *)&v4, &v4);
  }
  return result;
}

uint64_t *CpAllocGraph::SetL2DependentableTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 24, (unint64_t *)&v5);
  if (result) {
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 40, (unint64_t *)&v4, &v4);
  }
  return result;
}

void *CpAllocGraph::SetBoundaryTensor(CpAllocGraph *this, unint64_t a2)
{
  unint64_t v4 = a2;
  unint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 24, &v5);
  if (result) {
    return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 344, &v4, &v4);
  }
  return result;
}

uint64_t *CpAllocGraph::SetL2CircularTensor(CpAllocGraph *this, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 24, (unint64_t *)&v5);
  if (result) {
    return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)this + 48, (unint64_t *)&v4, &v4);
  }
  return result;
}

void CpAllocGraph::SetLayerBehavior(CpAllocGraph *this, uint64_t *a2, uint64_t **a3)
{
  unint64_t v16 = a2;
  std::string __p = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&__p))
  {
    std::string __p = &v16;
    unint64_t v5 = 0;
    std::__hash_table<std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinIrOpLayer *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 448, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (void **)&__p)[3] = a3;
    long long v14 = 0;
    uint64_t v15 = 0;
    long long v13 = (uint64_t *)&v14;
    while (1)
    {
      unint64_t v12 = v5;
      LayerCycleAndFootprintEstimator::GetReadBehaviors(a3, (char **)&__p);
      uint64_t v6 = __p;
      CFTypeID v7 = v18;
      if (__p)
      {
        uint64_t v18 = __p;
        operator delete(__p);
      }
      if (v5 >= (v7 - v6) >> 3) {
        break;
      }
      uint64_t v8 = v12;
      LayerCycleAndFootprintEstimator::GetReadBehaviors(a3, (char **)&__p);
      uint64_t v9 = *((void *)__p + v8);
      uint64_t v18 = __p;
      operator delete(__p);
      if (*(void *)(v9 + 112)) {
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v13, &v12, (uint64_t *)&v12);
      }
      unint64_t v5 = v12 + 1;
    }
    if (v15)
    {
      uint64_t v10 = v16;
      std::set<unsigned long>::set[abi:ne180100]((uint64_t *)v11, (uint64_t)&v13);
      CpAllocGraph::SetInPlacePorts((uint64_t)this, v10, v11);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v11, v11[1]);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v13, v14);
  }
}

void sub_2111874B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t **CpAllocGraph::SetInPlacePorts(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2;
  CFTypeID v7 = (unint64_t *)a2;
  uint64_t result = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)(a1 + 152), (unint64_t *)&v7);
  if (result)
  {
    CFTypeID v7 = (unint64_t *)&v6;
    uint64_t result = (uint64_t **)(std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::set<ZinNamedType<unsigned long,ScheduleTag>>>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,std::piecewise_construct_t const&,std::tuple<ZinNamedType<unsigned long,AneIndexTag> const&>,std::tuple<>>(a1 + 488, (unint64_t *)&v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7)+ 3);
    if (result != a3) {
      return std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>(result, *a3, a3 + 1);
    }
  }
  return result;
}

__n128 CpAllocGraph::SetTensorLiverange(uint64_t a1, unint64_t *a2, __n128 *a3)
{
  uint64_t v8 = a2;
  uint64_t v9 = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)(a1 + 192), (unint64_t *)&v9))
  {
    uint64_t v6 = (void *)(a1 + 408);
    if (!std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(v6, (unint64_t *)&v8))
    {
      uint64_t v9 = (unint64_t *)&v8;
      CFTypeID v7 = std::__hash_table<std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::__unordered_map_hasher<long,std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,ZinLiverangeOverlapAccumulator::Allocation>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)v6, (unint64_t *)&v8, (uint64_t)&std::piecewise_construct, &v9);
      __n128 result = *a3;
      *(__n128 *)(v7 + 3) = *a3;
    }
  }
  return result;
}

uint64_t ZinMirMemCacheStrategyBase::NeedBarIdForIntermediateMemCache(ZinMirMemCacheStrategyBase *this)
{
  return 0;
}

void ZinMirMemCacheStrategyBase::ZinMirMemCacheStrategyBase(ZinMirMemCacheStrategyBase *this, uint64_t a2, uint64_t a3, char a4, BOOL a5, char a6, char a7)
{
  *(void *)this = &unk_26C351B58;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *((unsigned char *)this + 24) = a6;
  *((unsigned char *)this + 25) = a4;
  *((unsigned char *)this + 26) = 0;
  *((unsigned char *)this + 27) = a7;
}

void ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrScheduleUtil *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  CFStringRef v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(this, (uint64_t)&v27) & 1) == 0) {
    ZinAssertImpl("Couldn't do topological sort");
  }
  uint64_t v4 = v28;
  if (v28 == v27)
  {
    unint64_t v8 = 0;
  }
  else
  {
    uint64_t v5 = -1;
    do
    {
      uint64_t v6 = (uint64_t)*--v4;
      uint64_t v7 = *(void *)(v6 + 48);
      if (v5 <= v7) {
        uint64_t v5 = v7;
      }
    }
    while (v4 != v27);
    unint64_t v8 = v5 + 1;
  }
  std::vector<std::vector<ZinANELayer *>>::resize(a2, v8);
  uint64_t v9 = v27;
  uint64_t v10 = v28;
  if (v27 != v28)
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9))
      {
        uint64_t v11 = *v9;
        unint64_t v12 = (ZinIrOpLayer ***)(*a2 + 24 * *((void *)*v9 + 6));
        long long v13 = (void **)(v12 + 1);
        long long v14 = v12[1];
        unint64_t v16 = v12 + 2;
        unint64_t v15 = (unint64_t)v12[2];
        if ((unint64_t)v14 >= v15)
        {
          uint64_t v18 = v14 - *v12;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v15 - (void)*v12;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v16, v21);
          }
          else {
            unint64_t v22 = 0;
          }
          unint64_t v23 = (ZinIrOpLayer **)&v22[8 * v18];
          char *v23 = v11;
          uint64_t v17 = v23 + 1;
          long long v24 = (char *)*v13;
          long long v25 = (char *)*v12;
          if (*v13 != *v12)
          {
            do
            {
              size_t v26 = (ZinIrOpLayer *)*((void *)v24 - 1);
              v24 -= 8;
              *--unint64_t v23 = v26;
            }
            while (v24 != v25);
            long long v24 = (char *)*v12;
          }
          *unint64_t v12 = v23;
          *long long v13 = v17;
          void *v16 = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *long long v14 = v11;
          uint64_t v17 = v14 + 1;
        }
        *long long v13 = v17;
      }
      ++v9;
    }
    while (v9 != v10);
    uint64_t v9 = v27;
  }
  if (v9)
  {
    uint64_t v28 = v9;
    operator delete(v9);
  }
}

void sub_211187800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(void *a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t)&v7;
  unint64_t v8 = &v7;
  unint64_t v9 = 0;
  uint64_t v3 = ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSortImpl<std::list<ZinIrOpLayer *>>(a1, &v7);
  *(void *)(a2 + 8) = *(void *)a2;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v9);
  if (v8 == &v7)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = v8;
    do
    {
      ++v4;
      uint64_t v5 = (uint64_t *)v5[1];
    }
    while (v5 != &v7);
  }
  std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__list_iterator<ZinIrOpLayer *,void *>,std::__list_iterator<ZinIrOpLayer *,void *>>(a2, *(char **)(a2 + 8), v8, &v7, v4);
  std::__list_imp<ZinIrSection *>::clear(&v7);
  return v3;
}

void sub_2111878D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<ZinANELayer *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<ZinANELayer *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void *ZinIrScheduleUtil::GetEngineScheduledLayerGroups@<X0>(ZinIrScheduleUtil *this@<X0>, void *a2@<X8>)
{
  v5[4] = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5[0] = &unk_26C32EDB0;
  v5[1] = a2;
  v5[3] = v5;
  int v3 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v5);
  __n128 result = std::__function::__value_func<ZinIrStatus ()(ZinIrBasicBlock *)>::~__value_func[abi:ne180100](v5);
  if (v3) {
    ZinAssertImpl("error in getting scheduled layer groups");
  }
  return result;
}

void sub_211187A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrScheduleUtil *this@<X0>, const ZinIrOpLayerGraph *a2@<X1>, void *a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v42 = (int)a2;
  std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(a3, (int)a2);
  std::string __p = 0;
  char v47 = 0;
  uint64_t v48 = 0;
  if (!ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::TopologicalSort(this, (uint64_t)&__p))ZinAssertImpl("topological sorting failed"); {
  if (v3)
  }
  {
    uint64_t v6 = 0;
    do
    {
      std::vector<std::vector<ZinANELayer *>>::__assign_with_size[abi:ne180100]<std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*>(*a3 + 24 * v6, 0, 0, 0);
      size_t v43 = 0;
      unint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v7 = (ZinIrOpLayer **)__p;
      uint64_t v8 = v47;
      if (__p != v47)
      {
        do
        {
          unint64_t v9 = *v7;
          if (ZinIrOpLayer::IsANELayer(*v7))
          {
            BondedInfo = (ZinBondedInfo *)ZinANELayer::GetBondedInfo(v9);
            if (*(void *)ZinBondedInfo::GetAneIndex(BondedInfo) == v6)
            {
              if (v44 >= v45)
              {
                uint64_t v12 = v44 - v43;
                if ((unint64_t)(v12 + 1) >> 61) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v13 = ((char *)v45 - (char *)v43) >> 2;
                if (v13 <= v12 + 1) {
                  unint64_t v13 = v12 + 1;
                }
                if ((unint64_t)((char *)v45 - (char *)v43) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v14 = v13;
                }
                if (v14) {
                  unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v14);
                }
                else {
                  unint64_t v15 = 0;
                }
                unint64_t v16 = (ZinANELayer **)&v15[8 * v12];
                void *v16 = v9;
                uint64_t v11 = v16 + 1;
                uint64_t v17 = v44;
                if (v44 != v43)
                {
                  do
                  {
                    uint64_t v18 = *--v17;
                    *--unint64_t v16 = v18;
                  }
                  while (v17 != v43);
                  uint64_t v17 = v43;
                }
                size_t v43 = v16;
                uint64_t v45 = (ZinANELayer **)&v15[8 * v14];
                if (v17) {
                  operator delete(v17);
                }
              }
              else
              {
                *unint64_t v44 = v9;
                uint64_t v11 = v44 + 1;
              }
              unint64_t v44 = v11;
            }
          }
          ++v7;
        }
        while (v7 != v8);
        uint64_t v19 = v43;
        uint64_t v20 = v44;
        if (v43 != v44)
        {
          unint64_t v21 = v43 + 1;
          if (v43 + 1 != v44)
          {
            unint64_t v22 = *v43;
            unint64_t v23 = v43 + 1;
            do
            {
              long long v25 = *v23++;
              long long v24 = v25;
              if (*((void *)v22 + 6) < *((void *)v25 + 6))
              {
                unint64_t v22 = v24;
                uint64_t v19 = v21;
              }
              unint64_t v21 = v23;
            }
            while (v23 != v44);
          }
          std::vector<std::vector<ZinANELayer *>>::resize((uint64_t *)(*a3 + 24 * v6), *((void *)*v19 + 6) + 1);
          uint64_t v20 = v43;
          if (v43 != v44)
          {
            do
            {
              size_t v26 = *v20;
              CFStringRef v27 = (char **)(*(void *)(*a3 + 24 * v6) + 24 * *((void *)*v20 + 6));
              uint64_t v28 = (void **)(v27 + 1);
              uint64_t v29 = (ZinANELayer **)v27[1];
              long long v31 = v27 + 2;
              unint64_t v30 = (unint64_t)v27[2];
              if ((unint64_t)v29 >= v30)
              {
                uint64_t v33 = ((char *)v29 - *v27) >> 3;
                if ((unint64_t)(v33 + 1) >> 61) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v34 = v30 - (void)*v27;
                uint64_t v35 = v34 >> 2;
                if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
                  uint64_t v35 = v33 + 1;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v35;
                }
                if (v36) {
                  std::string v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v31, v36);
                }
                else {
                  std::string v37 = 0;
                }
                uint64_t v38 = &v37[8 * v33];
                *(void *)uint64_t v38 = v26;
                BOOL v32 = v38 + 8;
                std::string v39 = (char *)*v28;
                CFStringRef v40 = *v27;
                if (*v28 != *v27)
                {
                  do
                  {
                    uint64_t v41 = *((void *)v39 - 1);
                    v39 -= 8;
                    *((void *)v38 - 1) = v41;
                    v38 -= 8;
                  }
                  while (v39 != v40);
                  std::string v39 = *v27;
                }
                *CFStringRef v27 = v38;
                *uint64_t v28 = v32;
                void *v31 = &v37[8 * v36];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *uint64_t v29 = v26;
                BOOL v32 = v29 + 1;
              }
              *uint64_t v28 = v32;
              ++v20;
            }
            while (v20 != v44);
            uint64_t v20 = v43;
          }
        }
        if (v20) {
          operator delete(v20);
        }
      }
      ++v6;
    }
    while (v6 != v42);
  }
  if (__p)
  {
    char v47 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
}

void sub_211187DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups@<X0>(ZinIrScheduleUtil *this@<X0>, const ZinIrControlFlowGraph *a2@<X1>, void *a3@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  int v6 = (int)a2;
  std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(a3, (int)a2);
  v7[0] = &unk_26C322D28;
  v7[1] = &v6;
  void v7[2] = a3;
  v7[3] = v7;
  LODWORD(this) = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v7);
  __n128 result = std::__function::__value_func<ZinIrStatus ()(ZinIrBasicBlock *)>::~__value_func[abi:ne180100](v7);
  if (this) {
    ZinAssertImpl("error in getting per-ANE scheduled layer groups");
  }
  return result;
}

void sub_211187EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayers(ZinIrScheduleUtil *this@<X0>, uint64_t *a2@<X8>)
{
  ZinIrNgraph<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>>::GetTopologicalOrderMap(this, (uint64_t)v10);
  std::vector<ZinIrSymbol *>::vector<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>,0>(a2, *(void **)this, (void *)this + 1);
  uint64_t v5 = *a2;
  int v6 = (int8x16_t *)a2[1];
  unint64_t v7 = 126 - 2 * __clz(((uint64_t)v6->i64 - *a2) >> 3);
  BOOL v8 = v6 == (int8x16_t *)*a2;
  uint64_t v11 = v10;
  if (v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(v5, v6, (uint64_t *)&v11, v9, 1);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v10, v10[1]);
}

void sub_211187F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayersMap(ZinIrScheduleUtil **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a2 + 8);
  *(void *)a2 = v4;
  uint64_t v5 = (uint64_t *)(this + 1);
  int v6 = *this;
  if (*this != (ZinIrScheduleUtil *)(this + 1))
  {
    do
    {
      Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(v4, *((ZinIrTarget **)v6 + 4));
      ZinIrScheduleUtil::GetOrderedLayers(Hal, (uint64_t *)&v12);
      unint64_t v14 = (uint64_t *)((char *)v6 + 32);
      BOOL v8 = std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>>>::__emplace_unique_key_args<ZinIrBasicBlock *,std::piecewise_construct_t const&,std::tuple<ZinIrBasicBlock * const&>,std::tuple<>>((uint64_t **)a2, (uint64_t *)v6 + 4, (uint64_t)&std::piecewise_construct, &v14);
      uint64_t v9 = (void *)v8[5];
      if (v9)
      {
        v8[6] = (uint64_t)v9;
        operator delete(v9);
        v8[5] = 0;
        v8[6] = 0;
        v8[7] = 0;
      }
      *(_OWORD *)(v8 + 5) = v12;
      v8[7] = v13;
      uint64_t v10 = (uint64_t *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          unint64_t v4 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v4 = (uint64_t *)*((void *)v6 + 2);
          BOOL v11 = *v4 == (void)v6;
          int v6 = (ZinIrScheduleUtil *)v4;
        }
        while (!v11);
      }
      int v6 = (ZinIrScheduleUtil *)v4;
    }
    while (v4 != v5);
  }
}

void sub_211188094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void ZinIrScheduleUtil::GetOrderedLayers(ZinIrScheduleUtil **this@<X0>, void *a2@<X8>)
{
  ZinIrScheduleUtil::GetOrderedLayersMap(this, (uint64_t)v4);
  ZinIrScheduleUtil::GetOrderedLayers(v4, a2);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v4, v5);
}

void sub_21118810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

char *ZinIrScheduleUtil::GetOrderedLayers@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int8x8_t v2 = result + 8;
  int v3 = *(char **)result;
  if (*(char **)result != result + 8)
  {
    do
    {
      __n128 result = std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)a2, a2[1], *((char **)v3 + 5), *((char **)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 3);
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

void sub_2111881B4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<ZinANELayer *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_211188324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<ZinANELayer *>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2111883C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<ZinANELayer *>>::__assign_with_size[abi:ne180100]<std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<DimensionMapping>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v20, a2, v13, v9);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_211188558(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_211188560(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *> const*,std::vector<ZinANELayer *>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_211188608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(uint64_t result, int8x16_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v11 = (int8x16_t *)result;
  while (2)
  {
    long long v12 = &a2[-1].i64[1];
    uint64_t v91 = a2;
    i64 = a2[-1].i64;
    int v89 = &a2[-2].i64[1];
    uint64_t v13 = (uint64_t *)v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = (int8x16_t *)v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = ((char *)a2 - (char *)v13) >> 3;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], v11->i64[0]);
                if (result)
                {
                  uint64_t v42 = v11->i64[0];
                  v11->i64[0] = a2[-1].i64[1];
                  a2[-1].i64[1] = v42;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11->i64, &v11->i64[1], v12, a3);
                break;
              case 4:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11->i64, &v11->i64[1], v11[1].i64, v12, a3);
                break;
              case 5:
                size_t v43 = v11[1].i64;
                unint64_t v44 = &v11[1].i64[1];
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11->i64, &v11->i64[1], v11[1].i64, &v11[1].i64[1], a3);
                __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], v11[1].i64[1]);
                if (result)
                {
                  uint64_t v45 = *v44;
                  *unint64_t v44 = a2[-1].i64[1];
                  a2[-1].i64[1] = v45;
                  __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v44, *v43);
                  if (result)
                  {
                    uint64_t v46 = *v43;
                    uint64_t v47 = *v44;
                    *size_t v43 = *v44;
                    *unint64_t v44 = v46;
                    __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v47, v11->i64[1]);
                    if (result)
                    {
                      uint64_t v49 = v11->i64[1];
                      uint64_t v48 = v11[1].i64[0];
                      uint64_t v50 = v11->i64[0];
                      v11->i64[1] = v48;
                      v11[1].i64[0] = v49;
                      __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v48, v50);
                      if (result) {
                        *unint64_t v11 = vextq_s8(*v11, *v11, 8uLL);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            long long v51 = (int8x16_t *)&v11->u64[1];
            BOOL v53 = v11 == a2 || v51 == a2;
            if (a5)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                uint64_t v55 = (uint64_t *)v11;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = (uint64_t *)v51;
                  __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v56, v57);
                  if (result)
                  {
                    uint64_t v58 = *v55;
                    uint64_t v59 = v54;
                    while (1)
                    {
                      *(uint64_t *)((char *)&v11->i64[1] + v59) = *(uint64_t *)((char *)v11->i64 + v59);
                      if (!v59) {
                        break;
                      }
                      __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v58, *(uint64_t *)((char *)&v11->i64[-1] + v59));
                      v59 -= 8;
                      if ((result & 1) == 0)
                      {
                        long long v60 = (uint64_t *)((char *)&v11->i64[1] + v59);
                        goto LABEL_83;
                      }
                    }
                    long long v60 = (uint64_t *)v11;
LABEL_83:
                    uint64_t *v60 = v58;
                  }
                  long long v51 = (int8x16_t *)(v55 + 1);
                  v54 += 8;
                }
                while (v55 + 1 != (uint64_t *)a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v84 = v11->i64[0];
                uint64_t v83 = v11->i64[1];
                unint64_t v11 = v51;
                __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v83, v84);
                if (result)
                {
                  uint64_t v85 = v11->i64[0];
                  int v86 = (uint64_t *)v11;
                  do
                  {
                    long long v87 = v86;
                    uint64_t v88 = *--v86;
                    *long long v87 = v88;
                    __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v85, *(v87 - 2));
                  }
                  while ((result & 1) != 0);
                  uint64_t *v86 = v85;
                }
                long long v51 = (int8x16_t *)&v11->u64[1];
              }
              while (&v11->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v61 = (unint64_t)(v15 - 2) >> 1;
              int64_t v93 = v61;
              do
              {
                int64_t v62 = v61;
                if (v93 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  unint64_t v64 = &v11->i64[v63];
                  if (2 * v61 + 2 < v15
                    && ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v64, v64[1]))
                  {
                    ++v64;
                    uint64_t v63 = 2 * v62 + 2;
                  }
                  int v65 = &v11->i64[v62];
                  __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v64, *v65);
                  if ((result & 1) == 0)
                  {
                    int64_t v90 = v62;
                    uint64_t v66 = *v65;
                    do
                    {
                      long long v67 = v64;
                      uint64_t *v65 = *v64;
                      if (v93 < v63) {
                        break;
                      }
                      uint64_t v68 = (2 * v63) | 1;
                      unint64_t v64 = &v11->i64[v68];
                      if (2 * v63 + 2 < v15
                        && ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v64, v64[1]))
                      {
                        ++v64;
                        uint64_t v68 = 2 * v63 + 2;
                      }
                      __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v64, v66);
                      int v65 = v67;
                      uint64_t v63 = v68;
                    }
                    while (!result);
                    *long long v67 = v66;
                    int64_t v62 = v90;
                    a2 = v91;
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              uint64_t v69 = (unint64_t)v14 >> 3;
              do
              {
                long long v70 = a2;
                uint64_t v71 = 0;
                uint64_t v94 = v11->i64[0];
                size_t v72 = (uint64_t *)v11;
                do
                {
                  int v73 = &v72[v71 + 1];
                  uint64_t v74 = (2 * v71) | 1;
                  uint64_t v75 = 2 * v71 + 2;
                  if (v75 < v69)
                  {
                    __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v73, v72[v71 + 2]);
                    if (result)
                    {
                      ++v73;
                      uint64_t v74 = v75;
                    }
                  }
                  *size_t v72 = *v73;
                  size_t v72 = v73;
                  uint64_t v71 = v74;
                }
                while (v74 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
                a2 = (int8x16_t *)((char *)v70 - 8);
                if (v73 == (uint64_t *)&v70[-1].u64[1])
                {
                  *int v73 = v94;
                }
                else
                {
                  *int v73 = a2->i64[0];
                  a2->i64[0] = v94;
                  uint64_t v76 = (char *)v73 - (char *)v11 + 8;
                  if (v76 >= 9)
                  {
                    unint64_t v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                    long long v78 = &v11->i64[v77];
                    __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v78, *v73);
                    if (result)
                    {
                      std::string v79 = (int8x16_t *)((char *)v70 - 8);
                      uint64_t v80 = *v73;
                      do
                      {
                        long long v81 = v78;
                        *int v73 = *v78;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        long long v78 = &v11->i64[v77];
                        __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v78, v80);
                        int v73 = v81;
                      }
                      while ((result & 1) != 0);
                      *long long v81 = v80;
                      a2 = v79;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v11->i64[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v17, v11->i64, v12, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11->i64, v17, v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(&v11->i64[1], v17 - 1, i64, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11[1].i64, &v11->i64[v16 + 1], v89, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v17 - 1, v17, &v11->i64[v16 + 1], a3);
            uint64_t v18 = v11->i64[0];
            v11->i64[0] = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if ((a5 & 1) != 0
            || ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v11[-1].i64[1], v11->i64[0]))
          {
            break;
          }
          uint64_t v33 = v11->i64[0];
          __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v11->i64[0], *v12);
          if (result)
          {
            uint64_t v13 = (uint64_t *)v11;
            do
            {
              uint64_t v34 = v13[1];
              ++v13;
              __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v35 = &v11->i64[1];
            do
            {
              uint64_t v13 = v35;
              if (v35 >= (uint64_t *)a2) {
                break;
              }
              ++v35;
              __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v33, *v13);
            }
            while (!result);
          }
          unint64_t v36 = (uint64_t *)a2;
          if (v13 < (uint64_t *)a2)
          {
            unint64_t v36 = (uint64_t *)a2;
            do
            {
              uint64_t v37 = *--v36;
              __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v13 < v36)
          {
            uint64_t v38 = *v13;
            *uint64_t v13 = *v36;
            *unint64_t v36 = v38;
            do
            {
              uint64_t v39 = v13[1];
              ++v13;
            }
            while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v33, v39));
            do
            {
              uint64_t v40 = *--v36;
              __n128 result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v33, v40);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = v13 - 1;
          BOOL v5 = v13 - 1 >= (uint64_t *)v11;
          BOOL v6 = v13 - 1 == (uint64_t *)v11;
          if (v13 - 1 != (uint64_t *)v11) {
            v11->i64[0] = *v41;
          }
          a5 = 0;
          *uint64_t v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = v11->i64[0];
        while (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v11->i64[++v19], v20))
          ;
        unint64_t v22 = &v11->i64[v19];
        unint64_t v23 = (uint64_t *)v91;
        BOOL v6 = v19 == 1;
        a2 = v91;
        if (v6)
        {
          unint64_t v23 = (uint64_t *)v91;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v25, v20));
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v24, v20));
        }
        if (v22 >= v23)
        {
          long long v31 = (int8x16_t *)(v22 - 1);
        }
        else
        {
          size_t v26 = v22;
          CFStringRef v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            *size_t v26 = *v27;
            *CFStringRef v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v29, v20));
            do
              uint64_t v30 = *--v27;
            while (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v30, v20));
          }
          while (v26 < v27);
          long long v31 = (int8x16_t *)(v26 - 1);
          a2 = v91;
        }
        if (v31 != v11) {
          v11->i64[0] = v31->i64[0];
        }
        v31->i64[0] = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **,false>(v11, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = &v31->i64[1];
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(v11, v31, a3);
      uint64_t v13 = &v31->i64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>((int8x16_t *)&v31->u64[1], a2, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

BOOL ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  uint64_t v3 = *(void *)(a2 + 48);
  if (a2 == a3)
  {
    uint64_t v4 = *(void *)(a2 + 48);
  }
  else
  {
    uint64_t v4 = *(void *)(a3 + 48);
    if (v3 == v4)
    {
      uint64_t v6 = *a1;
      if ((void *)(v6 + 8) == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(*a1, &v16))
      {
        uint64_t v13 = v16;
      }
      else
      {
        uint64_t v7 = *a1;
        if ((void *)(v7 + 8) != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(*a1, &v15))
        {
          uint64_t v8 = (uint64_t **)*a1;
          uint64_t v17 = &v16;
          uint64_t v9 = std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v8, &v16, (uint64_t)&std::piecewise_construct, &v17)[5];
          unint64_t v10 = (uint64_t **)*a1;
          uint64_t v17 = &v15;
          return v9 < std::__tree<std::__value_type<ZinIrOpLayer *,long>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,long>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,long>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v10, &v15, (uint64_t)&std::piecewise_construct, &v17)[5];
        }
        uint64_t v13 = v15;
      }
      uint64_t v14 = (const char *)(v13 + 24);
      if (*(char *)(v13 + 47) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
      ZinAssertImpl("Error: layer (%s) not found in topologically sorted list.", v14);
    }
  }
  return v3 < v4;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8 = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a2, *a1);
  BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a3, v10);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a4, *a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(int8x16_t *a1, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], a1->i64[0]))
      {
        uint64_t v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      i64 = a1[1].i64;
      uint64_t v18 = &a1[1].i64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, a2[-1].i64[1], a1[1].i64[1]))
      {
        uint64_t v19 = *v18;
        uint64_t *v18 = a2[-1].i64[1];
        a2[-1].i64[1] = v19;
        if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v18, *i64))
        {
          uint64_t v20 = *i64;
          uint64_t v21 = *v18;
          uint64_t *i64 = *v18;
          uint64_t *v18 = v20;
          if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v21, a1->i64[1]))
          {
            uint64_t v23 = a1->i64[1];
            uint64_t v22 = a1[1].i64[0];
            uint64_t v24 = a1->i64[0];
            a1->i64[1] = v22;
            a1[1].i64[0] = v23;
            if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v22, v24)) {
              *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1[1].i64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1->i64, &a1->i64[1], a1[1].i64, a3);
      uint64_t v10 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, *v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = &a1->i8[v14];
        *(uint64_t *)((char *)&a1[1].i64[1] + v14) = *(uint64_t *)((char *)a1[1].i64 + v14);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (!ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a3, v13, *((void *)v15 + 1)))
        {
          uint64_t v16 = (uint64_t *)((char *)&a1[1].i64[1] + v14);
          goto LABEL_13;
        }
      }
      uint64_t v16 = (uint64_t *)a1;
LABEL_13:
      uint64_t *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (uint64_t *)a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == (uint64_t *)a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0 &,ZinIrOpLayer **>(a1, a2, a3, a5);
  BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL result = ZinIrScheduleUtil::GetOrderedLayers(ZinIrOpLayerGraph const*)::$_0::operator()(a5, *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
}

void *std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26C32EDB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32EDB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()@<X0>(uint64_t a1@<X0>, ZinIrTarget **a2@<X1>, uint64_t *a3@<X8>)
{
  Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(a3, *a2);
  ZinIrScheduleUtil::GetEngineScheduledLayerGroups(Hal, &v6);
  std::vector<std::vector<ZinANELayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<ZinANELayer *>*>,std::__wrap_iter<std::vector<ZinANELayer *>*>>(*(uint64_t **)(a1 + 8), *(__n128 **)(*(void *)(a1 + 8) + 8), v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  uint64_t v8 = (void **)&v6;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v8);
  return 0;
}

void sub_211189418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0,std::allocator<ZinIrScheduleUtil::GetEngineScheduledLayerGroups(ZinIrControlFlowGraph const*)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

__n128 *std::vector<std::vector<ZinANELayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<ZinANELayer *>*>,std::__wrap_iter<std::vector<ZinANELayer *>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<DimensionMapping>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<DimensionMapping> *,std::vector<DimensionMapping> *,std::vector<DimensionMapping> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      uint64_t v24 = &v19[24 * v15];
      uint64_t v25 = v24;
      size_t v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<DimensionMapping>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<DimensionMapping>*>>(&v23, a3, a5);
      BOOL v5 = (__n128 *)std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_211189624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<ZinANELayer *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::reverse_iterator<std::vector<ZinANELayer *>*>,std::reverse_iterator<std::vector<ZinANELayer *>*>,std::reverse_iterator<std::vector<ZinANELayer *>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*,std::vector<ZinANELayer *>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  void v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinANELayer *>>,std::vector<ZinANELayer *>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::~__func()
{
}

__n128 std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C322D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C322D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::operator()@<X0>(uint64_t a1@<X0>, ZinIrTarget **a2@<X1>, uint64_t *a3@<X8>)
{
  Hal = (ZinIrScheduleUtil *)ZinIrTarget::GetHal(a3, *a2);
  ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(Hal, (const ZinIrOpLayerGraph *)**(unsigned int **)(a1 + 8), &v9);
  uint64_t v5 = v9;
  if (v10 != v9)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>,0>(*(void *)(v5 + v6), *(void *)(v5 + v6 + 8), (uint64_t *)(v6 + **(void **)(a1 + 16)));
      ++v7;
      uint64_t v5 = v9;
      v6 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
  }
  uint64_t v11 = (void **)&v9;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return 0;
}

void sub_2111898D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0,std::allocator<ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(ZinIrControlFlowGraph const*,int)::$_0>,ZinIrStatus ()(ZinIrBasicBlock *)>::target_type()
{
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::__wrap_iter<std::vector<ZinANELayer *> *>,std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 24;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<std::vector<ZinANELayer *>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::vector<ZinANELayer *>>::__push_back_slow_path<std::vector<ZinANELayer *> const&>(v6, a2);
  }
  else
  {
    std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t ZinMirConvUtils::Validate3DConvProgrammingConstraints(int64x2_t *a1, int *a2)
{
  unint64_t v2 = a1->i64[0];
  if (a1->i64[0] == 1) {
    return 0;
  }
  unint64_t v6 = a1[1].u64[1];
  v13.i32[0] = 0;
  uint64_t v7 = (v2 % v6 + v2) / v6;
  uint64_t NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator((uint64_t)a2, &v13, (int64x2_t *)a1[1].i32, a1[3].i32[2], a1[3].i8[13]);
  uint64_t v9 = a1->i64[1];
  int32x2_t v13 = vmovn_s64(a1[2]);
  int v14 = a1[3].i64[0];
  uint64_t NumRequiredAccumulatorsPerDepthSubChannel = ZinNEPerfUtils::GetNumRequiredAccumulatorsPerDepthSubChannel((int *)&v13, v9, NumOutputChannelsPerAccumulator, 1uLL);
  int v11 = a1[3].u8[12];
  uint64_t v3 = 3;
  if ((NumRequiredAccumulatorsPerDepthSubChannel * v7) << v11 <= (unint64_t)a2[4])
  {
    if (a1->i64[1] <= ComputeMaxOcg((const ZinIrHalParameters *)a2, NumRequiredAccumulatorsPerDepthSubChannel, v7, NumOutputChannelsPerAccumulator, a1[2].i64[0], a1[2].i64[1], a1[3].i64[0], v11 != 0))return 0; {
    else
    }
      return 3;
  }
  return v3;
}

unint64_t ComputeMaxOcg(const ZinIrHalParameters *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v19 = 0;
  BOOL HasAccDoubleBuffering = ZinNEPerfUtils::HasAccDoubleBuffering((uint64_t)&v19, (uint64_t)a1, a3, a2, a8);
  unint64_t Pow2 = ZinRoundDownToNextPow2(*((int *)a1 + 4) / ((a3 + (unint64_t)HasAccDoubleBuffering) << a8));
  unint64_t v17 = a6 * a5 * a7;
  if (v17 <= Pow2 * a4) {
    return Pow2 * a4 / v17;
  }
  else {
    return 1;
  }
}

uint64_t ZinMirConvUtils::CheckForHWLimits(uint64_t a1, uint64_t a2, unsigned int a3, int8x16_t *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, unint64_t a9, uint64_t *a10, char a11, char a12, unint64_t a13, char a14)
{
  unsigned int v18 = a3;
  uint64_t v19 = *a10;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v20 = a4[1].i64[0];
  int v43 = 0;
  __int16 v44 = 0;
  int v45 = 0;
  __int16 v46 = 0;
  uint64_t v41 = 0;
  __int16 v42 = 0;
  int64x2_t v50 = vdupq_n_s64(1uLL);
  int8x16_t v51 = vextq_s8(*a4, *a4, 8uLL);
  uint64_t v49 = 0;
  uint64_t v52 = v20;
  int64x2_t v53 = v50;
  int64x2_t v54 = v50;
  uint64_t v21 = *(void *)a5;
  int v22 = *(_DWORD *)(a5 + 8);
  uint64_t v55 = 1;
  uint64_t v56 = v21;
  uint64_t v58 = *(void *)a6;
  LODWORD(v21) = a6[2];
  int v57 = v22;
  int v59 = v21;
  long long v60 = *(_OWORD *)a7;
  uint64_t v61 = *(void *)(a7 + 16);
  int v62 = *a8;
  long long v63 = xmmword_211EF5F90;
  uint64_t v64 = 1;
  int v65 = 0;
  int v70 = 0;
  uint64_t v66 = 1;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  if (*(unsigned char *)(v19 + 1148))
  {
    unint64_t v23 = *(void *)(a2 + 8);
    if (*(void *)(a1 + 8) == v23 && v23 == a9) {
      int v25 = 1;
    }
    else {
      int v25 = 2;
    }
    if (a9 == 1) {
      int v25 = 0;
    }
    if (v25 == 2) {
      BOOL v26 = v23 / a9 == 1;
    }
    else {
      BOOL v26 = v25 == 1;
    }
  }
  else
  {
    BOOL v26 = 0;
  }
  unint64_t v27 = a13;
  int v28 = ZinMirConvUtils::ComputeSmallSourceMode(v19, a3, (int *)&v41, a2, a11, v26, a12, 0, 0x10uLL);
  if (a14
    && a13 > ZinMirConvUtils::ComputeMaxOcgSize(v18, (uint64_t)a4, a5, a6, a7, v19, v28, 0, 0, 0, *(unsigned char *)(a10[1] + 376)))
  {
    return 3;
  }
  if (a4[1].i64[0] == 1) {
    return 0;
  }
  if (IsFormatDMAConvertibleToFP16(v18)) {
    unsigned int v18 = 3;
  }
  v33.i64[0] = details::ZinGetProgrammedKernelDimension(*(int *)(a5 + 8), a6[2], a4[1].i64[0], *(_DWORD *)(a7 + 16));
  uint64_t v35 = *(int *)(a5 + 8);
  *(void *)&long long v30 = (int)*(void *)a6;
  *((void *)&v30 + 1) = (int)HIDWORD(*(void *)a6);
  long long v36 = v30;
  uint64_t v37 = a6[2];
  unsigned int v34 = v18;
  char v40 = 0;
  if (!a14) {
    unint64_t v27 = ZinMirConvUtils::ComputeOcgSize((uint64_t)a4, a5, a6, a7, a9, v19, a2, v18, v26, v28, 0, v31, 0, 0, *(unsigned char *)(a10[1] + 376));
  }
  v33.i64[1] = v27;
  int v38 = v28;
  char v39 = 0;
  return ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v33, (int *)v19);
}

BOOL ZinMirConvUtils::UsesUnicast(ZinMirConvUtils *this, const ZinIrHalParameters *a2, const ZinIrHalParameters *a3, const ZinIrHalParameters *a4)
{
  if (!*((unsigned char *)this + 1148)) {
    return 0;
  }
  if (a3 == a4 && a2 == a3) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  if (a4 == (const ZinIrHalParameters *)1) {
    int v5 = 0;
  }
  if (v5 == 2) {
    return (unint64_t)a3 / (unint64_t)a4 == 1;
  }
  else {
    return v5 == 1;
  }
}

uint64_t ZinMirConvUtils::ComputeSmallSourceMode(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, char a5, int a6, char a7, char a8, unint64_t a9)
{
  unint64_t ProgrammedOutputTensorDimension = details::ZinGetProgrammedOutputTensorDimension(*(void *)(a4 + 24), a3[38], a3[41]);
  unint64_t v18 = details::ZinGetProgrammedOutputTensorDimension(*(void *)(a4 + 16), a3[39], a3[42]);
  return ZinMirConvUtils::ComputeSmallSourceMode(a1, a2, (uint64_t)a3, v18, ProgrammedOutputTensorDimension, a5, a6, a7, a8, a9);
}

unint64_t ZinMirConvUtils::ComputeMaxOcgSize(unsigned int a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9, int a10, char a11)
{
  unsigned int v27 = a1;
  if (a11) {
    int v17 = 0;
  }
  else {
    int v17 = a7;
  }
  if (v17 == 1)
  {
    int v18 = a4[2];
    unint64_t v19 = *(void *)(a6 + 856) / (unint64_t)(a4[1] * *a4 * v18);
  }
  else
  {
    if (!IsPrimaryFormat(a1) && (IsFormatDMAConvertibleToFP16(a1) & 1) == 0) {
      ZinAssertImpl("Error: NEConv's input format is invalid to compute MaxOcgSize.");
    }
    int v18 = a4[2];
    if (a1 == 3) {
      unint64_t v21 = *(void *)(a6 + 864);
    }
    else {
      unint64_t v21 = *(void *)(a6 + 872);
    }
    unint64_t v19 = v21 / (a4[1] * *a4 * v18);
  }
  unint64_t v22 = details::ZinIrSubchannelKernelDimension(*(int *)(a3 + 8), v18, *(void *)(a2 + 16), *(_DWORD *)(a5 + 16));
  int v26 = 0;
  uint64_t NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator(a6, &v26, &v27, v17, a9);
  unint64_t Pow2 = ZinRoundDownToNextPow2((unint64_t)(float)((float)(*(int *)(a6 + 16) >> a8) / (float)v22));
  unint64_t result = ComputeMaxOcg((const ZinIrHalParameters *)a6, Pow2, v22, NumOutputChannelsPerAccumulator, *a4, a4[1], a4[2], a8);
  if (result >= v19) {
    return v19;
  }
  return result;
}

unint64_t ZinMirConvUtils::ComputeOcgSize(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, char a9, int a10, char a11, int a12, char a13, int a14, char a15)
{
  unint64_t result = ZinMirConvUtils::ComputeMaxOcgSize(a8, a1, a2, a3, a4, a6, a10, a11, a13, 0, a15);
  if (a5 == 1)
  {
    if (result >= (*(void *)(a7 + 8) + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8)) {
      return (*(void *)(a7 + 8) + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8);
    }
  }
  else if (a9)
  {
    return 1;
  }
  else
  {
    unint64_t v19 = ((a5 + *(void *)(a7 + 8) - 1) / a5 + *(int *)(a6 + 8) - 1) / *(int *)(a6 + 8);
    if ((int)result < (int)v19) {
      LODWORD(v19) = result;
    }
    return (int)v19;
  }
  return result;
}

BOOL ZinMirConvUtils::IsValidShPrefForTinySourceMode(ZinMirConvUtils *this, const ZinIrHalParameters *a2, unint64_t a3)
{
  if ((unint64_t)a2 < 2) {
    return 0;
  }
  unint64_t Pow2 = ZinRoundDownToNextPow2((unint64_t)a2 - 1);
  unint64_t v7 = *((void *)this + 97);
  if (v7 >= Pow2) {
    unint64_t v7 = Pow2;
  }
  return v7 >= a3;
}

uint64_t ZinMirConvUtils::ComputeSmallSourceMode(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6, int a7, char a8, char a9, unint64_t a10)
{
  uint64_t result = 0;
  if (a8 & 1) != 0 || (a9) {
    return result;
  }
  uint64_t v16 = *(void *)(a3 + 88);
  uint64_t v15 = *(void *)(a3 + 96);
  uint64_t v17 = *(void *)(a3 + 104);
  if (a7 && !*(unsigned char *)(a1 + 1144) || !*(unsigned char *)(a1 + 1142) && (a6 & 1) != 0) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1143))
  {
    uint64_t result = 0;
    if (*(_DWORD *)(a3 + 164) != 1 || *(_DWORD *)(a3 + 168) != 1 || *(_DWORD *)(a3 + 172) != 1) {
      return result;
    }
  }
  int v18 = *(unint64_t **)(a1 + 792);
  unint64_t v19 = *(unint64_t **)(a1 + 800);
  if (v18 == v19) {
    return 0;
  }
  while (1)
  {
    unint64_t v20 = *v18;
    if (*v18 >= a5)
    {
      unint64_t v21 = v18[1];
      if (v21 >= a4) {
        break;
      }
    }
    v18 += 2;
    if (v18 == v19) {
      return 0;
    }
  }
  unint64_t ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(*(int *)(a3 + 152), *(int *)(a3 + 164), *(void *)(a3 + 96), *(_DWORD *)(a3 + 176));
  if ((v21 != 8 || v20 != 8) && ProgrammedKernelDimension <= 8)
  {
    uint64_t result = 0;
    if (*(_DWORD *)(a3 + 164) != 1) {
      return result;
    }
    if (*(_DWORD *)(a3 + 168) != 1) {
      return result;
    }
    uint64_t result = 0;
    int v25 = *(_DWORD *)(a3 + 200);
    if (v25 == 6 || v15 != 1 || v16 != 1 || *(_DWORD *)(a3 + 172) != 1 || v25 == 3) {
      return result;
    }
    goto LABEL_34;
  }
  if (ProgrammedKernelDimension > 8) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1133)) {
    return 1;
  }
  if (a2 == 3) {
    LOBYTE(v26) = 0;
  }
  else {
    int v26 = IsFormatDMAConvertibleToFP16(a2) ^ 1;
  }
  if (a10 < 2) {
    return 1;
  }
LABEL_34:
  unint64_t Pow2 = ZinRoundDownToNextPow2(a10 - 1);
  unint64_t v28 = *(void *)(a1 + 776);
  if (v28 >= Pow2) {
    unint64_t v28 = Pow2;
  }
  char v29 = v28 < a4 ? 1 : v26;
  if (v29) {
    return 1;
  }
  uint64_t result = 1;
  if (v15 == 1 && v16 == 1 && v17 == 1)
  {
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    if (((*(_DWORD *)(a3 + 168) == 1) & ~vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a3 + 152), v30)))) & (*(_DWORD *)(a3 + 172) == 1)) != 0) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

BOOL ZinMirConvUtils::CanUseWinogradMode(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int8 a9, int a10, char a11, int a12, char a13, char a14, char a15, unint64_t a16, char a17)
{
  uint64_t v17 = *a1;
  uint64_t v19 = *(void *)(a6 + 88);
  uint64_t v18 = *(void *)(a6 + 96);
  v45[0] = v18;
  v45[1] = v19;
  uint64_t v20 = *(void *)(a6 + 104);
  v45[2] = v20;
  if (a15) {
    return 0;
  }
  BOOL result = 0;
  if (a7 != 12)
  {
    if (*(unsigned char *)(v17 + 1600))
    {
      char v43 = *(unsigned char *)(a6 + 272);
      int UnderlyingType = ZinKernelFormatGetUnderlyingType(*(_DWORD *)a6);
      BOOL result = 0;
      if (UnderlyingType != 5 && !a11)
      {
        if (ZinKernelFormatGetUnderlyingType(*(_DWORD *)a6) != 2
          && !ZinKernelFormatIsUnity(*(_DWORD *)a6))
        {
          int v29 = IsFloatFormat(a7);
          if (a8)
          {
            BOOL result = 0;
            if ((a8 - 5) < 0xFFFFFFFE) {
              char v30 = 1;
            }
            else {
              char v30 = v29;
            }
            if ((v30 & 1) != 0 || (v43 & 2) != 0) {
              return result;
            }
            goto LABEL_18;
          }
          if ((v43 & 2) == 0)
          {
LABEL_18:
            if (a7 == 3) {
              int v31 = 1;
            }
            else {
              int v31 = a9;
            }
            if (v31 == 1 && a14 && !a13) {
              return 0;
            }
            int v42 = v29;
            if (details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 152), *(int *)(a6 + 164), v18, *(_DWORD *)(a6 + 176)) != 3)return 0; {
            if (details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 156), *(int *)(a6 + 168), v19, *(_DWORD *)(a6 + 184)) > 5)return 0;
            }
            uint64_t v32 = details::ZinIrSubchannelKernelDimension(*(int *)(a6 + 160), *(int *)(a6 + 172), v20, *(_DWORD *)(a6 + 192));
            if (v32 != 1 && (a9 & 1) != 0) {
              return 0;
            }
            char v34 = *(unsigned char *)(v17 + 1148);
            if (v34)
            {
              unint64_t v35 = *(void *)(a4 + 8);
              if (*(void *)(a3 + 8) == v35 && v35 == a5) {
                int v37 = 1;
              }
              else {
                int v37 = 2;
              }
              if (a5 == 1) {
                int v37 = 0;
              }
              int v38 = a8;
              if (v37 == 2) {
                char v34 = v35 / a5 == 1;
              }
              else {
                char v34 = v37 == 1;
              }
            }
            else
            {
              int v38 = a8;
            }
            if (!a17)
            {
              a16 = ZinMirConvUtils::ComputeOcgSize((uint64_t)v45, a6 + 152, (int *)(a6 + 164), a6 + 176, a5, v17, a4, a7, v34, v38, 1, v41, 0, 0, *(unsigned char *)(a1[1] + 376));
              int v38 = a8;
            }
            unint64_t v39 = 2 * v32 * a16 * *(int *)(a6 + 164) * *(int *)(a6 + 168) * *(int *)(a6 + 172);
            if ((v38 - 1) > 1)
            {
              if (v42) {
                BOOL v40 = v39 >= 0x11;
              }
              else {
                BOOL v40 = v39 >= 9;
              }
            }
            else
            {
              BOOL v40 = v39 >= 0x21;
            }
            return !v40;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinMirConvUtils::IsChannelwiseConvolution(ZinMirConvUtils *this, ZinMirConvUtils *a2, ZinMirConvUtils *a3)
{
  return this == a2 && a2 == a3;
}

BOOL ZinMirConvUtils::CheckFor3DMathHWBug(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  v56[0] = a3;
  if (!*(unsigned char *)(a5 + 1899)) {
    return 1;
  }
  uint64_t v10 = *(void *)(a4 + 104);
  uint64_t v42 = *(void *)(a4 + 96);
  uint64_t v50 = *(void *)(a4 + 88);
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v54 = *(void *)(a1 + 8);
  unint64_t v39 = *(void *)(a2 + 8);
  uint64_t v43 = *(void *)(a2 + 32);
  uint64_t v12 = *(int *)(a4 + 152);
  uint64_t v52 = *(int *)(a4 + 156);
  uint64_t v13 = *(int *)(a4 + 160);
  uint64_t v14 = *(int *)(a4 + 172);
  uint64_t v49 = *(int *)(a4 + 168);
  int v45 = *(_DWORD *)(a4 + 176);
  uint64_t v47 = *(int *)(a4 + 164);
  int v48 = *(_DWORD *)(a4 + 184);
  uint64_t v15 = *(int *)(a4 + 192);
  uint64_t ProgrammedKernelDimension = details::ZinGetProgrammedKernelDimension(v13, v14, v10, *(_DWORD *)(a4 + 192));
  uint64_t ProgrammedPadDimension = details::ZinGetProgrammedPadDimension(v13, v14, v15);
  uint64_t v18 = 3;
  if (v11 > 3) {
    uint64_t v18 = v11;
  }
  uint64_t v19 = 2 - v18;
  uint64_t v40 = ProgrammedKernelDimension;
  BOOL v20 = ProgrammedKernelDimension == 3 && v13 == 1;
  uint64_t v51 = v11;
  uint64_t v21 = (ProgrammedPadDimension + v11) % v13 + v11 + (int)v15 % (int)v13;
  if (v20) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = -1;
  }
  uint64_t v46 = v22;
  uint64_t v38 = details::ZinIrSubchannelKernelDimension(v12, v14, v10, v15);
  if (!*(unsigned char *)(a5 + 1148))
  {
LABEL_22:
    int v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, 0, a7, 0, 0x10uLL);
    uint64_t v27 = v42;
    uint64_t v28 = v43;
    uint64_t v29 = v40;
LABEL_23:
    v54 /= *(void *)(a4 + 224);
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(a4 + 224);
  if (v39 == v23 && v54 == v39) {
    int v25 = 1;
  }
  else {
    int v25 = 2;
  }
  if (v23 == 1) {
    int v25 = 0;
  }
  if (v25 != 2)
  {
    if (v25 == 1)
    {
      int v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, 1, a7, 0, 0x10uLL);
      uint64_t v27 = v42;
      uint64_t v28 = v43;
      uint64_t v29 = v40;
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  unint64_t v37 = v39 / v23;
  int v26 = ZinMirConvUtils::ComputeSmallSourceMode(a5, a3, (int *)a4, a2, a6, v39 / v23 == 1, a7, 0, 0x10uLL);
  uint64_t v27 = v42;
  uint64_t v28 = v43;
  uint64_t v29 = v40;
  if (v37 != 1) {
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v30 = (v13 + v29 - 1) & -(int)v13;
  int v55 = 0;
  uint64_t NumOutputChannelsPerAccumulator = ZinNEPerfUtils::GetNumOutputChannelsPerAccumulator(a5, &v55, v56, v26, 0);
  if (2 * (int)v47 * (uint64_t)(int)v49 * v14 / NumOutputChannelsPerAccumulator <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = 2 * (int)v47 * (uint64_t)(int)v49 * v14 / NumOutputChannelsPerAccumulator;
  }
  uint64_t v33 = details::ZinIrSubchannelKernelDimension(v12, v47, v27, v45);
  uint64_t v34 = details::ZinIrSubchannelKernelDimension(v52, v49, v50, v48);
  if (a6) {
    uint64_t v35 = (int)v13 * (uint64_t)(int)v12 * v38 * v54 * v32 * v33;
  }
  else {
    uint64_t v35 = v54;
  }
  if (v32
     + v34 * v52 * v35
     + ((v32 + v34 * v52 * v35 - 4 * (int)v13) & ~((v32 + v34 * v52 * v35 - 4 * (int)v13) >> 63)) * (v21 / v13 - 1) >= v46 + 4 * ((v28 - 1) * v13 - (v51 + v15) + v30))
    return 1;
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinMirConvUtils::CheckFor3DMathHWBug();
    return 0;
  }
  return result;
}

BOOL ZinMirConvUtils::CalculateGroupConvUnicastCin(unint64_t this, uint64_t *a2, const ZinTensorDimensions *a3, const ZinTensorDimensions *a4, unint64_t *a5)
{
  uint64_t v5 = *a2;
  if (*a2 == 1)
  {
    if (*((void *)a3 + 1) / this == 1) {
      unint64_t v6 = a2[1] / this;
    }
    else {
      unint64_t v6 = 1;
    }
    *(void *)a4 = v6;
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinMirConvUtils::CalculateGroupConvUnicastCin();
  }
  return v5 == 1;
}

uint64_t ZinMirConvUtils::CanUseKernelStreaming(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, unsigned int a9, uint64_t a10, char a11, uint64_t *a12)
{
  uint64_t result = 0;
  if ((a11 & 1) == 0)
  {
    if (*(unsigned char *)(a10 + 1116))
    {
      if (IsPrimaryFormat(a9) || (uint64_t result = IsFormatDMAConvertibleToFP16(a9), result))
      {
        uint64_t result = 0;
        if (a5 <= 1 && (a1 & 1) == 0 && a3 == 1 && a4 == 1 && a6 == 1)
        {
          if (!*((unsigned char *)a12 + 592)) {
            goto LABEL_42;
          }
          if (a12[10] < a7 || a12[12] || a12[11] || a12[13]) {
            return 0;
          }
          int v20 = *((_DWORD *)a12 + 6);
          uint64_t v21 = *a12;
          unint64_t v22 = a12[1];
          if (a7 <= 0xA && v20 == 4 || a8 <= 6 && v20 == 3) {
            return 1;
          }
          BOOL v23 = v21 == v22 && v21 == a12[2];
          BOOL v24 = !v23;
          char v25 = ZinLog2OfPow2(*(void *)(a10 + 680));
          if (a9 == 3) {
            LOBYTE(v26) = -1;
          }
          else {
            uint64_t v26 = IsFormatDMAConvertibleToFP16(a9) << 63 >> 63;
          }
          char v27 = *((unsigned char *)a12 + 29);
          char Pow2Log2 = ZinRoundUpToNextPow2Log2(v22);
          char v29 = v22 < a7 || v24;
          if ((v29 & 1) != 0 || (v30 = v26 + v25 - (v27 + Pow2Log2), uint64_t result = 1, 1 << v30 < a8))
          {
LABEL_42:
            if (*(void *)(a10 + 656) < a7) {
              return 0;
            }
            char v31 = ZinRoundUpToNextPow2Log2(a7);
            char v32 = ZinLog2OfPow2(*(void *)(a10 + 680));
            if (a9 == 3) {
              LOBYTE(v33) = -1;
            }
            else {
              uint64_t v33 = IsFormatDMAConvertibleToFP16(a9) << 63 >> 63;
            }
            uint64_t result = 1;
            if (1 << (v33 + v32 - v31) < a8) {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinMirConvUtils::CanUseHalfWorkUnitMode(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t a6, unint64_t a7, char a8)
{
  if (!*(unsigned char *)(a1 + 1134)) {
    return 0;
  }
  unsigned int v18 = 0;
  if (GetHWChannelFormat(a2, (int *)&v18)) {
    ZinAssertImpl("Invalid input tensor format");
  }
  BOOL v15 = v18 > 4 || ((1 << v18) & 0x13) == 0;
  if (v15 || a3 != 3 && a3) {
    return 0;
  }
  BOOL result = 0;
  if (!a6 && (a5 & 1) == 0 && (a4 & 1) == 0)
  {
    if (a8) {
      BOOL v17 = a7 > *(void *)(a1 + 664);
    }
    else {
      BOOL v17 = 0;
    }
    return !v17;
  }
  return result;
}

BOOL ZinMirConvUtils::IsHalfWUBeneficial(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int *a7, unint64_t a8, int a9)
{
  if (a2 < 0x21) {
    return 0;
  }
  if (a9) {
    BOOL v10 = a9 == 3;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    ZinAssertImpl("Error: NP2_10/SSM Small source mode is not supported together with Half workunit mode");
  }
  unint64_t v16 = *a7;
  unint64_t v17 = a7[1];
  if (a6 * a5 <= (*(void *)(a1 + 680) >> 1) / v16 / v17 && *(void *)(a1 + 664) * v17 >= a5) {
    return 1;
  }
  if (a9 == 3)
  {
    if (*(void *)(a1 + 1192) >= a6 || *(void *)(a1 + 1200) < a3) {
      return 0;
    }
    unint64_t v18 = *(void *)(a1 + 824);
    unint64_t v19 = (v18 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
    unint64_t v20 = v18 / 6;
    unint64_t v21 = v18 / 0xC;
    unint64_t v36 = ZinDivRoundUp(a6, v18 / 6);
    uint64_t v22 = 6;
    unint64_t v23 = ZinDivRoundUp(a5, 6uLL);
    unint64_t v34 = *(void *)(a1 + 432);
    uint64_t v35 = *(void *)(a1 + 592);
    if (v20 >= a6) {
      unint64_t v24 = a6;
    }
    else {
      unint64_t v24 = v20;
    }
    if (a5 < 6) {
      uint64_t v22 = a5;
    }
    float v25 = (float)(v24 * v22) / (float)(2 * (2 * v20 + (v19 >> 2)));
    unint64_t v26 = ZinDivRoundUp(a6, v21);
    unint64_t v27 = ZinDivRoundUp(a5, 6uLL);
    unint64_t v28 = v21 >= a6 ? a6 : v21;
    if (v25 >= (float)((float)(v28 * v22) / (float)(2 * (2 * v21 + (v19 >> 3))))
      || ((v27 * v26 * *(void *)(a1 + 592)) >> 1) / *(void *)(a1 + 432) > v23 * v36 * v35 / v34)
    {
      return 0;
    }
  }
  else
  {
    if (a5 / v17 != a8) {
      return 0;
    }
    unint64_t v29 = *(void *)(a1 + 592) / a8;
    if (!(a6 / v16 % v29)) {
      return 0;
    }
    unint64_t v30 = v29 >> 1;
    unint64_t v31 = ZinDivRoundUp(a6 / v16, v29);
    if (ZinDivRoundUp(a6 / *a7, v30) >= 2 * v31) {
      return 0;
    }
  }
  uint64_t v32 = *(int *)(a1 + 8);
  unint64_t v33 = (int)v32 * (uint64_t)*(int *)(a1 + 16);
  if (v33 < a4) {
    return 1;
  }
  if ((uint64_t)(int)(3 * v33 + (3 * (int)v33 < 0 ? 3 : 0)) >> 2 >= a4) {
    return a4 > 2 * v32;
  }
  return a7[1] * *a7 == 1;
}

uint64_t ZinMirConvUtils::GetConvKind(ZinMirConvUtils *this, ZinMirConvUtils *a2, ZinMirConvUtils *a3)
{
  if (a2 == a3 && this == a2) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (a3 == (ZinMirConvUtils *)1) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL ZinMirConvUtils::ZinConvertProgrammedToLogicalKernelStrides@<W0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v3 = *a1;
  int v4 = a1[1];
  BOOL v5 = *a1 == 2;
  int v6 = *a2;
  int v7 = a2[1];
  BOOL v8 = *a2 == 2;
  int v9 = a1[2];
  BOOL result = v9 == 2;
  int v11 = a2[2];
  BOOL v12 = v11 == 2;
  if (v5 && v8)
  {
    int v3 = 1;
    int v13 = 1;
  }
  else
  {
    int v13 = v6;
  }
  if (v4 == 2 && v7 == 2)
  {
    int v4 = 1;
    int v14 = 1;
  }
  else
  {
    int v14 = v7;
  }
  *a3 = v3;
  a3[1] = v4;
  if (result && v12) {
    int v15 = 1;
  }
  else {
    int v15 = v9;
  }
  a3[2] = v15;
  a3[3] = v13;
  if (result && v12) {
    int v16 = 1;
  }
  else {
    int v16 = v11;
  }
  a3[4] = v14;
  a3[5] = v16;
  return result;
}

BOOL ZinMirConvUtils::MustEnableFillLowerNEFirst(ZinMirConvUtils *this)
{
  return (unint64_t)this > 1;
}

void ZinMirConvUtils::CheckFor3DMathHWBug()
{
  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Kd Math constraints are violated\n", v0, 2u);
}

void ZinMirConvUtils::CalculateGroupConvUnicastCin()
{
  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "We can't do batched group convolution\n", v0, 2u);
}

void NoOpTransposeAtom::NoOpTransposeAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v6[0] = &unk_26C3861D8;
  v6[1] = a3;
  void v6[3] = v6;
  ZinPatternAtom::ZinPatternAtom(this, (long long *)&__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21118B1B4(_Unwind_Exception *exception_object)
{
}

void AllTransposeAtom::AllTransposeAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v6[0] = &unk_26C386180;
  v6[1] = a3;
  void v6[3] = v6;
  ZinPatternAtom::ZinPatternAtom(this, (long long *)&__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21118B2AC(_Unwind_Exception *exception_object)
{
}

void ActivationAtom::ActivationAtom(std::string *this, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v4[0] = &unk_26C383528;
  v4[3] = v4;
  ZinPatternAtom::ZinPatternAtom(this, (long long *)&__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21118B398(_Unwind_Exception *exception_object)
{
}

void ZinMirHoistLayersinPEEW::InitializePatterns(ZinMirHoistLayersinPEEW *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v204 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v62, "irelu1");
  uint64_t v6 = v5 + 24;
  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&__s, v62, v5 + 24);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v177, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v177 = __s;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v178, (uint64_t)v176);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v179, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v60, "prescale1");
  ZinPEAtoms::PreScaleSrc1Atom::PreScaleSrc1Atom(&v173, v60, v5 + 24);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v180, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
  }
  else {
    std::string v180 = v173;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v181, (uint64_t)v174);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v182, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v58, "itranspose1");
  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v171, v58, v5 + 24);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v183, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else {
    std::string v183 = v171;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v184, (uint64_t)v172);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v185, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v56, "broadcast1");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&v169, v56, v5 + 24);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v169;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v187, (uint64_t)v170);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v188, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v54, "activations1");
  ActivationAtom::ActivationAtom(&v167, (uint64_t)v54);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v189, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
  }
  else {
    std::string v189 = v167;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v190, (uint64_t)v168);
  int v53 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v191, &v53, 1);
  uint64_t v193 = 0;
  int v194 = 0;
  unsigned int v195 = 0;
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
  v69.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v193 = (char *)operator new(0x1E0uLL);
  int v194 = v193;
  unsigned int v195 = v193 + 480;
  int v194 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem*>((uint64_t)&v195, (uint64_t)&v177, (uint64_t)&v192, (uint64_t)v193);
  std::string::basic_string[abi:ne180100]<0>(v51, "irelu2");
  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&v152, v51, v5 + 24);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v152;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v155, (uint64_t)v153);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v156, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v49, "itranspose2");
  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v150, v49, v5 + 24);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v150;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v158, (uint64_t)v151);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v159, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v47, "broadcast2");
  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&v148, v47, v5 + 24);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v160, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
  }
  else {
    std::string v160 = v148;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v161, (uint64_t)v149);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v162, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v45, "activations2");
  ActivationAtom::ActivationAtom(&v146, (uint64_t)v45);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v163, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  }
  else {
    std::string v163 = v146;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v164, (uint64_t)v147);
  int v44 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v165, &v44, 1);
  int v196 = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
  v69.__r_.__value_.__s.__data_[8] = 0;
  int v196 = (char *)operator new(0x180uLL);
  uint64_t v197 = (uint64_t)v196;
  uint64_t v198 = v196 + 384;
  uint64_t v197 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem*>((uint64_t)&v198, (uint64_t)&v154, (uint64_t)&v166, (uint64_t)v196);
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  int v65 = 0;
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  v69.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v64 = operator new(0x30uLL);
  int v65 = v64;
  uint64_t v66 = v64 + 6;
  int v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItem>>,std::vector<ZinLinearPattern::AtomItem> const*,std::vector<ZinLinearPattern::AtomItem> const*,std::vector<ZinLinearPattern::AtomItem>*>((uint64_t)&v66, (uint64_t *)&v193, (uint64_t *)&v199, v64);
  uint64_t v199 = &v64;
  uint64_t v200 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v38, "scaled_ew");
  ZinPEAtoms::ScaledEWAtom::ScaledEWAtom(&v138, &v38, v5 + 24);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v140, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
  }
  else {
    std::string v140 = v138;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v141, (uint64_t)v139);
  LODWORD(v69.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v142, (int *)&v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v36, "goc");
  ZinPEAtoms::PEEWGOCAtom::PEEWGOCAtom(&v136, v36, v5 + 24);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v143, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  }
  else {
    std::string v143 = v136;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v144, (uint64_t)v137);
  int v35 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v145, &v35, 1);
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  v69.__r_.__value_.__s.__data_[8] = 0;
  int v41 = (char *)operator new(0xC0uLL);
  uint64_t v42 = (uint64_t)v41;
  uint64_t v43 = v41 + 192;
  uint64_t v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem*>((uint64_t)&v43, (uint64_t)&v140, (uint64_t)&v146, (uint64_t)v41);
  uint64_t v201 = (void **)&v41;
  std::string::basic_string[abi:ne180100]<0>(v30, "abs_or_zero_compare");
  ZinPEAtoms::AbsOrZeroCompareAtom::AbsOrZeroCompareAtom(&v134, v30, v5 + 24);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v69, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
  }
  else {
    std::string v69 = v134;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v70, (uint64_t)v135);
  LODWORD(v132.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v71, (int *)&v132, 1);
  std::string::basic_string[abi:ne180100]<0>(v28, "pre_reduction_transpose");
  AllTransposeAtom::AllTransposeAtom(&v132, (uint64_t)v28, v5 + 24);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v72, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  }
  else {
    std::string v72 = v132;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)v133);
  int v27 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v74, &v27, 1);
  std::string::basic_string[abi:ne180100]<0>(v25, "reduction");
  ZinPEAtoms::ReductionAtom::ReductionAtom(&v130, v25, v5 + 24);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = v130;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v76, (uint64_t)v131);
  LODWORD(v128.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v77, (int *)&v128, 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "final_scale");
  ZinPEAtoms::ReductionFinalScaleAtom::ReductionFinalScaleAtom(&v128, v23, v5 + 24);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v78, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
  }
  else {
    std::string v78 = v128;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v79, (uint64_t)v129);
  LODWORD(v126.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v80, (int *)&v126, 1);
  std::string::basic_string[abi:ne180100]<0>(v21, "epsilon");
  ZinPEAtoms::ReductionEpsilonAtom::ReductionEpsilonAtom(&v126, v21, v5 + 24);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v81, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  }
  else {
    std::string v81 = v126;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v82, (uint64_t)v127);
  LODWORD(v124.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v83, (int *)&v124, 1);
  std::string::basic_string[abi:ne180100]<0>(v19, "post_process");
  ZinPEAtoms::ReductionPostProcessAtom::ReductionPostProcessAtom(&v124, v19, v5 + 24);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = v124;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v85, (uint64_t)v125);
  LODWORD(v122.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v86, (int *)&v122, 1);
  std::string::basic_string[abi:ne180100]<0>(v17, "post_reduction_transpose");
  NoOpTransposeAtom::NoOpTransposeAtom(&v122, (uint64_t)v17, v5 + 24);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v87, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  }
  else {
    std::string v87 = v122;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v88, (uint64_t)v123);
  LODWORD(v120.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v89, (int *)&v120, 1);
  std::string::basic_string[abi:ne180100]<0>(v15, "orelu");
  ZinPEAtoms::OutputReLUAtom::OutputReLUAtom(&v120, v15, v5 + 24);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v90, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v90 = v120;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v91, (uint64_t)v121);
  LODWORD(v118.__r_.__value_.__l.__data_) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v92, (int *)&v118, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "otranspose");
  ZinPEAtoms::OutputTransposeAtom::OutputTransposeAtom(&v118, __p, v5 + 24);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v93, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else {
    std::string v93 = v118;
  }
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v94, (uint64_t)v119);
  LODWORD(v67) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v95, (int *)&v67, 1);
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v67 = (void **)&v32;
  char v68 = 0;
  uint64_t v32 = (char *)operator new(0x360uLL);
  uint64_t v33 = (uint64_t)v32;
  unint64_t v34 = v32 + 864;
  uint64_t v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem*>((uint64_t)&v34, (uint64_t)&v69, (uint64_t)&v96, (uint64_t)v32);
  unint64_t v202 = (void **)&v32;
  uint64_t v203 = 0;
  unint64_t v7 = 864;
  while (1)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v64)[v7 / 8]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v60[v7 + 16]);
    if ((char)v60[v7 + 15] < 0) {
      operator delete(*(void **)&v58[v7 + 16]);
    }
    v7 -= 96;
    if (!v7)
    {
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v119);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v121);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v123);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v125);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v127);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v126.__r_.__value_.__l.__data_);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v129);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v131);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v133);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v135);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      uint64_t v8 = 0;
      while (1)
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v145[v8 * 8]);
        std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v144[v8 * 8]);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[v8 + 2]) < 0) {
          operator delete(*(void **)((char *)&v143.__r_.__value_.__l.__data_ + v8 * 8));
        }
        v8 -= 12;
        if (v8 == -24)
        {
          std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v137);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v139);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (v40 < 0) {
            operator delete(v38);
          }
          for (uint64_t i = 3; i != -3; i -= 3)
          {
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&(&v193)[i];
            std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
          }
          uint64_t v10 = 48;
          while (1)
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v152.__r_.__value_.__r.__words[v10 + 2]);
            std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v151[v10 + 2]);
            if (SHIBYTE(v151[v10 + 1]) < 0) {
              operator delete((void *)v150.__r_.__value_.__r.__words[v10 + 2]);
            }
            v10 -= 12;
            if (!(v10 * 8))
            {
              std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v147);
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v146.__r_.__value_.__l.__data_);
              }
              if (v46 < 0) {
                operator delete(v45[0]);
              }
              std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v149);
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v148.__r_.__value_.__l.__data_);
              }
              if (v48 < 0) {
                operator delete(v47[0]);
              }
              std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v151);
              if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v150.__r_.__value_.__l.__data_);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
              std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v153);
              if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v152.__r_.__value_.__l.__data_);
              }
              if (v52 < 0) {
                operator delete(v51[0]);
              }
              uint64_t v11 = 60;
              while (1)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__s.__r_.__value_.__r.__words[v11 + 2]);
                std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v174[v11 + 2]);
                if (SHIBYTE(v174[v11 + 1]) < 0) {
                  operator delete((void *)v173.__r_.__value_.__r.__words[v11 + 2]);
                }
                v11 -= 12;
                if (!(v11 * 8))
                {
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v168);
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v167.__r_.__value_.__l.__data_);
                  }
                  if (v55 < 0) {
                    operator delete(v54[0]);
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v170);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v169.__r_.__value_.__l.__data_);
                  }
                  if (v57 < 0) {
                    operator delete(v56[0]);
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v172);
                  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v171.__r_.__value_.__l.__data_);
                  }
                  if (v59 < 0) {
                    operator delete(*(void **)v58);
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v174);
                  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v173.__r_.__value_.__l.__data_);
                  }
                  if (v61 < 0) {
                    operator delete(*(void **)v60);
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v176);
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__s.__r_.__value_.__l.__data_);
                  }
                  if (v63 < 0) {
                    operator delete(v62[0]);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v128, "irelu1");
                  ZinPEAtoms::InputReLUAtom::InputReLUAtom(&v177, &v128, v6);
                  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v69, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v69 = v177;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v70, (uint64_t)v178);
                  LODWORD(v154.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v71, (int *)&v154, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v126, "prescale1");
                  ZinPEAtoms::PreScaleSrc1Atom::PreScaleSrc1Atom(&v154, &v126, v6);
                  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v72, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v72 = v154;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)v155);
                  LODWORD(v140.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v74, (int *)&v140, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v124, "itranspose1");
                  ZinPEAtoms::InputTransposeAtom::InputTransposeAtom(&v140, &v124, v6);
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v75, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v75 = v140;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v76, (uint64_t)v141);
                  LODWORD(__s.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v77, (int *)&__s, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v122, "broadcast1");
                  ZinCommonAtoms::BroadcastAtom::BroadcastAtom(&__s, &v122, v6);
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v78, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v78 = __s;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v79, (uint64_t)v176);
                  LODWORD(v173.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v80, (int *)&v173, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v120, "activations1");
                  ActivationAtom::ActivationAtom(&v173, (uint64_t)&v120);
                  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v81, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v81 = v173;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v82, (uint64_t)v174);
                  LODWORD(v36[0]) = 2;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v83, (int *)v36, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v118, "scaled_ew");
                  ZinPEAtoms::ScaledEWAtom::ScaledEWAtom(&v171, &v118, v6);
                  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v84, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v84 = v171;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v85, (uint64_t)v172);
                  LODWORD(v169.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v86, (int *)&v169, 1);
                  std::string::basic_string[abi:ne180100]<0>(&v193, "goc");
                  ZinPEAtoms::PEEWGOCAtom::PEEWGOCAtom(&v169, &v193, v6);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v87, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v87 = v169;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v88, (uint64_t)v170);
                  LODWORD(v30[0]) = 2;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v89, (int *)v30, 1);
                  std::string::basic_string[abi:ne180100]<0>(v62, "abs_or_zero_compare");
                  ZinPEAtoms::AbsOrZeroCompareAtom::AbsOrZeroCompareAtom(&v167, v62, v6);
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v90, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v90 = v167;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v91, (uint64_t)v168);
                  LODWORD(v152.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v92, (int *)&v152, 1);
                  std::string::basic_string[abi:ne180100]<0>(v60, "pre_reduction_transpose");
                  AllTransposeAtom::AllTransposeAtom(&v152, (uint64_t)v60, v6);
                  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v93, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v93 = v152;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)v94, (uint64_t)v153);
                  LODWORD(v28[0]) = 2;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)v95, (int *)v28, 1);
                  std::string::basic_string[abi:ne180100]<0>(v58, "reduction");
                  ZinPEAtoms::ReductionAtom::ReductionAtom(&v150, v58, v6);
                  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v96, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v96 = v150;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v97, (uint64_t)v151);
                  LODWORD(v148.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v98, (int *)&v148, 1);
                  std::string::basic_string[abi:ne180100]<0>(v56, "final_scale");
                  ZinPEAtoms::ReductionFinalScaleAtom::ReductionFinalScaleAtom(&v148, v56, v6);
                  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v99, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v99 = v148;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v100, (uint64_t)v149);
                  LODWORD(v146.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v101, (int *)&v146, 1);
                  std::string::basic_string[abi:ne180100]<0>(v54, "epsilon");
                  ZinPEAtoms::ReductionEpsilonAtom::ReductionEpsilonAtom(&v146, v54, v6);
                  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v102, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v102 = v146;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v103, (uint64_t)v147);
                  LODWORD(v138.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v104, (int *)&v138, 1);
                  std::string::basic_string[abi:ne180100]<0>(v51, "post_process");
                  ZinPEAtoms::ReductionPostProcessAtom::ReductionPostProcessAtom(&v138, v51, v6);
                  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v105, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v105 = v138;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v106, (uint64_t)v139);
                  LODWORD(v136.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v107, (int *)&v136, 1);
                  std::string::basic_string[abi:ne180100]<0>(v49, "post_reduction_transpose");
                  NoOpTransposeAtom::NoOpTransposeAtom(&v136, (uint64_t)v49, v6);
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v108, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v108 = v136;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v109, (uint64_t)v137);
                  LODWORD(v134.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v110, (int *)&v134, 1);
                  std::string::basic_string[abi:ne180100]<0>(v47, "orelu");
                  ZinPEAtoms::OutputReLUAtom::OutputReLUAtom(&v134, v47, v6);
                  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v111, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v111 = v134;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v112, (uint64_t)v135);
                  LODWORD(v132.__r_.__value_.__l.__data_) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v113, (int *)&v132, 1);
                  std::string::basic_string[abi:ne180100]<0>(v45, "otranspose");
                  ZinPEAtoms::OutputTransposeAtom::OutputTransposeAtom(&v132, v45, v6);
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v114, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v114 = v132;
                  }
                  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)&v115, (uint64_t)v133);
                  LODWORD(v38) = 0;
                  std::unordered_set<Attribute>::unordered_set((uint64_t)&v116, (int *)&v38, 1);
                  memset(&v130, 0, sizeof(v130));
                  uint64_t v38 = &v130;
                  char v39 = 0;
                  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x600uLL);
                  v130.__r_.__value_.__l.__size_ = v130.__r_.__value_.__r.__words[0];
                  v130.__r_.__value_.__r.__words[2] = v130.__r_.__value_.__r.__words[0] + 1536;
                  v130.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem*>((uint64_t)&v130.__r_.__value_.__r.__words[2], (uint64_t)&v69, (uint64_t)&v117, (uint64_t)v130.__r_.__value_.__l.__data_);
                  unint64_t v12 = 1536;
                  while (1)
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v64)[v12 / 8]);
                    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v60[v12 + 16]);
                    if ((char)v60[v12 + 15] < 0) {
                      operator delete(*(void **)&v58[v12 + 16]);
                    }
                    v12 -= 96;
                    if (!v12)
                    {
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v133);
                      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v132.__r_.__value_.__l.__data_);
                      }
                      if (v46 < 0) {
                        operator delete(v45[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v135);
                      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v134.__r_.__value_.__l.__data_);
                      }
                      if (v48 < 0) {
                        operator delete(v47[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v137);
                      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v136.__r_.__value_.__l.__data_);
                      }
                      if (v50 < 0) {
                        operator delete(v49[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v139);
                      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v138.__r_.__value_.__l.__data_);
                      }
                      if (v52 < 0) {
                        operator delete(v51[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v147);
                      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v146.__r_.__value_.__l.__data_);
                      }
                      if (v55 < 0) {
                        operator delete(v54[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v149);
                      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v148.__r_.__value_.__l.__data_);
                      }
                      if (v57 < 0) {
                        operator delete(v56[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v151);
                      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v150.__r_.__value_.__l.__data_);
                      }
                      if (v59 < 0) {
                        operator delete(*(void **)v58);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v153);
                      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v152.__r_.__value_.__l.__data_);
                      }
                      if (v61 < 0) {
                        operator delete(*(void **)v60);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v168);
                      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v167.__r_.__value_.__l.__data_);
                      }
                      if (v63 < 0) {
                        operator delete(v62[0]);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v170);
                      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v169.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v195) < 0) {
                        operator delete(v193);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v172);
                      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v171.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v118.__r_.__value_.__l.__data_);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v174);
                      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v173.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v120.__r_.__value_.__l.__data_);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v176);
                      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__s.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v122.__r_.__value_.__l.__data_);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v141);
                      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v140.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v124.__r_.__value_.__l.__data_);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v155);
                      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v154.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v126.__r_.__value_.__l.__data_);
                      }
                      std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v178);
                      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v177.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v128.__r_.__value_.__l.__data_);
                      }
                      uint64_t v200 = 0;
                      operator new();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_21118D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xA80]);
  if (a72 < 0) {
    operator delete(__p);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xAB8]);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xAF0]);
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xB28]);
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC20]);
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC58]);
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xC90]);
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xCC8]);
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xE88]);
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xEC0]);
  if (SLOBYTE(STACK[0x119F]) < 0) {
    operator delete(*(void **)(v73 - 216));
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xEF8]);
  if (SLOBYTE(STACK[0x90F]) < 0) {
    operator delete((void *)STACK[0x8F8]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xF30]);
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xF68]);
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xB60]);
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xD00]);
  if (SLOBYTE(STACK[0x9EF]) < 0) {
    operator delete((void *)STACK[0x9D8]);
  }
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0xFA0]);
  if (SLOBYTE(STACK[0xA27]) < 0) {
    operator delete((void *)STACK[0xA10]);
  }
  while (v72 != (ZinLinearPattern::AtomItemDesc *)&STACK[0x2F0])
  {
    std::string v72 = (ZinLinearPattern::AtomItemDesc *)((char *)v72 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v72);
  }
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](a16);
  STACK[0xFA0] = (unint64_t)&a56;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  STACK[0xFA0] = (unint64_t)&a66;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  STACK[0xFA0] = (unint64_t)&STACK[0x2C8];
  std::vector<std::vector<ZinLinearPattern::AtomItemDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xFA0]);
  _Unwind_Resume(a1);
}

void sub_21118DF6C()
{
}

void sub_21118DF80()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DCA0);
}

void sub_21118DF90()
{
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  JUMPOUT(0x21118DCA0);
}

void sub_21118DFAC()
{
}

void sub_21118DFC0()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DCB8);
}

void sub_21118DFD0()
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  JUMPOUT(0x21118DCB8);
}

void sub_21118DFEC()
{
}

void sub_21118DFF8()
{
}

void sub_21118E000()
{
}

void sub_21118E014()
{
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  JUMPOUT(0x21118DCD0);
}

void sub_21118E034()
{
}

void sub_21118E044()
{
}

void sub_21118E04C()
{
}

void sub_21118E058()
{
}

void sub_21118E060()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DD40);
}

void sub_21118E070()
{
  if (SLOBYTE(STACK[0xBD7]) < 0) {
    operator delete((void *)STACK[0xBC0]);
  }
  JUMPOUT(0x21118DD40);
}

void sub_21118E08C()
{
}

void sub_21118E098()
{
}

void sub_21118E0A0()
{
}

void sub_21118E0B4()
{
  if (SLOBYTE(STACK[0xB77]) < 0) {
    operator delete((void *)STACK[0xB60]);
  }
  JUMPOUT(0x21118DD58);
}

void sub_21118E0D4()
{
}

void sub_21118E0E4()
{
}

void sub_21118E0EC()
{
  STACK[0x2D0] = v0;
  JUMPOUT(0x21118DDA0);
}

void sub_21118E0F8()
{
}

void sub_21118E100()
{
  *(void *)(v1 - 184) = v0;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  JUMPOUT(0x21118DDD0);
}

void sub_21118E120()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DDF0);
}

void sub_21118E130()
{
  if (SLOBYTE(STACK[0xE37]) < 0) {
    operator delete((void *)STACK[0xE20]);
  }
  JUMPOUT(0x21118DDF0);
}

void sub_21118E150()
{
}

void sub_21118E168()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DE08);
}

void sub_21118E178()
{
  if (SLOBYTE(STACK[0xDD7]) < 0) {
    operator delete((void *)STACK[0xDC0]);
  }
  JUMPOUT(0x21118DE08);
}

void sub_21118E198()
{
}

void sub_21118E1B0()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DE20);
}

void sub_21118E1C0()
{
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  JUMPOUT(0x21118DE20);
}

void sub_21118E1E0()
{
}

void sub_21118E1F0()
{
}

void sub_21118E1F8()
{
}

void sub_21118E20C()
{
  if (SLOBYTE(STACK[0xD17]) < 0) {
    operator delete((void *)STACK[0xD00]);
  }
  JUMPOUT(0x21118DE38);
}

void sub_21118E230()
{
}

void sub_21118E244()
{
}

void sub_21118E270()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DE98);
}

void sub_21118E280()
{
  if (*(char *)(v0 + 3655) < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  JUMPOUT(0x21118DE98);
}

void sub_21118E2A4()
{
}

void sub_21118E2C0()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DEB0);
}

void sub_21118E2D0()
{
  if (*(char *)(v0 + 3559) < 0) {
    operator delete((void *)STACK[0x10C0]);
  }
  JUMPOUT(0x21118DEB0);
}

void sub_21118E2F4()
{
}

void sub_21118E310()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DEC8);
}

void sub_21118E320()
{
  if (*(char *)(v0 + 3463) < 0) {
    operator delete((void *)STACK[0x1060]);
  }
  JUMPOUT(0x21118DEC8);
}

void sub_21118E344()
{
}

void sub_21118E360()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x21118DEE0);
}

void sub_21118E370()
{
  if (SLOBYTE(STACK[0x1017]) < 0) {
    operator delete((void *)STACK[0x1000]);
  }
  JUMPOUT(0x21118DEE0);
}

void sub_21118E398()
{
}

void sub_21118E3AC()
{
}

void sub_21118E3CC()
{
  if (SLOBYTE(STACK[0xFB7]) < 0) {
    operator delete((void *)STACK[0xFA0]);
  }
  JUMPOUT(0x21118DEF8);
}

void sub_21118E3F4()
{
}

void sub_21118E40C()
{
}

uint64_t ZinMirHoistLayersinPEEW::Analyze(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v22, "irelu1");
  LOBYTE(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v22);
  std::string::basic_string[abi:ne180100]<0>(&v19, "itranspose1");
  BYTE1(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v19);
  std::string::basic_string[abi:ne180100]<0>(v17, "irelu2");
  BYTE2(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "itranspose2");
  BYTE3(v13[0]) = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
  std::vector<BOOL>::vector(&v25, v13, 4);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v21 < 0) {
    operator delete(v19);
  }
  if (v24 < 0) {
    operator delete(v22);
  }
  LOBYTE(__p[0]) = 1;
  char v22 = v25;
  int v23 = 0;
  unint64_t v19 = &v25[8 * (v26 >> 6)];
  int v20 = v26 & 0x3F;
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&v22, (uint64_t)&v19, __p))
  {
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "scaled_ew");
  int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v22);
  if (v3)
  {
    char v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "goc");
    int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)&v19);
    if (v3)
    {
      char v4 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "abs_or_zero_compare");
      int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v17);
      if (v3)
      {
        char v4 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "reduction");
        int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
        if (v3)
        {
          char v4 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v13, "final_scale");
          int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v13);
          if (v3)
          {
            char v4 = 0;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v11, "epsilon");
            int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v11);
            if (v3)
            {
              char v4 = 0;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v9, "post_process");
              int v3 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v9);
              char v4 = v3 ^ 1;
              if (v10 < 0) {
                operator delete(v9[0]);
              }
            }
            if (v12 < 0) {
              operator delete(v11[0]);
            }
          }
          if (v14 < 0) {
            operator delete(v13[0]);
          }
        }
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    if (v21 < 0) {
      operator delete(v19);
    }
  }
  if (v24 < 0)
  {
    operator delete(v22);
    if (v4) {
      goto LABEL_36;
    }
LABEL_41:
    unint64_t v7 = (ZinMirHoistLayersinPEEW *)ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose((ZinMirHoistLayersinPEEW *)v3, a2);
    if ((v7 & 1) != 0
      || (uint64_t v8 = (ZinMirHoistLayersinPEEW *)ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(v7, a2),
          (v8 & 1) != 0))
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(v8, a2);
    }
    goto LABEL_37;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_36:
  uint64_t v5 = 0;
LABEL_37:
  if (v25) {
    operator delete(v25);
  }
  return v5;
}

void sub_21118E718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v38 - 65) < 0) {
    operator delete(*(void **)(v38 - 88));
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  char v40 = *(void **)(v38 - 40);
  if (v40) {
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "pre_reduction_transpose");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)&__p, &v47);
  if (v45 < 0) {
    operator delete(__p);
  }
  int v3 = v48;
  if (v48 == v47 || (v4 = *v47, FirstMatch = ZinPattern::GetFirstMatch(a2), int v3 = v47, v4 == (ZinIrOpLayer *)FirstMatch))
  {
    uint64_t v8 = 0;
    if (!v3) {
      return v8;
    }
LABEL_10:
    char v48 = v3;
    operator delete(v3);
    return v8;
  }
  if (v47 == v48)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v3);
      v6 |= ZinIrTransposeInfo::HasDimension(ReshapeInfo, 4);
      ++v3;
    }
    while (v3 != v48);
  }
  GetSwappablePreOps(a2, &__p);
  UpdateTransposedDimInfo(&v47, (uint64_t **)&__p, (uint64_t)v46);
  char v10 = (uint64_t ***)__p;
  uint64_t v11 = v44;
  if (__p != v44)
  {
    do
    {
      uint64_t v42 = 0;
      uint64_t v42 = *v10;
      uint64_t InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v42, 0);
      long long v13 = *(_OWORD *)(InputTensor + 64);
      *(_OWORD *)char v39 = *(_OWORD *)(InputTensor + 48);
      long long v40 = v13;
      uint64_t v41 = *(void *)(InputTensor + 80);
      v33[0] = &v42;
      char v14 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v46, &v42, (uint64_t)&std::piecewise_construct, (void **)v33);
      ZinIrBroadcastInfo::ZinIrBroadcastInfo(v36, v14 + 3);
      ZinIrBroadcastInfo::ComputeInputDimensions((uint64_t)v36, (ZinTensorDimensions *)v39);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v39;
      long long v34 = v40;
      uint64_t v35 = v41;
      ZinIrBroadcastInfo::ComputeOutputDimensions((uint64_t)v36, (ZinTensorDimensions *)v33);
      Hal = ZinIrTarget::GetHal(v42[2], (ZinIrTarget *)v42[2][20]);
      char v16 = (void *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
      BOOL valid = IsValidTensorDims((unint64_t *)v33, v16);
      v36[0] = &unk_26C34BCF8;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v37);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v36);
      if (!valid) {
        goto LABEL_36;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "scaled_ew");
    if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36))
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "scaled_ew");
      uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v39);
      BOOL v19 = *(void *)(SingleMatch + 96) - *(void *)(SingleMatch + 88) == 16;
      if (SBYTE7(v40) < 0) {
        operator delete(v39[0]);
      }
    }
    else
    {
      BOOL v19 = 0;
    }
    if ((SBYTE7(v37) & 0x80000000) == 0)
    {
      if (!v19) {
        goto LABEL_69;
      }
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(v36, "broadcast1");
      if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36))
      {
        char v20 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v39, "broadcast2");
        if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v39))
        {
          char v20 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v33, "reduction");
          char v20 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v33) ^ 1;
          if (SBYTE7(v34) < 0) {
            operator delete(v33[0]);
          }
        }
        if (SBYTE7(v40) < 0) {
          operator delete(v39[0]);
        }
      }
      if (SBYTE7(v37) < 0) {
        operator delete(v36[0]);
      }
      if (v20) {
        goto LABEL_36;
      }
      std::string::basic_string[abi:ne180100]<0>(v36, "reduction");
      if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36))
      {
        BOOL v21 = 0;
        goto LABEL_48;
      }
      std::string::basic_string[abi:ne180100]<0>(v39, "broadcast1");
      unsigned __int8 v22 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v39);
      if ((v22 & 1) != 0
        || (std::string::basic_string[abi:ne180100]<0>(v33, "broadcast2"),
            ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v33)))
      {
        uint64_t v23 = ZinIrOpLayer::GetInputTensor(*v47, 0);
        BOOL v21 = !IsVector((const ZinTensorDimensions *)(v23 + 48));
        if (v22)
        {
LABEL_46:
          if (SBYTE7(v40) < 0) {
            operator delete(v39[0]);
          }
LABEL_48:
          if (SBYTE7(v37) < 0) {
            operator delete(v36[0]);
          }
          if (v21)
          {
            std::string::basic_string[abi:ne180100]<0>(v36, "broadcast1");
            unsigned int v24 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36);
            if (SBYTE7(v37) < 0) {
              operator delete(v36[0]);
            }
            if (v24)
            {
              std::string::basic_string[abi:ne180100]<0>(v36, "broadcast1");
              float v25 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v36);
              if (SBYTE7(v37) < 0) {
                operator delete(v36[0]);
              }
              uint64_t v26 = ZinIrOpLayer::GetInputTensor(v25, 0);
              long long v27 = *(_OWORD *)(v26 + 64);
              *(_OWORD *)unint64_t v36 = *(_OWORD *)(v26 + 48);
              long long v37 = v27;
              uint64_t v38 = *(void *)(v26 + 80);
              unsigned int v24 = IsVector((const ZinTensorDimensions *)v36);
            }
            std::string::basic_string[abi:ne180100]<0>(v36, "broadcast2");
            unsigned int v28 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36);
            if (SBYTE7(v37) < 0) {
              operator delete(v36[0]);
            }
            if (v28)
            {
              std::string::basic_string[abi:ne180100]<0>(v36, "broadcast2");
              char v29 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)v36);
              if (SBYTE7(v37) < 0) {
                operator delete(v36[0]);
              }
              uint64_t v30 = ZinIrOpLayer::GetInputTensor(v29, 0);
              long long v31 = *(_OWORD *)(v30 + 64);
              *(_OWORD *)unint64_t v36 = *(_OWORD *)(v30 + 48);
              long long v37 = v31;
              uint64_t v38 = *(void *)(v30 + 80);
              if (((IsVector((const ZinTensorDimensions *)v36) | v24) & 1) == 0) {
                goto LABEL_36;
              }
            }
            else if (!v24)
            {
              goto LABEL_36;
            }
          }
          if (*(uint64_t *)((*(uint64_t (**)(void, void, void))(*(void *)*(v48 - 1) + 32))(*(v48 - 1), 0, 0)+ 64) > 1)goto LABEL_69; {
          std::string::basic_string[abi:ne180100]<0>(v36, "reduction");
          }
          unsigned __int8 v32 = ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v36);
          if (SBYTE7(v37) < 0) {
            operator delete(v36[0]);
          }
          if (v32) {
            goto LABEL_69;
          }
LABEL_36:
          uint64_t v8 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        BOOL v21 = 0;
      }
      if (SBYTE7(v34) < 0) {
        operator delete(v33[0]);
      }
      goto LABEL_46;
    }
    operator delete(v36[0]);
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_69:
  uint64_t v8 = 1;
LABEL_70:
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v46);
  if (__p)
  {
    int v44 = (uint64_t ***)__p;
    operator delete(__p);
  }
  int v3 = v47;
  if (v47) {
    goto LABEL_10;
  }
  return v8;
}

void sub_21118EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::pair<std::vector<ZinBroadcastLayer *>,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>::~pair((uint64_t)&a39);
  char v46 = *(void **)(v44 - 120);
  if (v46)
  {
    *(void *)(v44 - 112) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&__p);
  char v4 = (ZinMirHoistLayersinPEEW *)SingleMatch;
  if (v19 < 0)
  {
    operator delete(__p);
    if (!v4) {
      return 0;
    }
  }
  else if (!SingleMatch)
  {
    return 0;
  }
  if (v4 != (ZinMirHoistLayersinPEEW *)(*(uint64_t (**)(const ZinPattern *))(*(void *)a2 + 56))(a2))
  {
    uint64_t DimSet = ZinMirHoistLayersinPEEW::CreateDimSet(v4, v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
    uint64_t MatchGroupIndex = ZinPattern::GetMatchGroupIndex((uint64_t)a2, (unsigned __int8 *)&__p);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (MatchGroupIndex != -1)
    {
      unint64_t v8 = MatchGroupIndex + 1;
      if (v8 >= ZinPattern::MatchGroupCount(a2)) {
        return 1;
      }
      while (1)
      {
        ZinPattern::GetMatch(a2, v8, &__p);
        char v10 = (ZinMirHoistLayersinPEEW **)__p;
        uint64_t v11 = v18;
        if (__p != v18) {
          break;
        }
LABEL_14:
        if (v10)
        {
          char v18 = v10;
          operator delete(v10);
        }
        ++v8;
        unint64_t matched = ZinPattern::MatchGroupCount(a2);
        uint64_t result = 1;
        if (v8 >= matched) {
          return result;
        }
      }
      while (1)
      {
        uint64_t v12 = ZinMirHoistLayersinPEEW::CreateDimSet(*v10, v9);
        uint64_t v15 = 0;
        uint64_t v16 = v12 & DimSet;
        if ((std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(&v16, 0, (uint64_t)&v16, 5u, &v15) & 1) == 0) {
          break;
        }
        if (++v10 == v11)
        {
          char v10 = (ZinMirHoistLayersinPEEW **)__p;
          goto LABEL_14;
        }
      }
      if (__p)
      {
        char v18 = (ZinMirHoistLayersinPEEW **)__p;
        operator delete(__p);
      }
    }
  }
  return 0;
}

void sub_21118F100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "activations1");
  if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)v7))
  {
    uint64_t v3 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "activations2");
    uint64_t v3 = (uint64_t)ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v3;
}

void sub_21118F1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void GetSwappablePreOps(const ZinPattern *a1@<X0>, void *a2@<X8>)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast1");
  unsigned int v4 = ZinPattern::HasMatched((uint64_t)a1, (unsigned __int8 *)__p);
  unsigned int v5 = v4;
  if (SBYTE7(v40) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      goto LABEL_23;
    }
  }
  else if (!v4)
  {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast1");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  uint64_t v7 = SingleMatch;
  char v8 = v43;
  if ((unint64_t)v43 >= v44)
  {
    uint64_t v10 = ((char *)v43 - (unsigned char *)v42) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = (uint64_t)(v44 - (void)v42) >> 2;
    if (v11 <= v10 + 1) {
      unint64_t v11 = v10 + 1;
    }
    if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v12);
    }
    else {
      long long v13 = 0;
    }
    char v14 = (uint64_t *)&v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    *char v14 = v7;
    int v9 = v14 + 1;
    unint64_t v17 = (char *)v42;
    uint64_t v16 = (char *)v43;
    if (v43 != v42)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--char v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)v42;
    }
    uint64_t v42 = v14;
    uint64_t v43 = v9;
    unint64_t v44 = (unint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v43 = SingleMatch;
    int v9 = v8 + 1;
  }
  uint64_t v43 = v9;
  if (SBYTE7(v40) < 0) {
    operator delete(__p[0]);
  }
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast2");
  unsigned int v19 = ZinPattern::HasMatched((uint64_t)a1, (unsigned __int8 *)__p);
  unsigned int v20 = v19;
  if (SBYTE7(v40) < 0)
  {
    operator delete(__p[0]);
    if (!v20) {
      goto LABEL_45;
    }
  }
  else if (!v19)
  {
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast2");
  uint64_t v21 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  uint64_t v22 = v21;
  uint64_t v23 = v43;
  if ((unint64_t)v43 >= v44)
  {
    uint64_t v25 = ((char *)v43 - (unsigned char *)v42) >> 3;
    if ((unint64_t)(v25 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = (uint64_t)(v44 - (void)v42) >> 2;
    if (v26 <= v25 + 1) {
      unint64_t v26 = v25 + 1;
    }
    if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27) {
      unsigned int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v27);
    }
    else {
      unsigned int v28 = 0;
    }
    char v29 = (uint64_t *)&v28[8 * v25];
    uint64_t v30 = &v28[8 * v27];
    *char v29 = v22;
    unsigned int v24 = v29 + 1;
    unsigned __int8 v32 = (char *)v42;
    long long v31 = (char *)v43;
    if (v43 != v42)
    {
      do
      {
        uint64_t v33 = *((void *)v31 - 1);
        v31 -= 8;
        *--char v29 = v33;
      }
      while (v31 != v32);
      long long v31 = (char *)v42;
    }
    uint64_t v42 = v29;
    uint64_t v43 = v24;
    unint64_t v44 = (unint64_t)v30;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *uint64_t v43 = v21;
    unsigned int v24 = v23 + 1;
  }
  uint64_t v43 = v24;
  if (SBYTE7(v40) < 0) {
    operator delete(__p[0]);
  }
LABEL_45:
  *(_OWORD *)std::string __p = 0u;
  long long v40 = 0u;
  int v41 = 1065353216;
  long long v34 = (uint64_t *)v42;
  uint64_t v35 = v43;
  if (v42 != v43)
  {
    do
    {
      uint64_t v38 = *v34;
      uint64_t v36 = *(void *)(v38 + 64);
      char v45 = &v38;
      long long v37 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)__p, &v38, (uint64_t)&std::piecewise_construct, &v45);
      if (v37 + 3 != (void *)(v36 + 16))
      {
        *((_DWORD *)v37 + 14) = *(_DWORD *)(v36 + 48);
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v37 + 3, *(uint64_t **)(v36 + 32), 0);
      }
      ++v34;
    }
    while (v34 != v35);
  }
  std::pair<std::vector<ZinBroadcastLayer *>,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>::pair[abi:ne180100]<std::vector<ZinBroadcastLayer *>&,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>&,0>(a2, (uint64_t)&v42, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)__p);
  if (v42)
  {
    uint64_t v43 = (uint64_t *)v42;
    operator delete(v42);
  }
}

void sub_21118F534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void UpdateTransposedDimInfo(ZinReshapeLayer ***a1, uint64_t **a2, uint64_t a3)
{
  unsigned int v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      uint64_t v7 = *a2;
      char v6 = a2[1];
      if (*a2 != v6)
      {
        do
        {
          uint64_t v26 = 0;
          uint64_t v26 = *v7;
          uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v4);
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          std::string __p = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(ReshapeInfo + 16), *(void *)(ReshapeInfo + 24), (uint64_t)(*(void *)(ReshapeInfo + 24) - *(void *)(ReshapeInfo + 16)) >> 3);
          v21[0] = &v26;
          int v9 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>(a3, &v26, (uint64_t)&std::piecewise_construct, v21);
          unint64_t v27 = &v26;
          uint64_t v10 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>(a3, &v26, (uint64_t)&std::piecewise_construct, &v27);
          std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)v21, (uint64_t)(v10 + 3));
          unint64_t v12 = (int *)__p;
          unint64_t v11 = v24;
          if (__p != v24)
          {
            long long v13 = v9 + 3;
            do
            {
              if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, v12))
              {
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__erase_unique<ZinIrDimension>(v21, v12);
              }
              v12 += 2;
            }
            while (v12 != v11);
            uint64_t v15 = (char *)__p;
            char v14 = v24;
            while (v15 != (char *)v14)
            {
              if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)v15))
              {
                uint64_t v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)v15);
                if (!v16) {
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                }
                uint64_t v17 = v16[3];
                unint64_t v27 = (uint64_t *)(v15 + 4);
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v21, (int *)v15 + 1, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)[3] = v17;
              }
              v15 += 8;
            }
          }
          unint64_t v27 = &v26;
          uint64_t v18 = std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>(a3, &v26, (uint64_t)&std::piecewise_construct, &v27);
          if (v18 + 3 != v21)
          {
            *((_DWORD *)v18 + 14) = v22;
            std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v18 + 3, v21[2], 0);
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v21);
          if (__p)
          {
            unsigned int v24 = (int *)__p;
            operator delete(__p);
          }
          ++v7;
        }
        while (v7 != v6);
        uint64_t v3 = a1[1];
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

void sub_21118F79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<ZinBroadcastLayer *>,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>::~pair(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table(a1 + 24);
  unint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ZinMirHoistLayersinPEEW::CreateDimSet(ZinMirHoistLayersinPEEW *this, const ZinIrOpLayer *a2)
{
  uint64_t v2 = *((void *)this + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3 == 18)
  {
    char v8 = *(uint64_t **)(v2 + 32);
    if (v8)
    {
      uint64_t result = 0;
      while (1)
      {
        unsigned int v9 = *((_DWORD *)v8 + 4);
        if (v9 >= 5) {
          break;
        }
        result |= 1 << v9;
        char v8 = (uint64_t *)*v8;
        if (!v8) {
          return result;
        }
      }
LABEL_14:
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    }
  }
  else if (v3 == 37)
  {
    uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(this);
    unsigned int v5 = *(_DWORD **)(ReshapeInfo + 16);
    char v6 = *(_DWORD **)(ReshapeInfo + 24);
    if (v5 != v6)
    {
      uint64_t result = 0;
      while (*v5 < 5u)
      {
        result |= 1 << *v5;
        v5 += 2;
        if (v5 == v6) {
          return result;
        }
      }
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL ZinMirHoistLayersinPEEW::Hoist(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  if (ZinMirHoistLayersinPEEW::AnalyzeHoistActivations(this, a2)
    && (ZinMirHoistLayersinPEEW::HoistActivations(this, a2, a3) & 1) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinMirHoistLayersinPEEW::Hoist(result, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pre_reduction_transpose");
  if (ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p))
  {
    char v6 = ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(this, a2, a3);
    char v7 = v6;
    if (v33 < 0)
    {
      operator delete(__p[0]);
      if ((v7 & 1) == 0)
      {
LABEL_18:
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ZinMirHoistLayersinPEEW::Hoist(result, v18, v19, v20, v21, v22, v23, v24);
        return 0;
      }
    }
    else if ((v6 & 1) == 0)
    {
      goto LABEL_18;
    }
  }
  else if (v33 < 0)
  {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "post_reduction_transpose");
  if (!ZinPattern::HasMatched((uint64_t)a2, (unsigned __int8 *)__p))
  {
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  char v16 = ZinMirHoistLayersinPEEW::HoistPostReductionTranspose(this, a2, a3);
  char v17 = v16;
  if ((v33 & 0x80000000) == 0)
  {
    if ((v16 & 1) == 0) {
      goto LABEL_22;
    }
    return 1;
  }
  operator delete(__p[0]);
  if (v17) {
    return 1;
  }
LABEL_22:
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  ZinMirHoistLayersinPEEW::Hoist(result, v25, v26, v27, v28, v29, v30, v31);
  return 0;
}

void sub_21118FA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistActivations(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  v13[0] = &v15;
  v13[1] = this;
  void v13[2] = &v14;
  std::string::basic_string[abi:ne180100]<0>(v11, "broadcast1");
  std::string::basic_string[abi:ne180100]<0>(v9, "activations1");
  if (ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()((uint64_t)v13, (unsigned __int8 *)v11, (unsigned __int8 *)v9))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "broadcast2");
    std::string::basic_string[abi:ne180100]<0>(__p, "activations2");
    uint64_t v3 = ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()((uint64_t)v13, (unsigned __int8 *)v7, (unsigned __int8 *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v3;
}

void sub_21118FB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (!ZinMirHoistLayersinPEEW::AnalyzePreReductionTranspose(this, a2)) {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "scaled_ew");
  uint64_t SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v60);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "goc");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)&v60, &v58);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "abs_or_zero_compare");
  char v7 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v60);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "pre_reduction_transpose");
  ZinPattern::GetMatch((uint64_t)a2, (unsigned __int8 *)&v60, &__p);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "prescale1");
  char v8 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&v60);
  if (SHIBYTE(v61) < 0)
  {
    operator delete((void *)v60);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else if (!v7)
  {
    goto LABEL_19;
  }
  for (uint64_t i = (ZinIrOpLayer **)__p; i != v57; ++i)
  {
    if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, v7, *i, 1) & 1) == 0) {
      goto LABEL_38;
    }
  }
LABEL_19:
  uint64_t v11 = (ZinIrOpLayer **)v58;
  char v12 = v59;
  if (v59 == v58)
  {
LABEL_26:
    if (SingleMatch)
    {
      for (uint64_t j = (ZinIrOpLayer **)__p; j != v57; ++j)
      {
        if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, SingleMatch, *j, 1) & 1) == 0) {
          goto LABEL_38;
        }
      }
    }
    if (v8)
    {
      char v17 = (ZinIrOpLayer **)__p;
      char v16 = v57;
      while (v17 != v16)
      {
        uint64_t v18 = (ZinIrOpLayer *)**((void **)v8 + 14);
        if (*(_DWORD *)(*((void *)v18 + 8) + 8) == 37)
        {
          if (!ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, v8, v18, 1)) {
            goto LABEL_38;
          }
          char v16 = v57;
        }
        ++v17;
      }
    }
    GetSwappablePreOps(a2, &v53);
    if (v54 == v53)
    {
LABEL_83:
      uint64_t v9 = 1;
    }
    else
    {
      UpdateTransposedDimInfo((ZinReshapeLayer ***)&__p, (uint64_t **)&v53, (uint64_t)v55);
      uint64_t v21 = (ZinIrOpLayer **)__p;
      uint64_t v20 = v57;
      while (1)
      {
        if (v21 == v20)
        {
          if (v53 != v54)
          {
            char v52 = 0;
            char v52 = *(ZinIrOpLayer **)v53;
            *(void *)&long long v60 = &v52;
            std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v55, &v52, (uint64_t)&std::piecewise_construct, (void **)&v60);
            char v33 = v52;
            if (*((char *)v52 + 47) >= 0) {
              size_t v34 = *((unsigned __int8 *)v52 + 47);
            }
            else {
              size_t v34 = *((void *)v52 + 4);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v45, v34 + 1);
            if ((SBYTE7(v46) & 0x80u) == 0) {
              uint64_t v35 = v45;
            }
            else {
              uint64_t v35 = (void **)v45[0];
            }
            if (v34)
            {
              if (*((char *)v33 + 47) >= 0) {
                uint64_t v36 = (char *)v33 + 24;
              }
              else {
                uint64_t v36 = (const void *)*((void *)v33 + 3);
              }
              memmove(v35, v36, v34);
            }
            *(_WORD *)((char *)v35 + v34) = 95;
            std::string::basic_string[abi:ne180100]<0>(&v48, "hoist_swap_bcast");
            long long v37 = std::string::append(&v48, "_xfm", 4uLL);
            long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
            int64_t v50 = v37->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v49 = v38;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            if (v50 >= 0) {
              char v39 = v49;
            }
            else {
              char v39 = (void **)v49[0];
            }
            if (v50 >= 0) {
              std::string::size_type v40 = HIBYTE(v50);
            }
            else {
              std::string::size_type v40 = (std::string::size_type)v49[1];
            }
            int v41 = std::string::append((std::string *)v45, (const std::string::value_type *)v39, v40);
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            std::string::size_type v61 = v41->__r_.__value_.__r.__words[2];
            long long v60 = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            ZinObjectNameFactory::ZinObjectNameFactory(&v51, &v60);
            if (SHIBYTE(v61) < 0) {
              operator delete((void *)v60);
            }
            if (SHIBYTE(v50) < 0) {
              operator delete(v49[0]);
            }
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v46) < 0) {
              operator delete(v45[0]);
            }
            uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(v52, 0);
            long long v44 = *(_OWORD *)(InputTensor + 64);
            *(_OWORD *)char v45 = *(_OWORD *)(InputTensor + 48);
            long long v46 = v44;
            uint64_t v47 = *(void *)(InputTensor + 80);
            *(void *)&long long v60 = &v52;
            std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>((uint64_t)v55, &v52, (uint64_t)&std::piecewise_construct, (void **)&v60);
            operator new();
          }
          goto LABEL_83;
        }
        uint64_t v22 = (ZinIrOpLayer **)v53;
        uint64_t v23 = v54;
        if (v53 != v54) {
          break;
        }
LABEL_52:
        ++v21;
      }
      while (1)
      {
        uint64_t v24 = (ZinIrOpLayer *)**((void **)*v22 + 14);
        if (*(_DWORD *)(*((void *)v24 + 8) + 8) == 37
          && (ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, *v22, v24, 0) & 1) == 0)
        {
          break;
        }
        if (++v22 == v23)
        {
          uint64_t v20 = v57;
          goto LABEL_52;
        }
      }
      BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v25) {
        ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      uint64_t v9 = 0;
    }
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)v55);
    if (v53)
    {
      unint64_t v54 = (ZinIrOpLayer **)v53;
      operator delete(v53);
    }
  }
  else
  {
    uint64_t v13 = v57;
    while (1)
    {
      uint64_t v14 = (ZinIrOpLayer **)__p;
      if (__p != v13) {
        break;
      }
LABEL_25:
      if (--v12 == v11) {
        goto LABEL_26;
      }
    }
    while ((ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, *(v12 - 1), *v14, 1) & 1) != 0)
    {
      if (++v14 == v57)
      {
        uint64_t v11 = (ZinIrOpLayer **)v58;
        uint64_t v13 = v14;
        goto LABEL_25;
      }
    }
LABEL_38:
    uint64_t v9 = 0;
  }
  if (__p)
  {
    char v57 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  if (v58)
  {
    char v59 = (ZinIrOpLayer **)v58;
    operator delete(v58);
  }
  return v9;
}

void sub_2111902B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (__p)
  {
    a48 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirHoistLayersinPEEW::HoistPostReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  if (!ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(this, a2)) {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  uint64_t SingleMatch = (ZinMirHoistLayersinPEEW *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&__p);
  if (v22 < 0) {
    operator delete(__p);
  }
  uint64_t DimSet = ZinMirHoistLayersinPEEW::CreateDimSet(SingleMatch, v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  uint64_t MatchGroupIndex = ZinPattern::GetMatchGroupIndex((uint64_t)a2, (unsigned __int8 *)&__p);
  if (v22 < 0) {
    operator delete(__p);
  }
  if (MatchGroupIndex != -1)
  {
    unint64_t v10 = MatchGroupIndex + 1;
    if (v10 < ZinPattern::MatchGroupCount(a2))
    {
      while (1)
      {
        ZinPattern::GetMatch(a2, v10, &__p);
        char v12 = (ZinMirHoistLayersinPEEW **)__p;
        uint64_t v13 = v21;
        if (__p != v21) {
          break;
        }
LABEL_13:
        if (v12)
        {
          uint64_t v21 = v12;
          operator delete(v12);
        }
        ++v10;
        unint64_t matched = ZinPattern::MatchGroupCount(a2);
        uint64_t result = 1;
        if (v10 >= matched) {
          return result;
        }
      }
      while (1)
      {
        uint64_t v14 = *v12;
        uint64_t v15 = ZinMirHoistLayersinPEEW::CreateDimSet(*v12, v11);
        uint64_t v18 = 0;
        uint64_t v19 = v15 & DimSet;
        if (std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(&v19, 0, (uint64_t)&v19, 5u, &v18))
        {
          if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, SingleMatch, v14, 0) & 1) == 0) {
            break;
          }
        }
        if (++v12 == v13)
        {
          char v12 = (ZinMirHoistLayersinPEEW **)__p;
          goto LABEL_13;
        }
      }
      if (__p)
      {
        uint64_t v21 = (ZinMirHoistLayersinPEEW **)__p;
        operator delete(__p);
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

void sub_211190634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v6 = *(ZinMirHoist **)(a1 + 8);
  if (!ZinPattern::HasMatched(**(void **)a1, a3)) {
    return 1;
  }
  uint64_t SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(**(void **)a1, a2);
  ZinPattern::GetMatch(**(void **)a1, a3, &v12);
  char v8 = v12;
  uint64_t v9 = v13;
  int v10 = 1;
  if (v12 != v13)
  {
    do
    {
      if (SingleMatch) {
        v10 &= ZinMirHoist::SwapLayersAndUpdateTensorDims(v6, **(ZinIrOpLayerGraph ***)(a1 + 16), SingleMatch, *v8, 1);
      }
      ++v8;
    }
    while (v8 != v9);
    char v8 = v12;
  }
  if (v8)
  {
    uint64_t v13 = v8;
    operator delete(v8);
  }
  return v10 & 1;
}

void sub_211190748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(void **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    char v6 = *(uint64_t **)a1;
    do
    {
      uint64_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1 = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(void **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

void *std::pair<std::vector<ZinBroadcastLayer *>,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>::pair[abi:ne180100]<std::vector<ZinBroadcastLayer *>&,std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>&,0>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>::unordered_map((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_2111908E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::pair<ZinBroadcastLayer * const,std::unordered_map<ZinIrDimension,unsigned long>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_211190960(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::pair<ZinBroadcastLayer * const,std::unordered_map<ZinIrDimension,unsigned long>> const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    int v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__construct_node_hash<std::pair<ZinBroadcastLayer * const,std::unordered_map<ZinIrDimension,unsigned long>> const&>(a1, v7, a3, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22, 0);
  return v11;
}

void sub_211190BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__construct_node_hash<std::pair<ZinBroadcastLayer * const,std::unordered_map<ZinIrDimension,unsigned long>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  void v8[2] = *a3;
  uint64_t result = std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)(v8 + 3), (uint64_t)(a3 + 1));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_211190C5C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3861D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C3861D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (ZinPatternUtils::IsFusable(*(void **)(a1 + 8), *(void *)(a2 + 8))
    && (uint64_t v3 = *(ZinIrOpLayer **)(a2 + 8), *(_DWORD *)(*((void *)v3 + 8) + 8) == 37))
  {
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (ZinIrOpLayer::IsNoOp(v3, (uint64_t *)&__p)) {
      BOOL v4 = *(void *)((*(uint64_t (**)(void, void, void))(**(void **)(a2 + 8) + 32))(*(void *)(a2 + 8), 0, 0)+ 104) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (__p)
    {
      uint64_t v7 = __p;
      operator delete(__p);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  return v4 | 0x100u;
}

void sub_211190DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C386180;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C386180;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v4 = ZinPatternUtils::IsFusable(*(void **)(a1 + 8), *(void *)(a2 + 8))
    && (uint64_t v3 = *(void **)(a2 + 8), *(_DWORD *)(v3[8] + 8) == 37)
    && *(void *)((*(uint64_t (**)(void *, void, void))(*v3 + 32))(v3, 0, 0) + 104) == 0;
  return v4 | 0x100u;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C383528;
  return result;
}

void std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C383528;
}

uint64_t std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 4) | 0x100u;
}

uint64_t std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void *std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  unint64_t v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  float v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_2111912F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void ZinMirHoistLayersinPEEW::Hoist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: HoistPreReductionTranspose() failed", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: HoistActivations() failed", a5, a6, a7, a8, 0);
}

void ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrPEPoolUnit::ZinIrPEPoolUnit(ZinIrPEPoolUnit *this, const ZinIrPEPoolUnitInfo *a2)
{
  ZinIrPEUnit::ZinIrPEUnit(this, a2);
  *unint64_t v4 = &unk_26C348B30;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)(v4 + 130), a2);
  *((void *)this + 130) = &unk_26C34CEE8;
  *((void *)this + 251) = &unk_26C345B80;
  if (*((char *)a2 + 999) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 84, *((const std::string::value_type **)a2 + 122), *((void *)a2 + 123));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 61);
    *((void *)this + 254) = *((void *)a2 + 124);
    *((_OWORD *)this + 126) = v5;
  }
  *((_DWORD *)this + 510) = *((_DWORD *)a2 + 250);
  *((void *)this + 256) = 0;
  *((void *)this + 258) = 0;
  *((void *)this + 257) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 2048), *((long long **)a2 + 126), *((long long **)a2 + 127), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 127) - *((void *)a2 + 126)) >> 3));
  *(_OWORD *)((char *)this + 2072) = *(_OWORD *)((char *)a2 + 1032);
  *((void *)this + 251) = &unk_26C34AB58;
  long long v6 = *(_OWORD *)((char *)a2 + 1064);
  *(_OWORD *)((char *)this + 2088) = *(_OWORD *)((char *)a2 + 1048);
  *(_OWORD *)((char *)this + 2104) = v6;
  long long v7 = *(_OWORD *)((char *)a2 + 1080);
  long long v8 = *(_OWORD *)((char *)a2 + 1096);
  long long v9 = *(_OWORD *)((char *)a2 + 1112);
  *((_DWORD *)this + 542) = *((_DWORD *)a2 + 282);
  *(_OWORD *)((char *)this + 2136) = v8;
  *(_OWORD *)((char *)this + 2152) = v9;
  *(_OWORD *)((char *)this + 2120) = v7;
}

void sub_21119155C(_Unwind_Exception *a1)
{
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEPoolUnit::TensorDimensions(ZinIrPEPoolUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4, float a5)
{
  std::string __p = 0;
  float v13 = 0;
  uint64_t v14 = 0;
  ZinIrPoolUnit::ZinIrPoolUnit(v15, (char *)this + 2008, &__p, a5);
  if (__p)
  {
    float v13 = __p;
    operator delete(__p);
  }
  ZinIrUnit::SetBottomInfo((uint64_t)v15, (uint64_t)this + 8);
  ZinIrPoolUnit::TensorDimensions((ZinIrPoolUnit *)v15, a2, a3, a4);
  uint64_t v10 = v9;
  v15[0] = &unk_26C3457A0;
  ZinIrUnitInfo::~ZinIrUnitInfo(&v16);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v15);
  return v10;
}

void sub_211191660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrPEPoolUnit::CreateLayer()
{
}

void sub_211191850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  MEMORY[0x21667D3C0](v16, 0x10B3C40D0B38099);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_2111918C4()
{
  uint64_t v2 = *(void **)(v1 - 120);
  if (v2)
  {
    *(void *)(v1 - 112) = v2;
    operator delete(v2);
  }
  MEMORY[0x21667D3C0](v0, 0x10B3C402A538098);
  JUMPOUT(0x2111918BCLL);
}

uint64_t ZinIrPEPoolUnit::CreateKernel(ZinIrPEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  if (a5) {
    ZinAssertImpl("PEPool does not support Espresso scale & bias format", a2, a3, a4, a5, a6, a7, v7, v8);
  }
  return ZinIrPEUnit::CreateCommonSubKernels(a1, a2, a3, a4, a7);
}

void ZinIrPEPoolUnit::~ZinIrPEPoolUnit(ZinIrPEPoolUnit *this)
{
  ZinIrPEPoolUnit::~ZinIrPEPoolUnit(this);

  JUMPOUT(0x21667D3C0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26C348B30;
  uint64_t v2 = (void **)((char *)this + 1040);
  *((void *)this + 130) = &unk_26C34CEE8;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 251);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);

  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)this);
}

void ZinIrPEPoolUnitInfo::~ZinIrPEPoolUnitInfo(void **this)
{
  *this = &unk_26C34CEE8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);

  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
}

{
  uint64_t vars8;

  *this = &unk_26C34CEE8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

__CFArray *CreateSinglePlaneLinearLiveIOAttributes(void *a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a1 + 1);
  long long v5 = (void **)*a1;
  if ((void *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    uint8x8_t v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        unint64_t v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        float v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0) {
          float v13 = *(char **)v13;
        }
        SinglePlaneLinearLiveIOAttributeDict = CreateSinglePlaneLinearLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        if (!SinglePlaneLinearLiveIOAttributeDict) {
          ZinAssertImpl("CreateSinglePlaneLinearLiveIOAttributeDict failed");
        }
        uint64_t v15 = SinglePlaneLinearLiveIOAttributeDict;
        CFArrayAppendValue(Mutable, SinglePlaneLinearLiveIOAttributeDict);
        CFRelease(v15);
        uint64_t v16 = (void **)v11[1];
        if (v16)
        {
          do
          {
            float v17 = v16;
            uint64_t v16 = (void **)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            float v17 = (void **)v11[2];
            BOOL v9 = *v17 == v11;
            uint8x8_t v11 = v17;
          }
          while (!v9);
        }
        uint8x8_t v11 = v17;
      }
      while (v17 != v4);
    }
  }
  else
  {
    long long v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      uint64_t v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v5[2];
          BOOL v9 = *v8 == v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      long long v5 = v8;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    return 0;
  }
  return Mutable;
}

__CFArray *CreateSinglePlaneCircularLiveIOAttributes(void *a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a1 + 1);
  long long v5 = (void **)*a1;
  if ((void *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    uint8x8_t v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        unint64_t v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        float v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0) {
          float v13 = *(char **)v13;
        }
        SinglePlaneCircularLiveIOAttributeDict = CreateSinglePlaneCircularLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        CFArrayAppendValue(Mutable, SinglePlaneCircularLiveIOAttributeDict);
        CFRelease(SinglePlaneCircularLiveIOAttributeDict);
        uint64_t v15 = (void **)v11[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void **)v11[2];
            BOOL v9 = *v16 == v11;
            uint8x8_t v11 = v16;
          }
          while (!v9);
        }
        uint8x8_t v11 = v16;
      }
      while (v16 != v4);
    }
  }
  else
  {
    long long v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      uint64_t v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v5[2];
          BOOL v9 = *v8 == v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      long long v5 = v8;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    return 0;
  }
  return Mutable;
}

__CFDictionary *CreateSinglePlaneCircularLiveIOAttributeDict(uint64_t a1, char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!a2) {
    ZinAssertImpl("name can't be null");
  }
  long long v6 = Mutable;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  AddNameToLiveIOAttributeDictionary(v6, (const char *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  AddPlaneDescriptorToLiveIOAttributeDictionary(v6, a1);
  uint64_t v7 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 240));
  CFDictionaryAddValue(v6, @"LiveIOCircularBufferWrapAxis", v7);
  LODWORD(__p[0]) = *(void *)(a1 + 248);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, @"LiveIOCircularBufferSize", v8);
  CFRelease(v8);
  return v6;
}

void sub_211191E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *CreateMultiPlaneLinearLiveIOAttributes(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = (void **)(a1 + 1);
  long long v5 = (void **)*a1;
  if ((void *)*a1 == a1 + 1)
  {
LABEL_10:
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    char v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        unint64_t v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        float v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0) {
          float v13 = *(char **)v13;
        }
        MultiPlaneLinearLiveIOAttributeDict = CreateMultiPlaneLinearLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        CFArrayAppendValue(Mutable, MultiPlaneLinearLiveIOAttributeDict);
        CFRelease(MultiPlaneLinearLiveIOAttributeDict);
        uint64_t v15 = (void **)v11[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void **)v11[2];
            BOOL v9 = *v16 == v11;
            char v11 = v16;
          }
          while (!v9);
        }
        char v11 = v16;
      }
      while (v16 != v4);
    }
  }
  else
  {
    long long v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      uint64_t v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          CFNumberRef v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFNumberRef v8 = (void **)v5[2];
          BOOL v9 = *v8 == v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      long long v5 = v8;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    return 0;
  }
  return Mutable;
}

__CFDictionary *CreateMultiPlaneLinearLiveIOAttributeDict(uint64_t a1, char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!a2) {
    ZinAssertImpl("name can't be null");
  }
  long long v6 = Mutable;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  AddNameToLiveIOAttributeDictionary(v6, (const char *)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 16);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, @"4CCFormat", v7);
  CFRelease(v7);
  LODWORD(__p[0]) = *(void *)a1;
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, @"Width", v8);
  CFRelease(v8);
  LODWORD(__p[0]) = *(void *)(a1 + 8);
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  theDict = v6;
  CFDictionaryAddValue(v6, @"Height", v9);
  CFRelease(v9);
  uint64_t v10 = CFArrayCreateMutable(v4, 0, MEMORY[0x263EFFF70]);
  if (*(void *)(a1 + 32) != *(void *)(a1 + 24))
  {
    unint64_t v11 = 0;
    uint64_t v12 = 104;
    do
    {
      float v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      __p[0] = (void *)v11;
      CFNumberRef v14 = CFNumberCreate(v4, kCFNumberSInt64Type, __p);
      CFDictionaryAddValue(v13, @"PlaneID", v14);
      CFRelease(v14);
      LODWORD(__p[0]) = *(void *)(*(void *)(a1 + 24) + v12);
      CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
      CFDictionaryAddValue(v13, @"RowStride", v15);
      CFRelease(v15);
      CFArrayAppendValue(v10, v13);
      CFRelease(v13);
      ++v11;
      v12 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) > v11);
  }
  CFDictionaryAddValue(theDict, @"PlaneDescriptor", v10);
  CFRelease(v10);
  return theDict;
}

void sub_21119220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *CreateLiveInputParamAttributes(void *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFNumberRef v7 = (void *)*a1;
  long long v5 = a1 + 1;
  long long v6 = v7;
  if (v7 != v5)
  {
    do
    {
      CFNumberRef v8 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v6 + 4);
      CFNumberRef v9 = (char *)(v8 + 7);
      if (*((char *)v8 + 79) < 0) {
        CFNumberRef v9 = *(char **)v9;
      }
      LiveInputParamAttributeDict = CreateLiveInputParamAttributeDict((int *)v6 + 14, v9);
      CFArrayAppendValue(Mutable, LiveInputParamAttributeDict);
      CFRelease(LiveInputParamAttributeDict);
      unint64_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          long long v6 = v12;
        }
        while (!v13);
      }
      long long v6 = v12;
    }
    while (v12 != v5);
  }
  return Mutable;
}

__CFDictionary *CreateLiveInputParamAttributeDict(int *a1, char *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if (v11 >= 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  CFStringRef v7 = CFStringCreateWithCString(v4, (const char *)v6, 0x8000100u);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  CFDictionaryAddValue(Mutable, @"Name", v7);
  CFRelease(v7);
  CFNumberRef v8 = (const void *)ZinTensorFormatToANECFormat(*a1);
  CFDictionaryAddValue(Mutable, @"Type", v8);
  return Mutable;
}

void sub_2111923E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinBondedAne::ZinDeploymentComponentAlgorithm::Create()
{
}

uint64_t ZinIrOptOptimizeQuantizedConcat(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  std::string v75 = 0;
  if (*(void *)(*((void *)a2 + 8) + 8) == 7)
  {
    uint64_t v3 = (ZinQuantLayer **)*((void *)a2 + 14);
    if (*((void *)a2 + 15) - (void)v3 == 8)
    {
      CFAllocatorRef v4 = *v3;
      if (*(_DWORD *)(*((void *)*v3 + 8) + 8) == 103)
      {
        long long v5 = (uint64_t *)*((void *)a2 + 11);
        long long v6 = (uint64_t *)*((void *)a2 + 12);
        char v63 = *v3;
        if (v5 == v6)
        {
LABEL_27:
          uint64_t ScaleVectorSize = ZinQuantLayer::GetScaleVectorSize(v4);
          uint64_t ZeroPointVectorSize = ZinQuantLayer::GetZeroPointVectorSize(v63);
          unint64_t v23 = *(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0)+ 56);
          if ((ScaleVectorSize == 1 || ScaleVectorSize == v23)
            && (ZeroPointVectorSize == 1 || ZeroPointVectorSize == v23))
          {
            uint64_t v24 = *((void *)v63 + 17);
            ZinIrVector::GetValuesAsVector<float>(*(void *)(v24 + 568), v23, 1, (uint64_t)v73);
            uint64_t v62 = a2;
            ZinIrVector::GetValuesAsVector<float>(*(void *)(v24 + 592), v23, 1, (uint64_t)v72);
            std::string __p = 0;
            uint64_t v66 = 0;
            v67[0] = 0;
            memset(&v78, 0, sizeof(v78));
            BOOL v25 = (ZinDeQuantLayer **)v75;
            uint64_t v64 = v76;
            if (v75 == v76)
            {
              char v52 = 0;
            }
            else
            {
              unint64_t v61 = v23;
              do
              {
                uint64_t v26 = *v25;
                uint64_t v27 = *(void *)((*(uint64_t (**)(ZinDeQuantLayer *, void, void))(*(void *)*v25 + 32))(*v25, 0, 0)+ 56);
                if (v27)
                {
                  for (uint64_t i = 0; i != v27; ++i)
                  {
                    float ScalarScale = ZinDeQuantLayer::GetScalarScale(v26);
                    int ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v26);
                    uint64_t v31 = (char *)v66;
                    if ((unint64_t)v66 >= v67[0])
                    {
                      char v33 = (char *)__p;
                      int64_t v34 = ((unsigned char *)v66 - (unsigned char *)__p) >> 2;
                      unint64_t v35 = v34 + 1;
                      if ((unint64_t)(v34 + 1) >> 62) {
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v36 = v67[0] - (void)__p;
                      if ((uint64_t)(v67[0] - (void)__p) >> 1 > v35) {
                        unint64_t v35 = v36 >> 1;
                      }
                      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v37 = v35;
                      }
                      if (v37)
                      {
                        long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v67, v37);
                        char v33 = (char *)__p;
                        uint64_t v31 = (char *)v66;
                      }
                      else
                      {
                        long long v38 = 0;
                      }
                      char v39 = (float *)&v38[4 * v34];
                      *char v39 = ScalarScale;
                      uint64_t v32 = v39 + 1;
                      while (v31 != v33)
                      {
                        int v40 = *((_DWORD *)v31 - 1);
                        v31 -= 4;
                        *((_DWORD *)v39-- - 1) = v40;
                      }
                      std::string __p = v39;
                      uint64_t v66 = v32;
                      v67[0] = &v38[4 * v37];
                      if (v33) {
                        operator delete(v33);
                      }
                    }
                    else
                    {
                      *(float *)uint64_t v66 = ScalarScale;
                      uint64_t v32 = v31 + 4;
                    }
                    uint64_t v66 = v32;
                    float v41 = (float)ScalarZeroPoint;
                    std::string::size_type size = v78.__r_.__value_.__l.__size_;
                    if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
                    {
                      long long v44 = (void *)v78.__r_.__value_.__r.__words[0];
                      uint64_t v45 = (uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 2;
                      unint64_t v46 = v45 + 1;
                      if ((unint64_t)(v45 + 1) >> 62) {
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      }
                      int64_t v47 = v78.__r_.__value_.__r.__words[2] - v78.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v78.__r_.__value_.__r.__words[2] - v78.__r_.__value_.__r.__words[0]) >> 1 > v46) {
                        unint64_t v46 = v47 >> 1;
                      }
                      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v48 = v46;
                      }
                      if (v48)
                      {
                        uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v78.__r_.__value_.__r.__words[2], v48);
                        std::string::size_type size = v78.__r_.__value_.__l.__size_;
                        long long v44 = (void *)v78.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        uint64_t v49 = 0;
                      }
                      int64_t v50 = (float *)&v49[4 * v45];
                      float *v50 = v41;
                      std::string::size_type v43 = (std::string::size_type)(v50 + 1);
                      while ((void *)size != v44)
                      {
                        int v51 = *(_DWORD *)(size - 4);
                        size -= 4;
                        *((_DWORD *)v50-- - 1) = v51;
                      }
                      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
                      v78.__r_.__value_.__l.__size_ = v43;
                      v78.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49[4 * v48];
                      if (v44) {
                        operator delete(v44);
                      }
                    }
                    else
                    {
                      *(float *)v78.__r_.__value_.__l.__size_ = v41;
                      std::string::size_type v43 = size + 4;
                    }
                    v78.__r_.__value_.__l.__size_ = v43;
                  }
                }
                ++v25;
              }
              while (v25 != (ZinDeQuantLayer **)v64);
              char v52 = (float *)v78.__r_.__value_.__r.__words[0];
              unint64_t v23 = v61;
            }
            if (v23)
            {
              BOOL v53 = 0;
              uint64_t v54 = 0;
              while (*(float *)(*(void *)&v73[0] + 4 * v54) == *((float *)__p + v54))
              {
                if (*((float *)v72[0] + v54) == v52[v54])
                {
                  BOOL v53 = ++v54 >= v23;
                  if (v23 != v54) {
                    continue;
                  }
                }
                goto LABEL_79;
              }
            }
            else
            {
              BOOL v53 = 1;
            }
            if (v52)
            {
LABEL_79:
              v78.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
              operator delete(v52);
            }
            if (__p)
            {
              uint64_t v66 = __p;
              operator delete(__p);
            }
            if (v72[0])
            {
              v72[1] = v72[0];
              operator delete(v72[0]);
            }
            if (*(void *)&v73[0])
            {
              *((void *)&v73[0] + 1) = *(void *)&v73[0];
              operator delete(*(void **)&v73[0]);
            }
            if (v53)
            {
              (*(void (**)(void, void, void))(***((void ***)v62 + 14) + 32))(**((void **)v62 + 14), 0, 0);
              uint64_t v55 = (*(uint64_t (**)(void, void, void))(***((void ***)v62 + 14) + 32))(**((void **)v62 + 14), 0, 0);
              long long v56 = *(_OWORD *)(v55 + 64);
              v73[0] = *(_OWORD *)(v55 + 48);
              v73[1] = v56;
              uint64_t v74 = *(void *)(v55 + 80);
              if (*((char *)v62 + 47) >= 0) {
                size_t v57 = *((unsigned __int8 *)v62 + 47);
              }
              else {
                size_t v57 = *((void *)v62 + 4);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 30);
              if (v67[0] >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              if (v57)
              {
                if (*((char *)v62 + 47) >= 0) {
                  char v59 = (char *)v62 + 24;
                }
                else {
                  char v59 = (const void *)*((void *)v62 + 3);
                }
                memmove(p_p, v59, v57);
              }
              strcpy((char *)p_p + v57, "_opt_optimize_quantized_concat");
              ZinObjectNameFactory::ZinObjectNameFactory(v72, &__p);
              if (SHIBYTE(v67[0]) < 0) {
                operator delete(__p);
              }
              ZinObjectNameFactory::CreateName((uint64_t)v72, 0, &v78);
              uint64_t v70 = 0;
              uint64_t v71 = 0;
              uint64_t v69 = 0;
              LODWORD(__p) = 0;
              v67[0] = 0;
              v67[1] = 0;
              uint64_t v66 = 0;
              int v68 = 0;
              ZinIrTensor::CreateTensor();
            }
          }
        }
        else
        {
          while (1)
          {
            uint64_t v7 = *v5;
            if (*(_DWORD *)(*(void *)(*v5 + 64) + 8) != 104) {
              break;
            }
            CFNumberRef v8 = v76;
            if (v76 >= v77)
            {
              uint64_t v10 = (v76 - v75) >> 3;
              if ((unint64_t)(v10 + 1) >> 61) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v11 = (v77 - v75) >> 2;
              if (v11 <= v10 + 1) {
                unint64_t v11 = v10 + 1;
              }
              if ((unint64_t)(v77 - v75) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v12 = v11;
              }
              if (v12) {
                BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v77, v12);
              }
              else {
                BOOL v13 = 0;
              }
              CFNumberRef v14 = &v13[8 * v10];
              *(void *)CFNumberRef v14 = v7;
              CFNumberRef v9 = v14 + 8;
              uint64_t v16 = v75;
              CFNumberRef v15 = v76;
              if (v76 != v75)
              {
                do
                {
                  uint64_t v17 = *((void *)v15 - 1);
                  v15 -= 8;
                  *((void *)v14 - 1) = v17;
                  v14 -= 8;
                }
                while (v15 != v16);
                CFNumberRef v15 = v75;
              }
              std::string v75 = v14;
              uint64_t v76 = v9;
              unint64_t v77 = &v13[8 * v12];
              if (v15) {
                operator delete(v15);
              }
            }
            else
            {
              *(void *)uint64_t v76 = v7;
              CFNumberRef v9 = v8 + 8;
            }
            uint64_t v76 = v9;
            (*(void (**)(uint64_t, void, void))(*(void *)v7 + 32))(v7, 0, 0);
            if (++v5 == v6)
            {
              float v18 = (ZinIrOpLayer **)v75;
              CFAllocatorRef v4 = v63;
              if (v75 == v76) {
                goto LABEL_27;
              }
              while (1)
              {
                char v19 = *v18;
                int v20 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(*v18, 0) + 88);
                if (v20 != *(_DWORD *)((*(uint64_t (**)(ZinQuantLayer *, void, void))(*(void *)v63 + 32))(v63, 0, 0)+ 88)|| (ZinDeQuantLayer::IsPerCout(v19) & 1) != 0)
                {
                  goto LABEL_101;
                }
                if (++v18 == (ZinIrOpLayer **)v76) {
                  goto LABEL_27;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_101:
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  return 0;
}

void sub_211192E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  uint64_t v40 = a27;
  a27 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  a32 = &unk_26C34DA98;
  if (a38 < 0) {
    operator delete(__p);
  }
  float v41 = *(void **)(v38 - 168);
  if (v41)
  {
    *(void *)(v38 - 160) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

BOOL MirOpt::IsInvariantInputToTranspose(void *a1, uint64_t a2, int **a3)
{
  if (*(_DWORD *)(a1[8] + 8) != 81) {
    return 0;
  }
  uint64_t v5 = a1[11];
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(void *))(*a1 + 648))(a1)) {
      goto LABEL_5;
    }
LABEL_11:
    char v7 = 0;
    uint64_t v28 = 0;
    int v6 = **a3;
    goto LABEL_12;
  }
  if (a2 || ((*(uint64_t (**)(void *))(*a1 + 640))(a1) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v28 = 0;
  if (**a3 == 2) {
    int v6 = 4;
  }
  else {
    int v6 = **a3;
  }
  char v7 = 1;
LABEL_12:
  CFNumberRef v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v28, 1uLL);
  *CFNumberRef v9 = v6;
  unint64_t v11 = (char *)(v9 + 1);
  std::string __p = v9;
  uint64_t v28 = (char *)&v9[v10];
  if ((v7 & ((*a3)[1] == 2)) != 0) {
    int v12 = 4;
  }
  else {
    int v12 = (*a3)[1];
  }
  if (v11 >= v28)
  {
    CFNumberRef v14 = (char *)v9;
    uint64_t v15 = 2;
    uint64_t v16 = v28 - (char *)v9;
    if ((unint64_t)((v28 - (char *)v9) >> 1) > 2) {
      uint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v28, v17);
      CFNumberRef v14 = (char *)v9;
      unint64_t v11 = (char *)(v9 + 1);
    }
    else
    {
      float v18 = 0;
    }
    char v19 = (int *)(v18 + 4);
    int v20 = &v18[4 * v17];
    *char v19 = v12;
    BOOL v13 = (char *)(v19 + 1);
    while (v11 != v14)
    {
      int v21 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--char v19 = v21;
    }
    std::string __p = v19;
    uint64_t v28 = v20;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v9[1] = v12;
    BOOL v13 = (char *)(v9 + 2);
  }
  if (__p == (int *)v13)
  {
    BOOL v8 = 1;
LABEL_40:
    operator delete(v13);
    return v8;
  }
  size_t v22 = (char *)(__p + 1);
  do
  {
    uint64_t v23 = (*(uint64_t (**)(void, void, void))(**(void **)(v5 + 8 * a2) + 32))(*(void *)(v5 + 8 * a2), 0, 0);
    DimensionCFDictionaryRef Value = ZinIrTensor::GetDimensionValue(v23, *((_DWORD *)v22 - 1));
    BOOL v8 = DimensionValue == 1;
    BOOL v25 = DimensionValue != 1 || v22 == v13;
    v22 += 4;
  }
  while (!v25);
  BOOL v13 = (char *)__p;
  if (__p) {
    goto LABEL_40;
  }
  return v8;
}

void sub_2111932D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::PostFusionTransposeHoisting(void *a1, uint64_t a2, char a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  HIBYTE(v5) = a3;
  BYTE6(v5) = 0;
  LODWORD(v5) = ZinIrOpt::ReverseCSE(a1, a2, (unsigned char *)&v5 + 6, 2);
  if (v5) {
    ZinAssertImpl("PreOps failed", v5);
  }
  v6[0] = &unk_26C330240;
  v6[1] = (char *)&v5 + 7;
  void v6[2] = &v5;
  void v6[3] = v6;
  LODWORD(v5) = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v6, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v6);
  return 0;
}

void sub_2111933C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C330240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C330240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinTransposeLayer **a3)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  if (*(_DWORD *)(*((void *)*a3 + 8) + 8) != 37) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (!ZinTransposeLayer::IsCHTranspose(*a3)) {
    return 0;
  }
  int v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v3 + 32))(v3, 0, 0);
  unint64_t Interleave = ZinIrTensor::GetInterleave(v6);
  std::string v132 = v3;
  if (v8)
  {
    if (Interleave < 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v3 + 32))(v3, 0, 0)
                   + 104);
    if (v9)
    {
      if (*(_DWORD *)(v9 + 96)) {
        return 0;
      }
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v159 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(buf, *(const void **)(v9 + 104), *(void *)(v9 + 112), (uint64_t)(*(void *)(v9 + 112) - *(void *)(v9 + 104)) >> 2);
      DWORD2(v159) = *(_DWORD *)(v9 + 128);
      DimensionOrderHint::DimensionOrderHint(&v133, 0);
      uint64_t v10 = *(void **)buf;
      if (v134 - v133 == *(void *)&buf[8] - *(void *)buf)
      {
        if (v133 == v134)
        {
          BOOL v15 = 0;
        }
        else
        {
          unint64_t v11 = v133 + 4;
          int v12 = *(int **)buf;
          do
          {
            int v13 = *v12++;
            int v14 = *((_DWORD *)v11 - 1);
            BOOL v15 = v14 != v13;
            BOOL v16 = v14 != v13 || v11 == v134;
            v11 += 4;
          }
          while (!v16);
        }
      }
      else
      {
        BOOL v15 = 1;
      }
      if (v133)
      {
        std::string v134 = v133;
        operator delete(v133);
        uint64_t v10 = *(void **)buf;
      }
      if (v10)
      {
        *(void *)&buf[8] = v10;
        operator delete(v10);
      }
      if (v15) {
        return 0;
      }
      uint64_t v3 = v132;
      if (ZinIrTensor::MirInfo::HasCustomStrides((ZinIrTensor::MirInfo *)v9)) {
        return 0;
      }
    }
  }
  uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v3);
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  long long v155 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v155, *(const void **)(ReshapeInfo + 16), *(void *)(ReshapeInfo + 24), (uint64_t)(*(void *)(ReshapeInfo + 24) - *(void *)(ReshapeInfo + 16)) >> 3);
  uint64_t v130 = a1;
  int v133 = (char *)&v134;
  std::string v134 = 0;
  int v131 = v5;
  v137[0] = 0;
  v137[1] = 0;
  uint64_t v135 = 0;
  std::string v136 = (uint64_t *)v137;
  long long v159 = 0u;
  long long v160 = 0u;
  *(_OWORD *)buf = 0u;
  __p[0] = v132;
  std::deque<ZinIrOpLayer *>::push_back(buf, __p);
  uint64_t v18 = *((void *)&v160 + 1);
  while (*((void *)&v160 + 1))
  {
    uint64_t v19 = v160;
    uint64_t v20 = *(void *)(*(void *)&buf[8] + (((unint64_t)v160 >> 6) & 0x3FFFFFFFFFFFFF8));
    *(void *)&long long v160 = v160 + 1;
    *((void *)&v160 + 1) = v18 - 1;
    if ((unint64_t)(v19 + 1) >= 0x400)
    {
      operator delete(**(void ***)&buf[8]);
      *(void *)&buf[8] += 8;
      *(void *)&long long v160 = v160 - 512;
    }
    uint64_t v21 = v19 & 0x1FF;
    uint64_t v22 = *(void *)(v20 + 8 * v21);
    uint64_t v23 = *(uint64_t **)(v22 + 88);
    uint64_t v24 = *(uint64_t **)(v22 + 96);
    while (v23 != v24)
    {
      v154.__r_.__value_.__r.__words[0] = 0;
      BOOL v25 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)*v23 + 32))(*v23, 0, 0);
      if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v25, *(const ZinIrTensor **)(v20 + 8 * v21), (const ZinIrOpLayer *)&v154, v26) & 1) == 0)ZinAssertImpl("incoming and current should be connected"); {
      if (MirOpt::IsInvariantInputToTranspose(*(void **)(v20 + 8 * v21), (uint64_t)v154.__r_.__value_.__l.__data_, &v155))
      }
      {
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v136, v23, v23);
        goto LABEL_110;
      }
      uint64_t v27 = (void *)*v23;
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)*v23) && v27[15] - v27[14] == 8)
      {
        uint64_t v28 = (void *)v27[11];
        uint64_t v29 = (void *)v27[12];
        if (v28 == v29)
        {
          std::string::size_type v46 = 0;
          unint64_t v35 = 0;
          std::string::size_type v44 = 0;
          memset(&v138, 0, sizeof(v138));
        }
        else
        {
          do
          {
            uint64_t v30 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v28 + 32))(*v28, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v30);
            if (!*((void *)RootTensor + 14) && ZinIrTensor::IsLiveInLiveStateOrConstTensor(RootTensor)) {
              goto LABEL_110;
            }
            uint64_t v32 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v28 + 32))(*v28, 0, 0);
            if (*(_DWORD *)(*(void *)(*((void *)ZinIrTensor::GetRootTensor(v32) + 12) + 64) + 8) == 29) {
              goto LABEL_110;
            }
            ++v28;
          }
          while (v28 != v29);
          char v33 = (void *)v27[11];
          int64_t v34 = (void *)v27[12];
          memset(&v138, 0, sizeof(v138));
          if (v33 == v34)
          {
            std::string::size_type v46 = 0;
            unint64_t v35 = 0;
            std::string::size_type v44 = 0;
          }
          else
          {
            unint64_t v35 = 0;
            do
            {
              if ((unint64_t)v35 >= v138.__r_.__value_.__r.__words[2])
              {
                uint64_t v36 = (uint64_t)((uint64_t)v35 - v138.__r_.__value_.__r.__words[0]) >> 3;
                if ((unint64_t)(v36 + 1) >> 61) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v37 = (uint64_t)(v138.__r_.__value_.__r.__words[2] - v138.__r_.__value_.__r.__words[0]) >> 2;
                if (v37 <= v36 + 1) {
                  unint64_t v37 = v36 + 1;
                }
                if (v138.__r_.__value_.__r.__words[2] - v138.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v37;
                }
                if (v38) {
                  char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v138.__r_.__value_.__r.__words[2], v38);
                }
                else {
                  char v39 = 0;
                }
                uint64_t v40 = &v39[8 * v36];
                *(void *)uint64_t v40 = *v33;
                unint64_t v35 = v40 + 8;
                std::string::size_type size = (char *)v138.__r_.__value_.__l.__size_;
                std::string::size_type v42 = v138.__r_.__value_.__r.__words[0];
                if (v138.__r_.__value_.__l.__size_ != v138.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    uint64_t v43 = *((void *)size - 1);
                    size -= 8;
                    *((void *)v40 - 1) = v43;
                    v40 -= 8;
                  }
                  while (size != (char *)v42);
                  std::string::size_type size = (char *)v138.__r_.__value_.__r.__words[0];
                }
                v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                v138.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
                v138.__r_.__value_.__r.__words[2] = (std::string::size_type)&v39[8 * v38];
                if (size) {
                  operator delete(size);
                }
              }
              else
              {
                *v35++ = *v33;
              }
              v138.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
              ++v33;
            }
            while (v33 != v34);
            std::string::size_type v44 = v138.__r_.__value_.__r.__words[2];
            if ((unint64_t)v35 < v138.__r_.__value_.__r.__words[2])
            {
              void *v35 = v27;
              std::string::size_type v45 = (std::string::size_type)(v35 + 1);
LABEL_78:
              v138.__r_.__value_.__l.__size_ = v45;
              for (uint64_t i = (void *)v138.__r_.__value_.__r.__words[0]; i != (void *)v45; ++i)
              {
                size_t v57 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*i + 32))(*i, 0, 0);
                unint64_t v58 = ZinIrTensor::GetInterleave(v57);
                if (v59) {
                  BOOL v60 = v58 > 1;
                }
                else {
                  BOOL v60 = 0;
                }
                if (v60) {
                  goto LABEL_103;
                }
              }
              uint64_t v61 = *(void *)((*(uint64_t (**)(void *, void, void))(*v27 + 32))(v27, 0, 0) + 104);
              if (v61)
              {
                if (*(_DWORD *)(v61 + 96)) {
                  goto LABEL_103;
                }
                __p[0] = 0;
                __p[1] = 0;
                *(void *)&long long v152 = 0;
                std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(__p, *(const void **)(v61 + 104), *(void *)(v61 + 112), (uint64_t)(*(void *)(v61 + 112) - *(void *)(v61 + 104)) >> 2);
                DWORD2(v152) = *(_DWORD *)(v61 + 128);
                DimensionOrderHint::DimensionOrderHint(v139, 0);
                uint64_t v62 = __p[0];
                if ((char *)v139[1] - (char *)v139[0] != (char *)__p[1] - (char *)__p[0])
                {
                  BOOL v67 = 1;
                  goto LABEL_97;
                }
                if (v139[0] == v139[1])
                {
                  BOOL v67 = 0;
                  if (v139[0]) {
                    goto LABEL_98;
                  }
                }
                else
                {
                  char v63 = (char *)v139[0] + 4;
                  uint64_t v64 = (int *)__p[0];
                  do
                  {
                    int v65 = *v64++;
                    int v66 = *((_DWORD *)v63 - 1);
                    BOOL v67 = v66 != v65;
                    BOOL v68 = v66 != v65 || v63 == v139[1];
                    v63 += 4;
                  }
                  while (!v68);
LABEL_97:
                  if (v139[0])
                  {
LABEL_98:
                    v139[1] = v139[0];
                    operator delete(v139[0]);
                    uint64_t v62 = __p[0];
                  }
                }
                if (v62)
                {
                  __p[1] = v62;
                  operator delete(v62);
                }
                if (v67 || ZinIrTensor::MirInfo::HasCustomStrides((ZinIrTensor::MirInfo *)v61))
                {
LABEL_103:
                  int v69 = 0;
                  goto LABEL_105;
                }
              }
              int v69 = 1;
LABEL_105:
              if (v138.__r_.__value_.__r.__words[0])
              {
                v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
                operator delete(v138.__r_.__value_.__l.__data_);
              }
              if (v69 && (*(unsigned int (**)(uint64_t, int **))(*(void *)*v23 + 424))(*v23, &v155))
              {
                std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)&v133, v23, v23);
                std::deque<ZinIrOpLayer *>::push_back(buf, v23);
              }
              goto LABEL_110;
            }
            std::string::size_type v46 = v138.__r_.__value_.__r.__words[0];
          }
        }
        uint64_t v47 = (uint64_t)((uint64_t)v35 - v46) >> 3;
        if ((unint64_t)(v47 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v44 - v46;
        uint64_t v49 = v48 >> 2;
        if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
          uint64_t v49 = v47 + 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50) {
          int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v138.__r_.__value_.__r.__words[2], v50);
        }
        else {
          int v51 = 0;
        }
        char v52 = &v51[8 * v47];
        *(void *)char v52 = v27;
        std::string::size_type v45 = (std::string::size_type)(v52 + 8);
        BOOL v53 = (char *)v138.__r_.__value_.__l.__size_;
        std::string::size_type v54 = v138.__r_.__value_.__r.__words[0];
        if (v138.__r_.__value_.__l.__size_ != v138.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v55 = *((void *)v53 - 1);
            v53 -= 8;
            *((void *)v52 - 1) = v55;
            v52 -= 8;
          }
          while (v53 != (char *)v54);
          BOOL v53 = (char *)v138.__r_.__value_.__r.__words[0];
        }
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
        v138.__r_.__value_.__l.__size_ = v45;
        v138.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51[8 * v50];
        if (v53) {
          operator delete(v53);
        }
        goto LABEL_78;
      }
LABEL_110:
      ++v23;
    }
    uint64_t v18 = *((void *)&v160 + 1);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](buf);
  if (v155)
  {
    uint64_t v156 = v155;
    operator delete(v155);
  }
  if (!v135) {
    goto LABEL_208;
  }
  uint64_t v70 = (uint64_t *)v133;
  if (v133 == (char *)&v134) {
    goto LABEL_138;
  }
  while (2)
  {
    uint64_t v71 = v70[4];
    std::string v72 = *(uint64_t **)(v71 + 88);
    uint64_t v73 = *(uint64_t **)(v71 + 96);
    while (v72 != v73)
    {
      if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v133, v72)&& !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v136, v72))
      {
        uint64_t v74 = (ZinIrOpLayer *)*v72;
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v159 = 0;
        char IsNoOp = ZinIrOpLayer::IsNoOp(v74, (uint64_t *)buf);
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        if ((IsNoOp & 1) == 0)
        {
          uint64_t v76 = (ZinIrOpLayer *)*v72;
          if (*(_DWORD *)(*(void *)(*v72 + 64) + 8) == 92)
          {
            if ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v76 + 408))(v76)) {
              goto LABEL_131;
            }
            uint64_t v76 = (ZinIrOpLayer *)*v72;
          }
          if (!ZinIrOpLayer::IsANELayer(v76)
            || (uint64_t v77 = *v72,
                Hal = ZinIrTarget::GetHal(*(uint64_t **)(*v72 + 16), *(ZinIrTarget **)(*(void *)(*v72 + 16) + 160)),
                uint64_t v79 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal),
                (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v77 + 440))(v77, v79)))
          {
            if ((*(_DWORD *)(*(void *)(*v72 + 64) + 8) - 28) > 2)
            {
              if (**(unsigned char **)(v130 + 8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
              {
                int v129 = (void *)((char *)v132 + 24);
                if (*((char *)v132 + 47) < 0) {
                  int v129 = (void *)*v129;
                }
                *(_DWORD *)buf = 136315138;
                *(void *)&uint8_t buf[4] = v129;
                _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Skipped hoist transpose: %s", buf, 0xCu);
              }
              goto LABEL_208;
            }
          }
        }
      }
LABEL_131:
      ++v72;
    }
    uint64_t v80 = (uint64_t *)v70[1];
    if (v80)
    {
      do
      {
        std::string v81 = v80;
        uint64_t v80 = (uint64_t *)*v80;
      }
      while (v80);
    }
    else
    {
      do
      {
        std::string v81 = (uint64_t *)v70[2];
        BOOL v16 = *v81 == (void)v70;
        uint64_t v70 = v81;
      }
      while (!v16);
    }
    uint64_t v70 = v81;
    if (v81 != (uint64_t *)&v134) {
      continue;
    }
    break;
  }
LABEL_138:
  if (**(unsigned char **)(v130 + 8) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    int64x2_t v82 = (void *)((char *)v132 + 24);
    if (*((char *)v132 + 47) < 0) {
      int64x2_t v82 = (void *)*v82;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v82;
    _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Hoist transpose: %s", buf, 0xCu);
  }
  uint64_t v83 = ZinReshapeLayer::GetReshapeInfo(v132);
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  long long v155 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v155, *(const void **)(v83 + 16), *(void *)(v83 + 24), (uint64_t)(*(void *)(v83 + 24) - *(void *)(v83 + 16)) >> 3);
  std::string v84 = (uint64_t *)v133;
  if (v133 != (char *)&v134)
  {
    do
    {
      std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>>((uint64_t)&v154, *(uint64_t **)(v84[4] + 88), *(uint64_t **)(v84[4] + 96));
      uint64_t v85 = (std::string::__raw *)v154.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v154.__r_.__value_.__l.__data_ != &v154.__r_.__value_.__r.__words[1])
      {
        do
        {
          uint64_t v86 = (*(uint64_t (**)(std::string::size_type, void, void))(*(void *)v85[1].__words[1] + 32))(v85[1].__words[1], 0, 0);
          long long v87 = *(_OWORD *)(v86 + 64);
          *(_OWORD *)buf = *(_OWORD *)(v86 + 48);
          long long v159 = v87;
          *(void *)&long long v160 = *(void *)(v86 + 80);
          if (&v134 == std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v133, (uint64_t *)&v85[1].__words[1])&& !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v136, (uint64_t *)&v85[1].__words[1]))
          {
            *(int64x2_t *)std::string __p = vdupq_n_s64(1uLL);
            long long v152 = *(_OWORD *)__p;
            uint64_t v153 = 1;
            ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(buf, (uint64_t)&v155, __p);
            (*(void (**)(std::string::size_type, void, void))(*(void *)v85[1].__words[1] + 32))(v85[1].__words[1], 0, 0);
            uint64_t v88 = (*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v132 + 32))(v132, 0, 0);
            uint64_t v89 = v88;
            if (*(char *)(v88 + 47) >= 0) {
              size_t v90 = *(unsigned __int8 *)(v88 + 47);
            }
            else {
              size_t v90 = *(void *)(v88 + 32);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v149, v90 + 1);
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v91 = &v149;
            }
            else {
              uint64_t v91 = (std::string *)v149.__r_.__value_.__r.__words[0];
            }
            if (v90)
            {
              if (*(char *)(v89 + 47) >= 0) {
                int v92 = (const void *)(v89 + 24);
              }
              else {
                int v92 = *(const void **)(v89 + 24);
              }
              memmove(v91, v92, v90);
            }
            *(_WORD *)((char *)&v91->__r_.__value_.__l.__data_ + v90) = 95;
            std::string::basic_string[abi:ne180100]<0>(&v147, "hoist_tr");
            std::string v93 = std::string::append(&v147, "_xfm", 4uLL);
            long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v95 = &v148;
            }
            else {
              uint64_t v95 = (std::string *)v148.__r_.__value_.__r.__words[0];
            }
            if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v96 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v96 = v148.__r_.__value_.__l.__size_;
            }
            uint64_t v97 = std::string::append(&v149, (const std::string::value_type *)v95, v96);
            long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            std::string v99 = std::string::append(&v150, "_", 1uLL);
            long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v161.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v146, 1uLL);
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v101 = &v146;
            }
            else {
              uint64_t v101 = (std::string *)v146.__r_.__value_.__r.__words[0];
            }
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v102 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v102 = v146.__r_.__value_.__l.__size_;
            }
            uint64_t v103 = std::string::append(&v161, (const std::string::value_type *)v101, v102);
            long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
            v138.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v104;
            v103->__r_.__value_.__l.__size_ = 0;
            v103->__r_.__value_.__r.__words[2] = 0;
            v103->__r_.__value_.__r.__words[0] = 0;
            uint64_t v144 = 0;
            uint64_t v145 = 0;
            uint64_t v143 = 0;
            LODWORD(v139[0]) = 0;
            uint64_t v140 = 0;
            uint64_t v141 = 0;
            v139[1] = 0;
            int v142 = 0;
            ZinIrTensor::CreateTensor();
          }
          std::string v105 = (std::string *)v85->__words[1];
          if (v105)
          {
            do
            {
              uint64_t v106 = v105;
              std::string v105 = (std::string *)v105->__r_.__value_.__r.__words[0];
            }
            while (v105);
          }
          else
          {
            do
            {
              uint64_t v106 = (std::string *)v85->__words[2];
              BOOL v16 = v106->__r_.__value_.__r.__words[0] == (void)v85;
              uint64_t v85 = (std::string::__raw *)v106;
            }
            while (!v16);
          }
          uint64_t v85 = (std::string::__raw *)v106;
        }
        while (v106 != (std::string *)&v154.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v154, (void *)v154.__r_.__value_.__l.__size_);
      uint64_t v107 = (uint64_t *)v84[1];
      if (v107)
      {
        do
        {
          std::string v108 = v107;
          uint64_t v107 = (uint64_t *)*v107;
        }
        while (v107);
      }
      else
      {
        do
        {
          std::string v108 = (uint64_t *)v84[2];
          BOOL v16 = *v108 == (void)v84;
          std::string v84 = v108;
        }
        while (!v16);
      }
      std::string v84 = v108;
    }
    while (v108 != (uint64_t *)&v134);
    uint64_t v109 = (uint64_t *)v133;
    if (v133 != (char *)&v134)
    {
      uint64_t v110 = (*(uint64_t (**)(uint64_t, void, void))(**((void **)v133 + 4) + 32))(*((void *)v133 + 4), 0, 0);
      long long v111 = *(_OWORD *)(v110 + 64);
      *(_OWORD *)buf = *(_OWORD *)(v110 + 48);
      long long v159 = v111;
      *(void *)&long long v160 = *(void *)(v110 + 80);
      *(int64x2_t *)std::string __p = vdupq_n_s64(1uLL);
      long long v152 = *(_OWORD *)__p;
      uint64_t v153 = 1;
      ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(buf, (uint64_t)&v155, __p);
      (*(void (**)(uint64_t, void, void))(*(void *)v109[4] + 32))(v109[4], 0, 0);
      uint64_t v112 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v109[4] + 32))(v109[4], 0, 0);
      uint64_t v113 = v112;
      if (*(char *)(v112 + 47) >= 0) {
        size_t v114 = *(unsigned __int8 *)(v112 + 47);
      }
      else {
        size_t v114 = *(void *)(v112 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v154, v114 + 1);
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v115 = &v154;
      }
      else {
        uint64_t v115 = (std::string *)v154.__r_.__value_.__r.__words[0];
      }
      if (v114)
      {
        if (*(char *)(v113 + 47) >= 0) {
          uint64_t v116 = (const void *)(v113 + 24);
        }
        else {
          uint64_t v116 = *(const void **)(v113 + 24);
        }
        memmove(v115, v116, v114);
      }
      *(_WORD *)((char *)&v115->__r_.__value_.__l.__data_ + v114) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v150, "hoist_tr");
      uint64_t v117 = std::string::append(&v150, "_xfm", 4uLL);
      long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      v161.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v119 = &v161;
      }
      else {
        long long v119 = (std::string *)v161.__r_.__value_.__r.__words[0];
      }
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v120 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v120 = v161.__r_.__value_.__l.__size_;
      }
      int v121 = std::string::append(&v154, (const std::string::value_type *)v119, v120);
      long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v122;
      v121->__r_.__value_.__l.__size_ = 0;
      v121->__r_.__value_.__r.__words[2] = 0;
      v121->__r_.__value_.__r.__words[0] = 0;
      uint64_t v123 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v109[4] + 32))(v109[4], 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v123, &v146);
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = 0uLL;
      LODWORD(v139[0]) = 0;
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      v139[1] = 0;
      int v142 = 0;
      ZinIrTensor::CreateTensor();
    }
  }
  std::string v124 = (ZinIrOpLayer *)**((void **)v132 + 11);
  *(_OWORD *)buf = 0u;
  long long v159 = 0u;
  LODWORD(v160) = 1065353216;
  int v125 = ZinIrOpLayerGraph::MoveOutgoingEdges(v131, (uint64_t **)v132, v124, buf);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  BOOL v126 = ZinIrOpLayerGraph::RemoveNode(v131, v132, 1);
  if (v155)
  {
    uint64_t v156 = v155;
    operator delete(v155);
  }
  if ((v125 & v126) != 0) {
    int v127 = 0;
  }
  else {
    int v127 = 3;
  }
  **(_DWORD **)(v130 + 16) = v127;
  if ((v125 & v126 & 1) == 0) {
    ZinAssertImpl("Transpose hoisting failed");
  }
LABEL_208:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v136, v137[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v133, v134);
  return 0;
}

void sub_211194CDC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

double ZinCompilerCore::ZinCompilerCore(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_26C347FA0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = *(void *)(a3 + 72);
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  return result;
}

uint64_t ZinCompilerCore::GetComputeProgram@<X0>(ZinCompilerCore *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 30);
  if (result) {
    return ZinObjectGeneration::GetComputeMutableProgramWithOwnership(result, a2);
  }
  *a2 = 0;
  return result;
}

uint64_t ZinCompilerCore::GetBarUsage(ZinCompilerCore *this)
{
  return (uint64_t)this + 64;
}

uint64_t ZinCompilerCore::PreProcessOpLayerGraph(ZinCompilerCore *this)
{
  kdebug_trace();
  uint64_t v2 = *(ZinIrPreprocess ***)(*((void *)this + 17) + 1000);
  ZinIrPreprocess::ZinIrIOInsertTypeCastForDmaConversions(v2, v3);
  ZinIrPreprocess::InsertExplicitBroadcasts(v2, *((void *)this + 1));
  uint64_t v4 = *(void *)(*((void *)this + 17) + 1000);
  std::string::basic_string[abi:ne180100]<0>(v7, "after_typecast_insertion");
  ZinIrCompilerParameters::ZinIrCompilerParameters(v6, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally(v4, (std::string::size_type)v7, (ZinIrCompilerParameters *)v6, *((void *)this + 17) + 24, 1);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v6);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  kdebug_trace();
  return 0;
}

void sub_211195354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&a9);
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::ValidateOpLayerGraph(ZinCompilerCore *this)
{
  uint64_t v2 = *((void *)this + 17);
  uint64_t v3 = *(ZinIrControlFlowGraph **)(v2 + 1000);
  Hal = ZinIrTarget::GetHal((uint64_t *)v2, *(ZinIrTarget **)(v2 + 160));
  uint64_t v5 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t result = ZinIrValidate(v3, v5, *((ZinIrNetworkStatus **)this + 32));
  if (result)
  {
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::OptimizeOpLayerGraph(ZinCompilerCore *this)
{
  kdebug_trace();
  if (ZinIrOptimize(*(void **)(*((void *)this + 17) + 1000), *((void *)this + 1)))
  {
    BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v2) {
      ZinCompilerCore::OptimizeOpLayerGraph(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  else
  {
    uint64_t v11 = *(void *)(*((void *)this + 17) + 1000);
    std::string::basic_string[abi:ne180100]<0>(v13, "after_optimizer");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v12, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally(v11, (std::string::size_type)v13, (ZinIrCompilerParameters *)v12, *((void *)this + 17) + 24, 2);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v12);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    kdebug_trace();
    return 0;
  }
}

void sub_211195514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&a9);
  if (*(char *)(v9 - 33) < 0) {
    operator delete(*(void **)(v9 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunMirPrepareIr(ZinCompilerCore *this)
{
  Hal = ZinIrTarget::GetHal(*((uint64_t **)this + 17), *(ZinIrTarget **)(*((void *)this + 17) + 160));
  uint64_t v3 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v4 = *((void *)this + 17);
  v20[0] = v3;
  v20[1] = v4 + 176;
  if (*(char *)(v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
    uint64_t v4 = *((void *)this + 17);
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 24);
    v21.__r_.__value_.__r.__words[2] = *(void *)(v4 + 40);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  }
  int v22 = *(_DWORD *)(v4 + 52);
  if (ZinMirPrepareIr(*(uint64_t ***)(v4 + 1000), (uint64_t)v20, *((CFArrayRef **)this + 32)))
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinCompilerCore::RunMirPrepareIr(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    uint64_t v14 = 3;
  }
  else
  {
    uint64_t v15 = *(void *)(*((void *)this + 17) + 1000);
    std::string::basic_string[abi:ne180100]<0>(v18, "after_prepare_ir_builder");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v17, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally(v15, (std::string::size_type)v18, (ZinIrCompilerParameters *)v17, *((void *)this + 17) + 24, 8);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v17);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v14 = 0;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_2111956A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&a9);
  if (*(char *)(v9 - 81) < 0) {
    operator delete(*(void **)(v9 - 104));
  }
  if (*(char *)(v9 - 41) < 0) {
    operator delete(*(void **)(v9 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunBondedNetworkSplit(ZinCompilerCore *this)
{
  if (!*(unsigned char *)(*((void *)this + 2) + 158)) {
    ZinBondedAne::ZinMirBondedAneSplit::ZinMirBondedAneSplit();
  }
  return 0;
}

void sub_211195754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinBondedAne::ZinMirBondedAneSplit::~ZinMirBondedAneSplit((ZinBondedAne::ZinMirBondedAneSplit *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunMirBuilder(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  ZinIrContext::GetParameters(*((ZinIrContext **)this + 17), (uint64_t)v19);
  uint64_t KernelSparsityCache = ZinIrContext::GetKernelSparsityCache(*((ZinIrContext **)this + 17));
  if (ZinMirBuilder((uint64_t)a2, (uint64_t)v19, KernelSparsityCache, *((void *)this + 32), v5))
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinCompilerCore::RunMirBuilder(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    uint64_t v14 = 3;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "after_mir_builder");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v16, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)v17, (ZinIrCompilerParameters *)v16, *((void *)this + 17) + 24, 8);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v16);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    uint64_t v14 = 0;
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  return v14;
}

void sub_211195868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&a9);
  if (*(char *)(v9 - 81) < 0) {
    operator delete(*(void **)(v9 - 104));
  }
  if (*(char *)(v9 - 41) < 0) {
    operator delete(*(void **)(v9 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunTaskScheduler(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  v22[0] = 0;
  v22[1] = 0;
  char v21 = (uint64_t *)v22;
  uint64_t v4 = (void *)*((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  if (*(char *)(v5 + 47) >= 0) {
    size_t v6 = *(unsigned __int8 *)(v5 + 47);
  }
  else {
    size_t v6 = *(void *)(v5 + 32);
  }
  uint64_t v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 20);
  if (v20 < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*(char *)(v5 + 47) >= 0) {
      uint64_t v8 = (const void *)(v5 + 24);
    }
    else {
      uint64_t v8 = *(const void **)(v5 + 24);
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".Scheduler.debug.txt");
  ScheduleControlFlowGraph(a2, v4, &v21, (long long *)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(*((void *)this + 3) + 1126))
  {
    ZinMirPEReductionAccumulationRetention::ZinMirPEReductionAccumulationRetention(__p, *((void *)this + 1), a2, &v21);
    uint64_t v9 = ZinMirPEReductionAccumulationRetention::Run((ZinMirPEReductionAccumulationRetention *)__p);
    if (v9)
    {
      BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v10) {
        ZinCompilerCore::RunTaskScheduler(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention((ZinMirPEReductionAccumulationRetention *)__p);
      goto LABEL_23;
    }
    ZinIrControlFlowGraph::SetScheduleMap(a2, &v21);
    ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention((ZinMirPEReductionAccumulationRetention *)__p);
  }
  if (*(unsigned char *)(*((void *)this + 2) + 130) && *(unsigned char *)(*((void *)this + 3) + 2032)) {
    ZinMirAppendSecureFlushLayers(*((void *)this + 17), (uint64_t)&v21);
  }
  kdebug_trace();
  uint64_t v9 = 0;
LABEL_23:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v21, v22[0]);
  return v9;
}

void sub_211195AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v15 - 80, *(void **)(v15 - 72));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::ValidateMirInfo(CFArrayRef **this, ZinIrControlFlowGraph *a2)
{
  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v12, (uint64_t)a2);
  uint64_t result = ZinMirValidateMirInfo::Execute((ZinMirValidateMirInfo *)&v12);
  if (result)
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      ZinCompilerCore::ValidateMirInfo(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    ZinIrUnitStatus::SetError(this[7], @"CompilationFailure");
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::RunPieceGeneration(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  int8x16_t v14 = vextq_s8(*((int8x16_t *)this + 1), *((int8x16_t *)this + 1), 8uLL);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  int v18 = 0;
  ZinMirCacheTensors::ZinMirCacheTensors(v13, (uint64_t)a2, (uint64_t)&v14);
  if (ZinBondedAne::ZinPieceGeneration::Execute(v13))
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinCompilerCore::RunPieceGeneration(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    uint64_t v11 = 3;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return v11;
}

void sub_211195C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::RunCPAllocator(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  kdebug_trace();
  uint64_t v4 = *((void *)this + 2);
  if (!*(unsigned char *)(v4 + 158)) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 1);
  if (!*(unsigned char *)(*(void *)v5 + 1105)) {
    return 0;
  }
  if (*(unsigned char *)(v4 + 367))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "ZinCpBasedAllocator is disabled by a compile flag";
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s\n", buf, 0xCu);
    }
LABEL_14:
    uint64_t v14 = *((void *)this + 2);
    if (!*(unsigned char *)(v14 + 367) && *(unsigned char *)(v14 + 530)) {
      ZinCPAllocatorDRAMPostProcessing::ZinCPAllocatorDRAMPostProcessing((uint64_t)buf, *(const ZinIrControlFlowGraph **)(*((void *)this + 17) + 1000), *((void *)this + 1), (uint64_t)this + 160, 0, 0);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "after_cp_based_alloc");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v16, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)buf, (ZinIrCompilerParameters *)&v16, *((void *)this + 17) + 24, 16);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v16);
    if (v20 < 0) {
      operator delete(*(void **)buf);
    }
    kdebug_trace();
    return 0;
  }
  ZinCpBasedAllocator::ZinCpBasedAllocator(buf, a2, v5, v4 + 24, 0);
  if (!ZinCpBasedAllocator::Execute((ZinCpBasedAllocator *)buf))
  {
    std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map((uint64_t)v17, (uint64_t)v21);
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)this + 160, (uint64_t *)v17);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
    if (!v21[896])
    {
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((void *)this + 20);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v17 = 136315138;
        int v18 = "ZinCpBasedAllocator has failed. This generally happens when the constructed CP-model problem is not solvable.";
        _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "%s\n", v17, 0xCu);
      }
    }
    ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)buf);
    goto LABEL_14;
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v6) {
    ZinCompilerCore::RunCPAllocator(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
  ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)buf);
  return 3;
}

void sub_211195F28(_Unwind_Exception *a1)
{
}

uint64_t ZinCompilerCore::RunRegisterSpilling(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  if (!*(void *)(*((void *)this + 19) + 360)
    && !ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), a2))
  {
    return 0;
  }
  kdebug_trace();
  if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
    ZinAssertImpl("Must run scheduler first");
  }
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = *((void *)this + 3);
  char IsStressTestMode = ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), v4);
  ZinIrRegSpill::ZinIrRegSpill((uint64_t)v19, (uint64_t)a2, (uint64_t)a2 + 352, v5 + 344, v5, v6, IsStressTestMode);
  if (ZinIrRegSpill::Run(v19))
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinCompilerCore::RunRegisterSpilling(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    uint64_t v16 = 3;
  }
  else
  {
    ZinIrScheduleUtil::GetOrderedLayersMap((ZinIrScheduleUtil **)a2, (uint64_t)v18);
    ZinIrControlFlowGraph::SetScheduleMap(a2, v18);
    kdebug_trace();
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v18, v18[1]);
    uint64_t v16 = 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v21);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, v20[1]);
  return v16;
}

void sub_2111960E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ZinIrRegSpill::~ZinIrRegSpill((ZinIrRegSpill *)va);
  _Unwind_Resume(a1);
}

void ZinIrRegSpill::~ZinIrRegSpill(ZinIrRegSpill *this)
{
}

uint64_t ZinCompilerCore::RunMultiSegmentSpilling(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
    ZinAssertImpl("Must run scheduler first");
  }
  uint64_t v4 = (char *)a2 + 352;
  uint64_t v5 = (ZinIrMultiSegmentSpill *)ZinIrMultiSegmentSpill::ZinIrMultiSegmentSpill(&v31, (char *)a2 + 352, *((void *)this + 3), *((void *)this + 2));
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v29 = v30;
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (ZinIrMultiSegmentSpill::Run(v5, &__p, (uint64_t)&v29))
  {
    uint64_t v7 = 3;
  }
  else
  {
    if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
      ZinAssertImpl("Must run scheduler first");
    }
    uint64_t v8 = *((void *)this + 19);
    uint64_t v9 = *((void *)this + 3);
    char IsStressTestMode = ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), v6);
    ZinIrRegSpill::ZinIrRegSpill((uint64_t)v23, (uint64_t)a2, (uint64_t)v4, (uint64_t)&v29, v8, v9, IsStressTestMode);
    if (ZinIrRegSpill::Run((ZinIrLocalRegAlloc **)v23))
    {
      BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v11) {
        ZinCompilerCore::RunMultiSegmentSpilling(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
      uint64_t v7 = 3;
    }
    else
    {
      if ((void **)((char *)this + 264) != &__p) {
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)this + 264, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
      }
      ZinIrScheduleUtil::GetOrderedLayersMap((ZinIrScheduleUtil **)a2, (uint64_t)v22);
      ZinIrControlFlowGraph::SetScheduleMap(a2, v22);
      std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v22, v22[1]);
      uint64_t v7 = 0;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v25);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v24, v24[1]);
  }
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30[0]);
  char v19 = v33;
  uint64_t v31 = &unk_26C32BFE8;
  char v33 = 0;
  if (v19)
  {
    char v20 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::~ZinIntervalTree(v19);
    MEMORY[0x21667D3C0](v20, 0x20C4093837F09);
  }
  v23[0] = (void **)&v32;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v23);
  return v7;
}

void sub_21119633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a10, a11);
  ZinIrRegSpill::~ZinIrRegSpill((ZinIrRegSpill *)&a13);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v27 - 128, *(void **)(v27 - 120));
  ZinIrMultiSegmentSpill::~ZinIrMultiSegmentSpill((ZinIrMultiSegmentSpill *)(v27 - 104));
  _Unwind_Resume(a1);
}

void ZinIrMultiSegmentSpill::~ZinIrMultiSegmentSpill(ZinIrMultiSegmentSpill *this)
{
  *(void *)this = &unk_26C32BFE8;
  uint64_t v1 = (void **)((char *)this + 16);
  std::unique_ptr<ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 5, 0);
  BOOL v2 = v1;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t ZinCompilerCore::RunMemCacheAllocation(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  uint64_t v4 = *((void *)this + 2);
  if (!*(unsigned char *)(v4 + 158)) {
    return 0;
  }
  if ((*(unsigned char *)(*((void *)this + 17) + 275) & 2) != 0)
  {
    if (*(char *)(v4 + 47) >= 0) {
      size_t v5 = *(unsigned __int8 *)(v4 + 47);
    }
    else {
      size_t v5 = *(void *)(v4 + 32);
    }
    uint64_t v6 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 10);
    if (v21 < 0) {
      uint64_t v6 = (void **)__p[0];
    }
    if (v5)
    {
      uint64_t v9 = *(char **)(v4 + 24);
      uint64_t v8 = (char *)(v4 + 24);
      uint64_t v7 = v9;
      if (v8[23] >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = v7;
      }
      memmove(v6, v10, v5);
    }
    strcpy((char *)v6 + v5, ".reg-alloc");
    ZinMemoryHeatMap::CreateMemoryHeatFile(*((ZinMemoryHeatMap **)this + 17), (ZinIrContext *)__p);
    ZinMemoryHeatMap::PrintPerSchedulePressure(*((void *)this + 17), 1);
    ZinMemoryHeatMap::PrintPerSchedulePressure(*((void *)this + 17), 0);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!(***((unsigned int (****)(void, ZinIrControlFlowGraph *))this + 25))(*((void *)this + 25), a2))
  {
    kdebug_trace();
    return 0;
  }
  BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v11) {
    ZinCompilerCore::RunMemCacheAllocation(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
  return 3;
}

void sub_2111965A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::RunHazardAnalysis(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  if (*(unsigned char *)(**((void **)this + 1) + 1246))
  {
    kdebug_trace();
    uint64_t v4 = (void *)(*((void *)this + 19) + 104);
    LODWORD(v15[0]) = 2;
    size_t v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v15);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    ZinIrMemoryPool::GetSections(v5[3], 4, v15);
    uint64_t v6 = *(void *)(v15[1] + 16);
    std::__list_imp<ZinIrSection *>::clear(v15);
    ZinMirL2HazardAnalysis::ZinMirL2HazardAnalysis(v15, *(void *)(*((void *)this + 17) + 1000), v6, *((void *)this + 1));
    ZinMirL2HazardAnalysis::Run((ZinMirL2HazardAnalysis *)v15);
    ZinIrScheduleUtil::GetEngineScheduledLayerGroups(a2, v8);
    ZinMirDramHazardAnalysis::ZinMirDramHazardAnalysis(v9, a2, v8, *((void *)this + 3), (char *)this + 264, (*(_DWORD *)(*((void *)this + 2) + 96) >> 25) & 1);
    uint64_t v16 = v8;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    ZinMirDramHazardAnalysis::Run((ZinMirDramHazardAnalysis *)v9);
    kdebug_trace();
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v12);
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&v11);
    v8[0] = (void **)&v10;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v8);
    v8[0] = (void **)v9;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v8);
    ZinMirL2HazardAnalysis::~ZinMirL2HazardAnalysis((ZinMirL2HazardAnalysis *)v15);
  }
  return 0;
}

void sub_211196730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  *(void *)(v35 - 40) = v34;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 40));
  ZinMirL2HazardAnalysis::~ZinMirL2HazardAnalysis((ZinMirL2HazardAnalysis *)&a34);
  _Unwind_Resume(a1);
}

void ZinMirDramHazardAnalysis::~ZinMirDramHazardAnalysis(ZinMirDramHazardAnalysis *this)
{
  BOOL v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 56);
  BOOL v3 = (void **)((char *)this + 32);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)this;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ZinCompilerCore::UpdateFinalKernelSHA(const ZinIrHalParameters **this, ZinIrControlFlowGraph *a2)
{
  if (!*((void *)a2 + 43)) {
    ZinAssertImpl("Must run scheduler first");
  }
  std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::map[abi:ne180100]((uint64_t *)&v19, (uint64_t)a2 + 328);
  BOOL v3 = v19;
  if (v19 != v20)
  {
    do
    {
      uint64_t v4 = v3[5];
      data[1] = (ZinIrCodegenKernelUtil *)v3[4];
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v16, v4, (uint64_t)v3[6], v3[6] - v4);
      size_t v5 = v16;
      uint64_t v6 = v17;
      if (v16 != v17)
      {
        do
        {
          uint64_t v7 = *v5;
          if (ZinIrOpLayer::IsNELayer(*v5) && *((void *)v7 + 17))
          {
            ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v7 + 33));
            data[0] = (ZinIrCodegenKernelUtil *)MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
            CC_SHA256_Update((CC_SHA256_CTX *)(*((void *)v7 + 17) + 52), data, 8u);
            char v9 = *(unsigned char *)(*((void *)v7 + 33) + 2);
            unint64_t OCGChannelCountAfterPaddingFromKernel = 0;
            unint64_t OCGChannelCountAfterPaddingFromKernel = ZinIrKernel::GetOCGChannelCountAfterPaddingFromKernel(*((ZinIrKernel **)v7 + 17), data[0], this[3], v9);
            CC_SHA256_Update((CC_SHA256_CTX *)(*((void *)v7 + 17) + 52), &OCGChannelCountAfterPaddingFromKernel, 8u);
          }
          ++v5;
        }
        while (v5 != v6);
        size_t v5 = v16;
      }
      if (v5)
      {
        uint64_t v17 = v5;
        operator delete(v5);
      }
      uint64_t v10 = v3[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = (void **)v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)v3[2];
          BOOL v12 = *v11 == v3;
          BOOL v3 = v11;
        }
        while (!v12);
      }
      BOOL v3 = v11;
    }
    while (v11 != v20);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v19, v20[0]);
  return 0;
}

void sub_211196958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

uint64_t ZinCompilerCore::SetBinaryPoint(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  int v4 = *(_DWORD *)(*((void *)this + 17) + 80);
  uint64_t v14 = *((void *)this + 1);
  int v15 = v4;
  if (ZinMirPrepareBinaryPoint::Run((ZinMirPrepareBinaryPoint *)&v14, a2))
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinCompilerCore::SetBinaryPoint(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return 3;
  }
  else
  {
    kdebug_trace();
    return 0;
  }
}

uint64_t ZinCompilerCore::SetSplitRowCompute(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  if (!*(unsigned char *)(*((void *)this + 3) + 1238)) {
    return 0;
  }
  ZinMirCacheTensors::ZinMirCacheTensors(v12, (uint64_t)a2, *((void *)this + 1));
  uint64_t result = ZinSetSplitRowCompute::Execute((ZinSetSplitRowCompute *)v12);
  if (result)
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      ZinCompilerCore::SetSplitRowCompute(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::DumpDebugProfilingInfo(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  int v4 = *(_DWORD *)(*((void *)this + 2) + 96);
  if ((v4 & 0x4000) != 0)
  {
    if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
      ZinAssertImpl("Must run scheduler first");
    }
    uint64_t v5 = (ZinComputePerfMetricsWithQuantization *)ZinComputePerfMetricsWithQuantization::ZinComputePerfMetricsWithQuantization(&v64, (uint64_t)a2 + 352, *((void *)this + 1));
    int v6 = ZinComputePerfMetricsWithQuantization::Execute(v5);
    if (v6)
    {
      BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v7) {
        ZinCompilerCore::DumpDebugProfilingInfo(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    }
    else
    {
      int v15 = (void *)(*((void *)this + 19) + 104);
      LODWORD(v61) = 0;
      uint64_t v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v15, (int *)&v61);
      if (!v16) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v17 = v16[3];
      ZinIrHalParameters::GetOperationCondition(*((ZinIrHalParameters **)this + 3), *(double *)(*((void *)this + 2) + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)&v63);
      uint64_t v18 = *(int *)(*((void *)this + 17) + 52);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v64);
      ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson((uint64_t)&v61, (uint64_t)a2, v18, (uint64_t)&v63, v17, v19);
      uint64_t v20 = *((void *)this + 2);
      if (*(char *)(v20 + 47) >= 0) {
        size_t v21 = *(unsigned __int8 *)(v20 + 47);
      }
      else {
        size_t v21 = *(void *)(v20 + 32);
      }
      uint64_t v22 = &v58;
      std::string::basic_string[abi:ne180100]((uint64_t)&v58, v21 + 29);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v22 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if (v21)
      {
        if (*(char *)(v20 + 47) >= 0) {
          uint64_t v23 = (const void *)(v20 + 24);
        }
        else {
          uint64_t v23 = *(const void **)(v20 + 24);
        }
        memmove(v22, v23, v21);
      }
      strcpy((char *)v22 + v21, ".zinir_graph_after_reg_spill_");
      ReplaceUnsupportedCharWithUnderscore(*((void *)this + 17) + 24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v26 = std::string::append(&v58, (const std::string::value_type *)p_p, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = std::string::append(&v59, ".json", 5uLL);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v61);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)&v61);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v65, v65[1]);
    std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)&v64, (char *)v64.__r_.__value_.__l.__size_);
    if (v6) {
      return 3;
    }
    int v4 = *(_DWORD *)(*((void *)this + 2) + 96);
  }
  if ((v4 & 0x10) != 0)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v59, (uint64_t)a2);
    uint64_t v31 = *((void *)this + 2);
    if (*(char *)(v31 + 47) >= 0) {
      size_t v32 = *(unsigned __int8 *)(v31 + 47);
    }
    else {
      size_t v32 = *(void *)(v31 + 32);
    }
    char v33 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v32 + 9);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v33 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if (v32)
    {
      uint64_t v36 = *(char **)(v31 + 24);
      uint64_t v35 = (char *)(v31 + 24);
      uint64_t v34 = v36;
      if (v35[23] >= 0) {
        unint64_t v37 = v35;
      }
      else {
        unint64_t v37 = v34;
      }
      memmove(v33, v37, v32);
    }
    strcpy((char *)v33 + v32, ".tensors_");
    ReplaceUnsupportedCharWithUnderscore(*((void *)this + 17) + 24, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &v60;
    }
    else {
      unint64_t v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = v60.__r_.__value_.__l.__size_;
    }
    uint64_t v40 = std::string::append(&v63, (const std::string::value_type *)v38, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v42 = std::string::append(&v64, ".json", 5uLL);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    std::string::size_type v62 = v42->__r_.__value_.__r.__words[2];
    long long v61 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v59);
    if (SHIBYTE(v62) < 0) {
      operator delete((void *)v61);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "after_reg_spill");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v56, *((const ZinIrCompilerParameters **)this + 2));
  ZinVisualization::CreateLimitedSizeDotGraphsAndLogConditionally((uint64_t)a2, (std::string::size_type)&v61, (ZinIrCompilerParameters *)&v56, *((void *)this + 17) + 24, 16);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v56);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  uint64_t v44 = *((void *)this + 2);
  if (*(unsigned char *)(v44 + 121))
  {
    ZinIrHalParameters::GetOperationCondition(*((ZinIrHalParameters **)this + 3), *(double *)(v44 + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)&v64);
    uint64_t v45 = *(int *)(*((void *)this + 17) + 52);
    *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0uLL;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63.__r_.__value_.__l.__size_;
    ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson((uint64_t)&v61, (uint64_t)a2, v45, (uint64_t)&v64, 0, (uint64_t)&v63);
    std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)&v63, (char *)v63.__r_.__value_.__l.__size_);
    uint64_t v46 = *((void *)this + 2);
    if (*(char *)(v46 + 47) >= 0) {
      size_t v47 = *(unsigned __int8 *)(v46 + 47);
    }
    else {
      size_t v47 = *(void *)(v46 + 32);
    }
    uint64_t v48 = &v59;
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, v47 + 31);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if (v47)
    {
      if (*(char *)(v46 + 47) >= 0) {
        uint64_t v49 = (const void *)(v46 + 24);
      }
      else {
        uint64_t v49 = *(const void **)(v46 + 24);
      }
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, ".zinir_graph_final_fusion_info_");
    ReplaceUnsupportedCharWithUnderscore(*((void *)this + 17) + 24, &v58);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v50 = &v58;
    }
    else {
      unint64_t v50 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = v58.__r_.__value_.__l.__size_;
    }
    char v52 = std::string::append(&v59, (const std::string::value_type *)v50, v51);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v54 = std::string::append(&v60, ".json", 5uLL);
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v61);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Dumped fusion boundaries after Reg Spill to JSON\n", (uint8_t *)&v60, 2u);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)&v61);
    uint64_t v44 = *((void *)this + 2);
  }
  if ((*(unsigned char *)(v44 + 97) & 8) != 0) {
    ZinPerfUtil::ZinDebugPrintPerfEstimateParams((uint64_t)a2, *((void *)this + 1));
  }
  return 0;
}

void sub_211197128(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)&STACK[0x380]);
  ZinComputePerfMetricsWithQuantization::~ZinComputePerfMetricsWithQuantization((ZinComputePerfMetricsWithQuantization *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ZinComputePerfMetricsWithQuantization::~ZinComputePerfMetricsWithQuantization(ZinComputePerfMetricsWithQuantization *this)
{
}

uint64_t ZinCompilerCore::SetTDExecutionTime(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  if (*(unsigned char *)(*((void *)this + 3) + 1113)
    && (ZinAnnotateTDExecutionTime::ZinAnnotateTDExecutionTime((uint64_t)v13, (uint64_t)a2, *((void *)this + 1), 0),
        ZinAnnotateTDExecutionTime::Execute((ZinAnnotateTDExecutionTime *)v13)))
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      ZinCompilerCore::SetTDExecutionTime(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  else
  {
    kdebug_trace();
    return 0;
  }
}

uint64_t ZinCompilerCore::RunCachePrefetch(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  if (!*((unsigned char *)this + 232))
  {
    *((void *)this + 28) = 0;
    *((unsigned char *)this + 232) = 1;
  }
  *((void *)this + 27) = 0;
  if (!*((void *)a2 + 43)) {
    ZinAssertImpl("Must run scheduler first");
  }
  BOOL v4 = (ZinIrControlFlowGraph *)*((void *)a2 + 41);
  if (v4 == (ZinIrControlFlowGraph *)((char *)a2 + 336))
  {
LABEL_12:
    kdebug_trace();
    return 0;
  }
  else
  {
    while (!ZinCachePrefetchDma::Run(*((void *)this + 26), (unint64_t *)this + 27, (ZinIrOpLayer ***)v4 + 5, (uint64_t *)this + 33))
    {
      uint64_t v5 = (ZinIrControlFlowGraph *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(ZinIrControlFlowGraph **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (ZinIrControlFlowGraph *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          BOOL v4 = v6;
        }
        while (!v7);
      }
      BOOL v4 = v6;
      if (v6 == (ZinIrControlFlowGraph *)((char *)a2 + 336)) {
        goto LABEL_12;
      }
    }
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinCompilerCore::RunCachePrefetch(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
}

uint64_t ZinCompilerCore::RunKernelBufferControl(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2 = **((void **)this + 1);
  if (!*(unsigned char *)(v2 + 1241)) {
    return 0;
  }
  if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
    ZinAssertImpl("Must run scheduler first");
  }
  ZinKernelBufferControl::ZinKernelBufferControl(v13, (uint64_t)a2 + 352, v2);
  uint64_t result = ZinKernelBufferControl::Run((ZinKernelBufferControl *)v13);
  if (result)
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinCompilerCore::RunKernelBufferControl(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::RunContextSwitch(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  if (!*(unsigned char *)(*((void *)this + 2) + 128) && *(unsigned char *)(*((void *)this + 3) + 1262))
  {
    BOOL v4 = (void *)(*((void *)this + 19) + 104);
    LODWORD(v13[0]) = 0;
    BOOL v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v13);
    if (!v5
      || (uint64_t v6 = v5[3],
          LODWORD(v13[0]) = 2,
          (uint64_t v7 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v13)) == 0))
    {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v8 = v7[3];
    NumAnesUsed = (const ZinIrControlFlowGraph *)ZinBondedUtils::GetNumAnesUsed(a2, *((void **)this + 1));
    ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(a2, NumAnesUsed, v17);
    ZinIrMemoryPool::GetSections(v8, 4, v12);
    ZinMirContextSwitch::ZinMirContextSwitch(v13, a2, v17, v6, *(void *)(v12[1] + 16), *((void *)this + 1));
    std::__list_imp<ZinIrSection *>::clear(v12);
    ZinMirContextSwitch::Execute((ZinMirContextSwitch *)v13);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v16);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v15);
    v13[0] = (void **)v17;
    std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](v13);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "after_context_switch_set");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v11, *(const ZinIrCompilerParameters **)(*((void *)this + 1) + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)v13, (ZinIrCompilerParameters *)&v11, *((void *)this + 17) + 24, 0x2000);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v11);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  kdebug_trace();
  return 0;
}

void sub_211197740(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 + 88);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 + 48);
  *(void *)(v2 - 200) = v2 - 72;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 200));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunComputeAddressTranslationRegisters(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!*(unsigned char *)(*(void *)v2 + 1240)) {
    return 0;
  }
  if (*((void *)a2 + 45) == *((void *)a2 + 44)) {
    ZinAssertImpl("Must run scheduler first");
  }
  ZinMirCacheTensors::ZinMirCacheTensors(v13, (uint64_t)a2 + 352, v2);
  uint64_t result = ZinComputeAddressTranslationRegisters::Execute(v13);
  if (result)
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinCompilerCore::RunComputeAddressTranslationRegisters(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    return 3;
  }
  return result;
}

void ZinCompilerCore::BuildComputeProgram(ZinCompilerCore *this)
{
  kdebug_trace();
  ZinIrTargetCreator::CreateTargetFromString((unsigned char **)(*(void *)(*((void *)this + 1) + 8) + 72), &v2);
  ZinIrTarget::GetCPUSubtype(v2);
  ZinObjectGeneration::Make();
}

void sub_2111979E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::QualifyOnImbalanceRatio(ZinIrHalParameters ***this, ZinIrControlFlowGraph *a2)
{
  return 0;
}

uint64_t ZinCompilerCore::DumpLayerStats(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  v63[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 95);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 80);
  }
  if (v5 == 9)
  {
    uint64_t v7 = v6 >= 0 ? v4 + 72 : *(void *)(v4 + 72);
    uint64_t v8 = *(void *)v7;
    int v9 = *(unsigned __int8 *)(v7 + 8);
    if (v8 == 0x30336E2E67343168 && v9 == 49)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      float64x2_t v58 = 0u;
      long long v55 = 0u;
      uint64x2_t v56 = 0u;
      v63[0] = &unk_26C32EA98;
      v63[1] = &v55;
      v63[3] = v63;
      int v11 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v63, 1);
      std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v63);
      if (v11)
      {
        BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v12) {
          ZinCompilerCore::DumpLayerStats(v12, v13, v14, v15, v16, v17, v18, v19);
        }
      }
      else
      {
        unint64_t v20 = v55;
        double v21 = 0.0;
        if ((void)v55)
        {
          float64x2_t v22 = vdivq_f64(vcvtq_f64_u64(v56), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v55), 0));
          double v23 = (double)(unint64_t)v57 / (double)(unint64_t)v55;
        }
        else
        {
          float64x2_t v22 = 0uLL;
          double v23 = 0.0;
        }
        float64x2_t v58 = v22;
        *(double *)&long long v59 = v23;
        double v24 = 0.0;
        if (*((void *)&v55 + 1))
        {
          double v21 = (double)*((unint64_t *)&v55 + 1);
          double v24 = (double)*((unint64_t *)&v57 + 1) / (double)*((unint64_t *)&v55 + 1);
        }
        *((double *)&v59 + 1) = v24;
        *(void *)&long long v60 = log2(v21);
        *((void *)&v60 + 1) = log2((double)v20);
        ZinGenerateCoreAnalyticsNetworkStatsV1();
        if ((*(unsigned char *)(*((void *)this + 2) + 99) & 4) != 0)
        {
          printf("kernel_elements=%llu\n", (void)v55);
          printf("tensor_elements=%llu\n", *((void *)&v55 + 1));
          printf("palettized_kernel_elements=%llu\n", v56.i64[0]);
          printf("sparse_kernel_elements=%llu\n", v56.i64[1]);
          printf("quant_kernel_elements=%llu\n", (void)v57);
          printf("quant_tensor_elements=%llu\n", *((void *)&v57 + 1));
          printf("PalletizedKernelRatio=%f\n", v58.f64[0]);
          printf("SparseKernelRatio=%f\n", v58.f64[1]);
          printf("QuantKernelRatio=%f\n", *(double *)&v59);
          printf("QuantTensorRatio=%f\n", *((double *)&v59 + 1));
          printf("TensorElementSizeLog2=%f\n", *(double *)&v60);
          printf("KernelElementSizeLog2=%f\n", *((double *)&v60 + 1));
        }
      }
      uint64_t v4 = *((void *)this + 2);
    }
  }
  if ((*(unsigned char *)(v4 + 99) & 4) == 0) {
    goto LABEL_42;
  }
  if (*(char *)(v4 + 47) >= 0) {
    size_t v25 = *(unsigned __int8 *)(v4 + 47);
  }
  else {
    size_t v25 = *(void *)(v4 + 32);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v25 + 11);
  if (v54 >= 0) {
    uint64_t v26 = __p;
  }
  else {
    uint64_t v26 = (void **)__p[0];
  }
  if (v25)
  {
    long long v29 = *(char **)(v4 + 24);
    uint64_t v28 = (char *)(v4 + 24);
    long long v27 = v29;
    if (v28[23] >= 0) {
      uint64_t v30 = v28;
    }
    else {
      uint64_t v30 = v27;
    }
    memmove(v26, v30, v25);
  }
  strcpy((char *)v26 + v25, "-layers.txt");
  uint64_t v31 = MEMORY[0x263F8C310] + 64;
  v62[0] = MEMORY[0x263F8C310] + 64;
  size_t v32 = (void *)MEMORY[0x263F8C2B0];
  uint64_t v33 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  *(void *)&long long v55 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)((char *)&v55 + *(void *)(v55 - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v33;
  uint64_t v34 = (std::ios_base *)((char *)&v55 + *(void *)(v55 - 24));
  std::ios_base::init(v34, (char *)&v55 + 8);
  uint64_t v35 = MEMORY[0x263F8C310] + 24;
  v34[1].__vftable = 0;
  v34[1].__fmtflags_ = -1;
  *(void *)&long long v55 = v35;
  v62[0] = v31;
  MEMORY[0x21667CDD0]((char *)&v55 + 8);
  std::ofstream::open();
  uint64_t v36 = v61;
  if (v61)
  {
    ZinIrGraphReportLayerStructure::ZinIrGraphReportLayerStructure(v52, (uint64_t)a2, (uint64_t)&v55);
    ZinIrGraphReportLayerStructure::Execute((ZinIrGraphReportLayerStructure *)v52);
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinCompilerCore::DumpLayerStats((uint64_t)&v54, (uint64_t)__p, v37, v38, v39, v40, v41, v42);
  }
  *(void *)&long long v55 = *v32;
  *(void *)((char *)&v55 + *(void *)(v55 - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v32[3];
  MEMORY[0x21667CDE0]((char *)&v55 + 8);
  std::ostream::~ostream();
  MEMORY[0x21667D2B0](v62);
  if (v54 < 0)
  {
    operator delete(__p[0]);
    if (v36) {
      goto LABEL_41;
    }
    return 3;
  }
  if (!v36) {
    return 3;
  }
LABEL_41:
  uint64_t v4 = *((void *)this + 2);
LABEL_42:
  if (*(unsigned char *)(v4 + 100)
    && !ANEDebugInfo::GenerateAndSerializeDebugInfo(*((void *)this + 1), *(void *)(*((void *)this + 30) + 56), *((void *)this + 17) + 24, a2, *((void *)this + 6), *((void *)this + 4)))
  {
    BOOL v43 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v43) {
      ZinCompilerCore::DumpLayerStats(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    if (*(unsigned char *)(*((void *)this + 2) + 120)) {
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), @"CompilationFailure");
    }
  }
  return 0;
}

void sub_211198060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((void *)(v20 - 120));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunCodeGenObjectGen(ZinCompilerCore *this)
{
  uint64_t v1 = this;
  LOBYTE(v112) = 0;
  char v114 = 0;
  LOBYTE(v115) = 0;
  char v117 = 0;
  LOBYTE(v118) = 0;
  char v119 = 0;
  LOBYTE(v120) = 0;
  char v121 = 0;
  LOBYTE(v122) = 0;
  char v123 = 0;
  LOBYTE(v124) = 0;
  char v125 = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  memset(v128, 0, 24);
  long long v2 = *(_OWORD *)((char *)this + 216);
  char v111 = *((unsigned char *)this + 232);
  BOOL v3 = (uint64_t *)((char *)this + 64);
  long long v110 = v2;
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)this + 64, 5))
  {
    char v114 = 1;
    uint64_t v112 = 0;
    __int16 BarIdForBarIdType = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 5);
  }
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)v3, 6))
  {
    char v117 = 1;
    uint64_t v115 = 0;
    __int16 v116 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 6);
  }
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 471);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 456);
  }
  if (v5 == 7)
  {
    uint64_t v7 = v6 >= 0 ? (int *)(v4 + 448) : *(int **)(v4 + 448);
    int v8 = *v7;
    int v9 = *(int *)((char *)v7 + 3);
    BOOL v10 = v8 == 1634629956 && v9 == 1667853665;
    if (v10)
    {
      unsigned int v11 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 8);
      unsigned int v12 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 9);
      char v119 = 1;
      uint64_t v13 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 10);
      unint64_t v118 = (v13 << 32) | (ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 11) << 48) | ((unint64_t)v12 << 16) | v11;
      uint64_t v4 = *((void *)v1 + 2);
    }
  }
  if (*(float *)(v4 + 388) > 0.0)
  {
    int v120 = *(_DWORD *)(v4 + 388);
    char v121 = 1;
  }
  if (&v126 != (long long *)((char *)v1 + 112)) {
    std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>((uint64_t)&v126, *((void *)v1 + 14), *((void *)v1 + 15), (uint64_t)(*((void *)v1 + 15) - *((void *)v1 + 14)) >> 6);
  }
  char v125 = 1;
  int v124 = 0;
  uint64_t v14 = (ZinIrContext *)*((void *)v1 + 17);
  int v122 = *((_DWORD *)v14 + 21);
  char v123 = 1;
  int v107 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  uint64_t v104 = 0;
  std::string v105 = 0;
  unint64_t v106 = 0;
  v103[0] = (uint64_t)v103;
  v103[1] = (uint64_t)v103;
  v103[2] = 0;
  MemoryPools = (void *)ZinIrContext::GetMemoryPools(v14);
  PrivatePool = ZinIrMemoryPools::GetPrivatePool(MemoryPools, 2, 0);
  uint64_t v17 = (ZinIrMemoryPool *)ZinIrMemoryPools::GetPrivatePool(MemoryPools, 0, 0);
  uint64_t v102 = 0;
  if (*(_DWORD *)(*((void *)v1 + 17) + 84) == 1)
  {
    kdebug_trace();
    if (ZinIrContext::AppendShapeDependentTransformMap(*((ZinIrTarget ***)v1 + 17), v18))
    {
LABEL_84:
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), @"CompilationFailure");
LABEL_85:
      uint64_t v57 = 3;
      goto LABEL_86;
    }
    ZinIrMemoryPool::GetSections((uint64_t)PrivatePool, 4, &v80);
    uint64_t v74 = v81[2];
    std::__list_imp<ZinIrSection *>::clear(&v80);
    uint64_t v77 = (uint64_t)v17;
    ZinIrMemoryPool::GetSections((uint64_t)v17, 4, &v80);
    uint64_t v76 = v3;
    uint64_t v19 = v81[2];
    std::__list_imp<ZinIrSection *>::clear(&v80);
    std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100](v101, (uint64_t)v19 + 64);
    std::string v99 = 0;
    uint64_t v100 = 0;
    long long v98 = (uint64_t *)&v99;
    std::string v75 = v1;
    uint64_t v20 = *(void **)(*((void *)v1 + 17) + 1000);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v98, 0);
    std::string v99 = 0;
    uint64_t v100 = 0;
    long long v98 = (uint64_t *)&v99;
    float64x2_t v22 = (uint64_t *)*v20;
    std::string v78 = v20 + 1;
    if ((void *)*v20 != v20 + 1)
    {
      do
      {
        Hal = ZinIrTarget::GetHal(v21, (ZinIrTarget *)v22[4]);
        double v24 = (uint64_t *)Hal[58];
        uint64_t v79 = Hal + 59;
        if (v24 != Hal + 59)
        {
          do
          {
            size_t v25 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v24[4] + 32))(v24[4], 0, 0);
            ZinIrTensor::GetTensorFamily(v25, (uint64_t)&v80);
            long long v27 = v80;
            uint64_t v26 = v81;
            if (v80 != v81)
            {
              do
              {
                uint64_t v28 = *v27;
                if (!*v27) {
                  ZinAssertImpl("Const tensor nullptr \n");
                }
                uint64_t v29 = v28[12];
                uint64_t v31 = *(ZinIrOpLayer ***)(v29 + 112);
                uint64_t v30 = *(ZinIrOpLayer ***)(v29 + 120);
                while (v31 != v30)
                {
                  if (!(*(unsigned int (**)(void))(*(void *)*v31 + 120))()) {
                    goto LABEL_33;
                  }
                  (*(void (**)(void **__return_ptr))(*(void *)*v31 + 128))(__p);
                  size_t v32 = __p[0];
                  if (__p[1]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                  }
                  if (v32 == v28)
                  {
                    if (!ZinIrOpLayer::IsNELayer(*v31)) {
                      ZinAssertImpl("Only an NE layer can have a kernel.");
                    }
                    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)*v31 + 33));
                    unint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
                    (*(void (**)(ZinIrTensor **__return_ptr))(*(void *)*v31 + 128))(&v96);
                    ZinIrTensor::GetTensorKernelNESymbols(v96, __p);
                    uint64_t v39 = __p[0];
                    uint64_t v38 = __p[1];
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v97) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
                    }
                    if (NumNeededNEs > (v38 - v39) >> 3) {
                      ZinAssertImpl("Each enabled consumer core must have symbol");
                    }
                    (*(void (**)(ZinIrTensor **__return_ptr))(*(void *)*v31 + 128))(&v96);
                    ZinIrTensor::GetTensorKernelNESymbols(v96, __p);
                    if (v97) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
                    }
                    uint64_t v40 = (uint64_t *)__p[0];
                    uint64_t v41 = (uint64_t *)__p[1];
                    if (__p[0] != __p[1])
                    {
                      do
                      {
                        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v98, v40, v40);
                        ++v40;
                      }
                      while (v40 != v41);
                      uint64_t v40 = (uint64_t *)__p[0];
                    }
                    if (v40)
                    {
                      __p[1] = v40;
                      operator delete(v40);
                    }
                  }
                  else
                  {
LABEL_33:
                    uint64_t v33 = v28[13];
                    if (!v33 || (uint64_t v34 = *(void ***)(v33 + 40), v34 == *(void ***)(v33 + 48))) {
                      uint64_t v35 = 0;
                    }
                    else {
                      uint64_t v35 = *v34;
                    }
                    __p[0] = v35;
                    std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v98, (uint64_t *)__p, (uint64_t *)__p);
                  }
                  ++v31;
                }
                ++v27;
              }
              while (v27 != v26);
              long long v27 = v80;
            }
            if (v27)
            {
              std::string v81 = v27;
              operator delete(v27);
            }
            uint64_t v42 = (uint64_t *)v24[1];
            if (v42)
            {
              do
              {
                BOOL v43 = v42;
                uint64_t v42 = (uint64_t *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                BOOL v43 = (uint64_t *)v24[2];
                BOOL v10 = *v43 == (void)v24;
                double v24 = v43;
              }
              while (!v10);
            }
            double v24 = v43;
          }
          while (v43 != v79);
        }
        uint64_t v44 = (uint64_t *)v22[1];
        if (v44)
        {
          do
          {
            double v21 = v44;
            uint64_t v44 = (uint64_t *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            double v21 = (uint64_t *)v22[2];
            BOOL v10 = *v21 == (void)v22;
            float64x2_t v22 = v21;
          }
          while (!v10);
        }
        float64x2_t v22 = v21;
      }
      while (v21 != v78);
    }
    uint64_t v1 = v75;
    uint64_t v45 = *(ZinIrControlFlowGraph ***)(*((void *)v75 + 17) + 1000);
    uint64_t v80 = (void **)*((void *)v75 + 6);
    std::string v81 = (void **)v45;
    BOOL v3 = v76;
    int64x2_t v82 = v76;
    ZinIrControlFlowGraph::GetLiveOutLayers(v45, (uint64_t)&v96);
    uint64_t v83 = &v96;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)ZinIrBindings::GetLiveIOInfoMap(*((void *)v75 + 18), 1);
    v84.__r_.__value_.__l.__size_ = (std::string::size_type)ZinIrBindings::GetLiveIOInfoMap(*((void *)v75 + 18), 0);
    uint64_t v46 = (ZinIrContext *)*((void *)v75 + 17);
    if (*((_DWORD *)v46 + 21) == 1)
    {
      uint64_t v47 = (*(uint64_t (**)(ZinCompilerCore *))(*(void *)v75 + 40))(v75);
      uint64_t v46 = (ZinIrContext *)*((void *)v75 + 17);
    }
    else
    {
      uint64_t v47 = 0;
    }
    v84.__r_.__value_.__r.__words[2] = v47;
    uint64_t ShapeDependentTransformMap = ZinIrContext::GetShapeDependentTransformMap(v46);
    uint64_t v86 = (uint64_t)v74 + 64;
    long long v87 = v101;
    uint64_t v88 = &v98;
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v92 = 0;
    AOTMetadataGen::ZinAneAOTMetadataGen(v77, (uint64_t)&v80, (uint64_t)__p, &v102);
    int v49 = v48;
    if (v48)
    {
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v75 + 7), @"CompilationFailure");
    }
    else
    {
      uint64_t v50 = v105;
      if ((unint64_t)v105 >= v106)
      {
        char v52 = (std::string *)std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(&v104, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v92) < 0)
        {
          std::string::__init_copy_ctor_external(v105, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v51 = *(_OWORD *)__p;
          v105->__r_.__value_.__r.__words[2] = v92;
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
        }
        long long v53 = v93;
        long long v54 = v94;
        *(_OWORD *)&v50[2].__r_.__value_.__r.__words[1] = v95;
        *(_OWORD *)&v50[1].__r_.__value_.__r.__words[2] = v54;
        *(_OWORD *)&v50[1].__r_.__value_.__l.__data_ = v53;
        char v52 = v50 + 3;
      }
      std::string v105 = v52;
      kdebug_trace();
    }
    if (SHIBYTE(v92) < 0) {
      operator delete(__p[0]);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v96, v97);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v98, v99);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v101, (void *)v101[1]);
    uint64_t v17 = (ZinIrMemoryPool *)v77;
    if (v49) {
      goto LABEL_85;
    }
  }
  kdebug_trace();
  uint64_t v55 = *((void *)v1 + 17);
  ComputeMutableProgram = (ZinComputeMutableProgramWrapper *)ZinObjectGeneration::GetComputeMutableProgram(*((ZinObjectGeneration **)v1 + 30));
  if (ZinCodeGeneration(v55, ComputeMutableProgram, v17, *(_DWORD *)(*((void *)v1 + 2) + 96), (uint64_t)v1 + 264, *((CFArrayRef **)v1 + 32), (uint64_t)&v110, (uint64_t)&v107, (uint64_t)&v104, (uint64_t)v103))goto LABEL_84; {
  if (HIDWORD(v109))
  }
    ZinGenerateCoreAnalyticsTdLatencyOverflow();
  LODWORD(__p[0]) = 0;
  if (ZinIrCompilerParameters::getEnforcedTdLatency(*((ZinIrCompilerParameters **)v1 + 2), (float *)__p))
  {
    uint64_t v59 = *((void *)v1 + 2);
    if (*(char *)(v59 + 95) < 0)
    {
      long long v60 = *(char **)(v59 + 72);
      uint64_t v61 = *(void *)(v59 + 80);
    }
    else
    {
      long long v60 = (char *)(v59 + 72);
      uint64_t v61 = *(unsigned __int8 *)(v59 + 95);
    }
    if (v61 >= 4)
    {
      std::string::size_type v62 = &v60[v61];
      std::string v63 = v60;
      do
      {
        std::string v64 = (char *)memchr(v63, 110, v61 - 3);
        if (!v64) {
          break;
        }
        if (*(_DWORD *)v64 == 825242478)
        {
          if (v64 != v62 && v64 - v60 != -1 && *(float *)__p < (float)DWORD2(v109)) {
            ZinAssertImpl("Latency for some tasks (%.0f us) is too large (>%.0f us) ", (float)DWORD2(v109), *(float *)__p);
          }
          break;
        }
        std::string v63 = v64 + 1;
        uint64_t v61 = v62 - (unsigned char *)v63;
      }
      while (v62 - (unsigned char *)v63 >= 4);
    }
  }
  kdebug_trace();
  kdebug_trace();
  if (*(unsigned char *)(*((void *)v1 + 2) + 532))
  {
    if (v111) {
      char v111 = 0;
    }
    if (v114) {
      char v114 = 0;
    }
    if (v117) {
      char v117 = 0;
    }
    if (v119) {
      char v119 = 0;
    }
    if (v121) {
      char v121 = 0;
    }
    if (v125) {
      char v125 = 0;
    }
    std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*>((uint64_t)&v126, 0, 0, 0);
    *((void *)&v127 + 1) = 0;
    std::vector<ThreadModeledPerformance>::__assign_with_size[abi:ne180100]<ThreadModeledPerformance const*,ThreadModeledPerformance const*>((char *)v128, 0, 0, 0);
  }
  uint64_t v80 = (void **)&v107;
  std::string v81 = (void **)&v110;
  int64x2_t v82 = &v104;
  uint64_t v65 = *((void *)v1 + 17);
  uint64_t v66 = *(void *)(v65 + 1000);
  if (*(void *)(v66 + 360) == *(void *)(v66 + 352)) {
    ZinAssertImpl("Must run scheduler first");
  }
  uint64_t v83 = (ZinIrTensor **)(v66 + 352);
  if (*(char *)(v65 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(v65 + 24), *(void *)(v65 + 32));
    uint64_t v65 = *((void *)v1 + 17);
  }
  else
  {
    long long v67 = *(_OWORD *)(v65 + 24);
    v84.__r_.__value_.__r.__words[2] = *(void *)(v65 + 40);
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v67;
  }
  LOBYTE(ShapeDependentTransformMap) = *(unsigned char *)(v65 + 48);
  uint64_t v86 = v102;
  BOOL v68 = ZinIrTarget::GetHal((uint64_t *)v65, *(ZinIrTarget **)(v65 + 160));
  uint64_t v69 = (*(uint64_t (**)(uint64_t *))(*v68 + 16))(v68);
  uint64_t v70 = *((void *)v1 + 17);
  long long v87 = (uint64_t *)v69;
  uint64_t v88 = (uint64_t **)(v70 + 176);
  uint64_t v89 = v103;
  int v90 = *(_DWORD *)(v70 + 52);
  if ((*(unsigned int (**)(void, void ***, uint64_t, void, void))(**((void **)v1 + 30) + 24))(*((void *)v1 + 30), &v80, (uint64_t)v1 + 144, *((void *)v1 + 6), *((void *)v1 + 32)))
  {
    ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), @"CompilationFailure");
    uint64_t v57 = 3;
  }
  else
  {
    if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)v3, 2))
    {
      uint64_t v71 = *(void *)(*((void *)v1 + 17) + 72);
      int v72 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 2);
      ZinIrConstManager::SetMutableBarId(v71, v72);
    }
    uint64_t v73 = *((void *)v1 + 2);
    if (*(unsigned char *)(v73 + 102)
      && !ANEAnalytics::DumpAnalyticsBufferToFile(*(void *)(*((void *)v1 + 30) + 56), *((void *)v1 + 17) + 24, v73 + 24))
    {
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), @"CompilationFailure");
    }
    kdebug_trace();
    uint64_t v57 = 0;
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
LABEL_86:
  std::__list_imp<std::unique_ptr<ZinOperation>>::clear(v103);
  uint64_t v80 = (void **)&v104;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100](&v80);
  if (v128[0])
  {
    v128[1] = v128[0];
    operator delete(v128[0]);
  }
  uint64_t v80 = (void **)&v126;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100](&v80);
  return v57;
}

void sub_211198CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a43, (void *)a44);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a46, (void *)a47);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a49, (void *)a50);
  std::__list_imp<std::unique_ptr<ZinOperation>>::clear(&a53);
  a53 = (uint64_t)&a56;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  ThreadArgumentInfo::~ThreadArgumentInfo((ThreadArgumentInfo *)&a64);
  _Unwind_Resume(a1);
}

void ThreadArgumentInfo::~ThreadArgumentInfo(ThreadArgumentInfo *this)
{
  long long v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void **)((char *)this + 112);
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ZinCompilerCore::SetLiveIOAttributes(ZinCompilerCore *this)
{
  long long v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = &v27;
  double v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  double v23 = (uint64_t *)&v24;
  uint64_t v20 = &v21;
  double v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v16[1] = 0;
  uint64_t v17 = &v18;
  uint64_t v15 = v16;
  v16[0] = 0;
  uint64_t v2 = *((void *)this + 6);
  int SinglePlaneUncompressedDescriptor = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((void *)this + 18), 0, (uint64_t)&v26, &v23);
  uint64_t v4 = *((void *)this + 7);
  if (SinglePlaneUncompressedDescriptor) {
    goto LABEL_4;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(void *)(v4 + 40), 0, &v26, v2);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(void *)(*((void *)this + 7) + 40), 0, &v23, v2);
  int MultiPlaneUncompressedDescriptor = ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*((void *)this + 18), 0, (uint64_t)&v20);
  uint64_t v4 = *((void *)this + 7);
  if (MultiPlaneUncompressedDescriptor) {
    goto LABEL_4;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinMultiPlaneLinearIODescriptor>(*(void *)(v4 + 40), 0, &v20, v2);
  int CompressedDescriptor = ZinIrBindings::GetCompressedDescriptor(*((void *)this + 18), 0, (uint64_t)&v17);
  uint64_t v4 = *((void *)this + 7);
  if (CompressedDescriptor) {
    goto LABEL_4;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinTiledCompressedIODescriptor>(*(void *)(v4 + 40), 0, &v17, v2);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  long long v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = &v27;
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  double v24 = 0;
  uint64_t v25 = 0;
  double v23 = (uint64_t *)&v24;
  int v10 = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((void *)this + 18), 2, (uint64_t)&v26, &v23);
  uint64_t v4 = *((void *)this + 7);
  if (v10)
  {
    CFStringRef v7 = @"InvalidState";
    goto LABEL_5;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(void *)(v4 + 40), 2, &v26, v2);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(void *)(*((void *)this + 7) + 40), 2, &v23, v2);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  long long v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = &v27;
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  double v24 = 0;
  uint64_t v25 = 0;
  double v23 = (uint64_t *)&v24;
  int v11 = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((void *)this + 18), 1, (uint64_t)&v26, &v23);
  uint64_t v4 = *((void *)this + 7);
  if (v11) {
    goto LABEL_11;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(void *)(v4 + 40), 1, &v26, v2 + 24);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(void *)(*((void *)this + 7) + 40), 1, &v23, v2 + 24);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v20, v21);
  double v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = &v21;
  int v12 = ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*((void *)this + 18), 1, (uint64_t)&v20);
  uint64_t v4 = *((void *)this + 7);
  if (v12)
  {
LABEL_11:
    CFStringRef v7 = @"InvalidOutput";
    goto LABEL_5;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinMultiPlaneLinearIODescriptor>(*(void *)(v4 + 40), 1, &v20, v2 + 24);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v17, v18);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = &v18;
  int v13 = ZinIrBindings::GetCompressedDescriptor(*((void *)this + 18), 1, (uint64_t)&v17);
  uint64_t v4 = *((void *)this + 7);
  if (v13)
  {
LABEL_4:
    CFStringRef v7 = @"InvalidInput";
  }
  else
  {
    ZinIrNetworkStatus::AddLiveIO<ZinTiledCompressedIODescriptor>(*(void *)(v4 + 40), 1, &v17, v2 + 24);
    int LiveInParamDescriptor = ZinIrBindings::GetLiveInParamDescriptor(*((void *)this + 18), (uint64_t)&v15);
    uint64_t v4 = *((void *)this + 7);
    if (!LiveInParamDescriptor)
    {
      ZinIrNetworkStatus::AddLiveInputParam(*(void *)(v4 + 40), &v15, v2);
      uint64_t v8 = 0;
      goto LABEL_6;
    }
    CFStringRef v7 = @"InvalidInputParam";
  }
LABEL_5:
  ZinIrUnitStatus::SetError((CFArrayRef *)v4, v7);
  uint64_t v8 = 3;
LABEL_6:
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v20, v21);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  return v8;
}

void sub_211199198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, void *a20)
{
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&a16, a17);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(v20 - 72, *(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

void ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention(ZinMirPEReductionAccumulationRetention *this)
{
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 3) = &unk_26C34DA98;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

uint64_t std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vdeallocate((void **)a1);
    if (a4 >> 58) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = v18 - 64;
      uint64_t result = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v18 - 56);
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_211199390(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_211199398(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 24;
  do
  {
    uint64_t v7 = v6 - 24;
    *(void *)a4 = *(void *)(v6 - 24);
    if (a4 != v6 - 24)
    {
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(v6 + 16);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,void *> *>>((void *)(a4 + 8), *(uint64_t **)v6, 0);
    }
    uint64_t v8 = *(void *)(v6 + 24);
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(v6 + 32);
    *(void *)(a4 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = v8;
    a4 += 64;
    v6 += 64;
  }
  while (v7 + 64 != v5);
  return v5;
}

void std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        *((_DWORD *)v8 + 4) = *((_DWORD *)v4 + 4);
        *((_DWORD *)v8 + 6) = *((_DWORD *)v4 + 6);
        std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
        v8[7] = (void *)v4[7];
        uint64_t v10 = (void **)*v8;
        unint64_t v11 = *((int *)v8 + 4);
        v8[1] = (void *)v11;
        inserted = (void *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
        uint64_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_multi<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>(a1, (uint64_t)(v4 + 2));
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_211199538(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_211199554(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_multi<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>((uint64_t)a1, a2, (uint64_t)v8);
  BOOL v3 = (void *)v8[0];
  uint64_t v5 = (_DWORD *)(v8[0] + 16);
  unint64_t v4 = *(int *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  inserted = (void *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v3, inserted);
  return v3;
}

void sub_2111995C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t result = std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]((uint64_t)(v6 + 2), a2);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((int *)v6 + 4);
  return result;
}

void sub_21119965C(_Unwind_Exception *a1)
{
  *int v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v21 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v11;
  char v20 = &v10[72 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    unint64_t v11 = v19;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  int v13 = &v10[72 * v4];
  long long v14 = *(long long *)((char *)a2 + 56);
  long long v15 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  uint64_t v19 = v11 + 3;
  std::vector<ZinIrSymbolData>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<ZinIrSymbolData>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_2111997C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinIrSymbolData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinIrSymbolData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      long long v12 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = v11;
      v9 -= 72;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<ZinIrSymbolData>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ZinIrSymbolData>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 9;
      *(void *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vdeallocate((void **)a1);
    if (a4 >> 58) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = v18 - 64;
      uint64_t result = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v18 - 56);
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_211199B50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_211199B58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      std::unordered_map<ZinIrDimension,ZinLiveInputParamDescriptor>::unordered_map(a4 + v7 + 8, a2 + v7 + 8);
      uint64_t v10 = *(void *)(a2 + v7 + 48);
      *(unsigned char *)(v8 + 56) = *(unsigned char *)(a2 + v7 + 56);
      *(void *)(v8 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = v10;
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_211199BE8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<ThreadModeledPerformance>::__assign_with_size[abi:ne180100]<ThreadModeledPerformance const*,ThreadModeledPerformance const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x124924924924924) {
      unint64_t v12 = 0x249249249249249;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v13 = &v9[v17];
  return result;
}

char *std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void std::__list_imp<std::unique_ptr<ZinOperation>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      std::__list_imp<std::unique_ptr<ZinOperation>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::unique_ptr<ZinOperation>>::__delete_node[abi:ne180100]<>(int a1, void *__p)
{
  uint64_t v3 = __p[2];
  __p[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }

  operator delete(__p);
}

void std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C32EA98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32EA98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrKernel ***a3)
{
  uint64_t v4 = *a3;
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (ZinIrOpLayer::IsNoOp((ZinIrOpLayer *)v4, (uint64_t *)&__p))
  {
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    return 0;
  }
  char v5 = (*((uint64_t (**)(ZinIrKernel **))*v4 + 14))(v4);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = (*((uint64_t (**)(ZinIrKernel **, void, void))*v4 + 4))(v4, 0, 0);
    ElementCFIndex Count = ZinTensorDimensions::GetElementCount((ZinTensorDimensions *)(v6 + 48));
    *(void *)(*(void *)(a1 + 8) + 8) += ElementCount;
    if (ZinIrOpLayer::IsTensorFmtQuantized((ZinIrOpLayer *)v4)) {
      *(void *)(*(void *)(a1 + 8) + 40) += ElementCount;
    }
    uint64_t v8 = v4[17];
    if (v8)
    {
      ZinIrKernel::GetBiasDimensions(v8, (uint64_t)&__p);
      uint64_t v9 = (void)v15 * (void)__p * v16 * v17 * v18;
      **(void **)(a1 + 8) += v9;
      int WeightFormat = ZinIrKernel::GetWeightFormat(v4[17]);
      if ((WeightFormat - 1) > 1)
      {
        if ((WeightFormat - 7) > 0x14)
        {
LABEL_15:
          uint64_t v12 = *((void *)v4[17] + 73);
          if (v12
            && (*(unsigned int (**)(void))(**(void **)(v12 + 136) + 184))(*(void *)(v12 + 136)))
          {
            *(void *)(*(void *)(a1 + 8) + 24) += v9;
          }
          return 0;
        }
        uint64_t v11 = (void *)(*(void *)(a1 + 8) + 16);
      }
      else
      {
        uint64_t v11 = (void *)(*(void *)(a1 + 8) + 32);
      }
      *v11 += v9;
      goto LABEL_15;
    }
  }
  return 0;
}

void sub_21119A0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t *std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_21119A18C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_hint_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_hint_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_18;
  }
  uint64_t v11 = *a5;
  uint64_t v12 = a2[4];
  if (*a5) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (v11) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14)
    {
      if (!v12) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
LABEL_18:
    uint64_t v16 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v18 = a2;
      if (!v16)
      {
LABEL_51:
        *a3 = a2;
        return a2;
      }
    }
    else
    {
      if (v16)
      {
        uint64_t v17 = (void *)*a2;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)v17[1];
        }
        while (v17);
      }
      else
      {
        uint64_t v22 = a2;
        do
        {
          uint64_t v18 = (void *)v22[2];
          BOOL v13 = *v18 == (void)v22;
          uint64_t v22 = v18;
        }
        while (v13);
      }
      uint64_t v23 = v18[4];
      uint64_t v24 = *a5;
      if (v23) {
        BOOL v25 = v24 == 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25)
      {
        if (v23) {
          BOOL v26 = v24 == 0;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26) {
          goto LABEL_47;
        }
        if (!v16) {
          goto LABEL_51;
        }
      }
      else
      {
        char v27 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v23 + 160), (void **)(v24 + 160));
        if ((v27 & 0x80) == 0) {
          goto LABEL_47;
        }
        if (!*a2) {
          goto LABEL_51;
        }
      }
    }
    *a3 = v18;
    return v18 + 1;
  }
  char v15 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v11 + 160), (void **)(v12 + 160));
  if (v15 < 0) {
    goto LABEL_18;
  }
  uint64_t v12 = a2[4];
  uint64_t v11 = *a5;
  if (!v12)
  {
LABEL_25:
    if (v12 && !v11) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
LABEL_15:
  if (!v11) {
    goto LABEL_25;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v12 + 160), (void **)(v11 + 160)) & 0x80) == 0)
  {
LABEL_31:
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
LABEL_27:
  a4 = a2 + 1;
  uint64_t v19 = a2[1];
  if (v19)
  {
    char v20 = (void *)a2[1];
    do
    {
      char v21 = v20;
      char v20 = (void *)*v20;
    }
    while (v20);
  }
  else
  {
    uint64_t v29 = a2;
    do
    {
      char v21 = (void *)v29[2];
      BOOL v13 = *v21 == (void)v29;
      uint64_t v29 = v21;
    }
    while (!v13);
  }
  if (v21 == v9) {
    goto LABEL_66;
  }
  uint64_t v30 = *a5;
  uint64_t v31 = v21[4];
  if (*a5) {
    BOOL v32 = v31 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  if (v32)
  {
    if (v30 && !v31) {
      goto LABEL_66;
    }
  }
  else
  {
    char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v30 + 160), (void **)(v31 + 160));
    if (v33 < 0)
    {
      uint64_t v19 = *a4;
LABEL_66:
      if (v19)
      {
        *a3 = v21;
        return v21;
      }
      else
      {
        *a3 = a2;
      }
      return a4;
    }
  }
LABEL_47:

  return std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinMultiPlaneLinearIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinMultiPlaneLinearIODescriptor>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinTiledCompressedIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinTiledCompressedIODescriptor>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ZinCompilerCore::OptimizeOpLayerGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunMirPrepareIr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunMirBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunTaskScheduler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinCompilerCore::ValidateMirInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunPieceGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunCPAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinCompilerCore::RunRegisterSpilling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunMultiSegmentSpilling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunMemCacheAllocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::SetBinaryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::SetSplitRowCompute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::DumpDebugProfilingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::SetTDExecutionTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunCachePrefetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunKernelBufferControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::RunComputeAddressTranslationRegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCompilerCore::DumpLayerStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s file creation is failed!\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "CoreAnalytics data collection failed.", a5, a6, a7, a8, 0);
}

BOOL ZinIrOptTreeCollapser::IsTreeRoot(ZinIrOptTreeCollapser *this, ZinIrOpLayer *a2)
{
  if (*(void *)(*((void *)this + 8) + 8) != 0x100000005) {
    return 0;
  }
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v5, *((const void **)this + 14), *((void *)this + 15), (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3);
  if (v6 - v5 == 8)
  {
    uint64_t v2 = *(void *)(*(void *)v5 + 64);
    BOOL v3 = *(_DWORD *)(v2 + 8) != 5 || *(_DWORD *)(v2 + 12) != 1;
  }
  else
  {
    BOOL v3 = 1;
    if (!v5) {
      return v3;
    }
  }
  uint64_t v6 = v5;
  operator delete(v5);
  return v3;
}

void ZinIrOptTreeCollapser::GetTreeNodes(ZinIrOptTreeCollapser *this@<X0>, uint64_t a2@<X8>)
{
  v41[1] = *MEMORY[0x263EF8340];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v39 = (uint64_t *)v40;
  long long v38 = 0u;
  memset(v37, 0, sizeof(v37));
  v41[0] = (uint64_t)this;
  std::list<ZinIrOpLayer *>::list(v35, (uint64_t)v41, 1);
  std::deque<std::list<ZinIrOpLayer *>>::push_back(v37, v35);
  std::__list_imp<ZinIrSection *>::clear(v35);
  for (uint64_t i = *((void *)&v38 + 1); *((void *)&v38 + 1); uint64_t i = *((void *)&v38 + 1))
  {
    v41[0] = 0;
    uint64_t v4 = *((void *)&v37[0] + 1);
    unint64_t v5 = i + v38 - 1;
    unint64_t v6 = v5 / 0xAA;
    unint64_t v7 = v5 % 0xAA;
    unint64_t v8 = *(void *)(*(void *)(*(void *)(*((void *)&v37[0] + 1) + 8 * v6) + 24 * v7 + 8) + 16);
    v41[0] = v8;
    BOOL v9 = v40[0];
    if (!v40[0]) {
      goto LABEL_12;
    }
    uint64_t v10 = v40;
    do
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      unint64_t v13 = v9[4];
      if (v13 >= v8) {
        uint64_t v10 = (void **)v9;
      }
      else {
        ++v9;
      }
      BOOL v9 = (void *)*v9;
    }
    while (v9);
    if (v10 == v40) {
      goto LABEL_12;
    }
    if (v13 < v8) {
      uint64_t v11 = v12;
    }
    if (v8 >= v11[4])
    {
      if (*((_DWORD *)v10 + 10) == 1)
      {
        *((_DWORD *)v10 + 10) = 2;
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, v41, v41);
        uint64_t v4 = *((void *)&v37[0] + 1);
        unint64_t v30 = *((void *)&v38 + 1) + v38 - 1;
        unint64_t v6 = v30 / 0xAA;
        unint64_t v7 = v30 % 0xAA;
      }
      uint64_t v31 = *(void *)(v4 + 8 * v6) + 24 * v7;
      BOOL v32 = *(uint64_t **)(v31 + 8);
      uint64_t v33 = *v32;
      *(void *)(v33 + 8) = v32[1];
      *(void *)v32[1] = v33;
      --*(void *)(v31 + 16);
      operator delete(v32);
      if (!*(void *)(*(void *)(*((void *)&v37[0] + 1)
                                  + 8 * ((*((void *)&v38 + 1) + (void)v38 - 1) / 0xAAuLL))
                      + 24 * ((*((void *)&v38 + 1) + (void)v38 - 1) % 0xAAuLL)
                      + 16))
        std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::pop_back(v37);
    }
    else
    {
LABEL_12:
      v35[0] = v41;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v39, (unint64_t *)v41, (uint64_t)&std::piecewise_construct, v35)+ 10) = 1;
      v35[0] = v35;
      v35[1] = v35;
      uint64_t v36 = 0;
      uint64_t v15 = *(void *)(v41[0] + 88);
      uint64_t v14 = *(void *)(v41[0] + 96);
      if (v15 != v14)
      {
        uint64_t v16 = 0;
        uint64_t v17 = v35;
        uint64_t v18 = v40[0];
        do
        {
          uint64_t v19 = *(void **)v15;
          unint64_t v20 = *(void *)(*(void *)v15 + 120) - *(void *)(*(void *)v15 + 112);
          if (v20 <= 8 && v19[12] != v19[11])
          {
            uint64_t v21 = v19[8];
            if (*(_DWORD *)(v21 + 8) == 5)
            {
              int v22 = *(_DWORD *)(v21 + 12);
              if (v20 == 8 && v22 == 1)
              {
                if (!v18) {
                  goto LABEL_32;
                }
                uint64_t v24 = v40;
                BOOL v25 = v18;
                do
                {
                  BOOL v26 = v25;
                  char v27 = v24;
                  unint64_t v28 = v25[4];
                  if (v28 >= (unint64_t)v19) {
                    uint64_t v24 = (void **)v25;
                  }
                  else {
                    ++v25;
                  }
                  BOOL v25 = (void *)*v25;
                }
                while (v25);
                if (v24 == v40) {
                  goto LABEL_32;
                }
                if (v28 < (unint64_t)v19) {
                  BOOL v26 = v27;
                }
                if ((unint64_t)v19 < v26[4])
                {
LABEL_32:
                  uint64_t v29 = operator new(0x18uLL);
                  v29[1] = v35;
                  v29[2] = v19;
                  *uint64_t v29 = v17;
                  v17[1] = v29;
                  ++v16;
                  uint64_t v17 = (void **)v29;
                  v35[0] = v29;
                  uint64_t v36 = v16;
                }
              }
            }
          }
          v15 += 8;
        }
        while (v15 != v14);
        if (v16) {
          std::deque<std::list<ZinIrOpLayer *>>::push_back(v37, (uint64_t)v35);
        }
      }
      std::__list_imp<ZinIrSection *>::clear(v35);
    }
  }
  std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](v37);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v39, v40[0]);
}

void sub_21119B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
}

uint64_t ZinIrOptTreeCollapser::CollapseTreeTransform(ZinIrOptTreeCollapser *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  if (!ZinIrOptTreeCollapser::IsTreeRoot(a2, a2)) {
    return 0;
  }
  ZinIrOptTreeCollapser::GetTreeNodes(a2, (uint64_t)v7);
  if (v7[2] == 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ZinIrOptTreeCollapser::CollapseTree((uint64_t)this, a2, v7);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v7, (void *)v7[1]);
  return v5;
}

void sub_21119B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ZinIrOptTreeCollapser::CollapseTree(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[2];
  unint64_t v7 = *(std::__shared_weak_count **)((*(uint64_t (**)(void *, void, void))(*a2 + 40))(a2, 0, 0)
                                    + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v7;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v42 = v43;
  ZinObjectNameFactory::ZinObjectNameFactory(v40, a2 + 3);
  uint64_t v37 = 0;
  long long v38 = 0;
  uint64_t v39 = 0;
  unint64_t v8 = a3 + 1;
  BOOL v9 = (uint64_t *)*a3;
  if ((void *)*a3 == a3 + 1)
  {
    uint64_t v29 = 0;
    unint64_t v28 = 0;
  }
  else
  {
    uint64_t v32 = v6;
    uint64_t v10 = (void *)(a1 + 64);
    uint64_t v34 = (uint64_t **)(a1 + 104);
    do
    {
      uint64_t v36 = (void *)v9[4];
      uint64_t v35 = &v36;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v10, (unint64_t **)&v35);
      uint64_t v12 = v11 + 3;
      if (!v11) {
        uint64_t v12 = v34;
      }
      unint64_t v13 = (uint64_t **)*v12;
      uint64_t v14 = (uint64_t **)v12[1];
      while (v13 != v14)
      {
        uint64_t v15 = *v13;
        if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, *v13))
        {
          uint64_t v16 = v38;
          if (v38 >= v39)
          {
            uint64_t v18 = ((char *)v38 - (unsigned char *)v37) >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v19 = ((char *)v39 - (unsigned char *)v37) >> 2;
            if (v19 <= v18 + 1) {
              unint64_t v19 = v18 + 1;
            }
            if ((unint64_t)((char *)v39 - (unsigned char *)v37) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v39, v20);
            }
            else {
              uint64_t v21 = 0;
            }
            int v22 = (uint64_t *)&v21[8 * v18];
            *int v22 = *v15;
            uint64_t v17 = v22 + 1;
            uint64_t v24 = (char *)v37;
            uint64_t v23 = (char *)v38;
            if (v38 != v37)
            {
              do
              {
                uint64_t v25 = *((void *)v23 - 1);
                v23 -= 8;
                *--int v22 = v25;
              }
              while (v23 != v24);
              uint64_t v23 = (char *)v37;
            }
            uint64_t v37 = v22;
            long long v38 = v17;
            uint64_t v39 = (uint64_t *)&v21[8 * v20];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            uint64_t *v38 = *v15;
            uint64_t v17 = v16 + 1;
          }
          long long v38 = v17;
        }
        ++v13;
      }
      BOOL v26 = (uint64_t *)v9[1];
      if (v26)
      {
        do
        {
          unint64_t v8 = v26;
          BOOL v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v8 = (uint64_t *)v9[2];
          BOOL v27 = *v8 == (void)v9;
          BOOL v9 = v8;
        }
        while (!v27);
      }
      BOOL v9 = v8;
    }
    while (v8 != a3 + 1);
    uint64_t v29 = v37;
    unint64_t v28 = v38;
    uint64_t v6 = v32;
  }
  Hal = ZinIrTarget::GetHal(v8, *(ZinIrTarget **)(v6 + 160));
  if ((unint64_t)(((char *)v28 - v29) >> 3) <= *(void *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal)
                                                                 + 752))
  {
    ZinOpLayerUtils::GetTensorInfoFromLayers((uint64_t *)&v37, (uint64_t)&v36);
    ZinBuilder::CreateElementWiseLayer();
  }
  if (v37)
  {
    long long v38 = (uint64_t *)v37;
    operator delete(v37);
  }
  v40[0] = &unk_26C34DA98;
  if (v41 < 0) {
    operator delete((void *)v40[1]);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v42, v43[0]);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  return 0;
}

void sub_21119BABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a17);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  *(void *)(v32 - 152) = &unk_26C34DA98;
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v32 - 112, *(void **)(v32 - 104));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrOptTreeCollapser::Transform(ZinIrOptTreeCollapser *this, ZinIrControlFlowGraph *a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26C380F58;
  v4[1] = ZinIrOptTreeCollapser::CollapseTreeTransform;
  v4[3] = v4;
  uint64_t v2 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v4, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_21119BC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::list<ZinIrOpLayer *>::list(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * a3;
    unint64_t v7 = a1;
    do
    {
      unint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = *(void *)(a2 + 8 * v5);
      v8[1] = a1;
      void v8[2] = v9;
      *unint64_t v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      unint64_t v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_21119BCF0(_Unwind_Exception *a1)
{
  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::deque<std::list<ZinIrOpLayer *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::list<ZinIrOpLayer *>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (uint64_t *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  uint64_t result = std::construct_at[abi:ne180100]<std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>*>(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<std::list<ZinIrOpLayer *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      BOOL v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64x2_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21119C080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::construct_at[abi:ne180100]<std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>*>(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  std::list<ZinIrOpLayer *>::splice((uint64_t)a1, a1, a2);
  return a1;
}

void *std::deque<std::list<ZinIrOpLayer *>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::list<ZinIrOpLayer *>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (void *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  uint64_t result = std::list<ZinIrOpLayer *>::list(v8, a2);
  ++a1[5];
  return result;
}

void *Layer2TDMapper::SourceLayer::SourceLayer<std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>(void *a1, void *a2)
{
  a1[1] = 0;
  BOOL v3 = (char **)(a1 + 1);
  *a1 = &unk_26C359A08;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a1 + 3;
    do
    {
      uint64_t v8 = v5[4];
      if (v8)
      {
        if ((unint64_t)v6 >= *v7)
        {
          uint64_t v9 = (v6 - *v3) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v10 = *v7 - (void)*v3;
          uint64_t v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
            uint64_t v11 = v9 + 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v12);
          }
          else {
            uint64_t v13 = 0;
          }
          BOOL v14 = &v13[8 * v9];
          *(void *)BOOL v14 = v8;
          uint64_t v6 = v14 + 8;
          uint64_t v16 = (char *)a1[1];
          uint64_t v15 = (char *)a1[2];
          if (v15 != v16)
          {
            do
            {
              uint64_t v17 = *((void *)v15 - 1);
              v15 -= 8;
              *((void *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            uint64_t v15 = *v3;
          }
          a1[1] = v14;
          a1[2] = v6;
          a1[3] = &v13[8 * v12];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v8;
          v6 += 8;
        }
        a1[2] = v6;
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v5[2];
          BOOL v20 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v20);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_21119C330(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinCodegen::SetSecondarySourceDMA<10u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, uint64_t a11)
{
  uint64_t v76 = a2;
  uint64_t v11 = *(void *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetResultDMA<7u>(result, v22, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  uint64_t BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection((ZinIrSymbol *)v11);
  int v19 = *(_DWORD *)(v11 + 208);
  ZinAneTd<10u>::SetL2Src2DmaFormat(a2, v19);
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
    && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  ZinAneTdHw_v10::AddRelocInfo((uint64_t *)(a2 + 8), v11 + 160, 4938, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
  *(_DWORD *)(a2 + 340) = *(_DWORD *)(a2 + 340) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
  *(_DWORD *)(a2 + 3std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = *(_DWORD *)(a2 + 348) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
  *(_DWORD *)(a2 + 3std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = *(_DWORD *)(a2 + 348) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
  switch(v19)
  {
    case 1:
      unsigned int v20 = *(_DWORD *)(a2 + 444) & 0xFFFFCFFC | 0x1000;
      break;
    case 2:
      unsigned int v20 = *(_DWORD *)(a2 + 444) & 0xFFFFCFFC;
      break;
    case 3:
      unsigned int v43 = *(_DWORD *)(a2 + 444) & 0xFFFFCFCC;
      int v44 = 8241;
      goto LABEL_29;
    case 4:
      unsigned int v20 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC | 1;
      break;
    case 5:
      unsigned int v43 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
      int v44 = 257;
      goto LABEL_29;
    case 6:
      unsigned int v43 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
      int v44 = 17;
      goto LABEL_29;
    case 7:
      unsigned int v43 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
      int v44 = 273;
      goto LABEL_29;
    case 8:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      ZinCodegen::SetSecondarySourceDMA<10u>(result, v45, v46, v47, v48, v49, v50, v51);
      return 0;
    case 9:
      unsigned int v52 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
      if (!a11 && !a10) {
        goto LABEL_27;
      }
      int v53 = 4401;
      goto LABEL_31;
    case 10:
      unsigned int v52 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
      if (a11 || a10) {
        int v53 = 305;
      }
      else {
LABEL_27:
      }
        int v53 = 8497;
LABEL_31:
      unsigned int v20 = v52 | v53;
      break;
    case 11:
      unsigned int v43 = *(_DWORD *)(a2 + 444) & 0xFFFFFFCF;
      int v44 = 12547;
LABEL_29:
      unsigned int v20 = v43 | v44;
      break;
    default:
      return 0;
  }
  *(_DWORD *)(a2 + 444) = v20;
  unint64_t v54 = ZinTensorDescriptorDmaInterleave(v11 + 208);
  *(_DWORD *)(a2 + 444) = *(_DWORD *)(a2 + 444) & 0xF0FFFFFF | ((v54 & 0xF) << 24);
  BOOL result = CheckRegValueRange(v54, (unsigned int *)(*(void *)(a2 + 992) + 584));
  if (result)
  {
    uint64_t v55 = *(void *)(a3 + 840);
    uint64_t v56 = *(void *)(a3 + 832);
    uint64_t v57 = *(void *)(a3 + 824);
    unint64_t v58 = *(void *)(a3 + 816) / a6;
    *(_DWORD *)(a2 + 384) = *(_DWORD *)(a2 + 384) & 0x3F | (v58 << 6);
    BOOL result = CheckRegValueRange(v58, (unsigned int *)(*(void *)(a2 + 992) + 432));
    if (result)
    {
      *(_DWORD *)(a2 + 388) = *(_DWORD *)(a2 + 388) & 0x3F | ((v57 / a6) << 6);
      BOOL result = CheckRegValueRange(v57 / a6, (unsigned int *)(*(void *)(a2 + 992) + 440));
      if (result)
      {
        *(_DWORD *)(a2 + 392) = *(_DWORD *)(a2 + 392) & 0x3F | ((v56 / a6) << 6);
        BOOL result = CheckRegValueRange(v56 / a6, (unsigned int *)(*(void *)(a2 + 992) + 448));
        if (result)
        {
          *(_DWORD *)(a2 + 396) = *(_DWORD *)(a2 + 396) & 0x3F | ((v55 / a6) << 6);
          BOOL result = CheckRegValueRange(v55 / a6, (unsigned int *)(*(void *)(a2 + 992) + 456));
          if (result)
          {
            uint64_t v59 = *(void *)(a3 + 848);
            ZinCodegen::SetDmaWrap<10u>(a2, v59);
            ZinIrSymbol::GetWrapInfo(v59, v74);
            if (v75) {
              ZinAneTd<10u>::SetTileDmaSrc2WrapCfg(a2, v74[0]);
            }
            if ((a8 & 1) != 0
              || (*(_DWORD *)(a2 + 340) |= 1u, (a9 & 1) != 0)
              || (*(_DWORD *)(a2 + 628) = *(_DWORD *)(a2 + 628) & 0xFFFFF0FF | ((v54 & 0xF) << 8),
                  BOOL result = CheckRegValueRange(v54, (unsigned int *)(*(void *)(a2 + 992) + 584))))
            {
              if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808))) {
                return 1;
              }
              long long v60 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
              int v61 = *(_DWORD *)(a3 + 888);
              int v62 = *(_DWORD *)(a3 + 892);
              int v63 = *(_DWORD *)(v11 + 232);
              int v64 = *(_DWORD *)(a3 + 896);
              int IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
              if (ZinCodegen::SetUniversalCompressionForSecondarySource<10u>((void *)a3, (uint64_t)v60, v61, v62, &v76, v64, IsCompressed, v63, a7))
              {
                ZinAneTd<10u>::SetL2Src2CfgForCompression(v76, v62);
                ZinAneTd<10u>::SetL2Src2OffsetYlsbsFromCropOffsetY(v76);
                return 1;
              }
              BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (result)
              {
                ZinCodegen::SetSecondarySourceDMA<10u>(result, v66, v67, v68, v69, v70, v71, v72);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void ZinCodegen::SetSecondarySourceDMA<10u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "packed10 format not fully implemented yet\n", a5, a6, a7, a8, 0);
}

__CFString *ANECCreateCompilerOptionsCFString(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!Mutable) {
    return Mutable;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, @"DramAllocatorType", (const void **)&value))
  {
    CFTypeID v4 = CFGetTypeID(value);
    if (v4 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"NoReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC0[0], 0x8000100u);
        CFStringRef v5 = @" noreuse ";
LABEL_10:
        CFStringAppend(Mutable, v5);
        goto LABEL_11;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"FirstFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC0[0], 0x8000100u);
        CFStringRef v5 = @" ffreuse ";
        goto LABEL_10;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"BestFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC0[0], 0x8000100u);
        CFStringRef v5 = @" bfreuse ";
        goto LABEL_10;
      }
      BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v8) {
        ANECCreateCompilerOptionsCFString_cold_6(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }
  }
LABEL_11:
  if (CFDictionaryGetValueIfPresent(a1, @"DramTensorPriorityType", (const void **)&value))
  {
    CFTypeID v6 = CFGetTypeID(value);
    if (v6 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"orderofcreation"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC8[0], 0x8000100u);
        CFStringRef v7 = @" orderofcreation ";
LABEL_23:
        CFStringAppend(Mutable, v7);
        goto LABEL_24;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"costofreads"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC8[0], 0x8000100u);
        CFStringRef v7 = @" costofreads ";
        goto LABEL_23;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"sizethenliverange"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC8[0], 0x8000100u);
        CFStringRef v7 = @" sizethenliverange ";
        goto LABEL_23;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"sizebyliverange"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBC8[0], 0x8000100u);
        CFStringRef v7 = @" sizebyliverange ";
        goto LABEL_23;
      }
      BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v22) {
        ANECCreateCompilerOptionsCFString_cold_6(v22, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
LABEL_24:
  if (!CFDictionaryGetValueIfPresent(a1, @"L2CacheMode", (const void **)&value)) {
    goto LABEL_56;
  }
  CFTypeID v16 = CFGetTypeID(value);
  if (v16 != CFStringGetTypeID()) {
    goto LABEL_56;
  }
  if (ZinCFStringEquals((const __CFString *)value, @"L2DisableResident"))
  {
    uint64_t v17 = off_26776FC08;
    CFStringRef v18 = @" nonresident ";
LABEL_28:
    CFStringAppend(Mutable, @"--");
    CFStringAppendCString(Mutable, *v17, 0x8000100u);
    CFStringAppend(Mutable, v18);
    goto LABEL_56;
  }
  if (ZinCFStringEquals((const __CFString *)value, @"L2EnableResident"))
  {
    CFStringAppend(Mutable, @"--");
    CFStringAppendCString(Mutable, off_26776FC08[0], 0x8000100u);
    CFStringRef v19 = @" resident ";
LABEL_35:
    CFStringAppend(Mutable, v19);
    goto LABEL_36;
  }
  if (ZinCFStringEquals((const __CFString *)value, @"L2EnableCachedWrite"))
  {
    CFStringAppend(Mutable, @"--");
    CFStringAppendCString(Mutable, off_26776FC08[0], 0x8000100u);
    CFStringRef v19 = @" cachedwrite ";
    goto LABEL_35;
  }
  if (ZinCFStringEquals((const __CFString *)value, @"L2EnabledCachedReadWrite"))
  {
    CFStringAppend(Mutable, @"--");
    CFStringAppendCString(Mutable, off_26776FC08[0], 0x8000100u);
    CFStringRef v19 = @" cachedreadwrite ";
    goto LABEL_35;
  }
  BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v30) {
    ANECCreateCompilerOptionsCFString_cold_5(v30, v31, v32, v33, v34, v35, v36, v37);
  }
LABEL_36:
  if (CFDictionaryGetValueIfPresent(a1, @"L2AllocatorType", (const void **)&value))
  {
    CFTypeID v20 = CFGetTypeID(value);
    if (v20 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"FirstFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBD8[0], 0x8000100u);
        CFStringRef v21 = @" ffreuse ";
LABEL_42:
        CFStringAppend(Mutable, v21);
        goto LABEL_49;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"BestFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBD8[0], 0x8000100u);
        CFStringRef v21 = @" bfreuse ";
        goto LABEL_42;
      }
      BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v38) {
        ANECCreateCompilerOptionsCFString_cold_4(v38, v39, v40, v41, v42, v43, v44, v45);
      }
    }
  }
LABEL_49:
  if (CFDictionaryGetValueIfPresent(a1, @"DisableL2Wraparound", (const void **)&value))
  {
    CFTypeID v46 = CFGetTypeID(value);
    if (v46 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FC10[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableL2BankConflictOpt", (const void **)&value))
  {
    CFTypeID v47 = CFGetTypeID(value);
    if (v47 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      uint64_t v17 = off_26776FC38;
      CFStringRef v18 = @" ";
      goto LABEL_28;
    }
  }
LABEL_56:
  if (CFDictionaryGetValueIfPresent(a1, @"L3AllocatorType", (const void **)&value))
  {
    CFTypeID v48 = CFGetTypeID(value);
    if (v48 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"NoReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBE0[0], 0x8000100u);
        CFStringRef v49 = @" noreuse ";
LABEL_64:
        CFStringAppend(Mutable, v49);
        goto LABEL_65;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"FirstFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBE0[0], 0x8000100u);
        CFStringRef v49 = @" ffreuse ";
        goto LABEL_64;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"BestFitReuse"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBE0[0], 0x8000100u);
        CFStringRef v49 = @" bfreuse ";
        goto LABEL_64;
      }
      BOOL v118 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v118) {
        ANECCreateCompilerOptionsCFString_cold_3(v118, v119, v120, v121, v122, v123, v124, v125);
      }
    }
  }
LABEL_65:
  if (CFDictionaryGetValueIfPresent(a1, @"L2Size", (const void **)&value))
  {
    CFTypeID v50 = CFGetTypeID(value);
    if (v50 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v51 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v51)
      {
        CFStringRef v52 = v51;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBE8[0], 0x600u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v52);
        CFRelease(v52);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"L3Size", (const void **)&value))
  {
    CFTypeID v53 = CFGetTypeID(value);
    if (v53 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v54 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v54)
      {
        CFStringRef v55 = v54;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBF0[0], 0x600u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v55);
        CFRelease(v55);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"FoldScale", (const void **)&value))
  {
    CFTypeID v56 = CFGetTypeID(value);
    if (v56 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB38])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, ANEC_options[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"ForceHazardStallsBegin", (const void **)&value))
  {
    CFTypeID v57 = CFGetTypeID(value);
    if (v57 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      CFStringRef v58 = CFStringCreateWithFormat(v2, 0, @"%lld ", valuePtr);
      if (v58)
      {
        CFStringRef v59 = v58;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FB88[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v59);
        CFRelease(v59);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"ForceHazardStallsEnd", (const void **)&value))
  {
    CFTypeID v60 = CFGetTypeID(value);
    if (v60 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      CFStringRef v61 = CFStringCreateWithFormat(v2, 0, @"%lld ", valuePtr);
      if (v61)
      {
        CFStringRef v62 = v61;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FB90[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v62);
        CFRelease(v62);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableContextSwitching", (const void **)&value))
  {
    CFTypeID v63 = CFGetTypeID(value);
    if (v63 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FBA0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DebugContextSwitchingDma", (const void **)&value))
  {
    CFTypeID v64 = CFGetTypeID(value);
    if (v64 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FBA8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"SetIsSecureNetwork", (const void **)&value))
  {
    CFTypeID v65 = CFGetTypeID(value);
    if (v65 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FBB0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableMergeConstants", (const void **)&value))
  {
    CFTypeID v66 = CFGetTypeID(value);
    if (v66 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FBB8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DebugMask", (const void **)&value))
  {
    CFTypeID v67 = CFGetTypeID(value);
    if (v67 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v68 = CFStringCreateWithFormat(v2, 0, @"0x%08x ", valuePtr);
      if (v68)
      {
        CFStringRef v69 = v68;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC18[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v69);
        CFRelease(v69);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"CompressSparseKernels", (const void **)&value))
  {
    CFTypeID v70 = CFGetTypeID(value);
    if (v70 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FC28[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableOnTheFlySparseEncoding", (const void **)&value))
  {
    CFTypeID v71 = CFGetTypeID(value);
    if (v71 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDF0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableWinograd", (const void **)&value))
  {
    CFTypeID v72 = CFGetTypeID(value);
    if (v72 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDF8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableDramLogEventsOnly", (const void **)&value))
  {
    CFTypeID v73 = CFGetTypeID(value);
    if (v73 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE00[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableMulticastBruteforceSearch", (const void **)&value))
  {
    CFTypeID v74 = CFGetTypeID(value);
    if (v74 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE08[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"PerfTracer1Config", (const void **)&value))
  {
    CFTypeID v75 = CFGetTypeID(value);
    if (v75 == CFStringGetTypeID())
    {
      uint64_t valuePtr = 0;
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE10[0], 0x8000100u);
      CFStringAppend(Mutable, @"=");
      uint64_t v76 = v213 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v76, 0x8000100u);
      CFStringAppend(Mutable, @" ");
      if (SHIBYTE(v213) < 0) {
        operator delete((void *)valuePtr);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"PerfTracer2Config", (const void **)&value))
  {
    CFTypeID v77 = CFGetTypeID(value);
    if (v77 == CFStringGetTypeID())
    {
      uint64_t valuePtr = 0;
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE18[0], 0x8000100u);
      CFStringAppend(Mutable, @"=");
      std::string v78 = v213 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v78, 0x8000100u);
      CFStringAppend(Mutable, @" ");
      if (SHIBYTE(v213) < 0) {
        operator delete((void *)valuePtr);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableDRAMInputFIFO", (const void **)&value))
  {
    CFTypeID v79 = CFGetTypeID(value);
    if (v79 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE20[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"AggressiveScaleFusion", (const void **)&value))
  {
    CFTypeID v80 = CFGetTypeID(value);
    if (v80 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE30[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableTaskSchedulerExp", (const void **)&value))
  {
    CFTypeID v81 = CFGetTypeID(value);
    if (v81 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE38[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableAggressiveNETransposeFusion", (const void **)&value))
  {
    CFTypeID v82 = CFGetTypeID(value);
    if (v82 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE58[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableControlFlowOps", (const void **)&value))
  {
    CFTypeID v83 = CFGetTypeID(value);
    if (v83 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE60[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableDartThrashingOptimizer", (const void **)&value))
  {
    CFTypeID v84 = CFGetTypeID(value);
    if (v84 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE80[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableDramInplaceAllocation", (const void **)&value))
  {
    CFTypeID v85 = CFGetTypeID(value);
    if (v85 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE88[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableGlobalChannelSplitting", (const void **)&value))
  {
    CFTypeID v86 = CFGetTypeID(value);
    if (v86 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE90[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DramFragmentationFactor", (const void **)&value))
  {
    CFTypeID v87 = CFGetTypeID(value);
    if (v87 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 88;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v88 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v88)
      {
        CFStringRef v89 = v88;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FBD0[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v89);
        CFStringAppend(Mutable, @" ");
        CFRelease(v89);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"UseExtendedMachoFormat", (const void **)&value))
  {
    CFTypeID v90 = CFGetTypeID(value);
    if (v90 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE98[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableAdvancedKernelRefinement", (const void **)&value))
  {
    CFTypeID v91 = CFGetTypeID(value);
    if (v91 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEA0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableL2BatchSplitting", (const void **)&value))
  {
    CFTypeID v92 = CFGetTypeID(value);
    if (v92 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEB0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableGlobalCWOptimization", (const void **)&value))
  {
    CFTypeID v93 = CFGetTypeID(value);
    if (v93 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEB8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableL2CachedBuffer", (const void **)&value))
  {
    CFTypeID v94 = CFGetTypeID(value);
    if (v94 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEC8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v95 = @"=true ";
      }
      else {
        CFStringRef v95 = @"=false ";
      }
      CFStringAppend(Mutable, v95);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableNoiseReductionTiling", (const void **)&value))
  {
    CFTypeID v96 = CFGetTypeID(value);
    if (v96 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FED8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v97 = @"=true ";
      }
      else {
        CFStringRef v97 = @"=false ";
      }
      CFStringAppend(Mutable, v97);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"SuppressMathException", (const void **)&value))
  {
    CFTypeID v98 = CFGetTypeID(value);
    if (v98 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEC0[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v99 = @"=true ";
      }
      else {
        CFStringRef v99 = @"=false ";
      }
      CFStringAppend(Mutable, v99);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"E4M3Overflow", (const void **)&value))
  {
    CFTypeID v100 = CFGetTypeID(value);
    if (v100 == CFStringGetTypeID())
    {
      uint64_t valuePtr = 0;
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      if (ZinGetString((CFStringRef)value, (uint64_t)&valuePtr))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FE68[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        if (v213 >= 0) {
          p_uint64_t valuePtr = (const char *)&valuePtr;
        }
        else {
          p_uint64_t valuePtr = (const char *)valuePtr;
        }
        CFStringAppendCString(Mutable, p_valuePtr, 0x8000100u);
        CFStringAppend(Mutable, @" ");
      }
      if (SHIBYTE(v213) < 0) {
        operator delete((void *)valuePtr);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"UndefinedSymbolsBehaviorUseFVMLibs", (const void **)&value))
  {
    CFTypeID v102 = CFGetTypeID(value);
    if (v102 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40]) {
      CFStringAppend(Mutable, @"--Wl-undefined=fvmlib ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"ForceCoalescedExternSections", (const void **)&value))
  {
    CFTypeID v103 = CFGetTypeID(value);
    if (v103 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40]) {
      CFStringAppend(Mutable, @"--Wl-force-coalesce-externs ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableInputsSectionsCoalesce", (const void **)&value))
  {
    CFTypeID v104 = CFGetTypeID(value);
    if (v104 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCD8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"TargetArchitecture", (const void **)&value))
  {
    CFTypeID v105 = CFGetTypeID(value);
    if (v105 == CFStringGetTypeID()) {
      CFStringAppendFormat(Mutable, 0, @"-t %@ ", value);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"Signature", (const void **)&value))
  {
    CFTypeID v106 = CFGetTypeID(value);
    if (v106 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"Ident"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC30[0], 0x8000100u);
        CFStringRef v107 = @" ident ";
LABEL_237:
        CFStringAppend(Mutable, v107);
        goto LABEL_240;
      }
      if (ZinCFStringEquals((const __CFString *)value, @"Disabled"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC30[0], 0x8000100u);
        CFStringRef v107 = @" disabled ";
        goto LABEL_237;
      }
      BOOL v108 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v108) {
        ANECCreateCompilerOptionsCFString_cold_2(v108, v109, v110, v111, v112, v113, v114, v115);
      }
    }
  }
LABEL_240:
  if (CFDictionaryGetValueIfPresent(a1, @"SpatialSplit", (const void **)&value))
  {
    CFTypeID v116 = CFGetTypeID(value);
    if (v116 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, @"Disabled"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=disabled ";
      }
      else if (ZinCFStringEquals((const __CFString *)value, @"Memory"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=memory ";
      }
      else if (ZinCFStringEquals((const __CFString *)value, @"GenericDAG"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=generic-dag ";
      }
      else if (ZinCFStringEquals((const __CFString *)value, @"GenericDAGExperimental"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=generic-dag-exp ";
      }
      else if (ZinCFStringEquals((const __CFString *)value, @"GenericDAGMemory"))
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=generic-dag-memory ";
      }
      else
      {
        if (!ZinCFStringEquals((const __CFString *)value, @"Auto"))
        {
          BOOL v203 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v203) {
            ANECCreateCompilerOptionsCFString_cold_1(v203, v204, v205, v206, v207, v208, v209, v210);
          }
          goto LABEL_258;
        }
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC90[0], 0x8000100u);
        CFStringRef v117 = @"=auto ";
      }
      CFStringAppend(Mutable, v117);
    }
  }
LABEL_258:
  if (CFDictionaryGetValueIfPresent(a1, @"EnableCircularBufferInSpatialSplit", (const void **)&value))
  {
    CFTypeID v126 = CFGetTypeID(value);
    if (v126 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      CFStringRef v127 = CFStringCreateWithFormat(v2, 0, @"%lld ", valuePtr);
      if (v127)
      {
        CFStringRef v128 = v127;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FC98[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v128);
        CFRelease(v128);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableSpatialSplitInX", (const void **)&value))
  {
    CFTypeID v129 = CFGetTypeID(value);
    if (v129 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDE0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  BOOL v131 = CFDictionaryGetValueIfPresent(a1, @"EnableKernelRewind", (const void **)&value)
      && (CFTypeID v130 = CFGetTypeID(value), v130 == CFBooleanGetTypeID())
      && value == (void *)*MEMORY[0x263EFFB40];
  CFStringAppend(Mutable, @"--");
  CFStringAppendCString(Mutable, off_26776FCA0[0], 0x8000100u);
  if (v131) {
    CFStringRef v132 = @"=enabled ";
  }
  else {
    CFStringRef v132 = @"=disabled ";
  }
  CFStringAppend(Mutable, v132);
  if (CFDictionaryGetValueIfPresent(a1, @"DisableOptimizations", (const void **)&value))
  {
    CFTypeID v133 = CFGetTypeID(value);
    if (v133 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FBF8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"CompileANEProgramForDebugging", (const void **)&value))
  {
    CFTypeID v134 = CFGetTypeID(value);
    if (v134 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FC20[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"OptLvlOne", (const void **)&value))
  {
    CFTypeID v135 = CFGetTypeID(value);
    if (v135 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FC00[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableSingleChannelElementwiseOpCopyRemoval", (const void **)&value))
  {
    CFTypeID v136 = CFGetTypeID(value);
    if (v136 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCB0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableNetworkImbalanceAnalysis", (const void **)&value))
  {
    CFTypeID v137 = CFGetTypeID(value);
    if (v137 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCE0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableCpAllocation", (const void **)&value))
  {
    CFTypeID v138 = CFGetTypeID(value);
    if (v138 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCD0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DumpStatusDictionaryToFile", (const void **)&value))
  {
    CFTypeID v139 = CFGetTypeID(value);
    if (v139 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCE8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"GenerateStaticPerfAnalytics", (const void **)&value))
  {
    CFTypeID v140 = CFGetTypeID(value);
    if (v140 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCF8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"GenerateAnalyticsBuffer", (const void **)&value))
  {
    CFTypeID v141 = CFGetTypeID(value);
    if (v141 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD00[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"AbortOnLayerTrackerError", (const void **)&value))
  {
    CFTypeID v142 = CFGetTypeID(value);
    if (v142 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD20[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"NeFrequency", (const void **)&value))
  {
    CFTypeID v143 = CFGetTypeID(value);
    if (v143 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, &valuePtr);
      CFStringRef v144 = CFStringCreateWithFormat(v2, 0, @"%f ", valuePtr);
      if (v144)
      {
        CFStringRef v145 = v144;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD08[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v145);
        CFRelease(v145);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"PstateDCSLevel", (const void **)&value))
  {
    CFTypeID v146 = CFGetTypeID(value);
    if (v146 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v147 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v147)
      {
        CFStringRef v148 = v147;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD10[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v148);
        CFRelease(v148);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"PstateSOCLevel", (const void **)&value))
  {
    CFTypeID v149 = CFGetTypeID(value);
    if (v149 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v150 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v150)
      {
        CFStringRef v151 = v150;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD18[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v151);
        CFRelease(v151);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableSSM", (const void **)&value))
  {
    CFTypeID v152 = CFGetTypeID(value);
    if (v152 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD58[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableKernelStreaming", (const void **)&value))
  {
    CFTypeID v153 = CFGetTypeID(value);
    if (v153 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD60[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"CompilerMultithreading", (const void **)&value))
  {
    CFTypeID v154 = CFGetTypeID(value);
    if (v154 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE28[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v155 = @"=true ";
      }
      else {
        CFStringRef v155 = @"=false ";
      }
      CFStringAppend(Mutable, v155);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"OptimizeKernelCoalescing", (const void **)&value))
  {
    CFTypeID v156 = CFGetTypeID(value);
    if (v156 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD60[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD68[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"OptimizeKernelCoalescingWithKernelStreaming", (const void **)&value))
  {
    CFTypeID v157 = CFGetTypeID(value);
    if (v157 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD68[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"OptimizeMutableKernelSection", (const void **)&value))
  {
    CFTypeID v158 = CFGetTypeID(value);
    if (v158 == CFBooleanGetTypeID())
    {
      long long v159 = value;
      if (value == (void *)*MEMORY[0x263EFFB40])
      {
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD78[0], 0x8000100u);
        if (value == v159) {
          CFStringRef v160 = @"=true";
        }
        else {
          CFStringRef v160 = @"=false";
        }
        CFStringAppend(Mutable, v160);
        CFStringAppend(Mutable, @" ");
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableSummaryPerformanceStats", (const void **)&value))
  {
    CFTypeID v161 = CFGetTypeID(value);
    if (v161 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD80[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v162 = @"=true";
      }
      else {
        CFStringRef v162 = @"=false";
      }
      CFStringAppend(Mutable, v162);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"SplitKernelSection", (const void **)&value))
  {
    CFTypeID v163 = CFGetTypeID(value);
    if (v163 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FD88[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v164 = @"=true";
      }
      else {
        CFStringRef v164 = @"=false";
      }
      CFStringAppend(Mutable, v164);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"MaxKernelSectionSize", (const void **)&value))
  {
    CFTypeID v165 = CFGetTypeID(value);
    if (v165 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v166 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v166)
      {
        CFStringRef v167 = v166;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD90[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v167);
        CFRelease(v167);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"SeedEncoding", (const void **)&value))
  {
    CFTypeID v168 = CFGetTypeID(value);
    if (v168 == CFStringGetTypeID())
    {
      uint64_t valuePtr = 0;
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDA0[0], 0x8000100u);
      CFStringAppend(Mutable, @"=");
      std::string v169 = v213 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v169, 0x8000100u);
      CFStringAppend(Mutable, @" ");
      if (SHIBYTE(v213) < 0) {
        operator delete((void *)valuePtr);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableNEWidthSlicing", (const void **)&value))
  {
    CFTypeID v170 = CFGetTypeID(value);
    if (v170 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDB0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableHardSwishOpt", (const void **)&value))
  {
    CFTypeID v171 = CFGetTypeID(value);
    if (v171 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDB8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableAggressiveTensorCaching", (const void **)&value))
  {
    CFTypeID v172 = CFGetTypeID(value);
    if (v172 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FCB8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableCachePrefetchMask", (const void **)&value))
  {
    CFTypeID v173 = CFGetTypeID(value);
    if (v173 == CFNumberGetTypeID())
    {
      LOWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, &valuePtr);
      CFStringRef v174 = CFStringCreateWithFormat(v2, 0, @"%d ", (__int16)valuePtr);
      if (v174)
      {
        CFStringRef v175 = v174;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD38[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v175);
        CFRelease(v175);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableDynamicShapes", (const void **)&value))
  {
    CFTypeID v176 = CFGetTypeID(value);
    if (v176 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDD0[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"ForceDynamicShapesMil", (const void **)&value))
  {
    CFTypeID v177 = CFGetTypeID(value);
    if (v177 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE50[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"BSSLimit", (const void **)&value))
  {
    CFTypeID v178 = CFGetTypeID(value);
    if (v178 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      CFStringRef v179 = CFStringCreateWithFormat(v2, 0, @"%zd ", valuePtr);
      if (v179)
      {
        CFStringRef v180 = v179;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FD28[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v180);
        CFStringAppend(Mutable, @" ");
        CFRelease(v180);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableIntermediateCompression", (const void **)&value))
  {
    CFTypeID v181 = CFGetTypeID(value);
    if (v181 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x263EFFB40])
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDD8[0], 0x8000100u);
      CFStringAppend(Mutable, @" ");
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"PreserveTextureFraction", (const void **)&value))
  {
    CFTypeID v182 = CFGetTypeID(value);
    if (v182 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FDE8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v183 = @"=true ";
      }
      else {
        CFStringRef v183 = @"=false ";
      }
      CFStringAppend(Mutable, v183);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"MaxTdCount", (const void **)&value))
  {
    CFTypeID v184 = CFGetTypeID(value);
    if (v184 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v185 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v185)
      {
        CFStringRef v186 = v185;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FE40[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v186);
        CFRelease(v186);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"MaxSegmentSize", (const void **)&value))
  {
    CFTypeID v187 = CFGetTypeID(value);
    if (v187 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      CFStringRef v188 = CFStringCreateWithFormat(v2, 0, @"%d ", valuePtr);
      if (v188)
      {
        CFStringRef v189 = v188;
        CFStringAppend(Mutable, @"--");
        CFStringAppendCString(Mutable, off_26776FE48[0], 0x8000100u);
        CFStringAppend(Mutable, @"=");
        CFStringAppend(Mutable, v189);
        CFRelease(v189);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"GlobalRefinementInSpatialSplit", (const void **)&value))
  {
    CFTypeID v190 = CFGetTypeID(value);
    if (v190 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE70[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v191 = @"=true ";
      }
      else {
        CFStringRef v191 = @"=false ";
      }
      CFStringAppend(Mutable, v191);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableSegmentAwareKernelSectionSplit", (const void **)&value))
  {
    CFTypeID v192 = CFGetTypeID(value);
    if (v192 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FE78[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v193 = @"=true ";
      }
      else {
        CFStringRef v193 = @"=false ";
      }
      CFStringAppend(Mutable, v193);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableMILConstantCoalescing", (const void **)&value))
  {
    CFTypeID v194 = CFGetTypeID(value);
    if (v194 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEA8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v195 = @"=true ";
      }
      else {
        CFStringRef v195 = @"=false ";
      }
      CFStringAppend(Mutable, v195);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableL2BatchSplitting", (const void **)&value))
  {
    CFTypeID v196 = CFGetTypeID(value);
    if (v196 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEB0[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v197 = @"=true ";
      }
      else {
        CFStringRef v197 = @"=false ";
      }
      CFStringAppend(Mutable, v197);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"EnableLowEffortCPAllocation", (const void **)&value))
  {
    CFTypeID v198 = CFGetTypeID(value);
    if (v198 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FED0[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v199 = @"=true ";
      }
      else {
        CFStringRef v199 = @"=false ";
      }
      CFStringAppend(Mutable, v199);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, @"DisableWeightFileSizeCheck", (const void **)&value))
  {
    CFTypeID v200 = CFGetTypeID(value);
    if (v200 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, @"--");
      CFStringAppendCString(Mutable, off_26776FEE0, 0x8000100u);
      if (value == (void *)*MEMORY[0x263EFFB40]) {
        CFStringRef v201 = @"=true ";
      }
      else {
        CFStringRef v201 = @"=false ";
      }
      CFStringAppend(Mutable, v201);
    }
  }
  return Mutable;
}

void sub_21119FD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *ANECCreateCompilerInputCFString(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFTypeID v4 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      value = 0;
      if (CFDictionaryGetValueIfPresent(a1, @"InputNetworks", (const void **)&value))
      {
        CFTypeID v5 = CFGetTypeID(value);
        if (v5 == CFArrayGetTypeID())
        {
          CFArrayRef v6 = (const __CFArray *)value;
          if (CFArrayGetCount((CFArrayRef)value) >= 1)
          {
            CFIndex v7 = 0;
            do
            {
              value = (void *)CFArrayGetValueAtIndex(v6, v7);
              CFTypeID v8 = CFGetTypeID(value);
              if (v8 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef v9 = (const __CFDictionary *)value;
                v35[0] = 0;
                v35[1] = 0;
                uint64_t v36 = 0;
                if (!ANECGetFileName((const __CFDictionary *)value, @"NetworkSourceFileName", @"NetworkSourcePath", v35))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v34, "-i ");
                  int v10 = SHIBYTE(v36);
                  uint64_t v11 = (void **)v35[0];
                  std::string::basic_string[abi:ne180100]<0>(&v31, " ");
                  if (v10 >= 0) {
                    uint64_t v12 = v35;
                  }
                  else {
                    uint64_t v12 = v11;
                  }
                  std::string::size_type v13 = strlen((const char *)v12);
                  uint64_t v14 = std::string::insert(&v31, 0, (const std::string::value_type *)v12, v13);
                  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
                  int64_t v33 = v14->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = v15;
                  v14->__r_.__value_.__l.__size_ = 0;
                  v14->__r_.__value_.__r.__words[2] = 0;
                  v14->__r_.__value_.__r.__words[0] = 0;
                  if (v33 >= 0) {
                    CFTypeID v16 = __p;
                  }
                  else {
                    CFTypeID v16 = (void **)__p[0];
                  }
                  if (v33 >= 0) {
                    std::string::size_type v17 = HIBYTE(v33);
                  }
                  else {
                    std::string::size_type v17 = (std::string::size_type)__p[1];
                  }
                  std::string::append(&v34, (const std::string::value_type *)v16, v17);
                  if (SHIBYTE(v33) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v31.__r_.__value_.__l.__data_);
                  }
                  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    CFStringRef v18 = &v34;
                  }
                  else {
                    CFStringRef v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
                  }
                  CFStringRef v19 = CFStringCreateWithCString(v2, (const char *)v18, 0x8000100u);
                  CFStringAppend(v4, v19);
                  CFRelease(v19);
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v34.__r_.__value_.__l.__data_);
                  }
                }
                if (!ANECGetFileName(v9, @"NetworkJITShapesName", @"NetworkJITShapesPath", v35))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v34, "-s ");
                  int v20 = SHIBYTE(v36);
                  CFStringRef v21 = (void **)v35[0];
                  std::string::basic_string[abi:ne180100]<0>(&v31, " ");
                  if (v20 >= 0) {
                    BOOL v22 = v35;
                  }
                  else {
                    BOOL v22 = v21;
                  }
                  std::string::size_type v23 = strlen((const char *)v22);
                  uint64_t v24 = std::string::insert(&v31, 0, (const std::string::value_type *)v22, v23);
                  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
                  int64_t v33 = v24->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = v25;
                  v24->__r_.__value_.__l.__size_ = 0;
                  v24->__r_.__value_.__r.__words[2] = 0;
                  v24->__r_.__value_.__r.__words[0] = 0;
                  if (v33 >= 0) {
                    uint64_t v26 = __p;
                  }
                  else {
                    uint64_t v26 = (void **)__p[0];
                  }
                  if (v33 >= 0) {
                    std::string::size_type v27 = HIBYTE(v33);
                  }
                  else {
                    std::string::size_type v27 = (std::string::size_type)__p[1];
                  }
                  std::string::append(&v34, (const std::string::value_type *)v26, v27);
                  if (SHIBYTE(v33) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v31.__r_.__value_.__l.__data_);
                  }
                  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v28 = &v34;
                  }
                  else {
                    uint64_t v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
                  }
                  CFStringRef v29 = CFStringCreateWithCString(v2, (const char *)v28, 0x8000100u);
                  CFStringAppend(v4, v29);
                  CFRelease(v29);
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v34.__r_.__value_.__l.__data_);
                  }
                }
                CFDictionaryGetValueIfPresent(v9, @"OutputBinary", (const void **)&value);
                if (SHIBYTE(v36) < 0) {
                  operator delete(v35[0]);
                }
              }
              ++v7;
            }
            while (v7 < CFArrayGetCount(v6));
          }
        }
      }
    }
  }
  return v4;
}

void sub_2111A00F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

__CFString *ANECCreateCompilerInputsCFString(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFTypeID v4 = Mutable;
  if (Mutable)
  {
    CFStringAppend(Mutable, @"zin_ane_compiler ");
    if (a1)
    {
      CFTypeID v5 = ANECCreateCompilerInputCFString(a1);
      CFStringAppend(v4, v5);
      CFRelease(v5);
      std::string __p = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      if (!ANECGetFileName(a1, @"OutputFileName", @"OutputFilePath", &__p))
      {
        p_p = &__p;
        if (v12 < 0) {
          p_p = __p;
        }
        CFStringRef v7 = CFStringCreateWithFormat(v2, 0, @"-o %s ", p_p);
        uint64_t v8 = HIBYTE(v12);
        if (v12 < 0) {
          uint64_t v8 = v11;
        }
        if (v8) {
          CFStringAppend(v4, v7);
        }
        CFRelease(v7);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_2111A028C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *ANECCreateCompilerInputDictionary(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v27, 0, sizeof(v27));
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  BOOL v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  CFTypeID v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFArrayRef v6 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
  CFStringRef v7 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8)
  {
    if (v9 >= 0) {
      int v10 = (const char *)a1;
    }
    else {
      int v10 = *(const char **)a1;
    }
    CFStringRef v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
    CFStringRef v12 = CFStringCreateWithCString(0, (const char *)v27, 0x8000100u);
    CFDictionaryAddValue(v7, @"NetworkSourceFileName", v11);
    CFDictionaryAddValue(v7, @"NetworkSourcePath", v12);
    CFRelease(v12);
    CFRelease(v11);
  }
  uint64_t v13 = *(unsigned __int8 *)(a1 + 71);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a1 + 56);
  }
  if (v13)
  {
    if (v14 >= 0) {
      long long v15 = (const char *)(a1 + 48);
    }
    else {
      long long v15 = *(const char **)(a1 + 48);
    }
    CFStringRef v16 = CFStringCreateWithCString(0, v15, 0x8000100u);
    CFStringRef v17 = CFStringCreateWithCString(0, (const char *)v27, 0x8000100u);
    CFDictionaryAddValue(v7, @"NetworkJITShapesName", v16);
    CFDictionaryAddValue(v7, @"NetworkJITShapesPath", v17);
    CFRelease(v17);
    CFRelease(v16);
  }
  CFArrayAppendValue(v6, v7);
  CFRelease(v7);
  CFDictionaryAddValue(Mutable, @"InputNetworks", v6);
  CFRelease(v6);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 47);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  if (v18)
  {
    BOOL v22 = *(const char **)(a1 + 24);
    CFStringRef v21 = (const char *)(a1 + 24);
    int v20 = v22;
    if (v19 >= 0) {
      std::string::size_type v23 = v21;
    }
    else {
      std::string::size_type v23 = v20;
    }
    CFStringRef v24 = CFStringCreateWithCString(0, v23, 0x8000100u);
    CFStringRef v25 = CFStringCreateWithCString(0, &byte_211F4AA5D, 0x8000100u);
    CFDictionaryAddValue(Mutable, @"OutputFileName", v24);
    CFDictionaryAddValue(Mutable, @"OutputFilePath", v25);
    CFRelease(v24);
    CFRelease(v25);
  }
  return Mutable;
}

__CFDictionary *ANECCreateCompilerOptionDictionary(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeID v4 = Mutable;
  CFTypeID v5 = (const void **)MEMORY[0x263EFFB40];
  if (*(_DWORD *)(a1 + 316)) {
    CFDictionaryAddValue(Mutable, @"UndefinedSymbolsBehaviorUseFVMLibs", (const void *)*MEMORY[0x263EFFB40]);
  }
  if (*(_DWORD *)(a1 + 320)) {
    CFDictionaryAddValue(v4, @"ForceCoalescedExternSections", *v5);
  }
  if (*(_DWORD *)(a1 + 324)) {
    CFDictionaryAddValue(v4, @"DisableInputsSectionsCoalesce", *v5);
  }
  if (*(unsigned char *)(a1 + 369)) {
    CFDictionaryAddValue(v4, @"DisableNetworkImbalanceAnalysis", *v5);
  }
  if (*(unsigned char *)(a1 + 370)) {
    CFDictionaryAddValue(v4, @"DumpStatusDictionaryToFile", *v5);
  }
  if (*(char *)(a1 + 95) >= 0) {
    CFArrayRef v6 = (const char *)(a1 + 72);
  }
  else {
    CFArrayRef v6 = *(const char **)(a1 + 72);
  }
  CFStringRef v7 = CFStringCreateWithCString(v2, v6, 0x8000100u);
  CFDictionaryAddValue(v4, @"TargetArchitecture", v7);
  CFRelease(v7);
  if (*(unsigned char *)(a1 + 128)) {
    CFDictionaryAddValue(v4, @"DisableContextSwitching", *v5);
  }
  if (*(unsigned char *)(a1 + 129)) {
    CFDictionaryAddValue(v4, @"DebugContextSwitchingDma", *v5);
  }
  if (*(unsigned char *)(a1 + 130)) {
    CFDictionaryAddValue(v4, @"SetIsSecureNetwork", *v5);
  }
  if (*(unsigned char *)(a1 + 132)) {
    CFDictionaryAddValue(v4, @"DisableMergeConstants", *v5);
  }
  uint64_t v8 = (const void **)MEMORY[0x263EFFB38];
  if (!*(_DWORD *)(a1 + 124)) {
    CFDictionaryAddValue(v4, @"FoldScale", (const void *)*MEMORY[0x263EFFB38]);
  }
  if ((*(void *)(a1 + 136) & 0x8000000000000000) == 0)
  {
    CFNumberRef v9 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 136));
    CFDictionaryAddValue(v4, @"ForceHazardStallsBegin", v9);
    CFRelease(v9);
  }
  if ((*(void *)(a1 + 144) & 0x8000000000000000) == 0)
  {
    CFNumberRef v10 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 144));
    CFDictionaryAddValue(v4, @"ForceHazardStallsEnd", v10);
    CFRelease(v10);
  }
  if ((*(_DWORD *)(a1 + 544) & 0x80000000) == 0)
  {
    CFNumberRef v11 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 544));
    CFDictionaryAddValue(v4, @"MaxTdCount", v11);
    CFRelease(v11);
  }
  if ((*(_DWORD *)(a1 + 548) & 0x80000000) == 0)
  {
    CFNumberRef v12 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 548));
    CFDictionaryAddValue(v4, @"MaxSegmentSize", v12);
    CFRelease(v12);
  }
  if (*(unsigned char *)(a1 + 152)) {
    CFDictionaryAddValue(v4, @"ProduceRelocatableObjects", *v5);
  }
  uint64_t v13 = *(unsigned __int8 *)(a1 + 447);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a1 + 432);
  }
  if (v13)
  {
    if (v14 >= 0) {
      long long v15 = (const char *)(a1 + 424);
    }
    else {
      long long v15 = *(const char **)(a1 + 424);
    }
    CFStringRef v16 = CFStringCreateWithCString(v2, v15, 0x8000100u);
    CFDictionaryAddValue(v4, @"ProcedureName", v16);
    CFRelease(v16);
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 183);
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a1 + 168);
  }
  if (v17 == 7)
  {
    if (v18 >= 0) {
      int v19 = (int *)(a1 + 160);
    }
    else {
      int v19 = *(int **)(a1 + 160);
    }
    if (*v19 == 1701996134 && *(int *)((char *)v19 + 3) == 1702065509)
    {
      CFStringRef v25 = (const void **)&kANECDramAllocatorTypeFirstFitReuse;
    }
    else if (*v19 == 1701996130 && *(int *)((char *)v19 + 3) == 1702065509)
    {
      CFStringRef v25 = (const void **)&kANECDramAllocatorTypeBestFitReuse;
    }
    else
    {
      int v22 = *v19;
      int v23 = *(int *)((char *)v19 + 3);
      if (v22 != 1701998446 || v23 != 1702065509) {
        goto LABEL_64;
      }
      CFStringRef v25 = (const void **)&kANECDramAllocatorTypeNoReuse;
    }
    CFDictionaryAddValue(v4, @"DramAllocatorType", *v25);
  }
LABEL_64:
  uint64_t v26 = (const void **)(a1 + 184);
  int v27 = *(char *)(a1 + 207);
  if (v27 >= 0) {
    uint64_t v28 = *(unsigned __int8 *)(a1 + 207);
  }
  else {
    uint64_t v28 = *(void *)(a1 + 192);
  }
  switch(v28)
  {
    case 11:
      if (v27 >= 0) {
        uint64_t v32 = (const void *)(a1 + 184);
      }
      else {
        uint64_t v32 = *v26;
      }
      if (!memcmp(v32, "costofreads", 0xBuLL))
      {
        std::string v31 = (const void **)&kANECDramTensorPriorityTypeCostOfRead;
LABEL_90:
        CFDictionaryAddValue(v4, @"DramTensorPriorityType", *v31);
      }
      break;
    case 17:
      if (v27 >= 0) {
        int64_t v33 = (const void *)(a1 + 184);
      }
      else {
        int64_t v33 = *v26;
      }
      if (!memcmp(v33, "sizethenliverange", 0x11uLL))
      {
        std::string v31 = (const void **)&kANECDramTensorPriorityTypeSizeThenLiveRange;
        goto LABEL_90;
      }
      break;
    case 15:
      if (v27 >= 0) {
        CFStringRef v29 = (void *)(a1 + 184);
      }
      else {
        CFStringRef v29 = *v26;
      }
      if (*v29 == 0x63666F726564726FLL && *(void *)((char *)v29 + 7) == 0x6E6F697461657263)
      {
        std::string v31 = (const void **)&kANECDramTensorPriorityTypeOrderOfCreation;
      }
      else
      {
        if (memcmp(v29, "sizebyliverange", 0xFuLL)) {
          break;
        }
        std::string v31 = (const void **)&kANECDramTensorPriorityTypeSizeByLiveRange;
      }
      goto LABEL_90;
    default:
      break;
  }
  uint64_t v34 = *(unsigned __int8 *)(a1 + 263);
  int v35 = (char)v34;
  if ((v34 & 0x80u) != 0) {
    uint64_t v34 = *(void *)(a1 + 248);
  }
  if (v34 == 7)
  {
    uint64_t v36 = v35 >= 0 ? (int *)(a1 + 240) : *(int **)(a1 + 240);
    int v37 = *v36;
    int v38 = *(int *)((char *)v36 + 3);
    if (v37 == 1701996130 && v38 == 1702065509) {
      CFDictionaryAddValue(v4, @"L2AllocatorType", @"BestFitReuse");
    }
  }
  uint64_t v40 = *(unsigned __int8 *)(a1 + 295);
  int v41 = (char)v40;
  if ((v40 & 0x80u) != 0) {
    uint64_t v40 = *(void *)(a1 + 280);
  }
  if (v40 == 7)
  {
    if (v41 >= 0) {
      uint64_t v42 = (int *)(a1 + 272);
    }
    else {
      uint64_t v42 = *(int **)(a1 + 272);
    }
    if (*v42 == 1701996134 && *(int *)((char *)v42 + 3) == 1702065509)
    {
      CFTypeID v48 = (const void **)&kANECL3AllocatorTypeFirstFitReuse;
    }
    else if (*v42 == 1701996130 && *(int *)((char *)v42 + 3) == 1702065509)
    {
      CFTypeID v48 = (const void **)&kANECL3AllocatorTypeBestFitReuse;
    }
    else
    {
      int v45 = *v42;
      int v46 = *(int *)((char *)v42 + 3);
      if (v45 != 1701998446 || v46 != 1702065509) {
        goto LABEL_126;
      }
      CFTypeID v48 = (const void **)&kANECL3AllocatorTypeNoReuse;
    }
    CFDictionaryAddValue(v4, @"L3AllocatorType", *v48);
  }
LABEL_126:
  if (*(_DWORD *)(a1 + 96))
  {
    CFNumberRef v49 = CFNumberCreate(v2, kCFNumberSInt32Type, (const void *)(a1 + 96));
    CFDictionaryAddValue(v4, @"DebugMask", v49);
    CFRelease(v49);
  }
  if ((*(void *)(a1 + 296) & 0x8000000000000000) == 0)
  {
    CFNumberRef v50 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 296));
    CFDictionaryAddValue(v4, @"L2Size", v50);
    CFRelease(v50);
  }
  if ((*(void *)(a1 + 304) & 0x8000000000000000) == 0)
  {
    CFNumberRef v51 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 304));
    CFDictionaryAddValue(v4, @"L3Size", v51);
    CFRelease(v51);
  }
  int v52 = *(_DWORD *)(a1 + 328);
  if (!v52)
  {
    CFDictionaryAddValue(v4, @"DisableOptimizations", *v5);
    int v52 = *(_DWORD *)(a1 + 328);
  }
  if (v52 == 1) {
    CFDictionaryAddValue(v4, @"OptLvlOne", *v5);
  }
  if (ZinIrCompilerParameters::getDisableMergeScaleBias((ZinIrCompilerParameters *)a1)) {
    CFDictionaryAddValue(v4, @"DisableMergeScaleBias", *v5);
  }
  if (*(unsigned char *)(a1 + 153)) {
    CFDictionaryAddValue(v4, @"DisableMergeActivation", *v5);
  }
  if (*(unsigned char *)(a1 + 154)) {
    CFDictionaryAddValue(v4, @"DisableDeadCodeElimination", *v5);
  }
  if (*(unsigned char *)(a1 + 155)) {
    CFDictionaryAddValue(v4, @"DisableStrideUnitarization", *v5);
  }
  if (*(unsigned char *)(a1 + 156)) {
    CFDictionaryAddValue(v4, @"DisableAdjustInterleaveFactor", *v5);
  }
  if (*(unsigned char *)(a1 + 157)) {
    CFDictionaryAddValue(v4, @"DisableCompression", *v5);
  }
  if (*(unsigned char *)(a1 + 158)) {
    CFDictionaryAddValue(v4, @"DisableBondedNetworks", *v5);
  }
  if (ZinIrCompilerParameters::getEnableKernelRewind((ZinIrCompilerParameters *)a1)) {
    CFTypeID v53 = v5;
  }
  else {
    CFTypeID v53 = v8;
  }
  CFDictionaryAddValue(v4, @"EnableKernelRewind", *v53);
  if (*(unsigned char *)(a1 + 121)) {
    CFDictionaryAddValue(v4, @"DumpFusionBoundaryInfo", *v5);
  }
  if (*(double *)(a1 + 104) > 0.0)
  {
    CFNumberRef v54 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(a1 + 104));
    CFDictionaryAddValue(v4, @"NeFrequency", v54);
    CFRelease(v54);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    CFNumberRef v55 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 112));
    CFDictionaryAddValue(v4, @"PstateDCSLevel", v55);
    CFRelease(v55);
  }
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) == 0)
  {
    CFNumberRef v56 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 116));
    CFDictionaryAddValue(v4, @"PstateSOCLevel", v56);
    CFRelease(v56);
  }
  if (*(unsigned char *)(a1 + 100))
  {
    CFTypeID v57 = *v5;
    CFDictionaryAddValue(v4, @"CompileANEProgramForDebugging", *v5);
    if (*(unsigned char *)(a1 + 101)) {
      CFDictionaryAddValue(v4, @"GenerateStaticPerfAnalytics", v57);
    }
    if (*(unsigned char *)(a1 + 102)) {
      CFDictionaryAddValue(v4, @"GenerateAnalyticsBuffer", v57);
    }
    if (*(unsigned char *)(a1 + 120)) {
      CFDictionaryAddValue(v4, @"AbortOnLayerTrackerError", v57);
    }
  }
  CFStringRef v58 = (void *)(a1 + 216);
  int v59 = *(char *)(a1 + 239);
  if (v59 >= 0) {
    uint64_t v60 = *(unsigned __int8 *)(a1 + 239);
  }
  else {
    uint64_t v60 = *(void *)(a1 + 224);
  }
  if (v60 != 15)
  {
    if (v60 != 11)
    {
      if (v60 == 8)
      {
        if (v59 < 0) {
          CFStringRef v58 = (void *)*v58;
        }
        if (*v58 == 0x746E656469736572)
        {
          CFStringRef v61 = (const void **)&kANECL2CacheModeEnableResident;
LABEL_194:
          CFDictionaryAddValue(v4, @"L2CacheMode", *v61);
          goto LABEL_197;
        }
      }
      goto LABEL_191;
    }
    if (v59 >= 0) {
      CFTypeID v67 = (void *)(a1 + 216);
    }
    else {
      CFTypeID v67 = (void *)*v58;
    }
    if (!memcmp(v67, "nonresident", 0xBuLL))
    {
      CFStringRef v61 = (const void **)&kANECL2CacheModeDisableResident;
      goto LABEL_194;
    }
    if (*v67 != 0x7277646568636163 || *(void *)((char *)v67 + 3) != 0x6574697277646568) {
      goto LABEL_191;
    }
    CFDictionaryAddValue(v4, @"L2CacheMode", @"L2EnableCachedWrite");
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    CFNumberRef v63 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
    CFTypeID v64 = @"ForceHazardStallsBegin";
    CFTypeID v66 = v4;
    CFTypeID v65 = (__CFString *)v63;
LABEL_196:
    CFDictionaryAddValue(v66, v64, v65);
    CFRelease(v63);
    goto LABEL_197;
  }
  if (v59 >= 0) {
    CFStringRef v62 = (void *)(a1 + 216);
  }
  else {
    CFStringRef v62 = (void *)*v58;
  }
  if (!memcmp(v62, "cachedreadwrite", 0xFuLL))
  {
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    CFNumberRef v63 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
    CFDictionaryAddValue(v4, @"ForceHazardStallsBegin", v63);
    CFTypeID v64 = @"L2CacheMode";
    CFTypeID v65 = @"L2EnabledCachedReadWrite";
    CFTypeID v66 = v4;
    goto LABEL_196;
  }
LABEL_191:
  BOOL v69 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v69) {
    ANECCreateCompilerOptionDictionary_cold_4(v69, v70, v71, v72, v73, v74, v75, v76);
  }
LABEL_197:
  CFTypeID v77 = *v5;
  std::string v78 = *v8;
  if (*(_DWORD *)(a1 + 264)) {
    CFTypeID v79 = *v8;
  }
  else {
    CFTypeID v79 = v77;
  }
  CFDictionaryAddValue(v4, @"DisableL2Wraparound", v79);
  if (*(_DWORD *)(a1 + 312)) {
    CFTypeID v80 = v78;
  }
  else {
    CFTypeID v80 = v77;
  }
  CFDictionaryAddValue(v4, @"DisableL2BankConflictOpt", v80);
  if (*(unsigned char *)(a1 + 364)) {
    CFTypeID v81 = v77;
  }
  else {
    CFTypeID v81 = v78;
  }
  CFDictionaryAddValue(v4, @"DisableInputAndConstantCaching", v81);
  if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval((ZinIrCompilerParameters *)a1)) {
    CFTypeID v82 = v77;
  }
  else {
    CFTypeID v82 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableSingleChannelElementwiseOpCopyRemoval", v82);
  if (ZinIrCompilerParameters::getAggressiveTensorCaching((ZinIrCompilerParameters *)a1)) {
    CFTypeID v83 = v77;
  }
  else {
    CFTypeID v83 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableAggressiveTensorCaching", v83);
  if (ZinIrCompilerParameters::getScanWeightsForCompression((ZinIrCompilerParameters *)a1)) {
    CFDictionaryAddValue(v4, @"CompressSparseKernels", v77);
  }
  if (*(unsigned char *)(a1 + 495)) {
    CFDictionaryAddValue(v4, @"DisableOnTheFlySparseEncoding", v77);
  }
  if (*(unsigned char *)(a1 + 496)) {
    CFDictionaryAddValue(v4, @"DisableWinograd", v77);
  }
  if (*(unsigned char *)(a1 + 498)) {
    CFDictionaryAddValue(v4, @"EnableDramLogEventsOnly", v77);
  }
  if (*(unsigned char *)(a1 + 499)) {
    CFDictionaryAddValue(v4, @"EnableMulticastBruteforceSearch", v77);
  }
  if (*(_DWORD *)(a1 + 500))
  {
    ZinIrCompilerParamsUtils::PerfTracerConfigToString((int *)(a1 + 500), &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    CFStringRef v85 = CFStringCreateWithCString(v2, (const char *)p_valuePtr, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    CFDictionaryAddValue(v4, @"PerfTracer1Config", v85);
    CFRelease(v85);
  }
  if (*(_DWORD *)(a1 + 512))
  {
    ZinIrCompilerParamsUtils::PerfTracerConfigToString((int *)(a1 + 512), &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeID v86 = &valuePtr;
    }
    else {
      CFTypeID v86 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    CFStringRef v87 = CFStringCreateWithCString(v2, (const char *)v86, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    CFDictionaryAddValue(v4, @"PerfTracer2Config", v87);
    CFRelease(v87);
  }
  if (*(unsigned char *)(a1 + 524)) {
    CFDictionaryAddValue(v4, @"DisableDRAMInputFIFO", v77);
  }
  if (*(unsigned char *)(a1 + 525)) {
    CFDictionaryAddValue(v4, @"AggressiveScaleFusion", v77);
  }
  if (*(unsigned char *)(a1 + 526)) {
    CFDictionaryAddValue(v4, @"EnableTaskSchedulerExp", v77);
  }
  if (*(unsigned char *)(a1 + 527)) {
    CFDictionaryAddValue(v4, @"EnableAggressiveNETransposeFusion", v77);
  }
  if (*(unsigned char *)(a1 + 528)) {
    CFDictionaryAddValue(v4, @"EnableControlFlowOps", v77);
  }
  if (*(unsigned char *)(a1 + 529)) {
    CFDictionaryAddValue(v4, @"DisableDartThrashingOptimizer", v77);
  }
  if (*(unsigned char *)(a1 + 530)) {
    CFDictionaryAddValue(v4, @"EnableDramInplaceAllocation", v77);
  }
  if (*(unsigned char *)(a1 + 531)) {
    CFDictionaryAddValue(v4, @"EnableGlobalChannelSplitting", v77);
  }
  if (*(_DWORD *)(a1 + 208) != 88)
  {
    CFNumberRef v88 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 208));
    CFDictionaryAddValue(v4, @"DramFragmentationFactor", v88);
    CFRelease(v88);
  }
  if (*(unsigned char *)(a1 + 532)) {
    CFDictionaryAddValue(v4, @"UseExtendedMachoFormat", v77);
  }
  if (*(unsigned char *)(a1 + 533)) {
    CFDictionaryAddValue(v4, @"EnableAdvancedKernelRefinement", v77);
  }
  if (*(unsigned char *)(a1 + 534)) {
    CFStringRef v89 = v77;
  }
  else {
    CFStringRef v89 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableL2BatchSplitting", v89);
  if (*(unsigned char *)(a1 + 535)) {
    CFTypeID v90 = v77;
  }
  else {
    CFTypeID v90 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableGlobalCWOptimization", v90);
  if (*(unsigned char *)(a1 + 536)) {
    CFTypeID v91 = v77;
  }
  else {
    CFTypeID v91 = v78;
  }
  CFDictionaryAddValue(v4, @"SuppressMathException", v91);
  if (*(unsigned char *)(a1 + 537)) {
    CFTypeID v92 = v77;
  }
  else {
    CFTypeID v92 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableL2CachedBuffer", v92);
  if (*(unsigned char *)(a1 + 538)) {
    CFTypeID v93 = v77;
  }
  else {
    CFTypeID v93 = v78;
  }
  CFDictionaryAddValue(v4, @"EnableNoiseReductionTiling", v93);
  uint64_t v94 = *(void *)(a1 + 552);
  if ((v94 & 0xFF00000000) != 0)
  {
    E4M3OverflowToString(v94, &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v95 = &valuePtr;
    }
    else {
      CFStringRef v95 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    CFStringRef v96 = CFStringCreateWithCString(v2, (const char *)v95, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    CFDictionaryAddValue(v4, @"E4M3Overflow", v96);
    CFRelease(v96);
  }
  if (*(unsigned char *)(a1 + 131)) {
    CFStringRef v97 = (const void **)&kANECSignatureDisabled;
  }
  else {
    CFStringRef v97 = (const void **)&kANECSignatureIdent;
  }
  CFDictionaryAddValue(v4, @"Signature", *v97);
  if (*(_DWORD *)(a1 + 332)) {
    CFTypeID v98 = v77;
  }
  else {
    CFTypeID v98 = v78;
  }
  CFDictionaryAddValue(v4, @"UseNewMachoMagicNumber", v98);
  CFStringRef v99 = (const void **)(a1 + 336);
  int v100 = *(char *)(a1 + 359);
  if (v100 >= 0) {
    uint64_t v101 = *(unsigned __int8 *)(a1 + 359);
  }
  else {
    uint64_t v101 = *(void *)(a1 + 344);
  }
  if (v101)
  {
    if (v101 == 6)
    {
      if (v100 >= 0) {
        CFTypeID v104 = (const void *)(a1 + 336);
      }
      else {
        CFTypeID v104 = *v99;
      }
      if (!memcmp(v104, "Simple", 6uLL))
      {
        CFTypeID v102 = (const void **)&kANECMemCacheStrategySimple;
        goto LABEL_308;
      }
    }
    else if (v101 == 4)
    {
      if (v100 < 0) {
        CFStringRef v99 = (const void **)*v99;
      }
      if (*(_DWORD *)v99 == 1701736270)
      {
        CFTypeID v102 = (const void **)&kANECMemCacheStrategyNone;
LABEL_308:
        CFDictionaryAddValue(v4, @"MemCacheStrategy", *v102);
        goto LABEL_309;
      }
    }
  }
  else
  {
    if (v100 >= 0) {
      CFTypeID v103 = (const void *)(a1 + 336);
    }
    else {
      CFTypeID v103 = *v99;
    }
    if (!memcmp(v103, &byte_211F4AA5D, 0)) {
      goto LABEL_309;
    }
  }
  BOOL v105 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v105) {
    ANECCreateCompilerOptionDictionary_cold_3(v105, v106, v107, v108, v109, v110, v111, v112);
  }
LABEL_309:
  if ((*(_DWORD *)(a1 + 360) & 0x80000000) == 0)
  {
    CFNumberRef v113 = CFNumberCreate(v2, kCFNumberSInt32Type, (const void *)(a1 + 360));
    CFDictionaryAddValue(v4, @"MemCacheSize", v113);
    CFRelease(v113);
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
  }
  if (size != 8)
  {
    BOOL v116 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_321;
    }
LABEL_319:
    if (!v116) {
      goto LABEL_322;
    }
LABEL_320:
    CFStringRef v117 = @"Disabled";
LABEL_397:
    CFDictionaryAddValue(v4, @"SpatialSplit", v117);
    goto LABEL_398;
  }
  uint64_t v115 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v115 = &valuePtr;
  }
  BOOL v116 = v115->__r_.__value_.__r.__words[0] == 0x64656C6261736964;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_319;
  }
LABEL_321:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v116) {
    goto LABEL_320;
  }
LABEL_322:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type v118 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v118 = valuePtr.__r_.__value_.__l.__size_;
  }
  if (v118 != 4)
  {
    BOOL v120 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_332;
    }
LABEL_330:
    if (!v120) {
      goto LABEL_333;
    }
    goto LABEL_331;
  }
  uint64_t v119 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v119 = &valuePtr;
  }
  BOOL v120 = LODWORD(v119->__r_.__value_.__l.__data_) == 1953719668;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_330;
  }
LABEL_332:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v120)
  {
LABEL_331:
    CFStringRef v117 = @"Test";
    goto LABEL_397;
  }
LABEL_333:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type v121 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v121 = valuePtr.__r_.__value_.__l.__size_;
  }
  if (v121 != 6)
  {
    BOOL v126 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_349;
    }
LABEL_347:
    if (!v126) {
      goto LABEL_350;
    }
    goto LABEL_348;
  }
  uint64_t v122 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v122 = &valuePtr;
  }
  int data = (int)v122->__r_.__value_.__l.__data_;
  int v124 = WORD2(v122->__r_.__value_.__r.__words[0]);
  BOOL v126 = data == 1869440365 && v124 == 31090;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_347;
  }
LABEL_349:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v126)
  {
LABEL_348:
    CFStringRef v117 = @"Memory";
    goto LABEL_397;
  }
LABEL_350:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type v127 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v127 = valuePtr.__r_.__value_.__l.__size_;
  }
  if (v127 != 4)
  {
    BOOL v129 = 0;
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_358;
  }
  CFStringRef v128 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v128 = &valuePtr;
  }
  BOOL v129 = LODWORD(v128->__r_.__value_.__l.__data_) == 1869903201;
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
LABEL_358:
  }
    operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_359:
  if (v129)
  {
    CFStringRef v117 = @"Auto";
    goto LABEL_397;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type v130 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v130 = valuePtr.__r_.__value_.__l.__size_;
  }
  if (v130 == 11)
  {
    BOOL v131 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v131 = &valuePtr;
    }
    std::string::size_type v132 = v131->__r_.__value_.__r.__words[0];
    uint64_t v133 = *(std::string::size_type *)((char *)v131->__r_.__value_.__r.__words + 3);
    BOOL v135 = v132 == 0x2D636972656E6567 && v133 == 0x6761642D63697265;
  }
  else
  {
    BOOL v135 = 0;
  }
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  if (v135)
  {
    CFStringRef v117 = @"GenericDAG";
    goto LABEL_397;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  std::string::size_type v136 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v136 = valuePtr.__r_.__value_.__l.__size_;
  }
  if (v136 == 15)
  {
    CFTypeID v137 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeID v137 = &valuePtr;
    }
    std::string::size_type v138 = v137->__r_.__value_.__r.__words[0];
    uint64_t v139 = *(std::string::size_type *)((char *)v137->__r_.__value_.__r.__words + 7);
    BOOL v141 = v138 == 0x2D636972656E6567 && v139 == 0x7078652D6761642DLL;
  }
  else
  {
    BOOL v141 = 0;
  }
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  if (v141)
  {
    CFStringRef v117 = @"GenericDAGExperimental";
    goto LABEL_397;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  BOOL v142 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&valuePtr.__r_.__value_.__l.__data_, "generic-dag-memory");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  if (v142)
  {
    CFStringRef v117 = @"GenericDAGMemory";
    goto LABEL_397;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  BOOL v178 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&valuePtr.__r_.__value_.__l.__data_, "manual");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  }
  if (v178)
  {
    CFDictionaryAddValue(v4, @"SpatialSplit", @"Manual");
    CFMutableArrayRef theArray = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
    CFDictionaryAddValue(v4, @"SpatialSplitSubgraphs", theArray);
    ZinIrCompilerParameters::getSubgraph((ZinIrCompilerParameters *)a1, &valuePtr);
    if (valuePtr.__r_.__value_.__l.__size_ != valuePtr.__r_.__value_.__r.__words[0])
    {
      uint64_t v179 = 0;
      unint64_t v180 = 0;
      do
      {
        CFTypeID v181 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        LODWORD(v195) = *(void *)(valuePtr.__r_.__value_.__r.__words[0] + v179);
        CFNumberRef v182 = CFNumberCreate(v2, kCFNumberSInt32Type, &v195);
        CFDictionaryAddValue(v181, @"HTileCount", v182);
        CFRelease(v182);
        CFStringRef v183 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
        ANECCreateCompilerOptionDictionary::$_0::operator()((long long **)(valuePtr.__r_.__value_.__r.__words[0] + v179 + 24), v183);
        CFDictionaryAddValue(v181, @"InputNodes", v183);
        CFRelease(v183);
        CFTypeID v184 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
        ANECCreateCompilerOptionDictionary::$_0::operator()((long long **)(valuePtr.__r_.__value_.__r.__words[0] + v179 + 48), v184);
        CFDictionaryAddValue(v181, @"OutputNodes", v184);
        CFRelease(v184);
        CFArrayAppendValue(theArray, v181);
        CFRelease(v181);
        ++v180;
        v179 += 96;
      }
      while (v180 < 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(valuePtr.__r_.__value_.__l.__size_ - valuePtr.__r_.__value_.__r.__words[0]) >> 5));
    }
    CFDictionaryAddValue(v4, @"SpatialSplitSubgraphs", theArray);
    CFRelease(theArray);
    CFStringRef v195 = &valuePtr;
    std::vector<ZinIrCompilerParameters::SubGraphSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
  }
  else
  {
    BOOL v185 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v185) {
      ANECCreateCompilerOptionDictionary_cold_2(v185, v186, v187, v188, v189, v190, v191, v192);
    }
  }
LABEL_398:
  if ((*(void *)(a1 + 480) & 0x8000000000000000) == 0)
  {
    CFNumberRef v143 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 480));
    CFDictionaryAddValue(v4, @"EnableCircularBufferInSpatialSplit", v143);
    CFRelease(v143);
  }
  if (*(unsigned char *)(a1 + 494)) {
    CFDictionaryAddValue(v4, @"EnableSpatialSplitInX", v77);
  }
  if (*(unsigned char *)(a1 + 365)) {
    CFDictionaryAddValue(v4, @"UseWideWorkUnits", v77);
  }
  if (*(unsigned char *)(a1 + 366)) {
    CFDictionaryAddValue(v4, @"DisableRegisterPacking", v77);
  }
  if (*(unsigned char *)(a1 + 367)) {
    CFDictionaryAddValue(v4, @"DisableCpAllocation", v77);
  }
  if (*(float *)(a1 + 388) > 0.0)
  {
    CFNumberRef v144 = CFNumberCreate(v2, kCFNumberFloatType, (const void *)(a1 + 388));
    CFDictionaryAddValue(v4, @"MaxTDLatencyMicroSec", v144);
    CFRelease(v144);
  }
  if ((*(void *)(a1 + 392) & 0x8000000000000000) == 0)
  {
    CFNumberRef v145 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 392));
    CFDictionaryAddValue(v4, @"BSSLimit", v145);
    CFRelease(v145);
  }
  if (*(unsigned char *)(a1 + 371)) {
    CFTypeID v146 = v77;
  }
  else {
    CFTypeID v146 = v78;
  }
  CFDictionaryAddValue(v4, @"OptimizeNEUtilization", v146);
  CFNumberRef v147 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 372));
  CFDictionaryAddValue(v4, @"DisableCachePrefetchMask", v147);
  CFRelease(v147);
  if (*(unsigned char *)(a1 + 374)) {
    CFDictionaryAddValue(v4, @"DisablePerCoutGOCToSingularGOC", v77);
  }
  CFStringRef v148 = (const void **)(a1 + 400);
  int v149 = *(char *)(a1 + 423);
  if (v149 >= 0) {
    uint64_t v150 = *(unsigned __int8 *)(a1 + 423);
  }
  else {
    uint64_t v150 = *(void *)(a1 + 408);
  }
  if (v150 > 6)
  {
    if (v150 == 7)
    {
      if (v149 >= 0) {
        CFTypeID v154 = (const void *)(a1 + 400);
      }
      else {
        CFTypeID v154 = *v148;
      }
      if (!memcmp(v154, "ew-perf", 7uLL))
      {
        CFStringRef v151 = @"EWPerf";
        goto LABEL_446;
      }
    }
    else if (v150 == 14)
    {
      CFTypeID v152 = v149 >= 0 ? (const void *)(a1 + 400) : *v148;
      if (!memcmp(v152, "reduction-perf", 0xEuLL))
      {
        CFStringRef v151 = @"ReductionPerf";
        goto LABEL_446;
      }
    }
  }
  else if (v150)
  {
    if (v150 == 4)
    {
      if (v149 < 0) {
        CFStringRef v148 = (const void **)*v148;
      }
      if (*(_DWORD *)v148 == 1701736302)
      {
        CFStringRef v151 = @"None";
LABEL_446:
        CFDictionaryAddValue(v4, @"Optimize", v151);
        goto LABEL_447;
      }
    }
  }
  else
  {
    if (v149 >= 0) {
      CFTypeID v153 = (const void *)(a1 + 400);
    }
    else {
      CFTypeID v153 = *v148;
    }
    if (!memcmp(v153, &byte_211F4AA5D, 0)) {
      goto LABEL_447;
    }
  }
  BOOL v155 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v155) {
    ANECCreateCompilerOptionDictionary_cold_1(v155, v156, v157, v158, v159, v160, v161, v162);
  }
LABEL_447:
  if (*(unsigned char *)(a1 + 375)) {
    CFDictionaryAddValue(v4, @"DisableSSM", v77);
  }
  if (*(unsigned char *)(a1 + 384)) {
    CFDictionaryAddValue(v4, @"DisableKernelStreaming", v77);
  }
  if (*(unsigned char *)(a1 + 387)) {
    CFDictionaryAddValue(v4, @"EnableSummaryPerformanceStats", v77);
  }
  if (*(unsigned char *)(a1 + 376)) {
    CFTypeID v163 = v77;
  }
  else {
    CFTypeID v163 = v78;
  }
  CFDictionaryAddValue(v4, @"OptimizeKernelCoalescing", v163);
  if (*(unsigned char *)(a1 + 377)) {
    CFStringRef v164 = v77;
  }
  else {
    CFStringRef v164 = v78;
  }
  CFDictionaryAddValue(v4, @"OptimizeMutableKernelSection", v164);
  if (*(unsigned char *)(a1 + 378)) {
    CFTypeID v165 = v77;
  }
  else {
    CFTypeID v165 = v78;
  }
  CFDictionaryAddValue(v4, @"SplitKernelSection", v165);
  if ((*(_DWORD *)(a1 + 380) & 0x80000000) == 0)
  {
    CFNumberRef v166 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 380));
    CFDictionaryAddValue(v4, @"MaxKernelSectionSize", v166);
    CFRelease(v166);
  }
  if (*(unsigned char *)(a1 + 386))
  {
    if (*(unsigned char *)(a1 + 385)) {
      CFStringRef v167 = v77;
    }
    else {
      CFStringRef v167 = v78;
    }
    CFDictionaryAddValue(v4, @"CompilerMultithreading", v167);
  }
  if (*(unsigned char *)(a1 + 744))
  {
    if (*(char *)(a1 + 775) >= 0) {
      CFTypeID v168 = (const char *)(a1 + 752);
    }
    else {
      CFTypeID v168 = *(const char **)(a1 + 752);
    }
    CFStringRef v169 = CFStringCreateWithCString(v2, v168, 0x8000100u);
    CFDictionaryAddValue(v4, @"OptionsFilePath", v169);
    CFRelease(v169);
  }
  uint64_t v170 = *(unsigned __int8 *)(a1 + 471);
  BOOL v171 = (v170 & 0x80u) != 0;
  if ((v170 & 0x80u) != 0) {
    uint64_t v170 = *(void *)(a1 + 456);
  }
  if (v171) {
    uint64_t v172 = *(void *)(a1 + 448);
  }
  else {
    uint64_t v172 = a1 + 448;
  }
  if (v170 != 6
    || (*(_DWORD *)v172 == 1952543827 ? (BOOL v173 = *(unsigned __int16 *)(v172 + 4) == 25449) : (BOOL v173 = 0), !v173))
  {
    CFStringRef v174 = CFStringCreateWithCString(v2, (const char *)v172, 0x8000100u);
    CFDictionaryAddValue(v4, @"SeedEncoding", v174);
    CFRelease(v174);
  }
  if (*(unsigned char *)(a1 + 488)) {
    CFDictionaryAddValue(v4, @"DisableNEWidthSlicing", v77);
  }
  if (*(unsigned char *)(a1 + 489)) {
    CFDictionaryAddValue(v4, @"DisableHardSwishOpt", v77);
  }
  if (*(unsigned char *)(a1 + 490)) {
    CFDictionaryAddValue(v4, @"DisableHighPrecisionSigmoid", v77);
  }
  if (*(unsigned char *)(a1 + 491)) {
    CFDictionaryAddValue(v4, @"DisableLayernormOpt", v77);
  }
  if (*(unsigned char *)(a1 + 492)) {
    CFDictionaryAddValue(v4, @"EnableDynamicShapes", v77);
  }
  if (*(unsigned char *)(a1 + 540)) {
    CFDictionaryAddValue(v4, @"ForceDynamicShapesMil", v77);
  }
  if (*(unsigned char *)(a1 + 493)) {
    CFDictionaryAddValue(v4, @"EnableIntermediateCompression", v77);
  }
  if (*(unsigned char *)(a1 + 497)) {
    CFStringRef v175 = v77;
  }
  else {
    CFStringRef v175 = v78;
  }
  CFDictionaryAddValue(v4, @"PreserveTextureFraction", v175);
  if (*(unsigned char *)(a1 + 498)) {
    CFDictionaryAddValue(v4, @"EnableDramLogEventsOnly", v77);
  }
  if (*(unsigned char *)(a1 + 561))
  {
    if (*(unsigned char *)(a1 + 560)) {
      CFTypeID v176 = v77;
    }
    else {
      CFTypeID v176 = v78;
    }
    CFDictionaryAddValue(v4, @"GlobalRefinementInSpatialSplit", v176);
  }
  if (!*(unsigned char *)(a1 + 562)) {
    CFDictionaryAddValue(v4, @"EnableSegmentAwareKernelSectionSplit", v78);
  }
  if (*(unsigned char *)(a1 + 563)) {
    CFDictionaryAddValue(v4, @"EnableMILConstantCoalescing", v77);
  }
  if (!*(unsigned char *)(a1 + 534)) {
    CFDictionaryAddValue(v4, @"EnableL2BatchSplitting", v78);
  }
  if (*(unsigned char *)(a1 + 368)) {
    CFDictionaryAddValue(v4, @"EnableLowEffortCPAllocation", v77);
  }
  if (*(unsigned char *)(a1 + 564)) {
    CFDictionaryAddValue(v4, @"DisableWeightFileSizeCheck", v77);
  }
  return v4;
}

void sub_2111A1F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void **p_p)
{
  p_p = &__p;
  std::vector<ZinIrCompilerParameters::SubGraphSpec>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void ANECCreateCompilerOptionDictionary::$_0::operator()(long long **a1, __CFArray *a2)
{
  CFAllocatorRef v2 = *a1;
  BOOL v3 = a1[1];
  if (*a1 != v3)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      CFStringRef v8 = CFStringCreateWithCString(v5, (const char *)p_p, 0x8000100u);
      CFArrayAppendValue(a2, v8);
      CFRelease(v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CFAllocatorRef v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_2111A2078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANECGetCompilerFileFormat(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v1 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v1 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  while (p_p != v1)
  {
    p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
    p_p = (std::string *)((char *)p_p + 1);
  }
  if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".hwx"))
  {
    uint64_t v3 = 4;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".plist"))
  {
    uint64_t v3 = 1;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".mil"))
  {
    uint64_t v3 = 2;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".mlir"))
  {
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_2111A21A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::string::ends_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    long long v6 = a1;
    a1 = (uint64_t *)*a1;
    uint64_t v5 = v6[1];
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::ends_with[abi:ne180100](v8, __s, v4);
}

BOOL std::string_view::ends_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  size_t v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  CFNumberRef v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

void ANECCreateCompilerOptionsCFString_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionsCFString_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionsCFString_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionsCFString_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionsCFString_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionsCFString_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionDictionary_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionDictionary_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionDictionary_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ANECCreateCompilerOptionDictionary_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ZinIrBroadcastUnit::ZinIrBroadcastUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *unint64_t v5 = &unk_26C34BD18;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C34F840;
  std::unordered_map<ZinIrDimension,unsigned long>::unordered_map(a1 + 136, a2 + 80);
  return a1;
}

void sub_2111A2628(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBroadcastUnit::TensorDimensions(ZinIrBroadcastUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) - v4 == 120)
  {
    long long v7 = *(_OWORD *)(v4 + 8);
    long long v8 = *(_OWORD *)(v4 + 24);
    *((void *)a3 + 4) = *(void *)(v4 + 40);
    *(_OWORD *)a3 = v7;
    *((_OWORD *)a3 + 1) = v8;
    ZinIrBroadcastInfo::ZinIrBroadcastInfo(v11, (char *)this + 136);
    uint64_t v9 = ZinIrBroadcastInfo::TensorDimensions((ZinIrBroadcastInfo *)v11, (const ZinTensorDimensions *)(*((void *)this + 1) + 8), a3);
    v11[0] = &unk_26C34BCF8;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v12);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v11);
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, @"InvalidBottomCount");
    return 3;
  }
  return v9;
}

void sub_2111A2730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinIrBroadcastInfo::~ZinIrBroadcastInfo((ZinIrBroadcastInfo *)va);
  _Unwind_Resume(a1);
}

void ZinIrBroadcastUnit::CreateOpcode(ZinIrBroadcastUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_2111A279C(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10A1C407AA052A5);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBroadcastUnit::GetBroadcastDimensions(ZinIrBroadcastUnit *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3, ZinIrBroadcastUnitInfo *a4)
{
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)this + 3);
  if (v7 != v8)
  {
    if (v7 != 1) {
      ZinAssertImpl("Broadcast output tensor width must be 1 or match input_width size %ld, but %ld is given", *((void *)this + 3), v7);
    }
    *((void *)a2 + 3) = v8;
    uint64_t v9 = *((void *)this + 3);
    int v22 = 4;
    int v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v9;
  }
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)this + 2);
  if (v10 != v11)
  {
    if (v10 != 1) {
      ZinAssertImpl("Broadcast output tensor height must be 1 or match input_height size %ld, but %ld is given", *((void *)this + 2), v10);
    }
    *((void *)a2 + 2) = v11;
    uint64_t v12 = *((void *)this + 2);
    int v22 = 3;
    int v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v12;
  }
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v14 = *((void *)this + 1);
  if (v13 != v14)
  {
    if (v13 != 1) {
      ZinAssertImpl("Broadcast output tensor channel must be 1 or match input_channel size %ld, but %ld is given", *((void *)this + 1), v13);
    }
    *((void *)a2 + 1) = v14;
    uint64_t v15 = *((void *)this + 1);
    int v22 = 2;
    int v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v15;
  }
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = *((void *)this + 4);
  if (v16 != v17)
  {
    if (v16 != 1) {
      ZinAssertImpl("Broadcast output tensor depth must be 1 or match input_depth size %ld, but %ld is given", *((void *)this + 4), v16);
    }
    *((void *)a2 + 4) = v17;
    uint64_t v18 = *((void *)this + 4);
    int v22 = 1;
    int v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v18;
  }
  uint64_t v19 = *(void *)a2;
  if (*(void *)a2 != *(void *)this)
  {
    if (v19 != 1) {
      ZinAssertImpl("Broadcast output tensor batch must be 1 or match input_batch size %ld, but %ld is given", *(void *)this, v19);
    }
    *(void *)a2 = *(void *)this;
    uint64_t v20 = *(void *)this;
    int v22 = 0;
    int v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v20;
  }
  return 0;
}

void ZinIrBroadcastUnit::CreateLayer(ZinIrBroadcastUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_2111A2B48(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void **ZinRtProcedure::AddOperation(ZinRtProcedure *this, ZinRtOperation *a2)
{
  unint64_t v6 = *((void *)this + 10);
  uint64_t result = (void **)((char *)this + 80);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (uint64_t *)(result - 2);
    uint64_t v10 = (uint64_t)*(result - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v18[4] = result;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)result, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    v18[0] = v15;
    v18[1] = v16;
    double v18[3] = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    void v18[2] = v16 + 8;
    std::vector<std::unique_ptr<ZinRtOperation>>::__swap_out_circular_buffer(v9, v18);
    uint64_t v8 = (void *)*((void *)this + 9);
    uint64_t result = std::__split_buffer<std::unique_ptr<ZinRtOperation>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
    *((void *)this + 9) = v8;
  }
  *((void *)this + 9) = v8;
  unint64_t v17 = (unint64_t)v8 - *((void *)this + 8);
  if (v17 >> 35) {
    ZinAssertImpl("Too many operations in the procedure");
  }
  *((_DWORD *)this + 2) = (v17 >> 3) & 0x7FFFFFFF | ((*((int *)this + 2) < 0) << 31);
  return result;
}

void sub_2111A2D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<ZinRtOperation>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t ZinRtProcedure::SerializeHelper(uint64_t *a1, int a2, void *a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t PointerAtOffset = GetPointerAtOffset(a3, a4, 3uLL);
    if (!PointerAtOffset) {
      ZinAssertImpl("Procedure header overran buffer");
    }
    uint64_t v14 = *a1;
    *(_DWORD *)(PointerAtOffset + 8) = *((_DWORD *)a1 + 2);
    *(void *)uint64_t PointerAtOffset = v14;
    uint64_t v12 = (unsigned int *)GetPointerAtOffset(a3, a4 + 3, 6uLL);
  }
  memset(v35, 0, sizeof(v35));
  int v36 = 1065353216;
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  std::string __p = 0;
  std::string v31 = 0;
  uint64_t v32 = 0;
  uint64_t v15 = ZinRegisterPacking::ProcessRegisters((uint64_t)a1 + 12, 6uLL, 2112, v12, a2 ^ 1u, 0, v35, v33, 0, (__int32 **)&__p);
  unint64_t v16 = v15 + 3;
  if (__p)
  {
    std::string v31 = __p;
    operator delete(__p);
  }
  CFStringRef v29 = a3;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35);
  int v27 = a1;
  uint64_t v18 = a1[11];
  uint64_t v17 = a1[12];
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    uint64_t v28 = 4 * v15 + 4 * a4;
    do
    {
      if ((a2 & 1) == 0)
      {
        *(void *)&v35[0] = &unk_26C3522C0;
        DWORD2(v35[0]) = 0;
        ZinAneSequentialCommand_v11::SetAddress((uint64_t)v35, 0x800u);
        DWORD2(v35[0]) = DWORD2(v35[0]) & 0xFFE07FFF | 0x10000;
        uint64_t v20 = v28 + v19 + *a3;
        *(_DWORD *)(v20 + 12) = DWORD2(v35[0]);
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(v18 + v19 + 8);
        AddRelocation(*(void *)(v18 + v19) + 40, a5, v28 + v19 + 20, 1, a6);
        uint64_t v21 = v28 + v19 + *a3;
        *(_DWORD *)(v21 + 20) = 0;
        *(_DWORD *)(v21 + 24) = 0;
      }
      v16 += 4;
      v19 += 16;
    }
    while (v18 + v19 != v17);
  }
  if (a2) {
    *((_DWORD *)v27 + 1) = v16;
  }
  int v22 = (uint64_t *)v27[8];
  for (uint64_t i = (uint64_t *)v27[9]; v22 != i; ++v22)
  {
    uint64_t v24 = *v22;
    if (a2) {
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    }
    else {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t, uint64_t *))(*(void *)v24 + 24))(v24, v29, v16 + a4, a5, a6);
    }
    v16 += v25;
  }
  if (a2)
  {
    if (v16 >= 0xFFFFFFFF) {
      ZinAssertImpl("Procedure is too big");
    }
    *(_DWORD *)int v27 = v16;
  }
  return v16;
}

void sub_2111A2FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

unint64_t ZinRtProcedure::GetSerializedSize(ZinRtProcedure *this)
{
  v4[0] = 0;
  v4[1] = 0;
  memset(v3, 0, sizeof(v3));
  unint64_t v1 = ZinRtProcedure::SerializeHelper((uint64_t *)this, 1, v4, 0, 0, v3);
  unint64_t v5 = (void **)v3;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100](&v5);
  return v1;
}

void sub_2111A3084(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

unint64_t ZinRtProcedure::Serialize(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9 = ZinRtProcedure::SerializeHelper((uint64_t *)a1, 0, a2, a3, a4, a5);
  AddSymbol(a1 + 40, a4, 4 * a3, 4 * *(unsigned int *)(a1 + 4), a5);
  return v9;
}

uint64_t std::vector<std::unique_ptr<ZinRtOperation>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<ZinRtOperation>>,std::reverse_iterator<std::unique_ptr<ZinRtOperation>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<ZinRtOperation>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<ZinRtOperation>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t ZinRtProcedure::AddOperation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t ZinIrShapeUnit::ZinIrShapeUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *uint64_t v5 = &unk_26C346B60;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C34C0B0;
  return a1;
}

void sub_2111A348C(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrShapeUnit::TensorDimensions(ZinIrShapeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  *(int64x2_t *)a3 = vdupq_n_s64(1uLL);
  *((_OWORD *)a3 + 1) = xmmword_211EE30E0;
  *((void *)a3 + 4) = 1;
  return 0;
}

void ZinIrShapeUnit::CreateLayer()
{
}

void sub_2111A35C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinIrShapeUnit::PropagateConstValue(ZinIrShapeUnit *this@<X0>, _OWORD *a2@<X8>)
{
  std::string __p = 0;
  int v52 = 0;
  unint64_t v53 = 0;
  uint64_t v4 = *(void *)(*((void *)this + 1) + 32);
  uint64_t v5 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, 1uLL);
  unint64_t v7 = (unint64_t)&v5[v6];
  *uint64_t v5 = (float)v4;
  uint64_t v8 = v5 + 1;
  std::string __p = v5;
  unint64_t v53 = v7;
  int v52 = v5 + 1;
  float v9 = (float)*(uint64_t *)(*((void *)this + 1) + 24);
  if ((unint64_t)(v5 + 1) >= v7)
  {
    uint64_t v11 = (float *)__p;
    uint64_t v12 = ((char *)v8 - (unsigned char *)__p) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v7 - (void)__p;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v15);
      uint64_t v11 = (float *)__p;
      uint64_t v8 = v52;
    }
    else
    {
      long long v16 = 0;
    }
    uint64_t v17 = (float *)&v16[4 * v12];
    unint64_t v7 = (unint64_t)&v16[4 * v15];
    *uint64_t v17 = v9;
    uint64_t v10 = v17 + 1;
    while (v8 != v11)
    {
      int v18 = *((_DWORD *)v8-- - 1);
      *((_DWORD *)v17-- - 1) = v18;
    }
    std::string __p = v17;
    int v52 = v10;
    unint64_t v53 = v7;
    if (v11)
    {
      operator delete(v11);
      unint64_t v7 = v53;
    }
  }
  else
  {
    v5[1] = v9;
    uint64_t v10 = v5 + 2;
  }
  int v52 = v10;
  float v19 = (float)*(uint64_t *)(*((void *)this + 1) + 16);
  if ((unint64_t)v10 >= v7)
  {
    uint64_t v21 = (float *)__p;
    uint64_t v22 = ((char *)v10 - (unsigned char *)__p) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v7 - (void)__p;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v25);
      uint64_t v21 = (float *)__p;
      uint64_t v10 = v52;
    }
    else
    {
      uint64_t v26 = 0;
    }
    int v27 = (float *)&v26[4 * v22];
    unint64_t v7 = (unint64_t)&v26[4 * v25];
    *int v27 = v19;
    uint64_t v20 = v27 + 1;
    while (v10 != v21)
    {
      int v28 = *((_DWORD *)v10-- - 1);
      *((_DWORD *)v27-- - 1) = v28;
    }
    std::string __p = v27;
    int v52 = v20;
    unint64_t v53 = v7;
    if (v21)
    {
      operator delete(v21);
      unint64_t v7 = v53;
    }
  }
  else
  {
    *uint64_t v10 = v19;
    uint64_t v20 = v10 + 1;
  }
  int v52 = v20;
  float v29 = (float)*(uint64_t *)(*((void *)this + 1) + 40);
  if ((unint64_t)v20 >= v7)
  {
    std::string v31 = (float *)__p;
    uint64_t v32 = ((char *)v20 - (unsigned char *)__p) >> 2;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v7 - (void)__p;
    if (v34 >> 1 > v33) {
      unint64_t v33 = v34 >> 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v35);
      std::string v31 = (float *)__p;
      uint64_t v20 = v52;
    }
    else
    {
      int v36 = 0;
    }
    int v37 = (float *)&v36[4 * v32];
    unint64_t v7 = (unint64_t)&v36[4 * v35];
    float *v37 = v29;
    BOOL v30 = v37 + 1;
    while (v20 != v31)
    {
      int v38 = *((_DWORD *)v20-- - 1);
      *((_DWORD *)v37-- - 1) = v38;
    }
    std::string __p = v37;
    int v52 = v30;
    unint64_t v53 = v7;
    if (v31)
    {
      operator delete(v31);
      unint64_t v7 = v53;
    }
  }
  else
  {
    *uint64_t v20 = v29;
    BOOL v30 = v20 + 1;
  }
  int v52 = v30;
  float v39 = (float)*(uint64_t *)(*((void *)this + 1) + 8);
  if ((unint64_t)v30 >= v7)
  {
    int v41 = (float *)__p;
    uint64_t v42 = ((char *)v30 - (unsigned char *)__p) >> 2;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = v7 - (void)__p;
    if (v44 >> 1 > v43) {
      unint64_t v43 = v44 >> 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v45);
      int v41 = (float *)__p;
      BOOL v30 = v52;
    }
    else
    {
      int v46 = 0;
    }
    CFTypeID v47 = (float *)&v46[4 * v42];
    CFTypeID v48 = &v46[4 * v45];
    float *v47 = v39;
    uint64_t v40 = v47 + 1;
    while (v30 != v41)
    {
      int v49 = *((_DWORD *)v30-- - 1);
      *((_DWORD *)v47-- - 1) = v49;
    }
    std::string __p = v47;
    int v52 = v40;
    unint64_t v53 = (unint64_t)v48;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *BOOL v30 = v39;
    uint64_t v40 = v30 + 1;
  }
  int v52 = v40;
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v50);
  *a2 = v50;
  if (__p)
  {
    int v52 = (float *)__p;
    operator delete(__p);
  }
}

void sub_2111A3A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrShapeUnit::~ZinIrShapeUnit(void **this)
{
  *this = &unk_26C346B60;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);

  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  uint64_t vars8;

  *this = &unk_26C346B60;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrShapeUnitInfo::~ZinIrShapeUnitInfo(void **this)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::ZinMatrixDecompositionMatrixMultiplicationCompositeLayer(ZinMatrixDecompositionMatrixMultiplicationCompositeLayer *this, ZinMatrixDecompositionLayer *a2, ZinMatrixMultLayer *a3)
{
}

void sub_2111A3DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  unint64_t v35 = *(std::__shared_weak_count **)(v33 - 64);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(void *)(v33 - 56);
  *(void *)(v33 - 56) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  __n128 v6 = ZinObjectNameFactory::ZinObjectNameFactory(v58, a1 + 24);
  uint64_t v57 = *(void *)(a1 + 16);
  int64_t v7 = *(void *)((*(uint64_t (**)(uint64_t, void, void, __n128))(*(void *)a1 + 32))(a1, 0, 0, v6)
                 + 48);
  uint64_t v8 = *(void **)(*(void *)(a1 + 200) + 64);
  if (v8[14] != v7 || v8[17] != v7 || v8[20] != v7)
  {
LABEL_7:
    uint64_t v9 = 3;
    goto LABEL_8;
  }
  if (ZinMatrixDecompositionLayer::HasAllXYZRotationDisabled(*(void *)(*(void *)(a1 + 200) + 64)))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower();
    }
    goto LABEL_7;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 88);
  uint64_t v12 = *v11;
  uint64_t v32 = v11[1];
  CFNumberRef v55 = 0;
  CFNumberRef v54 = 0;
  uint64_t v56 = 0;
  BOOL HasAllRotationAlongAxisDisabled = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 19));
  BOOL v14 = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 16));
  BOOL v15 = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 13));
  int64x2_t v51 = vdupq_n_s64(1uLL);
  int64x2_t v52 = v51;
  uint64_t v53 = 1;
  uint64_t v9 = ZinMatrixDecompositionLayer::CreateR1R2R3Decomposition(*(void *)(a1 + 200), v57, (uint64_t)v58, a3, a2, v12, !HasAllRotationAlongAxisDisabled, !v14, !v15, &v54, (uint64_t)&v51);
  if (!v9 && v55 != v54 && v55 - (unsigned char *)v54 == 24)
  {
    long long v16 = v54;
    do
    {
      if (*v16)
      {
        uint64_t v33 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v32 + 32))(v32, 0, 0);
        memset(v50, 0, sizeof(v50));
        memset(v49, 0, sizeof(v49));
        std::vector<ZinIrOpLayer *>::reserve(v50, v7);
        std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(v49, v7);
        if (v7 >= 1)
        {
          v46[1] = (void *)v51.i64[1];
          int64x2_t v47 = v52;
          uint64_t v48 = v53;
          uint64_t v45 = 1;
          v46[0] = (void *)1;
          *(_OWORD *)uint64_t v42 = 0u;
          long long v43 = 0u;
          v44[0] = vdupq_n_s64(1uLL);
          v44[1] = v44[0];
          int v38 = &v57;
          float v39 = v46;
          uint64_t v40 = &v41;
          uint64_t v41 = 0;
          if (*(char *)(v33 + 47) >= 0) {
            size_t v17 = *(unsigned __int8 *)(v33 + 47);
          }
          else {
            size_t v17 = *(void *)(v33 + 32);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v61, v17 + 1);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v18 = &v61;
          }
          else {
            int v18 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          if (v17)
          {
            if (*(char *)(v33 + 47) >= 0) {
              float v19 = (const void *)(v33 + 24);
            }
            else {
              float v19 = *(const void **)(v33 + 24);
            }
            memmove(v18, v19, v17);
          }
          *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
          std::string::basic_string[abi:ne180100]<0>(&v35, "matdcmp_matmul_src_vw");
          uint64_t v20 = std::string::append(&v35, "_xfm", 4uLL);
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          int64_t v37 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v36 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (v37 >= 0) {
            uint64_t v22 = v36;
          }
          else {
            uint64_t v22 = (void **)v36[0];
          }
          if (v37 >= 0) {
            std::string::size_type v23 = HIBYTE(v37);
          }
          else {
            std::string::size_type v23 = (std::string::size_type)v36[1];
          }
          uint64_t v24 = std::string::append(&v61, (const std::string::value_type *)v22, v23);
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          uint64_t v26 = std::string::append(&v62, "_", 1uLL);
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v34, 0);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v28 = &v34;
          }
          else {
            int v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v34.__r_.__value_.__l.__size_;
          }
          BOOL v30 = std::string::append(&v60, (const std::string::value_type *)v28, size);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v30->__r_.__value_.__r.__words[2];
          long long v63 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v37) < 0) {
            operator delete(v36[0]);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          ZinBuilder::CreateView();
        }
        (*(void (**)(void, void, void))(**(void **)(a1 + 208) + 32))(*(void *)(a1 + 208), 0, 0);
        ZinBuilder::CreateConcat();
      }
      ++v16;
    }
    while (v16 != (void *)v55);
    uint64_t v9 = 0;
  }
  if (v54)
  {
    CFNumberRef v55 = v54;
    operator delete(v54);
  }
LABEL_8:
  v58[0] = &unk_26C34DA98;
  if (v59 < 0) {
    operator delete((void *)v58[1]);
  }
  return v9;
}

void sub_2111A5BE0(_Unwind_Exception *a1)
{
  STACK[0x2D0] = (unint64_t)&unk_26C359A08;
  size_t v3 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  uint64_t v4 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v5;
    operator delete(v5);
  }
  __n128 v6 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v6;
    operator delete(v6);
  }
  STACK[0x2A8] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v5 = v4;
  if (*(char *)(v4 + 47) >= 0) {
    size_t v6 = *(unsigned __int8 *)(v4 + 47);
  }
  else {
    size_t v6 = *(void *)(v4 + 32);
  }
  int64_t v7 = &v25;
  std::string::basic_string[abi:ne180100]((uint64_t)&v25, v6 + 1);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v7 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(v5 + 47) >= 0) {
      uint64_t v8 = (const void *)(v5 + 24);
    }
    else {
      uint64_t v8 = *(const void **)(v5 + 24);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v22, "matdcmp_matmul_vw");
  uint64_t v9 = std::string::append(&v22, "_xfm", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v24 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v24 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if (v24 >= 0) {
    std::string::size_type v12 = HIBYTE(v24);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  unint64_t v13 = std::string::append(&v25, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  BOOL v15 = std::string::append(&v26, "_", 1uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a3);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = &v21;
  }
  else {
    size_t v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  float v19 = std::string::append(&v27, (const std::string::value_type *)v17, size);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
  long long v28 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  ZinBuilder::CreateView();
}

void sub_2111A61FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  _Unwind_Resume(exception_object);
}

void AddMatrixMultiplicationForBatchN(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, ZinIrOpLayer *a6, uint64_t a7, int a8)
{
  v50[1] = *MEMORY[0x263EF8340];
  v50[0] = a5;
  uint64_t v33 = v50;
  uint64_t v34 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v33);
  ZinIrOpLayerGraph::AddNode(a3, a6, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_26C359A08;
  if (__p[1])
  {
    *(void **)&long long v37 = __p[1];
    operator delete(__p[1]);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a3, a4, (uint64_t)a6, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a8)
  {
    (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a7 + 80))(__p, a7, 0, 0);
    (*(void (**)(void *__return_ptr, ZinIrOpLayer *, void, void))(*(void *)a6 + 80))((void *)&v43 + 1, a6, 0, 0);
    BOOL v15 = operator new(0xF0uLL);
    long long v16 = v47;
    long long v17 = v49[0];
    v15[12] = v48;
    v15[13] = v17;
    *(_OWORD *)((char *)v15 + 220) = *(_OWORD *)((char *)v49 + 12);
    long long v18 = v43;
    long long v19 = v45;
    long long v20 = v46;
    v15[8] = v44;
    v15[9] = v19;
    uint64_t v33 = v15;
    std::string v35 = v15 + 15;
    v15[10] = v20;
    v15[11] = v16;
    long long v21 = v41;
    v15[4] = v40;
    v15[5] = v21;
    v15[6] = v42;
    void v15[7] = v18;
    long long v22 = v37;
    _OWORD *v15 = *(_OWORD *)__p;
    v15[1] = v22;
    long long v23 = v39;
    v15[2] = v38;
    _OWORD v15[3] = v23;
    uint64_t v34 = (uint64_t)(v15 + 15);
    ZinBuilder::CreateMatMulLayer(a1, a2, (uint64_t *)&v33);
  }
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *, void, void))(*(void *)a6 + 80))(__p, a6, 0, 0);
  (*(void (**)(void *__return_ptr, uint64_t, void, void))(*(void *)a7 + 80))((void *)&v43 + 1, a7, 0, 0);
  int64_t v24 = operator new(0xF0uLL);
  long long v25 = v47;
  long long v26 = v49[0];
  v24[12] = v48;
  v24[13] = v26;
  *(_OWORD *)((char *)v24 + 220) = *(_OWORD *)((char *)v49 + 12);
  long long v27 = v43;
  long long v28 = v45;
  long long v29 = v46;
  v24[8] = v44;
  v24[9] = v28;
  uint64_t v33 = v24;
  std::string v35 = v24 + 15;
  v24[10] = v29;
  v24[11] = v25;
  long long v30 = v41;
  unsigned __int8 v24[4] = v40;
  v24[5] = v30;
  v24[6] = v42;
  v24[7] = v27;
  long long v31 = v37;
  *int64_t v24 = *(_OWORD *)__p;
  v24[1] = v31;
  long long v32 = v39;
  _OWORD v24[2] = v38;
  v24[3] = v32;
  uint64_t v34 = (uint64_t)(v24 + 15);
  ZinBuilder::CreateMatMulLayer(a1, a2, (uint64_t *)&v33);
}

void sub_2111A67B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Clone()
{
  return 0;
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::~ZinMatrixDecompositionMatrixMultiplicationCompositeLayer(ZinMatrixDecompositionMatrixMultiplicationCompositeLayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);

  JUMPOUT(0x21667D3C0);
}

void std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C387CE0;
  return result;
}

void std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C387CE0;
}

uint64_t std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 17) | 0x100u;
}

uint64_t std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ZinMatrixDecompositionMatrixMultiplication: current configuration (all rotation axis disabled) is not supported", v0, 2u);
}

__CFDictionary *ZinCreateTopKUnit(uint64_t a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = ZinIrTopKTypeToCFString(*(_DWORD *)(a1 + 80));
  CFDictionaryAddValue(Mutable, @"Type", v5);
  int valuePtr = *(void *)(a1 + 88);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"K", v6);
  CFRelease(v6);
  int64_t v7 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 96));
  CFDictionaryAddValue(Mutable, @"SortDimension", v7);
  if (*(_DWORD *)(a1 + 100) != 5)
  {
    uint64_t v8 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 100));
    CFDictionaryAddValue(Mutable, @"VectorDimension", v8);
  }
  uint64_t v9 = CFArrayCreateMutable(v3, 0, MEMORY[0x263EFFF70]);
  long long v10 = *(void **)(a1 + 104);
  if (v10 != (void *)(a1 + 112))
  {
    do
    {
      char v17 = v10[4];
      CFNumberRef v11 = CFNumberCreate(v3, kCFNumberSInt8Type, &v17);
      CFArrayAppendValue(v9, v11);
      CFRelease(v11);
      std::string::size_type v12 = (void *)v10[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          std::string::size_type v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (void *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          long long v10 = v13;
        }
        while (!v14);
      }
      long long v10 = v13;
    }
    while (v13 != (void *)(a1 + 112));
  }
  BOOL v15 = (const void **)MEMORY[0x263EFFB40];
  if (!*(unsigned char *)(a1 + 128)) {
    BOOL v15 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(Mutable, @"Indices", *v15);
  CFDictionaryAddValue(Mutable, @"SortIndices", v9);
  CFRelease(v9);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinIrSoftmaxUnit::ValidateForDynamicShapes(ZinIrSoftmaxUnit *this, ZinIrUnitStatus *a2)
{
  return 0;
}

uint64_t ZinParseMode(ZinIrArgMinMaxUnitInfo *a1, CFDictionaryRef theDict)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Mode");
  if (Value)
  {
    CFStringRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID()) {
      CFStringRef Value = v4;
    }
    else {
      CFStringRef Value = 0;
    }
  }
  CFStringToZinArgMode(Value, (int *)a1 + 30);
  return 0;
}

double ZinParseKernelInfo(uint64_t a1, CFDictionaryRef theDict)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"KernelWidth");
  CFNumberRef v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFNumberGetTypeID()) {
      CFNumberRef v5 = 0;
    }
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"KernelHeight");
  if (v7)
  {
    CFNumberRef v9 = v7;
    CFTypeID v10 = CFGetTypeID(v7);
    if (v10 != CFNumberGetTypeID()) {
      CFNumberRef v9 = 0;
    }
    if (v5 && v9)
    {
      ZinGetCFObject((void *)(a1 + 84), v5);
      ZinGetCFObject((void *)(a1 + 80), v9);
      CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue(theDict, @"Step");
      if (v11 && (v12 = v11, CFTypeID v13 = CFGetTypeID(v11), v13 == CFArrayGetTypeID()))
      {
        if (CFArrayGetCount(v12) == 2)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
          CFNumberRef v15 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFTypeID v16 = CFGetTypeID(ValueAtIndex);
            if (v16 != CFNumberGetTypeID()) {
              CFNumberRef v15 = 0;
            }
          }
          CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 1);
          if (v17)
          {
            CFNumberRef v18 = v17;
            CFTypeID v19 = CFGetTypeID(v17);
            CFTypeID TypeID = CFNumberGetTypeID();
            if (v15)
            {
              if (v19 == TypeID)
              {
                ZinGetCFObject((void *)(a1 + 92), v15);
                ZinGetCFObject((void *)(a1 + 88), v18);
              }
            }
          }
        }
      }
      else
      {
        *(void *)&double result = 0x100000001;
        *(void *)(a1 + 88) = 0x100000001;
      }
    }
  }
  return result;
}

uint64_t ZinParseArgMinMaxUnit(const __CFDictionary *a1, ZinIrArgMinMaxUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    CFStringRef v9 = @"InvalidParamSyntax";
LABEL_9:
    ZinIrUnitStatus::SetError(a3, v9);
    return 3;
  }
  ZinParseMode(a2, v6);
  if ((*((_DWORD *)a2 + 30) | 2) != 3) {
    return 0;
  }
  ZinParseKernelInfo((uint64_t)a2, v6);
  if (v8)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseArgMinMaxUnit();
    }
    CFStringRef v9 = @"InvalidKernelSizeSyntax";
    goto LABEL_9;
  }
  uint64_t result = ZinParsePadding(v6, (ZinIrArgMinMaxUnitInfo *)((char *)a2 + 96), a3);
  if (result)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseArgMinMaxUnit();
    }
    CFStringRef v9 = @"InvalidPadding";
    goto LABEL_9;
  }
  return result;
}

uint64_t ZinArgMinMaxHWCapable(uint64_t a1, int a2, int a3, int a4, int a5, char a6, unsigned int a7)
{
  if (!*(unsigned char *)(a1 + 1210)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 1124) && (a6 & 1) != 0) {
    return 1;
  }
  if (a2 == 1)
  {
    unint64_t MaxSmallKernelWidth = ZinIrHalParameters::GetMaxSmallKernelWidth(a1, a7);
LABEL_9:
    if (MaxSmallKernelWidth < a4) {
      return 0;
    }
    goto LABEL_10;
  }
  if (a2 == 2)
  {
    unint64_t MaxSmallKernelWidth = GetMaxLogicalKernelWidthForLargeKernelMode(a1, a7);
    goto LABEL_9;
  }
LABEL_10:
  if (a3 != 1) {
    return a3 != 2 || GetMaxLogicalKernelHeightForLargeKernelMode(a1) >= a5;
  }
  return *(void *)(a1 + 112) >= (unint64_t)a5;
}

uint64_t ZinArgMinMaxCanBeDecomposed(const ZinIrHalParameters *a1, int a2, int a3, int a4, const ZinTensorDimensions *a5)
{
  if (a2) {
    return a3 == 1 && a4 == 1;
  }
  int v7 = *((unsigned __int8 *)a1 + 1880);
  if (*((unsigned char *)a1 + 1881)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  char v9 = !v8;
  uint64_t v11 = *((void *)a5 + 2);
  uint64_t v10 = *((void *)a5 + 3);
  BOOL v12 = v11 != 1 && v10 == 1;
  if (v12 && (v9 & 1) == 0) {
    ZinAssertImpl("Column vector ArgMinMax lacks necessary reshape and transpose support.");
  }
  BOOL v16 = (a3 == 1 || a4 == 1) && *((void *)a5 + 1) == 1 && v7 != 0;
  unsigned int v17 = v11 == a4 || v16;
  if (v10 == a3) {
    return v17;
  }
  else {
    return v16;
  }
}

uint64_t ZinArgMinMaxLargeKernelUpdate(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  if (ZinIrHalParameters::GetMaxSmallKernelWidth(a1, a2) >= (unint64_t)a3)
  {
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a1, a2);
    uint64_t v13 = 0;
    if (MaxLogicalKernelWidthForLargeKernelMode >= a3 && *a5 == 1)
    {
      *a5 = 2;
      uint64_t v13 = 1;
    }
  }
  if (*(void *)(a1 + 112) < (unint64_t)a4 && GetMaxLogicalKernelHeightForLargeKernelMode(a1) >= a4 && *a6 == 1)
  {
    *a6 = 2;
    return 1;
  }
  return v13;
}

uint64_t IsGlobalSpatialArgMinMaxOp(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    BOOL v10 = a6 == 1 && a7 == a9;
    BOOL v12 = a7 == 1 && a6 == a8;
    unsigned int v13 = v12 ^ v10;
    if (a3 | a2 | a4 | a5) {
      return 0;
    }
    else {
      return v13;
    }
  }
  return result;
}

void ZinParseArgMinMaxUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Fail to get padding information!\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Fail to get kernel size!\n", v0, 2u);
}

uint64_t ZinIrPixelShuffleInfo::ZinIrPixelShuffleInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 49);
  *(void *)uint64_t result = &unk_26C34E7A0;
  uint64_t v4 = *a2;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 2);
  *(void *)(result + 12) = v4;
  return result;
}

void *ZinPixelShuffleLayer::ZinPixelShuffleLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  CFDictionaryRef v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  unsigned int v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  int v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C34DC20;
  return a1;
}

void sub_2111A734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

void ZinPixelShuffleLayer::DecomposeStandalone(ZinPixelShuffleLayer *this, ZinIrOpLayerGraph *a2, const ZinIrHalParameters *a3, ZinObjectNameFactory *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFDictionaryRef v6 = (int *)*((void *)this + 8);
  uint64_t v7 = (*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0);
  uint64_t v17 = *(void *)(v7 + 80);
  long long v8 = *(_OWORD *)(v7 + 64);
  v16[0] = *(_OWORD *)(v7 + 48);
  v16[1] = v8;
  int v9 = *(_DWORD *)((*(uint64_t (**)(ZinPixelShuffleLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 88);
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if (ZinPixelShuffleUtils::DecomposePixelShuffle((uint64_t *)v16, v6 + 3, v9, (uint64_t)a3, (uint64_t **)v15, v14))
  {
    if (v6[3] <= 2 && v6[4] <= 2 && v6[5] == 1) {
      ZinPixelShuffleLayer::CreateDecomposedDeconv(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, v10, v14);
    }
    DimensionOrderHint::DimensionOrderHint(&__p, 0);
    operator new();
  }
  ZinAssertImpl("Invalid PixelShuffle layer");
}

void sub_2111A844C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a33) {
    ZinPixelUnshuffleLayer::DecomposeStandalone(a33);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a66) {
    operator delete(a66);
  }
  if (a14 < 0) {
    operator delete(a12);
  }
  uint64_t v71 = (void *)a70;
  a70 = 0;
  if (v71) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a70, v71);
  }
  uint64_t v72 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v73) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&STACK[0x2E8], v73);
  }
  STACK[0x350] = (unint64_t)&STACK[0x2F0];
  std::vector<PixelShuffleDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  uint64_t v74 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

void ZinPixelShuffleLayer::CreateDecomposedDeconv(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (a6[1] - *a6 == 688)
  {
    uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
    uint64_t v11 = (_DWORD *)*a6;
    if (*(_DWORD *)*a6 == 1)
    {
      uint64_t v12 = InputTensor;
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v53, (const ZinIrKernelUnitInfo *)(v11 + 2));
      uint64_t v53 = &unk_26C34A9B8;
      long long v14 = *(_OWORD *)(v11 + 74);
      long long v13 = *(_OWORD *)(v11 + 78);
      long long v15 = *(_OWORD *)(v11 + 70);
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(v11 + 81);
      long long v16 = *(_OWORD *)(v11 + 66);
      long long v54 = *(_OWORD *)(v11 + 62);
      long long v55 = v16;
      long long v57 = v14;
      v58[0] = v13;
      long long v56 = v15;
      int64x2_t v41 = vdupq_n_s64(1uLL);
      uint64_t v42 = 1;
      *(void *)&long long v14 = 0x100000001;
      *((void *)&v14 + 1) = 0x100000001;
      long long v43 = v14;
      uint64_t v44 = 0x100000001;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      long long v48 = v14;
      char v51 = 0;
      int v52 = 0;
      uint64_t v17 = *(int *)(*((void *)a1 + 8) + 16)
          * (uint64_t)*(int *)(*((void *)a1 + 8) + 12)
          * *(int *)(*((void *)a1 + 8) + 20);
      uint64_t v49 = *((void *)&v54 + 1);
      char v50 = BYTE4(v54);
      uint64_t v37 = v17;
      uint64_t v38 = v17;
      int64x2_t v39 = v41;
      uint64_t v40 = 1;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a4 + 16))(v31, a4, 2);
      uint64_t v18 = std::string::append((std::string *)v31, "_onehot_conv_kernel_", 0x14uLL);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string v35 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((v31[23] & 0x80000000) != 0) {
        operator delete(*(void **)v31);
      }
      int v20 = *(_DWORD *)(v12 + 88);
      if (v20 == 2) {
        unsigned int v21 = 2;
      }
      else {
        unsigned int v21 = 4;
      }
      if (v20 == 1) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = v21;
      }
      *(_DWORD *)long long v31 = 0;
      std::vector<float>::vector(&v34, v38 * v37 * v39.i64[0] * v39.i64[1] * v40, v31);
      uint64_t v23 = v37;
      if (v37 >= 1)
      {
        int64_t v24 = v34;
        uint64_t v25 = 4 * v37 + 4;
        do
        {
          *int64_t v24 = 1065353216;
          int64_t v24 = (_DWORD *)((char *)v24 + v25);
          --v23;
        }
        while (v23);
      }
      ZinIrKernel::CreateDynamicKernel((float **)&v34, v22, &v37, 2uLL, a3, 0, &v33);
      long long v26 = *(_OWORD *)(v12 + 64);
      *(_OWORD *)long long v31 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)&v31[16] = v26;
      uint64_t v32 = *(void *)(v12 + 80);
      *(void *)&char v31[8] = v37 * v49;
      uint64_t v27 = *((void *)a1 + 2);
      uint64_t v28 = *(unsigned int *)(v12 + 88);
      long long v29 = v33;
      uint64_t v33 = 0;
      long long v30 = v29;
      ZinBuilder::CreateConv(v27, a4, (uint64_t)v31, v28, v28, &v30);
    }
    ZinAssertImpl("Invalid pixelShuffle decomposition: the first decomposed unit type is not equal to Convolution operator");
  }
  ZinAssertImpl("Invalid pixelShuffle decomposition: the number of decomposed layers is not equal to 2");
}

void sub_2111A8E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,ZinIrKernel *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a20 = &unk_26C359A08;
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a34, 0);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a63);
  _Unwind_Resume(a1);
}

void ZinPixelShuffleLayer::Clone()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2111A91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  MEMORY[0x21667D3C0](v17, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void ZinPixelShuffleLayer::LowerEngine(uint64_t a1, ZinIrOpLayerGraph *a2, const ZinIrHalParameters ***a3)
{
  uint64_t v5 = **a3;
  if (*(char *)(a1 + 47) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v6 + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 47) >= 0) {
      long long v8 = (const void *)(a1 + 24);
    }
    else {
      long long v8 = *(const void **)(a1 + 24);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v15, "pix_shuf");
  int v9 = std::string::append(&v15, "_xfm", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v17 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v16 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = (void **)v16[0];
  }
  if (v17 >= 0) {
    std::string::size_type v12 = HIBYTE(v17);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v16[1];
  }
  long long v13 = std::string::append(&v18, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v20 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v21, __p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  ZinPixelShuffleLayer::DecomposeStandalone((ZinPixelShuffleLayer *)a1, a2, v5, (ZinObjectNameFactory *)&v21);
}

void sub_2111A9414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  *(void *)(v33 - 88) = &unk_26C34DA98;
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

void *ZinPixelShuffleLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "PIXEL_SHUFFLE");
}

uint64_t ZinPixelShuffleLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_2111A9614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ZinPixelShuffleLayer::IsRedundant(ZinPixelShuffleLayer *this)
{
  return *(_DWORD *)(*((void *)this + 8) + 16)
       * *(_DWORD *)(*((void *)this + 8) + 12)
       * *(_DWORD *)(*((void *)this + 8) + 20) == 1;
}

void ZinPixelShuffleLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 - *a2 != 120) {
    ZinAssertImpl("PixelShuffle layer can only have one bottom");
  }
  uint64_t v5 = (_DWORD *)*((void *)a1 + 8);
  if (v5[5] != 1) {
    ZinAssertImpl("Unsupported Depth expansion value:%d. PixelShuffle currently supports only expansion factors on Width and Height dimensions.", v5[5]);
  }
  uint64_t v6 = 0;
  std::string::size_type v12 = "width_axis";
  int v7 = v5[3];
  int v8 = v5[4];
  int v13 = v7;
  long long v14 = "height_axis";
  int v15 = v8;
  long long v16 = "depth_axis";
  int v17 = 1;
  int v9 = &v12;
  do
  {
    uint64_t v10 = 1648;
    while (*(void *)&a3[v10] != *((_DWORD *)v9 + 2))
    {
      v10 += 8;
      if (v10 == 1688) {
        ZinAssertImpl("Invalid PixelShuffle factor value(%d) in %s, it must be {1, 2, 3, 4, 8}.", *((_DWORD *)v9 + 2), *v9);
      }
    }
    ++v6;
    int v9 = &(&v12)[2 * v6];
  }
  while (v6 != 3);
  for (; v4 != v3; v4 += 120)
  {
    uint64_t v11 = *(void *)(v4 + 16);
    if (v11 % (v8 * v7)) {
      ZinAssertImpl("PixelShuffle's Channel dimension:%ld must be divisible by the product of its factors: (width:%d, height:%d, depth:%d)", v11, v7, v8, 1);
    }
  }

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

BOOL ZinConvLayerUtils::IsDilatedConv(int *a1)
{
  return *a1 > 1 || a1[1] > 1 || a1[2] > 1;
}

BOOL ZinConvLayerUtils::IsLargeKernelStep(uint64_t a1, __int32 *a2)
{
  v2.i64[0] = *(void *)a1;
  v2.i32[2] = *(_DWORD *)(a1 + 8);
  v2.i32[3] = *a2;
  v3.i64[0] = 0x200000002;
  v3.i64[1] = 0x200000002;
  BOOL result = 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v2, v3))) & 1) == 0 && a2[1] <= 2) {
    return a2[2] > 2;
  }
  return result;
}

BOOL ZinConvLayerUtils::IsLargeKernelSize(int64_t *a1, int a2, uint64_t a3)
{
  int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a2);
  int64_t MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(a3);
  return *a1 > MaxLogicalKernelWidthForLargeKernelMode || a1[1] > MaxLogicalKernelHeightForLargeKernelMode;
}

uint64_t ZinConvLayerUtils::IsDecompositionNeeded(uint64_t a1, int a2, uint64_t a3)
{
  v5.i64[0] = 0x200000002;
  v5.i64[1] = 0x200000002;
  BOOL v6 = 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)(a1 + 152), v5))) & 1) == 0 && *(int *)(a1 + 168) <= 2) {
    BOOL v6 = *(_DWORD *)(a1 + 172) > 2;
  }
  int64_t v8 = *(void *)(a1 + 88);
  int64_t v7 = *(void *)(a1 + 96);
  int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a2);
  int64_t MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(a3);
  if (v6) {
    return 1;
  }
  int v12 = *(_DWORD *)(a1 + 208);
  int v13 = *(_DWORD *)(a1 + 212);
  int v14 = *(_DWORD *)(a1 + 216);
  BOOL v19 = (v7 > MaxLogicalKernelWidthForLargeKernelMode || v8 > MaxLogicalKernelHeightForLargeKernelMode)
     && v12 < 2
     && v13 < 2
     && v14 < 2;
  if ((*(unsigned char *)(a1 + 272) & 0x40) != 0) {
    BOOL v19 = 0;
  }
  unsigned int v20 = v12 > 1 || v19;
  if (v13 > 1) {
    unsigned int v20 = 1;
  }
  if (v14 > 1) {
    return 1;
  }
  else {
    return v20;
  }
}

void ZinConvLayerUtils::ValidateConvKernelInfoSemantics(ZinIrKernel **a1)
{
  int32x4_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 33);
  uint64_t v4 = *((void *)*a1 + 34);
  uint64_t v5 = *((void *)*a1 + 35);
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if (v4 <= 0)
  {
    if (v46 >= 0) {
      unsigned int v20 = __p;
    }
    else {
      unsigned int v20 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v20, v4);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "height");
  if (v3 <= 0)
  {
    if (v46 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v21, v3);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v5 <= 0)
  {
    if (v46 >= 0) {
      uint64_t v22 = __p;
    }
    else {
      uint64_t v22 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v22, v5);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v6 = *((_DWORD *)v2 + 82);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "x");
  if (v6 <= 0)
  {
    uint64_t v23 = __p;
    if (v46 < 0) {
      uint64_t v23 = (void **)__p[0];
    }
    int64_t v24 = v43;
    if (v44 < 0) {
      int64_t v24 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v23, (const char *)v24, v6);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v7 = *((_DWORD *)v2 + 83);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "y");
  if (v7 <= 0)
  {
    uint64_t v25 = __p;
    if (v46 < 0) {
      uint64_t v25 = (void **)__p[0];
    }
    long long v26 = v43;
    if (v44 < 0) {
      long long v26 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v25, (const char *)v26, v7);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v8 = *((_DWORD *)v2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "z");
  if (v8 <= 0)
  {
    uint64_t v27 = __p;
    if (v46 < 0) {
      uint64_t v27 = (void **)__p[0];
    }
    uint64_t v28 = v43;
    if (v44 < 0) {
      uint64_t v28 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v27, (const char *)v28, v8);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v9 = *((_DWORD *)v2 + 85);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "x");
  if (v9 <= 0)
  {
    long long v29 = __p;
    if (v46 < 0) {
      long long v29 = (void **)__p[0];
    }
    long long v30 = v43;
    if (v44 < 0) {
      long long v30 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v29, (const char *)v30, v9);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v10 = *((_DWORD *)v2 + 86);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "y");
  if (v10 <= 0)
  {
    long long v31 = __p;
    if (v46 < 0) {
      long long v31 = (void **)__p[0];
    }
    uint64_t v32 = v43;
    if (v44 < 0) {
      uint64_t v32 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v31, (const char *)v32, v10);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v11 = *((_DWORD *)v2 + 87);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "z");
  if (v11 <= 0)
  {
    uint64_t v33 = __p;
    if (v46 < 0) {
      uint64_t v33 = (void **)__p[0];
    }
    uint64_t v34 = v43;
    if (v44 < 0) {
      uint64_t v34 = (void **)v43[0];
    }
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v33, (const char *)v34, v11);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v12 = *((_DWORD *)v2 + 96);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  if (v12 <= 0)
  {
    if (v46 >= 0) {
      std::string v35 = __p;
    }
    else {
      std::string v35 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s dilation factor = %d. It should be a positive number", (const char *)v35, v12);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  int v13 = *((_DWORD *)v2 + 97);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  if (v13 <= 0)
  {
    if (v46 >= 0) {
      std::string::size_type v36 = __p;
    }
    else {
      std::string::size_type v36 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s dilation factor = %d. It should be a positive number", (const char *)v36, v13);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (*((_DWORD *)v2 + 98) != 1) {
    ZinAssertImpl("Error: dilation factor z = %d is invalid as dilation along Z dimension is not supported", *((_DWORD *)v2 + 98));
  }
  ValidateKernelFormatSemantics(a1);
  uint64_t v14 = *((int *)v2 + 90);
  std::string::basic_string[abi:ne180100]<0>(__p, "top");
  if ((v14 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      uint64_t v37 = __p;
    }
    else {
      uint64_t v37 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v37, v14);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *((int *)v2 + 91);
  std::string::basic_string[abi:ne180100]<0>(__p, "bottom");
  if ((v15 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      uint64_t v38 = __p;
    }
    else {
      uint64_t v38 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v38, v15);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = *((int *)v2 + 88);
  std::string::basic_string[abi:ne180100]<0>(__p, "left");
  if ((v16 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      int64x2_t v39 = __p;
    }
    else {
      int64x2_t v39 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v39, v16);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = *((int *)v2 + 89);
  std::string::basic_string[abi:ne180100]<0>(__p, "right");
  if ((v17 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      uint64_t v40 = __p;
    }
    else {
      uint64_t v40 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v40, v17);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = *((int *)v2 + 92);
  std::string::basic_string[abi:ne180100]<0>(__p, "front");
  if ((v18 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      int64x2_t v41 = __p;
    }
    else {
      int64x2_t v41 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v41, v18);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = *((int *)v2 + 93);
  std::string::basic_string[abi:ne180100]<0>(__p, "back");
  if ((v19 & 0x80000000) != 0)
  {
    if (v46 >= 0) {
      uint64_t v42 = __p;
    }
    else {
      uint64_t v42 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v42, v19);
  }
  if (v46 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2111AA058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLayerUtils::ValidateConvKernelInfo(ZinIrKernel **a1, int *a2, void *a3)
{
  uint64_t v5 = *a1;
  unsigned int v6 = *a2;
  int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)a3, *a2);
  int64_t MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode((uint64_t)a3);
  int64_t MaxLogicalKernelDepthForLargeKernelMode = GetMaxLogicalKernelDepthForLargeKernelMode((uint64_t)a3);
  uint64_t MaxSmallKernelWidth = ZinIrHalParameters::GetMaxSmallKernelWidth((uint64_t)a3, v6);
  uint64_t v34 = a3[14];
  uint64_t v35 = MaxSmallKernelWidth;
  uint64_t v33 = a3[16];
  uint64_t v12 = *((void *)v5 + 33);
  uint64_t v11 = *((void *)v5 + 34);
  uint64_t v13 = *((void *)v5 + 35);
  std::string::basic_string[abi:ne180100]<0>(v46, "width");
  if (v11 < 1 || v11 > MaxLogicalKernelWidthForLargeKernelMode)
  {
    if (v47 >= 0) {
      uint64_t v25 = (const char *)v46;
    }
    else {
      uint64_t v25 = (const char *)v46[0];
    }
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", v25, v11, 1uLL, MaxLogicalKernelWidthForLargeKernelMode);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "height");
  if (v12 < 1 || v12 > MaxLogicalKernelHeightForLargeKernelMode)
  {
    if (v45 >= 0) {
      long long v26 = (const char *)v44;
    }
    else {
      long long v26 = (const char *)v44[0];
    }
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", v26, v12, 1uLL, MaxLogicalKernelHeightForLargeKernelMode);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v13 < 1 || v13 > MaxLogicalKernelDepthForLargeKernelMode)
  {
    if (v43 >= 0) {
      uint64_t v27 = __p;
    }
    else {
      uint64_t v27 = (void **)__p[0];
    }
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", (const char *)v27, v13, 1uLL, MaxLogicalKernelDepthForLargeKernelMode);
  }
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if ((*((unsigned char *)v5 + 448) & 0x40) != 0)
  {
    uint64_t v16 = *((unsigned int *)v5 + 85);
    std::string::basic_string[abi:ne180100]<0>(v40, "width");
    if ((int)v16 >= 2 && v11 > v35)
    {
      long long v30 = v40;
      if (v41 < 0) {
        long long v30 = (void **)v40[0];
      }
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v30, v11, 1uLL, v35, v16);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    uint64_t v17 = *((unsigned int *)v5 + 86);
    std::string::basic_string[abi:ne180100]<0>(v38, "height");
    if ((int)v17 >= 2 && v12 > v34)
    {
      long long v31 = v38;
      if (v39 < 0) {
        long long v31 = (void **)v38[0];
      }
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v31, v12, 1uLL, v34, v17);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    uint64_t v18 = *((unsigned int *)v5 + 87);
    std::string::basic_string[abi:ne180100]<0>(v36, "depth");
    if ((int)v18 >= 2 && v13 > v33)
    {
      uint64_t v32 = v36;
      if (v37 < 0) {
        uint64_t v32 = (void **)v36[0];
      }
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v32, v13, 1uLL, v33, v18);
    }
    if (v37 < 0) {
      operator delete(v36[0]);
    }
  }
  int v19 = *((_DWORD *)v5 + 82);
  if (v19 < 1 || v19 > (int)a3[23]) {
    ZinAssertImpl("Error: invalid x stride = %d. It should be in [%d, %zu]", v19, 1, a3[23]);
  }
  int v20 = *((_DWORD *)v5 + 83);
  if (v20 < 1 || v20 > (int)a3[24]) {
    ZinAssertImpl("Error: invalid y stride = %d. It should be in [%d, %zu]", v20, 1, a3[24]);
  }
  int v21 = *((_DWORD *)v5 + 84);
  if (v21 < 1 || v21 > (int)a3[25]) {
    ZinAssertImpl("Error: invalid z stride = %d. It should be in [%d, %zu]", v21, 1, a3[25]);
  }
  ValidateKernelFormat(a1, (uint64_t)a3);
  uint64_t result = *((unsigned int *)v5 + 94);
  uint64_t v23 = (_DWORD *)a3[183];
  int64_t v24 = (_DWORD *)a3[184];
  if (v23 != v24)
  {
    while (*v23 != result)
    {
      if (++v23 == v24)
      {
        uint64_t v23 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v23 == v24)
  {
    v46[0] = 0;
    v46[1] = 0;
    uint64_t v47 = 0;
    uint64_t v28 = ZinIrPaddingModeToCFString(result);
    ZinGetString(v28, (uint64_t)v46);
    if (v47 >= 0) {
      long long v29 = (const char *)v46;
    }
    else {
      long long v29 = (const char *)v46[0];
    }
    ZinAssertImpl("Invalid padding mode: %s for conv layer.", v29);
  }
  return result;
}

void sub_2111AA4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

ZinIrKernel *ZinConvLayerUtils::ValidateConvSemantics(ZinIrKernel **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *a1;
  ZinConvLayerUtils::ValidateConvKernelInfoSemantics(a1);
  unint64_t v7 = *((void *)v6 + 50);
  if (v7 != 1)
  {
    if (!v7) {
      ZinAssertImpl("Error: invalid number of groups = %zd for conv layer. It should be a positive number", 0);
    }
    if (*(void *)(a2 + 16) % v7) {
      ZinAssertImpl("Error: invalid input channel dim = %zu and num groups = %zu. The input channels should be divisible by num group", *(void *)(a2 + 16), v7);
    }
    if (*(void *)(a3 + 16) % v7) {
      ZinAssertImpl("Error: invalid output channel dim = %zu and num groups = %zu. The output channels should be divisible by num group", *(void *)(a3 + 16), v7);
    }
  }

  return ValidateKernelQuantizationSemantics(a1);
}

uint64_t ZinConvLayerUtils::ValidateConv(ZinIrKernel **a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  int v10 = *a1;
  ZinConvLayerUtils::ValidateConvKernelInfo(a1, (int *)a2, a5);
  unint64_t v11 = *((void *)v10 + 50);
  unint64_t v12 = a5[48];
  if (v11 < a5[47] || v11 > v12) {
    ZinAssertImpl("Error: invalid number of groups = %zd for conv layer. It should be in [%zd, %zd]", v11, a5[47], v12);
  }
  ValidateKernelFootprint(a1, a2, a3, a4, a5);
  uint64_t v14 = *a1;
  uint64_t v15 = *((void *)*a1 + 33);
  v55.i64[0] = *((void *)*a1 + 34);
  v55.i64[1] = v15;
  uint64_t v16 = *((void *)v14 + 35);
  uint64_t v56 = v16;
  if (ZinIrKernel::HasUnityWeight(v14))
  {
    if (v16 == 1) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*((void *)*a1 + 73)) {
      BOOL v17 = v16 == 1;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      goto LABEL_28;
    }
  }
  if ((*((unsigned char *)v14 + 448) & 0x40) != 0) {
    uint64_t v18 = (int *)((char *)v14 + 340);
  }
  else {
    uint64_t v18 = (int *)((char *)v14 + 328);
  }
  ZinKernelComputeStrideExpansion(a5, v18, (unint64_t *)&v55, *(_DWORD *)a2, (*((unsigned char *)v14 + 448) & 0x40) >> 6, (int *)&v51);
  uint64_t v49 = v51;
  int v50 = v52;
  uint64_t v47 = v53;
  int v48 = v54;
  if (ZinIrKernel::HasUnityWeight(*a1))
  {
    char v19 = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(*((void *)*a1 + 73) + 136);
    char v19 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 184))(v20);
  }
  BOOL v21 = ZinIrKernel::HasUnityWeight(*a1) || *(unsigned char *)(*((void *)*a1 + 73) + 152) == 0;
  char v22 = *(unsigned char *)(a4 + 375);
  unsigned int v23 = *(_DWORD *)a2;
  unint64_t v24 = *((void *)v14 + 50);
  char v41 = a5;
  uint64_t v42 = a4;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  std::string __p = 0;
  int v46 = 0;
  int v25 = ZinMirConvUtils::CheckForHWLimits(a2 + 8, (uint64_t)(a3 + 1), v23, &v55, (uint64_t)&v49, (int *)&v47, (uint64_t)v14 + 352, (int *)v14 + 94, v24, (uint64_t *)&v41, v19, v22, 0, 0);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  if ((*((unsigned char *)v14 + 448) & 0x40) != 0)
  {
    char v26 = v21 & (v19 ^ 1);
    if (!v25) {
      goto LABEL_28;
    }
  }
  else
  {
    char v26 = 0;
    if (!v25) {
      goto LABEL_28;
    }
  }
  if ((v26 & 1) == 0) {
    ZinAssertImpl("illegal kernel dimension configuration");
  }
LABEL_28:
  char v27 = *((unsigned char *)v10 + 448);
  uint64_t v28 = (*((void *)v10 + 34) - 1) * *((int *)v10 + 96);
  uint64_t v29 = (*(void *)(a2 + 32) << ((v27 & 0x40) != 0)) + *((int *)v10 + 88) + (uint64_t)*((int *)v10 + 89);
  if (v29 <= v28) {
    ZinAssertImpl("Error: invalid conv config: kernel width = %zd, padded input width = %zd. Kernel width should not exceed the input width", v28 + 1, v29);
  }
  uint64_t v30 = *((void *)v10 + 33);
  uint64_t v31 = (v30 - 1) * *((int *)v10 + 97);
  uint64_t v32 = (*(void *)(a2 + 24) << ((v27 & 0x40) != 0)) + *((int *)v10 + 90) + (uint64_t)*((int *)v10 + 91);
  if (v32 <= v31) {
    ZinAssertImpl("Error: invalid conv config: kernel height = %zd, padded input height = %zd. Kernel height should not exceed the input height", v31 + 1, v32);
  }
  uint64_t v33 = (void *)*((void *)v10 + 35);
  uint64_t v34 = (*(void *)(a2 + 40) << ((v27 & 0x40) != 0)) + *((int *)v10 + 92) + (uint64_t)*((int *)v10 + 93);
  if (v34 < (uint64_t)v33) {
    ZinAssertImpl("Error: invalid conv config: kernel depth = %zd, padded input depth = %zd. Kernel depth should not exceed the input depth", *((void *)v10 + 35), v34);
  }
  unsigned int v35 = v27 & 0x40;
  if (v35) {
    std::string::size_type v36 = (int *)((char *)v10 + 340);
  }
  else {
    std::string::size_type v36 = (int *)((char *)v10 + 328);
  }
  char v41 = (void *)*((void *)v10 + 34);
  uint64_t v42 = v30;
  std::string __p = v33;
  ZinKernelComputeStrideExpansion(a5, v36, (unint64_t *)&v41, *(_DWORD *)a2, v35 >> 6, v55.i32);
  uint64_t v37 = *(void *)(a2 + 16) / *((void *)v10 + 50) * v55.i32[1] * (uint64_t)v55.i32[0] * v55.i32[2];
  std::string::basic_string[abi:ne180100]<0>(&v51, "input");
  unint64_t v38 = a5[46];
  if (v37 - 1 >= v38)
  {
    if (v54 >= 0) {
      uint64_t v40 = (const char *)&v51;
    }
    else {
      uint64_t v40 = (const char *)v51;
    }
    ZinAssertImpl("Invalid production of sx, sy, sz = %zd for %s channel. It should be in [%d, %zu]", v37, v40, 1, v38);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v51);
  }
  uint64_t result = ZinIrKernel::GetWeightFormat(*a1);
  if ((result - 7) <= 0x14) {
    return ValidatePaletteVectorSize(a1, a2, (uint64_t)a3, (uint64_t)a5);
  }
  return result;
}

void sub_2111AAA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(ZinConvLayerUtils *this, const ZinIrConvUnitInfo *a2)
{
  int64x2_t v4 = vdupq_n_s64(1uLL);
  uint64_t v5 = 1;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  long long v6 = v2;
  uint64_t v7 = 0x100000001;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  long long v11 = v2;
  uint64_t v12 = 1;
  __int16 v13 = 0;
  int v14 = 0;
  ZinIrConvUnit::CreateConvInfo((uint64_t)this, (uint64_t)&v4);
  return ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides((uint64_t)&v4);
}

uint64_t ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(uint64_t result)
{
  if (*(int *)(result + 32) >= 3) {
    ZinAssertImpl("Error: decomposition failed. Conv with stride = %d > 2 is not supported along depth axis", *(_DWORD *)(result + 32));
  }
  if (*(void *)(result + 16) != 1) {
    ZinAssertImpl("Error: decomposition failed. Conv kernel depth = %zd > 1 is not supported along depth axis", *(void *)(result + 16));
  }
  int v1 = *(_DWORD *)(result + 72);
  int v2 = *(_DWORD *)(result + 80);
  if (v1 != 1 || *(_DWORD *)(result + 76) != 1 || v2 != 1) {
    ZinAssertImpl("Error: decomposition failed. Dilation factor should be 1 at all axes for Conv with stride > 2 but are x = %d, y = %d, z = %d", v1, *(_DWORD *)(result + 76), v2);
  }
  return result;
}

void *ZinIrDummyWeight::ZinIrDummyWeight(void *a1, uint64_t *a2, void *a3, int a4, int64x2_t *a5, int a6, char a7)
{
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  long long v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinIrWeight::ZinIrWeight(a1, &v10, a3, a4, a5, a6, a7);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *a1 = &unk_26C3497B0;
  return a1;
}

void sub_2111AABA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrDummyWeight::CreateAlias()
{
}

void sub_2111AACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MEMORY[0x21667D3C0](v10, 0x10B3C4034FA82A5);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16))(a10);
  }
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::Dilate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = (*(void *)(a1 + 80) - 1) * a2 + 1;
  long long v6 = *(_OWORD *)(a1 + 56);
  uint64_t v8 = v5;
  uint64_t v9 = v3;
  uint64_t v7 = (v4 - 1) * a3 + 1;
  operator new();
}

void sub_2111AAE00(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4034FA82A5);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::PadWeight(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 80) + *a2 + a2[1];
  uint64_t v3 = *(void *)(a1 + 72) + a2[2] + a2[3];
  long long v4 = *(_OWORD *)(a1 + 56);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v7 = *(void *)(a1 + 88) + a2[4] + a2[5];
  operator new();
}

void sub_2111AAF14(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4034FA82A5);
  _Unwind_Resume(a1);
}

uint64_t ZinIrDummyWeight::ShuffleByType(ZinIrWeight *a1, uint64_t a2, uint64_t a3, const ZinIrVector *a4)
{
  if ((unint64_t)ZinIrWeight::GetPaletteVectorSize(a1) < 2)
  {
    uint64_t v9 = *((void *)a1 + 18);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  ZinIrWeight::CreateDePalettizedWeight(a1, a4, &v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, const ZinIrVector *))(*(void *)v10 + 56))(v10, a2, a3, a4);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_2111AB0BC(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  MEMORY[0x21667D3C0](v2, 0x10B3C4034FA82A5);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrDummyWeight::ShuffleChannelsByType(uint64_t a1, uint64_t *a2, const ZinIrVector *a3)
{
  if (!ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(a1, a2))
  {
    long long v7 = *(_OWORD *)(a1 + 72);
    v9[0] = *(_OWORD *)(a1 + 56);
    v9[1] = v7;
    uint64_t v8 = (a2[1] - *a2) >> 3;
    uint64_t v10 = *(void *)(a1 + 88);
    *(void *)&v9[0] = v8;
    operator new();
  }
  ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a3, v9);
  (*(void (**)(void, uint64_t *, const ZinIrVector *))(**(void **)&v9[0] + 48))(*(void *)&v9[0], a2, a3);
  uint64_t result = *(void *)&v9[0];
  *(void *)&v9[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_2111AB26C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4034FA82A5);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::RemapByType(ZinIrDummyWeight *this, const ZinTensorDimensions *a2)
{
}

void sub_2111AB360(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4034FA82A5);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeightUtils::CreateUncompressedDummyWeight(unint64_t *a1, int a2, unsigned int a3)
{
  unint64_t SerializedWeightElementCount = GetSerializedWeightElementCount(a2, a1, a3);
  switch(a2)
  {
    case 1:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<signed char>,std::allocator<ZinIrConstData_dummy<signed char>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v6);
      goto LABEL_7;
    case 2:
      goto LABEL_6;
    case 4:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<half>,std::allocator<ZinIrConstData_dummy<half>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v6);
      goto LABEL_7;
    case 6:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<float>,std::allocator<ZinIrConstData_dummy<float>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v6);
      goto LABEL_7;
    default:
      if ((a2 - 7) > 0x14) {
        ZinAssertImpl("Error: unrecognized kernel format");
      }
LABEL_6:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<unsigned char>,std::allocator<ZinIrConstData_dummy<unsigned char>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v6);
LABEL_7:
      (*(void (**)(void, uint64_t))(*(void *)v6 + 16))(v6, v4);
      operator new();
  }
}

void sub_2111AB554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  MEMORY[0x21667D3C0](v15, 0x10B3C4034FA82A5);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinTextureValidator::ValidateBackgroundPadding(uint64_t a1, unsigned int a2, float a3)
{
  if (IsFormatDMAConvertibleToFP16(a2)) {
    int v6 = 3;
  }
  else {
    int v6 = a2;
  }
  switch(v6)
  {
    case 1:
      BOOL v8 = a3 < -128.0;
      float v9 = 127.0;
      goto LABEL_11;
    case 2:
      BOOL v8 = a3 < 0.0;
      float v9 = 255.0;
      goto LABEL_11;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
      if (a3 >= -65504.0 && a3 <= 65504.0) {
        goto LABEL_7;
      }
      goto LABEL_16;
    case 12:
      BOOL v8 = a3 < -448.0;
      float v9 = 448.0;
LABEL_11:
      if (v8 || a3 > v9) {
        goto LABEL_16;
      }
LABEL_7:
      uint64_t result = 1;
      break;
    default:
LABEL_16:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinTextureValidator::ValidateBackgroundPadding(a3);
      }
      long long v11 = @"InvalidPaddingInfo";
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v11, (uint64_t *)&v11);
      uint64_t result = 0;
      break;
  }
  return result;
}

void ZinTextureValidator::ValidateBackgroundPadding(float a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  int v1 = 134217984;
  double v2 = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Background padding (%f) is beyond ANE limits.", (uint8_t *)&v1, 0xCu);
}

uint64_t ZinTELayer::ZinTELayer(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  BOOL v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinDMALayer::ZinDMALayer((void *)a1, a2, &v7, a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_26C3434D8;
  *(_OWORD *)(a1 + 196) = xmmword_211EE2260;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = 0;
  return a1;
}

void sub_2111AB828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinTELayer::ConfigurePaddingInfo(ZinTELayer *this, const ZinIrTextureUnitInfo *a2)
{
  if (!*((unsigned char *)this + 215) && ((int v3 = *((_DWORD *)a2 + 16), v3 == 2) || v3 == 1)) {
    int v2 = (int)*((short float *)a2 + 76);
  }
  else {
    LOWORD(v2) = *((_WORD *)a2 + 76);
  }
  *((_WORD *)this + 108) = v2;
  uint64_t v4 = (_DWORD *)*((void *)a2 + 13);
  uint64_t v5 = (_DWORD *)*((void *)a2 + 14);
  if (v4 == v5) {
    return 1;
  }
  int v6 = 7;
  int v7 = 7;
  do
  {
    if (*v4 == 3)
    {
      int v6 = v4[1];
      if ((v6 - 5) < 2)
      {
        *((unsigned char *)this + 213) = 1;
      }
      else if (v6 == 7)
      {
        *(_WORD *)((char *)this + 213) = 256;
      }
      else
      {
        if (v6 != 3) {
          return 0;
        }
        *((unsigned char *)this + 213) = 0;
      }
    }
    else
    {
      if (*v4 != 4)
      {
        int v8 = v4[1];
        if (v8 == 3) {
          goto LABEL_26;
        }
        if (v8 != 7) {
          return 0;
        }
        goto LABEL_24;
      }
      int v7 = v4[1];
      if ((v7 - 5) < 2)
      {
        *((unsigned char *)this + 212) = 1;
        goto LABEL_26;
      }
      if (v7 == 7)
      {
        *((unsigned char *)this + 212) = 0;
LABEL_24:
        *((unsigned char *)this + 214) = 1;
        goto LABEL_26;
      }
      if (v7 != 3) {
        return 0;
      }
      *((unsigned char *)this + 212) = 0;
    }
LABEL_26:
    v4 += 2;
  }
  while (v4 != v5);
  if (v7 == 5)
  {
    if (*((_DWORD *)this + 49) == 1) {
      goto LABEL_32;
    }
    return 0;
  }
  if (v7 == 6 && *((_DWORD *)this + 49) != 2) {
    return 0;
  }
LABEL_32:
  if (v6 == 5) {
    return *((_DWORD *)this + 50) == 1;
  }
  return v6 != 6 || *((_DWORD *)this + 50) == 2;
}

BOOL ZinTELayer::Configure(uint64_t a1, int a2, ZinIrTextureUnitInfo *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 192) = a2;
  *(void *)(a1 + 224) = a4;
  uint64_t v4 = (_DWORD *)*((void *)a3 + 16);
  for (uint64_t i = (_DWORD *)*((void *)a3 + 17); v4 != i; v4 += 2)
  {
    int v6 = (_DWORD *)(a1 + 204);
    if (*v4 == 4 || (int v6 = (_DWORD *)(a1 + 208), *v4 == 3))
    {
      *int v6 = v4[1];
    }
    else if (v4[1] != 1)
    {
      return 0;
    }
  }
  int v7 = (_DWORD *)*((void *)a3 + 10);
  int v8 = (_DWORD *)*((void *)a3 + 11);
  while (v7 != v8)
  {
    if (*v7 == 3)
    {
      int v10 = v7[1];
      *(_DWORD *)(a1 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7[2];
      *(_DWORD *)(a1 + 236) = v10;
    }
    else if (*v7 == 4)
    {
      int v9 = v7[1];
      *(_DWORD *)(a1 + 196) = v7[2];
      *(_DWORD *)(a1 + 232) = v9;
    }
    else if (v7[2])
    {
      return 0;
    }
    v7 += 3;
  }
  return ZinTELayer::ConfigurePaddingInfo((ZinTELayer *)a1, a3);
}

void ZinTELayer::~ZinTELayer(ZinTELayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);

  JUMPOUT(0x21667D3C0);
}

long long *ZinIrHalH14::GetParams(ZinIrHalH14 *this)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  {
    ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters = xmmword_211EEDA40;
    dword_26777D290 = 8;
    unk_26777D298 = xmmword_211ED25C0;
    unk_26777D2A8 = xmmword_211ED32E0;
    unk_26777D2B8 = xmmword_211ED32F0;
    unk_26777D2C8 = xmmword_211ED2760;
    unk_26777D2D8 = xmmword_211ED3300;
    unk_26777D2E8 = xmmword_211ED32F0;
    unk_26777D2F8 = xmmword_211ED2610;
    unk_26777D308 = xmmword_211ED3310;
    unk_26777D318 = xmmword_211ED3320;
    unk_26777D328 = xmmword_211ED2640;
    unk_26777D338 = vdupq_n_s64(4uLL);
    qword_26777D348 = 4;
    xmmword_26777D350 = xmmword_211EF6A68;
    unk_26777D360 = unk_211EF6A78;
    xmmword_26777D370 = xmmword_211EF6A68;
    unk_26777D380 = unk_211EF6A78;
    qword_26777D3A0 = 4;
    xmmword_26777D390 = xmmword_211EF6A88;
    xmmword_26777D3A8 = xmmword_211ED2650;
    xmmword_26777D3B8 = xmmword_211ED2660;
    xmmword_26777D3C8 = xmmword_211ED2660;
    xmmword_26777D3D8 = xmmword_211ED2660;
    xmmword_26777D3E8 = xmmword_211ED2670;
    xmmword_26777D3F8 = xmmword_211ED2680;
    xmmword_26777D408 = xmmword_211ED2690;
    xmmword_26777D418 = xmmword_211ED26A0;
    xmmword_26777D428 = xmmword_211ED26B0;
    xmmword_26777D438 = xmmword_211ED2780;
    xmmword_26777D448 = xmmword_211ED26D0;
    xmmword_26777D458 = xmmword_211ED26E0;
    xmmword_26777D468 = xmmword_211ED26F0;
    xmmword_26777D478 = xmmword_211ED3340;
    xmmword_26777D488 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777D498 = xmmword_211ED27F0;
    xmmword_26777D4A8 = xmmword_211ED2720;
    xmmword_26777D4B8 = xmmword_211ED2730;
    xmmword_26777D4C8 = xmmword_211ED2740;
    xmmword_26777D4D8 = xmmword_211ED3350;
    xmmword_26777D4E8 = xmmword_211ED3360;
    qword_26777D4F8 = 0;
    word_26777D500 = 256;
    xmmword_26777D508 = xmmword_211ED2760;
    xmmword_26777D518 = xmmword_211ED2770;
    xmmword_26777D528 = xmmword_211ED2780;
    qword_26777D538 = 0x10000;
    byte_26777D540 = 122;
    xmmword_26777D548 = xmmword_211ED3370;
    dword_26777D558 = 520097776;
    qword_26777D55C = 0xFFFFFFEB0000000BLL;
    xmmword_26777D568 = xmmword_211ED27A0;
    xmmword_26777D578 = xmmword_211ED27B0;
    xmmword_26777D588 = xmmword_211ED27C0;
    int64x2_t v97 = vdupq_n_s64(8uLL);
    long long v98 = xmmword_211ED3380;
    long long v99 = xmmword_211ED3390;
    long long v100 = xmmword_211ED2730;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777D598, (uint64_t)&v97, 4uLL);
    xmmword_26777D5B0 = xmmword_211ED33A0;
    unk_26777D5C0 = xmmword_211ED27E0;
    xmmword_26777D5D0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777D5E0 = xmmword_211ED2610;
    unk_26777D5F0 = vdupq_n_s64(8uLL);
    unk_26777D600 = xmmword_211ED27F0;
    unk_26777D610 = xmmword_211ED2800;
    unk_26777D620 = vdupq_n_s64(0x100uLL);
    unk_26777D630 = vdupq_n_s64(0x80uLL);
    unk_26777D640 = xmmword_211ED2810;
    unk_26777D650 = xmmword_211ED2820;
    unk_26777D660 = xmmword_211ED2830;
    unk_26777D670 = xmmword_211ED2840;
    unk_26777D680 = xmmword_211ED2850;
    unk_26777D690 = vdupq_n_s64(2uLL);
    unk_26777D6A0 = xmmword_211ED2660;
    unk_26777D6B0 = vdupq_n_s64(0x4000uLL);
    unk_26777D6C0 = xmmword_211ED2860;
    unk_26777D6D0 = 257;
    byte_26777D6D6 = 0;
    unk_26777D6D2 = 0;
    unk_26777D6D7 = 1;
    unk_26777D6D9 = 16843009;
    byte_26777D6DD = 1;
    dword_26777D6DE = 16842752;
    byte_26777D6E2 = 1;
    *(void *)&algn_26777D6E3[5] = 0;
    *(void *)algn_26777D6E3 = 0;
    byte_26777D6F0 = 1;
    byte_26777D6F5 = 0;
    unk_26777D6F1 = 0;
    qword_26777D6F6 = 0x101010101010101;
    word_26777D6FE = 0;
    unk_26777D700 = xmmword_211ED2760;
    unk_26777D710 = xmmword_211ED2880;
    unk_26777D720 = 40;
    unk_26777D730 = 0;
    unk_26777D728 = 0;
    word_26777D738 = 1;
    dword_26777D73A = 16843009;
    word_26777D73E = 257;
    byte_26777D740 = 0;
    *(void *)&algn_26777D741[7] = 0;
    byte_26777D750 = 0;
    unk_26777D751 = 16843009;
    unk_26777D759 = 0;
    unk_26777D75B = 16842753;
    unk_26777D75F = 0;
    byte_26777D76B = 1;
    unk_26777D767 = 16843009;
    unk_26777D76C = 0x100000100010000;
    word_26777D774 = 256;
    dword_26777D776 = 0;
    unk_26777D780 = 128;
    unk_26777D788 = -1;
    unk_26777D790 = -1;
    word_26777D798 = 0;
    unk_26777D79C = 1;
    unk_26777D7A0 = 0x10000;
    byte_26777D7A4 = 1;
    unk_26777D7AD = 0;
    unk_26777D7A5 = 0;
    unk_26777D7B1 = 1542;
    byte_26777D7B5 = 1;
    dword_26777D7B6 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777D7C0, "Simple");
    qword_26777D7D8 = 0x1000000;
    dword_26777D7E0 = 1071225242;
    unk_26777D7E4 = 14;
    unk_26777D7F0 = xmmword_211ED2890;
    unk_26777D800 = vdupq_n_s64(0x40uLL);
    unk_26777D810 = xmmword_211ED27D0;
    qword_26777D820 = 8;
    byte_26777D828 = 0;
    unk_26777D82C = 0xF3E800000;
    byte_26777D834 = 1;
    long long v129 = xmmword_211ED28B0;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777D838, &v129, 4uLL);
    v127[0] = xmmword_211EF6AA0;
    v127[1] = unk_211EF6AB0;
    v128[0] = xmmword_211EF6AC0;
    *(_OWORD *)((char *)v128 + 12) = *(long long *)((char *)&xmmword_211EF6AC0 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777D850, v127, 0xFuLL);
    int v126 = 25;
    void v125[4] = xmmword_211EF6B1C;
    v125[5] = unk_211EF6B2C;
    v125[6] = xmmword_211EF6B3C;
    v125[0] = xmmword_211EF6ADC;
    v125[1] = unk_211EF6AEC;
    v125[2] = xmmword_211EF6AFC;
    v125[3] = unk_211EF6B0C;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777D868, v125, 0x1DuLL);
    int v124 = 42;
    v123[6] = xmmword_211EF6BB0;
    v123[7] = unk_211EF6BC0;
    v123[8] = xmmword_211EF6BD0;
    v123[9] = unk_211EF6BE0;
    v123[2] = xmmword_211EF6B70;
    v123[3] = unk_211EF6B80;
    void v123[4] = xmmword_211EF6B90;
    v123[5] = unk_211EF6BA0;
    v123[0] = xmmword_211EF6B50;
    v123[1] = unk_211EF6B60;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777D880, v123, 0x29uLL);
    int v93 = 2;
    long long v94 = xmmword_211ED28C0;
    uint64_t v95 = 0x1100000002;
    int v96 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v28, &v93, 1uLL);
    v97.i32[0] = 641877825;
    long long v98 = 0uLL;
    v97.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v97.i64[1], v28, (uint64_t)v29, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)v28) >> 3));
    int v89 = 2;
    long long v90 = xmmword_211ED28C0;
    uint64_t v91 = 0x1100000002;
    int v92 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v26, &v89, 1uLL);
    LODWORD(v99) = 759318337;
    long long v100 = 0uLL;
    *((void *)&v99 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((void *)&v99 + 1, v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - (unsigned char *)v26) >> 3));
    int v85 = 2;
    long long v86 = xmmword_211ED28C0;
    uint64_t v87 = 0x1100000002;
    int v88 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v24, &v85, 1uLL);
    int v101 = 792872769;
    memset(v102, 0, sizeof(v102));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v102, v24, (uint64_t)v25, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)v24) >> 3));
    int v81 = 2;
    long long v82 = xmmword_211ED28C0;
    uint64_t v83 = 0x1100000002;
    int v84 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v22, &v81, 1uLL);
    int v103 = 2084718401;
    memset(v104, 0, sizeof(v104));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v104, v22, (uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (unsigned char *)v22) >> 3));
    int v77 = 10;
    int64x2_t v78 = vdupq_n_s64(1uLL);
    uint64_t v79 = 0x800000001;
    int v80 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v20, &v77, 1uLL);
    int v105 = 642527542;
    memset(v106, 0, sizeof(v106));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v106, v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - (unsigned char *)v20) >> 3));
    int v73 = 3;
    int64x2_t v74 = vdupq_n_s64(1uLL);
    uint64_t v75 = 0x700000002;
    int v76 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v18, &v73, 1uLL);
    int v107 = 642527336;
    memset(v108, 0, sizeof(v108));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v108, v18, (uint64_t)v19, 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)v18) >> 3));
    int v69 = 3;
    int64x2_t v70 = vdupq_n_s64(1uLL);
    uint64_t v71 = 0x700000002;
    int v72 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v16, &v69, 1uLL);
    int v109 = 759967848;
    memset(v110, 0, sizeof(v110));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v110, v16, (uint64_t)v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)v16) >> 3));
    int v65 = 3;
    int64x2_t v66 = vdupq_n_s64(1uLL);
    uint64_t v67 = 0x700000002;
    int v68 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v14, &v65, 1uLL);
    int v111 = 793522280;
    memset(v112, 0, sizeof(v112));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v112, v14, (uint64_t)v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)v14) >> 3));
    int v61 = 3;
    int64x2_t v62 = vdupq_n_s64(1uLL);
    uint64_t v63 = 0x700000002;
    int v64 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v12, &v61, 1uLL);
    int v113 = 2085367912;
    memset(v114, 0, sizeof(v114));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v114, v12, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)v12) >> 3));
    int v57 = 3;
    long long v58 = xmmword_211ED28C0;
    uint64_t v59 = 0x1300000002;
    int v60 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v10, &v57, 1uLL);
    int v115 = 642934849;
    memset(v116, 0, sizeof(v116));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v116, v10, (uint64_t)v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - (unsigned char *)v10) >> 3));
    int v53 = 3;
    long long v54 = xmmword_211ED28C0;
    uint64_t v55 = 0x1300000002;
    int v56 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v8, &v53, 1uLL);
    int v117 = 760375361;
    memset(v118, 0, sizeof(v118));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v118, v8, (uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v8) >> 3));
    int v49 = 3;
    long long v50 = xmmword_211ED28C0;
    uint64_t v51 = 0x1300000002;
    int v52 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v6, &v49, 1uLL);
    int v119 = 793929793;
    memset(v120, 0, sizeof(v120));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v120, v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 3));
    int v45 = 3;
    long long v46 = xmmword_211ED28C0;
    uint64_t v47 = 0x1300000002;
    int v48 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v45, 1uLL);
    int v121 = 2085775425;
    memset(v122, 0, sizeof(v122));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v122, __p, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_26777D898, (unsigned int *)&v97, 13);
    word_26777D8B0 = 0;
    byte_26777D8B2 = 1;
    *(_DWORD *)algn_26777D8B3 = 0;
    qword_26777D8B8 = 0;
    dword_26777D8C0 = 0;
    unk_26777D8C8 = 0u;
    unk_26777D8D8 = 0u;
    word_26777D8E8 = 257;
    qword_26777D910 = 8;
    xmmword_26777D8F0 = xmmword_211EF6BF8;
    unk_26777D900 = unk_211EF6C08;
    unk_26777D918 = xmmword_211EEDA50;
    _OWORD v43[2] = xmmword_211EF6C40;
    _OWORD v43[3] = unk_211EF6C50;
    uint64_t v44 = 0x41DCE0E220000000;
    v43[0] = xmmword_211EF6C20;
    v43[1] = unk_211EF6C30;
    std::vector<double>::vector[abi:ne180100](&qword_26777D928, v43, 9uLL);
    long long v32 = xmmword_211EF6C68;
    *(void *)&long long v33 = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777D940, &v32, 3uLL);
    long long v41 = xmmword_211EF6C80;
    uint64_t v42 = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777D958, &v41, 3uLL);
    long long v38 = xmmword_211EF6CF8;
    long long v39 = unk_211EF6D08;
    long long v40 = xmmword_211EF6D18;
    long long v34 = xmmword_211EF6CB8;
    long long v35 = unk_211EF6CC8;
    long long v36 = xmmword_211EF6CD8;
    long long v37 = unk_211EF6CE8;
    long long v32 = xmmword_211EF6C98;
    long long v33 = unk_211EF6CA8;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777D970, (double *)&v32, 9);
    xmmword_26777D988 = xmmword_211ED28E0;
    v30[0] = xmmword_211EF6D28;
    v30[1] = unk_211EF6D38;
    _OWORD v30[2] = xmmword_211EF6D48;
    int v31 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777D998, v30, 0xDuLL);
    xmmword_26777D9B0 = (__int128)vdupq_n_s64(6uLL);
    unk_26777D9C0 = xmmword_211ED28F0;
    qword_26777D9D0 = 64;
    unk_26777D9D8 = 0x101010101010101;
    unk_26777D9DE = 0x101010101010101;
    dword_26777D9E8 = 16777473;
    xmmword_26777D9F0 = xmmword_211EF6D60;
    unk_26777DA00 = unk_211EF6D70;
    xmmword_26777DA10 = xmmword_211EF6D80;
    unk_26777DA20 = unk_211EF6D90;
    xmmword_26777DA50 = xmmword_211EF6DC0;
    unk_26777DA60 = unk_211EF6DD0;
    xmmword_26777DA30 = xmmword_211EF6DA0;
    unk_26777DA40 = unk_211EF6DB0;
    word_26777DA70 = 1;
    byte_26777DA72 = 0;
    byte_26777DA78 = 0;
    byte_26777DA80 = 0;
    dword_26777DA88 = 65792;
    word_26777DA8C = 0;
    dword_26777DA90 = 1056899072;
    word_26777DA94 = 1;
    unk_26777DA98 = xmmword_211ED4690;
    byte_26777DAA8 = 1;
    qword_26777DAB0 = 0xFFFFLL;
    byte_26777DAB8 = 0;
    word_26777DAC8 = 256;
    byte_26777DACA = 1;
    qword_26777DAD0 = 0x40000000;
    uint64_t v2 = 416;
    qword_26777DAC0 = 0;
    do
    {
      int v3 = *(void **)((char *)&v94 + v2 + 8);
      if (v3)
      {
        *(uint64_t *)((char *)&v95 + v2) = (uint64_t)v3;
        operator delete(v3);
      }
      v2 -= 32;
    }
    while (v2);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      int v7 = v6;
      operator delete(v6);
    }
    if (v8)
    {
      int v9 = v8;
      operator delete(v8);
    }
    if (v10)
    {
      long long v11 = v10;
      operator delete(v10);
    }
    if (v12)
    {
      __int16 v13 = v12;
      operator delete(v12);
    }
    if (v14)
    {
      uint64_t v15 = v14;
      operator delete(v14);
    }
    if (v16)
    {
      BOOL v17 = v16;
      operator delete(v16);
    }
    if (v18)
    {
      char v19 = v18;
      operator delete(v18);
    }
    if (v20)
    {
      BOOL v21 = v20;
      operator delete(v20);
    }
    if (v22)
    {
      unsigned int v23 = v22;
      operator delete(v22);
    }
    if (v24)
    {
      int v25 = v24;
      operator delete(v24);
    }
    if (v26)
    {
      char v27 = v26;
      operator delete(v26);
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters, &dword_210C72000);
  }
  return &ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters;
}

void sub_2111ACA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v34, *(void **)(v34 + 8));
  if (qword_26777D958)
  {
    qword_26777D960 = qword_26777D958;
    operator delete((void *)qword_26777D958);
  }
  if (qword_26777D940)
  {
    qword_26777D948 = qword_26777D940;
    operator delete((void *)qword_26777D940);
  }
  if (qword_26777D928)
  {
    qword_26777D930 = qword_26777D928;
    operator delete((void *)qword_26777D928);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v33, *(void **)(v33 + 8));
  uint64_t v37 = 416;
  while (1)
  {
    long long v38 = *(void **)((char *)&STACK[0x4C0] + v37 - 24);
    if (v38)
    {
      *(unint64_t *)((char *)&STACK[0x4C0] + v37 - 16) = (unint64_t)v38;
      operator delete(v38);
    }
    v37 -= 32;
    if (!v37)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a21) {
        operator delete(a21);
      }
      if (a24) {
        operator delete(a24);
      }
      if (a27) {
        operator delete(a27);
      }
      if (a30) {
        operator delete(a30);
      }
      if (a33)
      {
        v35[1] = a33;
        operator delete(a33);
      }
      long long v39 = (void *)v35[3];
      if (v39)
      {
        v35[4] = v39;
        operator delete(v39);
      }
      long long v40 = (void *)v35[6];
      if (v40)
      {
        v35[7] = v40;
        operator delete(v40);
      }
      long long v41 = (void *)v35[9];
      if (v41)
      {
        v35[10] = v41;
        operator delete(v41);
      }
      uint64_t v42 = (void *)v35[12];
      if (v42)
      {
        v35[13] = v42;
        operator delete(v42);
      }
      char v43 = (void *)v35[15];
      if (v43)
      {
        v35[16] = v43;
        operator delete(v43);
      }
      uint64_t v44 = (void *)v35[18];
      if (v44)
      {
        v35[19] = v44;
        operator delete(v44);
      }
      int v45 = (void *)v35[21];
      if (v45)
      {
        v35[22] = v45;
        operator delete(v45);
      }
      if (qword_26777D880)
      {
        qword_26777D888 = qword_26777D880;
        operator delete((void *)qword_26777D880);
      }
      if (qword_26777D868)
      {
        qword_26777D870 = qword_26777D868;
        operator delete((void *)qword_26777D868);
      }
      if (qword_26777D850)
      {
        qword_26777D858 = qword_26777D850;
        operator delete((void *)qword_26777D850);
      }
      if (qword_26777D838)
      {
        qword_26777D840 = qword_26777D838;
        operator delete((void *)qword_26777D838);
      }
      if (byte_26777D7D7 < 0) {
        operator delete((void *)qword_26777D7C0);
      }
      if (qword_26777D598)
      {
        qword_26777D5A0 = qword_26777D598;
        operator delete((void *)qword_26777D598);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2111ACCE0()
{
}

void sub_2111ACCF0()
{
}

void sub_2111ACD00()
{
}

void sub_2111ACD10()
{
}

void sub_2111ACD20()
{
}

void sub_2111ACD30()
{
}

void sub_2111ACD40()
{
}

void sub_2111ACD58()
{
}

void sub_2111ACD60()
{
}

void sub_2111ACD68()
{
}

void sub_2111ACD70()
{
}

void sub_2111ACD78()
{
}

void sub_2111ACD80()
{
}

void sub_2111ACD88()
{
}

uint64_t ZinIrOpt::ApplyConvHoistings(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x263EF8340];
  ZinIrOpt::ConvHoistings::ConvHoistings((uint64_t)v7, a2);
  v6[0] = &unk_26C330FA8;
  v6[1] = v7;
  void v6[3] = v6;
  uint64_t v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v6, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v6);
  v7[0] = &unk_26C349BA8;
  uint64_t v5 = (void **)v8;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v5);
  ZinPattern::~ZinPattern((ZinPattern *)v7);
  return v3;
}

void sub_2111ACE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ConvHoistings::ConvHoistings(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v15, "conv");
  v16[0] = &unk_26C380F00;
  v16[1] = ZinIrOpt::ConvHoistings::MatchConv;
  v16[3] = v16;
  int v7 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v17, &v7, 1);
  std::string::basic_string[abi:ne180100]<0>(v18, "transpose_hw");
  v19[0] = &unk_26C380F00;
  v19[1] = ZinIrOpt::ConvHoistings::MatchTranspose;
  v19[3] = v19;
  int v6 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v20, &v6, 1);
  std::string::basic_string[abi:ne180100]<0>(v21, "goc");
  v22[0] = &unk_26C380F00;
  v22[1] = ZinIrOpt::ConvHoistings::MatchGOC;
  void v22[3] = v22;
  uint64_t v14 = 0x200000001;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v23, (int *)&v14, 2);
  int v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  long long v11 = &v8;
  char v12 = 0;
  int v8 = (char *)operator new(0x120uLL);
  uint64_t v9 = (uint64_t)v8;
  int v10 = v8 + 288;
  uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v10, (uint64_t)v15, (uint64_t)&v24, (uint64_t)v8);
  void v13[3] = 0;
  ZinLinearPattern::ZinLinearPattern(a1, &v8, a2, 0, v13, 0);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v13);
  long long v11 = &v8;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  uint64_t v4 = 36;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v13[v4]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100]((uint64_t *)((char *)&v9 + v4 * 8));
    if (*((char *)&v8 + v4 * 8 + 7) < 0) {
      operator delete((void *)v15[v4 - 12]);
    }
    v4 -= 12;
  }
  while (v4 * 8);
  return a1;
}

void sub_2111AD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&a15);
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&a13);
  for (uint64_t i = 192; i != -96; i -= 96)
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)(&a20 + i));
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ConvHoistings::MatchConv(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 0) | 0x100u;
}

uint64_t ZinIrOpt::ConvHoistings::MatchTranspose(uint64_t a1)
{
  int v1 = *(ZinTransposeLayer **)(a1 + 8);
  BOOL v2 = *(_DWORD *)(*((void *)v1 + 8) + 8) == 37 && ZinTransposeLayer::IsHWTranspose(v1);
  return v2 | 0x100u;
}

uint64_t ZinIrOpt::ConvHoistings::MatchGOC(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 2) | 0x100u;
}

void std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C330FA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C330FA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  return 0;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::ConvHoistings::MatchAndReplace(ZinIrOpt::ConvHoistings *this, uint64_t **a2, ZinIrOpLayer *a3)
{
  v46[1] = *MEMORY[0x263EF8340];
  if (ZinLinearPattern::Match(this, (const ZinIrOpLayerGraph *)a2, a3))
  {
    if (*((char *)a3 + 47) >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 47);
    }
    else {
      size_t v6 = *((void *)a3 + 4);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 10);
    if (SHIBYTE(v35) < 0) {
      p_p = __p;
    }
    if (v6)
    {
      if (*((char *)a3 + 47) >= 0) {
        int v8 = (char *)a3 + 24;
      }
      else {
        int v8 = (char *)*((void *)a3 + 3);
      }
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, "_hoist_goc");
    ZinObjectNameFactory::ZinObjectNameFactory(v44, &__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    uint64_t v30 = *((void *)a3 + 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
    uint64_t SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_hw");
    int v10 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
    ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)&__p, &v42);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    long long v11 = v42;
    char v12 = v43;
    if (v42 != v43)
    {
      while (1)
      {
        __int16 v13 = *v11;
        float v40 = 0.0;
        float v41 = 1.0;
        *(_WORD *)long long v39 = 0;
        uint64_t v14 = *((void *)v13 + 17);
        unint64_t v15 = *(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)SingleMatch + 32))(SingleMatch, 0, 0)+ 56);
        ZinGOCLayer::GetSingularScale(v13, &v41, &v39[1]);
        ZinGOCLayer::GetSingularBias(v13, &v40, v39);
        IsPerint Cout = ZinGOCLayer::IsPerCout((ZinIrKernel **)v13);
        uint64_t v17 = *(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)SingleMatch + 32);
        if (!IsPerCout)
        {
          uint64_t v20 = (ZinIrTensor *)v17(SingleMatch, 0, 0);
          uint64_t v21 = (*(uint64_t (**)(ZinGOCLayer *, void, void))(*(void *)v13 + 32))(v13, 0, 0);
          ZinBuilder::CreateConstScaleAndBiasGOC(v30, (uint64_t)v44, v20, *(unsigned int *)(v21 + 88), 0, 0, 1);
        }
        uint64_t v18 = v17(SingleMatch, 0, 0);
        uint64_t v19 = *(void *)(v14 + 568);
        if (v19)
        {
          ZinIrVector::GetValuesAsVector<float>(v19, v15, 1, (uint64_t)&__p);
        }
        else
        {
          std::string __p = 0;
          uint64_t v34 = 0;
          long long v35 = 0;
          std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, 0, 0, 0);
        }
        uint64_t v22 = *(void *)(v14 + 576);
        if (v22)
        {
          ZinIrVector::GetValuesAsVector<float>(v22, v15, 1, (uint64_t)&v36);
        }
        else
        {
          long long v36 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v36, 0, 0, 0);
        }
        uint64_t v23 = *(void *)(v14 + 568);
        uint64_t v24 = *(void *)(v14 + 576);
        if (v24)
        {
          if (v23) {
            goto LABEL_31;
          }
        }
        else if (v23)
        {
LABEL_31:
          if (!v24) {
            goto LABEL_35;
          }
          goto LABEL_32;
        }
        if (!v24)
        {
LABEL_35:
          int v25 = 4;
          goto LABEL_36;
        }
LABEL_32:
        int v25 = *(_DWORD *)(v24 + 8);
LABEL_36:
        int v29 = v25;
        PerCoutGOC = (ZinIrOpLayer *)ZinBuilder::CreatePerCoutGOC(v30, (uint64_t)v44, v18, (uint64_t)&__p, (const void **)&v36);
        if (v36)
        {
          uint64_t v37 = (uint64_t)v36;
          operator delete(v36);
        }
        if (__p)
        {
          uint64_t v34 = __p;
          operator delete(__p);
        }
        v46[0] = v13;
        long long v36 = v46;
        uint64_t v37 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v36);
        int inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, PerCoutGOC, SingleMatch, v10, (ZinIrOpLayer ***)&__p);
        std::string __p = &unk_26C359A08;
        if (v34)
        {
          long long v35 = v34;
          operator delete(v34);
        }
        memset(v31, 0, sizeof(v31));
        int v32 = 1065353216;
        int v28 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v13, v10, v31);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
        if ((inserted & v28 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v13, 0) & 1) == 0) {
          ZinAssertImpl("Could not swap transpose and bias.", v29);
        }
        if (++v11 == v12)
        {
          long long v11 = v42;
          break;
        }
      }
    }
    if (v11)
    {
      char v43 = v11;
      operator delete(v11);
    }
    v44[0] = &unk_26C34DA98;
    if (v45 < 0) {
      operator delete((void *)v44[1]);
    }
  }
}

void sub_2111AD7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrMemoryUtils::ComputeElementaryIntervals(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v5 = 0;
    std::string __p = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    do
    {
      size_t v6 = (uint64_t *)v45;
      if (v5 >= (uint64_t *)v45)
      {
        int v8 = (uint64_t *)__p;
        uint64_t v9 = ((char *)v5 - (unsigned char *)__p) >> 3;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          goto LABEL_61;
        }
        uint64_t v11 = v45 - (unsigned char *)__p;
        if ((v45 - (unsigned char *)__p) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          __int16 v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v12);
          int v8 = (uint64_t *)__p;
          uint64_t v5 = v44;
        }
        else
        {
          __int16 v13 = 0;
        }
        uint64_t v14 = (uint64_t *)&v13[8 * v9];
        *uint64_t v14 = *v3;
        int v7 = v14 + 1;
        while (v5 != v8)
        {
          uint64_t v15 = *--v5;
          *--uint64_t v14 = v15;
        }
        size_t v6 = (uint64_t *)&v13[8 * v12];
        std::string __p = v14;
        uint64_t v44 = v7;
        char v45 = (char *)v6;
        if (v8)
        {
          operator delete(v8);
          size_t v6 = (uint64_t *)v45;
        }
      }
      else
      {
        *uint64_t v5 = *v3;
        int v7 = v5 + 1;
      }
      uint64_t v44 = v7;
      if (v7 >= v6)
      {
        uint64_t v16 = (uint64_t *)__p;
        uint64_t v17 = ((char *)v7 - (unsigned char *)__p) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
LABEL_61:
        }
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        uint64_t v19 = (char *)v6 - (unsigned char *)__p;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v20);
          uint64_t v16 = (uint64_t *)__p;
          int v7 = v44;
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (uint64_t *)&v21[8 * v17];
        *uint64_t v22 = v3[1];
        uint64_t v5 = v22 + 1;
        while (v7 != v16)
        {
          uint64_t v23 = *--v7;
          *--uint64_t v22 = v23;
        }
        std::string __p = v22;
        uint64_t v44 = v5;
        char v45 = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *int v7 = v3[1];
        uint64_t v5 = v7 + 1;
      }
      uint64_t v44 = v5;
      v3 += 3;
    }
    while (v3 != v4);
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    uint64_t v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>((uint64_t *)__p, v44);
    std::vector<long>::resize((uint64_t)&__p, ((char *)v24 - (unsigned char *)__p) >> 3);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    int v25 = (uint64_t *)__p;
    if ((char *)v44 - (unsigned char *)__p != 8)
    {
      char v26 = 0;
      unint64_t v27 = 0;
      int v28 = 0;
      unint64_t v29 = ((char *)v44 - (unsigned char *)__p) >> 3;
      uint64_t v30 = a2 + 2;
      do
      {
        if (v29 <= v27 || (v31 = v27, unint64_t v27 = (v28 + 1), v29 <= v27)) {
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v32 = v25[v31];
        uint64_t v33 = v25[v27];
        uint64_t v34 = v33 - v32;
        if ((unint64_t)v26 >= *v30)
        {
          long long v35 = *a2;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v26 - *a2);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*v30 - (void)v35) >> 3) > v37) {
            unint64_t v37 = 0x5555555555555556 * ((uint64_t)(*v30 - (void)v35) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - (void)v35) >> 3) >= 0x555555555555555) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38)
          {
            long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a2 + 2), v38);
            long long v35 = *a2;
            char v26 = a2[1];
          }
          else
          {
            long long v39 = 0;
          }
          float v40 = (uint64_t *)&v39[24 * v36];
          *float v40 = v32;
          v40[1] = v33;
          v40[2] = v34;
          float v41 = v40;
          if (v26 != v35)
          {
            do
            {
              long long v42 = *(_OWORD *)(v26 - 3);
              *(v41 - 1) = *(v26 - 1);
              *(_OWORD *)(v41 - 3) = v42;
              v41 -= 3;
              v26 -= 3;
            }
            while (v26 != v35);
            long long v35 = *a2;
          }
          char v26 = v40 + 3;
          *a2 = v41;
          a2[1] = v40 + 3;
          a2[2] = (uint64_t *)&v39[24 * v38];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *char v26 = v32;
          v26[1] = v33;
          void v26[2] = v34;
          v26 += 3;
        }
        a2[1] = v26;
        int v25 = (uint64_t *)__p;
        unint64_t v29 = ((char *)v44 - (unsigned char *)__p) >> 3;
        int v28 = v27;
      }
      while (v29 - 1 > v27);
    }
    if (v25)
    {
      uint64_t v44 = v25;
      operator delete(v25);
    }
  }
}

void sub_2111ADCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree@<X0>(ZinIrTensor *a1@<X0>, const ZinIrTensor *a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unint64_t v29 = 0;
  uint64_t v30 = a1;
  ZinIrMemoryUtils::GetSpaceRanges(a1, a2, (char *)&v33);
  uint64_t v4 = v33;
  uint64_t v3 = (unint64_t *)v34;
  if (v33 != (unint64_t *)v34)
  {
    do
    {
      ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(&v29, 0, v4);
      v4 += 3;
    }
    while (v4 != v3);
    uint64_t v4 = v33;
  }
  if (v4)
  {
    *(void *)&long long v34 = v4;
    operator delete(v4);
  }
  ZinIrTensor::GetTensorFamily(v30, (uint64_t)&v27);
  std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor* const*>>((uint64_t)&v25, (uint64_t *)v27, v28);
  std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>(&v25, (uint64_t *)&v30);
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  if (v25 != (uint64_t *)v26) {
    operator new();
  }
  ZinIrMemoryUtils::GetSpaceRanges(v30, v5, (char *)&v19);
  uint64_t v33 = 0;
  long long v34 = 0uLL;
  std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<ZinSpaceRange*,ZinSpaceRange*>(&v33, v19, (uint64_t)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)v19) >> 3));
  int v7 = v25;
  if (v25 != (uint64_t *)v26)
  {
    do
    {
      ZinIrMemoryUtils::GetSpaceRanges((ZinIrMemoryUtils *)v7[4], v6, (char *)&__p);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinSpaceRange const*>,std::__wrap_iter<ZinSpaceRange const*>,std::back_insert_iterator<std::vector<ZinSpaceRange>>,0>((long long *)__p, v32, (void **)&v33);
      if (__p)
      {
        uint64_t v32 = (long long *)__p;
        operator delete(__p);
      }
      int v8 = (uint64_t *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          int v7 = v9;
        }
        while (!v10);
      }
      int v7 = v9;
    }
    while (v9 != (uint64_t *)v26);
  }
  ZinIrMemoryUtils::ComputeElementaryIntervals((uint64_t **)&v33, &v21);
  if (v33)
  {
    *(void *)&long long v34 = v33;
    operator delete(v33);
  }
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
  *a3 = 0;
  uint64_t v11 = (unint64_t *)v21;
  unint64_t v12 = v22;
  if (v21 != v22)
  {
    do
    {
      LOBYTE(__p) = 1;
      uint64_t v33 = (unint64_t *)&unk_26C32EBF8;
      *(void *)&long long v34 = &__p;
      long long v35 = (void **)&v33;
      ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor((uint64_t)&v29, v29, v11, (uint64_t)&v33);
      std::__function::__value_func<BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__value_func[abi:ne180100](&v33);
      if (!(_BYTE)__p)
      {
        __int16 v13 = (void ***)*((void *)&v23 + 1);
        uint64_t v14 = (void ***)v23;
        if ((void)v23 == *((void *)&v23 + 1))
        {
          unsigned int v15 = 0;
        }
        else
        {
          unsigned int v15 = 0;
          do
          {
            LOBYTE(__p) = 1;
            uint64_t v16 = *v14;
            uint64_t v33 = (unint64_t *)&unk_26C32EC50;
            *(void *)&long long v34 = &__p;
            long long v35 = (void **)&v33;
            ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor((uint64_t)v16, *v16, v11, (uint64_t)&v33);
            std::__function::__value_func<BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__value_func[abi:ne180100](&v33);
            if (!(_BYTE)__p) {
              ++v15;
            }
            ++v14;
          }
          while (v14 != v13);
        }
        ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(a3, v15, v11);
      }
      v11 += 3;
    }
    while (v11 != (unint64_t *)v12);
    uint64_t v11 = (unint64_t *)v21;
  }
  if (v11)
  {
    uint64_t v22 = (uint64_t *)v11;
    operator delete(v11);
  }
  uint64_t v33 = (unint64_t *)&v23;
  std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v25, v26[0]);
  if (v27)
  {
    int v28 = (uint64_t *)v27;
    operator delete(v27);
  }
  return ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(&v29);
}

void sub_2111AE1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(void *)(v30 - 128) = v32;
    operator delete(v32);
  }
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(&a27);
  _Unwind_Resume(a1);
}

void ZinIrMemoryUtils::GetSpaceRanges(ZinIrMemoryUtils *this@<X0>, const ZinIrTensor *a2@<X1>, char *a3@<X8>)
{
  if (!this) {
    ZinAssertImpl("tensor is empty", a2);
  }
  uint64_t v5 = (ZinIrOpLayer *)*((void *)this + 12);
  if (v5 && *(_DWORD *)(*((void *)v5 + 8) + 8) == 36)
  {
    if (!ZinIrOpLayer::GetInputTensor(*((ZinIrOpLayer **)this + 12), 0)) {
      ZinAssertImpl("view or view's input tensor is empty");
    }
    uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(v5, 0);
    ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)(InputTensor + 48), (ZinIrMemoryUtils *)((char *)this + 48), (char **)&__p);
    if (v24 == __p) {
      ZinAssertImpl("input dimension and output dimension are same in view");
    }
    uint64_t v7 = *((void *)this + 13);
    if (!v7 || (int v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48)) || (v9 = *v8) == 0 || !*(void *)(v9 + 512)) {
      ZinAssertImpl("Tensor do not have symbol or parent symbol");
    }
    ZinIrTensor::GetParentTensor(this, &v21);
    uint64_t v10 = *(void *)(v21 + 104);
    if (!v10 || (uint64_t v11 = *(uint64_t **)(v10 + 40), v11 == *(uint64_t **)(v10 + 48))) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *v11;
    }
    uint64_t v18 = *(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0)
                    + 104);
    if (!v18 || (uint64_t v19 = *(uint64_t **)(v18 + 40), v19 == *(uint64_t **)(v18 + 48))) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *v19;
    }
    ZinViewLayerUtils::ComputeViewSpanSpaceRanges(this, (void *)(v12 + 208), (long long *)(v20 + 296), 0, a3);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (__p)
    {
      uint64_t v24 = (void **)__p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v13 = *((void *)this + 13);
    if (!v13 || (uint64_t v14 = *(ZinIrSymbol ***)(v13 + 40), v14 == *(ZinIrSymbol ***)(v13 + 48)) || !*v14) {
      ZinAssertImpl("Tensor do not have symbol", a2);
    }
    ZinIrSymbol::GetSpaceRanges(*v14, 1, (uint64_t *)&__p);
    unsigned int v15 = v24;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    if (v15 == &__p)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = v15;
      do
      {
        ++v16;
        uint64_t v17 = (void **)v17[1];
      }
      while (v17 != &__p);
    }
    std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(a3, (uint64_t)v15, (uint64_t)&__p, v16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
}

void sub_2111AE504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(unint64_t **a1, unint64_t a2, unint64_t *a3)
{
  int v5 = 0;
  uint64_t result = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (unint64_t *)result;
  if (result)
  {
    *(void *)(result + 64) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  return result;
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      uint64_t v8 = v5;
      uint64_t v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

char *std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *(_OWORD *)(a2 + 16);
      *(void *)(v7 + 16) = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2111AE664(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100]((void **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void *std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<ZinSpaceRange*,ZinSpaceRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2111AE784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinSpaceRange const*>,std::__wrap_iter<ZinSpaceRange const*>,std::back_insert_iterator<std::vector<ZinSpaceRange>>,0>(long long *a1, long long *a2, void **a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<ZinSpaceRange>>::operator=[abi:ne180100](&v6, v3);
    uint64_t v3 = (long long *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<ZinSpaceRange>>::operator=[abi:ne180100](void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  uint64_t v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  size_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    uint64_t v18 = &v16[24 * v15];
    long long v19 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v19;
    uint64_t v11 = v17 + 24;
    uint64_t v21 = (char *)*v4;
    uint64_t v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v17 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*v4;
    }
    *uint64_t v4 = v17;
    v4[1] = v11;
    void v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v10 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v10;
    uint64_t v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(uint64_t a1, unint64_t *a2, unint64_t a3, unint64_t *a4, int *a5)
{
  *a5 = 0;
  if (!a2) {
    operator new();
  }
  uint64_t v6 = (uint64_t)a2;
  unint64_t v8 = a2[1];
  BOOL v9 = *a4 >= v8;
  if (*a4 == v8 && (unint64_t v10 = a4[1], v11 = a2[2], v9 = v10 >= v11, v10 == v11))
  {
    if (*a2 <= a3)
    {
LABEL_5:
      uint64_t inserted = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(a1, a2[10], a3, a4, a5);
      if (inserted) {
        *(void *)(inserted + 64) = v6;
      }
      *(void *)(v6 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = inserted;
      goto LABEL_12;
    }
  }
  else if (v9)
  {
    goto LABEL_5;
  }
  uint64_t v13 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(a1, a2[9], a3, a4, a5);
  if (v13) {
    *(void *)(v13 + 64) = v6;
  }
  *(void *)(v6 + 72) = v13;
LABEL_12:
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((void *)v6);
  switch(*a5)
  {
    case 1:
      goto LABEL_16;
    case 2:
      unint64_t v14 = *(void **)(v6 + 72);
      unint64_t v15 = (void *)v14[10];
      uint64_t v16 = v15[9];
      if (v16) {
        *(void *)(v16 + 64) = v14;
      }
      v14[10] = v16;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v14);
      v14[8] = v15;
      v15[9] = v14;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v15);
      v15[8] = v6;
      *(void *)(v6 + 72) = v15;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((void *)v6);
LABEL_16:
      uint64_t v17 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateClockwise(a1, (void *)v6);
      goto LABEL_22;
    case 3:
      uint64_t v18 = *(void **)(v6 + 80);
      long long v19 = (void *)v18[9];
      uint64_t v20 = v19[10];
      if (v20) {
        *(void *)(v20 + 64) = v18;
      }
      v18[9] = v20;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v18);
      v18[8] = v19;
      v19[10] = v18;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v19);
      v19[8] = v6;
      *(void *)(v6 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v19;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((void *)v6);
      goto LABEL_21;
    case 4:
LABEL_21:
      uint64_t v17 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateCounterClockwise(a1, (void *)v6);
LABEL_22:
      *(unsigned char *)(v6 + 56) = 0;
      *((unsigned char *)v17 + 56) = 1;
      uint64_t v6 = (uint64_t)v17;
      break;
    default:
      break;
  }
  if (ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::HasDoubleRed(v6, a5))
  {
    uint64_t v21 = *(void *)(v6 + 64);
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 72);
      uint64_t v23 = v22;
      if (v22 == v6) {
        uint64_t v23 = *(void *)(v21 + 80);
      }
      if (v23 && !*(unsigned char *)(v23 + 56))
      {
        *(unsigned char *)(v21 + 56) = 0;
        uint64_t v24 = *(void *)(v21 + 80);
        if (v22) {
          *(unsigned char *)(v22 + 56) = 1;
        }
        if (v24) {
          *(unsigned char *)(v24 + 56) = 1;
        }
        *a5 = 0;
      }
    }
  }
  return v6;
}

uint64_t ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::HasDoubleRed(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  *a2 = 0;
  if (*(unsigned char *)(a1 + 56) != 1)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3 && !*(unsigned char *)(v3 + 56))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if (v4 && *(void *)(v4 + 72) == a1) {
        int v5 = 1;
      }
      else {
        int v5 = 3;
      }
      goto LABEL_15;
    }
    uint64_t v2 = *(void *)(a1 + 80);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 56)) {
        return 0;
      }
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6 && *(void *)(v6 + 72) == a1) {
        int v5 = 2;
      }
      else {
        int v5 = 4;
      }
LABEL_15:
      *a2 = v5;
      return 1;
    }
  }
  return v2;
}

void *ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(void *result)
{
  uint64_t v1 = result[9];
  if (v1) {
    unint64_t v2 = *(void *)(v1 + 40);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = result[10];
  if (v3) {
    unint64_t v4 = *(void *)(v3 + 40);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2 <= v4) {
    unint64_t v2 = v4;
  }
  if (v2 <= result[2]) {
    unint64_t v2 = result[2];
  }
  result[5] = v2;
  if (v1)
  {
    unint64_t v5 = *(void *)(v1 + 48);
    if (v3)
    {
LABEL_13:
      unint64_t v6 = *(void *)(v3 + 48);
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v5 = -1;
    if (v3) {
      goto LABEL_13;
    }
  }
  unint64_t v6 = -1;
LABEL_16:
  if (v6 < v5) {
    unint64_t v5 = v6;
  }
  if (result[1] < v5) {
    unint64_t v5 = result[1];
  }
  result[6] = v5;
  return result;
}

void *ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateClockwise(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[9];
  if (!v3) {
    return a2;
  }
  uint64_t v4 = v3[10];
  if (v4) {
    *(void *)(v4 + 64) = a2;
  }
  a2[9] = v4;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(a2);
  a2[8] = v3;
  v3[10] = a2;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v3);
  return v3;
}

void *ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateCounterClockwise(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[10];
  if (!v3) {
    return a2;
  }
  uint64_t v4 = v3[9];
  if (v4) {
    *(void *)(v4 + 64) = a2;
  }
  a2[10] = v4;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(a2);
  a2[8] = v3;
  v3[9] = a2;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v3);
  return v3;
}

uint64_t std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor* const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_hint_unique_impl<ZinIrTensor* const&>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_2111AEE50(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_hint_unique_impl<ZinIrTensor* const&>(uint64_t **a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = (uint64_t *)operator new(0x28uLL);
  void v6[4] = *a3;
  uint64_t v7 = (uint64_t **)std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__find_equal<ZinIrTensor *>(a1, a2, &v11, &v10, v6 + 4);
  unint64_t v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v7, v6);
  }
  return v6;
}

void sub_2111AEEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor(uint64_t result, void *a2, unint64_t *a3, uint64_t a4)
{
  if (a2)
  {
    unint64_t v6 = a2;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = *a3;
      if (v6[5] < *a3) {
        break;
      }
      unint64_t v9 = a3[1];
      if (v6[6] > v9) {
        break;
      }
      unint64_t v10 = v6[1];
      unint64_t v11 = v6[2];
      BOOL v12 = v10 > v11 || v8 >= v11;
      BOOL v13 = v12 || v8 > v9;
      if (!v13 && v10 < v9)
      {
        uint64_t result = std::function<BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(a4, (uint64_t)v6);
        if (!result) {
          break;
        }
      }
      uint64_t result = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor(v7, v6[9], a3, a4);
      unint64_t v6 = (void *)v6[10];
    }
    while (v6);
  }
  return result;
}

uint64_t std::function<BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__func()
{
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C32EBF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32EBF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(uint64_t a1)
{
  **(unsigned char **)(a1 + 8) = 0;
  return 0;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__func()
{
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C32EC50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32EC50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(uint64_t a1)
{
  **(unsigned char **)(a1 + 8) = 0;
  return 0;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target_type()
{
}

uint64_t ZinParseNMSUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v16) {
      ZinParseNMSUnit(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    CFStringRef v24 = @"InvalidParamSyntax";
    goto LABEL_9;
  }
  int v86 = 0;
  if (ZinParseCFNumberToken<(CFNumberType)3,int>(v6, @"NMSRounds", @"InvalidNMSRounds", &v86, a3, 0))
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinParseNMSUnit(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 3;
  }
  if (v86 <= 0)
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidNMSRounds");
    BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v34) {
      ZinParseNMSUnit(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 3;
  }
  *(void *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v86;
  float v87 = -1.0;
  if (ZinParseCFNumberToken<(CFNumberType)5,float>(v6, @"IoUThreshold", @"InvalidNMSIoUThreshold", &v87, a3, 0))
  {
    BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v26) {
      ZinParseNMSUnit(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    return 3;
  }
  if (v87 < 0.0 || v87 > 1.0)
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidNMSIoUThreshold");
    BOOL v50 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v50) {
      ZinParseNMSUnit(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    return 3;
  }
  *(float *)(a2 + 88) = v87;
  if (ZinParseBooleanToken(v6, @"PerClassSuppression", (BOOL *)(a2 + 92)))
  {
    BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v42) {
      ZinParseNMSUnit(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    return 3;
  }
  if (ZinParseBooleanToken(v6, @"ReturnPerClassResults", (BOOL *)(a2 + 93)))
  {
    BOOL v58 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v58) {
      ZinParseNMSUnit(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    return 3;
  }
  if (*(unsigned char *)(a2 + 93) && !*(unsigned char *)(a2 + 92))
  {
    BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v66) {
      ZinParseNMSUnit(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    CFStringRef v24 = @"InvalidNMSReturnMode";
LABEL_9:
    ZinIrUnitStatus::SetError(a3, v24);
    return 3;
  }
  CFStringRef v74 = (const __CFString *)CFDictionaryGetValue(v6, @"Type");
  if (v74 && (v75 = v74, CFTypeID v76 = CFGetTypeID(v74), v76 == CFStringGetTypeID()))
  {
    int v77 = CFStringToZinIrNMSType(v75);
    *(_DWORD *)(a2 + 96) = v77;
    if (v77 == 3)
    {
      ZinIrUnitStatus::SetError(a3, @"InvalidNMSType");
      BOOL v78 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v78) {
        ZinParseNMSUnit(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      return 3;
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Missing NMS type, use kIndices by default\n", buf, 2u);
    }
    uint64_t result = 0;
    *(_DWORD *)(a2 + 96) = 0;
  }
  return result;
}

void ZinParseNMSUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid NMS Threshold specified.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "NMS can only return per-class results if per-class suppression is enabled.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unrecognized NMS output type\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing NMS parameter: ReturnPerClassResults \n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing NMS parameter: PerClassSuppression \n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing NMS IoU Threshold\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "NMSRounds must be strictly greater than 0.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing NMS parameter: NMSRounds \n", a5, a6, a7, a8, 0);
}

uint64_t ZinNEAtoms::ConvAtom::IsFusableToDequant(ZinNEAtoms::ConvAtom *this, const ZinConvLayer *a2, const ZinDeQuantLayer *a3, const ZinIrHalParameters *a4)
{
  uint64_t v6 = *((void *)this + 17);
  if (ZinKernelDescriptor::HasPadding((ZinKernelDescriptor *)(v6 + 176)))
  {
    int v7 = *(_DWORD *)(v6 + 376);
    if ((v7 & 0xFFFFFFFD) != 1)
    {
      int v15 = 2;
      uint64_t v11 = &v15;
      goto LABEL_12;
    }
    BOOL v8 = (_DWORD *)*((void *)a3 + 183);
    uint64_t v9 = (_DWORD *)*((void *)a3 + 184);
    if (v8 != v9)
    {
      while (*v8 != 9)
      {
        if (++v8 == v9)
        {
          BOOL v8 = v9;
          break;
        }
      }
    }
    unsigned int v10 = ZinDeQuantLayer::HasZeroPoint(a2);
    if (v7 == 1 && v10 && v8 == v9)
    {
      int v14 = 7;
      uint64_t v11 = &v14;
LABEL_12:
      ZinQuantizationLog::Log((uint64_t)a2, v11);
      return 0;
    }
    if (v7 == 3 && ZinDeQuantLayer::HasZeroPoint(a2))
    {
      int v13 = 2;
      uint64_t v11 = &v13;
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t ZinNEAtoms::DeQuantAtom::IsFusableWithInputRelu(ZinNEAtoms::DeQuantAtom *this, const ZinIrOpLayer *a2)
{
  if (!this) {
    return 1;
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) != 104
    || (ZinDeQuantLayer::HasZeroPoint(this) & 1) == 0 && ZinDeQuantLayer::GetScalarScale(this) >= 0.0)
  {
    return 1;
  }
  int v4 = 10;
  ZinQuantizationLog::Log((uint64_t)this, &v4);
  return 0;
}

uint64_t ZinNEAtoms::DeQuantAtom::IsFusableAsGOC(uint64_t **a1, unsigned int a2, uint64_t a3, ZinNEAtoms::ConvAtom *this, char **a5, uint64_t a6, int a7, ZinDeQuantLayer *a8, int a9)
{
  if (*a1 == a1[1]) {
    return 1;
  }
  if (a9 == 89)
  {
    if (ZinDeQuantLayer::IsPerCout((ZinDeQuantLayer *)**a1)) {
      goto LABEL_4;
    }
    uint64_t v19 = *((void *)this + 8);
    if (*(_DWORD *)(v19 + 8) != 1) {
      goto LABEL_87;
    }
    unsigned int v20 = *(_DWORD *)(v19 + 104);
    if (v20 > 0xE) {
      ZinAssertImpl("Code never reaches here");
    }
    if (((1 << v20) & 0x6FF3) == 0 || !ZinDeQuantLayer::HasScale((ZinDeQuantLayer *)**a1))
    {
      int v56 = a7;
      int v26 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      CFStringRef v74 = 0;
LABEL_26:
      if (*((char *)this + 47) < 0) {
        std::string::__init_copy_ctor_external(&v71, *((const std::string::value_type **)this + 3), *((void *)this + 4));
      }
      else {
        std::string v71 = *(std::string *)((unsigned char *)this + 1);
      }
      goto LABEL_30;
    }
    uint64_t v21 = *(void *)(*(void *)(**a1 + 136) + 568);
    ZinIrVector::GetValuesAsVector<float>(v21, *(void *)(v21 + 56), 1, (uint64_t)&__p);
    if (__p != v69)
    {
      uint64_t v22 = (float *)__p;
      while (*v22 >= 0.0)
      {
        if (++v22 == v69) {
          goto LABEL_14;
        }
      }
      uint64_t v54 = **a1;
      LODWORD(v72) = 4;
      ZinQuantizationLog::Log(v54, (int *)&v72);
      if (__p)
      {
        uint64_t v69 = __p;
        operator delete(__p);
      }
      return 0;
    }
LABEL_14:
    if (__p)
    {
      uint64_t v69 = __p;
      operator delete(__p);
    }
  }
  if (this && a9 == 85)
  {
    if (!*(_DWORD *)(*((void *)this + 8) + 8))
    {
      if (!ZinNEAtoms::ConvAtom::IsFusableToDequant(this, (const ZinConvLayer *)**a1, a8, this)) {
        return 0;
      }
      uint64_t v58 = a3;
      uint64_t v60 = a5;
      ZinIrOpLayer::GetInputTensorDimensions(this, &__p);
      uint64_t v23 = (ZinMirConvUtils *)*((void *)__p + 1);
      uint64_t v69 = __p;
      operator delete(__p);
      CFStringRef v24 = *(ZinMirConvUtils **)((*(uint64_t (**)(ZinNEAtoms::ConvAtom *, void, void))(*(void *)this + 32))(this, 0, 0)+ 56);
      int v25 = (ZinMirConvUtils *)(*(uint64_t (**)(ZinNEAtoms::ConvAtom *))(*(void *)this + 88))(this);
      if (ZinDeQuantLayer::IsPerCout((ZinDeQuantLayer *)**a1)
        && !ZinMirConvUtils::IsChannelwiseConvolution(v23, v24, v25))
      {
LABEL_4:
        uint64_t v17 = **a1;
        LODWORD(__p) = 1;
        ZinQuantizationLog::Log(v17, (int *)&__p);
        return 0;
      }
      int v56 = a7;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      int v26 = 1;
      CFStringRef v74 = 0;
      a3 = v58;
      a5 = v60;
      goto LABEL_26;
    }
LABEL_87:
    ZinAssertImpl("Inconsistent Opcode");
  }
  int v56 = a7;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  CFStringRef v74 = 0;
  if (this)
  {
    int v26 = 0;
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(&v71, &byte_211F4AA5D);
  int v26 = 0;
LABEL_30:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(**a1 + 24), (const void **)&v71.__r_.__value_.__l.__data_, (uint64_t)&v65);
  std::string::basic_string[abi:ne180100]<0>(&v62, "dequant_to_goc");
  uint64_t v27 = std::string::append(&v62, "_xfm", 4uLL);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  int64_t v64 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v63 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    uint64_t v29 = v63;
  }
  else {
    uint64_t v29 = (void **)v63[0];
  }
  if (v64 >= 0) {
    std::string::size_type v30 = HIBYTE(v64);
  }
  else {
    std::string::size_type v30 = (std::string::size_type)v63[1];
  }
  uint64_t v31 = std::string::append(&v65, (const std::string::value_type *)v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  std::string::size_type v67 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)BOOL v66 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&__p, v66);
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  uint64_t v57 = a6;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  uint64_t v59 = a3;
  uint64_t v61 = a5;
  BOOL v34 = (ZinPatternUtils **)*a1;
  uint64_t v33 = (ZinPatternUtils **)a1[1];
  if (*a1 == (uint64_t *)v33)
  {
    uint64_t v39 = (uint64_t)v73;
  }
  else
  {
    do
    {
      uint64_t v35 = *v34;
      if (v26) {
        uint64_t v36 = ZinPatternUtils::ConvertDequantToPostConvGOC(v35, this, (const ZinConvLayer *)&__p, 0);
      }
      else {
        uint64_t v36 = ZinPatternUtils::ConvertDequantToGOC((uint64_t)v35);
      }
      uint64_t v37 = v36;
      uint64_t v38 = v73;
      if (v73 >= v74)
      {
        uint64_t v40 = (v73 - v72) >> 3;
        if ((unint64_t)(v40 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v41 = (v74 - v72) >> 2;
        if (v41 <= v40 + 1) {
          unint64_t v41 = v40 + 1;
        }
        if ((unint64_t)(v74 - v72) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v74, v42);
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v44 = &v43[8 * v40];
        *(void *)uint64_t v44 = v37;
        uint64_t v39 = (uint64_t)(v44 + 8);
        uint64_t v46 = v72;
        uint64_t v45 = v73;
        if (v73 != v72)
        {
          do
          {
            uint64_t v47 = *((void *)v45 - 1);
            v45 -= 8;
            *((void *)v44 - 1) = v47;
            v44 -= 8;
          }
          while (v45 != v46);
          uint64_t v45 = v72;
        }
        uint64_t v72 = v44;
        uint64_t v73 = (char *)v39;
        CFStringRef v74 = &v43[8 * v42];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(void *)uint64_t v73 = v36;
        uint64_t v39 = (uint64_t)(v38 + 8);
      }
      uint64_t v73 = (char *)v39;
      ++v34;
    }
    while (v34 != v33);
  }
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v72, v39, *v61, v61[1], (v61[1] - *v61) >> 3);
  uint64_t v48 = ZinMergeGOCSequence(v59, (uint64_t)&__p, (uint64_t)&v72);
  unsigned int v49 = a2;
  uint64_t v50 = (uint64_t)v48;
  uint64_t v51 = (ZinDeQuantLayer **)*a1;
  if ((char *)a1[1] - (char *)*a1 == 8 && a2 == 16)
  {
    uint64_t v52 = *v51;
    if (*(_DWORD *)(*(void *)(**((void **)*v51 + 11) + 64) + 8) == 28)
    {
      if (!*(unsigned char *)(*((void *)v52 + 2) + 1056))
      {
LABEL_75:
        uint64_t v18 = 0;
        goto LABEL_76;
      }
      unsigned int v49 = *(_DWORD *)((*(uint64_t (**)(ZinDeQuantLayer *, void, void))(*(void *)v52 + 32))(v52, 0, 0)+ 88);
    }
  }
  if (!ZinNEAtoms::GOCAtom::IsFusable(v50, this, v57, v56, v49, a9, (uint64_t)a8))
  {
    uint64_t v53 = **a1;
    LODWORD(v66[0]) = 3;
    ZinQuantizationLog::Log(v53, (int *)v66);
    goto LABEL_75;
  }
  uint64_t v18 = 1;
LABEL_76:
  std::string __p = &unk_26C34DA98;
  if (v70 < 0) {
    operator delete(v69);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  return v18;
}

void sub_2111AFF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEAtoms::GOCAtom::GetMatchStatus(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8)))
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  else
  {
    return ZinPatternUtils::FusionStatus(1u, a1, 1);
  }
}

std::string *ZinNEAtoms::NEConvAtom::NEConvAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v7[0] = &unk_26C381E78;
  v7[1] = a3;
  void v7[3] = v7;
  ZinPatternAtom::ZinPatternAtom(this, (long long *)&__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2111B0168(_Unwind_Exception *exception_object)
{
}

std::string *ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v7[0] = &unk_26C382768;
  v7[1] = a3;
  void v7[3] = v7;
  ZinPatternAtom::ZinPatternAtom(this, (long long *)&__p);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2111B0264(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3821E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3820E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382500;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3824A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381E20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381F28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C32D548;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3823F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 88, *(_DWORD *)(InputTensor + 88)))
  {
    return ZinNEAtoms::GOCAtom::GetMatchStatus(a2);
  }
  else
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(void **)(a1 + 8), 88);

  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 93, *(_DWORD *)(InputTensor + 88)))
  {
    return ZinNEAtoms::GOCAtom::GetMatchStatus(a2);
  }
  else
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
}

uint64_t std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381ED0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382190;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 90, *(_DWORD *)(InputTensor + 88)))
  {
    unint64_t v5 = *(void **)(a2 + 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "round");
    uint64_t SingleMatch = ZinPattern::State::GetSingleMatch(v5, (unsigned __int8 *)__p);
    uint64_t v7 = SingleMatch;
    if (v11 < 0)
    {
      operator delete(__p[0]);
      if (v7) {
        goto LABEL_4;
      }
    }
    else if (SingleMatch)
    {
LABEL_4:
      int v8 = ZinIrKernel::HasBias(*(ZinIrKernel **)(*(void *)(a2 + 8) + 136)) ^ 1;
      return ZinPatternUtils::FusionStatus(v8, a2, v8);
    }
    int v8 = 1;
    return ZinPatternUtils::FusionStatus(v8, a2, v8);
  }

  return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

void sub_2111B0FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381F80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(void **)(a1 + 8), 90);

  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3823A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3826B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3825B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3822F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C3827C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C381E78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C381E78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (ZinPatternUtils::IsFusable(*(void **)(a1 + 8), *(void *)(a2 + 8))
    && (uint64_t v3 = *(void **)(a2 + 8), *(_DWORD *)(v3[8] + 8) == 85)
    && v3[54])
  {
    (*(void (**)(void **__return_ptr, void))(*v3 + 312))(&__p, *(void *)(a2 + 8));
    int v4 = v10;
    while (v4 != __p)
    {
      uint64_t v6 = *((void *)v4 - 1);
      v4 -= 8;
      uint64_t v5 = v6;
      if (v6) {
        goto LABEL_12;
      }
    }
    uint64_t v5 = *((void *)__p - 1);
LABEL_12:
    uint64_t v8 = ZinPatternUtils::FusionStatus(v5 == v3[54], a2, 1);
    if (__p)
    {
      unsigned int v10 = (char *)__p;
      operator delete(__p);
    }
    return v8;
  }
  else
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
}

void sub_2111B1860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C382768;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (ZinPatternUtils::IsFusable(*(void **)(a1 + 8), *(void *)(a2 + 8)))
  {
    uint64_t v3 = *(void **)(a2 + 8);
    int v4 = *(_DWORD *)(v3[8] + 8);
    if (v4 == 85 || v4 == 92)
    {
      (*(void (**)(void **__return_ptr, void))(*v3 + 312))(&__p, *(void *)(a2 + 8));
      uint64_t v5 = v34;
      uint64_t v6 = (uint64_t *)__p;
      if (__p != v34)
      {
        uint64_t v6 = (uint64_t *)__p;
        while (!*v6)
        {
          if (++v6 == (uint64_t *)v34)
          {
            uint64_t v6 = (uint64_t *)v34;
            break;
          }
        }
      }
      uint64_t v7 = *v6;
      while (v5 != __p)
      {
        uint64_t v9 = *((void *)v5 - 1);
        v5 -= 8;
        uint64_t v8 = v9;
        if (v9) {
          goto LABEL_17;
        }
      }
      uint64_t v8 = *((void *)__p - 1);
LABEL_17:
      uint64_t v11 = v3[48];
      if (v7 != v11 && v7 != v3[49] || v8 != v11 && v8 != v3[49])
      {
        uint64_t v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
LABEL_22:
        uint64_t v13 = v12;
LABEL_23:
        if (__p)
        {
          BOOL v34 = (char *)__p;
          operator delete(__p);
        }
        return v13;
      }
      int v14 = *(void **)(a2 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v30, "neconv");
      uint64_t SingleMatch = (void *)ZinPattern::State::GetSingleMatch(v14, (unsigned __int8 *)&v30);
      if (v32 < 0) {
        operator delete(v30);
      }
      if (!SingleMatch[54])
      {
        uint64_t v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
        goto LABEL_22;
      }
      (*(void (**)(void **__return_ptr, void *))(*SingleMatch + 312))(&v30, SingleMatch);
      BOOL v16 = v31;
      while (v16 != v30)
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        uint64_t v17 = v18;
        if (v18) {
          goto LABEL_35;
        }
      }
      uint64_t v17 = *((void *)v30 - 1);
LABEL_35:
      if (v17 != SingleMatch[54]) {
        ZinAssertImpl("producer's last layer must be Conv to fuse with consumer\n");
      }
      Hal = ZinIrTarget::GetHal(*(uint64_t **)(*(void *)(a2 + 8) + 16), *(ZinIrTarget **)(*(void *)(*(void *)(a2 + 8) + 16) + 160));
      uint64_t v20 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
      uint64_t v23 = v3 + 48;
      uint64_t v21 = (ZinIrKernel **)v3[48];
      uint64_t v22 = v23[1];
      if (!(*(unsigned int (**)(void *))(*SingleMatch + 120))(SingleMatch))
      {
        if (v21)
        {
          if ((*((unsigned int (**)(ZinIrKernel **))*v21 + 15))(v21)) {
            goto LABEL_59;
          }
          goto LABEL_46;
        }
LABEL_58:
        uint64_t v26 = ZinPatternUtils::FusionStatus(1u, a2, 1);
        goto LABEL_60;
      }
      if (*(unsigned char *)(v20 + 1208))
      {
        if (*(unsigned char *)(v20 + 1209)) {
          BOOL v24 = v22 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24) {
          goto LABEL_53;
        }
      }
      else if (!v22)
      {
        goto LABEL_53;
      }
      if (*(_DWORD *)(v22 + 192) > 1u) {
        goto LABEL_59;
      }
LABEL_53:
      if (v21)
      {
        uint64_t v27 = v21[17];
        if (*((void *)v27 + 73) || *((void *)v27 + 77) || ZinGOCLayer::IsPerCout(v21)) {
          goto LABEL_59;
        }
LABEL_46:
        int v25 = (void *)SingleMatch[54];
        if ((*(uint64_t (**)(void *, ZinIrKernel **))(*v25 + 272))(v25, v21))
        {
          uint64_t v29 = 0;
          int v28 = *(_DWORD *)((*(uint64_t (**)(void *, void, void))(*v25 + 32))(v25, 0, 0) + 88);
          if (GetL2FmtFromNEFusePattern(v25, 0, (unsigned int *)&v28, (int *)&v29 + 1)
            || (int v28 = 85,
                GetKernelCfgKernelFmtFromNEFusePatternOps(v25, 0, 0, (unsigned int *)&v29 + 1, (int)v21 + 24, &v28, (ZinGOCLayer *)v21, v20, (int *)&v29))|| !MergeScaleBiasNEHWLimits((uint64_t)v25, (uint64_t)v21, v29, SHIDWORD(v29), *((_DWORD *)v21[2] + 20)))
          {
            uint64_t v26 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
            goto LABEL_60;
          }
          goto LABEL_58;
        }
LABEL_59:
        uint64_t v26 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
LABEL_60:
        uint64_t v13 = v26;
        if (v30)
        {
          uint64_t v31 = (char *)v30;
          operator delete(v30);
        }
        goto LABEL_23;
      }
      goto LABEL_58;
    }
  }

  return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

void sub_2111B1D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C382088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t MirOpt::CollapseSymmetricTranspose(MirOpt *a1, ZinIrControlFlowGraph **a2, char a3)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  char v99 = a3;
  char v98 = 0;
  char v97 = 0;
  if (ZinIrOpt::ReverseCSE(a1, (uint64_t)a2, &v98, 2)) {
    ZinAssertImpl("PreOps failed");
  }
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  v94[0] = 0;
  v94[1] = 0;
  int v93 = v94;
  std::string::size_type v118 = 0;
  uint64_t v5 = operator new(0x28uLL);
  *uint64_t v5 = &unk_26C3301E8;
  v5[1] = a2;
  v5[2] = v95;
  void v5[3] = &v93;
  v5[4] = &v99;
  std::string::size_type v118 = v5;
  int v6 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v117, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v117);
  if (v6) {
    ZinAssertImpl("Collapse symmetric transpose failed");
  }
  if (MirOpt::CSE(a1, *a2, (const ZinIrHalParameters *)&v97, v7)) {
    ZinAssertImpl("CSE must be successful");
  }
  uint64_t v114 = 0;
  int v115 = 0;
  BOOL v116 = 0;
  int v111 = 0;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v8 = v93;
  if (v93 != v94)
  {
    do
    {
      uint64_t v9 = (void *)v8[4];
      unsigned int v10 = (uint64_t *)v9[11];
      uint64_t v11 = (uint64_t *)v9[12];
      while (v10 != v11)
      {
        uint64_t v12 = *v10;
        if (*(_DWORD *)(*(void *)(*v10 + 64) + 8) == 37)
        {
          uint64_t v14 = v12 + 88;
          uint64_t v13 = *(ZinIrOpLayer ***)(v12 + 88);
          if (*(void *)(v14 + 8) - (void)v13 == 8)
          {
            int v15 = *v13;
            if (*(_DWORD *)(*((void *)*v13 + 8) + 8) == 35 && *((void *)v15 + 15) - *((void *)v15 + 14) == 8)
            {
              uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v15, 0);
              if (!ZinIrTensor::IsLiveInLiveStateOrConstTensor(InputTensor))
              {
                uint64_t v17 = *(ZinIrOpLayer **)(ZinIrOpLayer::GetInputTensor(v15, 0) + 96);
                std::string __p = 0;
                int v109 = 0;
                uint64_t v110 = 0;
                char IsNoOp = ZinIrOpLayer::IsNoOp(v17, (uint64_t *)&__p);
                if (__p)
                {
                  int v109 = __p;
                  operator delete(__p);
                }
                if ((IsNoOp & 1) == 0)
                {
                  uint64_t v19 = v115;
                  if (v115 >= (ZinIrOpLayer **)v116)
                  {
                    uint64_t v21 = ((char *)v115 - v114) >> 3;
                    if ((unint64_t)(v21 + 1) >> 61) {
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v22 = (v116 - v114) >> 2;
                    if (v22 <= v21 + 1) {
                      unint64_t v22 = v21 + 1;
                    }
                    if ((unint64_t)(v116 - v114) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v23 = v22;
                    }
                    if (v23) {
                      BOOL v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v116, v23);
                    }
                    else {
                      BOOL v24 = 0;
                    }
                    int v25 = (ZinIrOpLayer **)&v24[8 * v21];
                    *int v25 = v15;
                    uint64_t v20 = v25 + 1;
                    uint64_t v27 = v114;
                    uint64_t v26 = (char *)v115;
                    if (v115 != (ZinIrOpLayer **)v114)
                    {
                      do
                      {
                        int v28 = (ZinIrOpLayer *)*((void *)v26 - 1);
                        v26 -= 8;
                        *--int v25 = v28;
                      }
                      while (v26 != v27);
                      uint64_t v26 = v114;
                    }
                    uint64_t v114 = (char *)v25;
                    int v115 = v20;
                    BOOL v116 = &v24[8 * v23];
                    if (v26) {
                      operator delete(v26);
                    }
                  }
                  else
                  {
                    std::string *v115 = v15;
                    uint64_t v20 = v19 + 1;
                  }
                  int v115 = v20;
                }
              }
            }
          }
        }
        ++v10;
      }
      uint64_t v29 = (uint64_t *)v9[14];
      std::string::size_type v30 = (uint64_t *)v9[15];
      while (v29 != v30)
      {
        uint64_t v31 = *v29;
        if (*(_DWORD *)(*(void *)(*v29 + 64) + 8) == 37)
        {
          uint64_t v33 = v31 + 112;
          uint64_t v32 = *(void *)(v31 + 112);
          if (*(void *)(v33 + 8) - v32 == 8)
          {
            BOOL v34 = *(void **)v32;
            if (*(_DWORD *)(*(void *)(*(void *)v32 + 64) + 8) == 35 && v34[12] - v34[11] == 8)
            {
              uint64_t v35 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*v34 + 32))(v34, 0, 0);
              ZinIrTensor::GetAllChildrenInTree(v35, (uint64_t *)&__p);
              uint64_t v37 = (char *)__p;
              uint64_t v36 = (char *)v109;
              if (__p == v109) {
                goto LABEL_49;
              }
              do
              {
                uint64_t v38 = *(ZinIrTensor **)v37;
                uint64_t v39 = (std::__shared_weak_count *)*((void *)v37 + 1);
                if (v39) {
                  atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                BOOL HasFlexDimensionOrderHint = ZinIrTensor::HasFlexDimensionOrderHint(v38);
                if (v39) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                }
                v37 += 16;
              }
              while (v37 != v36 && HasFlexDimensionOrderHint);
              if (HasFlexDimensionOrderHint)
              {
LABEL_49:
                unint64_t v42 = v112;
                if (v112 >= v113)
                {
                  uint64_t v44 = (v112 - v111) >> 3;
                  if ((unint64_t)(v44 + 1) >> 61) {
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v45 = (v113 - v111) >> 2;
                  if (v45 <= v44 + 1) {
                    unint64_t v45 = v44 + 1;
                  }
                  if ((unint64_t)(v113 - v111) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v45;
                  }
                  if (v46) {
                    uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v46);
                  }
                  else {
                    uint64_t v47 = 0;
                  }
                  uint64_t v48 = &v47[8 * v44];
                  *(void *)uint64_t v48 = v34;
                  uint64_t v43 = v48 + 8;
                  uint64_t v50 = v111;
                  unsigned int v49 = v112;
                  if (v112 != v111)
                  {
                    do
                    {
                      uint64_t v51 = *((void *)v49 - 1);
                      v49 -= 8;
                      *((void *)v48 - 1) = v51;
                      v48 -= 8;
                    }
                    while (v49 != v50);
                    unsigned int v49 = v111;
                  }
                  int v111 = v48;
                  uint64_t v112 = v43;
                  int v113 = &v47[8 * v46];
                  if (v49) {
                    operator delete(v49);
                  }
                }
                else
                {
                  *(void *)uint64_t v112 = v34;
                  uint64_t v43 = v42 + 8;
                }
                uint64_t v112 = v43;
              }
              p_p = &__p;
              std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&p_p);
            }
          }
        }
        ++v29;
      }
      uint64_t v52 = (void *)v8[1];
      if (v52)
      {
        do
        {
          uint64_t v53 = (void **)v52;
          uint64_t v52 = (void *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          uint64_t v53 = (void **)v8[2];
          BOOL v80 = *v53 == v8;
          uint64_t v8 = v53;
        }
        while (!v80);
      }
      uint64_t v8 = v53;
    }
    while (v53 != v94);
    if (v111 != v112)
    {
      __format = "Reshape must have 1-1 relation with pre-transpose";
      uint64_t v54 = *(void *)v111;
      uint64_t v55 = **(ZinIrOpLayer ***)(*(void *)v111 + 88);
      if (*((void *)v55 + 15) - *((void *)v55 + 14) == 8)
      {
        int v56 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(**(ZinIrOpLayer ***)(*(void *)v111 + 88), 0);
        if (!ZinIrTensor::HasFlexDimensionOrderHint(v56))
        {
          uint64_t v57 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v55, 0);
          ZinIrTensor::GetDimensionOrderHint(v57, (uint64_t)v100);
          if (*(char *)(v54 + 47) >= 0) {
            size_t v58 = *(unsigned __int8 *)(v54 + 47);
          }
          else {
            size_t v58 = *(void *)(v54 + 32);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v102, v58 + 1);
          if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v59 = &v102;
          }
          else {
            uint64_t v59 = (std::string *)v102.__r_.__value_.__r.__words[0];
          }
          if (v58)
          {
            if (*(char *)(v54 + 47) >= 0) {
              uint64_t v60 = (const void *)(v54 + 24);
            }
            else {
              uint64_t v60 = *(const void **)(v54 + 24);
            }
            memmove(v59, v60, v58);
          }
          *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v58) = 95;
          std::string::basic_string[abi:ne180100]<0>(&v107, "cancel_tr_postop");
          uint64_t v61 = std::string::append(&v107, "_xfm", 4uLL);
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          int64_t v120 = v61->__r_.__value_.__r.__words[2];
          long long v119 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if (v120 >= 0) {
            uint64_t v63 = (const std::string::value_type *)&v119;
          }
          else {
            uint64_t v63 = (const std::string::value_type *)v119;
          }
          if (v120 >= 0) {
            std::string::size_type v64 = HIBYTE(v120);
          }
          else {
            std::string::size_type v64 = *((void *)&v119 + 1);
          }
          std::string v65 = std::string::append(&v102, v63, v64);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          std::string::size_type v105 = v65->__r_.__value_.__r.__words[2];
          long long v104 = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v104);
          if (SHIBYTE(v105) < 0) {
            operator delete((void *)v104);
          }
          if (SHIBYTE(v120) < 0) {
            operator delete((void *)v119);
          }
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          uint64_t v67 = *(void *)(v54 + 16);
          ZinIrOpLayer::GetInputTensor(v55, 0);
          ZinIrOpLayer::GetInputTensor(v55, 0);
          (*(void (**)(uint64_t, void, void))(*(void *)v54 + 32))(v54, 0, 0);
          ZinBuilder::CreateReshape(v67, (uint64_t)&__p);
        }
        __format = "Dimorder must be set";
      }
      ZinAssertImpl(__format);
    }
  }
  if (v114 != (char *)v115)
  {
    uint64_t v68 = *(void **)v114;
    uint64_t v69 = **(ZinReshapeLayer ***)(*(void *)v114 + 112);
    char v70 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**(void **)v114 + 32))(*(void *)v114, 0, 0);
    ZinIrTensor::GetDimensionOrderHint(v70, (uint64_t)&__p);
    if (DimensionOrderHint::IsSet((DimensionOrderHint *)&__p))
    {
      std::string v71 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*v68 + 32))(v68, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v71, (uint64_t)&v104);
    }
    else
    {
      uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo((ZinReshapeLayer *)v68);
      std::string::size_type v105 = 0;
      long long v104 = 0uLL;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v104, *(const void **)(ReshapeInfo + 16), *(void *)(ReshapeInfo + 24), (uint64_t)(*(void *)(ReshapeInfo + 24) - *(void *)(ReshapeInfo + 16)) >> 2);
      int v106 = *(_DWORD *)(ReshapeInfo + 40);
    }
    if (__p)
    {
      int v109 = __p;
      operator delete(__p);
    }
    uint64_t v73 = ZinReshapeLayer::GetReshapeInfo(v69);
    DimensionOrderHint::TransposeDimensionOrder((const void **)&v104, v73 + 16, (uint64_t)&v102);
    CFStringRef v74 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v69 + 32))(v69, 0, 0);
    if (ZinIrTensor::HasFlexDimensionOrderHint(v74))
    {
LABEL_123:
      if (*((char *)v68 + 47) >= 0) {
        size_t v81 = *((unsigned __int8 *)v68 + 47);
      }
      else {
        size_t v81 = v68[4];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v107, v81 + 1);
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v107;
      }
      else {
        uint64_t v82 = (std::string *)v107.__r_.__value_.__r.__words[0];
      }
      if (v81)
      {
        if (*((char *)v68 + 47) >= 0) {
          uint64_t v83 = v68 + 3;
        }
        else {
          uint64_t v83 = (const void *)v68[3];
        }
        memmove(v82, v83, v81);
      }
      *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v81) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v101, "cancel_tr_postop");
      uint64_t v84 = std::string::append(&v101, "_xfm", 4uLL);
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      int64_t v122 = v84->__r_.__value_.__r.__words[2];
      long long v121 = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (v122 >= 0) {
        int v86 = (const std::string::value_type *)&v121;
      }
      else {
        int v86 = (const std::string::value_type *)v121;
      }
      if (v122 >= 0) {
        std::string::size_type v87 = HIBYTE(v122);
      }
      else {
        std::string::size_type v87 = *((void *)&v121 + 1);
      }
      int v88 = std::string::append(&v107, v86, v87);
      long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      int64_t v120 = v88->__r_.__value_.__r.__words[2];
      long long v119 = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v119);
      if (SHIBYTE(v120) < 0) {
        operator delete((void *)v119);
      }
      if (SHIBYTE(v122) < 0) {
        operator delete((void *)v121);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      uint64_t v90 = v68[2];
      ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v68, 0);
      ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v68, 0);
      (*(void (**)(ZinReshapeLayer *, void, void))(*(void *)v69 + 32))(v69, 0, 0);
      ZinBuilder::CreateReshape(v90, (uint64_t)&__p);
    }
    CFStringRef v75 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v69 + 32))(v69, 0, 0);
    ZinIrTensor::GetDimensionOrderHint(v75, (uint64_t)&__p);
    CFTypeID v76 = (int *)v102.__r_.__value_.__r.__words[0];
    if ((unsigned char *)v109 - (unsigned char *)__p == v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0])
    {
      if (__p == v109)
      {
        BOOL v79 = 1;
        if (!__p)
        {
LABEL_122:
          if (!v79) {
            ZinAssertImpl("New reshape dimension order must match post-transpose");
          }
          goto LABEL_123;
        }
LABEL_121:
        int v109 = __p;
        operator delete(__p);
        goto LABEL_122;
      }
      int v77 = (char *)__p + 4;
      do
      {
        int v78 = *v76++;
        BOOL v79 = *((_DWORD *)v77 - 1) == v78;
        BOOL v80 = *((_DWORD *)v77 - 1) != v78 || v77 == v109;
        v77 += 4;
      }
      while (!v80);
    }
    else
    {
      BOOL v79 = 0;
    }
    if (!__p) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    int v115 = (ZinIrOpLayer **)v114;
    operator delete(v114);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v93, v94[0]);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v95);
  return 0;
}

void sub_2111B2D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((void *)(v4 - 192));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, (void *)v8);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C3301E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3301E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v188 = v5;
  if (!ZinIrOpLayer::IsANELayer(v5)) {
    return 0;
  }
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
  unint64_t Interleave = ZinIrTensor::GetInterleave(v6);
  if (v8)
  {
    if (Interleave >= 2) {
      goto LABEL_10;
    }
    return 0;
  }
  uint64_t v9 = *(ZinIrTensor::MirInfo **)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0)+ 104);
  if (v9 && (*((_DWORD *)v9 + 24) || ZinIrTensor::MirInfo::HasCustomStrides(v9))) {
    return 0;
  }
LABEL_10:
  uint64_t v12 = *(const ZinIrTensor ***)(a1 + 8);
  uint64_t v13 = *(void **)(a1 + 16);
  uint64_t v183 = a1;
  MirOpt::FindSurroundingTransposes(v5, (char **)v199);
  uint64_t v14 = v199[0];
  CFNumberRef v182 = v4;
  if ((void *)((char *)v199[1] - (char *)v199[0]) >= (void *)0x10)
  {
    uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)v199[0]);
    BOOL v16 = (int **)(ReshapeInfo + 16);
    uint64_t v17 = (ZinReshapeLayer **)v199[0];
    uint64_t v18 = (ZinReshapeLayer **)v199[1];
    while (v17 != v18)
    {
      if (!MirOpt::IsMatchingDimensionTranspose(*v17, (uint64_t)v16)) {
        goto LABEL_138;
      }
      ++v17;
    }
    if ((!ZinIrOpLayer::IsANELayer(v188)
       || (*(unsigned int (**)(ZinIrOpLayer *, int **))(*(void *)v188 + 424))(v188, v16))
      && (int)((double)(unint64_t)(((uint64_t)(*((void *)v188 + 15) - *((void *)v188 + 14)) >> 3)
                                        + ((uint64_t)(*((void *)v188 + 12) - *((void *)v188 + 11)) >> 3))
             * 0.5) <= (unint64_t)(((char *)v199[1] - (char *)v199[0]) >> 3))
    {
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v13, &v188))goto LABEL_25; {
      uint64_t v19 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v13, &v188);
      }
      if (!v19) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)buf, (uint64_t)(v19 + 3));
      ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v202, (uint64_t)v16);
      BOOL v20 = ZinIrTransposeInfo::operator==((uint64_t)buf, (uint64_t)v202);
      v202[0] = &unk_26C34C0D0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v202);
      *(void *)buf = &unk_26C34C0D0;
      if ((void)v209)
      {
        *((void *)&v209 + 1) = v209;
        operator delete((void *)v209);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)buf);
      if (!v20)
      {
LABEL_25:
        for (uint64_t i = *((void *)v188 + 11); i != *((void *)v188 + 12); i += 8)
        {
          if (*(_DWORD *)(*(void *)(*(void *)i + 64) + 8) == 37
            && *(void *)(*(void *)i + 120) - *(void *)(*(void *)i + 112) > 8uLL)
          {
            goto LABEL_138;
          }
        }
        if (!ZinIrTransposeUnit::IsCWTranspose(v16))
        {
          unint64_t v22 = v188;
          unint64_t v23 = (void *)*((void *)v188 + 11);
          BOOL v24 = (void *)*((void *)v188 + 12);
          if (v23 == v24)
          {
LABEL_35:
            int v28 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v22 + 32))(v22, 0, 0);
            uint64_t v29 = *v12;
            buf[0] = 0;
            char v211 = 0;
            char IsPipelinable = ZinIrRegAllocUtil::IsPipelinable(v28, v29, (ZinTensorFamilyUtil *)buf);
            std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
            if ((IsPipelinable & 1) == 0)
            {
              for (uint64_t j = *((void *)v188 + 14); j != *((void *)v188 + 15); j += 8)
              {
                if (*(_DWORD *)(*(void *)(*(void *)j + 64) + 8) == 7) {
                  goto LABEL_138;
                }
              }
              if (!ZinIrOpLayer::IsPELayer(v188)
                || !ZinIrTransposeUnit::HasDimension((uint64_t)v16, 3)
                || ((*(void (**)(void **__return_ptr))(*(void *)v188 + 400))(v202),
                    TransposeLayerUtils::GetTransposedDims(v202, (uint64_t)v16, (int64x2_t *)buf),
                    (void)v209 != 1))
              {
                uint64_t v32 = *(int **)(ReshapeInfo + 16);
                uint64_t v33 = *(int **)(ReshapeInfo + 24);
                while (v32 != v33)
                {
                  int v34 = *v32;
                  uint64_t v35 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
                  if (ZinIrTensor::GetDimensionValue(v35, v34) == 1) {
                    goto LABEL_138;
                  }
                  v32 += 2;
                }
                v202[0] = 0;
                v202[1] = 0;
                __p[0] = 0;
                v190[0] = 0;
                v190[1] = 0;
                v191[0] = 0;
                uint64_t v36 = v188;
                uint64_t v37 = (uint64_t *)*((void *)v188 + 11);
                uint64_t v38 = (uint64_t *)*((void *)v188 + 12);
                if (v37 != v38)
                {
                  uint64_t v39 = 0;
                  do
                  {
                    uint64_t v40 = *v37;
                    if (v39 >= __p[0])
                    {
                      uint64_t v41 = (v39 - (char *)v202[0]) >> 3;
                      if ((unint64_t)(v41 + 1) >> 61) {
LABEL_315:
                      }
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      unint64_t v42 = ((char *)__p[0] - (char *)v202[0]) >> 2;
                      if (v42 <= v41 + 1) {
                        unint64_t v42 = v41 + 1;
                      }
                      if ((void *)((char *)__p[0] - (char *)v202[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
                        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v43 = v42;
                      }
                      if (v43) {
                        uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)__p, v43);
                      }
                      else {
                        uint64_t v44 = 0;
                      }
                      unint64_t v45 = &v44[8 * v41];
                      *(void *)unint64_t v45 = v40;
                      uint64_t v39 = v45 + 8;
                      uint64_t v47 = (char *)v202[0];
                      unint64_t v46 = (char *)v202[1];
                      if (v202[1] != v202[0])
                      {
                        do
                        {
                          uint64_t v48 = *((void *)v46 - 1);
                          v46 -= 8;
                          *((void *)v45 - 1) = v48;
                          v45 -= 8;
                        }
                        while (v46 != v47);
                        unint64_t v46 = (char *)v202[0];
                      }
                      v202[0] = v45;
                      v202[1] = v39;
                      __p[0] = &v44[8 * v43];
                      if (v46) {
                        operator delete(v46);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v39 = v40;
                      v39 += 8;
                    }
                    v202[1] = v39;
                    ++v37;
                  }
                  while (v37 != v38);
                  uint64_t v36 = v188;
                }
                unsigned int v49 = (uint64_t *)*((void *)v36 + 14);
                uint64_t v50 = (uint64_t *)*((void *)v36 + 15);
                if (v49 != v50)
                {
                  uint64_t v51 = (char *)v190[1];
                  do
                  {
                    uint64_t v52 = *v49;
                    if ((unint64_t)v51 >= v191[0])
                    {
                      uint64_t v53 = (v51 - (char *)v190[0]) >> 3;
                      if ((unint64_t)(v53 + 1) >> 61) {
                        goto LABEL_315;
                      }
                      unint64_t v54 = (uint64_t)(v191[0] - (unint64_t)v190[0]) >> 2;
                      if (v54 <= v53 + 1) {
                        unint64_t v54 = v53 + 1;
                      }
                      if (v191[0] - (unint64_t)v190[0] >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v55 = v54;
                      }
                      if (v55) {
                        int v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v191, v55);
                      }
                      else {
                        int v56 = 0;
                      }
                      uint64_t v57 = &v56[8 * v53];
                      *(void *)uint64_t v57 = v52;
                      uint64_t v51 = v57 + 8;
                      uint64_t v59 = (char *)v190[0];
                      size_t v58 = (char *)v190[1];
                      if (v190[1] != v190[0])
                      {
                        do
                        {
                          uint64_t v60 = *((void *)v58 - 1);
                          v58 -= 8;
                          *((void *)v57 - 1) = v60;
                          v57 -= 8;
                        }
                        while (v58 != v59);
                        size_t v58 = (char *)v190[0];
                      }
                      v190[0] = v57;
                      v190[1] = v51;
                      v191[0] = &v56[8 * v55];
                      if (v58) {
                        operator delete(v58);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v51 = v52;
                      v51 += 8;
                    }
                    v190[1] = v51;
                    ++v49;
                  }
                  while (v49 != v50);
                  uint64_t v36 = v188;
                }
                if (*((char *)v36 + 47) >= 0) {
                  size_t v61 = *((unsigned __int8 *)v36 + 47);
                }
                else {
                  size_t v61 = *((void *)v36 + 4);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v207, v61 + 1);
                if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v62 = &v207;
                }
                else {
                  long long v62 = (std::string *)v207.__r_.__value_.__r.__words[0];
                }
                if (v61)
                {
                  if (*((char *)v36 + 47) >= 0) {
                    uint64_t v63 = (char *)v36 + 24;
                  }
                  else {
                    uint64_t v63 = (const void *)*((void *)v36 + 3);
                  }
                  memmove(v62, v63, v61);
                }
                *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + v61) = 95;
                std::string::basic_string[abi:ne180100]<0>(&v198, "cancel_tr_insert");
                std::string::size_type v64 = std::string::append(&v198, "_xfm", 4uLL);
                long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                uint64_t v206 = (char *)v64->__r_.__value_.__r.__words[2];
                *(_OWORD *)uint64_t v205 = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v206) >= 0) {
                  long long v66 = v205;
                }
                else {
                  long long v66 = (void **)v205[0];
                }
                if (SHIBYTE(v206) >= 0) {
                  std::string::size_type v67 = HIBYTE(v206);
                }
                else {
                  std::string::size_type v67 = (std::string::size_type)v205[1];
                }
                uint64_t v68 = std::string::append(&v207, (const std::string::value_type *)v66, v67);
                long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                v189.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v69;
                v68->__r_.__value_.__l.__size_ = 0;
                v68->__r_.__value_.__r.__words[2] = 0;
                v68->__r_.__value_.__r.__words[0] = 0;
                ZinObjectNameFactory::ZinObjectNameFactory(buf, &v189);
                if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v189.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v206) < 0) {
                  operator delete(v205[0]);
                }
                if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v198.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v207.__r_.__value_.__l.__data_);
                }
                char v70 = (ZinReshapeLayer **)v202[0];
                std::string v71 = (ZinReshapeLayer **)v202[1];
                while (v70 != v71)
                {
                  uint64_t v72 = *v70;
                  BOOL v73 = *(_DWORD *)(*((void *)*v70 + 8) + 8) == 37
                     && MirOpt::IsMatchingDimensionTranspose(*v70, (uint64_t)v16);
                  v189.__r_.__value_.__r.__words[0] = 0;
                  CFStringRef v74 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)v72 + 32))(v72, 0, 0);
                  if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v74, v188, (const ZinIrOpLayer *)&v189, v75) & 1) == 0) {
                    ZinAssertImpl("Incoming and current should be connected");
                  }
                  if (((v73 | MirOpt::IsInvariantInputToTranspose(v188, (uint64_t)v189.__r_.__value_.__l.__data_, v16)) & 1) == 0) {
                    MirOpt::InsertSymmetricTransposes(*((void *)v188 + 19), (uint64_t)v188, (uint64_t)v189.__r_.__value_.__l.__data_);
                  }
                  ++v70;
                }
                CFTypeID v76 = (ZinReshapeLayer **)v190[0];
                int v77 = (ZinReshapeLayer **)v190[1];
                while (v76 != v77)
                {
                  int v78 = *v76;
                  BOOL v79 = *(_DWORD *)(*((void *)*v76 + 8) + 8) == 37
                     && MirOpt::IsMatchingDimensionTranspose(*v76, (uint64_t)v16);
                  v189.__r_.__value_.__r.__words[0] = 0;
                  BOOL v80 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
                  if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v80, v78, (const ZinIrOpLayer *)&v189, v81) & 1) == 0) {
                    ZinAssertImpl("Incoming and current should be connected");
                  }
                  if (((v79 | MirOpt::IsInvariantInputToTranspose(v78, (uint64_t)v189.__r_.__value_.__l.__data_, v16)) & 1) == 0) {
                    MirOpt::InsertSymmetricTransposes(*((void *)v188 + 19), (uint64_t)v78, (uint64_t)v189.__r_.__value_.__l.__data_);
                  }
                  ++v76;
                }
                v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
                uint64_t v82 = (char *)(std::__hash_table<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v13, &v188, (uint64_t)&std::piecewise_construct, &v189)+ 3);
                if (v82 != (char *)v16) {
                  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v82, *(char **)(ReshapeInfo + 16), *(void *)(ReshapeInfo + 24), (uint64_t)(*(void *)(ReshapeInfo + 24) - *(void *)(ReshapeInfo + 16)) >> 3);
                }
                *(void *)buf = &unk_26C34DA98;
                if (SHIBYTE(v209) < 0) {
                  operator delete(*(void **)&buf[8]);
                }
                if (v190[0])
                {
                  v190[1] = v190[0];
                  operator delete(v190[0]);
                }
                if (v202[0])
                {
                  v202[1] = v202[0];
                  operator delete(v202[0]);
                }
              }
            }
          }
          else
          {
            while (1)
            {
              int v25 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v23 + 32))(*v23, 0, 0);
              uint64_t v26 = *v12;
              buf[0] = 0;
              char v211 = 0;
              char v27 = ZinIrRegAllocUtil::IsPipelinable(v25, v26, (ZinTensorFamilyUtil *)buf);
              std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
              if (v27) {
                break;
              }
              if (++v23 == v24)
              {
                unint64_t v22 = v188;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
LABEL_138:
    uint64_t v14 = v199[0];
  }
  if (v14)
  {
    v199[1] = v14;
    operator delete(v14);
  }
  BOOL v185 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  MirOpt::FindSurroundingTransposes(v188, (char **)v190);
  uint64_t v83 = (ZinReshapeLayer **)v190[0];
  uint64_t v84 = (ZinReshapeLayer **)v190[1];
  if (v190[0] == v190[1]) {
    goto LABEL_214;
  }
  CFTypeID v184 = (ZinReshapeLayer **)v190[1];
  while (1)
  {
    uint64_t v85 = ZinReshapeLayer::GetReshapeInfo(*v83);
    int v86 = (int **)(v85 + 16);
    if ((*(unsigned int (**)(ZinIrOpLayer *, uint64_t))(*(void *)v188 + 424))(v188, v85 + 16)) {
      break;
    }
LABEL_209:
    if (++v83 == v84) {
      goto LABEL_213;
    }
  }
  std::string::size_type v87 = v188;
  memset(buf, 0, sizeof(buf));
  *(void *)&long long v209 = 0;
  v202[0] = 0;
  v202[1] = 0;
  __p[0] = 0;
  v199[1] = 0;
  *(void *)&long long v200 = 0;
  v199[0] = &v199[1];
  int v88 = (void *)*((void *)v188 + 11);
  long long v89 = (void *)*((void *)v188 + 12);
  while (v88 != v89)
  {
    uint64_t v90 = (void *)*v88;
    uint64_t v91 = *(void *)&buf[8];
    if (*(void *)&buf[8] >= (unint64_t)v209)
    {
      uint64_t v93 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      if ((unint64_t)(v93 + 1) >> 61) {
LABEL_306:
      }
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      unint64_t v94 = (uint64_t)(v209 - *(void *)buf) >> 2;
      if (v94 <= v93 + 1) {
        unint64_t v94 = v93 + 1;
      }
      if ((void)v209 - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v95 = v94;
      }
      if (v95) {
        int v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v209, v95);
      }
      else {
        int v96 = 0;
      }
      char v97 = &v96[8 * v93];
      *(void *)char v97 = v90;
      int v92 = v97 + 8;
      char v99 = *(char **)buf;
      char v98 = *(char **)&buf[8];
      if (*(void *)&buf[8] != *(void *)buf)
      {
        do
        {
          uint64_t v100 = *((void *)v98 - 1);
          v98 -= 8;
          *((void *)v97 - 1) = v100;
          v97 -= 8;
        }
        while (v98 != v99);
        char v98 = *(char **)buf;
      }
      *(void *)buf = v97;
      *(void *)&buf[8] = v92;
      *(void *)&long long v209 = &v96[8 * v95];
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      **(void **)&buf[8] = v90;
      int v92 = (void *)(v91 + 8);
    }
    *(void *)&buf[8] = v92;
    if (*(_DWORD *)(v90[8] + 8) == 37)
    {
      std::string v102 = (unint64_t *)v90[14];
      std::string v101 = (unint64_t *)v90[15];
      while (v102 != v101)
      {
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)v199, v102, (uint64_t *)v102);
        ++v102;
      }
    }
    ++v88;
  }
  int v103 = (uint64_t *)*((void *)v87 + 14);
  long long v104 = (uint64_t *)*((void *)v87 + 15);
  if (v103 != v104)
  {
    std::string::size_type v105 = (char *)v202[1];
    do
    {
      uint64_t v106 = *v103;
      if (v105 >= __p[0])
      {
        uint64_t v107 = (v105 - (char *)v202[0]) >> 3;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_306;
        }
        unint64_t v108 = ((char *)__p[0] - (char *)v202[0]) >> 2;
        if (v108 <= v107 + 1) {
          unint64_t v108 = v107 + 1;
        }
        if ((void *)((char *)__p[0] - (char *)v202[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
          unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109) {
          uint64_t v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)__p, v109);
        }
        else {
          uint64_t v110 = 0;
        }
        int v111 = &v110[8 * v107];
        *(void *)int v111 = v106;
        std::string::size_type v105 = v111 + 8;
        int v113 = (char *)v202[0];
        uint64_t v112 = (char *)v202[1];
        if (v202[1] != v202[0])
        {
          do
          {
            uint64_t v114 = *((void *)v112 - 1);
            v112 -= 8;
            *((void *)v111 - 1) = v114;
            v111 -= 8;
          }
          while (v112 != v113);
          uint64_t v112 = (char *)v202[0];
        }
        v202[0] = v111;
        v202[1] = v105;
        __p[0] = &v110[8 * v109];
        if (v112) {
          operator delete(v112);
        }
      }
      else
      {
        *(void *)std::string::size_type v105 = v106;
        v105 += 8;
      }
      v202[1] = v105;
      ++v103;
    }
    while (v103 != v104);
  }
  BOOL v116 = *(ZinReshapeLayer ***)buf;
  int v115 = *(ZinReshapeLayer ***)&buf[8];
  if (*(void *)&buf[8] == *(void *)buf) {
    goto LABEL_203;
  }
  int v117 = 0;
  if (v202[1] == v202[0] || (unint64_t)v200 > 1) {
    goto LABEL_204;
  }
  int v118 = 1;
  do
  {
    BOOL v119 = *(_DWORD *)(*((void *)*v116 + 8) + 8) == 37 && MirOpt::IsMatchingDimensionTranspose(*v116, (uint64_t)v86);
    v189.__r_.__value_.__r.__words[0] = 0;
    int64_t v120 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)*v116
                                                                                                 + 32))(*v116, 0, 0);
    if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v120, v87, (const ZinIrOpLayer *)&v189, v121) & 1) == 0) {
      ZinAssertImpl("Incoming and current should be connected");
    }
    v118 &= v119 | MirOpt::IsInvariantInputToTranspose(v87, (uint64_t)v189.__r_.__value_.__l.__data_, v86);
    ++v116;
  }
  while (v116 != v115);
  if ((v118 & 1) == 0)
  {
LABEL_203:
    int v117 = 0;
    goto LABEL_204;
  }
  int64_t v122 = (ZinReshapeLayer **)v202[0];
  uint64_t v123 = (ZinReshapeLayer **)v202[1];
  int v117 = 1;
  while (v122 != v123)
  {
    BOOL v124 = *(_DWORD *)(*((void *)*v122 + 8) + 8) == 37 && MirOpt::IsMatchingDimensionTranspose(*v122, (uint64_t)v86);
    v189.__r_.__value_.__r.__words[0] = 0;
    uint64_t v125 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v87 + 32))(v87, 0, 0);
    if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v125, *v122, (const ZinIrOpLayer *)&v189, v126) & 1) == 0) {
      ZinAssertImpl("Incoming and current should be connected");
    }
    v117 &= v124 | MirOpt::IsInvariantInputToTranspose(*v122++, (uint64_t)v189.__r_.__value_.__l.__data_, v86);
  }
LABEL_204:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v199, (void *)v199[1]);
  if (v202[0])
  {
    v202[1] = v202[0];
    operator delete(v202[0]);
  }
  uint64_t v84 = v184;
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (!v117) {
    goto LABEL_209;
  }
  if (&v185 != (void **)v86) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v185, *(char **)(v85 + 16), *(void *)(v85 + 24), (uint64_t)(*(void *)(v85 + 24) - *(void *)(v85 + 16)) >> 3);
  }
LABEL_213:
  uint64_t v83 = (ZinReshapeLayer **)v190[0];
LABEL_214:
  if (v83)
  {
    v190[1] = v83;
    operator delete(v83);
  }
  std::string::size_type v127 = v186;
  if (v186 == v185)
  {
    uint64_t v10 = 0;
    if (v186) {
      goto LABEL_305;
    }
    return v10;
  }
  memset(&v207, 0, sizeof(v207));
  v205[0] = 0;
  v205[1] = 0;
  uint64_t v206 = 0;
  CFStringRef v128 = v188;
  long long v129 = (uint64_t *)*((void *)v188 + 11);
  uint64_t v130 = (uint64_t *)*((void *)v188 + 12);
  if (v129 == v130)
  {
    BOOL v131 = 0;
  }
  else
  {
    BOOL v131 = 0;
    do
    {
      uint64_t v132 = *v129;
      if ((unint64_t)v131 >= v207.__r_.__value_.__r.__words[2])
      {
        uint64_t v133 = (uint64_t)((uint64_t)v131 - v207.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v133 + 1) >> 61) {
LABEL_309:
        }
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        unint64_t v134 = (uint64_t)(v207.__r_.__value_.__r.__words[2] - v207.__r_.__value_.__r.__words[0]) >> 2;
        if (v134 <= v133 + 1) {
          unint64_t v134 = v133 + 1;
        }
        if (v207.__r_.__value_.__r.__words[2] - v207.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v135 = v134;
        }
        if (v135) {
          std::string::size_type v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v207.__r_.__value_.__r.__words[2], v135);
        }
        else {
          std::string::size_type v136 = 0;
        }
        CFTypeID v137 = &v136[8 * v133];
        *(void *)CFTypeID v137 = v132;
        BOOL v131 = v137 + 8;
        std::string::size_type size = (char *)v207.__r_.__value_.__l.__size_;
        std::string::size_type v139 = v207.__r_.__value_.__r.__words[0];
        if (v207.__r_.__value_.__l.__size_ != v207.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v140 = *((void *)size - 1);
            size -= 8;
            *((void *)v137 - 1) = v140;
            v137 -= 8;
          }
          while (size != (char *)v139);
          std::string::size_type size = (char *)v207.__r_.__value_.__r.__words[0];
        }
        v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
        v207.__r_.__value_.__l.__size_ = (std::string::size_type)v131;
        v207.__r_.__value_.__r.__words[2] = (std::string::size_type)&v136[8 * v135];
        if (size) {
          operator delete(size);
        }
      }
      else
      {
        *v131++ = v132;
      }
      v207.__r_.__value_.__l.__size_ = (std::string::size_type)v131;
      ++v129;
    }
    while (v129 != v130);
    CFStringRef v128 = v188;
  }
  BOOL v141 = (uint64_t *)*((void *)v128 + 14);
  BOOL v142 = (uint64_t *)*((void *)v128 + 15);
  if (v141 != v142)
  {
    CFNumberRef v143 = (char *)v205[1];
    do
    {
      uint64_t v144 = *v141;
      if (v143 >= v206)
      {
        uint64_t v145 = (v143 - (char *)v205[0]) >> 3;
        if ((unint64_t)(v145 + 1) >> 61) {
          goto LABEL_309;
        }
        unint64_t v146 = (v206 - (char *)v205[0]) >> 2;
        if (v146 <= v145 + 1) {
          unint64_t v146 = v145 + 1;
        }
        if ((unint64_t)(v206 - (char *)v205[0]) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v147 = v146;
        }
        if (v147) {
          CFStringRef v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v206, v147);
        }
        else {
          CFStringRef v148 = 0;
        }
        int v149 = &v148[8 * v145];
        *(void *)int v149 = v144;
        CFNumberRef v143 = v149 + 8;
        CFStringRef v151 = (char *)v205[0];
        uint64_t v150 = (char *)v205[1];
        if (v205[1] != v205[0])
        {
          do
          {
            uint64_t v152 = *((void *)v150 - 1);
            v150 -= 8;
            *((void *)v149 - 1) = v152;
            v149 -= 8;
          }
          while (v150 != v151);
          uint64_t v150 = (char *)v205[0];
        }
        v205[0] = v149;
        v205[1] = v143;
        uint64_t v206 = &v148[8 * v147];
        if (v150) {
          operator delete(v150);
        }
      }
      else
      {
        *(void *)CFNumberRef v143 = v144;
        v143 += 8;
      }
      v205[1] = v143;
      ++v141;
    }
    while (v141 != v142);
    BOOL v131 = (void *)v207.__r_.__value_.__l.__size_;
  }
  CFTypeID v153 = (ZinIrOpLayer **)v207.__r_.__value_.__r.__words[0];
  int v154 = 1;
  if (v207.__r_.__value_.__l.__data_ == (std::string::pointer)v131)
  {
    BOOL v155 = v182;
LABEL_270:
    uint64_t v161 = (ZinIrOpLayer **)v205[0];
    uint64_t v162 = (ZinIrOpLayer **)v205[1];
    if (v205[0] == v205[1])
    {
LABEL_277:
      *(int64x2_t *)CFStringRef v199 = vdupq_n_s64(1uLL);
      long long v200 = *(_OWORD *)v199;
      uint64_t v201 = 1;
      uint64_t v168 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
      ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((void *)(v168 + 48), (uint64_t)&v185, v199);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
      uint64_t v169 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
      uint64_t v170 = v169;
      if (*(char *)(v169 + 47) >= 0) {
        size_t v171 = *(unsigned __int8 *)(v169 + 47);
      }
      else {
        size_t v171 = *(void *)(v169 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v198, v171 + 1);
      if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v172 = &v198;
      }
      else {
        uint64_t v172 = (std::string *)v198.__r_.__value_.__r.__words[0];
      }
      if (v171)
      {
        if (*(char *)(v170 + 47) >= 0) {
          BOOL v173 = (const void *)(v170 + 24);
        }
        else {
          BOOL v173 = *(const void **)(v170 + 24);
        }
        memmove(v172, v173, v171);
      }
      *(_WORD *)((char *)&v172->__r_.__value_.__l.__data_ + v171) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v196, "cancel_tr");
      CFStringRef v174 = std::string::append(&v196, "_xfm", 4uLL);
      long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
      v197.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v175;
      v174->__r_.__value_.__l.__size_ = 0;
      v174->__r_.__value_.__r.__words[2] = 0;
      v174->__r_.__value_.__r.__words[0] = 0;
      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFTypeID v176 = &v197;
      }
      else {
        CFTypeID v176 = (std::string *)v197.__r_.__value_.__r.__words[0];
      }
      if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v177 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v177 = v197.__r_.__value_.__l.__size_;
      }
      BOOL v178 = std::string::append(&v198, (const std::string::value_type *)v176, v177);
      long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
      v189.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v179;
      v178->__r_.__value_.__l.__size_ = 0;
      v178->__r_.__value_.__r.__words[2] = 0;
      v178->__r_.__value_.__r.__words[0] = 0;
      uint64_t v180 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188 + 32))(v188, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v180, &v195);
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      LODWORD(v190[0]) = 0;
      v191[0] = 0;
      v191[1] = 0;
      v190[1] = 0;
      int v192 = 0;
      ZinIrTensor::CreateTensor();
    }
    while (1)
    {
      if (*(_DWORD *)(*((void *)*v161 + 8) + 8) == 37
        && MirOpt::IsMatchingDimensionTranspose(*v161, (uint64_t)&v185))
      {
        CFTypeID v163 = (uint64_t **)*v161;
        CFStringRef v164 = (ZinIrOpLayer *)**((void **)*v161 + 11);
        *(_OWORD *)unint64_t v202 = 0u;
        *(_OWORD *)std::string __p = 0u;
        int v204 = 1065353216;
        int v165 = ZinIrOpLayerGraph::MoveOutgoingEdges(v155, v163, v164, v202);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v202);
        v154 &= v165 & ZinIrOpLayerGraph::RemoveNode(v155, *v161, 1);
      }
      else
      {
        v199[0] = 0;
        CFNumberRef v166 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v188
                                                                                                  + 32))(v188, 0, 0);
        if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v166, *v161, (const ZinIrOpLayer *)v199, v167) & 1) == 0) {
          ZinAssertImpl("Incoming and current should be connected");
        }
        if (!MirOpt::IsInvariantInputToTranspose(*v161, (uint64_t)v199[0], (int **)&v185)) {
          goto LABEL_295;
        }
      }
      if (++v161 == v162) {
        goto LABEL_277;
      }
    }
  }
  BOOL v155 = v182;
  while (2)
  {
    if (*(_DWORD *)(*((void *)*v153 + 8) + 8) == 37 && MirOpt::IsMatchingDimensionTranspose(*v153, (uint64_t)&v185))
    {
      uint64_t v156 = (uint64_t **)*v153;
      uint64_t v157 = (ZinIrOpLayer *)**((void **)*v153 + 11);
      *(_OWORD *)buf = 0u;
      long long v209 = 0u;
      int v210 = 1065353216;
      int v158 = ZinIrOpLayerGraph::MoveOutgoingEdges(v182, v156, v157, buf);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
      v154 &= v158 & ZinIrOpLayerGraph::RemoveNode(v182, *v153, 1);
      goto LABEL_267;
    }
    v202[0] = 0;
    uint64_t v159 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)*v153 + 32))(*v153, 0, 0);
    if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v159, v188, (const ZinIrOpLayer *)v202, v160) & 1) == 0) {
      ZinAssertImpl("Incoming and current should be connected");
    }
    if (MirOpt::IsInvariantInputToTranspose(v188, (uint64_t)v202[0], (int **)&v185))
    {
LABEL_267:
      if (++v153 == v131) {
        goto LABEL_270;
      }
      continue;
    }
    break;
  }
LABEL_295:
  if (v205[0])
  {
    v205[1] = v205[0];
    operator delete(v205[0]);
  }
  if (v207.__r_.__value_.__r.__words[0])
  {
    v207.__r_.__value_.__l.__size_ = v207.__r_.__value_.__r.__words[0];
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (**(unsigned char **)(v183 + 32) && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    CFTypeID v181 = (void *)((char *)v188 + 24);
    if (*((char *)v188 + 47) < 0) {
      CFTypeID v181 = (void *)*v181;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v181;
    _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "[MirOpt::CollapseSymmetricTranspose] Failed to collapse symmetric transpose: %s", buf, 0xCu);
  }
  uint64_t v10 = 3;
  std::string::size_type v127 = v185;
  if (v185)
  {
LABEL_305:
    uint64_t v186 = v127;
    operator delete(v127);
  }
  return v10;
}

void sub_2111B4C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void MirOpt::FindSurroundingTransposes(MirOpt *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t *)*((void *)this + 11);
  uint64_t v6 = (uint64_t *)*((void *)this + 12);
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = a2 + 2;
    do
    {
      uint64_t v9 = *v5;
      if (*(_DWORD *)(*(void *)(*v5 + 64) + 8) == 37)
      {
        if ((unint64_t)v7 >= *v8)
        {
          uint64_t v10 = (v7 - *a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
LABEL_46:
          }
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          uint64_t v11 = *v8 - (void)*a2;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v13);
          }
          else {
            uint64_t v14 = 0;
          }
          int v15 = &v14[8 * v10];
          *(void *)int v15 = v9;
          uint64_t v7 = v15 + 8;
          uint64_t v17 = *a2;
          BOOL v16 = a2[1];
          if (v16 != *a2)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            BOOL v16 = *a2;
          }
          *a2 = v15;
          a2[1] = v7;
          a2[2] = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          v7 += 8;
        }
        a2[1] = v7;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v19 = (uint64_t *)*((void *)this + 14);
  BOOL v20 = (uint64_t *)*((void *)this + 15);
  if (v19 != v20)
  {
    uint64_t v21 = a2 + 2;
    do
    {
      uint64_t v22 = *v19;
      if (*(_DWORD *)(*(void *)(*v19 + 64) + 8) == 37)
      {
        if ((unint64_t)v7 >= *v21)
        {
          uint64_t v23 = (v7 - *a2) >> 3;
          if ((unint64_t)(v23 + 1) >> 61) {
            goto LABEL_46;
          }
          uint64_t v24 = *v21 - (void)*a2;
          uint64_t v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            char v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v26);
          }
          else {
            char v27 = 0;
          }
          int v28 = &v27[8 * v23];
          *(void *)int v28 = v22;
          uint64_t v7 = v28 + 8;
          std::string::size_type v30 = *a2;
          uint64_t v29 = a2[1];
          if (v29 != *a2)
          {
            do
            {
              uint64_t v31 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            uint64_t v29 = *a2;
          }
          *a2 = v28;
          a2[1] = v7;
          a2[2] = &v27[8 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v22;
          v7 += 8;
        }
        a2[1] = v7;
      }
      ++v19;
    }
    while (v19 != v20);
  }
}

void sub_2111B52BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL MirOpt::IsMatchingDimensionTranspose(ZinReshapeLayer *a1, uint64_t a2)
{
  uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(a1);
  ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v6, a2);
  BOOL v4 = ZinIrTransposeInfo::operator==(ReshapeInfo, (uint64_t)v6);
  v6[0] = &unk_26C34C0D0;
  if (__p)
  {
    char v8 = __p;
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v6);
  return v4;
}

void sub_2111B5370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinIrTransposeInfo::~ZinIrTransposeInfo((ZinIrTransposeInfo *)va);
  _Unwind_Resume(a1);
}

void MirOpt::InsertSymmetricTransposes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(a2 + 88) + 8 * a3);
  (*(void (**)(uint64_t, void, void))(*(void *)v3 + 32))(v3, 0, 0);
  (*(void (**)(uint64_t, void, void))(*(void *)v3 + 32))(v3, 0, 0);
  ZinBuilder::CreateTranspose();
}

void sub_2111B551C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayer::CreateDecomposedLayers(uint64_t **a1, ZinIrOpLayerGraph *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  if (a4[1] != *a4)
  {
    uint64_t v7 = (void *)*a1[11];
    if (*(_DWORD *)v6 != 22)
    {
      if (*(_DWORD *)v6 == 21)
      {
        (*(void (**)(void *, void, void))(*v7 + 32))(v7, 0, 0);
        ((void (*)(uint64_t **, void, void))(*a1)[4])(a1, 0, 0);
        ZinBuilder::CreateTranspose();
      }
      ZinAssertImpl("not supported decomposed layer type for the reshape layer.");
    }
    memset(v14, 0, sizeof(v14));
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v14, *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
    int v15 = *(_DWORD *)(v6 + 40);
    uint64_t v8 = v7[2];
    (*(void (**)(void *, void, void))(*v7 + 32))(v7, 0, 0);
    ((void (*)(uint64_t **, void, void))(*a1)[4])(a1, 0, 0);
    ZinBuilder::CreateReshape(v8, a3);
  }
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  int v9 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, a1, 0, v12);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v12);
  if ((v9 & ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a1, 0) & 1) == 0) {
    ZinAssertImpl("ANE internal failure: Reshape layer graph manipulation error");
  }
  return 0;
}

void sub_2111B5AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  char v27 = a19;
  a19 = 0;
  if (v27) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a19, v27);
  }
  _Unwind_Resume(exception_object);
}

void DimensionOrderHint::DimensionOrderHint(DimensionOrderHint *this, const DimensionOrderHint *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
}

void ZinReshapeLayer::InsertMemCopy(ZinReshapeLayer *this, ZinIrOpLayerGraph *a2, ZinObjectNameFactory *a3)
{
  void v8[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)**((void **)this + 11);
  uint64_t v5 = v4[2];
  uint64_t v6 = *(unsigned int *)((*(uint64_t (**)(void *, void, void))(*v4 + 32))(v4, 0, 0) + 88);
  v8[0] = 0;
  v7[0] = 0;
  v7[168] = 0;
  ZinBuilder::CreateNEBypass(v5, (uint64_t)a3, (uint64_t)v4, v6, v8, 0, (uint64_t)v7, 1.0);
}

void sub_2111B5DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayer::ReplaceWithAlias(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(***(void ***)(a1 + 88) + 32))(**(void **)(a1 + 88), 0, 0);
  uint64_t v6 = (const ZinTensorDimensions *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0)+ 48);
  uint64_t v7 = **a3;
  uint64_t v12 = 0;
  __p[0] = (void *)ZinIrTensor::GetInterleave((ZinIrTensor *)v5);
  __p[1] = v8;
  if (ZinReshapeLayerUtils::ReplaceableWithAlias((void *)(v5 + 48), (uint64_t)__p, v6, *(void *)(a1 + 64) + 16, **a3, (unint64_t *)&v12))
  {
    DimensionOrderHint::DimensionOrderHint(&v11, 2);
    ZinIrTensor::CreateDefaultStride(v6, *(_DWORD *)(v5 + 88), 2, (uint64_t)&v11, *(void *)(v7 + 528), v12, 1, v10);
    operator new();
  }
  return 0;
}

void sub_2111B6328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  a27 = &unk_26C34DA98;
  if (a33 < 0) {
    operator delete(__p);
  }
  unsigned int v49 = a35;
  a35 = 0;
  if (v49) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a35, v49);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

void ZinReshapeLayer::Clone()
{
}

void sub_2111B65E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinReshapeLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RESHAPE");
}

uint64_t ZinReshapeLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_2111B67E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ZinReshapeLayer::Hash(ZinReshapeLayer *this, int *a2)
{
  uint64_t v3 = (void *)*((void *)this + 11);
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2 != v3)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void, void, void))(*(void *)*v3 + 32))(*v3, 0, 0);
    uint64_t v6 = (void *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    uint64_t v7 = v5[6];
    uint64_t v8 = v5[7];
    uint64_t v9 = v6[6];
    uint64_t v19 = v5[8];
    uint64_t v20 = v6[7];
    uint64_t v12 = v5 + 9;
    uint64_t v10 = v5[9];
    uint64_t v11 = v12[1];
    uint64_t v13 = v6[8];
    uint64_t v14 = v6[10];
    uint64_t v18 = v6[9];
    int v15 = operator new(0x50uLL);
    void *v15 = v7;
    v15[1] = v9;
    v15[2] = v11;
    void v15[3] = v14;
    v15[4] = v8;
    v15[5] = v20;
    v15[6] = v19;
    void v15[7] = v13;
    v15[8] = v10;
    v15[9] = v18;
    *a2 = ZinHash(v15, 0x50u);
    operator delete(v15);
  }
  return v2 != v3;
}

void sub_2111B6924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinReshapeLayer::SpatialSplitCopy(ZinReshapeLayer *this, const TiledLayerTensorRegions *a2)
{
}

void sub_2111B69F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinReshapeLayer::IsOnlyInGCDimension(ZinReshapeLayer *this)
{
  uint64_t InputTensor = (void *)ZinIrOpLayer::GetInputTensor(this, 0);
  uint64_t v3 = (void *)(*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  BOOL v4 = InputTensor[10] == 1 && v3[10] == 1;
  return v4 && InputTensor[8] == v3[8] && InputTensor[9] == v3[9];
}

void ZinReshapeLayer::LowerEngine()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Cannot support Reshape layer without associated supported transform handling.", v0, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::~ZinMirSpatialSplitLatencyCostModel(ZinMirSpatialSplitLatencyCostModel *this)
{
  *(void *)this = &unk_26C353C60;
  std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 28, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 80);
  *(void *)this = &unk_26C352558;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 8);
}

BOOL ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2)
  {
    uint64_t v9 = (void **)(a1 + 1);
    uint64_t v10 = (void **)(a2 + 1);
    unint64_t v11 = a1[2];
    if (v11 == a2[2]
      && (std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(*v9, 0, (uint64_t)&(*v9)[v11 >> 6], v11 & 0x3F, *v10) & 1) != 0)
    {
      return *((unsigned __int8 *)a1 + 32) < *((unsigned __int8 *)a2 + 32);
    }
    return (std::operator<=>[abi:ne180100]<BOOL,std::allocator<BOOL>>((uint64_t)v9, (uint64_t)v10) & 0x80u) != 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = *(void *)(v3 + 48);
    BOOL v6 = v4 < v5;
    if (v4 == v5) {
      return *(void *)(v2 + 360) < *(void *)(v3 + 360);
    }
  }
  return v6;
}

uint64_t std::operator<=>[abi:ne180100]<BOOL,std::allocator<BOOL>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)a1 + 8 * (v3 >> 6);
  unsigned int v5 = v3 & 0x3F;
  BOOL v6 = *(void **)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)a2 + 8 * (v7 >> 6);
  uint64_t v10 = std::__synth_three_way[abi:ne180100]<BOOL,BOOL>;
  return std::__lexicographical_compare_three_way_fast_path[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::strong_ordering (*)(BOOL const&,BOOL const&)>(v2, 0, v4, v5, v6, 0, v8, v7 & 0x3F, (uint64_t (**)(char *, char *))&v10);
}

void ZinMirSpatialSplitLatencyCostModel::ZinMirSpatialSplitLatencyCostModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(void *)(a1 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = a2;
  *(void *)(a1 + 56) = a3;
  *(void *)a1 = &unk_26C353C60;
  uint64_t v10 = *a6;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a6 + 2);
  *(void *)(a1 + 64) = v10;
  std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map(a1 + 80, a4);
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a5;
  *(void *)(a1 + 128) = a7;
  *(_OWORD *)(a1 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(void *)(a1 + 2std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)v11);
  *(double *)(a1 + 136) = v13 / v12;
  operator new();
}

void sub_2111B6E28(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(v7, *v8);
  std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100](v6, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v5);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v4);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3);
  *uint64_t v1 = &unk_26C352558;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::Insert(uint64_t **a1, uint64_t a2, void *a3)
{
  int v5 = 0;
  uint64_t result = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (uint64_t *)result;
  if (result)
  {
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 1;
  }
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMemCacheHintInfo(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2)
{
  unsigned int v29 = 0;
  if (!*((unsigned char *)this + 64)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(void *)a2 + 512))(&v27, a2);
  uint64_t v4 = v27;
  if (v28 != (unsigned char *)v27)
  {
    unint64_t v5 = 0;
    do
    {
      BOOL v6 = (ZinIrTensor *)v4[v5];
      DimensionOrderHint::DimensionOrderHint(&__p, 2);
      ZinIrTensor::GetTensorSizeInBytesFromResidency(v6, 2, (uint64_t)&__p, 0);
      uint64_t v8 = v7;
      unint64_t v9 = *((void *)this + 16);
      if (__p)
      {
        uint64_t v19 = __p;
        operator delete(__p);
      }
      if ((float)((float)v9 * 0.75) > (float)v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        LOBYTE(__p) = 0;
        char v20 = 0;
        ZinIrRegAllocUtil::FindSortedConsumersAndProducers(v6, (uint64_t *)&v24, (uint64_t *)&v21, (ZinTensorFamilyUtil *)&__p);
        std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
        uint64_t v10 = v24;
        unint64_t v11 = v21;
        if (v25 - (unsigned char *)v24 == 8 && v22 - (unsigned char *)v21 == 8)
        {
          if (v5 >= 2) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          *((unsigned char *)&v29 + v5) = 1;
        }
        if (v11)
        {
          uint64_t v22 = v11;
          operator delete(v11);
          uint64_t v10 = v24;
        }
        if (v10)
        {
          uint64_t v25 = v10;
          operator delete(v10);
        }
      }
      ++v5;
      uint64_t v4 = v27;
    }
    while (v5 < (v28 - (unsigned char *)v27) >> 3);
  }
  double v12 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(v12, 2, (uint64_t)&__p, 0);
  float v14 = (float)v13;
  float v15 = (float)*((unint64_t *)this + 16) * 0.75;
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v15 > v14)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    LOBYTE(__p) = 0;
    char v20 = 0;
    ZinIrRegAllocUtil::FindSortedConsumersAndProducers(v12, (uint64_t *)&v24, (uint64_t *)&v21, (ZinTensorFamilyUtil *)&__p);
    std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
    uint64_t v16 = v24;
    if (v25 - (unsigned char *)v24 == 8 && v22 - (unsigned char *)v21 == 8) {
      BYTE2(v29) = 1;
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
      uint64_t v16 = v24;
    }
    if (v16)
    {
      uint64_t v25 = v16;
      operator delete(v16);
    }
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  return v29;
}

void sub_2111B71B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  unsigned int v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(void *)(v27 - 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer(ZinMirSpatialSplitLatencyCostModel *a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(v30, 0, 25);
  uint64_t v31 = a5;
  *(void *)&v20.f64[0] = &v31;
  *(void *)&v20.f64[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v27, &v20);
  int v26 = ZinMirSpatialSplitLatencyCostModel::ComputeMemCacheHintInfo(a1, (const ZinANELayer *)a5);
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers((uint64_t)a1, a2, a3, a4, (const ZinIrOpLayer *)a5, a6, &v26, a7, &__p, v30))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
    }
    goto LABEL_15;
  }
  if ((unint64_t)(v24 - (unsigned char *)__p) >= 0x11)
  {
    if (v24 - (unsigned char *)__p == 24)
    {
      if (ZinIrOpLayer::IsANELayer(*((ZinIrOpLayer **)__p + 2)))
      {
        uint64_t v16 = (ZinIrOpLayer *)*((void *)__p + 2);
        float64x2_t v20 = 0uLL;
        char v22 = 0;
        double v21 = 0.0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        __int16 v34 = 0;
        uint64_t v33 = 0;
        int v17 = ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer((uint64_t)a1, a3, v16, (ZinIrOpLayer *)a5, a6, &v26, 1, (uint64_t)&v31, &v20);
        if (v17)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
          }
        }
        else
        {
          v30[0] = vaddq_f64(v20, v30[0]);
          v30[1].f64[0] = v21 + v30[1].f64[0];
          LOBYTE(v30[1].f64[1]) |= v22;
        }
        if (v31)
        {
          uint64_t v32 = v31;
          operator delete(v31);
        }
        if (v17) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
    }
    *(float64x2_t *)a8 = v30[0];
    *(float64x2_t *)(a8 + 9) = *(float64x2_t *)((char *)v30 + 9);
LABEL_15:
    uint64_t v18 = 3;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v18 = 0;
  *(float64x2_t *)a8 = v30[0];
  *(float64x2_t *)(a8 + 9) = *(float64x2_t *)((char *)v30 + 9);
LABEL_21:
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  uint64_t v27 = &unk_26C359A08;
  if (v28)
  {
    unsigned int v29 = v28;
    operator delete(v28);
  }
  return v18;
}

void sub_2111B74C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v23 = *(void **)(v21 - 120);
  if (v23)
  {
    *(void *)(v21 - 112) = v23;
    operator delete(v23);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, const ZinIrOpLayer *a5, uint64_t a6, int *a7, uint64_t a8, void **a9, _OWORD *a10)
{
  if (!*(unsigned char *)(a6 + 224)) {
    return 0;
  }
  ZinMirSpatialSplitCostModel::CreateSplitLayers(a1, a3, a5, a6, a9);
  uint64_t v18 = *(ZinIrOpLayer **)*a9;
  if (!ZinIrOpLayer::IsANELayer(v18)
    || !ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(a1, a2, a3, a4, (std::string::size_type)a5, (ZinEngineLayerMirInfo **)v18, (void *)a6, a7, a8, a10))
  {
    unint64_t v19 = (unsigned char *)a9[1] - (unsigned char *)*a9;
    if (v19 < 0x11) {
      return 0;
    }
    if (v19 == 24)
    {
      BOOL IsNELayer = ZinIrOpLayer::IsNELayer(*((ZinIrOpLayer **)*a9 + 2));
      if (IsNELayer)
      {
        if (!*((void *)a5 + 33)) {
          return 0;
        }
        uint64_t v21 = (ZinNELayer *)*((void *)*a9 + 2);
        if (*((void *)v21 + 33)
          || !ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer((ZinMirSpatialSplitLatencyCostModel *)IsNELayer, a2, a5, v18, v21))
        {
          return 0;
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers();
    }
  }
  return 3;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3, ZinIrOpLayer *a4, uint64_t a5, int *a6, int a7, uint64_t a8, _OWORD *a9)
{
  if (!*(unsigned char *)(a5 + 224)) {
    return 0;
  }
  __int16 v112 = 257;
  char v113 = 1;
  *(_DWORD *)uint64_t v114 = 256;
  *(_DWORD *)&void v114[3] = 0;
  char v115 = 1;
  int v116 = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 104), *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 112), *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 116), (uint64_t)v111);
  ZinIrPerf::ZinIrPerf((uint64_t)v110, **(void **)(a1 + 56), v111, (uint64_t *)&v112);
  unint64_t v108 = 0;
  uint64_t v107 = 0;
  uint64_t v109 = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoSplitLayer(a1, a2, a4, a5, a7, (uint64_t *)a8, &v107);
  LOBYTE(v10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  BYTE8(v102) = 0;
  LOBYTE(v103) = 0;
  BYTE4(v103) = 0;
  WORD4(v103) = 0;
  LOBYTE(v104) = 0;
  BYTE8(v104) = 0;
  LOBYTE(v105) = 0;
  LOBYTE(v106) = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoSplitLayer(a1, a2, a4, a5, *(_WORD *)(a8 + 24), (uint64_t)&v100);
  v70[0] = 0;
  v70[104] = 0;
  v70[112] = 0;
  v70[216] = 0;
  v71[0] = 0;
  v71[104] = 0;
  v71[112] = 0;
  v71[120] = 0;
  v71[128] = 0;
  v71[136] = 0;
  v71[144] = 0;
  v71[168] = 0;
  v71[176] = 0;
  v71[180] = 0;
  v71[184] = 0;
  v71[192] = 0;
  v71[200] = 0;
  v71[208] = 0;
  v71[216] = 0;
  v71[224] = 0;
  v71[232] = 0;
  v71[256] = 0;
  v71[264] = 0;
  v71[272] = 0;
  v71[280] = 0;
  v71[288] = 0;
  long long v69 = &unk_26C34D080;
  __int16 v72 = 0;
  char v76 = 0;
  char v77 = 0;
  __int16 v78 = 256;
  long long v73 = 0u;
  uint64_t v74 = 0;
  __int16 v75 = 0;
  char v79 = 0;
  char v80 = 0;
  __int16 v81 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  __int16 v96 = 0;
  char v97 = 0;
  char v98 = 0;
  int v99 = 0;
  v67[0] = 0;
  v67[104] = 0;
  v67[112] = 0;
  v67[216] = 0;
  v68[0] = 0;
  v68[104] = 0;
  v68[112] = 0;
  v68[120] = 0;
  v68[128] = 0;
  v68[136] = 0;
  v68[144] = 0;
  v68[168] = 0;
  v68[176] = 0;
  v68[180] = 0;
  v68[184] = 0;
  v68[192] = 0;
  v68[200] = 0;
  v68[208] = 0;
  v68[216] = 0;
  v68[224] = 0;
  v68[232] = 0;
  v68[256] = 0;
  v68[264] = 0;
  v68[272] = 0;
  v68[280] = 0;
  v68[288] = 0;
  long long v66 = &unk_26C34D0D8;
  v68[296] = 0;
  v68[304] = 0;
  v68[312] = 0;
  v68[320] = 0;
  BOOL IsNELayer = ZinIrOpLayer::IsNELayer(a3);
  BOOL v18 = IsNELayer;
  if (IsNELayer) {
    unint64_t v19 = &v69;
  }
  else {
    unint64_t v19 = &v66;
  }
  float64x2_t v20 = v107;
  if (v108 != v107)
  {
    if (IsNELayer) {
      uint64_t v21 = v70;
    }
    else {
      uint64_t v21 = v67;
    }
    if ((unint64_t)((v108 - (unsigned char *)v107) / 104) <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = (v108 - (unsigned char *)v107) / 104;
    }
    do
    {
      long long v23 = *v20;
      long long v24 = v20[2];
      if (v21[104])
      {
        *((_OWORD *)v21 + 1) = v20[1];
        *((_OWORD *)v21 + 2) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        long long v25 = v20[3];
        long long v26 = v20[4];
        long long v27 = v20[5];
        *((_DWORD *)v21 + 24) = *((_DWORD *)v20 + 24);
        *((_OWORD *)v21 + 4) = v26;
        *((_OWORD *)v21 + 5) = v27;
        *((_OWORD *)v21 + 3) = v25;
      }
      else
      {
        *((_OWORD *)v21 + 1) = v20[1];
        *((_OWORD *)v21 + 2) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        long long v28 = v20[3];
        long long v29 = v20[4];
        long long v30 = v20[5];
        *((void *)v21 + 12) = *((void *)v20 + 12);
        *((_OWORD *)v21 + 4) = v29;
        *((_OWORD *)v21 + 5) = v30;
        *((_OWORD *)v21 + 3) = v28;
        v21[104] = 1;
      }
      float64x2_t v20 = (_OWORD *)((char *)v20 + 104);
      v21 += 112;
      --v22;
    }
    while (v22);
  }
  uint64_t v31 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  uint64_t v32 = v71;
  if (v18) {
    uint64_t v33 = &v69;
  }
  else {
    uint64_t v33 = &v66;
  }
  __int16 v34 = *(void **)(v31 + 64);
  if (!*((unsigned char *)v33 + 352)) {
    *((unsigned char *)v33 + 352) = 1;
  }
  v33[43] = v34;
  if (v18)
  {
    uint64_t v35 = &v69;
  }
  else
  {
    uint64_t v32 = v68;
    uint64_t v35 = &v66;
  }
  long long v36 = v105;
  if (*((unsigned char *)v35 + 336))
  {
    *((_OWORD *)v32 + 4) = v104;
    *((_OWORD *)v32 + 5) = v36;
    *((_DWORD *)v32 + 24) = v106;
    long long v37 = v101;
    *(_OWORD *)uint64_t v32 = v100;
    *((_OWORD *)v32 + 1) = v37;
    long long v38 = v103;
    *((_OWORD *)v32 + 2) = v102;
    *((_OWORD *)v32 + 3) = v38;
  }
  else
  {
    *((_OWORD *)v32 + 4) = v104;
    *((_OWORD *)v32 + 5) = v36;
    *((void *)v32 + 12) = v106;
    long long v40 = v101;
    *(_OWORD *)uint64_t v32 = v100;
    *((_OWORD *)v32 + 1) = v40;
    long long v41 = v103;
    *((_OWORD *)v32 + 2) = v102;
    *((_OWORD *)v32 + 3) = v41;
    *((unsigned char *)v35 + 336) = 1;
  }
  unint64_t v42 = &v66;
  if (v18) {
    unint64_t v42 = &v69;
  }
  int v43 = *a6;
  if (!*((unsigned char *)v42 + 412)) {
    *((unsigned char *)v42 + 412) = 1;
  }
  *((_DWORD *)v42 + 102) = v43;
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  uint64_t v44 = operator new(8uLL);
  std::string __p = v44;
  *uint64_t v44 = 0;
  unint64_t v55 = v44 + 1;
  int v56 = v44 + 1;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v59 = _Q0;
  long long v60 = _Q0;
  long long v61 = _Q0;
  long long v62 = _Q0;
  uint64_t v63 = 0;
  char v64 = 0;
  uint64_t v65 = 0;
  if (ZinANELayer::CalculatePerf(a3, (ZinIrPerf *)v110, (const ZinCustomPerfInfo *)v19, (ZinPerfDescriptor *)v52))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer();
    }
    uint64_t v39 = 3;
  }
  else
  {
    ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency((const ZinPerfDescriptor *)v52, a3, (const ZinCustomPerfInfo *)v19, (uint64_t)v51);
    uint64_t v39 = 0;
    *a9 = v51[0];
    *(_OWORD *)((char *)a9 + 9) = *(_OWORD *)((char *)v51 + 9);
  }
  if (__p)
  {
    unint64_t v55 = __p;
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v66);
  long long v69 = &unk_26C34D080;
  if ((void)v73)
  {
    *((void *)&v73 + 1) = v73;
    operator delete((void *)v73);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v69);
  if (v107)
  {
    unint64_t v108 = v107;
    operator delete(v107);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v110);
  return v39;
}

void sub_2111B7C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a54);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x398]);
  unint64_t v55 = (void *)STACK[0x6D8];
  if (STACK[0x6D8])
  {
    STACK[0x6E0] = (unint64_t)v55;
    operator delete(v55);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x6F0]);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeCopyLayerCostSplitLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a6 + 224))
  {
    long long v8 = *(_OWORD *)(a6 + 56);
    v29[0] = *(_OWORD *)(a6 + 40);
    v29[1] = v8;
    uint64_t v30 = *(void *)(a6 + 72);
    long long v9 = *(_OWORD *)(a6 + 16);
    v24[0] = *(_OWORD *)a6;
    v24[1] = v9;
    uint64_t v10 = *(void *)(a6 + 32);
    int64x2_t v26 = vdupq_n_s64(1uLL);
    int64x2_t v27 = v26;
    uint64_t v25 = v10;
    uint64_t v28 = 1;
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, void, void))(*a5 + 32))(a5, 0, 0);
    TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(a6 + 152), &v23);
    int v12 = *(char *)(v11 + 47);
    if (v12 >= 0) {
      uint64_t v13 = (const std::string::value_type *)(v11 + 24);
    }
    else {
      uint64_t v13 = *(const std::string::value_type **)(v11 + 24);
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(v11 + 47);
    }
    else {
      std::string::size_type v14 = *(void *)(v11 + 32);
    }
    float v15 = std::string::insert(&v23, 0, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = std::string::append(&v20, "/input_copy", 0xBuLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    ZinBuilder::CreateCopyView(a5, (uint64_t)v29, (uint64_t)v24, (uint64_t)__p);
  }
  return 0;
}

void sub_2111B8270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, int a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a43);
  }
  if (a13 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(ZinMirSpatialSplitLatencyCostModel *this, uint64_t **a2)
{
  ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v9);
  if (ZinMirSetActiveNE(a2, v9))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer();
    }
LABEL_10:
    uint64_t v6 = 3;
    goto LABEL_11;
  }
  uint64_t v3 = a2[33];
  unsigned int v4 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)a2, __p);
  char v5 = ZinMirL2Config::ZinMirSetWorkUnitShape((uint64_t)(v3 + 15), (uint64_t)a2, v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer();
    }
    goto LABEL_10;
  }
  uint64_t v6 = 0;
LABEL_11:
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v9);
  return v6;
}

void sub_2111B84C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostOrgLayer(uint64_t a1, ZinIrOpLayer *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v11 = a2;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1);
  __int16 v15 = *(_WORD *)(a4 + 24);
  memset(v10, 0, 25);
  if (ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer(a1, a2, v10, a4))
  {
    uint64_t v8 = 3;
  }
  else
  {
    uint64_t v8 = 0;
    *a3 = v10[0];
    *(_OWORD *)((char *)a3 + 9) = *(long long *)((char *)v10 + 9);
  }
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_2111B85AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer(uint64_t a1, ZinIrOpLayer *a2, long long *a3, uint64_t a4)
{
  __int16 v157 = 257;
  char v158 = 1;
  *(_DWORD *)uint64_t v159 = 256;
  *(_DWORD *)&v159[3] = 1;
  char v160 = 1;
  int v161 = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 104), *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 112), *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 116), (uint64_t)v156);
  ZinIrPerf::ZinIrPerf((uint64_t)v155, **(void **)(a1 + 56), v156, (uint64_t *)&v157);
  CFTypeID v153 = 0;
  uint64_t v152 = 0;
  uint64_t v154 = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoOrgLayer(a1, a2, &v152, (uint64_t *)a4);
  LOBYTE(v145) = 0;
  BYTE8(v147) = 0;
  LOBYTE(v1std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
  BYTE4(v1std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
  WORD4(v1std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
  LOBYTE(v149) = 0;
  BYTE8(v149) = 0;
  LOBYTE(v15std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  LOBYTE(v151) = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoOrgLayer(a1, (uint64_t)a2, (uint64_t)&v145, *(_WORD *)(a4 + 24));
  char v144 = 0;
  memset(v143, 0, sizeof(v143));
  BOOL v142 = a2;
  uint64_t v8 = v152;
  long long v9 = v153;
  if (v152 != v153)
  {
    do
    {
      long long v11 = v8[4];
      long long v10 = v8[5];
      uint64_t v12 = *((void *)v8 + 12);
      v107[0] = v8[3];
      long long v13 = v8[1];
      long long v14 = v8[2];
      v106[0] = *v8;
      v106[1] = v13;
      uint64_t v108 = v12;
      v107[2] = v10;
      v106[2] = v14;
      v107[1] = v11;
      if (!BYTE9(v107[0])) {
        ZinAssertImpl("Residency in cost model not set");
      }
      std::vector<BOOL>::push_back((uint64_t)v143, (unsigned char *)v107 + 8);
      uint64_t v8 = (_OWORD *)((char *)v8 + 104);
    }
    while (v8 != (_OWORD *)v9);
  }
  if (!BYTE9(v148)) {
    ZinAssertImpl("Residency in cost model not set");
  }
  char v144 = BYTE8(v148);
  __int16 v15 = std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::find<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(a1 + 232, (uint64_t *)&v142);
  if ((void *)(a1 + 240) == v15)
  {
    BYTE8(v106[0]) = 0;
    char v109 = 0;
    char v110 = 0;
    char v111 = 0;
    v112[0] = 0;
    v112[104] = 0;
    v112[112] = 0;
    v112[120] = 0;
    v112[128] = 0;
    v112[136] = 0;
    v112[144] = 0;
    v112[168] = 0;
    v112[176] = 0;
    v112[180] = 0;
    v112[184] = 0;
    v112[192] = 0;
    v112[200] = 0;
    v112[208] = 0;
    v112[216] = 0;
    v112[224] = 0;
    v113[0] = 0;
    v113[24] = 0;
    v113[32] = 0;
    v113[40] = 0;
    v113[48] = 0;
    v113[56] = 0;
    *(void *)&v106[0] = &unk_26C34D080;
    __int16 v114 = 0;
    char v118 = 0;
    char v119 = 0;
    __int16 v120 = 256;
    long long v115 = 0u;
    uint64_t v116 = 0;
    __int16 v117 = 0;
    char v121 = 0;
    char v122 = 0;
    __int16 v123 = 0;
    char v124 = 0;
    char v125 = 0;
    char v126 = 0;
    char v127 = 0;
    char v128 = 0;
    char v129 = 0;
    char v130 = 0;
    char v131 = 0;
    char v132 = 0;
    char v133 = 0;
    char v134 = 0;
    char v135 = 0;
    char v136 = 0;
    char v137 = 0;
    __int16 v138 = 0;
    char v139 = 0;
    char v140 = 0;
    int v141 = 0;
    v103[0] = 0;
    v103[104] = 0;
    v103[112] = 0;
    v103[216] = 0;
    v104[0] = 0;
    v104[104] = 0;
    v104[112] = 0;
    v104[120] = 0;
    v104[128] = 0;
    v104[136] = 0;
    v104[144] = 0;
    v104[168] = 0;
    v104[176] = 0;
    v104[180] = 0;
    v104[184] = 0;
    v104[192] = 0;
    v104[200] = 0;
    v104[208] = 0;
    v104[216] = 0;
    v104[224] = 0;
    v105[0] = 0;
    v105[24] = 0;
    v105[32] = 0;
    v105[40] = 0;
    v105[48] = 0;
    v105[56] = 0;
    long long v102 = &unk_26C34D0D8;
    v105[64] = 0;
    v105[72] = 0;
    v105[80] = 0;
    v105[88] = 0;
    BOOL IsNELayer = ZinIrOpLayer::IsNELayer(a2);
    BOOL v19 = IsNELayer;
    if (IsNELayer) {
      std::string v20 = (void **)v106;
    }
    else {
      std::string v20 = &v102;
    }
    uint64_t v74 = (const ZinCustomPerfInfo *)v20;
    uint64_t v21 = v153;
    std::string::size_type v22 = v152;
    if (v153 != v152)
    {
      if (IsNELayer) {
        std::string v23 = (char *)v106 + 8;
      }
      else {
        std::string v23 = v103;
      }
      if ((unint64_t)((v153 - (unsigned char *)v152) / 104) <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = (v153 - (unsigned char *)v152) / 104;
      }
      uint64_t v25 = v152;
      do
      {
        long long v26 = *v25;
        long long v27 = v25[2];
        if (v23[104])
        {
          *((_OWORD *)v23 + 1) = v25[1];
          *((_OWORD *)v23 + 2) = v27;
          *(_OWORD *)std::string v23 = v26;
          long long v28 = v25[3];
          long long v29 = v25[4];
          long long v30 = v25[5];
          *((_DWORD *)v23 + 24) = *((_DWORD *)v25 + 24);
          *((_OWORD *)v23 + 4) = v29;
          *((_OWORD *)v23 + 5) = v30;
          *((_OWORD *)v23 + 3) = v28;
        }
        else
        {
          *((_OWORD *)v23 + 1) = v25[1];
          *((_OWORD *)v23 + 2) = v27;
          *(_OWORD *)std::string v23 = v26;
          long long v31 = v25[3];
          long long v32 = v25[4];
          long long v33 = v25[5];
          *((void *)v23 + 12) = *((void *)v25 + 12);
          *((_OWORD *)v23 + 4) = v32;
          *((_OWORD *)v23 + 5) = v33;
          *((_OWORD *)v23 + 3) = v31;
          v23[104] = 1;
        }
        uint64_t v25 = (_OWORD *)((char *)v25 + 104);
        v23 += 112;
        --v24;
      }
      while (v24);
    }
    if (IsNELayer) {
      __int16 v34 = (void **)v106;
    }
    else {
      __int16 v34 = &v102;
    }
    if (IsNELayer) {
      uint64_t v35 = v113;
    }
    else {
      uint64_t v35 = v105;
    }
    int v36 = *((unsigned __int8 *)v34 + 488);
    v34[58] = (void *)0x3FF0000000000000;
    v34[59] = (void *)0x3FF0000000000000;
    v34[60] = (void *)0x3FF0000000000000;
    if (!v36) {
      *((unsigned char *)v34 + 488) = 1;
    }
    __int16 v75 = a3;
    if (v21 != v22)
    {
      unint64_t v37 = 0;
      do
      {
        uint64_t InputTensor = (ZinIrRegAllocUtil *)ZinIrOpLayer::GetInputTensor(a2, v37);
        LastProducer = ZinIrRegAllocUtil::GetLastProducer(InputTensor, v39);
        if (LastProducer)
        {
          if (ZinMirSpatialSplitLatencyCostModel::IsMCacheReadHit((ZinMirSpatialSplitLatencyCostModel *)a1, a2, LastProducer))
          {
            long long v41 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)LastProducer
                                                                                           + 32))(LastProducer, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v41);
            if (ZinMirSpatialSplitUtils::IsNonResident(RootTensor, (void *)(a1 + 80))
              && (int v43 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0), v44 = ZinIrTensor::GetRootTensor(v43), ZinMirSpatialSplitUtils::IsNonResident(v44, (void *)(a1 + 80))))
            {
              unint64_t v45 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)LastProducer
                                                                                             + 32))(LastProducer, 0, 0);
              unint64_t v46 = ZinIrTensor::GetRootTensor(v45);
              DimensionOrderHint::DimensionOrderHint(__p, 2);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v46, 2, (uint64_t)__p, 0);
              uint64_t v48 = v47;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              unsigned int v49 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
              DimensionOrderHint::DimensionOrderHint(__p, 2);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v49, 2, (uint64_t)__p, 0);
              uint64_t v51 = v50;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              double v52 = *(double *)(a1 + 136);
              if (v52 * (float)v51 >= (float)v48)
              {
                *(void *)&v35[8 * v37] = 0x47EFFFFFE0000000;
              }
              else
              {
                *(double *)&v35[8 * v37] = v52;
                uint64_t v53 = *((void *)a2 + 14);
                uint64_t v54 = *((void *)a2 + 15);
                if (v53 != v54)
                {
                  while (*(_DWORD *)(*(void *)(*(void *)v53 + 64) + 8) == 31)
                  {
                    v53 += 8;
                    if (v53 == v54) {
                      goto LABEL_47;
                    }
                  }
                  v34[60] = (void *)0x47EFFFFFE0000000;
                }
              }
            }
            else
            {
              *(void *)&v35[8 * v37] = *(void *)(a1 + 136);
            }
          }
          else
          {
            *(void *)&v35[8 * v37] = 0x3FF0000000000000;
          }
        }
LABEL_47:
        ++v37;
      }
      while (v37 < 0x4EC4EC4EC4EC4EC5 * ((v153 - (unsigned char *)v152) >> 3));
    }
    uint64_t v55 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    int v56 = v112;
    if (v19) {
      uint64_t v57 = (void **)v106;
    }
    else {
      uint64_t v57 = &v102;
    }
    uint64_t v58 = *(void **)(v55 + 64);
    if (!*((unsigned char *)v57 + 352)) {
      *((unsigned char *)v57 + 352) = 1;
    }
    v57[43] = v58;
    if (v19)
    {
      long long v59 = (void **)v106;
    }
    else
    {
      int v56 = v104;
      long long v59 = &v102;
    }
    long long v60 = v150;
    if (*((unsigned char *)v59 + 336))
    {
      *((_OWORD *)v56 + 4) = v149;
      *((_OWORD *)v56 + 5) = v60;
      *((_DWORD *)v56 + 24) = v151;
      long long v61 = v146;
      *(_OWORD *)int v56 = v145;
      *((_OWORD *)v56 + 1) = v61;
      long long v62 = v148;
      *((_OWORD *)v56 + 2) = v147;
      *((_OWORD *)v56 + 3) = v62;
    }
    else
    {
      *((_OWORD *)v56 + 4) = v149;
      *((_OWORD *)v56 + 5) = v60;
      *((void *)v56 + 12) = v151;
      long long v63 = v146;
      *(_OWORD *)int v56 = v145;
      *((_OWORD *)v56 + 1) = v63;
      long long v64 = v148;
      *((_OWORD *)v56 + 2) = v147;
      *((_OWORD *)v56 + 3) = v64;
      *((unsigned char *)v59 + 336) = 1;
    }
    uint64_t v89 = 0;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v78 = 0u;
    uint64_t v65 = operator new(8uLL);
    char v90 = v65;
    void *v65 = 0;
    char v91 = v65 + 1;
    char v92 = v65 + 1;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v95 = _Q0;
    long long v96 = _Q0;
    long long v97 = _Q0;
    long long v98 = _Q0;
    uint64_t v99 = 0;
    char v100 = 0;
    uint64_t v101 = 0;
    if (ZinANELayer::CalculatePerf(a2, (ZinIrPerf *)v155, v74, (ZinPerfDescriptor *)__p))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer();
      }
      uint64_t v16 = 3;
    }
    else
    {
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency((const ZinPerfDescriptor *)__p, a2, v74, (uint64_t)v76);
      long long *v75 = *(_OWORD *)v76;
      *(long long *)((char *)v75 + 9) = *(_OWORD *)((char *)&v76[1] + 1);
      v76[0] = (uint64_t)&v142;
      std::string v71 = std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__emplace_unique_key_args<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>((uint64_t **)(a1 + 232), (uint64_t *)&v142, (uint64_t)&std::piecewise_construct, v76);
      uint64_t v16 = 0;
      long long v72 = *v75;
      *(_OWORD *)((char *)v71 + 81) = *(long long *)((char *)v75 + 9);
      *(_OWORD *)(v71 + 9) = v72;
    }
    if (v90)
    {
      char v91 = v90;
      operator delete(v90);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v102);
    *(void *)&v106[0] = &unk_26C34D080;
    if ((void)v115)
    {
      *((void *)&v115 + 1) = v115;
      operator delete((void *)v115);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v106);
  }
  else
  {
    uint64_t v16 = 0;
    long long v17 = *(_OWORD *)(v15 + 9);
    *(long long *)((char *)a3 + 9) = *(_OWORD *)((char *)v15 + 81);
    *a3 = v17;
  }
  if (v143[0]) {
    operator delete(v143[0]);
  }
  if (v152)
  {
    CFTypeID v153 = v152;
    operator delete(v152);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v155);
  return v16;
}

void sub_2111B8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a59);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x3C0]);
  if (STACK[0x6A0]) {
    operator delete((void *)STACK[0x6A0]);
  }
  long long v60 = (void *)STACK[0x728];
  if (STACK[0x728])
  {
    STACK[0x730] = (unint64_t)v60;
    operator delete(v60);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x740]);
  _Unwind_Resume(a1);
}

double ZinMirSpatialSplitLatencyCostModel::GetUnSplitCost(ZinMirSpatialSplitLatencyCostModel *this, const ZinIrOpLayer *a2)
{
  unsigned int v4 = a2;
  uint64_t v2 = (double *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)this + 18, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2[3];
}

double ZinMirSpatialSplitLatencyCostModel::GetSplitCost(ZinMirSpatialSplitLatencyCostModel *this, const ZinIrOpLayer *a2)
{
  unsigned int v4 = a2;
  uint64_t v2 = (double *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)this + 23, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2[3];
}

BOOL ZinMirSpatialSplitLatencyCostModel::IsMcacheReadHitConcatTensor(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2, const ZinANELayer *a3)
{
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v6);
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(RootTensor, 2, (uint64_t)&__p, 0);
  unint64_t v9 = v8;
  unint64_t v10 = *((void *)this + 16);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v9 >= v10 || *((void *)a2 + 45) - *((void *)a3 + 45) != 1) {
    return 0;
  }
  long long v31 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  long long v28 = 0;
  long long v29 = 0;
  uint64_t v30 = 0;
  LOBYTE(__p) = 0;
  char v27 = 0;
  ZinIrRegAllocUtil::FindSortedConsumersAndProducers(RootTensor, (uint64_t *)&v31, (uint64_t *)&v28, (ZinTensorFamilyUtil *)&__p);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (!*((void *)this + 13)) {
    goto LABEL_25;
  }
  uint64_t v11 = *((void *)this + 6);
  if (*(void *)(v11 + 360) == *(void *)(v11 + 352)) {
    ZinAssertImpl("Must run scheduler first");
  }
  uint64_t v12 = *((void *)*(v32 - 1) + 6);
  uint64_t v13 = *((void *)*v31 + 6) + 1;
  if (v13 < v12)
  {
    int v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(v11 + 352);
      if (v13 >= (unint64_t)((*(void *)(v11 + 360) - v15) >> 3)) {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v16 = *(ZinIrOpLayer **)(v15 + 8 * v13);
      if (ZinIrOpLayer::IsANELayer(v16))
      {
        long long v17 = v31;
        if (v31 != v32)
        {
          while (*v17 != v16)
          {
            if (++v17 == v32)
            {
              long long v17 = v32;
              break;
            }
          }
        }
        if (v17 == v32)
        {
          long long v18 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v16 + 32))(v16, 0, 0);
          std::string __p = ZinIrTensor::GetRootTensor(v18);
          BOOL v19 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 10, &__p);
          if (!v19) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (CpAllocUtils::IsNonResident(*((_DWORD *)v19 + 6)))
          {
            ZinIrTensor::GetDimensionOrderHint(v18, (uint64_t)&__p);
            ZinIrTensor::GetTensorSizeInBytesFromResidency(v18, 2, (uint64_t)&__p, 0);
            int v21 = v20;
            if (__p)
            {
              long long v26 = __p;
              operator delete(__p);
            }
            v14 += v21;
          }
        }
      }
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
LABEL_25:
    int v14 = 0;
  }
  ZinIrTensor::GetTensorSizeInBytes(RootTensor);
  BOOL v22 = (unint64_t)(v24 + v14) < *((void *)this + 16)
     || *((void *)*(v32 - 1) + 45) - *((void *)*v31 + 45) == v32 - v31 - 1;
  if (v28)
  {
    long long v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    long long v32 = v31;
    operator delete(v31);
  }
  return v22;
}

void sub_2111B9308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  long long v26 = *(void **)(v24 - 104);
  if (v26)
  {
    *(void *)(v24 - 96) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinMirSpatialSplitLatencyCostModel::IsMCacheReadHit(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2, const ZinANELayer *a3)
{
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v6);
  if (*(_DWORD *)(*(void *)(*((void *)RootTensor + 12) + 64) + 8) == 7)
  {
    return ZinMirSpatialSplitLatencyCostModel::IsMcacheReadHitConcatTensor(this, a2, a3);
  }
  else
  {
    unint64_t v9 = RootTensor;
    DimensionOrderHint::DimensionOrderHint(__p, 2);
    ZinIrTensor::GetTensorSizeInBytesFromResidency(v9, 2, (uint64_t)__p, 0);
    unint64_t v11 = v10;
    unint64_t v12 = *((void *)this + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v11 < v12 && *((void *)a2 + 45) - *((void *)a3 + 45) == 1;
  }
}

void sub_2111B949C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency@<X0>(const ZinPerfDescriptor *a1@<X1>, const ZinANELayer *a2@<X2>, const ZinCustomPerfInfo *a3@<X3>, uint64_t a4@<X8>)
{
  double v10 = *((double *)a1 + 8);
  uint64_t v9 = *((void *)a1 + 9);
  double v12 = *((double *)a1 + 5);
  double v11 = *((double *)a1 + 6);
  *(double *)a4 = v12;
  *(void *)(a4 + 8) = v9;
  double v13 = v11 + *((double *)a1 + 7) + v10;
  if (v13 < *((double *)a1 + 2)) {
    double v13 = *((double *)a1 + 2);
  }
  if (v13 >= *((double *)a1 + 3)) {
    double v14 = v13;
  }
  else {
    double v14 = *((double *)a1 + 3);
  }
  *(double *)(a4 + 16) = v14;
  *(unsigned char *)(a4 + 24) = *(_DWORD *)(*((void *)a2 + 33) + 144) == 1;
  if (ZinIrOpLayer::IsNELayer(a2) && **((unsigned char **)a2 + 33) && *(_DWORD *)(*((void *)a2 + 8) + 8) != 92)
  {
    double v15 = *((double *)a1 + 3);
    if (*((unsigned char *)a3 + 65)) {
      uint64_t v16 = (double *)((char *)a1 + 16);
    }
    else {
      uint64_t v16 = (double *)((char *)a1 + 48);
    }
    if (*v16 < v15) {
      double v15 = *v16;
    }
    double v12 = v12 + v15;
    *(double *)a4 = v12;
    double v14 = v14 + v15;
    *(double *)(a4 + 16) = v14;
  }
  if (ZinIrOpLayer::IsNELayer(a2) && v12 == *((double *)a1 + 5))
  {
    double v17 = *((double *)a1 + 2);
    double v18 = *((double *)a1 + 6);
    if (v17 * 0.8 < v18 && v18 < v17)
    {
      double v20 = v17 - v18;
      double v12 = v12 + v20;
      *(double *)a4 = v12;
      double v14 = v20 + v14;
      *(double *)(a4 + 16) = v14;
    }
  }
  uint64_t result = ZinIrOpLayer::IsNELayer(a2);
  if (result)
  {
    if (*((unsigned char *)a3 + 65))
    {
      double v22 = *((double *)a1 + 2);
      double v23 = *((double *)a1 + 3);
      if (v22 < v23 && v23 * 0.8 < v22)
      {
        double v24 = v23 + v23 - v22;
        if (v12 < v24) {
          double v12 = v24;
        }
        *(double *)a4 = v12;
        if (v14 < v24) {
          double v14 = v24;
        }
        *(double *)(a4 + 16) = v14;
      }
    }
  }
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) == 83)
  {
    uint64_t result = (*(uint64_t (**)(const ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    if (*(_DWORD *)(result + 88) == 3) {
      goto LABEL_50;
    }
    uint64_t result = ZinIrOpLayer::GetInputTensor(a2, 0);
    if (*(_DWORD *)(result + 88) == 3) {
      goto LABEL_50;
    }
    uint64_t v25 = *(void *)(*((void *)a2 + 54) + 64);
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v27 = *(void *)(v25 + 24);
    int v28 = *(_DWORD *)(v25 + 44);
    BOOL v29 = v27 == 3 && v26 == 3;
    BOOL v30 = v29 && v28 == 2;
    if (v30 || (v27 == 5 ? (BOOL v31 = v26 == 5) : (BOOL v31 = 0), v31 ? (v32 = v28 == 2) : (v32 = 0), v32))
    {
LABEL_50:
      double v33 = *((double *)a1 + 2);
      if (v33 >= *((double *)a1 + 3)) {
        double v33 = *((double *)a1 + 3);
      }
      *(double *)a4 = v12 + v33;
      *(double *)(a4 + 16) = v33 + v14;
    }
  }
  return result;
}

void ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoSplitLayer(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3, uint64_t a4, int a5, uint64_t *a6, void **a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v10 = a6[1];
  if (*a6 == v10)
  {
    double v12 = (ZinIrOpLayer **)*((void *)a3 + 11);
    double v11 = (ZinIrOpLayer **)*((void *)a3 + 12);
  }
  else
  {
    double v12 = (ZinIrOpLayer **)*((void *)a3 + 11);
    double v11 = (ZinIrOpLayer **)*((void *)a3 + 12);
    if ((v10 - *a6) >> 1 != v11 - v12) {
      ZinAssertImpl("Invalid use of parameter in Cost Model");
    }
  }
  unsigned int v49 = v11;
  if (v12 != v11)
  {
    unint64_t v13 = 0;
    uint64_t v44 = a2 + 120;
    uint64_t v45 = a2 + 72;
    int v43 = (void *)(a1 + 80);
    unint64_t v46 = (long long *)(a4 + 41);
    uint64_t v47 = (uint64_t)(a7 + 2);
    while (1)
    {
      uint64_t v51 = *v12;
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 120))(a3))
      {
        uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a3, v13);
        (*(void (**)(long long *__return_ptr, ZinIrOpLayer *))(*(void *)a3 + 128))(&v53, a3);
        uint64_t v15 = v53;
        if (*((void *)&v53 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
        }
        if (InputTensor == v15) {
          goto LABEL_41;
        }
      }
      uint64_t v16 = *(void *)(a4 + 128) + 80 * v13;
      char v17 = *(unsigned char *)(v16 + 40);
      long long v53 = *(_OWORD *)(v16 + 41);
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(v16 + 57);
      *(void *)&v54[15] = *(void *)(v16 + 72);
      uint64_t v18 = *a6;
      uint64_t v19 = a6[1];
      if (*a6 == v19) {
        break;
      }
      if (v13 >= (v19 - v18) >> 1) {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      double v20 = (unsigned __int16 *)(v18 + 2 * v13);
      if (!*((unsigned char *)v20 + 1)) {
        break;
      }
      LODWORD(RootTensor) = *v20;
      unsigned int v22 = RootTensor >> 8;
LABEL_24:
      int v25 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v51 + 32))(v51, 0, 0)+ 88);
      uint64_t v26 = (char *)a7[1];
      uint64_t v27 = (char *)a7[2];
      if (v26 >= v27)
      {
        uint64_t v29 = 0x4EC4EC4EC4EC4EC5 * ((v26 - (unsigned char *)*a7) >> 3);
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) > 0x276276276276276) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = 0x4EC4EC4EC4EC4EC5 * ((v27 - (unsigned char *)*a7) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x13B13B13B13B13BLL) {
          unint64_t v32 = 0x276276276276276;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          double v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ZinIrBasicBlock *,ZinIrFactory::ZinIrUnitParser>>>(v47, v32);
        }
        else {
          double v33 = 0;
        }
        __int16 v34 = &v33[104 * v29];
        char *v34 = v17;
        *(_OWORD *)(v34 + 1) = v53;
        *(_OWORD *)(v34 + 17) = *(_OWORD *)v54;
        *((void *)v34 + 4) = *(void *)&v54[15];
        v34[40] = 1;
        *((_DWORD *)v34 + 12) = v25;
        v34[52] = 1;
        *((_WORD *)v34 + 28) = RootTensor | (v22 << 8);
        v34[64] = 0;
        v34[72] = 0;
        v34[80] = 0;
        v34[96] = 0;
        int v36 = (char *)*a7;
        uint64_t v35 = (char *)a7[1];
        unint64_t v37 = v34;
        if (v35 != *a7)
        {
          do
          {
            long long v38 = *(_OWORD *)(v35 - 104);
            long long v39 = *(_OWORD *)(v35 - 88);
            *(_OWORD *)(v37 - 72) = *(_OWORD *)(v35 - 72);
            *(_OWORD *)(v37 - 88) = v39;
            *(_OWORD *)(v37 - 104) = v38;
            long long v40 = *(_OWORD *)(v35 - 56);
            long long v41 = *(_OWORD *)(v35 - 40);
            long long v42 = *(_OWORD *)(v35 - 24);
            *((_DWORD *)v37 - 2) = *((_DWORD *)v35 - 2);
            *(_OWORD *)(v37 - 24) = v42;
            *(_OWORD *)(v37 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v41;
            *(_OWORD *)(v37 - 56) = v40;
            v37 -= 104;
            v35 -= 104;
          }
          while (v35 != v36);
          uint64_t v35 = (char *)*a7;
        }
        int v28 = v34 + 104;
        *a7 = v37;
        a7[1] = v34 + 104;
        a7[2] = &v33[104 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *uint64_t v26 = v17;
        *(_OWORD *)(v26 + 1) = v53;
        *(_OWORD *)(v26 + 17) = *(_OWORD *)v54;
        *((void *)v26 + 4) = *(void *)&v54[15];
        v26[40] = 1;
        *((_DWORD *)v26 + 12) = v25;
        v26[52] = 1;
        *((_WORD *)v26 + 28) = RootTensor | (v22 << 8);
        v26[64] = 0;
        v26[72] = 0;
        v26[80] = 0;
        v26[96] = 0;
        int v28 = v26 + 104;
      }
      a7[1] = v28;
LABEL_41:
      ++v13;
      if (++v12 == v49) {
        return;
      }
    }
    if (a5 == 1)
    {
      char v17 = *(unsigned char *)(a4 + 40);
      long long v23 = v46[1];
      long long v53 = *v46;
      *(_OWORD *)uint64_t v54 = v23;
      *(void *)&v54[15] = *(void *)((char *)v46 + 31);
    }
    else
    {
      double v24 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v51 + 32))(v51, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v24);
      if ((*(_DWORD *)(*(void *)(*((void *)RootTensor + 12) + 64) + 8) - 28) < 3
        || !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v45, &v51))
      {
        LOBYTE(RootTensor) = 0;
        goto LABEL_23;
      }
      double v52 = v51;
      if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v44, &v52))
      {
        LOBYTE(RootTensor) = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v43);
        goto LABEL_23;
      }
    }
    LOBYTE(RootTensor) = 1;
LABEL_23:
    LOBYTE(v22) = 1;
    goto LABEL_24;
  }
}

void ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoOrgLayer(uint64_t a1, ZinIrOpLayer *a2, void **a3, uint64_t *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v5 = (void *)*((void *)a2 + 11);
  unsigned int v4 = (void *)*((void *)a2 + 12);
  if (v5 != v4)
  {
    unint64_t v9 = 0;
    uint64_t v40 = (uint64_t)(a3 + 2);
    long long v41 = (void *)(a1 + 80);
    do
    {
      uint64_t v10 = *v5;
      double v11 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v5 + 32))(*v5, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v11);
      if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a2 + 120))(a2)) {
        goto LABEL_7;
      }
      uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a2, v9);
      (*(void (**)(long long *__return_ptr, ZinIrOpLayer *))(*(void *)a2 + 128))(&v42, a2);
      uint64_t v14 = v42;
      if (*((void *)&v42 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
      }
      if (InputTensor != v14)
      {
LABEL_7:
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 32))(v10, 0, 0);
        char v16 = *(unsigned char *)(v15 + 48);
        long long v17 = *(_OWORD *)(v15 + 65);
        long long v42 = *(_OWORD *)(v15 + 49);
        *(_OWORD *)int v43 = v17;
        *(void *)&v43[15] = *(void *)(v15 + 80);
        __int16 IsL2Resident = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v41);
        uint64_t v19 = *a4;
        uint64_t v20 = a4[1];
        if (*a4 != v20)
        {
          if (v9 >= (v20 - v19) >> 1) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          int v21 = (unsigned __int8 *)(v19 + 2 * v9);
          if (v21[1]) {
            __int16 IsL2Resident = *v21;
          }
        }
        int v22 = *((_DWORD *)RootTensor + 22);
        long long v23 = (char *)a3[1];
        double v24 = (char *)a3[2];
        if (v23 >= v24)
        {
          uint64_t v26 = 0x4EC4EC4EC4EC4EC5 * ((v23 - (unsigned char *)*a3) >> 3);
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) > 0x276276276276276) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = 0x4EC4EC4EC4EC4EC5 * ((v24 - (unsigned char *)*a3) >> 3);
          if (2 * v28 > v27) {
            unint64_t v27 = 2 * v28;
          }
          if (v28 >= 0x13B13B13B13B13BLL) {
            unint64_t v29 = 0x276276276276276;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ZinIrBasicBlock *,ZinIrFactory::ZinIrUnitParser>>>(v40, v29);
          }
          else {
            unint64_t v30 = 0;
          }
          unint64_t v31 = &v30[104 * v26];
          char *v31 = v16;
          *(_OWORD *)(v31 + 1) = v42;
          *(_OWORD *)(v31 + 17) = *(_OWORD *)v43;
          *((void *)v31 + 4) = *(void *)&v43[15];
          v31[40] = 1;
          *((_DWORD *)v31 + 12) = v22;
          v31[52] = 1;
          *((_WORD *)v31 + 28) = IsL2Resident | 0x100;
          v31[64] = 0;
          v31[72] = 0;
          v31[80] = 0;
          v31[96] = 0;
          double v33 = (char *)*a3;
          unint64_t v32 = (char *)a3[1];
          __int16 v34 = v31;
          if (v32 != *a3)
          {
            do
            {
              long long v35 = *(_OWORD *)(v32 - 104);
              long long v36 = *(_OWORD *)(v32 - 88);
              *(_OWORD *)(v34 - 72) = *(_OWORD *)(v32 - 72);
              *(_OWORD *)(v34 - 88) = v36;
              *(_OWORD *)(v34 - 104) = v35;
              long long v37 = *(_OWORD *)(v32 - 56);
              long long v38 = *(_OWORD *)(v32 - 40);
              long long v39 = *(_OWORD *)(v32 - 24);
              *((_DWORD *)v34 - 2) = *((_DWORD *)v32 - 2);
              *(_OWORD *)(v34 - 24) = v39;
              *(_OWORD *)(v34 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v38;
              *(_OWORD *)(v34 - 56) = v37;
              v34 -= 104;
              v32 -= 104;
            }
            while (v32 != v33);
            unint64_t v32 = (char *)*a3;
          }
          int v25 = v31 + 104;
          *a3 = v34;
          a3[1] = v31 + 104;
          a3[2] = &v30[104 * v29];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          char *v23 = v16;
          *(_OWORD *)(v23 + 1) = v42;
          *(_OWORD *)(v23 + 17) = *(_OWORD *)v43;
          *((void *)v23 + 4) = *(void *)&v43[15];
          v23[40] = 1;
          *((_DWORD *)v23 + 12) = v22;
          v23[52] = 1;
          *((_WORD *)v23 + 28) = IsL2Resident | 0x100;
          v23[64] = 0;
          v23[72] = 0;
          v23[80] = 0;
          v23[96] = 0;
          int v25 = v23 + 104;
        }
        a3[1] = v25;
      }
      ++v9;
      ++v5;
    }
    while (v5 != v4);
  }
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoSplitLayer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  int v11 = *(unsigned __int8 *)(a6 + 40);
  uint64_t v12 = *(void *)(a4 + 72);
  long long v13 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)a6 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a6 + 16) = v13;
  *(void *)(a6 + 32) = v12;
  if (!v11) {
    *(unsigned char *)(a6 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  }
  *(_WORD *)(a6 + 56) = 257;
  uint64_t result = (*(uint64_t (**)(void *, void, void))(*a3 + 32))(a3, 0, 0);
  *(_DWORD *)(a6 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = *(_DWORD *)(result + 88);
  *(unsigned char *)(a6 + 52) = 1;
  uint64_t v15 = (ZinIrOpLayer **)a3[14];
  char v16 = (ZinIrOpLayer **)a3[15];
  if (v15 != v16)
  {
    uint64_t v17 = a2 + 72;
    uint64_t v18 = (void *)(a1 + 80);
    do
    {
      int v21 = *v15;
      uint64_t result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v17, &v21);
      if (!result)
      {
        uint64_t v19 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*a3 + 32))(a3, 0, 0);
        RootTensor = ZinIrTensor::GetRootTensor(v19);
        uint64_t result = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v18);
        *(_WORD *)(a6 + 56) = result | 0x100;
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if ((a5 & 0xFF00) != 0) {
    *(_WORD *)(a6 + 56) = a5 | 0x100;
  }
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoOrgLayer(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  int v9 = *(unsigned __int8 *)(a3 + 40);
  uint64_t v10 = *(void *)(v8 + 80);
  long long v11 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)a3 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(a3 + 16) = v11;
  *(void *)(a3 + 32) = v10;
  if (!v9) {
    *(unsigned char *)(a3 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  }
  uint64_t v12 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v12);
  uint64_t result = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, (void *)(a1 + 80));
  __int16 v15 = a4;
  if ((a4 & 0xFF00) == 0) {
    __int16 v15 = result;
  }
  *(_WORD *)(a3 + 56) = v15 | 0x100;
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, std::string::size_type a5, ZinEngineLayerMirInfo **this, void *a7, int *a8, uint64_t a9, _OWORD *a10)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  ZinANELayer::DeleteMirInfo(this);
  v123.__r_.__value_.__r.__words[0] = a5;
  *(void *)&v98[0] = &v123;
  *((void *)&v98[0] + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, v98);
  ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)this, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_26C359A08;
  if (__p[1])
  {
    *(void **)&long long v95 = __p[1];
    operator delete(__p[1]);
  }
  __int16 v15 = operator new(8uLL);
  __int16 v120 = (ZinIrOpLayer **)v15;
  void *v15 = this;
  char v122 = v15 + 1;
  char v121 = (ZinIrOpLayer **)(v15 + 1);
  if (*(void *)(a5 + 96) == *(void *)(a5 + 88))
  {
LABEL_94:
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v98);
    if (ZinMirSetActiveNE((uint64_t **)this, (CFArrayRef *)v98))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
      }
    }
    else
    {
      std::string v71 = *(void ***)(a5 + 88);
      long long v72 = *(void ***)(a5 + 96);
      if (v71 == v72)
      {
LABEL_101:
        int v75 = 1;
      }
      else
      {
        while (1)
        {
          __p[0] = *v71;
          if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3 + 72, (ZinIrOpLayer **)__p))
          {
            long long v73 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*(void *)__p[0] + 32))(__p[0], 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v73);
            if (!ZinMirSpatialSplitUtils::IsNonResident(RootTensor, (void *)(a1 + 80))) {
              break;
            }
          }
          if (++v71 == v72) {
            goto LABEL_101;
          }
        }
        int v75 = 0;
      }
      char v76 = *(_WORD **)a9;
      char v77 = *(_WORD **)(a9 + 8);
      if (*(_WORD **)a9 != v77)
      {
        LOBYTE(v75) = 1;
        do
        {
          if ((unsigned __int16)*v76 <= 0xFFu) {
            ZinAssertImpl("If any residency of input is provided, all residency must be provided");
          }
          int v75 = v75 & (*v76++ != 0);
        }
        while (v76 != v77);
      }
      ZinMirL2Config::ZinMirSetTileHeight((ZinEngineLayerMirInfo *)((char *)this[33] + 120), (const ZinANELayer *)this, v75);
      if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a5))
      {
        if (*(unsigned char *)(a1 + 72))
        {
          int v75 = 1;
          int v78 = 1;
        }
        else
        {
          if (*(unsigned char *)(a9 + 25)) {
            BOOL v86 = *(unsigned char *)(a9 + 24) == 0;
          }
          else {
            BOOL v86 = 0;
          }
          int v78 = !v86;
        }
        ZinMirL2Config::SetPatchShape((uint64_t)this[33] + 120, (const ZinPELayer *)this, v75, v78, **(const ZinIrHalParameters ***)(a1 + 56));
      }
      else
      {
        if (*(unsigned char *)(a9 + 24)) {
          BOOL v81 = 1;
        }
        else {
          BOOL v81 = *(unsigned char *)(a9 + 25) == 0;
        }
        v123.__r_.__value_.__s.__data_[4] = 0;
        if (v81) {
          __int16 v82 = 256;
        }
        else {
          __int16 v82 = 0;
        }
        *(_WORD *)&v123.__r_.__value_.__s.__data_[2] = 1;
        LOWORD(v123.__r_.__value_.__l.__data_) = v82 | v75;
        long long v83 = this[33];
        unsigned int v84 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)this, 0) + 88);
        ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)this, __p);
        char v85 = ZinMirL2Config::ZinMirSetWorkUnitShape((uint64_t)v83 + 120, (uint64_t)this, v84);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v85 & 1) == 0)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
          }
          goto LABEL_133;
        }
      }
      TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)__p, (const TiledLayerTensorRegions *)a7);
      char v97 = 1;
      int v87 = ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(a1, a3, (ZinIrOpLayer *)this, (ZinIrOpLayer *)a5, (uint64_t)__p, a8, 0, a9, a10);
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
      if (!v87)
      {
        uint64_t v89 = v120;
        char v90 = v121;
        while (v89 != v90)
          ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *v89++, 0);
        uint64_t v80 = 0;
        goto LABEL_134;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
      }
    }
LABEL_133:
    uint64_t v80 = 3;
LABEL_134:
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v98);
    goto LABEL_135;
  }
  unint64_t v16 = 0;
  while (1)
  {
    SplitInfo::GetSplitDimensions(a4, (char **)__p);
    uint64_t v17 = __p[0];
    uint64_t v18 = (char *)__p[1];
    if (__p[0] == __p[1])
    {
      int v22 = 1;
      if (__p[0]) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v19 = (char *)__p[0] + 4;
      do
      {
        int View = ZinMirSpatialSplitUtils::ShouldCreateView((ZinIrOpLayer *)a5, v16, *((_DWORD *)v19 - 1));
        if (v19 == v18) {
          char v21 = 1;
        }
        else {
          char v21 = View;
        }
        v19 += 4;
      }
      while ((v21 & 1) == 0);
      int v22 = View ^ 1;
      uint64_t v17 = __p[0];
      if (__p[0])
      {
LABEL_12:
        __p[1] = v17;
        operator delete(v17);
      }
    }
    if (!v22)
    {
      uint64_t v23 = a7[16] + 80 * v16;
      uint64_t v24 = *(void *)(v23 + 72);
      long long v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)std::string __p = *(_OWORD *)(v23 + 40);
      long long v95 = v25;
      uint64_t v96 = v24;
      long long v26 = *(_OWORD *)v23;
      long long v27 = *(_OWORD *)(v23 + 16);
      *(void *)&v98[2] = *(void *)(v23 + 32);
      v98[0] = v26;
      v98[1] = v27;
      uint64_t v28 = *(void *)(*(void *)(a5 + 88) + 8 * v16);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v28 + 32))(v28, 0, 0);
      if ((*(unsigned int (**)(std::string::size_type, uint64_t))(*(void *)a5 + 200))(a5, v29))
      {
        *(void *)&v98[0] = *(void *)(a7[16] + 80 * v16);
        memset((char *)v98 + 8, 0, 32);
        uint64_t v30 = *(void *)(*(void *)(a5 + 88) + 8 * v16);
        uint64_t v31 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v30 + 32))(v30, 0, 0);
        long long v32 = *(_OWORD *)(v31 + 64);
        *(_OWORD *)std::string __p = *(_OWORD *)(v31 + 48);
        long long v95 = v32;
        uint64_t v96 = *(void *)(v31 + 80);
        __p[0] = *(void **)(a7[16] + 80 * v16 + 40);
      }
      SplitInfo::GetSplitDimensions(a4, &v123.__r_.__value_.__l.__data_);
      int v33 = ZinMirSpatialSplitUtils::AdjustDimensionsForBroadcast(v98, __p, (ZinIrOpLayer *)a5, (uint64_t)&v123, v16);
      if (v123.__r_.__value_.__r.__words[0])
      {
        v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
        operator delete(v123.__r_.__value_.__l.__data_);
      }
      if (!v33)
      {
        uint64_t v34 = *(void *)(*(void *)(a5 + 88) + 8 * v16);
        if (*(char *)(v34 + 47) >= 0) {
          size_t v35 = *(unsigned __int8 *)(v34 + 47);
        }
        else {
          size_t v35 = *(void *)(v34 + 32);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v112, v35 + 1);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v36 = &v112;
        }
        else {
          long long v36 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        if (v35)
        {
          if (*(char *)(v34 + 47) >= 0) {
            long long v37 = (const void *)(v34 + 24);
          }
          else {
            long long v37 = *(const void **)(v34 + 24);
          }
          memmove(v36, v37, v35);
        }
        *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
        char v38 = *(unsigned char *)(a5 + 47);
        if (v38 >= 0) {
          long long v39 = (const std::string::value_type *)(a5 + 24);
        }
        else {
          long long v39 = *(const std::string::value_type **)(a5 + 24);
        }
        if (v38 >= 0) {
          std::string::size_type v40 = *(unsigned __int8 *)(a5 + 47);
        }
        else {
          std::string::size_type v40 = *(void *)(a5 + 32);
        }
        long long v41 = std::string::append(&v112, v39, v40);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        int v43 = std::string::append(&v113, "_", 1uLL);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(a7 + 19), &v111);
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v111;
        }
        else {
          uint64_t v45 = (std::string *)v111.__r_.__value_.__r.__words[0];
        }
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v111.__r_.__value_.__l.__size_;
        }
        uint64_t v47 = std::string::append(&v114, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unsigned int v49 = std::string::append(&v115, "_", 1uLL);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v116.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v108, "ss_lat");
        uint64_t v51 = std::string::append(&v108, "_xfm", 4uLL);
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        int64_t v110 = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)char v109 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        if (v110 >= 0) {
          long long v53 = v109;
        }
        else {
          long long v53 = (void **)v109[0];
        }
        if (v110 >= 0) {
          std::string::size_type v54 = HIBYTE(v110);
        }
        else {
          std::string::size_type v54 = (std::string::size_type)v109[1];
        }
        uint64_t v55 = std::string::append(&v116, (const std::string::value_type *)v53, v54);
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        uint64_t v57 = std::string::append(&v124, "_", 1uLL);
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v117.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v107, v16);
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v59 = &v107;
        }
        else {
          long long v59 = (std::string *)v107.__r_.__value_.__r.__words[0];
        }
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v60 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v60 = v107.__r_.__value_.__l.__size_;
        }
        long long v61 = std::string::append(&v117, (const std::string::value_type *)v59, v60);
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        long long v63 = std::string::append(&v99, "_", 1uLL);
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v123.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v106, *(void *)(a3 + 136));
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v65 = &v106;
        }
        else {
          uint64_t v65 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v66 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v66 = v106.__r_.__value_.__l.__size_;
        }
        std::string::size_type v67 = std::string::append(&v123, (const std::string::value_type *)v65, v66);
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        std::string::size_type v119 = v67->__r_.__value_.__r.__words[2];
        long long v118 = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v117.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v110) < 0) {
          operator delete(v109[0]);
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v116.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        ZinObjectNameFactory::ZinObjectNameFactory(&v123, &v118);
        ZinObjectNameFactory::CreateName(v69, 0, &v99);
        uint64_t v70 = *(void *)(*(void *)(a5 + 88) + 8 * v16);
        (*(void (**)(uint64_t, void, void))(*(void *)v70 + 32))(v70, 0, 0);
        long long v100 = v98[0];
        long long v101 = v98[1];
        int64x2_t v103 = vdupq_n_s64(1uLL);
        int64x2_t v104 = v103;
        uint64_t v102 = *(void *)&v98[2];
        uint64_t v105 = 1;
        ZinBuilder::CreateView();
      }
      ZinAssertImpl("Latency Cost Model Internal Error");
    }
    if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(void *)(*(void *)(a5 + 88) + 8 * v16), (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)break; {
    if (++v16 >= (uint64_t)(*(void *)(a5 + 96) - *(void *)(a5 + 88)) >> 3)
    }
      goto LABEL_94;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
  }
  uint64_t v80 = 3;
LABEL_135:
  if (v120)
  {
    char v121 = v120;
    operator delete(v120);
  }
  return v80;
}

void sub_2111BAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a47);
  unsigned int v49 = *(void **)(v47 - 200);
  if (v49)
  {
    *(void *)(v47 - 192) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(ZinMirSpatialSplitLatencyCostModel *this, uint64_t **a2, const ZinANELayer *a3, ZinIrOpLayer *a4, ZinNELayer *a5)
{
  v21[1] = *MEMORY[0x263EF8340];
  v21[0] = a3;
  unint64_t v16 = v21;
  uint64_t v17 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v18, &v16);
  BOOL v9 = ZinIrOpLayerGraph::AddNode(a2, a4, &v18);
  uint64_t v18 = (ZinIrOpLayer **)&unk_26C359A08;
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  v21[0] = a3;
  unint64_t v16 = v21;
  uint64_t v17 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v18, &v16);
  BOOL v10 = ZinIrOpLayerGraph::AddNode(a2, a5, &v18);
  uint64_t v18 = (ZinIrOpLayer **)&unk_26C359A08;
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  long long v11 = (ZinMirSpatialSplitLatencyCostModel *)ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)a4, (uint64_t)a5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  int v12 = (int)v11;
  if (ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(v11, (uint64_t **)a5)) {
    return 3;
  }
  BOOL v14 = ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(*((void *)a5 + 33) + 120), a5, 1);
  BOOL v15 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a4, 0);
  if (((v9 && v10) & v12 & v14 & v15 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a5, 0)) != 0) {
    return 0;
  }
  else {
    return 3;
  }
}

void sub_2111BB390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitLatencyCostModel::StartNewSubgraph(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::clear(a1 + 8);
  uint64_t v6 = *(void **)(a2 + 72);
  if (v6 != (void *)(a2 + 80))
  {
    do
    {
      uint64_t v7 = v6[4];
      BOOL v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      std::vector<ZinIrOpLayer *>::reserve(&v15, a3[1] * *a3);
      uint64_t v11 = v7;
      long long v13 = 0;
      uint64_t v14 = 0;
      std::string __p = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 3);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<ZinIrOpLayer*>>>(v5, (uint64_t)&v11);
      if (__p)
      {
        long long v13 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        unint64_t v16 = v15;
        operator delete(v15);
      }
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != (void *)(a2 + 80));
  }
}

void sub_2111BB4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__synth_three_way[abi:ne180100]<BOOL,BOOL>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    unsigned int v5 = -1;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t std::__lexicographical_compare_three_way_fast_path[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::strong_ordering (*)(BOOL const&,BOOL const&)>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t (**a9)(char *, char *))
{
  int64_t v9 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  int64_t v10 = a8 - (unint64_t)a6 + 8 * (a7 - (void)a5);
  if (v10 >= v9) {
    int64_t v11 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  }
  else {
    int64_t v11 = a8 - (unint64_t)a6 + 8 * (a7 - (void)a5);
  }
  if (v11 < 1)
  {
LABEL_14:
    if (v9 < v10) {
      unsigned int v18 = -1;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v9 == v10) {
      return 0;
    }
    else {
      return v18;
    }
  }
  else
  {
    int v12 = a5;
    long long v13 = a1;
    unsigned int v14 = a2;
    unsigned int v15 = a6;
    while (1)
    {
      unint64_t v16 = *a9;
      char v20 = (*v13 >> v14) & 1;
      char v19 = (*v12 >> v15) & 1;
      uint64_t result = v16(&v20, &v19);
      if ((_BYTE)result) {
        break;
      }
      v13 += v14 == 63;
      if (v14 == 63) {
        unsigned int v14 = 0;
      }
      else {
        ++v14;
      }
      v12 += v15 == 63;
      if (v15 == 63) {
        unsigned int v15 = 0;
      }
      else {
        ++v15;
      }
      if (!--v11) {
        goto LABEL_14;
      }
    }
  }
  return result;
}

void *std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void *ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::~ZinIntervalTree(void *a1)
{
  ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  unsigned int v2 = v5;
  unsigned int v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2) {
        MEMORY[0x21667D3C0](*v2, 0x1060C4032101C16);
      }
      ++v2;
    }
    while (v2 != v3);
    unsigned int v2 = v5;
  }
  if (v2)
  {
    uint64_t v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::GetTreeNodes@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, a1);
    for (uint64_t i = *((void *)&v20 + 1); *((void *)&v20 + 1); uint64_t i = *((void *)&v20 + 1))
    {
      uint64_t v4 = *(void *)(*(void *)(*((void *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(void *)&long long v20 = v20 + 1;
      *((void *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((void *)&v19[0] + 1) += 8;
        *(void *)&long long v20 = v20 - 512;
      }
      if (*(void *)(v4 + 64))
      {
        uint64_t v18 = *(void *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(void *)(v4 + 72))
      {
        uint64_t v18 = *(void *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      uint64_t v6 = a2[1];
      unint64_t v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        }
        else {
          int v12 = 0;
        }
        long long v13 = &v12[8 * v8];
        *(void *)long long v13 = v4;
        uint64_t v7 = v13 + 8;
        unsigned int v15 = (char *)*a2;
        unsigned int v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          unsigned int v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v6 = v4;
        uint64_t v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_2111BB8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  unint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      size_t v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      size_t v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2111BBC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4) {
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, int *a5)
{
  *a5 = 0;
  if (!a2) {
    operator new();
  }
  uint64_t v6 = (uint64_t)a2;
  uint64_t v8 = a2[1];
  BOOL v9 = *a4 < v8;
  if (*a4 == v8 && (uint64_t v10 = a4[1], v11 = a2[2], v9 = v10 < v11, v10 == v11))
  {
    uint64_t v12 = *a2;
    if (a3 && v12)
    {
      if (*(void *)(a3 + 8) >= *(void *)(v12 + 8))
      {
LABEL_16:
        uint64_t inserted = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(a1, a2[9], a3, a4, a5);
        if (inserted) {
          *(void *)(inserted + 56) = v6;
        }
        *(void *)(v6 + 72) = inserted;
        goto LABEL_19;
      }
    }
    else if (!a3 || v12)
    {
      goto LABEL_16;
    }
  }
  else if (!v9)
  {
    goto LABEL_16;
  }
  uint64_t v13 = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(a1, a2[8], a3, a4, a5);
  if (v13) {
    *(void *)(v13 + 56) = v6;
  }
  *(void *)(v6 + 64) = v13;
LABEL_19:
  ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v6);
  switch(*a5)
  {
    case 1:
      goto LABEL_23;
    case 2:
      uint64_t v15 = *(void **)(v6 + 64);
      uint64_t v16 = (void *)v15[9];
      uint64_t v17 = v16[8];
      if (v17) {
        *(void *)(v17 + 56) = v15;
      }
      v15[9] = v17;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v15);
      void v15[7] = v16;
      v16[8] = v15;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v16);
      v16[7] = v6;
      *(void *)(v6 + 64) = v16;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v6);
LABEL_23:
      uint64_t v18 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(a1, (void *)v6);
      goto LABEL_28;
    case 3:
      char v19 = *(void **)(v6 + 72);
      int64_t v20 = (void *)v19[8];
      uint64_t v21 = v20[9];
      if (v21) {
        *(void *)(v21 + 56) = v19;
      }
      v19[8] = v21;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v19);
      v19[7] = v20;
      v20[9] = v19;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v20);
      v20[7] = v6;
      *(void *)(v6 + 72) = v20;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v6);
      goto LABEL_27;
    case 4:
LABEL_27:
      uint64_t v18 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(a1, (void *)v6);
LABEL_28:
      *(unsigned char *)(v6 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
      *((unsigned char *)v18 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 1;
      uint64_t v6 = (uint64_t)v18;
      break;
    default:
      break;
  }
  if (ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::HasDoubleRed(v6, a5))
  {
    uint64_t v22 = *(void *)(v6 + 56);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 64);
      uint64_t v24 = v23;
      if (v23 == v6) {
        uint64_t v24 = *(void *)(v22 + 72);
      }
      if (v24 && !*(unsigned char *)(v24 + 48))
      {
        *(unsigned char *)(v22 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 0;
        uint64_t v25 = *(void *)(v22 + 72);
        if (v23) {
          *(unsigned char *)(v23 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 1;
        }
        if (v25) {
          *(unsigned char *)(v25 + std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = 1;
        }
        *a5 = 0;
      }
    }
  }
  return v6;
}

void *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::find<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    BOOL v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__emplace_unique_key_args<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__find_equal<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__find_equal<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(a3, v4 + 4)) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

double std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = *a2;
  *((void *)v6 + 4) = *(void *)v7;
  std::vector<BOOL>::vector((void *)v6 + 5, v7 + 8);
  v6[64] = *(unsigned char *)(v7 + 32);
  double result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2111BC180(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[5];
    if (v3) {
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<ZinIrOpLayer*>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>((uint64_t)a1, a2, (uint64_t)&__p);
  uint64_t inserted = std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_2111BC2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer()
{
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "ERROR: copy_layer must be ZinANELayer*, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "ERROR: when split_layers has more than two layers, then it should have exactly three layers, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers()
{
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "copy_layer must be ZinNELayer*, line:%d, file:%s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "The size of split_layers must be three, line:%d, file:%s", v1, v2, v3, v4, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PerformPerfEstimationSplitLayer isn't successful.\n", v0, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer()
{
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "Error: failed SetActiveNE, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer()
{
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer()
{
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_1(&dword_210C72000, &_os_log_internal, v0, "Error: Failed set active ne, line: %d, file: %s", v1, v2, v3, v4, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to add edge", v0, 2u);
}

unint64_t ZinIrCodegenValueToRegister(unint64_t a1, unsigned int *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v4 = *a2;
  if (v4 <= a1)
  {
    unint64_t v4 = a2[1];
    if (v4 >= a1)
    {
      return a1;
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134218240;
      unint64_t v7 = a1;
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Numerical overflow: %zul < %ud \n", (uint8_t *)&v6, 0x12u);
      return a2[1];
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v6 = 134218240;
    unint64_t v7 = a1;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Numerical underflow: %zul < %ud \n", (uint8_t *)&v6, 0x12u);
    return *a2;
  }
  return v4;
}

uint64_t ZinIrCodeGenGetBarIdForCoeffKDMABlock(const ZinIrOpLayer *a1, const ZinIrMemoryPool *a2, unsigned __int8 *a3)
{
  *a3 = -1;
  if (*((void *)a1 + 17))
  {
    if ((*(unsigned int (**)(const ZinIrOpLayer *))(*(void *)a1 + 120))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, const ZinIrOpLayer *))(*(void *)a1 + 128))(&v11, a1);
      shared_weak_owners = *(ZinIrSection **)(**(void **)(*(void *)(v11 + 104) + 40) + 8);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
LABEL_13:
      if (shared_weak_owners && ZinIrSection::HasValidBarId(shared_weak_owners))
      {
        *a3 = *((unsigned char *)shared_weak_owners + 56);
        return 0;
      }
LABEL_18:
      ZinAssertImpl("Invalid bar id.\n");
    }
    unint64_t v7 = (ZinIrKernel *)*((void *)a1 + 17);
    if (!v7) {
      goto LABEL_18;
    }
    if (!*((void *)v7 + 77))
    {
      if ((ZinIrKernel::IsMutable(v7) & 1) == 0)
      {
        __int16 v8 = a2;
        int v9 = 0;
LABEL_12:
        ZinIrMemoryPool::GetSections((uint64_t)v8, v9, &v11);
        shared_weak_owners = (ZinIrSection *)v12->__shared_weak_owners_;
        std::__list_imp<ZinIrSection *>::clear(&v11);
        goto LABEL_13;
      }
      unint64_t v7 = (ZinIrKernel *)*((void *)a1 + 17);
      if (!v7) {
        goto LABEL_18;
      }
    }
    if (*((void *)v7 + 77) || !ZinIrKernel::IsMutable(v7)) {
      goto LABEL_18;
    }
    __int16 v8 = a2;
    int v9 = 5;
    goto LABEL_12;
  }
  return 0;
}

uint64_t ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(const ZinIrOpLayer *a1, const ZinIrMemoryPool *a2, unsigned __int8 *a3)
{
  *a3 = -1;
  uint64_t v3 = (ZinIrKernel *)*((void *)a1 + 17);
  if (v3 && ZinIrKernel::HasKernelConstData(v3))
  {
    ZinIrMemoryPool::GetSections((uint64_t)a2, 0, v8);
    uint64_t v6 = *(void *)(v8[1] + 16);
    std::__list_imp<ZinIrSection *>::clear(v8);
    *a3 = *(unsigned char *)(v6 + 56);
  }
  return 0;
}

BOOL ZinIrCodegenValidBiasShift(ZinDynamicRange **a1, double a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t v7 = 0;
  ZinDynamicRange::VectorMinMax(*a1, (const ZinIrVector *)((char *)&v7 + 4), (float *)&v7, a5);
  BOOL result = 0;
  if (round(*(float *)&v7 * a2) <= 2147483650.0) {
    return round(*((float *)&v7 + 1) * a2) >= -2147483650.0;
  }
  return result;
}

uint64_t ZinIrCodegen::PrintContextSwitchInfo(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  v44.__sb_.__extbufnext_ = 0;
  v44.__sb_.__extbuf_ = (char *)&unk_26C333D48;
  v45.__vftable = (std::ios_base_vtbl *)&unk_26C333D70;
  std::ios_base::init(&v45, v44.__sb_.__extbuf_min_);
  int v47 = -1;
  uint64_t v46 = 0;
  MEMORY[0x21667CDD0](v44.__sb_.__extbuf_min_);
  std::fstream::open(&v44, "context_switch_log.txt", 0x10u);
  std::ios_base::clear((std::ios_base *)((char *)&v44 + *((void *)v44.__sb_.__extbuf_ - 3)), 0);
  uint64_t v39 = MEMORY[0x263F8C2F8] + 24;
  v40.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F8] + 64);
  std::ios_base::init(&v40, v44.__sb_.__extbuf_min_);
  uint64_t v41 = 0;
  int v42 = -1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a1)
  {
    uint64_t v3 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v4 = *(void *)(v2 + 16);
      if (*(char *)(v4 + 183) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v4 + 160), *(void *)(v4 + 168));
      }
      else {
        std::string v38 = *(std::string *)(v4 + 160);
      }
      uint64_t v5 = *(void *)(*(void *)(v2 + 16) + 200);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 2))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch Out Start @ tid : ", 33);
        uint64_t v6 = (void *)std::ostream::operator<<();
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v8 = &v38;
        }
        else {
          __int16 v8 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v38.__r_.__value_.__l.__size_;
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        uint64_t v11 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 3))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"L2 to DRAM - Destination Pointer Change @ tid : ", 48);
        uint64_t v12 = (void *)std::ostream::operator<<();
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v14 = &v38;
        }
        else {
          BOOL v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v38.__r_.__value_.__l.__size_;
        }
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        uint64_t v17 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 4))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch Out End @ tid ", 29);
        uint64_t v18 = (void *)std::ostream::operator<<();
        char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v20 = &v38;
        }
        else {
          int64_t v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = v38.__r_.__value_.__l.__size_;
        }
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        uint64_t v23 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 1))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"DRAM to L2 - Source Pointer Change @ tid : ", 43);
        uint64_t v24 = (void *)std::ostream::operator<<();
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v38;
        }
        else {
          uint64_t v26 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v38.__r_.__value_.__l.__size_;
        }
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        uint64_t v29 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v5 + 24))(v5, 0))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch In End @ tid : ", 30);
        long long v30 = (void *)std::ostream::operator<<();
        long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v32 = &v38;
        }
        else {
          long long v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = v38.__r_.__value_.__l.__size_;
        }
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
        size_t v35 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
        uint64_t v36 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a1);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v44 + *((void *)v44.__sb_.__extbuf_ - 3)), *(_DWORD *)&v44.__sb_.__extbuf_min_[*((void *)v44.__sb_.__extbuf_ - 3) + 8] | 4);
  }
  std::ostream::~ostream();
  MEMORY[0x21667CDE0](v44.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v45);
}

void std::fstream::open(std::fstream *this, const char *__s, std::ios_base::openmode __mode)
{
  uint64_t v4 = std::filebuf::open();
  uint64_t v5 = (std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3));
  if (v4) {
    std::ios_base::iostate v6 = 0;
  }
  else {
    std::ios_base::iostate v6 = v5->__rdstate_ | 4;
  }

  std::ios_base::clear(v5, v6);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  uint64_t v2 = a1 + 54;
  MEMORY[0x21667CDE0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](v2);
  return a1;
}

uint64_t GetProgrammedDependencyOffsetAndDimension(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 < 2)
  {
    if (v3)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      LODWORD(v3) = *(_DWORD *)(v13 + 24);
      int v14 = *(_DWORD *)(v13 + 16);
    }
    else
    {
      int v14 = 0;
    }
    uint64_t result = 0;
    *a2 = v3;
    *a3 = v14;
  }
  else
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      GetProgrammedDependencyOffsetAndDimension(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 3;
  }
  return result;
}

void AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  __int16 v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v9 = a5[1];
  if (v9 >= a5[2])
  {
    uint64_t v10 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (long long *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (long long *)&__p);
    uint64_t v10 = v9 + 72;
  }
  a5[1] = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2111BD7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AddRelocation(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = 0;
  char v15 = 1;
  char v16 = a4;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v9 = a5[1];
  if (v9 >= a5[2])
  {
    uint64_t v10 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (long long *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (long long *)&__p);
    uint64_t v10 = v9 + 72;
  }
  a5[1] = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2111BD8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AddBARRelocation(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = 0;
  char v19 = 1;
  char v20 = a4;
  char v21 = 1;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  unint64_t v13 = a5[1];
  if (v13 >= a5[2])
  {
    uint64_t v14 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (long long *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (long long *)&__p);
    uint64_t v14 = v13 + 72;
  }
  a5[1] = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2111BD994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CalculateExeCycles(const ZinANELayer *a1)
{
  int v5 = 0;
  char HasChainRead = ZinEngineLayerMirInfo::HasChainRead(*((_DWORD **)a1 + 33), &v5);
  uint64_t result = 0;
  if ((HasChainRead & 1) == 0)
  {
    float v4 = *((double *)a1 + 34);
    if (v4 <= 65535.0) {
      return (int)v4;
    }
    else {
      return 0xFFFFLL;
    }
  }
  return result;
}

uint64_t *SetDefaultValuesToRegisters(uint64_t *result, unint64_t a2, unsigned int a3, void *a4)
{
  if (a2)
  {
    uint64_t v7 = result;
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      unsigned int v12 = a3;
      uint64_t result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a4, &v12);
      if (result)
      {
        unsigned int v11 = a3;
        uint64_t result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a4, &v11);
        if (!result) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        int v10 = *((_DWORD *)result + 5);
      }
      else
      {
        int v10 = 0;
      }
      *((_DWORD *)v7 + v8) = v10;
      unint64_t v8 = v9++;
      a3 += 4;
    }
    while (v8 < a2);
  }
  return result;
}

uint64_t GetDSIDFromPriorityHalAndSecureMode(int a1, uint64_t a2, char a3)
{
  uint64_t result = 0;
  if ((a3 & 1) == 0 && !*(unsigned char *)(a2 + 1248))
  {
    if (a1 == 1)
    {
      return *(unsigned int *)(a2 + 1384);
    }
    else if (a1)
    {
      return 0;
    }
    else
    {
      return *(unsigned int *)(a2 + 1380);
    }
  }
  return result;
}

BOOL GetKernelGroupReuse(const ZinNELayer *a1)
{
  uint64_t v1 = (char *)*((void *)a1 + 17);
  if (!v1) {
    return 0;
  }
  if ((v1[448] & 4) != 0)
  {
    if (*(_DWORD *)(*((void *)a1 + 8) + 8) != 85)
    {
      uint64_t v4 = (*(uint64_t (**)(void, void, void))(***((void ***)a1 + 11) + 32))(**((void **)a1 + 11), 0, 0);
      return *(void *)(v4 + 48) > 1;
    }
    return v1[448] < 0 && *(void *)(*((void *)a1 + 33) + 104) > 1uLL;
  }
  else if (ZinIrKernel::HasPerCoutScale(*((ZinIrKernel **)a1 + 17)) {
         || (BOOL result = ZinIrKernel::HasPerCoutBias((ZinIrKernel *)v1), result))
  }
  {
    uint64_t v4 = (*(uint64_t (**)(const ZinNELayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
    return *(void *)(v4 + 48) > 1;
  }
  return result;
}

int64x2_t GetMaximumSrcDimsOfUnderlyingTensor@<Q0>(const ZinIrHalParameters *a1@<X0>, const ZinANELayer *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*((unsigned char *)a1 + 1327)) {
    ZinAssertImpl("API should only be called on Coll+ where unaligned x crop is supported.", a2);
  }
  if (!*((void *)a2 + 25)) {
    ZinAssertImpl("API can only be called when engine layer has a texture.");
  }
  if (*((void *)a2 + 24) == 1)
  {
    (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(void *)a2 + 512))(__p, a2);
    int v5 = __p[0];
    uint64_t v6 = *((void *)__p[0] + 1);
  }
  else
  {
    (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(void *)a2 + 512))(__p, a2);
    int v5 = __p[0];
    uint64_t v6 = *(void *)__p[0];
  }
  uint64_t v7 = *(void *)(v6 + 96);
  __p[1] = v5;
  operator delete(v5);
  uint64_t v9 = *((void *)a2 + 11);
  uint64_t v10 = *((void *)a2 + 12) - v9;
  if (v10)
  {
    unsigned int v11 = 0;
    unint64_t v12 = v10 >> 3;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    while (*(void *)(v9 + 8 * (void)v11) != v7)
    {
      unsigned int v11 = (const ZinANELayer *)((char *)v11 + 1);
      if ((const ZinANELayer *)v12 == v11) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    unsigned int v11 = 0;
  }
  uint64_t v33 = 0;
  if (ZinMemSourceIndexTranslator::GetDMASrcIndex(a2, v11, &v33, v8)) {
    ZinAssertImpl("Error: Failed to obtain dma index.");
  }
  if (!*((void *)a2 + 33)) {
    ZinAssertImpl("Error: MIR Info must not be null.");
  }
  unint64_t v13 = (ZinEngineLayerMirInfo **)((char *)a2 + 264);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 32))(v7, 0, 0);
  long long v15 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)a3 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(a3 + 16) = v15;
  *(void *)(a3 + 32) = *(void *)(v14 + 80);
  if ((ZinEngineLayerMirInfo::HasDmaRead(*v13) & 1) == 0) {
    ZinAssertImpl("API must only be called when there is DRAM access.");
  }
  uint64_t v16 = (char *)*((void *)*v13 + 12 * v33 + 94);
  if (*((_DWORD *)v16 + 39) != 1 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    GetMaximumSrcDimsOfUnderlyingTensor(v13, &v33, __p, v17, v18, v19, v20, v21);
    uint64_t v16 = (char *)__p[0];
  }
  if (*((void *)v16 + 27)) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = *((void *)v16 + 31) == 0;
  }
  if (!v22 || *((void *)v16 + 28) != 0)
  {
    BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v24) {
      GetMaximumSrcDimsOfUnderlyingTensor(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a3 + 16), *(int64x2_t *)(v16 + 232));
  *(int64x2_t *)(a3 + 16) = result;
  return result;
}

uint64_t ZinAneTd<1u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<1u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        unsigned int v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        unsigned int v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<5u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        unsigned int v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<6u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<6u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        unsigned int v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<7u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<7u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        unsigned int v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

void ZinAneTd<8u>::HandleCachePrefetchDma(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *(void *)(a2 + 264);
  if (*(unsigned char *)(v3 + 1264))
  {
    ZinAneTd<8u>::SetCacheDmaPreEnable(a1, 1);
    ZinAneTd<8u>::SetCacheDmaPreFlush(a1, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<8u>::SetCacheDmaPreTaskSync(a1, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<8u>::SetCacheDmaPreEarlyTermination(a1, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(void *)(v3 + 1312), WORD1(*(void *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<8u>::SetCacheDmaPreFootprintLimiter(a1, 0, 0, 0);
    ZinAneTd<8u>::SetCacheDmaPreSieveFiltering(a1, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<8u>::SetCacheDmaPreBandwidthLimit(a1, 256);
    ZinAneTd<8u>::SetCacheDmaPreTelemetryResponseAgeOut(a1, 10);
    ZinAneTd<8u>::SetCacheDmaPreDSIDAndSize(a1, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<8u>::SetCacheDmaPreTelemetryBackOff(a1, 1, 0, 7u, 1u, 32);
    ZinAneTd<1u>::SetCacheDmaPrePause(a1, *(unsigned char *)(v3 + 1336), *(unsigned char *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<1u>::SetCacheDmaPreThrottle(a1, *(unsigned char *)(v3 + 1344), *(unsigned char *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    int v6 = *(_DWORD *)(v3 + 1356);
    ZinAneTd<1u>::SetCacheDmaPrePrefetchRate(a1, v6);
  }
}

BOOL ZinAneTd<8u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        uint64_t v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(void *)(v13 + 1368) == v11
            && *(unsigned char *)(v13 + 1376)
            && (!v10 || v12[45] < *((void *)v10 + 45)))
          {
            uint64_t v10 = (const ZinIrOpLayer *)v5[2];
            uint64_t v9 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      unsigned __int8 v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<8u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<8u>::InitializeTdToDefaults(uint64_t a1)
{
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1264));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x48uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 500), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 584), 0x45uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 868), 0x1EuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 996), 0xEuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1060), 0xBuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1112), 0x15uLL, 0x5100u, AddressDefaultValueMapping);

  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1204), 0xCuLL, 0x5900u, AddressDefaultValueMapping);
}

uint64_t ZinAneTd<10u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<10u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        uint64_t v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<10u>::InitializeTdToDefaults(uint64_t a1)
{
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 960));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x22uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 252), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 336), 0x45uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 620), 0x1EuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 748), 0xEuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 812), 0xBuLL, 0x4900u, AddressDefaultValueMapping);

  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 864), 0x15uLL, 0x5100u, AddressDefaultValueMapping);
}

uint64_t ZinAneTd<11u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        uint64_t v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(void *)(v12 + 1368) == v10
            && *(unsigned char *)(v12 + 1376)
            && (!v9 || v11[45] < *((void *)v9 + 45)))
          {
            uint64_t v9 = (const ZinIrOpLayer *)v5[2];
            unint64_t v8 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      unsigned __int8 v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<11u>::InitializeTdToDefaults(uint64_t a1)
{
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1008));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x46uLL, 0x1900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 492), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 576), 0x35uLL, 0x1100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 796), 0x19uLL, 0x500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 904), 5uLL, 0x900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 932), 5uLL, 0xD00u, AddressDefaultValueMapping);

  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 960), 9uLL, 0x1500u, AddressDefaultValueMapping);
}

void ZinAneTd<17u>::HandleCachePrefetchDma(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *(void *)(a2 + 264);
  if (*(unsigned char *)(v3 + 1264))
  {
    ZinAneTd<17u>::SetCacheDmaPreEnable(a1, 1);
    ZinAneTd<17u>::SetCacheDmaPreFlush(a1, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<17u>::SetCacheDmaPreTaskSync(a1, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<17u>::SetCacheDmaPreEarlyTermination(a1, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(void *)(v3 + 1312), WORD1(*(void *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<17u>::SetCacheDmaPreFootprintLimiter(a1, 0, 0, 0);
    ZinAneTd<17u>::SetCacheDmaPreSieveFiltering(a1, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<17u>::SetCacheDmaPreBandwidthLimit(a1, 256);
    ZinAneTd<17u>::SetCacheDmaPreTelemetryResponseAgeOut(a1, 10);
    ZinAneTd<17u>::SetCacheDmaPreDSIDAndSize(a1, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<17u>::SetCacheDmaPreTelemetryBackOff(a1, 1, 0, 7u, 1u, 32);
    ZinAneTd<1u>::SetCacheDmaPrePause(a1, *(unsigned char *)(v3 + 1336), *(unsigned char *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<1u>::SetCacheDmaPreThrottle(a1, *(unsigned char *)(v3 + 1344), *(unsigned char *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    int v6 = *(_DWORD *)(v3 + 1356);
    ZinAneTd<1u>::SetCacheDmaPrePrefetchRate(a1, v6);
  }
}

BOOL ZinAneTd<17u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  int v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        uint64_t v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(void *)(v13 + 1368) == v11
            && *(unsigned char *)(v13 + 1376)
            && (!v10 || v12[45] < *((void *)v10 + 45)))
          {
            uint64_t v10 = (const ZinIrOpLayer *)v5[2];
            uint64_t v9 = v5[3];
          }
        }
      }
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      unsigned __int8 v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<17u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<17u>::InitializeTdToDefaults(uint64_t a1)
{
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1384));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 48), 0x48uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 504), 0x17uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 604), 0x51uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 936), 0x29uLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1108), 0xFuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1176), 0xCuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1232), 0x15uLL, 0x5100u, AddressDefaultValueMapping);

  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1324), 0xCuLL, 0x5900u, AddressDefaultValueMapping);
}

BOOL ZinAneTd<19u>::HandleCachePrefetchDma(BOOL result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *(void *)(a2 + 264);
  if (*(unsigned char *)(v3 + 1264))
  {
    uint64_t v5 = result;
    ZinAneTd<19u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<19u>::SetCacheDmaPreFlush(v5, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<19u>::SetCacheDmaPreTaskSync(v5, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<19u>::SetCacheDmaPreEarlyTermination(v5, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(void *)(v3 + 1312), WORD1(*(void *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<19u>::SetCacheDmaPreFootprintLimiter(v5, 0, 0, 0);
    ZinAneTd<19u>::SetCacheDmaPreSieveFiltering(v5, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<19u>::SetCacheDmaPreBandwidthLimit(v5, 256);
    ZinAneTd<19u>::SetCacheDmaPreTelemetryResponseAgeOut(v5, 10);
    ZinAneTd<19u>::SetCacheDmaPreDSIDAndSize(v5, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<19u>::SetCacheDmaPreTelemetryBackOff(v5, 1, 0, 7u, 1u, 32);
    ZinAneTd<19u>::SetCacheDmaPrePause(v5, *(unsigned __int8 *)(v3 + 1336), *(unsigned __int8 *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<19u>::SetCacheDmaPreThrottle(v5, *(unsigned __int8 *)(v3 + 1344), *(unsigned __int8 *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    unsigned int v6 = *(_DWORD *)(v3 + 1356);
    return ZinAneTd<19u>::SetCacheDmaPrePrefetchRate(v5, v6);
  }
  return result;
}

BOOL ZinAneTd<19u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4 = a2[33];
  if (!*(unsigned char *)(v4 + 1264) || !*(void *)(v4 + 1272)) {
    return 1;
  }
  uint64_t v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        uint64_t v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          uint64_t v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(void *)(v13 + 1368) == v11
            && *(unsigned char *)(v13 + 1376)
            && (!v10 || v12[45] < *((void *)v10 + 45)))
          {
            uint64_t v10 = (const ZinIrOpLayer *)v5[2];
            uint64_t v9 = v5[3];
          }
        }
      }
      uint64_t v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      unsigned __int8 v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<19u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<19u>::InitializeTdToDefaults(uint64_t a1)
{
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1432));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 52), 0x4AuLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 516), 0x17uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 616), 0x53uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 956), 0x2AuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1132), 0x10uLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1204), 0xDuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1264), 0x17uLL, 0x5100u, AddressDefaultValueMapping);

  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1364), 0xEuLL, 0x5900u, AddressDefaultValueMapping);
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x21667CDE0](a1 + 1);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21667D2B0);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = a1 + 52;
  MEMORY[0x21667CDE0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](v1);

  JUMPOUT(0x21667D3C0);
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x21667CDE0](v1 + 3);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21667D2B0);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x21667CDE0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](v1 + 54);

  JUMPOUT(0x21667D3C0);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  uint64_t v1 = a1 + 54;
  MEMORY[0x21667CDE0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](v1);

  JUMPOUT(0x21667D3C0);
}

__n128 std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  long long v7 = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 56) = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(v4 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7;
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 72;
  return result;
}

void sub_2111C0034(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void GetProgrammedDependencyOffsetAndDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void GetMaximumSrcDimsOfUnderlyingTensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void GetMaximumSrcDimsOfUnderlyingTensor(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a3 = *(void *)(*a1 + 96 * *a2 + 752);
}

void ZinAneTd<1u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinMirMemCacheStrategyGlobal::ZinMirMemCacheStrategyGlobal(ZinMirMemCacheStrategyGlobal *this, uint64_t a2, uint64_t a3, char a4, BOOL a5, char a6, char a7)
{
  ZinMirMemCacheStrategyBase::ZinMirMemCacheStrategyBase(this, a2, a3, a4, a5, a6, a7);
  *long long v7 = &unk_26C352728;
  operator new();
}

void sub_2111C01DC(_Unwind_Exception *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinMirMemCacheStrategyGlobal::PerformAllocation(ZinMirMemCacheStrategyGlobal *this, const ZinIrControlFlowGraph *a2)
{
  return 0;
}

void ZinMirMemCacheStrategyGlobal::~ZinMirMemCacheStrategyGlobal(ZinMirMemCacheStrategyGlobal *this)
{
  ZinMirMemCacheStrategyGlobal::~ZinMirMemCacheStrategyGlobal(this);

  JUMPOUT(0x21667D3C0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C352728;
  std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy((uint64_t)this + 40, *((char **)this + 6));
  std::unique_ptr<ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 4, 0);

  ZinIrHalH13g::~ZinIrHalH13g(this);
}

void std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<ZinIrEngineLayer * const,LayerMemCacheUsages>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<ZinIrEngineLayer * const,LayerMemCacheUsages>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::unique_ptr<ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>>::reset[abi:ne180100](void **a1, void *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void *ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::~ZinIntervalTree(void *a1)
{
  ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2) {
        MEMORY[0x21667D3C0](*v2, 0x1020C40823E9ACBLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = v5;
  }
  if (v2)
  {
    unsigned int v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::GetTreeNodes@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, a1);
    for (uint64_t i = *((void *)&v20 + 1); *((void *)&v20 + 1); uint64_t i = *((void *)&v20 + 1))
    {
      uint64_t v4 = *(void *)(*(void *)(*((void *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(void *)&long long v20 = v20 + 1;
      *((void *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((void *)&v19[0] + 1) += 8;
        *(void *)&long long v20 = v20 - 512;
      }
      if (*(void *)(v4 + 64))
      {
        uint64_t v18 = *(void *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(void *)(v4 + 72))
      {
        uint64_t v18 = *(void *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      unsigned int v6 = a2[1];
      unint64_t v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = &v12[8 * v8];
        *(void *)uint64_t v13 = v4;
        long long v7 = v13 + 8;
        uint64_t v15 = (char *)*a2;
        uint64_t v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unsigned int v6 = v4;
        long long v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_2111C05D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  unint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      size_t v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    std::fstream v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      size_t v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::locale v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2111C095C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinParseInputViewUnit(const __CFDictionary *a1, ZinIrInputViewUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
    return 3;
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v6, @"Offset");
  CFNumberRef v9 = v8;
  if (v8)
  {
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 != CFNumberGetTypeID()) {
      CFNumberRef v9 = 0;
    }
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v6, @"Size");
  CFNumberRef v12 = v11;
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFNumberGetTypeID()) {
      CFNumberRef v12 = 0;
    }
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v6, @"Step");
  CFNumberRef v15 = v14;
  if (v14)
  {
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 != CFNumberGetTypeID()) {
      CFNumberRef v15 = 0;
    }
  }
  if (!v9)
  {
    CFStringRef v19 = @"InvalidInputViewOffset";
    goto LABEL_24;
  }
  if (!v12)
  {
    CFStringRef v19 = @"InvalidInputViewSize";
LABEL_24:
    ZinIrUnitStatus::SetError(a3, v19);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseInputViewUnit();
    }
    return 3;
  }
  ZinGetCFObject((char *)a2 + 80, v9);
  ZinGetCFObject((char *)a2 + 84, v12);
  if (v15) {
    ZinGetCFObject((char *)a2 + 88, v15);
  }
  uint64_t v17 = CFDictionaryGetValue(v6, @"Dimension");
  if (!v17 || (CFTypeID v18 = CFGetTypeID(v17), v18 != CFStringGetTypeID()) || ZinParseDimension() == 3)
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidInputViewDimension");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseInputViewUnit();
    }
    return 3;
  }
  return 0;
}

void ZinParseInputViewUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid offset/size in Plist.\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid dimension in Plist.\n", v0, 2u);
}

uint64_t ZinLogEventFlags::EventFlagsV1::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[1]) {
    unsigned int v2 = 8226;
  }
  else {
    unsigned int v2 = 0x2000;
  }
  if (*a2 | a2[2]) {
    return v2 | 8;
  }
  else {
    return v2;
  }
}

uint64_t ZinLogEventFlags::EventFlagsV1::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinNEBypassLayer *this)
{
  int v4 = a2[1];
  int v5 = 2 * v4;
  if (a2[3])
  {
    int v6 = v5 | 0x28;
    if (a2[4]) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = 0x1FFF;
    }
  }
  else
  {
    if (*a2 | v4 | a2[2]) {
      int v8 = 7272;
    }
    else {
      int v8 = 7168;
    }
    unsigned int v7 = v8 | v5;
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this)) {
    v7 &= 0x3FFu;
  }
  if (a2[6]) {
    return v7 & 0x3FF;
  }
  else {
    return v7;
  }
}

uint64_t ZinLogEventFlags::EventFlagsV2::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[1]) {
    unsigned int v2 = 1058;
  }
  else {
    unsigned int v2 = 1024;
  }
  if (*a2 | a2[2]) {
    return v2 | 8;
  }
  else {
    return v2;
  }
}

uint64_t ZinLogEventFlags::EventFlagsV2::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7 = a2[1];
  int v8 = 2 * v7;
  if (a2[3])
  {
    int v9 = v8 | 0x28;
    if (a2[4]) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = 16776191;
    }
  }
  else
  {
    if (*a2 | v7 | a2[2]) {
      int v11 = 16775272;
    }
    else {
      int v11 = 16775168;
    }
    unsigned int v10 = v11 | v8;
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this)) {
    v10 &= 0xFF0007FF;
  }
  if (a2[6]) {
    uint64_t v12 = v10 & 0xFF0007FF;
  }
  else {
    uint64_t v12 = v10;
  }
  if (ZinIrOpLayer::IsNELayer(this) && (CFNumberRef v14 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
  {
    int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v14);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v16)) != 0) {
      return v12 & 0xFFFFDFFF;
    }
    else {
      return v12;
    }
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v13);
  }
  return v12;
}

BOOL ZinLogEventFlags::CanInvalidPixelsBeProcessed(ZinLogEventFlags *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v3 = *((void *)this + 33);
  unint64_t v4 = *(void *)(v3 + 120);
  unint64_t v5 = *(void *)(v3 + 128);
  if (*(_DWORD *)(v3 + 144) == 1) {
    int v6 = (char *)a2 + 784;
  }
  else {
    int v6 = (char *)a2 + 592;
  }
  unint64_t v7 = *(void *)v6 / v4;
  uint64_t v8 = (*(uint64_t (**)(ZinLogEventFlags *, void, void))(*(void *)this + 32))(this, 0, 0);
  return *(void *)(v8 + 72) % v7 || *(void *)(v8 + 64) % v5 != 0;
}

uint64_t ZinLogEventFlags::EventFlagsV3::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[1]) {
    unsigned int v2 = 34;
  }
  else {
    unsigned int v2 = 0;
  }
  if (*a2 | a2[2]) {
    return v2 | 8;
  }
  else {
    return v2;
  }
}

uint64_t ZinLogEventFlags::EventFlagsV3::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  if (a2[5])
  {
    if (a2[3])
    {
      int v7 = 42;
      goto LABEL_6;
    }
    if (*a2 | a2[2]) {
      int v9 = 10;
    }
    else {
      int v9 = 2;
    }
    if (a2[1]) {
      int v10 = v9 | 0x20;
    }
    else {
      int v10 = v9;
    }
    unsigned int v8 = v10 | 0xFFF800;
  }
  else
  {
    if (a2[3])
    {
      int v7 = 40;
LABEL_6:
      if (a2[4]) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = 16775294;
      }
      goto LABEL_19;
    }
    if (*a2 | a2[2] | a2[1]) {
      unsigned int v8 = 16775272;
    }
    else {
      unsigned int v8 = 16775168;
    }
  }
LABEL_19:
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this)) {
    v8 &= 0x7FFu;
  }
  if (a2[6]) {
    uint64_t v11 = v8 & 0x7FF;
  }
  else {
    uint64_t v11 = v8;
  }
  if (ZinIrOpLayer::IsNELayer(this) && (CFTypeID v13 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
  {
    int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v13);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v15)) != 0) {
      return v11 & 0xFFFFDFFF;
    }
    else {
      return v11;
    }
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v12);
  }
  return v11;
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1271)) {
    int v3 = 50331682;
  }
  else {
    int v3 = 34;
  }
  if (a2[1]) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (*a2 | a2[2]) {
    return v4 | 8;
  }
  else {
    return v4;
  }
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  if (a2[5])
  {
    int v7 = *a2 | a2[2];
    if (v7) {
      int v8 = 10;
    }
    else {
      int v8 = 0;
    }
    if (a2[1]) {
      v8 |= 0x20u;
    }
    BOOL v9 = v7 == 0;
    int v10 = v8 | 0x40;
    if (!v9) {
      int v10 = v8;
    }
    if (!a2[3])
    {
      unsigned int v11 = v10 | 0xFFF800;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (a2[3])
  {
    int v10 = 0;
LABEL_13:
    int v12 = v10 | 0xFFF87E;
    int v13 = v10 | 0x28;
    if (a2[4]) {
      unsigned int v11 = v13;
    }
    else {
      unsigned int v11 = v12;
    }
    goto LABEL_16;
  }
  if (*a2 | a2[2] | a2[1]) {
    unsigned int v11 = 16775272;
  }
  else {
    unsigned int v11 = 16775168;
  }
LABEL_16:
  int v14 = *(_DWORD *)(*((void *)this + 8) + 8);
  if (v14 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this)) {
      v11 &= 0x7FFu;
    }
    int v14 = *(_DWORD *)(*((void *)this + 8) + 8);
  }
  if (a2[6]) {
    uint64_t v15 = v11 & 0x7FF;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v14 == 81)
  {
    uint64_t v16 = *((void *)this + 63);
    if (v16)
    {
      if (*(_DWORD *)(*(void *)(v16 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 3))
      {
        unsigned int v17 = *(_DWORD *)(*(void *)(*((void *)this + 63) + 64) + 12);
        if (v17 <= 6)
        {
          if (((1 << v17) & 0x36) != 0)
          {
            uint64_t v15 = v15 & 0xFFFF7FFF;
          }
          else if (v17 == 6)
          {
            BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v29) {
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v29, v30, v31, v32, v33, v34, v35, v36);
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 656))(this))
    {
      if (*(_DWORD *)(*(void *)(**((void **)this + 11) + 64) + 8) == 29)
      {
        uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(void *)(InputTensor + 80)
           * *(void *)(InputTensor + 48)
           * *(void *)(InputTensor + 56)
           * *(void *)(InputTensor + 64)
           * *(void *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          uint64_t v19 = *(void *)(InputTensor + 112);
          int64_t v20 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ZinIrConstData::GetDataAt<half>(v19);
          int v22 = v21 & 0x7FFF;
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          if (v22 == 31744) {
            uint64_t v15 = v15 & 0xFFF77FFF;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 93)
  {
    uint64_t v23 = *((void *)this + 54);
    if (v23)
    {
      if (*(unsigned char *)(*(void *)(v23 + 64) + 72)) {
        uint64_t v15 = v15 & 0xFF7FCFFF;
      }
      else {
        uint64_t v15 = v15;
      }
    }
  }
  if (ZinIrOpLayer::IsNELayer(this) && (unint64_t v25 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
  {
    int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v25);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v27)) != 0) {
      return v15 & 0xFFFFDFFF;
    }
    else {
      return v15;
    }
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v24);
  }
  return v15;
}

void sub_2111C1418(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV4 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2[1];
  if (*a2 | a2[2]) {
    return (v2 << 26) | 8u;
  }
  else {
    return (v2 << 26);
  }
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinNEBypassLayer *this, uint64_t a4)
{
  int v6 = *a2 | a2[2];
  BOOL v7 = v6 == 0;
  BOOL v8 = v6 != 0;
  int v9 = v7;
  if (a2[1]) {
    int v10 = (8 * v8) | 0x20;
  }
  else {
    int v10 = 8 * v8;
  }
  if (a2[5])
  {
    if (!v9) {
      v10 |= 0xAu;
    }
    if (a2[1]) {
      v10 |= 0x20u;
    }
    if (v9) {
      v10 |= 0x40u;
    }
    if (!a2[3])
    {
      int v11 = v10 | 0xFFF800;
LABEL_24:
      if (*(unsigned char *)(a4 + 2061)) {
        unsigned int v14 = v11 | 0x20;
      }
      else {
        unsigned int v14 = v11;
      }
      goto LABEL_27;
    }
  }
  else if (!a2[3])
  {
    if ((v9 & (a2[1] == 0)) != 0) {
      int v15 = 16775168;
    }
    else {
      int v15 = 16775232;
    }
    int v11 = v10 | v15;
    goto LABEL_24;
  }
  int v12 = v10 | 0xFFF87E;
  int v13 = v10 | 0x28;
  if (a2[4]) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v12;
  }
LABEL_27:
  int v16 = *(_DWORD *)(*((void *)this + 8) + 8);
  if (v16 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this)) {
      v14 &= 0xFF0007FF;
    }
    int v16 = *(_DWORD *)(*((void *)this + 8) + 8);
  }
  if (a2[6]) {
    uint64_t v17 = v14 & 0xFF0007FF;
  }
  else {
    uint64_t v17 = v14;
  }
  if (v16 == 81)
  {
    uint64_t v18 = *((void *)this + 63);
    if (v18)
    {
      if (*(_DWORD *)(*(void *)(v18 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 3))
      {
        unsigned int v19 = *(_DWORD *)(*(void *)(*((void *)this + 63) + 64) + 12);
        if (v19 <= 6)
        {
          if (((1 << v19) & 0x36) != 0)
          {
            uint64_t v17 = v17 & 0xFFFF7FFF;
          }
          else if (v19 == 6)
          {
            BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v27) {
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v27, v28, v29, v30, v31, v32, v33, v34);
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(void *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(void *)this + 656))(this))
    {
      if (*(_DWORD *)(*(void *)(**((void **)this + 11) + 64) + 8) == 29)
      {
        uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(void *)(InputTensor + 80)
           * *(void *)(InputTensor + 48)
           * *(void *)(InputTensor + 56)
           * *(void *)(InputTensor + 64)
           * *(void *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          uint64_t v21 = *(void *)(InputTensor + 112);
          int v22 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ZinIrConstData::GetDataAt<half>(v21);
          int v24 = v23 & 0x7FFF;
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          if (v24 == 31744) {
            uint64_t v17 = v17 & 0xFFF77FFF;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 93)
  {
    uint64_t v25 = *((void *)this + 54);
    if (v25)
    {
      if (*(unsigned char *)(*(void *)(v25 + 64) + 72)) {
        return v17 & 0xFF7FCFFF;
      }
      else {
        return v17;
      }
    }
  }
  return v17;
}

void sub_2111C17DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDramLogEventFlags(uint64_t a1, unsigned __int8 *a2, ZinNEBypassLayer *this, const ZinNELayer *a4)
{
  int v8 = a2[1];
  if (a2[1])
  {
    if (*((unsigned char *)a4 + 1271)) {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) | 0x20;
    }
    else {
      int v8 = 32;
    }
  }
  if (*a2 | a2[2]) {
    v8 |= 8u;
  }
  if (a2[3])
  {
    int v9 = v8 | 0xFFF87E;
    v8 |= 0x28u;
    if (!a2[4]) {
      int v8 = v9;
    }
  }
  if (*((unsigned char *)a4 + 2061)) {
    int v10 = v8 | 0x20;
  }
  else {
    int v10 = v8;
  }
  if (!a2[6])
  {
    int v11 = *(_DWORD *)(*((void *)this + 8) + 8);
    if (v11 == 92)
    {
      if (ZinNEBypassLayer::ModifiesValues(this)) {
        v10 |= 0xFFF800u;
      }
      else {
        v10 &= 0xFF0007FF;
      }
      int v11 = *(_DWORD *)(*((void *)this + 8) + 8);
    }
    else
    {
      v10 |= 0xFFF800u;
    }
    if (v11 == 81)
    {
      uint64_t v12 = *((void *)this + 63);
      if (v12)
      {
        if (*(_DWORD *)(*(void *)(v12 + 64) + 44) == 1
          && (*(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 3))
        {
          unsigned int v13 = *(_DWORD *)(*(void *)(*((void *)this + 63) + 64) + 12);
          if (v13 <= 6)
          {
            if (((1 << v13) & 0x36) != 0)
            {
              v10 &= ~0x8000u;
            }
            else if (v13 == 6)
            {
              BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v27) {
                ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v27, v28, v29, v30, v31, v32, v33, v34);
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((void *)this + 8) + 8) == 81
      && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(void *)this + 568))(this) & 1) == 0)
    {
      if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(void *)this + 656))(this))
      {
        if (*(_DWORD *)(*(void *)(**((void **)this + 11) + 64) + 8) == 29)
        {
          uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
          if (*(void *)(InputTensor + 80)
             * *(void *)(InputTensor + 48)
             * *(void *)(InputTensor + 56)
             * *(void *)(InputTensor + 64)
             * *(void *)(InputTensor + 72) == 1
            && *(_DWORD *)(InputTensor + 88) == 3)
          {
            uint64_t v15 = *(void *)(InputTensor + 112);
            int v16 = *(std::__shared_weak_count **)(InputTensor + 120);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ZinIrConstData::GetDataAt<half>(v15);
            int v18 = v17 & 0x7FFF;
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            if (v18 == 31744) {
              v10 &= 0xFFF77FFF;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((void *)this + 8) + 8) == 93)
    {
      uint64_t v19 = *((void *)this + 54);
      if (v19)
      {
        if (*(unsigned char *)(*(void *)(v19 + 64) + 72)) {
          v10 &= 0xFF7FCFFF;
        }
      }
    }
    if (ZinIrOpLayer::IsNELayer(this) && (uint64_t v21 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
    {
      int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v21);
      BOOL CanInvalidPixelsBeProcessed = ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v23);
      unsigned int v25 = v10 & 0xFFFFDFFF;
      if (!CanInvalidPixelsBeProcessed) {
        unsigned int v25 = v10;
      }
      if (IsUndefinedOrInfForSomeValues) {
        int v10 = v25;
      }
    }
    else
    {
      ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v20);
    }
  }
  return v10 & ~(*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1);
}

void sub_2111C1BBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV5 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDisallowedEventFlagsForDramLog(ZinLogEventFlags::EventFlagsV5 *this)
{
  return 67108865;
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2[1];
  if (*a2 | a2[2]) {
    return (v2 << 26) | 8u;
  }
  else {
    return (v2 << 26);
  }
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7 = *a2 | a2[2];
  BOOL v8 = v7 == 0;
  BOOL v9 = v7 != 0;
  int v10 = v8;
  if (a2[1]) {
    int v11 = (8 * v9) | 0x20;
  }
  else {
    int v11 = 8 * v9;
  }
  if (a2[5])
  {
    if (!v10) {
      v11 |= 0xAu;
    }
    if (a2[1]) {
      v11 |= 0x20u;
    }
    if (v10) {
      v11 |= 0x40u;
    }
    if (!a2[3])
    {
      unsigned int v12 = v11 | 0xFFF800;
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (a2[3])
  {
LABEL_17:
    int v13 = v11 | 0xFFF87E;
    int v14 = v11 | 0x28;
    if (a2[4]) {
      unsigned int v12 = v14;
    }
    else {
      unsigned int v12 = v13;
    }
    goto LABEL_20;
  }
  if ((v10 & (a2[1] == 0)) != 0) {
    int v30 = 16775168;
  }
  else {
    int v30 = 16775232;
  }
  unsigned int v12 = v11 | v30;
LABEL_20:
  int v15 = *(_DWORD *)(*((void *)this + 8) + 8);
  if (v15 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this)) {
      v12 &= 0xFF0007FF;
    }
    int v15 = *(_DWORD *)(*((void *)this + 8) + 8);
  }
  if (a2[6]) {
    uint64_t v16 = v12 & 0xFF0007FF;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 == 81)
  {
    uint64_t v17 = *((void *)this + 63);
    if (v17)
    {
      if (*(_DWORD *)(*(void *)(v17 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 3))
      {
        unsigned int v18 = *(_DWORD *)(*(void *)(*((void *)this + 63) + 64) + 12);
        if (v18 <= 6)
        {
          if (((1 << v18) & 0x36) != 0)
          {
            uint64_t v16 = v16 & 0xFFFF7FFF;
          }
          else if (v18 == 6)
          {
            BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v31) {
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v31, v32, v33, v34, v35, v36, v37, v38);
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 656))(this))
    {
      if (*(_DWORD *)(*(void *)(**((void **)this + 11) + 64) + 8) == 29)
      {
        uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(void *)(InputTensor + 80)
           * *(void *)(InputTensor + 48)
           * *(void *)(InputTensor + 56)
           * *(void *)(InputTensor + 64)
           * *(void *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          uint64_t v20 = *(void *)(InputTensor + 112);
          uint64_t v21 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ZinIrConstData::GetDataAt<half>(v20);
          int v23 = v22 & 0x7FFF;
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          if (v23 == 31744) {
            uint64_t v16 = v16 & 0xFFF77FFF;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((void *)this + 8) + 8) == 93)
  {
    uint64_t v24 = *((void *)this + 54);
    if (v24)
    {
      if (*(unsigned char *)(*(void *)(v24 + 64) + 72)) {
        uint64_t v16 = v16 & 0xFF7FCFFF;
      }
      else {
        uint64_t v16 = v16;
      }
    }
  }
  if (ZinIrOpLayer::IsNELayer(this) && (uint64_t v26 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
  {
    int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v26);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v28)) != 0) {
      uint64_t v16 = v16 & 0xFFFFDFFF;
    }
    else {
      uint64_t v16 = v16;
    }
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v25);
  }
  if (*((unsigned char *)a4 + 1602))
  {
    if (*(unsigned char *)(*((void *)this + 33) + 1648)) {
      return v16 | 0x10000000;
    }
    else {
      return v16;
    }
  }
  return v16;
}

void sub_2111C1FE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDramLogEventFlags(uint64_t a1, unsigned __int8 *a2, ZinNEBypassLayer *this, const ZinNELayer *a4)
{
  int v8 = a2[1];
  if (a2[1])
  {
    if (*((unsigned char *)a4 + 1271)) {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) | 0x20;
    }
    else {
      int v8 = 32;
    }
  }
  if (*a2 | a2[2]) {
    int v9 = v8 | 8;
  }
  else {
    int v9 = v8;
  }
  if (a2[3])
  {
    if (a2[4]) {
      v9 |= 0x28u;
    }
    else {
      v9 |= 0xFFF87Eu;
    }
  }
  if (!a2[6])
  {
    int v10 = *(_DWORD *)(*((void *)this + 8) + 8);
    if (v10 == 92)
    {
      if (ZinNEBypassLayer::ModifiesValues(this)) {
        v9 |= 0xFFF800u;
      }
      else {
        v9 &= 0xFF0007FF;
      }
      int v10 = *(_DWORD *)(*((void *)this + 8) + 8);
    }
    else
    {
      v9 |= 0xFFF800u;
    }
    if (v10 == 81)
    {
      uint64_t v11 = *((void *)this + 63);
      if (v11)
      {
        if (*(_DWORD *)(*(void *)(v11 + 64) + 44) == 1
          && (*(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88) == 3))
        {
          unsigned int v12 = *(_DWORD *)(*(void *)(*((void *)this + 63) + 64) + 12);
          if (v12 <= 6)
          {
            if (((1 << v12) & 0x36) != 0)
            {
              v9 &= ~0x8000u;
            }
            else if (v12 == 6)
            {
              BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v26) {
                ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v26, v27, v28, v29, v30, v31, v32, v33);
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((void *)this + 8) + 8) == 81
      && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(void *)this + 568))(this) & 1) == 0)
    {
      if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(void *)this + 656))(this))
      {
        if (*(_DWORD *)(*(void *)(**((void **)this + 11) + 64) + 8) == 29)
        {
          uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
          if (*(void *)(InputTensor + 80)
             * *(void *)(InputTensor + 48)
             * *(void *)(InputTensor + 56)
             * *(void *)(InputTensor + 64)
             * *(void *)(InputTensor + 72) == 1
            && *(_DWORD *)(InputTensor + 88) == 3)
          {
            uint64_t v14 = *(void *)(InputTensor + 112);
            int v15 = *(std::__shared_weak_count **)(InputTensor + 120);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ZinIrConstData::GetDataAt<half>(v14);
            int v17 = v16 & 0x7FFF;
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            if (v17 == 31744) {
              v9 &= 0xFFF77FFF;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((void *)this + 8) + 8) == 93)
    {
      uint64_t v18 = *((void *)this + 54);
      if (v18)
      {
        if (*(unsigned char *)(*(void *)(v18 + 64) + 72)) {
          v9 &= 0xFF7FCFFF;
        }
      }
    }
    if (ZinIrOpLayer::IsNELayer(this) && (uint64_t v20 = (ZinActivationLayer *)*((void *)this + 49)) != 0)
    {
      int IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v20);
      BOOL CanInvalidPixelsBeProcessed = ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v22);
      unsigned int v24 = v9 & 0xFFFFDFFF;
      if (!CanInvalidPixelsBeProcessed) {
        unsigned int v24 = v9;
      }
      if (IsUndefinedOrInfForSomeValues) {
        int v9 = v24;
      }
    }
    else
    {
      ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v19);
    }
  }
  if (*((unsigned char *)a4 + 1602) && *(unsigned char *)(*((void *)this + 33) + 1648)) {
    v9 |= 0x10000000u;
  }
  return v9 & ~(*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1);
}

void sub_2111C23D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV6 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDisallowedEventFlagsForDramLog(ZinLogEventFlags::EventFlagsV6 *this)
{
  return 0x4000000;
}

void ZinLogEventFlags::CreateEventFlagGenerator(int a1)
{
  switch(a1)
  {
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    default:
      operator new();
  }
}

void ZinLogEventFlags::GetEventFlags(uint64_t a1)
{
}

void sub_2111C270C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer()
{
}

{
  ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer();
}

void sub_2111C28AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va, a8);
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  ZinLayerNormLayer::ZinLayerNormLayer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinNECrossCorrelationLayer::LowerEngine(ZinIrOpLayerGraph *a1, ZinTextureLayerUtils *a2, ZinANELayer ***a3)
{
  uint64_t result = ZinANELayer::LowerEngine((uint64_t)a1, a2, a3);
  if (!result)
  {
    return ZinMirCrossCorrelation::Transform(a2, a1, v6);
  }
  return result;
}

void ZinNECrossCorrelationLayer::Clone(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 16);
  uint64_t v6 = a1[25];
  if (*((char *)a3 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  int v8 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v7 + 8);
  if (v49 < 0) {
    int v8 = (long long *)v48;
  }
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0) {
      int v9 = a3;
    }
    else {
      int v9 = *a3;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_texture");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v6, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v10 = a1[46];
  if (*((char *)a3 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v11 = (size_t)a3[1];
  }
  unsigned int v12 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v11 + 11);
  if (v49 < 0) {
    unsigned int v12 = (long long *)v48;
  }
  if (v11)
  {
    if (*((char *)a3 + 23) >= 0) {
      int v13 = a3;
    }
    else {
      int v13 = *a3;
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "_ibroadcast");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v10, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v14 = a1[47];
  if (*((char *)a3 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v15 = (size_t)a3[1];
  }
  __int16 v16 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v15 + 6);
  if (v49 < 0) {
    __int16 v16 = (long long *)v48;
  }
  if (v15)
  {
    if (*((char *)a3 + 23) >= 0) {
      int v17 = a3;
    }
    else {
      int v17 = *a3;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "_irelu");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v14, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v18 = a1[54];
  if (*((char *)a3 + 23) >= 0) {
    size_t v19 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v19 = (size_t)a3[1];
  }
  uint64_t v20 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v19 + 3);
  if (v49 < 0) {
    uint64_t v20 = (long long *)v48;
  }
  if (v19)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = *a3;
    }
    memmove(v20, v21, v19);
  }
  *(_DWORD *)((char *)v20 + v19) = 6513503;
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v18, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v22 = (*(uint64_t (**)(void *))(*a1 + 576))(a1);
  if (*((char *)a3 + 23) >= 0) {
    size_t v23 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v23 = (size_t)a3[1];
  }
  unsigned int v24 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v23 + 6);
  if (v49 < 0) {
    unsigned int v24 = (long long *)v48;
  }
  if (v23)
  {
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v25 = a3;
    }
    else {
      unsigned int v25 = *a3;
    }
    memmove(v24, v25, v23);
  }
  strcpy((char *)v24 + v23, "_round");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v22, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v26 = a1[48];
  if (*((char *)a3 + 23) >= 0) {
    size_t v27 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v27 = (size_t)a3[1];
  }
  uint64_t v28 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v27 + 4);
  if (v49 < 0) {
    uint64_t v28 = (long long *)v48;
  }
  if (v27)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v29 = a3;
    }
    else {
      uint64_t v29 = *a3;
    }
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "_goc");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v26, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v30 = a1[49];
  if (*((char *)a3 + 23) >= 0) {
    size_t v31 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v31 = (size_t)a3[1];
  }
  uint64_t v32 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v31 + 11);
  if (v49 < 0) {
    uint64_t v32 = (long long *)v48;
  }
  if (v31)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v33 = a3;
    }
    else {
      uint64_t v33 = *a3;
    }
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, "_activation");
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v30, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  uint64_t v34 = (*(uint64_t (**)(void *))(*a1 + 416))(a1);
  if (*((char *)a3 + 23) >= 0) {
    size_t v35 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v35 = (size_t)a3[1];
  }
  uint64_t v36 = &v47;
  std::string::basic_string[abi:ne180100]((uint64_t)&v47, v35 + 1);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v36 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if (v35)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v37 = a3;
    }
    else {
      uint64_t v37 = *a3;
    }
    memmove(v36, v37, v35);
  }
  *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v44, "necc_transp");
  uint64_t v38 = std::string::append(&v44, "_xfm", 4uLL);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  int64_t v46 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    uint64_t v40 = __p;
  }
  else {
    uint64_t v40 = (void **)__p[0];
  }
  if (v46 >= 0) {
    std::string::size_type v41 = HIBYTE(v46);
  }
  else {
    std::string::size_type v41 = (std::string::size_type)__p[1];
  }
  uint64_t v42 = std::string::append(&v47, (const std::string::value_type *)v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  int64_t v49 = v42->__r_.__value_.__r.__words[2];
  long long v48 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v5, v34, (const void **)&v48);
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_2111C317C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v35 - 112), 0);
  _Unwind_Resume(a1);
}

__n128 ZinNECrossCorrelationLayer::ExecutionOrderSort@<Q0>(__n128 *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = this[12].n128_u64[1];
  __n128 v7 = this[23];
  __n128 v8 = this[24];
  __n128 v9 = this[27];
  uint64_t v4 = (*(uint64_t (**)(void))(this->n128_u64[0] + 416))();
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = (char *)operator new(0x40uLL);
  a2[1] = v5 + 64;
  a2[2] = v5 + 64;
  *(void *)uint64_t v5 = v3;
  *(__n128 *)(v5 + 8) = v7;
  *(__n128 *)(v5 + 24) = v9;
  __n128 result = v8;
  *(__n128 *)(v5 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v8;
  *((void *)v5 + 7) = v4;
  *a2 = v5;
  return result;
}

void ZinNECrossCorrelationLayer::SpatialSplitCopy(ZinNECrossCorrelationLayer *this, const TiledLayerTensorRegions *a2)
{
}

void sub_2111C3498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNECrossCorrelationLayer::HasValidOutputTranspose(ZinNECrossCorrelationLayer *this)
{
  if (!(*(unsigned int (**)(ZinNECrossCorrelationLayer *))(*(void *)this + 408))(this)
    || !*((void *)this + 33))
  {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(ZinNECrossCorrelationLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 48;
  uint64_t v3 = *(unsigned int *)((*(uint64_t (**)(ZinNECrossCorrelationLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 88);
  Hal = ZinIrTarget::GetHal(*((uint64_t **)this + 2), *(ZinIrTarget **)(*((void *)this + 2) + 160));
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v6 = *(uint64_t (**)(ZinNECrossCorrelationLayer *, uint64_t, uint64_t, char *, uint64_t, void))(*(void *)this + 600);

  return v6(this, v2, v3, (char *)this + 264, v5, 0);
}

void ZinNECrossCorrelationLayer::~ZinNECrossCorrelationLayer(ZinEngineLayerMirInfo **this)
{
  ZinANELayer::~ZinANELayer(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinIrOpt::DilatedConvDetection(void *a1, uint64_t a2)
{
  v146[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v122, "pad");
  v123[0] = &unk_26C3316E0;
  v123[3] = v123;
  int v44 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v124, &v44, 1);
  std::string::basic_string[abi:ne180100]<0>(v125, "space_to_channel");
  v126[0] = &unk_26C331738;
  void v126[3] = v126;
  int v43 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v127, &v43, 1);
  std::string::basic_string[abi:ne180100]<0>(v128, "transpose1");
  v129[0] = &unk_26C3319A0;
  v129[3] = v129;
  int v42 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v130, &v42, 1);
  std::string::basic_string[abi:ne180100]<0>(v131, "conv");
  v132[0] = &unk_26C3319F8;
  void v132[3] = v132;
  int v41 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v133, &v41, 1);
  std::string::basic_string[abi:ne180100]<0>(v134, "transpose2");
  v135[0] = &unk_26C3319A0;
  v135[3] = v135;
  int v40 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v136, &v40, 1);
  std::string::basic_string[abi:ne180100]<0>(v137, "channel_to_space");
  v138[0] = &unk_26C331840;
  void v138[3] = v138;
  int v39 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v139, &v39, 1);
  std::string::basic_string[abi:ne180100]<0>(v140, "view");
  v141[0] = &unk_26C331948;
  v141[3] = v141;
  int v38 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v142, &v38, 1);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::string v47 = 0;
  long long v88 = &v45;
  char v89 = 0;
  uint64_t v45 = (char *)operator new(0x2A0uLL);
  uint64_t v46 = (uint64_t)v45;
  std::string v47 = v45 + 672;
  uint64_t v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v47, (uint64_t)v122, (uint64_t)v143, (uint64_t)v45);
  v121[0] = &unk_26C38C0F8;
  v121[3] = v121;
  ZinLinearPattern::ZinLinearPattern(v143, &v45, a2, 0, v121, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v143, &v48);
  v145[0] = v48;
  long long v48 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v88, "pad");
  v90[0] = &unk_26C3316E0;
  v90[3] = v90;
  int v33 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v91, &v33, 1);
  std::string::basic_string[abi:ne180100]<0>(v92, "reshape_1");
  v93[0] = &unk_26C331A50;
  v93[3] = v93;
  int v32 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v94, &v32, 1);
  std::string::basic_string[abi:ne180100]<0>(v95, "transpose_1");
  v96[0] = &unk_26C331AA8;
  v96[3] = v96;
  int v31 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v97, &v31, 1);
  std::string::basic_string[abi:ne180100]<0>(v98, "transpose_2");
  v99[0] = &unk_26C331B00;
  v99[3] = v99;
  int v30 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v100, &v30, 1);
  std::string::basic_string[abi:ne180100]<0>(v101, "conv");
  v102[0] = &unk_26C3319F8;
  void v102[3] = v102;
  int v29 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v103, &v29, 1);
  std::string::basic_string[abi:ne180100]<0>(v104, "goc");
  v105[0] = &unk_26C38C178;
  v105[3] = v105;
  int v28 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v106, &v28, 1);
  std::string::basic_string[abi:ne180100]<0>(v107, "activation");
  v108[0] = &unk_26C38C1E8;
  void v108[3] = v108;
  int v27 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v109, &v27, 1);
  std::string::basic_string[abi:ne180100]<0>(v110, "transpose_3");
  v111[0] = &unk_26C331B58;
  v111[3] = v111;
  int v26 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v112, &v26, 1);
  std::string::basic_string[abi:ne180100]<0>(v113, "transpose_4");
  v114[0] = &unk_26C38C268;
  void v114[3] = v114;
  int v25 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v115, &v25, 1);
  std::string::basic_string[abi:ne180100]<0>(v116, "reshape_2");
  v117[0] = &unk_26C38C2D8;
  void v117[3] = v117;
  int v24 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v118, &v24, 1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v57 = &v34;
  char v58 = 0;
  uint64_t v34 = (char *)operator new(0x3C0uLL);
  uint64_t v35 = (uint64_t)v34;
  uint64_t v36 = v34 + 960;
  uint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v36, (uint64_t)&v88, (uint64_t)v119, (uint64_t)v34);
  v87[0] = &unk_26C38C348;
  v87[3] = v87;
  ZinLinearPattern::ZinLinearPattern(v119, &v34, a2, 0, v87, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v119, &v37);
  v145[1] = v37;
  long long v37 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v57, "pad");
  v59[0] = &unk_26C3316E0;
  v59[3] = v59;
  int v19 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v60, &v19, 1);
  std::string::basic_string[abi:ne180100]<0>(v61, "space_to_batch");
  v62[0] = &unk_26C331790;
  v62[3] = v62;
  int v18 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v63, &v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v64, "quant_1");
  v65[0] = &unk_26C331898;
  v65[3] = v65;
  int v17 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v66, &v17, 1);
  std::string::basic_string[abi:ne180100]<0>(v67, "dequant_1");
  v68[0] = &unk_26C3318F0;
  v68[3] = v68;
  int v16 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v69, &v16, 1);
  std::string::basic_string[abi:ne180100]<0>(v70, "conv");
  v71[0] = &unk_26C3319F8;
  v71[3] = v71;
  int v15 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v72, &v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v73, "quant_2");
  v74[0] = &unk_26C331898;
  v74[3] = v74;
  int v14 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v75, &v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v76, "dequant_2");
  v77[0] = &unk_26C3318F0;
  v77[3] = v77;
  int v13 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v78, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v79, "batch_to_space");
  v80[0] = &unk_26C3317E8;
  v80[3] = v80;
  int v12 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v81, &v12, 1);
  std::string::basic_string[abi:ne180100]<0>(v82, "view");
  v83[0] = &unk_26C331948;
  v83[3] = v83;
  int v11 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v84, &v11, 1);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v52 = &v20;
  v53[0] = 0;
  uint64_t v20 = (char *)operator new(0x360uLL);
  uint64_t v21 = (uint64_t)v20;
  uint64_t v22 = v20 + 864;
  uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v22, (uint64_t)&v57, (uint64_t)v85, (uint64_t)v20);
  v56[0] = &unk_26C38C0F8;
  unsigned int v56[3] = v56;
  ZinLinearPattern::ZinLinearPattern(v85, &v20, a2, 0, v56, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v85, &v23);
  v145[2] = v23;
  long long v23 = 0uLL;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int64_t v49 = 0;
  uint64_t v52 = (char **)&v49;
  v53[0] = 0;
  int64_t v49 = operator new(0x30uLL);
  uint64_t v50 = v49;
  uint64_t v51 = v49 + 6;
  uint64_t v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v51, v145, v146, v49);
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    uint64_t v5 = *(std::__shared_weak_count **)((char *)v145 + i);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  v85[0] = &unk_26C349BA8;
  uint64_t v52 = (char **)v86;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  ZinPattern::~ZinPattern((ZinPattern *)v85);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v56);
  uint64_t v52 = &v20;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  unint64_t v6 = 108;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v56[v6 - 1]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v53[v6 * 8]);
    if ((char)v53[v6 * 8 - 1] < 0) {
      operator delete((&v51)[v6]);
    }
    v6 -= 12;
  }
  while (v6 * 8);
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  v119[0] = &unk_26C349BA8;
  uint64_t v57 = (char **)v120;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  ZinPattern::~ZinPattern((ZinPattern *)v119);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v87);
  uint64_t v57 = &v34;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  uint64_t v7 = 120;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v86[v7 * 8 + 16]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v85[v7 + 21]);
    if (SHIBYTE(v85[v7 + 20]) < 0) {
      operator delete((void *)v85[v7 + 18]);
    }
    v7 -= 12;
  }
  while (v7 * 8);
  if (*((void *)&v48 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  }
  v143[0] = &unk_26C349BA8;
  long long v88 = (char **)&v144;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  ZinPattern::~ZinPattern((ZinPattern *)v143);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v121);
  long long v88 = &v45;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  uint64_t v8 = 84;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v120[v8 * 8 + 16]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v119[v8 + 21]);
    if (SHIBYTE(v119[v8 + 20]) < 0) {
      operator delete((void *)v119[v8 + 18]);
    }
    v8 -= 12;
  }
  while (v8 * 8);
  v54[0] = &unk_26C38C3C8;
  v54[1] = &v49;
  v54[2] = a2;
  long long v55 = v54;
  uint64_t v9 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v54, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v54);
  long long v88 = (char **)&v49;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  return v9;
}

void sub_2111C43C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](&a45);
  *(void *)(v46 + 1336) = v45;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5B0]);
  _Unwind_Resume(a1);
}

void sub_2111C4700()
{
}

void sub_2111C471C()
{
}

void sub_2111C472C()
{
}

void sub_2111C473C()
{
  *(void *)(v1 + 88) = v0;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5B0]);
  JUMPOUT(0x2111C4680);
}

void sub_2111C4760()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc(v0);
  JUMPOUT(0x2111C46A0);
}

void sub_2111C47AC()
{
}

void sub_2111C47BC()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C3316E0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3316E0;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 64);
  if (*(_DWORD *)(v2 + 8) != 58
    || *(_DWORD *)(v2 + 208)
    || *(_DWORD *)(v2 + 204)
    || *(_DWORD *)(v2 + 200)
    || *(_DWORD *)(v2 + 196))
  {
LABEL_6:
    int v3 = 0;
    return v3 | 0x100u;
  }
  uint64_t v5 = *(_DWORD **)(v2 + 216);
  unint64_t v6 = *(_DWORD **)(v2 + 224);
  if (v5 != v6)
  {
    while (v5[1] == 7)
    {
      _ZF = *v5 > 4u || ((1 << *v5) & 0x1A) == 0;
      if (_ZF) {
        break;
      }
      v5 += 2;
      if (v5 == v6) {
        goto LABEL_15;
      }
    }
    goto LABEL_6;
  }
LABEL_15:
  __asm { FCMP            H0, #0 }
  int v3 = _ZF;
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331738;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331738;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 40) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C3319A0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3319A0;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) != 37) {
    goto LABEL_13;
  }
  uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v2);
  uint64_t v4 = *(_DWORD **)(ReshapeInfo + 16);
  if (*(void *)(ReshapeInfo + 24) - (void)v4 != 16) {
    goto LABEL_13;
  }
  int v5 = v4[1];
  if (v5 == 2)
  {
    if (*v4) {
      goto LABEL_13;
    }
  }
  else if (v5 || *v4 != 2)
  {
    goto LABEL_13;
  }
  int v6 = v4[3];
  if (v6 != 2)
  {
    if (!v6 && v4[2] == 2) {
      goto LABEL_11;
    }
LABEL_13:
    int v7 = 0;
    return v7 | 0x100u;
  }
  if (v4[2]) {
    goto LABEL_13;
  }
LABEL_11:
  int v7 = 1;
  return v7 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C3319F8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3319F8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v6 = !*(_DWORD *)(*(void *)(v2 + 64) + 8)
    && (int v3 = *(_DWORD **)(v2 + 136), v3[82] == 1)
    && v3[83] == 1
    && v3[84] == 1
    && v3[85] == 1
    && v3[86] == 1
    && v3[87] == 1
    && (v3[96] == 1 ? (BOOL v4 = v3[97] == 1) : (BOOL v4 = 0), v4 ? (v5 = v3[98] == 1) : (v5 = 0), v5)
    && !ZinKernelDescriptor::HasPadding((ZinKernelDescriptor *)(v3 + 44));
  return v6 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331840;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331840;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 41) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331948;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331948;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 36) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C0F8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C0F8;
}

BOOL std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_channel");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channel_to_space");
  BOOL v6 = (void *)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose1");
  uint64_t v7 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose2");
  uint64_t v8 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  uint64_t v9 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_to_space");
  uint64_t v10 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  if (SingleMatch) {
    BOOL v11 = v6 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v13 = v11 || v7 == 0 || v8 == 0;
  int v14 = !v13;
  if (v13)
  {
    BOOL v17 = 0;
    if (!v9 || !v10) {
      return v17;
    }
    int v15 = *(_DWORD **)(v9 + 64);
    int v16 = *(_DWORD **)(v10 + 64);
  }
  else
  {
    int v15 = *(_DWORD **)(SingleMatch + 64);
    int v16 = (_DWORD *)v6[8];
  }
  if (v15[3] != v16[3] || v15[4] != v16[4] || v15[5] != v16[5]) {
    return 0;
  }
  uint64_t v63 = *(void *)(v15 + 3);
  int v64 = v15[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  uint64_t v18 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  int v19 = (void *)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = v19[17];
  uint64_t v21 = *(_DWORD **)(v18 + 64);
  std::string::basic_string[abi:ne180100]<0>(__p, "view");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v61);
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v60 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v59 = 0u;
  uint64_t v22 = v61;
  if (v61 == v62)
  {
    uint64_t v25 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = v61;
    do
    {
      uint64_t v27 = *v26++;
      int v28 = *(void **)(v27 + 64);
      v23 += v28[5];
      v24 += v28[4];
      v25 += v28[6];
    }
    while (v26 != v62);
    *(void *)&long long v59 = v24;
    *((void *)&v59 + 1) = v23;
    uint64_t v60 = v25;
  }
  if (v23 <= (int)v21[43] && v24 <= (int)v21[45] && v25 <= (int)v21[47])
  {
    ZinIrOpt::GetDilatedConvPadding((_DWORD *)(v20 + 248), __p, v21 + 43, (int *)&v63, v57);
    uint64_t v30 = (*(uint64_t (**)(void, void, void))(***(void ***)(v18 + 88) + 32))(**(void **)(v18 + 88), 0, 0);
    int8x16_t v31 = *(int8x16_t *)(v30 + 64);
    v55[0] = *(int8x16_t *)(v30 + 48);
    v55[1] = v31;
    uint64_t v56 = *(void *)(v30 + 80);
    if (v14) {
      v55[0] = vextq_s8(v55[0], v55[0], 8uLL);
    }
    uint64_t v32 = *(void *)(v20 + 264);
    v54[0] = *(void *)(v20 + 272);
    v54[1] = v32;
    v54[2] = *(void *)(v20 + 280);
    uint64_t v33 = (*(uint64_t (**)(void *, void, void))(*v19 + 32))(v19, 0, 0);
    ZinGetOutputTensorDimension((uint64_t)v55, v54, (unsigned int *)(v20 + 328), (unsigned int *)(v20 + 340), v57, *(void *)(v33 + 56), (int *)&v63, (uint64_t)v53);
    if (!v14) {
      BOOL v6 = (void *)v10;
    }
    if (v61 != v62) {
      BOOL v6 = (void *)*(v62 - 1);
    }
    uint64_t v34 = v53[3];
    uint64_t v35 = *(void *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 72);
    uint64_t v36 = v53[2];
    uint64_t v37 = *(void *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 64);
    uint64_t v38 = v53[4];
    uint64_t v39 = (*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0);
    BOOL v42 = v34 == v35 && v36 == v37 && v38 == *(void *)(v39 + 80);
    uint64_t v43 = v53[1];
    int v44 = *(uint64_t (**)(void *, void, void))(*v6 + 32);
    if (v14)
    {
      uint64_t v45 = *(void *)(v44(v6, 0, 0) + 48);
      uint64_t v46 = v53[0];
      std::string v47 = (uint64_t *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 56);
    }
    else
    {
      uint64_t v45 = *(void *)(v44(v6, 0, 0) + 56);
      uint64_t v46 = v53[0];
      std::string v47 = (uint64_t *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 48);
    }
    uint64_t v48 = *v47;
    if (v43 != v45 || v46 != v48) {
      BOOL v42 = 0;
    }
    uint64_t v50 = *(void *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 72);
    if (v50 != *(void *)((*(uint64_t (**)(void, void, void))(***(void ***)(v18 + 88) + 32))(**(void **)(v18 + 88), 0, 0)+ 72))BOOL v42 = 0; {
    uint64_t v51 = *(void *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 64);
    }
    if (v51 != *(void *)((*(uint64_t (**)(void, void, void))(***(void ***)(v18 + 88) + 32))(**(void **)(v18 + 88), 0, 0)+ 64))BOOL v42 = 0; {
    uint64_t v52 = *(void *)((*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0) + 80);
    }
    BOOL v17 = v52 == *(void *)((*(uint64_t (**)(void, void, void))(***(void ***)(v18 + 88) + 32))(**(void **)(v18 + 88), 0, 0)+ 80)&& v42;
    uint64_t v22 = v61;
    if (v61) {
      goto LABEL_50;
    }
  }
  else
  {
    BOOL v17 = 0;
    if (v61)
    {
LABEL_50:
      long long v62 = v22;
      operator delete(v22);
    }
  }
  return v17;
}

void sub_2111C55FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *(void **)(v30 - 120);
  if (v32)
  {
    *(void *)(v30 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_DWORD *ZinIrOpt::GetDilatedConvPadding@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, int *a4@<X3>, _DWORD *a5@<X8>)
{
  int v5 = a3[2] - a2[4];
  int v6 = a3[4] - a2[8];
  int v8 = *a4;
  int v7 = a4[1];
  int v9 = a2[6] - *a3 + (result[6] - 1) * *a4;
  *a5 = *a3 - a2[6];
  a5[1] = v9;
  int v10 = (result[4] - 1) * v7 - v5;
  a5[2] = v5;
  a5[3] = v10;
  int v11 = a4[2];
  int v12 = (result[8] - 1) * v11;
  a5[4] = v6;
  a5[5] = v12;
  if (v8 == 1) {
    *(void *)a5 = 0;
  }
  if (v7 == 1) {
    *((void *)a5 + 1) = 0;
  }
  if (v11 == 1) {
    *((void *)a5 + 2) = 0;
  }
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331A50;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331A50;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v7 = *(_DWORD *)(*(void *)(v2 + 64) + 8) == 35
    && ((v3 = (void *)(*(uint64_t (**)(void, void, void))(***(void ***)(v2 + 88) + 32))(**(void **)(v2 + 88), 0, 0), v4 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 32))(v2, 0, 0), v3[6] == 1)? (v5 = v3[10] == 1): (v5 = 0), v5 ? (BOOL v6 = v3[7] == 1) : (BOOL v6 = 0), v6)&& v3[8] == *(void *)(v4 + 64) * *(void *)(v4 + 56);
  return v7 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331AA8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331AA8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) == 37)
  {
    uint64_t ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    uint64_t v4 = operator new(0x14uLL);
    int v10 = v4 + 5;
    int v11 = (char *)(v4 + 5);
    v4[4] = 4;
    *(_OWORD *)uint64_t v4 = xmmword_211EFBBF4;
    int v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    BOOL IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      int v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    BOOL IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_2111C5A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  BOOL v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(void *)(v15 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331B00;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331B00;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) == 37)
  {
    uint64_t ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    uint64_t v4 = operator new(0x14uLL);
    int v10 = v4 + 5;
    int v11 = (char *)(v4 + 5);
    v4[4] = 3;
    *(_OWORD *)uint64_t v4 = xmmword_211EFBD00;
    int v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    BOOL IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      int v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    BOOL IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_2111C5BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  BOOL v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(void *)(v15 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C178;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C178;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v3 = *(_DWORD *)(*(void *)(v2 + 64) + 8) == 2 && ZinGOCLayer::IsPerCout((ZinIrKernel **)v2);
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C1E8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C1E8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 4) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C331B58;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331B58;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) == 37)
  {
    uint64_t ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    uint64_t v4 = operator new(0x14uLL);
    int v10 = v4 + 5;
    int v11 = (char *)(v4 + 5);
    v4[4] = 2;
    *(_OWORD *)uint64_t v4 = xmmword_211EFBFF8;
    int v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    BOOL IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      int v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    BOOL IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_2111C5FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  BOOL v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(void *)(v15 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C268;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C268;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) == 37)
  {
    uint64_t ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    uint64_t v4 = operator new(0x14uLL);
    int v10 = v4 + 5;
    int v11 = (char *)(v4 + 5);
    v4[4] = 4;
    *(_OWORD *)uint64_t v4 = xmmword_211EFC104;
    int v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    BOOL IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      int v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    BOOL IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_2111C6194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  BOOL v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(void *)(v15 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C2D8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C2D8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(_DWORD *)(*(void *)(v2 + 64) + 8) == 35)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void, void))(***(void ***)(v2 + 88) + 32))(**(void **)(v2 + 88), 0, 0);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 32))(v2, 0, 0);
    BOOL v6 = *(void *)(v4 + 64) == *(void *)(v3 + 64) * *(void *)(v3 + 56) && *(void *)(v4 + 56) == 1;
  }
  else
  {
    BOOL v6 = 0;
  }
  return v6 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C348;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C348;
}

BOOL std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_1");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_2");
  BOOL v6 = (void ***)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)SingleMatch + 32))(SingleMatch, 0, 0);
  if (*(void *)(v7 + 64) != *(void *)((*(uint64_t (**)(void, void, void))(**v6[11] + 32))(*v6[11], 0, 0)+ 64))return 0; {
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  }
  uint64_t v8 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  int v9 = (void *)(*(uint64_t (**)(void, void, void))(***(void ***)(v8 + 88) + 32))(**(void **)(v8 + 88), 0, 0);
  int v10 = (void *)((uint64_t (*)(void ***, void, void))(*v6)[4])(v6, 0, 0);
  if (v9[6] != v10[6]) {
    return 0;
  }
  int v11 = v10;
  if (v9[10] != v10[10] || v9[7] != v10[7] || v9[8] != v10[8] || v9[9] != v10[9]) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  uint64_t v12 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (*(uint64_t (**)(void, void, void))(***(void ***)(v12 + 88) + 32))(**(void **)(v12 + 88), 0, 0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 32))(v12, 0, 0);
  if (*(void *)(v13 + 48) * *(void *)(v13 + 72) != *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0)+ 64)|| *(void *)(v14 + 48) * *(void *)(v14 + 72) != v11[8])
  {
    return 0;
  }
  BOOL result = 0;
  int v16 = *(void **)(v12 + 136);
  uint64_t v17 = v16[33];
  v33[0] = v16[34];
  v33[1] = v17;
  uint64_t v18 = v16[35];
  _OWORD v33[2] = v18;
  if (v17 == 1 && v18 == 1)
  {
    int v31 = *(void *)(v7 + 64);
    uint64_t v32 = 0x100000001;
    uint64_t v19 = *(void *)(v8 + 64);
    long long v29 = *(_OWORD *)(v19 + 180);
    uint64_t v30 = *(void *)(v19 + 172);
    uint64_t v20 = (void *)v9[9];
    uint64_t v21 = v9[10];
    __p[0] = *((void **)v9 + 6);
    __p[1] = v20;
    long long v27 = *(_OWORD *)(v9 + 7);
    uint64_t v28 = v21;
    uint64_t v22 = (unsigned int *)(v16 + 41);
    uint64_t v23 = (unsigned int *)v16 + 85;
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 32))(v12, 0, 0);
    ZinGetOutputTensorDimension((uint64_t)__p, v33, v22, v23, (int *)&v29, *(void *)(v24 + 56), &v31, (uint64_t)v25);
    return v11[8] == v25[3];
  }
  return result;
}

void sub_2111C67FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_19>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26C331790;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331790;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 38) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26C331898;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331898;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 103) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26C3318F0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3318F0;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 104) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26C3317E8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3317E8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a2 + 8) + 64) + 8) == 39) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C38C3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C38C3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  uint64_t v4 = *v3;
  BOOL v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  while (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v4 + 8))(*v4, v6, v7)
       || ZinIrOpt::ReplaceWithDilatedConv(v6, v4))
  {
    v4 += 2;
    if (v4 == v5) {
      return 0;
    }
  }
  return 3;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_20>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinIrOpt::ReplaceWithDilatedConv(uint64_t a1, uint64_t *a2)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose_4");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(v3, (unsigned __int8 *)__p);
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (SingleMatch)
  {
    uint64_t v5 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "pad");
    uint64_t v6 = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = **(void **)(v6 + 88);
    uint64_t v8 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "reshape_1");
    uint64_t v9 = ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose_1");
    ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose_2");
    BOOL v86 = (ZinReshapeLayer *)ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv");
    int v87 = (ZinReshapeLayer *)ZinPattern::GetSingleMatch(v12, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "goc");
    ZinPattern::GetSingleMatch(v13, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "activation");
    ZinPattern::GetSingleMatch(v14, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose_3");
    ZinPattern::GetSingleMatch(v15, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose_4");
    ZinPattern::GetSingleMatch(v16, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "reshape_2");
    ZinPattern::GetSingleMatch(v17, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    if (*((char *)v87 + 47) >= 0) {
      size_t v18 = *((unsigned __int8 *)v87 + 47);
    }
    else {
      size_t v18 = *((void *)v87 + 4);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v102, v18 + 1);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v102;
    }
    else {
      uint64_t v19 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (*((char *)v87 + 47) >= 0) {
        uint64_t v20 = (char *)v87 + 24;
      }
      else {
        uint64_t v20 = (const void *)*((void *)v87 + 3);
      }
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 95;
    uint64_t v21 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v101, "dil_conv_det");
    uint64_t v22 = std::string::append(v21, "_xfm", 4uLL);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t v90 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)char v89 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (v90 >= 0) {
      uint64_t v24 = v89;
    }
    else {
      uint64_t v24 = (void **)v89[0];
    }
    if (v90 >= 0) {
      std::string::size_type v25 = HIBYTE(v90);
    }
    else {
      std::string::size_type v25 = (std::string::size_type)v89[1];
    }
    int v26 = std::string::append(&v102, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(void *)&long long v92 = *((void *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v99, __p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v90) < 0) {
      operator delete(v89[0]);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = *((void *)v87 + 17);
    uint64_t v97 = *(void *)(v28 + 552);
    long long v29 = *(_OWORD *)(v28 + 472);
    *(_OWORD *)std::string __p = *(_OWORD *)(v28 + 456);
    long long v92 = v29;
    long long v30 = *(_OWORD *)(v28 + 536);
    long long v95 = *(_OWORD *)(v28 + 520);
    long long v96 = v30;
    long long v31 = *(_OWORD *)(v28 + 504);
    long long v93 = *(_OWORD *)(v28 + 488);
    long long v94 = v31;
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 32))(v9, 0, 0);
    (*(void (**)(uint64_t, void, void))(*(void *)v7 + 32))(v7, 0, 0);
    *(_DWORD *)long long v98 = *(void *)(v32 + 64);
    *(void *)&v98[4] = 0x100000001;
    LODWORD(v96) = 1;
    *((void *)&v95 + 1) = *(void *)v98;
    (*(void (**)(ZinReshapeLayer *, void, void))(*(void *)v86 + 32))(v86, 0, 0);
    ZinReshapeLayer::GetReshapeInfo(v86);
    ZinBuilder::CreateTranspose();
  }
  uint64_t v33 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_channel");
  uint64_t v34 = ZinPattern::GetSingleMatch(v33, (unsigned __int8 *)__p);
  uint64_t v35 = v34;
  if (SBYTE7(v92) < 0)
  {
    operator delete(__p[0]);
    if (v35)
    {
LABEL_52:
      uint64_t v36 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "channel_to_space");
      uint64_t v37 = ZinPattern::GetSingleMatch(v36, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v38 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "space_to_channel");
      ZinPattern::GetSingleMatch(v38, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v39 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose1");
      ZinPattern::GetSingleMatch(v39, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v40 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose2");
      ZinPattern::GetSingleMatch(v40, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v41 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "pad");
      uint64_t v42 = ZinPattern::GetSingleMatch(v41, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v43 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "conv");
      uint64_t v44 = ZinPattern::GetSingleMatch(v43, (unsigned __int8 *)__p);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "dil_conv_det");
      uint64_t v45 = std::string::append((std::string *)__p, "_xfm", 4uLL);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      int64_t v90 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)char v89 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v44 + 47) >= 0) {
        size_t v47 = *(unsigned __int8 *)(v44 + 47);
      }
      else {
        size_t v47 = *(void *)(v44 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v101, v47 + 1);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v101;
      }
      else {
        uint64_t v48 = (std::string *)v101.__r_.__value_.__r.__words[0];
      }
      if (v47)
      {
        if (*(char *)(v44 + 47) >= 0) {
          int64_t v49 = (const void *)(v44 + 24);
        }
        else {
          int64_t v49 = *(const void **)(v44 + 24);
        }
        memmove(v48, v49, v47);
      }
      *(_WORD *)((char *)&v48->__r_.__value_.__l.__data_ + v47) = 95;
      if (v90 >= 0) {
        uint64_t v50 = v89;
      }
      else {
        uint64_t v50 = (void **)v89[0];
      }
      if (v90 >= 0) {
        std::string::size_type v51 = HIBYTE(v90);
      }
      else {
        std::string::size_type v51 = (std::string::size_type)v89[1];
      }
      uint64_t v52 = std::string::append(&v101, (const std::string::value_type *)v50, v51);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      long long v54 = std::string::append(&v102, "_", 1uLL);
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      std::string::size_type v100 = v54->__r_.__value_.__r.__words[2];
      long long v99 = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(__p, &v99);
      if (SHIBYTE(v100) < 0) {
        operator delete((void *)v99);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = *(void *)(v37 + 64);
      uint64_t v57 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&v99, "view");
      ZinPattern::GetMatch(v57, (unsigned __int8 *)&v99, &v101);
      if (SHIBYTE(v100) < 0) {
        operator delete((void *)v99);
      }
      ZinIrOpt::HelperCreateDilatedConv(v44, (int *)(v56 + 12), v42, (uint64_t **)&v101, (uint64_t)__p);
    }
  }
  else if (v34)
  {
    goto LABEL_52;
  }
  uint64_t v58 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_to_space");
  uint64_t v59 = ZinPattern::GetSingleMatch(v58, (unsigned __int8 *)__p);
  uint64_t v60 = v59;
  if ((SBYTE7(v92) & 0x80000000) == 0)
  {
    if (!v59) {
      return v60;
    }
LABEL_97:
    uint64_t v61 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_to_space");
    uint64_t v62 = ZinPattern::GetSingleMatch(v61, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v63 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
    ZinPattern::GetSingleMatch(v63, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v64 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "pad");
    uint64_t v65 = ZinPattern::GetSingleMatch(v64, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v66 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv");
    uint64_t v67 = ZinPattern::GetSingleMatch(v66, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v68 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "quant_1");
    ZinPattern::GetSingleMatch(v68, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v69 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant_1");
    ZinPattern::GetSingleMatch(v69, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v70 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "quant_2");
    ZinPattern::GetSingleMatch(v70, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v71 = *a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant_2");
    ZinPattern::GetSingleMatch(v71, (unsigned __int8 *)__p);
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "dil_conv_det");
    uint64_t v72 = std::string::append((std::string *)__p, "_xfm", 4uLL);
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    int64_t v90 = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)char v89 = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    long long v88 = (ZinReshapeLayer *)v67;
    if (*(char *)(v67 + 47) >= 0) {
      size_t v74 = *(unsigned __int8 *)(v67 + 47);
    }
    else {
      size_t v74 = *(void *)(v67 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v101, v74 + 1);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v75 = &v101;
    }
    else {
      uint64_t v75 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if (v74)
    {
      if (*((char *)v88 + 47) >= 0) {
        char v76 = (char *)v88 + 24;
      }
      else {
        char v76 = (const void *)*((void *)v88 + 3);
      }
      memmove(v75, v76, v74);
    }
    *(_WORD *)((char *)&v75->__r_.__value_.__l.__data_ + v74) = 95;
    if (v90 >= 0) {
      char v77 = v89;
    }
    else {
      char v77 = (void **)v89[0];
    }
    if (v90 >= 0) {
      std::string::size_type v78 = HIBYTE(v90);
    }
    else {
      std::string::size_type v78 = (std::string::size_type)v89[1];
    }
    long long v79 = std::string::append(&v101, (const std::string::value_type *)v77, v78);
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    uint64_t v81 = std::string::append(&v102, "_", 1uLL);
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    std::string::size_type v100 = v81->__r_.__value_.__r.__words[2];
    long long v99 = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(__p, &v99);
    if (SHIBYTE(v100) < 0) {
      operator delete((void *)v99);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    uint64_t v83 = *(void *)(v62 + 64);
    uint64_t v84 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&v99, "view");
    ZinPattern::GetMatch(v84, (unsigned __int8 *)&v99, &v101);
    if (SHIBYTE(v100) < 0) {
      operator delete((void *)v99);
    }
    ZinIrOpt::HelperCreateDilatedConv((uint64_t)v88, (int *)(v83 + 12), v65, (uint64_t **)&v101, (uint64_t)__p);
  }
  operator delete(__p[0]);
  if (v60) {
    goto LABEL_97;
  }
  return v60;
}

void sub_2111C9610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v59 - 192);
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v61 = *(std::__shared_weak_count **)(v59 - 208);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  uint64_t v62 = *(void **)(v59 - 256);
  if (v62)
  {
    *(void *)(v59 - 2std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48) = v62;
    operator delete(v62);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void ZinIrOpt::HelperCreateDilatedConv(uint64_t a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 136);
  uint64_t v42 = *(void *)(v10 + 552);
  long long v11 = *(_OWORD *)(v10 + 536);
  long long v40 = *(_OWORD *)(v10 + 520);
  long long v41 = v11;
  long long v12 = *(_OWORD *)(v10 + 472);
  *(_OWORD *)&__dst[35] = *(_OWORD *)(v10 + 456);
  *(_OWORD *)&__dst[37] = v12;
  long long v13 = *(_OWORD *)(v10 + 504);
  *(_OWORD *)&__dst[39] = *(_OWORD *)(v10 + 488);
  long long v39 = v13;
  memcpy(__dst, (const void *)(v10 + 176), 0x118uLL);
  *((void *)&v40 + 1) = *(void *)a2;
  LODWORD(v41) = a2[2];
  __dst[26] = *((void *)&v40 + 1);
  LODWORD(__dst[27]) = v41;
  uint64_t v14 = *(void *)(a3 + 64);
  std::string::basic_string[abi:ne180100]<0>(v34, "dil_conv_det");
  uint64_t v15 = std::string::append((std::string *)v34, "_xfm", 4uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v37 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v36 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v34[23] & 0x80000000) != 0) {
    operator delete(*(void **)v34);
  }
  uint64_t v35 = 0;
  int64x2_t v17 = 0uLL;
  memset(v34, 0, sizeof(v34));
  size_t v18 = *a4;
  uint64_t v19 = a4[1];
  if (*a4 != v19)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *v18++;
      uint64_t v22 = *(int64x2_t **)(v21 + 64);
      int64x2_t v17 = vaddq_s64(v22[2], v17);
      v20 += v22[3].i64[0];
    }
    while (v18 != v19);
    *(int64x2_t *)&v34[16] = v17;
    uint64_t v35 = v20;
  }
  ZinIrOpt::GetDilatedConvPadding(&__dst[9], v34, (_DWORD *)(v14 + 172), a2, &v33);
  long long v39 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *(void *)&long long v40 = *((void *)&v33.__r_.__value_.__l + 2);
  *(std::string *)&__dst[22] = v33;
  long long v23 = *(const void ***)(a1 + 136);
  if (*((char *)v23 + 23) >= 0) {
    size_t v24 = *((unsigned __int8 *)v23 + 23);
  }
  else {
    size_t v24 = (size_t)v23[1];
  }
  std::string::size_type v25 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v24 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if (*((char *)v23 + 23) >= 0) {
      int v26 = v23;
    }
    else {
      int v26 = *v23;
    }
    memmove(v25, v26, v24);
  }
  *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 95;
  if (v37 >= 0) {
    long long v27 = v36;
  }
  else {
    long long v27 = (void **)v36[0];
  }
  if (v37 >= 0) {
    std::string::size_type v28 = HIBYTE(v37);
  }
  else {
    std::string::size_type v28 = (std::string::size_type)v36[1];
  }
  long long v29 = std::string::append(&v32, (const std::string::value_type *)v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  long long v31 = std::string::append(&v33, "_kernel", 7uLL);
  v31->__r_.__value_.__r.__words[0] = 0;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 16))(&v33, a5, 2);
  operator new();
}

void sub_2111CA0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, ZinIrKernel *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,ZinIrKernel *a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a11, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a32, 0);
  if (v47 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 38);
  *(void *)uint64_t result = &unk_26C34E9B0;
  uint64_t v4 = *a2;
  *(_DWORD *)(result + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 2);
  *(void *)(result + 12) = v4;
  return result;
}

void *ZinSpaceToBatchLayer::ZinSpaceToBatchLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  long long v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  uint64_t v7 = v11;
  long long v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C34DE90;
  return a1;
}

void sub_2111CA300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinSpaceToBatchLayer::LowerEngine(std::string::size_type a1, ZinIrOpLayerGraph *a2, uint64_t ***a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)(*a3)[1] + 492)) {
    return 3;
  }
  uint64_t v4 = **(void **)(a1 + 88);
  uint64_t v5 = *(int **)(a1 + 64);
  uint64_t v6 = **a3;
  uint64_t v59 = (const void *)(a1 + 24);
  ZinObjectNameFactory::ZinObjectNameFactory(v75, a1 + 24);
  if (v5[5] != 1) {
    ZinAssertImpl("Factor z = %d is invalid. It should be exactly 1 as space to batch transform is not supported along depth", v5[5]);
  }
  if (ZinSpaceToBatchLayerUtils::CanBeDecomposedToReshapeTranspose((ZinSpaceToBatchLayerUtils *)v6, (const ZinIrHalParameters *)a1, v7))
  {
    uint64_t v8 = **(ZinIrOpLayer ***)(a1 + 88);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v5[3] >= 2)
    {
      uint64_t v10 = operator new(0x14uLL);
      *(void *)&long long v85 = v10 + 5;
      v10[4] = 4;
      *(_OWORD *)uint64_t v10 = xmmword_211EFC858;
      __p[0] = v10;
      __p[1] = v10 + 5;
      DimensionOrderHint::DimensionOrderHint(v69, __p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      long long v11 = operator new(0x10uLL);
      __p[0] = v11;
      *long long v11 = xmmword_211ED4940;
      *(void *)&long long v85 = v11 + 1;
      __p[1] = v11 + 1;
      ZinBuilder::CreateTranspose();
    }
    if (v5[4] >= 2)
    {
      uint64_t v12 = operator new(0x14uLL);
      *(void *)&long long v85 = v12 + 5;
      void v12[4] = 4;
      *(_OWORD *)uint64_t v12 = xmmword_211EFC86C;
      __p[0] = v12;
      __p[1] = v12 + 5;
      DimensionOrderHint::DimensionOrderHint(v69, __p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v13 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      *(void *)&long long v86 = *(void *)(v13 + 80);
      long long v14 = *(_OWORD *)(v13 + 64);
      *(_OWORD *)std::string __p = *(_OWORD *)(v13 + 48);
      long long v85 = v14;
      uint64_t v15 = v5[4];
      *(void *)&long long v85 = (uint64_t)v14 / v15;
      __p[0] = (void *)((uint64_t)__p[0] * v15);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      ZinBuilder::CreateReshape(v9, (uint64_t)v75);
    }
    if (v5[3] >= 2)
    {
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      std::string::size_type v25 = operator new(0x10uLL);
      __p[0] = v25;
      *std::string::size_type v25 = xmmword_211ED4940;
      *(void *)&long long v85 = v25 + 1;
      __p[1] = v25 + 1;
      ZinBuilder::CreateTranspose();
    }
    *(_OWORD *)std::string __p = 0u;
    long long v85 = 0u;
    LODWORD(v86) = 1065353216;
    char v26 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a1, v8, __p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
    if ((v26 & 1) == 0) {
      ZinAssertImpl("Failed to move outgoing edges");
    }
    if (!ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a1, 0)) {
      ZinAssertImpl("Failed to remove node");
    }
  }
  else
  {
    uint64_t v72 = 0;
    long long v73 = 0;
    uint64_t v74 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v72, v6 + 207, v6 + 211, 4uLL);
    long long v70 = 0u;
    unsigned long long v71 = 0u;
    *(_OWORD *)uint64_t v69 = 0u;
    long long v94 = xmmword_211ED5A80;
    int64x2_t v95 = vdupq_n_s64(1uLL);
    uint64_t v96 = 1;
    int v16 = v5[3];
    if (v16 >= 2)
    {
      Factorize(v16, (int **)&v72, v69);
      int v17 = *(_DWORD *)(*(void *)((char *)v69[1] + (((unint64_t)v71 >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * (v71 & 0x3FF));
      uint64_t v18 = *((void *)&v71 + 1) - 1;
      unint64_t v19 = v71 + 1;
      unsigned long long v71 = __PAIR128__(*((unint64_t *)&v71 + 1), (uint64_t)v71 + 1) + __PAIR128__(-1, 0);
      if (v19 >= 0x800)
      {
        operator delete(*(void **)v69[1]);
        v69[1] = (char *)v69[1] + 8;
        *(void *)&unsigned long long v71 = v71 - 1024;
        uint64_t v18 = *((void *)&v71 + 1);
      }
      if (v18)
      {
        int v20 = v5[3];
        ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)&v91, 38);
        *(void *)&long long v91 = &unk_26C34E9B0;
        HIDWORD(v91) = v20 / v17;
        *(void *)&long long v92 = 0x100000001;
        (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)v4 + 80))(__p, v4, 0, 0);
        uint64_t v21 = operator new(0x78uLL);
        uint64_t v83 = (char *)v21 + 120;
        long long v22 = *(_OWORD *)v89;
        v21[4] = v88;
        v21[5] = v22;
        v21[6] = *(_OWORD *)&v89[16];
        *((_DWORD *)v21 + 28) = *(_DWORD *)&v89[32];
        long long v23 = v85;
        _OWORD *v21 = *(_OWORD *)__p;
        v21[1] = v23;
        long long v24 = v87;
        void v21[2] = v86;
        void v21[3] = v24;
        uint64_t v81 = v21;
        long long v82 = (char *)v21 + 120;
        ZinBuilder::CreateSpaceToBatch();
      }
      uint64_t v27 = v4;
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 32))(v27, 0, 0);
      int64x2_t v29 = *(int64x2_t *)(v28 + 64);
      long long v94 = *(_OWORD *)(v28 + 48);
      int64x2_t v95 = v29;
      uint64_t v30 = *(void *)(v28 + 80);
      *((void *)&v94 + 1) *= v17;
      v95.i64[1] = v29.i64[1] / v17;
      uint64_t v96 = v30;
      long long v31 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 32))(v27, 0, 0);
      if (!ZinIrTensor::SetAllocationHint(v31, 2, 1))
      {
        if (!ZinIrTensor::SetInterleave(v31, 1uLL, 1, 1))
        {
          std::string v32 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 32))(v4, 0, 0);
          std::string v33 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 32))(v4, 0, 0);
          ZinIrTensor::GetDimensionOrderHint(v33, (uint64_t)&v81);
          v80[3] = 0;
          ZinIrTensor::InferDescriptor(v32, 2, (uint64_t)&v81, 1, 1, (uint64_t)v80, (uint64_t)__p);
          long long v91 = *(_OWORD *)&v89[8];
          long long v92 = *(_OWORD *)&v89[24];
          uint64_t v93 = v90;
          std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v80);
          if (v81)
          {
            long long v82 = v81;
            operator delete(v81);
          }
          *((void *)&v92 + 1) *= v17;
          DimensionOrderHint::DimensionOrderHint(__p, 0);
          operator new();
        }
        ZinAssertImpl("Failed to set interleave=1 for Space-to-Batch lowering.");
      }
      ZinAssertImpl("Failed to set DRAM allocation hint for Space-to-Batch lowering.");
    }
    uint64_t v34 = v5[4];
    *((void *)&v94 + 1) = 1;
    v95.i64[0] = 1 / v34;
    std::vector<ZinIrOpLayer *>::vector(&v81, (int)v34);
    if (v5[4] >= 1)
    {
      int64x2_t v60 = vdupq_n_s64(1uLL);
      uint64_t v35 = v5[4];
      if (*(char *)(a1 + 47) >= 0) {
        size_t v36 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v36 = *(void *)(a1 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v77, v36 + 7);
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v37 = &v77;
      }
      else {
        int64_t v37 = (std::string *)v77.__r_.__value_.__r.__words[0];
      }
      if (v36)
      {
        if (*(char *)(a1 + 47) >= 0) {
          uint64_t v38 = v59;
        }
        else {
          uint64_t v38 = *(const void **)(a1 + 24);
        }
        memmove(v37, v38, v36);
      }
      strcpy((char *)v37 + v36, "_slice_");
      long long v39 = std::string::append(&v77, "_y_", 3uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v68, 0);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v41 = &v68;
      }
      else {
        long long v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v68.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v78, (const std::string::value_type *)v41, size);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      uint64_t v45 = std::string::append(&v79, "_x_", 3uLL);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      *(void *)&long long v85 = *((void *)&v45->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v67, 0);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v47 = &v67;
      }
      else {
        int v47 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v67.__r_.__value_.__l.__size_;
      }
      int64_t v49 = std::string::append((std::string *)__p, (const std::string::value_type *)v47, v48);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&long long v92 = *((void *)&v49->__r_.__value_.__l + 2);
      long long v91 = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v85) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, void, void))(*(void *)v4 + 32))(v4, 0, 0);
      memset(&v65[1], 0, 40);
      v65[6] = 1;
      v65[7] = 1;
      v65[8] = v35;
      int64x2_t v66 = v60;
      ZinBuilder::CreateView();
    }
    uint64_t v51 = (*(uint64_t (**)(std::string::size_type, void, void))(*(void *)a1 + 32))(a1, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v51, &v78);
    uint64_t v52 = *(void *)(a1 + 16);
    std::string::size_type v53 = v78.__r_.__value_.__r.__words[0];
    v78.__r_.__value_.__r.__words[0] = 0;
    v65[0] = v53;
    ZinBuilder::CreateConcat(v52, (uint64_t)&v81, 5, v65, __p);
    long long v54 = (void *)v65[0];
    v65[0] = 0;
    if (v54) {
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v65, v54);
    }
    v77.__r_.__value_.__r.__words[0] = a1;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    v79.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v91, &v79);
    char v55 = ZinBuilder::AddConcatToGraph((uint64_t **)a2, (uint64_t *)&v81, __p, (ZinIrOpLayer ***)&v91);
    *(void *)&long long v91 = &unk_26C359A08;
    if (*((void *)&v91 + 1))
    {
      *(void *)&long long v92 = *((void *)&v91 + 1);
      operator delete(*((void **)&v91 + 1));
    }
    if ((v55 & 1) == 0) {
      ZinAssertImpl("Failed to add concat to the graph");
    }
    uint64_t v56 = (ZinIrOpLayer *)*((void *)__p[1] - 1);
    memset(v63, 0, sizeof(v63));
    int v64 = 1065353216;
    char v57 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a1, v56, v63);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v63);
    if ((v57 & 1) == 0) {
      ZinAssertImpl("Failed in moving outgoing edges");
    }
    if (!ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a1, 0)) {
      ZinAssertImpl("Failed to remove nodes from the graph");
    }
    if (BYTE8(v85) && __p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v58 = (void *)v78.__r_.__value_.__r.__words[0];
    v78.__r_.__value_.__r.__words[0] = 0;
    if (v58) {
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v78, v58);
    }
    if (v81)
    {
      long long v82 = v81;
      operator delete(v81);
    }
    std::deque<int>::~deque[abi:ne180100](v69);
    if (v72)
    {
      long long v73 = v72;
      operator delete(v72);
    }
  }
  v75[0] = &unk_26C34DA98;
  if (v76 < 0) {
    operator delete((void *)v75[1]);
  }
  return 0;
}

void sub_2111CB7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  STACK[0x220] = (unint64_t)&unk_26C359A08;
  uint64_t v61 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v61;
    operator delete(v61);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v59 - 192));
  std::deque<int>::~deque[abi:ne180100](&a43);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a53 = (uint64_t)&unk_26C34DA98;
  if (a59 < 0) {
    operator delete(a54);
  }
  _Unwind_Resume(a1);
}

void ZinSpaceToBatchLayer::Clone()
{
}

void sub_2111CBD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinSpaceToBatchLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "SPACE_TO_BATCH");
}

uint64_t ZinSpaceToBatchLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_2111CBF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinSpaceToBatchLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] - *a2 != 120) {
    ZinAssertImpl("SpaceToBatch layer can only have one bottom");
  }
  uint64_t v7 = *((void *)a1 + 8);
  int v16 = a3;
  uint64_t v8 = *(void *)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(v14, "W");
  int v9 = *(_DWORD *)(v7 + 12);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()((uint64_t *)&v16, v8, (uint64_t)v14, v9, (uint64_t)__p, 1);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v10 = *(void *)(v3 + 24);
  std::string::basic_string[abi:ne180100]<0>(v14, "H");
  int v11 = *(_DWORD *)(v7 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()((uint64_t *)&v16, v10, (uint64_t)v14, v11, (uint64_t)__p, 0);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

void sub_2111CC0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v11 = *a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v17, (uint64_t *)(v11 + 1656), (uint64_t *)(v11 + 1688), 4uLL);
  memset(v16, 0, sizeof(v16));
  if (a4 <= 0)
  {
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v12 = (const char *)a5;
    }
    else {
      uint64_t v12 = *(const char **)a5;
    }
    ZinAssertImpl("Factor %s = %d is invalid. It should be a positive number", v12, a4);
  }
  if (a6 && !Factorize(a4, &v17, v16))
  {
    if (*(char *)(a5 + 23) >= 0) {
      char v15 = (const char *)a5;
    }
    else {
      char v15 = *(const char **)a5;
    }
    ZinAssertImpl("Factor %s = %d is invalid. It should be a multiple of {2,3,4,8}", v15, a4);
  }
  if (a2 % a4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      char v13 = (const char *)a3;
    }
    else {
      char v13 = *(const char **)a3;
    }
    if (*(char *)(a5 + 23) >= 0) {
      long long v14 = (const char *)a5;
    }
    else {
      long long v14 = *(const char **)a5;
    }
    ZinAssertImpl("Input axis %s = %zd is not divisible by factor %s = %d", v13, a2, v14, a4);
  }
  std::deque<int>::~deque[abi:ne180100](v16);
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
}

void sub_2111CC244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  uint64_t v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(void *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::LargeStrideConvLower(uint64_t a1, uint64_t **a2, int **a3, int64x2_t **a4, uint64_t a5)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  std::string v68 = *(void **)(a5 + 200);
  if (*(char *)(a5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a5 + 24), *(void *)(a5 + 32));
  }
  else {
    std::string v102 = *(std::string *)(a5 + 24);
  }
  uint64_t v8 = *(void *)(*(void *)(a5 + 96) - 8);
  std::string::size_type v100 = 0;
  long long v99 = 0;
  uint64_t v101 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v99, *(const void **)(a5 + 112), *(void *)(a5 + 120), (uint64_t)(*(void *)(a5 + 120) - *(void *)(a5 + 112)) >> 3);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v102.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v72, size + 1);
  if (v72[23] >= 0) {
    uint64_t v10 = v72;
  }
  else {
    uint64_t v10 = *(unsigned char **)v72;
  }
  if (size)
  {
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v102;
    }
    else {
      uint64_t v11 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    memmove(v10, v11, size);
  }
  *(_WORD *)&v10[size] = 95;
  uint64_t v12 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v106, "lstride_conv");
  char v13 = std::string::append(v12, "_xfm", 4uLL);
  int64x2_t v14 = *(int64x2_t *)&v13->__r_.__value_.__l.__data_;
  v104.i64[0] = v13->__r_.__value_.__r.__words[2];
  int64x2_t v103 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v104.i8[7] >= 0) {
    char v15 = (const std::string::value_type *)&v103;
  }
  else {
    char v15 = (const std::string::value_type *)v103.i64[0];
  }
  if (v104.i8[7] >= 0) {
    std::string::size_type v16 = v104.u8[7];
  }
  else {
    std::string::size_type v16 = v103.u64[1];
  }
  int v17 = std::string::append((std::string *)v72, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  __n128 v19 = ZinObjectNameFactory::ZinObjectNameFactory(v97, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v104.i8[7] < 0) {
    operator delete((void *)v103.i64[0]);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete(v106[0]);
  }
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
  unsigned int v66 = *(_DWORD *)((*(uint64_t (**)(void *, void, void, __n128))(*v68 + 32))(v68, 0, 0, v19) + 88);
  std::string v67 = **(ZinIrOpLayer ***)(a5 + 88);
  int v20 = **(ZinIrOpLayer ***)(**(void **)(a5 + 112) + 88);
  uint64_t v21 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
  unint64_t Interleave = ZinIrTensor::GetInterleave(v21);
  if (v23) {
    BOOL v24 = Interleave > 1;
  }
  else {
    BOOL v24 = 0;
  }
  int v25 = v24;
  char v26 = *a3;
  if (v25 == 1 && *v26 != 44)
  {
    uint64_t v96 = 0;
    CopyLayer = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(a1, v8, (uint64_t)v97, v66, (uint64_t *)&v96);
    uint64_t v30 = v96;
    uint64_t v96 = 0;
    if (v30) {
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v96, v30);
    }
    v103.i64[0] = a5;
    *(void *)uint64_t v72 = &v103;
    *(void *)&v72[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v72);
    int inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, CopyLayer, v67, (ZinIrOpLayer *)a5, (ZinIrOpLayer ***)__p);
    *(void *)std::string __p = &unk_26C359A08;
    if (*(void *)&__p[8])
    {
      *(void *)&__p[16] = *(void *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    std::string v32 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)CopyLayer + 32))(CopyLayer, 0, 0);
    if (ZinIrTensor::SetInterleave(v32, 1uLL, 1, 1)) {
      int v29 = 0;
    }
    else {
      int v29 = inserted;
    }
    char v26 = *a3;
    int v27 = 1;
    std::string v67 = CopyLayer;
  }
  else
  {
    int v27 = 0;
    CopyLayer = 0;
    int v29 = 1;
  }
  int v64 = v20;
  long long v70 = (ZinIrOpLayerGraph *)a2;
  long long v94 = 0;
  uint64_t v93 = 0;
  uint64_t v95 = 0;
  long long v91 = 0;
  uint64_t v90 = 0;
  uint64_t v92 = 0;
  if (a3[1] != v26)
  {
    if (v27) {
      uint64_t v33 = (uint64_t)CopyLayer;
    }
    else {
      uint64_t v33 = v8;
    }
    uint64_t v65 = v33;
    int v34 = *v26;
    if (*v26 > 16)
    {
      if (v34 == 17)
      {
        long long v54 = v26 + 2;
        *(void *)std::string __p = &unk_26C345B80;
        if (*((char *)v26 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *((const std::string::value_type **)v26 + 2), *((void *)v26 + 3));
        }
        else
        {
          long long v55 = *((_OWORD *)v26 + 1);
          uint64_t v79 = *((void *)v26 + 4);
          *(_OWORD *)&__p[8] = v55;
        }
        LODWORD(v8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v54[8];
        long long v81 = 0uLL;
        *((void *)&v80 + 1) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)&v80 + 8), *((long long **)v54 + 5), *((long long **)v54 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v54 + 6) - *((void *)v54 + 5)) >> 3));
        long long v82 = *((_OWORD *)v54 + 4);
        *(void *)std::string __p = &unk_26C34F860;
        long long v83 = *((_OWORD *)v54 + 5);
        if (!v65) {
          ZinAssertImpl("Error: fail to get the input view layer");
        }
        uint64_t v56 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v65 + 32))(v65, 0, 0);
        ZinBuilder::CreateViewFromOffset(a1, (uint64_t)v97, v56, SHIDWORD(v83), v83, SDWORD1(v83));
      }
      if (v34 == 44)
      {
        uint64_t v35 = v26 + 2;
        ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)(v26 + 2));
        *(void *)std::string __p = &unk_26C3499A0;
        long long v36 = *(_OWORD *)(v35 + 39);
        long long v37 = *(_OWORD *)(v35 + 43);
        uint64_t v87 = *(void *)(v35 + 47);
        long long v85 = v36;
        long long v86 = v37;
        memset(v88, 0, sizeof(v88));
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v88, *((const void **)v35 + 25), *((void *)v35 + 26), (uint64_t)(*((void *)v35 + 26) - *((void *)v35 + 25)) >> 3);
        __int16 v89 = *((_WORD *)v35 + 112);
        uint64_t v38 = (*a4)[2].i64[0];
        int64x2_t v39 = (*a4)[1];
        int64x2_t v103 = **a4;
        uint64_t v105 = v38 + SDWORD1(v86) + (uint64_t)(int)v86;
        int32x2_t v40 = vadd_s32(*(int32x2_t *)((char *)&v85 + 4), (int32x2_t)__PAIR64__(HIDWORD(v85), v85));
        v41.i64[0] = v40.i32[0];
        v41.i64[1] = v40.i32[1];
        int64x2_t v104 = vaddq_s64(v39, (int64x2_t)vextq_s8(v41, v41, 8uLL));
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v67 + 80))(v72);
        uint64_t v42 = (*a4)[2].i64[0];
        int64x2_t v43 = (*a4)[1];
        *(int64x2_t *)&v72[8] = **a4;
        *(int64x2_t *)&v72[24] = v43;
        *(void *)&v72[40] = v42;
        long long v44 = operator new(0x78uLL);
        v106[1] = (char *)v44 + 120;
        std::string v107 = (char *)v44 + 120;
        long long v45 = v75;
        v44[4] = v74;
        v44[5] = v45;
        v44[6] = v76;
        *((_DWORD *)v44 + 28) = v77;
        long long v46 = *(_OWORD *)&v72[16];
        *long long v44 = *(_OWORD *)v72;
        v44[1] = v46;
        long long v47 = v73;
        _OWORD v44[2] = *(_OWORD *)&v72[32];
        void v44[3] = v47;
        v106[0] = v44;
        ZinBuilder::CreatePadLayer(a1, (uint64_t)v97);
      }
    }
    else
    {
      if (v34 == 1)
      {
        uint64_t v48 = (*(uint64_t (**)(void *, void, void))(*v68 + 32))(v68, 0, 0);
        long long v49 = *(_OWORD *)(v48 + 48);
        *(void *)&v72[32] = *(void *)(v48 + 80);
        *(_OWORD *)uint64_t v72 = v49;
        *(int64x2_t *)&v72[16] = vdupq_n_s64(1uLL);
        uint64_t v50 = v68[17];
        uint64_t v84 = *(void *)(v50 + 552);
        long long v51 = *(_OWORD *)(v50 + 536);
        long long v82 = *(_OWORD *)(v50 + 520);
        long long v83 = v51;
        long long v52 = *(_OWORD *)(v50 + 504);
        long long v80 = *(_OWORD *)(v50 + 488);
        long long v81 = v52;
        long long v53 = *(_OWORD *)(v50 + 472);
        *(_OWORD *)std::string __p = *(_OWORD *)(v50 + 456);
        *(void *)&__p[16] = v53;
        uint64_t v79 = 0x100000001;
        LODWORD(v8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
        *(void *)&long long v82 = 0;
        long long v81 = 0uLL;
        ZinObjectNameFactory::CreateName((uint64_t)v97, 2u, (std::string *)&v103);
        operator new();
      }
      if (v34 == 3) {
        ZinAssertImpl("Error: concat2_input size is 0");
      }
    }
    ZinAssertImpl("Invalid pool decomposition");
  }
  char v57 = v100;
  if (v99 == v100)
  {
    int v61 = 1;
    uint64_t v59 = (ZinIrOpLayerGraph *)a2;
  }
  else
  {
    uint64_t v58 = (char *)v99 + 8;
    uint64_t v59 = v70;
    do
    {
      int v60 = ZinIrOpLayerGraph::AddEdge((uint64_t)v70, (uint64_t)v67, *((void *)v58 - 1), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      int v61 = v60;
      if (v58 == v57) {
        char v62 = 0;
      }
      else {
        char v62 = v60;
      }
      v58 += 8;
    }
    while ((v62 & 1) != 0);
  }
  if ((v29 & v61 & ZinIrOpLayerGraph::RemoveNode(v59, v64, 0) & 1) == 0) {
    ZinAssertImpl("ANE internal failure: large stride conv graph manipulation error");
  }
  if (v90)
  {
    long long v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    long long v94 = v93;
    operator delete(v93);
  }
  v97[0] = &unk_26C34DA98;
  if (v98 < 0) {
    operator delete((void *)v97[1]);
  }
  if (v99)
  {
    std::string::size_type v100 = (char *)v99;
    operator delete(v99);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_2111CE070(_Unwind_Exception *a1)
{
  STACK[0x320] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  uint64_t v2 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v2;
    operator delete(v2);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::LargeStridePoolLower(uint64_t a1, ZinIrOpLayerGraph *a2, uint64_t *a3, long long **a4, uint64_t a5)
{
  uint64_t v180 = (uint64_t *)*MEMORY[0x263EF8340];
  Hal = ZinIrTarget::GetHal(v180, *(ZinIrTarget **)(a1 + 160));
  uint64_t v138 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v139 = a1 + 176;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  char v140 = 0;
  int v143 = 0;
  uint64_t v10 = (uint64_t *)*(unsigned __int8 *)(*(void *)(a5 + 64) + 108);
  uint64_t v134 = a1;
  if (v10)
  {
    uint64_t v12 = ZinIrTarget::GetHal(v10, *(ZinIrTarget **)(a1 + 160));
    (*(void (**)(uint64_t *))(*v12 + 16))(v12);
    if (*(char *)(a5 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a5 + 24), *(void *)(a5 + 32));
    }
    else {
      std::string v150 = *(std::string *)(a5 + 24);
    }
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v150.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v167, size + 1);
    if (v167[23] >= 0) {
      unsigned int v66 = v167;
    }
    else {
      unsigned int v66 = *(unsigned char **)v167;
    }
    if (size)
    {
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v67 = &v150;
      }
      else {
        std::string v67 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      memmove(v66, v67, size);
    }
    *(_WORD *)&v66[size] = 95;
    std::string::basic_string[abi:ne180100]<0>(&v165, "lstride_pool_nsp");
    std::string v68 = std::string::append(&v165, "_xfm", 4uLL);
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    *(void *)&v163[16] = *((void *)&v68->__r_.__value_.__l + 2);
    *(_OWORD *)CFTypeID v163 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (v163[23] >= 0) {
      long long v70 = v163;
    }
    else {
      long long v70 = *(const std::string::value_type **)v163;
    }
    if (v163[23] >= 0) {
      std::string::size_type v71 = v163[23];
    }
    else {
      std::string::size_type v71 = *(void *)&v163[8];
    }
    uint64_t v72 = std::string::append((std::string *)v167, v70, v71);
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __p[2] = (void *)v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v176, __p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if ((v163[23] & 0x80000000) != 0) {
      operator delete(*(void **)v163);
    }
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v165.__r_.__value_.__l.__data_);
    }
    if ((v167[23] & 0x80000000) != 0) {
      operator delete(*(void **)v167);
    }
    long long v74 = **(ZinIrOpLayer ***)(a5 + 88);
    long long v147 = 0;
    long long v148 = 0;
    uint64_t v149 = 0;
    uint64_t v144 = 0;
    long long v145 = 0;
    uint64_t v146 = 0;
    long long v75 = (int *)*a3;
    if (a3[1] == *a3)
    {
      memset(__p, 0, sizeof(__p));
      *(_DWORD *)uint64_t v152 = 1065353216;
      char v89 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a5, v74, __p);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
      if ((v89 & 1 & ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a5, 0)) != 0) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = 3;
      }
      goto LABEL_139;
    }
    int v76 = *v75;
    if (*v75 == 2)
    {
      uint64_t v79 = v75 + 2;
      *(void *)CFStringRef v167 = &unk_26C345B80;
      if (*((char *)v75 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v167[8], *((const std::string::value_type **)v75 + 2), *((void *)v75 + 3));
      }
      else
      {
        long long v80 = *((_OWORD *)v75 + 1);
        *(void *)&v167[24] = *((void *)v75 + 4);
        *(_OWORD *)&v167[8] = v80;
      }
      *(_DWORD *)&v167[32] = v79[8];
      long long v168 = 0uLL;
      *(void *)&v167[40] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v167[40], *((long long **)v79 + 5), *((long long **)v79 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v79 + 6) - *((void *)v79 + 5)) >> 3));
      long long v169 = *((_OWORD *)v79 + 4);
      *(void *)CFStringRef v167 = &unk_26C34AB58;
      long long v83 = *((_OWORD *)v79 + 6);
      long long v170 = *((_OWORD *)v79 + 5);
      long long v171 = v83;
      long long v84 = *((_OWORD *)v79 + 7);
      long long v85 = *((_OWORD *)v79 + 8);
      long long v86 = *((_OWORD *)v79 + 9);
      int v175 = v79[40];
      long long v173 = v85;
      long long v174 = v86;
      long long v172 = v84;
      BOOL v114 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v114) {
        ZinConvPoolLargeStride::LargeStridePoolLower(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      uint64_t v130 = (void **)v167;
    }
    else
    {
      if (v76 == 3)
      {
        BOOL v106 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v106) {
          ZinConvPoolLargeStride::LargeStridePoolLower(v106, v107, v108, v109, v110, v111, v112, v113);
        }
        goto LABEL_138;
      }
      if (v76 != 17)
      {
        BOOL v98 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v98) {
          ZinPoolLayer::Lower(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        goto LABEL_138;
      }
      int v77 = v75 + 2;
      __p[0] = &unk_26C345B80;
      if (*((char *)v75 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[1], *((const std::string::value_type **)v75 + 2), *((void *)v75 + 3));
      }
      else
      {
        long long v78 = *((_OWORD *)v75 + 1);
        __p[3] = *((void **)v75 + 4);
        *(_OWORD *)&__p[1] = v78;
      }
      *(_DWORD *)uint64_t v152 = v77[8];
      memset(&v152[8], 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v152[8], *((long long **)v77 + 5), *((long long **)v77 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v77 + 6) - *((void *)v77 + 5)) >> 3));
      long long v153 = *((_OWORD *)v77 + 4);
      __p[0] = &unk_26C34F860;
      long long v154 = *((_OWORD *)v77 + 5);
      uint64_t v81 = **(void **)(a5 + 88);
      if (v81)
      {
        uint64_t v82 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v81 + 32))(v81, 0, 0);
        ZinBuilder::CreateViewFromOffset(v134, (uint64_t)&v176, v82, SHIDWORD(v154), v154, SDWORD1(v154));
      }
      BOOL v122 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v122) {
        ZinConvPoolLargeStride::LargeStridePoolLower(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      uint64_t v130 = __p;
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v130);
LABEL_138:
    uint64_t v88 = 3;
LABEL_139:
    CFTypeID v176 = &unk_26C34DA98;
    if ((v179 & 0x80000000) == 0) {
      goto LABEL_142;
    }
    char v132 = v177;
    goto LABEL_141;
  }
  uint64_t v11 = (const std::string *)(a5 + 24);
  if (*(char *)(a5 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(a5 + 24), *(void *)(a5 + 32));
  }
  else
  {
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = *(void *)(a5 + 40);
  }
  if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v150.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)v167, v13 + 1);
  if (v167[23] >= 0) {
    int64x2_t v14 = v167;
  }
  else {
    int64x2_t v14 = *(unsigned char **)v167;
  }
  if (v13)
  {
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v15 = &v150;
    }
    else {
      char v15 = (std::string *)v150.__r_.__value_.__r.__words[0];
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)&v14[v13] = 95;
  std::string::size_type v16 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v176, "lstride_pool");
  int v17 = std::string::append(v16, "_xfm", 4uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(void *)&v163[16] = *((void *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)CFTypeID v163 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v163[23] >= 0) {
    __n128 v19 = v163;
  }
  else {
    __n128 v19 = *(const std::string::value_type **)v163;
  }
  if (v163[23] >= 0) {
    std::string::size_type v20 = v163[23];
  }
  else {
    std::string::size_type v20 = *(void *)&v163[8];
  }
  uint64_t v21 = std::string::append((std::string *)v167, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  __p[2] = (void *)v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v165, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if ((v163[23] & 0x80000000) != 0) {
    operator delete(*(void **)v163);
  }
  if (SHIBYTE(v178) < 0) {
    operator delete(v176);
  }
  if ((v167[23] & 0x80000000) != 0) {
    operator delete(*(void **)v167);
  }
  (*(uint64_t (**)(uint64_t, void, void))(*(void *)a5 + 32))(a5, 0, 0);
  std::string::operator=(&v150, v11);
  char v23 = **(ZinIrOpLayer ***)(a5 + 88);
  long long v147 = 0;
  long long v148 = 0;
  uint64_t v149 = 0;
  uint64_t v144 = 0;
  long long v145 = 0;
  uint64_t v146 = 0;
  uint64_t v24 = *a3;
  if (a3[1] != *a3)
  {
    int v25 = *(_DWORD *)v24;
    if (*(int *)v24 <= 16)
    {
      if (v25 != 2)
      {
        if (v25 == 3) {
          ZinAssertImpl("Error: concat2_input size is 0");
        }
        goto LABEL_117;
      }
      uint64_t v48 = v24 + 8;
      __p[0] = &unk_26C345B80;
      if (*(char *)(v24 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)(v24 + 16), *(void *)(v24 + 24));
      }
      else
      {
        long long v49 = *(_OWORD *)(v24 + 16);
        __p[3] = *(void **)(v24 + 32);
        *(_OWORD *)&__p[1] = v49;
      }
      *(_DWORD *)uint64_t v152 = *(_DWORD *)(v48 + 32);
      memset(&v152[8], 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v152[8], *(long long **)(v48 + 40), *(long long **)(v48 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v48 + 48) - *(void *)(v48 + 40)) >> 3));
      long long v153 = *(_OWORD *)(v48 + 64);
      __p[0] = &unk_26C34AB58;
      long long v52 = *(_OWORD *)(v48 + 96);
      long long v154 = *(_OWORD *)(v48 + 80);
      long long v155 = v52;
      long long v53 = *(_OWORD *)(v48 + 112);
      long long v54 = *(_OWORD *)(v48 + 128);
      long long v55 = *(_OWORD *)(v48 + 144);
      *(_DWORD *)&v158[16] = *(_DWORD *)(v48 + 160);
      long long v157 = v54;
      *(_OWORD *)char v158 = v55;
      long long v156 = v53;
      char v131 = __p;
    }
    else
    {
      if (v25 != 17)
      {
        if (v25 == 44)
        {
          uint64_t v35 = v24 + 8;
          ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)(v24 + 8));
          __p[0] = &unk_26C3499A0;
          long long v36 = *(_OWORD *)(v35 + 156);
          long long v37 = *(_OWORD *)(v35 + 172);
          char v160 = *(void **)(v35 + 188);
          *(_OWORD *)&v158[12] = v36;
          long long v159 = v37;
          memset(v161, 0, sizeof(v161));
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v161, *(const void **)(v35 + 200), *(void *)(v35 + 208), (uint64_t)(*(void *)(v35 + 208) - *(void *)(v35 + 200)) >> 3);
          __int16 v162 = *(_WORD *)(v35 + 224);
          uint64_t v38 = *((void *)*a4 + 4);
          long long v39 = **a4;
          *(_OWORD *)&v163[16] = (*a4)[1];
          *(_OWORD *)CFTypeID v163 = v39;
          *(void *)&v164[0] = v38 + SDWORD1(v159) + (uint64_t)(int)v159;
          int32x2_t v40 = vadd_s32(*(int32x2_t *)&v158[16], (int32x2_t)__PAIR64__(*(unsigned int *)&v158[24], *(unsigned int *)&v158[12]));
          v41.i64[0] = v40.i32[0];
          v41.i64[1] = v40.i32[1];
          *(int64x2_t *)&v163[16] = vaddq_s64(*(int64x2_t *)&v163[16], (int64x2_t)vextq_s8(v41, v41, 8uLL));
          (*(void (**)(unsigned char *__return_ptr))(***(void ***)(a5 + 88) + 80))(v167);
          uint64_t v42 = *((void *)*a4 + 4);
          long long v43 = (*a4)[1];
          *(_OWORD *)&v167[8] = **a4;
          *(_OWORD *)&v167[24] = v43;
          *(void *)&v167[40] = v42;
          long long v44 = operator new(0x78uLL);
          std::string::size_type v177 = (char *)v44 + 120;
          BOOL v178 = (char *)v44 + 120;
          long long v45 = v170;
          v44[4] = v169;
          v44[5] = v45;
          v44[6] = v171;
          *((_DWORD *)v44 + 28) = v172;
          long long v46 = *(_OWORD *)&v167[16];
          *long long v44 = *(_OWORD *)v167;
          v44[1] = v46;
          long long v47 = v168;
          _OWORD v44[2] = *(_OWORD *)&v167[32];
          void v44[3] = v47;
          CFTypeID v176 = v44;
          ZinBuilder::CreatePadLayer(a1, (uint64_t)&v165);
        }
        if (v25 == 21)
        {
          memset(v163, 0, 24);
          int v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v163[16], 1uLL);
          *int v27 = 0x200000004;
          uint64_t v28 = v27 + 1;
          int v29 = *(char **)&v163[8];
          uint64_t v30 = *(char **)v163;
          long long v31 = v27;
          if (*(void *)&v163[8] != *(void *)v163)
          {
            do
            {
              uint64_t v32 = *((void *)v29 - 1);
              v29 -= 8;
              *--long long v31 = v32;
            }
            while (v29 != v30);
            int v29 = *(char **)v163;
          }
          uint64_t v33 = &v27[v26];
          *(void *)CFTypeID v163 = v31;
          *(void *)&v163[8] = v27 + 1;
          *(void *)&v163[16] = v33;
          if (v29)
          {
            operator delete(v29);
            uint64_t v33 = *(void **)&v163[16];
          }
          *(void *)&v163[8] = v27 + 1;
          if (v28 >= v33)
          {
            uint64_t v56 = ((uint64_t)v28 - *(void *)v163) >> 3;
            if ((unint64_t)(v56 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v57 = (uint64_t)v33 - *(void *)v163;
            uint64_t v58 = v57 >> 2;
            if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
              uint64_t v58 = v56 + 1;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v163[16], v59);
            }
            else {
              int v60 = 0;
            }
            int v61 = &v60[8 * v56];
            *(void *)int v61 = 0x400000002;
            int v34 = v61 + 8;
            char v62 = *(char **)&v163[8];
            uint64_t v63 = *(char **)v163;
            if (*(void *)&v163[8] != *(void *)v163)
            {
              do
              {
                uint64_t v64 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v61 - 1) = v64;
                v61 -= 8;
              }
              while (v62 != v63);
              char v62 = *(char **)v163;
            }
            *(void *)CFTypeID v163 = v61;
            *(void *)&v163[8] = v34;
            *(void *)&v163[16] = &v60[8 * v59];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            v27[1] = 0x400000002;
            int v34 = v27 + 2;
          }
          *(void *)&v163[8] = v34;
          ZinBuilder::CreateTranspose();
        }
LABEL_117:
        BOOL v90 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v90) {
          ZinPoolLayer::Lower(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        goto LABEL_129;
      }
      uint64_t v50 = v24 + 8;
      *(void *)CFTypeID v163 = &unk_26C345B80;
      if (*(char *)(v24 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v163[8], *(const std::string::value_type **)(v24 + 16), *(void *)(v24 + 24));
      }
      else
      {
        long long v51 = *(_OWORD *)(v24 + 16);
        *(void *)&v163[24] = *(void *)(v24 + 32);
        *(_OWORD *)&v163[8] = v51;
      }
      LODWORD(v164[0]) = *(_DWORD *)(v50 + 32);
      memset((char *)v164 + 8, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)v164 + 8), *(long long **)(v50 + 40), *(long long **)(v50 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v50 + 48) - *(void *)(v50 + 40)) >> 3));
      v164[2] = *(_OWORD *)(v50 + 64);
      *(void *)CFTypeID v163 = &unk_26C34F860;
      v164[3] = *(_OWORD *)(v50 + 80);
      char v131 = (void **)v163;
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v131);
LABEL_129:
    uint64_t v88 = 3;
    goto LABEL_130;
  }
  memset(v136, 0, sizeof(v136));
  int v137 = 1065353216;
  int v87 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a5, v23, v136);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v136);
  if (v87 & ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a5, 0)) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = 3;
  }
LABEL_130:
  if (v144)
  {
    long long v145 = v144;
    operator delete(v144);
  }
  if (v147)
  {
    long long v148 = v147;
    operator delete(v147);
  }
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34DA98;
  if (v166 < 0)
  {
    char v132 = (void *)v165.__r_.__value_.__l.__size_;
LABEL_141:
    operator delete(v132);
  }
LABEL_142:
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142) < 0) {
    operator delete(v140);
  }
  return v88;
}