void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::AreEqualOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::AreEqualOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::AreEqualOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::SameTypeOperands<mlir::pdl_interp::AreEqualOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::AreEqualOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::AreEqualOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::AreEqualOp>,mlir::OpTrait::SameTypeOperands<mlir::pdl_interp::AreEqualOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
      && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
      && mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v4)&& mlir::OpTrait::impl::verifySameTypeOperands(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::AreEqualOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameTypeOperands>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        v5 = v7;
      }
      else {
        v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::BranchOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        v10 = v11;
      }
      else {
        v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::BranchOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::BranchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::BranchOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::BranchOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::BranchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::BranchOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267770000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v154 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneSuccessor<Empty>]";
      unint64_t v154 = 84;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneSuccessor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneSuccessor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[43];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v154 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[322];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[324];
  v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[31];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v154 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::BranchOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyOneSuccessor(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::BranchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_attribute", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363720;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckAttributeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 13
    && (*a3 == 0x746E6174736E6F63 ? (BOOL v7 = *(void *)((char *)a3 + 5) == 0x65756C6156746E61) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 13 && *result == 0x746E6174736E6F63 && *(void *)((char *)result + 5) == 0x65756C6156746E61) {
    void *v5 = a4;
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"constantValue", 13, v5);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::CheckAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckAttributeOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NSuccessors<2>::Impl<Empty>]";
      unint64_t v176 = 92;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NSuccessors<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NSuccessors<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[45];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[320];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[233];
  v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckAttributeOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckAttributeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::CheckAttributeOp::verifyInvariantsImpl((mlir::pdl_interp::CheckAttributeOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_operand_count", 30, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363C98;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckOperandCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 5)
  {
    if (*(_DWORD *)a3 != 1853189987 || *(unsigned char *)(a3 + 4) != 116) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 14) {
      return 0;
    }
    if (*(void *)a3 != 0x41657261706D6F63 || *(void *)(a3 + 6) != 0x747361654C744165) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v12);
  if (v7 == 5)
  {
    if (*(_DWORD *)result == 1853189987 && *(unsigned char *)(result + 4) == 116)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          uint64_t v10 = a4;
        }
        else {
          uint64_t v10 = 0;
        }
        v5[1] = v10;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 14 && *(void *)result == 0x41657261706D6F63 && *(void *)(result + 6) == 0x747361654C744165)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v11 = a4;
      }
      else {
        uint64_t v11 = 0;
      }
      void *v5 = v11;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"compareAtLeast", 14, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"count", 5, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (void **)"compareAtLeast", (const char *)0xE, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v10, (void **)"count", (const char *)5, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::CheckOperandCountOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperandCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperandCountOp>::getEffects;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1,
        mlir::pdl_interp::CheckOperandCountOp::verifyInvariantsImpl((mlir::pdl_interp::CheckOperandCountOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_operation_name", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363E28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckOperationNameOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      void *v5 = v8;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckOperationNameOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckOperationNameOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckOperationNameOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckOperationNameOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckOperationNameOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1,
        mlir::pdl_interp::CheckOperationNameOp::verifyInvariantsImpl((mlir::pdl_interp::CheckOperationNameOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_result_count", 29, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363B08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckResultCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 5)
  {
    if (*(_DWORD *)a3 != 1853189987 || *(unsigned char *)(a3 + 4) != 116) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 14) {
      return 0;
    }
    if (*(void *)a3 != 0x41657261706D6F63 || *(void *)(a3 + 6) != 0x747361654C744165) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v12);
  if (v7 == 5)
  {
    if (*(_DWORD *)result == 1853189987 && *(unsigned char *)(result + 4) == 116)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          uint64_t v10 = a4;
        }
        else {
          uint64_t v10 = 0;
        }
        v5[1] = v10;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 14 && *(void *)result == 0x41657261706D6F63 && *(void *)(result + 6) == 0x747361654C744165)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v11 = a4;
      }
      else {
        uint64_t v11 = 0;
      }
      void *v5 = v11;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"compareAtLeast", 14, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"count", 5, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (void **)"compareAtLeast", (const char *)0xE, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v10, (void **)"count", (const char *)5, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::CheckOperandCountOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckResultCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckResultCountOp>::getEffects;
  char v3 = &unk_267771000;
  {
    uint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckOperandCountOp>>(a1, a2);
}

uint64_t mlir::Op<mlir::pdl_interp::CheckResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_type", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3629D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701869940) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701869940)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      void *v5 = v8;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"type", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v7, (void **)"type", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckTypeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::CheckTypeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypeOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::CheckTypeOp::verifyInvariantsImpl((mlir::pdl_interp::CheckTypeOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.check_types", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362C30;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckTypesOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701869940 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 115) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701869940 && *(unsigned char *)(result + 4) == 115)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"types", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (void **)"types", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckTypesOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::CheckTypesOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CheckTypesOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::CheckTypesOp::verifyInvariantsImpl((mlir::pdl_interp::CheckTypesOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ContinueOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::printAssembly(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    unint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<Empty>]";
      unint64_t v176 = 116;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[430];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[4] = *MEMORY[0x263EF8340];
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  uint64_t v11 = v13;
  uint64_t v12 = 0x200000000;
  if (a2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a3 + 192))(a3, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

BOOL mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::pdl_interp::ContinueOp>::verifyTrait((uint64_t)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::pdl_interp::ContinueOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "pdl_interp.foreach";
  v37[1] = 18;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    int64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          *int v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_attribute", 27, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3638B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateAttributeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(unsigned char *)(result + 4) == 101) {
    void *v5 = a4;
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      unint64_t v176 = 118;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[348];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CreateAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::CreateAttributeOp::verifyInvariantsImpl((mlir::pdl_interp::CreateAttributeOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateOperationOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::pdl_interp::CreateOperationOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::CreateOperationOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }
  if (*v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"inferredResultTypes", 19, *v6);
  }
  uint64_t v7 = v6[1];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"inputAttributeNames", 19, v7);
  }
  uint64_t v8 = v6[2];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 3), 3);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::CreateOperationOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateOperationOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::pdl_interp::CreateOperationOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 != *(void *)a2) {
    return 0;
  }
  if (*(void *)(a3 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  if (*(void *)(a3 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  return *(void *)(a3 + 24) == *(void *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::pdl_interp::CreateOperationOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CreateOperationOp::print((mlir::pdl_interp::CreateOperationOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  unint64_t v6 = a1;
  if (!mlir::pdl_interp::CreateOperationOp::verifyInvariantsImpl((mlir::pdl_interp::CreateOperationOp *)&v6)) {
    return 0;
  }
  unint64_t v6 = a1;
  return mlir::pdl_interp::CreateOperationOp::verify((mlir::pdl_interp::CreateOperationOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateRangeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    unint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v154 = 114;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v154 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  long long v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::RangeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::RangeOp::verifyInvariantsImpl((mlir::pdl::RangeOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::RangeOp::verify((mlir::pdl::RangeOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_type", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362CF8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateTypeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(unsigned char *)(result + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v7, (void **)"value", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateTypeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      unint64_t v176 = 113;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[380];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CreateTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::CreateTypeOp::verifyInvariantsImpl((mlir::pdl_interp::CreateTypeOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_types", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3630E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateTypesOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(unsigned char *)(result + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (void **)"value", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::complex::ConstantOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v176 = 114;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  long long v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::CreateTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::CreateTypesOp::verifyInvariantsImpl((mlir::pdl_interp::CreateTypesOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::EraseOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v70 = a1;
    v1 = (void *)&unk_267771000;
    int v16 = v15;
    a1 = v70;
    if (v16)
    {
      int v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v76 = 83;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v76;
      }
      unint64_t v19 = &v75[v18];
      unint64_t v20 = v76 - v18;
      if (v76 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v76 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      v1 = (void *)&unk_267771000;
      a1 = v70;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v66 = v2;
    uint64_t v71 = a1;
    char v3 = (void *)&unk_267770000;
    int v25 = v24;
    uint64_t v2 = v66;
    a1 = v71;
    if (v25)
    {
      int v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v76 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v76;
      }
      int v28 = &v75[v27];
      unint64_t v29 = v76 - v27;
      if (v76 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v76 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v66;
      a1 = v71;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v67 = v2;
    uint64_t v72 = a1;
    uint64_t v63 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v63;
    uint64_t v2 = v67;
    int v34 = v33;
    a1 = v72;
    if (v34)
    {
      int v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v76 = 86;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v76;
      }
      unint64_t v37 = &v75[v36];
      unint64_t v38 = v76 - v36;
      if (v76 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v76 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v63;
      uint64_t v2 = v67;
      a1 = v72;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v68 = v2;
    uint64_t v73 = a1;
    uint64_t v61 = v6;
    uint64_t v64 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v61;
    uint64_t v4 = v64;
    int v43 = v42;
    uint64_t v2 = v68;
    a1 = v73;
    if (v43)
    {
      int v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v76 = 82;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v76;
      }
      unint64_t v46 = &v75[v45];
      unint64_t v47 = v76 - v45;
      if (v76 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v76 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v61;
      uint64_t v4 = v64;
      uint64_t v2 = v68;
      a1 = v73;
    }
  }
  uint64_t v8 = v7[29];
  long long v9 = &unk_267770000;
  {
    uint64_t v69 = v2;
    uint64_t v74 = a1;
    uint64_t v62 = v6;
    uint64_t v65 = v4;
    uint64_t v60 = v8;
    long long v9 = (void *)&unk_267770000;
    uint64_t v8 = v60;
    uint64_t v6 = v62;
    uint64_t v4 = v65;
    uint64_t v2 = v69;
    int v52 = v51;
    a1 = v74;
    if (v52)
    {
      int v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v76 = 84;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v76;
      }
      unint64_t v55 = &v75[v54];
      unint64_t v56 = v76 - v54;
      if (v76 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v76 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      long long v9 = (void *)&unk_267770000;
      uint64_t v8 = v60;
      uint64_t v6 = v62;
      uint64_t v4 = v65;
      uint64_t v2 = v69;
      a1 = v74;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v9[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::EraseOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  long long v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.extract", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3642D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ExtractOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::ExtractOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::ExtractOp::verifyInvariantsImpl((mlir::pdl_interp::ExtractOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::FinalizeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::printAssembly(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    unint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      unint64_t v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267770000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v154 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      unint64_t v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      unint64_t v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v154 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      unint64_t v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      uint64_t v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      unint64_t v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[322];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[324];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[31];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v154 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[4] = *MEMORY[0x263EF8340];
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  uint64_t v11 = v13;
  uint64_t v12 = 0x200000000;
  if (a2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a3 + 192))(a3, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

BOOL mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ForEachOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v87 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v94 = 81;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      unint64_t v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267770000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267770000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      unint64_t v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneSuccessor<Empty>]";
      unint64_t v94 = 84;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      unint64_t v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneSuccessor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneSuccessor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[43];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v94 = 82;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      unint64_t v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[29];
  long long v9 = &unk_267770000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    long long v9 = (void *)&unk_267770000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      unint64_t v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      long long v9 = (void *)&unk_267770000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v94 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      uint64_t v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[233] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::pdl_interp::ForEachOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::ForEachOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::pdl_interp::ForEachOp::verify((mlir::pdl_interp::ForEachOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::ForEachOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyOneRegion(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyOneSuccessor(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps10((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  long long v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.func", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C364080;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::FuncOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::pdl_interp::FuncOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::FuncOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"arg_attrs", 9, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"function_type", 13, v6);
  }
  uint64_t v7 = v5[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"res_attrs", 9, v7);
  }
  uint64_t v8 = v5[3];
  if (v8)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v8);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::FuncOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::initProperties(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(void *)&long long v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::FuncOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::pdl_interp::FuncOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::copyProperties(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] == a2[2]) {
    return a3[3] == a2[3];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::FuncOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, v4[2]);
  uint64_t v5 = v4[3];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isDeclaration;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      unint64_t v14 = 73;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[411], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  void *v2 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getCallableRegion;
  v2[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgumentTypes;
  v2[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResultTypes;
  v2[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgAttrsAttr;
  v2[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResAttrsAttr;
  v2[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setArgAttrsAttr;
  v2[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setResAttrsAttr;
  v2[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeArgAttrsAttr;
  v2[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeResAttrsAttr;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[399], v2);
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgumentTypes(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t Value = *(void *)(v2 + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&Value);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResultTypes(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t Value = *(void *)(v2 + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&Value);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResAttrsAttr(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  return *(void *)(v2 + 16);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v2 = 0;
  }
  void *v2 = 0;
  return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  *(void *)(v2 + 16) = 0;
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyBody;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyType;
  v2[5] = mlir::detail::InterfaceMap::lookup<mlir::SymbolOpInterface>(a1);
  v2[6] = mlir::detail::InterfaceMap::lookup<mlir::CallableOpInterface>(a1);
  char v3 = &unk_267770000;
  {
    char v3 = (void *)&unk_267770000;
    if (v4)
    {
      unint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::FunctionOpInterface]";
      unint64_t v13 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v13;
      }
      uint64_t v7 = &v12[v6];
      unint64_t v8 = v13 - v6;
      if (v13 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v13 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::FunctionOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[417], v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getFunctionType(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v4);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::cloneTypeWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v10 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t Value = *(void *)(v10 + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::clone((mlir::Attribute *)&Value, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v176 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[427];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v176 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      uint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[320];
  unint64_t v13 = &unk_267770000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      unint64_t v176 = 87;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[437];
  int v15 = &unk_267770000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    int v15 = (void *)&unk_267770000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      int v15 = (void *)&unk_267770000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[439];
  uint64_t v17 = &unk_267775000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267775000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::FunctionOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267775000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[336];
  int v19 = &unk_267770000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    int v19 = (void *)&unk_267770000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      unint64_t v176 = 91;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      int v19 = (void *)&unk_267770000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[441] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::func::FuncOp::print((mlir::func::FuncOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroOperands<mlir::pdl_interp::FuncOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::FuncOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::SymbolOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::CallableOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::FunctionOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl_interp::FuncOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroOperands<mlir::pdl_interp::FuncOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::FuncOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::SymbolOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::CallableOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::FunctionOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl_interp::FuncOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && (uint64_t v8 = a1, mlir::pdl_interp::FuncOp::verifyInvariantsImpl((mlir::pdl_interp::FuncOp *)&v8))
    && mlir::detail::verifySymbol(a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::func::FuncOp>((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_attribute", 24, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3634C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetAttributeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      void *v5 = v8;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      unint64_t v176 = 118;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[348];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      uint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      uint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[320];
  int v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  int v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    int v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      int v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetAttributeOp::verifyInvariantsImpl((mlir::pdl_interp::GetAttributeOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetAttributeTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      unint64_t v154 = 113;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[380];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetAttributeTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetAttributeTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetAttributeTypeOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetAttributeTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2(a1, *(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36)) {
    uint64_t v6 = a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(a1, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetDefiningOpOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<Empty>]";
      unint64_t v154 = 118;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[356];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetDefiningOpOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetDefiningOpOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetDefiningOpOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetDefiningOpOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetDefiningOpOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetDefiningOpOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11(a1, *(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36)) {
    uint64_t v6 = a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(a1, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_operand", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362DC0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetOperandOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetOperandOp::verifyInvariantsImpl((mlir::pdl_interp::GetOperandOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_operands", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3631A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetOperandsOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetOperandsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetOperandsOp::verifyInvariantsImpl((mlir::pdl_interp::GetOperandsOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_result", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362AA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetResultOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetOperandOp::verifyInvariantsImpl((mlir::pdl_interp::GetOperandOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_results", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362E88;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetResultsOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 120) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(unsigned char *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetOperandsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetOperandsOp::verifyInvariantsImpl((mlir::pdl_interp::GetOperandsOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetUsersOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    unint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      unint64_t v154 = 114;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[354];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetDefiningOpOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetUsersOp::verifyInvariantsImpl((mlir::pdl_interp::GetUsersOp *)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetValueTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<Empty>]";
      unint64_t v154 = 112;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[372];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::GetValueTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::pdl_interp::GetValueTypeOp::verifyInvariantsImpl((mlir::pdl_interp::GetValueTypeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, unsigned int *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::IsNotNullOp::parse;
  a1[3] = (BOOL (*)(uint64_t, unsigned int *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    char v3 = (void *)&unk_267770000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v154 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NSuccessors<2>::Impl<Empty>]";
      unint64_t v154 = 92;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NSuccessors<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NSuccessors<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[45];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v154 = 82;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[233];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[322];
  int v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v154 = 99;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::IsNotNullOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::IsNotNullOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::IsNotNullOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::IsNotNullOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::IsNotNullOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::IsNotNullOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::IsNotNullOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
      && mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::RecordMatchOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, size_t a4)
{
  int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::pdl_interp::RecordMatchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::RecordMatchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::pdl_interp::RecordMatchOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::RecordMatchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::RecordMatchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::pdl_interp::RecordMatchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  if (a3[3] == a2[3]) {
    return a3[4] == a2[4];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::RecordMatchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::pdl_interp::RecordMatchOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v124 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      int v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v133 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      int v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneSuccessor<Empty>]";
      unint64_t v133 = 84;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      int v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneSuccessor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneSuccessor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[43];
  size_t v7 = &unk_267771000;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    size_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v133 = 88;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      int v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      size_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v133 = 96;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      int v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[47];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      int v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v133 = 89;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      int v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = v13[320];
  int v15 = &unk_267771000;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v133 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      int v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v14 == a1 || v15[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  size_t v7 = a2;
  mlir::pdl_interp::RecordMatchOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::VariadicOperands<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::RecordMatchOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::RecordMatchOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::VariadicOperands<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::RecordMatchOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::RecordMatchOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyOneSuccessor(a1, v4)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (size_t v7 = a1,
        mlir::pdl_interp::RecordMatchOp::verifyInvariantsImpl((mlir::pdl_interp::RecordMatchOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ReplaceOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    int Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v70 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v16 = v15;
    a1 = v70;
    if (v16)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v76 = 83;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v76;
      }
      unint64_t v19 = &v75[v18];
      unint64_t v20 = v76 - v18;
      if (v76 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v76 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v70;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v66 = v2;
    uint64_t v71 = a1;
    char v3 = (void *)&unk_267770000;
    int v25 = v24;
    uint64_t v2 = v66;
    a1 = v71;
    if (v25)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v76 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v76;
      }
      int v28 = &v75[v27];
      unint64_t v29 = v76 - v27;
      if (v76 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v76 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v66;
      a1 = v71;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v67 = v2;
    uint64_t v72 = a1;
    uint64_t v63 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v63;
    uint64_t v2 = v67;
    int v34 = v33;
    a1 = v72;
    if (v34)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v76 = 86;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v76;
      }
      int v37 = &v75[v36];
      unint64_t v38 = v76 - v36;
      if (v76 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v76 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v63;
      uint64_t v2 = v67;
      a1 = v72;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v68 = v2;
    uint64_t v73 = a1;
    uint64_t v61 = v6;
    uint64_t v64 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v61;
    uint64_t v4 = v64;
    int v43 = v42;
    uint64_t v2 = v68;
    a1 = v73;
    if (v43)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v76 = 97;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v76;
      }
      int v46 = &v75[v45];
      unint64_t v47 = v76 - v45;
      if (v76 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v76 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v61;
      uint64_t v4 = v64;
      uint64_t v2 = v68;
      a1 = v73;
    }
  }
  uint64_t v8 = v7[433];
  long long v9 = &unk_267770000;
  {
    uint64_t v69 = v2;
    uint64_t v74 = a1;
    uint64_t v62 = v6;
    uint64_t v65 = v4;
    uint64_t v60 = v8;
    long long v9 = (void *)&unk_267770000;
    uint64_t v8 = v60;
    uint64_t v6 = v62;
    uint64_t v4 = v65;
    uint64_t v2 = v69;
    int v52 = v51;
    a1 = v74;
    if (v52)
    {
      uint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v76 = 84;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v76;
      }
      int v55 = &v75[v54];
      unint64_t v56 = v76 - v54;
      if (v76 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v76 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      long long v9 = (void *)&unk_267770000;
      uint64_t v8 = v60;
      uint64_t v6 = v62;
      uint64_t v4 = v65;
      uint64_t v2 = v69;
      a1 = v74;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v9[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::ReplaceOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ReplaceOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ReplaceOp>>(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)1)
    || !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(a1, *(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 68);
    uint64_t v6 = v5 - 1;
    if (v5 == 1) {
      return 1;
    }
    uint64_t v7 = *(void *)(a1 + 72) + 32;
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v7 = 32;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v7 + 24;
  do
  {
    int v10 = mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(a1, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v8 + 1);
    BOOL result = v10 != 0;
    if (!v10) {
      break;
    }
    ++v8;
    v9 += 32;
    BOOL result = 1;
  }
  while (v6 != v8);
  return result;
}

uint64_t mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_attribute", 27, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363A40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchAttributeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNSuccessors<1>::Impl<Empty>]";
      unint64_t v176 = 99;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNSuccessors<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[49];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      uint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      uint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[320];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[233];
  int v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    int v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      uint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      int v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[322];
  unint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      uint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::SwitchAttributeOp::verifyInvariantsImpl((mlir::pdl_interp::SwitchAttributeOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_operand_count", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363EF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchOperandCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
      if (result) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t *v5 = v9;
    }
    else
    {
      uint64_t *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::pdl_interp::SwitchOperandCountOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1,
        mlir::pdl_interp::SwitchOperandCountOp::verifyInvariantsImpl((mlir::pdl_interp::SwitchOperandCountOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_operation_name", 32, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363FB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchOperationNameOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchOperationNameOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1,
        mlir::pdl_interp::SwitchOperationNameOp::verifyInvariantsImpl((mlir::pdl_interp::SwitchOperationNameOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_result_count", 30, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363D60;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchResultCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
      if (result) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t *v5 = v9;
    }
    else
    {
      uint64_t *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::pdl_interp::SwitchOperandCountOp::verify(&v4) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_type", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C362F50;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (void **)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::SwitchTypeOp::verifyInvariantsImpl((mlir::pdl_interp::SwitchTypeOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_types", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C363338;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchTypesOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(void *)a3 == 0x756C615665736163 ? (BOOL v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(void *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      void *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(v7, (void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  int Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::readProperties(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>>(a1, a2))return 0; {
  int v4 = a1;
  }
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (uint64_t v7 = a1, mlir::pdl_interp::SwitchTypesOp::verifyInvariantsImpl((mlir::pdl_interp::SwitchTypesOp *)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::pdl_interp::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    int v4 = &v33;
    unint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unint64_t v5 = (char *)v40;
        int v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        int v4 = &v33;
        unint64_t v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      unint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          unint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          unint64_t v12 = (char *)v40;
        }
      }
      uint64_t v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      unint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      int v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v4) = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(void *)a1 + 8 * v5 - 8;
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = result;
  BOOL v13 = result == a3;
  if (result != a3 || a2 != a4)
  {
    __n128 result = (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 176))(a5, *(void *)(result + 32 * a2 + 24));
    if (!v13 || a2 + 1 != a4)
    {
      if (!v13)
      {
        for (i = (uint64_t *)(v12 + 32 * a2 + 56); ; i += 4)
        {
          uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
          int v24 = *(const char **)a7;
          unint64_t v25 = *(void *)(a7 + 8);
          unint64_t v26 = (void *)*((void *)v23 + 4);
          if (v25 > *((void *)v23 + 3) - (void)v26)
          {
            llvm::raw_ostream::write(v23, v24, *(void *)(a7 + 8));
          }
          else if (v25)
          {
            memcpy(v26, v24, *(void *)(a7 + 8));
            *((void *)v23 + 4) += v25;
          }
          uint64_t v22 = *i;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 176))(a5, v22);
        }
      }
      uint64_t v14 = ~a2 + a4;
      unint64_t v15 = (uint64_t *)(v12 + 32 * a2 + 56);
      do
      {
        unint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
        unsigned int v18 = *(const char **)a7;
        unint64_t v19 = *(void *)(a7 + 8);
        unint64_t v20 = (void *)*((void *)v17 + 4);
        if (v19 > *((void *)v17 + 3) - (void)v20)
        {
          llvm::raw_ostream::write(v17, v18, *(void *)(a7 + 8));
        }
        else if (v19)
        {
          memcpy(v20, v18, *(void *)(a7 + 8));
          *((void *)v17 + 4) += v19;
        }
        uint64_t v16 = *v15;
        v15 += 4;
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a5 + 176))(a5, v16);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    unsigned int v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        unsigned int v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        unsigned int v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::AsmParser::parseType<mlir::pdl::PDLType>(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v19 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v19)) {
    return 0;
  }
  uint64_t v5 = v19;
  if (mlir::pdl::PDLType::classof(v19)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  if (v6) {
    return 1;
  }
  unint64_t v17 = "invalid kind of type specified";
  __int16 v18 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v20, a1, v4, &v17);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    uint64_t v9 = __p;
    if (__p)
    {
      uint64_t v10 = v26;
      uint64_t v11 = __p;
      if (v26 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      unint64_t v26 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v23;
    if (v23)
    {
      BOOL v13 = v24;
      long long v14 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v16 = *--v13;
          uint64_t v15 = v16;
          *BOOL v13 = 0;
          if (v16) {
            MEMORY[0x21667D390](v15, 0x1000C8077774924);
          }
        }
        while (v13 != v12);
        long long v14 = v23;
      }
      int v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v7;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    uint64_t v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        uint64_t v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateOperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ExtractOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    unint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      unint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::SymbolRefAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v20, a3)) {
    return 0;
  }
  uint64_t v7 = v20;
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  unsigned int v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v27;
      uint64_t v12 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    BOOL v13 = v24;
    if (v24)
    {
      long long v14 = v25;
      unint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          void *v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v24;
      }
      unint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::RecordMatchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    int v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::DenseIntElementsAttr>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v21 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v21, a3)) {
    return 0;
  }
  uint64_t v7 = v21;
  if (mlir::DenseIntElementsAttr::classof(v21)) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  *a2 = v8;
  if (v8) {
    return 1;
  }
  int v19 = "invalid kind of attribute specified";
  __int16 v20 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v22, a1, v6, &v19);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  }
  if (v29)
  {
    uint64_t v11 = __p;
    if (__p)
    {
      uint64_t v12 = v28;
      BOOL v13 = __p;
      if (v28 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        BOOL v13 = __p;
      }
      uint64_t v28 = v11;
      operator delete(v13);
    }
    long long v14 = v25;
    if (v25)
    {
      unint64_t v15 = v26;
      uint64_t v16 = v25;
      if (v26 != v25)
      {
        do
        {
          uint64_t v18 = *--v15;
          uint64_t v17 = v18;
          void *v15 = 0;
          if (v18) {
            MEMORY[0x21667D390](v17, 0x1000C8077774924);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v25;
      }
      unint64_t v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24) {
      free(v23);
    }
  }
  return v9;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667D3C0);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    int v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    uint64_t v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        uint64_t v5 = (char *)v40;
        long long v4 = (void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        uint64_t v5 = (char *)v40;
      }
    }
    uint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v41;
  }
  unint64_t v33 = *(void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    unint64_t v33 = AttrData;
    int v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      int v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      BOOL v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)BOOL v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      int v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = __p[0];
    if (__p[0])
    {
      uint64_t v22 = __p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    uint64_t v24 = v44[0];
    if (v44[0])
    {
      unint64_t v25 = v44[1];
      unint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          uint64_t v28 = *--v25;
          uint64_t v27 = v28;
          void *v25 = 0;
          if (v28) {
            MEMORY[0x21667D390](v27, 0x1000C8077774924);
          }
        }
        while (v25 != v24);
        unint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

void mlir::createPDLToPDLInterpPass()
{
}

void anonymous namespace'::PDLToPDLInterpPass::~PDLToPDLInterpPass(_anonymous_namespace_::PDLToPDLInterpPass *this)
{
  mlir::Pass::~Pass(this);

  JUMPOUT(0x21667D3C0);
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<anonymous namespace'::PDLToPDLInterpPass>::getName()
{
  return "ConvertPDLToPDLInterp";
}

void *mlir::impl::ConvertPDLToPDLInterpBase<anonymous namespace'::PDLToPDLInterpPass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C387150;
  long long v4 = v3;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::pdl_interp::PDLInterpDialect,void>::id, "pdl_interp", 0xAuLL, v3);
  __n128 result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<anonymous namespace'::PDLToPDLInterpPass>::getArgument()
{
  return "convert-pdl-to-pdl-interp";
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<anonymous namespace'::PDLToPDLInterpPass>::getDescription()
{
  return "Convert PDL ops to PDL interpreter ops";
}

void anonymous namespace'::PDLToPDLInterpPass::runOnOperation(_anonymous_namespace_::PDLToPDLInterpPass *this)
{
  v14[2] = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(v1
                 + 64
                 + 16 * (((unint64_t)*(unsigned int *)(v1 + 44) >> 23) & 1)
                 + (((unint64_t)*(unsigned int *)(v1 + 44) >> 21) & 0x7F8)
                 + 32 * *(unsigned int *)(v1 + 40)
                 + 8);
  if (v2) {
    uint64_t v3 = (mlir::Block *)(v2 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  long long v4 = (mlir::MLIRContext *)*((void *)v3 + 5);
  Parent = (mlir::Region *)mlir::Block::getParent(v3);
  int Context = (mlir::MLIRContext *)mlir::Region::getContext(Parent);
  unint64_t v10[2] = v3;
  v10[3] = v4;
  uint64_t v7 = *(void *)(v1 + 24);
  v10[0] = Context;
  v10[1] = 0;
  v12[0] = (uint64_t)"matcher";
  v12[1] = 7;
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
  *(void *)&long long v11 = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  mlir::ValueRange::ValueRange(v14, (uint64_t)&v11, 1uLL);
  mlir::ValueRange::ValueRange(v13, 0, 0);
  *(void *)&long long v9 = mlir::Builder::getFunctionType(v10, v14[0], v14[1], v13[0], v13[1]);
  mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,llvm::StringRef,mlir::FunctionType,std::nullopt_t const&>(v10, v7, v12, (uint64_t *)&v9);
}

void mlir::impl::ConvertPDLToPDLInterpBase<anonymous namespace'::PDLToPDLInterpPass>::clonePass()
{
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C387150;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C387150;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"pdl_interp", 10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::PDLInterpDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl_interp::PDLInterpDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

uint64_t std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target_type()
{
}

void llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl_interp::PDLInterpDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(void)#1}>()
{
}

void mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,llvm::StringRef,mlir::FunctionType,std::nullopt_t const&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v16[38] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.func", (const unsigned __int8 *)0xF, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v16, a2, v9);
    mlir::pdl_interp::FuncOp::build(a1, (uint64_t)v16, *a3, a3[1], *a4, 0, 0);
  }
  __int16 v15 = 1283;
  v14[2] = (uint64_t)"pdl_interp.func";
  v14[3] = 15;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v13 = 259;
  llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
  llvm::report_fatal_error((llvm::Twine *)v16, 1);
}

void mlir::OpBuilder::create<mlir::ModuleOp,llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  v12[38] = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (v6)
  {
    mlir::OperationState::OperationState(v12, a2, v5);
    mlir::ModuleOp::build(a1, (mlir::OperationState *)v12);
  }
  __int16 v11 = 1283;
  unint64_t v10[2] = (uint64_t)"builtin.module";
  v10[3] = 14;
       "e dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v9 = 259;
  llvm::operator+(v10, (uint64_t *)&v8, (uint64_t)v12);
  llvm::report_fatal_error((llvm::Twine *)v12, 1);
}

void anonymous namespace'::PatternLowering::generateMatcher(_anonymous_namespace_::PatternLowering *this, mlir::pdl_to_pdl_interp::MatcherNode *a2, mlir::Region *a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::pdl_to_pdl_interp::PredicateUniquer::PredicateUniquer(mlir::pdl_to_pdl_interp::PredicateUniquer *this)
{
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributePosition]";
    unint64_t v8 = 92;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
    unint64_t v8 = 99;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ForEachPosition]";
    unint64_t v8 = 90;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ForEachPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandPosition]";
    unint64_t v8 = 90;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandGroupPosition]";
    unint64_t v8 = 95;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
    unint64_t v8 = 92;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultPosition]";
    unint64_t v8 = 89;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultGroupPosition]";
    unint64_t v8 = 94;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypePosition]";
    unint64_t v8 = 87;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
    unint64_t v8 = 94;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UsersPosition]";
    unint64_t v8 = 88;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UsersPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeAnswer>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeAnswer]";
    unint64_t v8 = 90;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationNameAnswer>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameAnswer]";
    unint64_t v8 = 94;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeAnswer>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeAnswer]";
    unint64_t v8 = 85;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UnsignedAnswer>()
{
  {
    uint64_t v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UnsignedAnswer]";
    unint64_t v8 = 89;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UnsignedAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::FalseAnswer]";
      unint64_t v20 = 86;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::FalseAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[58];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::FalseAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TrueAnswer]";
      unint64_t v20 = 85;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[60];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TrueAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ConstraintQuestion>()
{
  {
    int v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
    unint64_t v8 = 93;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::EqualToQuestion>()
{
  {
    int v7 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::EqualToQuestion]";
    unint64_t v8 = 90;
    unint64_t v0 = llvm::StringRef::find((uint64_t *)&v7, "DesiredTypeName = ", 0x12uLL, 0);
    if (v8 >= v0) {
      unint64_t v1 = v0;
    }
    else {
      unint64_t v1 = v8;
    }
    uint64_t v2 = &v7[v1];
    unint64_t v3 = v8 - v1;
    if (v8 - v1 >= 0x12) {
      uint64_t v4 = 18;
    }
    else {
      uint64_t v4 = v8 - v1;
    }
    unint64_t v5 = v3 - v4;
    if (v5 >= v5 - 1) {
      uint64_t v6 = v5 - 1;
    }
    else {
      uint64_t v6 = v5;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::EqualToQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v2[v4], v6);
  }
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeQuestion]";
      unint64_t v20 = 92;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[66];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::IsNotNullQuestion]";
      unint64_t v20 = 92;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[68];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::IsNotNullQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountQuestion]";
      unint64_t v20 = 95;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[70];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion]";
      unint64_t v20 = 102;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[72];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameQuestion]";
      unint64_t v20 = 96;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[74];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountQuestion]";
      unint64_t v20 = 94;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[76];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion]";
      unint64_t v20 = 101;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[78];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

void *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v16 = a3;
    uint64_t v17 = a1;
    __int16 v15 = a2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v15;
    a3 = v16;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      int v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeQuestion]";
      unint64_t v20 = 87;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v20;
      }
      char v10 = &v19[v9];
      unint64_t v11 = v20 - v9;
      if (v20 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v20 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v15;
      a3 = v16;
      a1 = v17;
    }
  }
  uint64_t v4 = v3[80];
  int v19 = a2;
  unint64_t v20 = a3;
  unsigned int v18 = &v19;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v4, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v18);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(void))
{
  return (**a2)(a2);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::FalseAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 22;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TrueAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 24;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 14;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::IsNotNullQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 11;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 16;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 15;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 12;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 18;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 17;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t a2)
{
  *(void *)(a2 + 80) += 8;
  if (*(void *)a2) {
    BOOL v4 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 8 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v6];
    unint64_t v9 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v9 = (void *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v9 + 1;
  *unint64_t v9 = 13;
  char v10 = **a1;
  if (v10) {
    v10((*a1)[1], v9);
  }
  return v9;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6 = a4;
  int v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v19 = a3;
  uint64_t v18 = a2;
  int v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  a2 = v18;
  a3 = v19;
  uint64_t v6 = a4;
  a5 = v21;
  int v10 = v9;
  a1 = v22;
  if (!v10) {
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(a1, a2, a3, v7[38], v6, a5);
  }
  uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  unint64_t v24 = 92;
  unint64_t v11 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
  if (v24 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v24;
  }
  unint64_t v13 = &v23[v12];
  unint64_t v14 = v24 - v12;
  if (v24 - v12 >= 0x12) {
    uint64_t v15 = 18;
  }
  else {
    uint64_t v15 = v24 - v12;
  }
  unint64_t v16 = v14 - v15;
  if (v16 >= v16 - 1) {
    uint64_t v17 = v16 - 1;
  }
  else {
    uint64_t v17 = v16;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(v22, v18, v19, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v21);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = a4;
  uint64_t v22 = *MEMORY[0x263EF8340];
  v19[0] = a2;
  v19[1] = a3;
  uint64_t v7 = *a6;
  *(void *)&long long v18 = 0;
  *((void *)&v18 + 1) = v7;
  LODWORD(v21) = 0;
  unint64_t v20 = 0;
  uint64_t v8 = &unk_267770000;
  {
    unint64_t v16 = a1;
    uint64_t v8 = &unk_267770000;
    int v13 = v12;
    uint64_t v6 = a4;
    a1 = v16;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      uint64_t v8 = (void *)&unk_267770000;
      uint64_t v6 = a4;
      a1 = v16;
    }
  }
  uint64_t v9 = __ROR8__(*(void *)((char *)&v18 + 4) + 12, 12);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * (v9 ^ ((0x9DDFEA08EB382D69 * (v8[385] ^ (unint64_t)v18 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                       * (v8[385] ^ v18 ^ v9)));
  uint64_t v17 = &v18;
  unint64_t v20 = &v18;
  uint64_t v21 = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v10 >> 47) ^ v10)) ^ DWORD1(v18), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)unint64_t v9 = &unk_26C3622D8;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_26C3623D8;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::OperationPosition::~OperationPosition(mlir::pdl_to_pdl_interp::OperationPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);

  JUMPOUT(0x21667D3C0);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::FinalizeOp>(ZinIrHalH13g *a1, uint64_t a2)
{
  v15[38] = *MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.finalize", (const unsigned __int8 *)0x13, Context);
  if (!v6)
  {
    __int16 v14 = 1283;
    unint64_t v13[2] = (uint64_t)"pdl_interp.finalize";
    v13[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v12 = 259;
    llvm::operator+(v13, (uint64_t *)&v11, (uint64_t)v15);
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  mlir::OperationState::OperationState(v15, a2, v5);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v7 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v15);
  if (*(_UNKNOWN **)(*((void *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v15);
  return v8;
}

uint64_t anonymous namespace'::PatternLowering::getValueAt(_anonymous_namespace_::PatternLowering *this, mlir::Block **a2, mlir::pdl_to_pdl_interp::Position *a3)
{
  v61[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = (char *)this + 88;
  uint64_t v6 = *((void *)this + 11);
  uint64_t v8 = *((unsigned int *)this + 26);
  unsigned int v9 = a3 >> 4;
  if (v8)
  {
    LODWORD(v10) = (v8 - 1) & (v9 ^ (a3 >> 9));
    uint64_t v11 = v6 + 16 * v10;
    __int16 v12 = *(mlir::pdl_to_pdl_interp::Position **)v11;
    if (*(mlir::pdl_to_pdl_interp::Position **)v11 == a3) {
      goto LABEL_8;
    }
    int v13 = 1;
    while (v12 != (mlir::pdl_to_pdl_interp::Position *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v8 - 1);
      __int16 v12 = *(mlir::pdl_to_pdl_interp::Position **)(v6 + 16 * v10);
      if (v12 == a3)
      {
        uint64_t v11 = v6 + 16 * v10;
        goto LABEL_8;
      }
    }
  }
  uint64_t v11 = v6 + 16 * v8;
LABEL_8:
  if (v11 == v6 + 16 * v8)
  {
    ValueAt = 0;
    v61[0] = 0;
    unint64_t v16 = (mlir::pdl_to_pdl_interp::Position *)*((void *)a3 + 1);
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t result = *(void *)(*(void *)(v11 + 8) + 24);
    v61[0] = result;
    if (result) {
      return result;
    }
    ValueAt = 0;
    unint64_t v16 = (mlir::pdl_to_pdl_interp::Position *)*((void *)a3 + 1);
    if (!v16) {
      goto LABEL_15;
    }
  }
  if (ValueAt)
  {
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&ValueAt);
    goto LABEL_16;
  }
LABEL_15:
  uint64_t Loc = mlir::Builder::getUnknownLoc((mlir::UnknownLoc **)this, (mlir::MLIRContext *)a2);
LABEL_16:
  uint64_t v18 = Loc;
  uint64_t v19 = (char *)*a2 + 32;
  *((void *)this + 2) = *a2;
  *((void *)this + 3) = v19;
  switch(*((_DWORD *)a3 + 4))
  {
    case 1:
      TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
      v58[0] = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
      LODWORD(v59) = *((_DWORD *)a3 + 8);
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetOperandOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(this, v18, v58, (uint64_t *)&ValueAt, (unsigned int *)&v59);
      goto LABEL_49;
    case 2:
      unint64_t v24 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
      uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(v24, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
      if (*((unsigned char *)a3 + 40)) {
        uint64_t SingletonImpl = mlir::pdl::RangeType::get(SingletonImpl);
      }
      v58[0] = SingletonImpl;
      uint64_t v59 = *((void *)a3 + 4);
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetOperandsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(this, v18, v58, (uint64_t *)&ValueAt, &v59);
      goto LABEL_49;
    case 3:
      unint64_t v26 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
      uint64_t v59 = mlir::StorageUniquer::getSingletonImpl(v26, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
      uint64_t v57 = *((void *)a3 + 4);
      v58[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v57);
      v58[1] = v27;
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeOp,mlir::pdl::AttributeType,mlir::Value &,llvm::StringRef>((mlir::StringAttr **)this, v18, &v59, (uint64_t *)&ValueAt, v58);
      goto LABEL_49;
    case 4:
      uint64_t v22 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
      v58[0] = mlir::StorageUniquer::getSingletonImpl(v22, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
      LODWORD(v59) = *((_DWORD *)a3 + 8);
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(this, v18, v58, (uint64_t *)&ValueAt, (unsigned int *)&v59);
      goto LABEL_49;
    case 5:
      unint64_t v29 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
      uint64_t v30 = mlir::StorageUniquer::getSingletonImpl(v29, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
      if (*((unsigned char *)a3 + 40)) {
        uint64_t v30 = mlir::pdl::RangeType::get(v30);
      }
      v58[0] = v30;
      uint64_t v59 = *((void *)a3 + 4);
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(this, v18, v58, (uint64_t *)&ValueAt, &v59);
      goto LABEL_49;
    case 6:
      if (*(_UNKNOWN **)(*(void *)(*((void *)ValueAt + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id) {
        uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeTypeOp,mlir::Value &>((mlir::MLIRContext **)this, Loc, (uint64_t *)&ValueAt);
      }
      else {
        uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::Value &>((mlir::MLIRContext **)this, Loc, (uint64_t *)&ValueAt);
      }
      goto LABEL_49;
    case 7:
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>((mlir::MLIRContext **)this, Loc, (uint64_t *)a3 + 3);
      goto LABEL_49;
    case 8:
      uint64_t v31 = *((void *)a3 + 3);
      if (*(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
        uint64_t v32 = *((void *)a3 + 3);
      }
      else {
        uint64_t v32 = 0;
      }
      v58[0] = v32;
      if (v32)
      {
        uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>((mlir::MLIRContext **)this, Loc, v58);
      }
      else
      {
        uint64_t v59 = v31;
        uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::ArrayAttr>((mlir::MLIRContext **)this, Loc, &v59);
      }
      goto LABEL_49;
    case 9:
      uint64_t v23 = ValueAt;
      if (*(_UNKNOWN **)(*(void *)(*((void *)ValueAt + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
        && *((unsigned char *)a3 + 32))
      {
        LODWORD(v58[0]) = 0;
        uint64_t v23 = (char *)mlir::OpBuilder::create<mlir::pdl_interp::ExtractOp,mlir::Value &,int>(this, Loc, (uint64_t *)&ValueAt, (unsigned int *)v58)- 16;
      }
      v61[0] = (uint64_t)v23;
      uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetUsersOp,mlir::Value &>((mlir::MLIRContext **)this, v18, v61);
      goto LABEL_49;
    case 0xA:
      LOBYTE(v59) = 1;
      mlir::OpBuilder::create<mlir::pdl_interp::ForEachOp,mlir::Value &,mlir::Block *&,BOOL>((uint64_t)this, Loc, (uint64_t *)&ValueAt);
    default:
      if (mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(a3))
      {
        unint64_t v20 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)this);
        v58[0] = mlir::StorageUniquer::getSingletonImpl(v20, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
        uint64_t v21 = mlir::OpBuilder::create<mlir::pdl_interp::GetDefiningOpOp,mlir::pdl::OperationType,mlir::Value &>(this, v18, v58, (uint64_t *)&ValueAt);
LABEL_49:
        uint64_t v34 = (uint64_t)v21 - 16;
      }
      else
      {
        uint64_t v34 = (uint64_t)ValueAt;
      }
      v61[0] = v34;
      uint64_t v35 = *((void *)this + 14);
      unsigned int v36 = *((_DWORD *)this + 26);
      if (!v36) {
        goto LABEL_66;
      }
      uint64_t v37 = *((void *)this + 11);
      unsigned int v38 = (v36 - 1) & (v9 ^ (a3 >> 9));
      int v39 = (mlir::pdl_to_pdl_interp::Position **)(v37 + 16 * v38);
      int v40 = *v39;
      if (*v39 == a3) {
        goto LABEL_52;
      }
      unint64_t v44 = 0;
      int v45 = 1;
      break;
  }
  while (v40 != (mlir::pdl_to_pdl_interp::Position *)-4096)
  {
    if (v44) {
      BOOL v46 = 0;
    }
    else {
      BOOL v46 = v40 == (mlir::pdl_to_pdl_interp::Position *)-8192;
    }
    if (v46) {
      unint64_t v44 = v39;
    }
    unsigned int v47 = v38 + v45++;
    unsigned int v38 = v47 & (v36 - 1);
    int v39 = (mlir::pdl_to_pdl_interp::Position **)(v37 + 16 * v38);
    int v40 = *v39;
    if (*v39 == a3) {
      goto LABEL_52;
    }
  }
  if (v44) {
    int v39 = v44;
  }
  int v48 = *((_DWORD *)this + 24);
  if (4 * v48 + 4 < 3 * v36)
  {
    if (v36 + ~v48 - *((_DWORD *)this + 25) > v36 >> 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_66:
    v36 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v7, v36);
  uint64_t v49 = *((void *)this + 11);
  int v50 = *((_DWORD *)this + 26) - 1;
  unsigned int v51 = v50 & (v9 ^ (a3 >> 9));
  int v39 = (mlir::pdl_to_pdl_interp::Position **)(v49 + 16 * v51);
  int v52 = *v39;
  if (*v39 != a3)
  {
    unint64_t v53 = 0;
    int v54 = 1;
    while (v52 != (mlir::pdl_to_pdl_interp::Position *)-4096)
    {
      if (v53) {
        BOOL v55 = 0;
      }
      else {
        BOOL v55 = v52 == (mlir::pdl_to_pdl_interp::Position *)-8192;
      }
      if (v55) {
        unint64_t v53 = v39;
      }
      unsigned int v56 = v51 + v54++;
      unsigned int v51 = v56 & v50;
      int v39 = (mlir::pdl_to_pdl_interp::Position **)(v49 + 16 * v51);
      int v52 = *v39;
      if (*v39 == a3) {
        goto LABEL_68;
      }
    }
    if (v53) {
      int v39 = v53;
    }
LABEL_43:
    unint64_t v33 = *v39;
    ++*((_DWORD *)this + 24);
    if (v33 == (mlir::pdl_to_pdl_interp::Position *)-4096) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_68:
  ++*((_DWORD *)this + 24);
  if (a3 != (mlir::pdl_to_pdl_interp::Position *)-4096) {
LABEL_44:
  }
    --*((_DWORD *)this + 25);
LABEL_45:
  *int v39 = a3;
  v39[1] = 0;
LABEL_52:
  uint64_t v41 = *(void *)(v35 + 16);
  unsigned int v42 = v39[1];
  buffer = (mlir::pdl_to_pdl_interp::Position *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
  uint64_t result = v61[0];
  *((void *)buffer + 2) = a3;
  *((void *)buffer + 3) = result;
  *(void *)buffer = v41;
  *((void *)buffer + 1) = v42;
  v39[1] = buffer;
  *(void *)(v35 + 16) = buffer;
  return result;
}

unsigned char *llvm::detail::TypeSwitchBase<llvm::TypeSwitch<mlir::pdl_to_pdl_interp::MatcherNode *,void>,mlir::pdl_to_pdl_interp::MatcherNode *>::Case<anonymous namespace'::PatternLowering::generateMatcher(mlir::pdl_to_pdl_interp::MatcherNode&,mlir::Region &)::$_1>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a1[8])
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(*(void *)a1 + 40);
    {
      uint64_t v2 = a1;
      if (v14)
      {
        FunctionType = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SuccessNode]";
        unint64_t v25 = 86;
        unint64_t v15 = llvm::StringRef::find((uint64_t *)&FunctionType, "DesiredTypeName = ", 0x12uLL, 0);
        if (v25 >= v15) {
          unint64_t v16 = v15;
        }
        else {
          unint64_t v16 = v25;
        }
        uint64_t v17 = (char *)FunctionType + v16;
        unint64_t v18 = v25 - v16;
        if (v25 - v16 >= 0x12) {
          uint64_t v19 = 18;
        }
        else {
          uint64_t v19 = v25 - v16;
        }
        unint64_t v20 = v18 - v19;
        if (v20 >= v20 - 1) {
          uint64_t v21 = v20 - 1;
        }
        else {
          uint64_t v21 = v20;
        }
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
        uint64_t v2 = a1;
      }
    }
    if (v5 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = *(void *)(v4 + 48);
      uint64_t v8 = *(void *)(*a2 + 40);
      uint64_t v9 = *(void *)(((v8
                       + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1)
                       + (((unint64_t)*(unsigned int *)(v8 + 44) >> 21) & 0x7F8)
                       + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(v8 + 40)
                     + 8);
      if (v9) {
        uint64_t v10 = v9 - 8;
      }
      else {
        uint64_t v10 = 0;
      }
      *(void *)(v6 + 16) = v10;
      *(void *)(v6 + 24) = v10 + 32;
      uint64_t v11 = *(void *)(v7 + 24);
      mlir::ValueRange::ValueRange(v23, 0, 0);
      mlir::ValueRange::ValueRange(v22, 0, 0);
      FunctionType = (void *)mlir::Builder::getFunctionType((mlir::MLIRContext **)v6, v23[0], v23[1], v22[0], v22[1]);
      mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,char const(&)[23],mlir::FunctionType>((mlir::StringAttr **)v6, v11, "pdl_generated_rewriter", (uint64_t *)&FunctionType);
    }
  }
  return v2;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetDefiningOpOp,mlir::pdl::OperationType,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_defining_op", (const unsigned __int8 *)0x1A, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.get_defining_op";
    v17[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id) {
    __int16 v12 = v11;
  }
  else {
    __int16 v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ExtractOp,mlir::Value &,int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.extract", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.extract";
    v17[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::ExtractOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id) {
    __int16 v12 = v11;
  }
  else {
    __int16 v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetUsersOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_users", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_users";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetUsersOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::OpBuilder::create<mlir::pdl_interp::ForEachOp,mlir::Value &,mlir::Block *&,BOOL>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v14[38] = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.foreach", (const unsigned __int8 *)0x12, Context);
  if (v8)
  {
    mlir::OperationState::OperationState(v14, a2, v7);
    mlir::pdl_interp::ForEachOp::build(a1, (mlir::OperationState *)v14, *a3);
  }
  __int16 v13 = 1283;
  uint64_t v12[2] = (uint64_t)"pdl_interp.foreach";
  v12[3] = 18;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v11 = 259;
  llvm::operator+(v12, (uint64_t *)&v10, (uint64_t)v14);
  llvm::report_fatal_error((llvm::Twine *)v14, 1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ContinueOp>(ZinIrHalH13g *a1, uint64_t a2)
{
  v15[38] = *MEMORY[0x263EF8340];
  uint64_t v10 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.continue", (const unsigned __int8 *)0x13, Context);
  if (!v6)
  {
    __int16 v14 = 1283;
    unint64_t v13[2] = (uint64_t)"pdl_interp.continue";
    v13[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v12 = 259;
    llvm::operator+(v13, (uint64_t *)&v11, (uint64_t)v15);
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  mlir::OperationState::OperationState(v15, a2, v5);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  uint64_t v7 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v15);
  if (*(_UNKNOWN **)(*((void *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id) {
    char v8 = v7;
  }
  else {
    char v8 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v15);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetOperandOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_operand", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_operand";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetOperandOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  __int16 v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetOperandsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_operands", (const unsigned __int8 *)0x17, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_operands";
    v19[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetOperandsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  __int16 v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeOp,mlir::pdl::AttributeType,mlir::Value &,llvm::StringRef>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_attribute", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_attribute";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetAttributeOp::build(a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  __int16 v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeTypeOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_attribute_type", (const unsigned __int8 *)0x1D, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_attribute_type";
    v15[3] = 29;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetAttributeTypeOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_value_type", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_value_type";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetValueTypeOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_result", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_result";
    v19[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  __int16 v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_results";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  __int16 v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_attribute", (const unsigned __int8 *)0x1B, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_attribute";
    v15[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateAttributeOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_type", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_type";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateTypeOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::ArrayAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_types", (const unsigned __int8 *)0x17, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_types";
    v15[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateTypesOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::IsNotNullOp,mlir::Value &,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.is_not_null", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.is_not_null";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::IsNotNullOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  __int16 v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckOperationNameOp,mlir::Value &,llvm::StringRef,mlir::Block *&,mlir::Block *&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_operation_name", (const unsigned __int8 *)0x1F, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_operation_name";
    void v21[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckOperationNameOp::build(a1, (uint64_t)v23, *a3, *a4, a4[1], *a5, *a6);
  unint64_t v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckTypesOp,mlir::Value &,mlir::ArrayAttr,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_types", (const unsigned __int8 *)0x16, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_types";
    void v21[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckTypesOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  unint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckTypeOp,mlir::Value &,mlir::TypeAttr,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_type", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_type";
    void v21[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckTypeOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  unint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckAttributeOp,mlir::Value &,mlir::Attribute const&,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_attribute", (const unsigned __int8 *)0x1A, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_attribute";
    void v21[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckAttributeOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  unint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckOperandCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_operand_count", (const unsigned __int8 *)0x1E, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    unint64_t v23[2] = (uint64_t)"pdl_interp.check_operand_count";
    v23[3] = 30;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::pdl_interp::CheckOperandCountOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckResultCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_result_count", (const unsigned __int8 *)0x1D, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    unint64_t v23[2] = (uint64_t)"pdl_interp.check_result_count";
    v23[3] = 29;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::pdl_interp::CheckResultCountOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::AreEqualOp,mlir::Value &,mlir::Value &,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.are_equal", (const unsigned __int8 *)0x14, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.are_equal";
    void v21[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::AreEqualOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id) {
    char v16 = v15;
  }
  else {
    char v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyConstraintOp,llvm::StringRef,llvm::SmallVector<mlir::Value,6u> &,BOOL,mlir::Block *&,mlir::Block *&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_constraint", (const unsigned __int8 *)0x1B, Context);
  if (!v16)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.apply_constraint";
    v25[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v15);
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  mlir::ValueRange::ValueRange(v27, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::ApplyConstraintOp::build(a1, (uint64_t)v28, v18, v17, v27[0], v27[1], (mlir::MLIRContext *)*a5, *a6, *a7);
  uint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id) {
    __int16 v20 = v19;
  }
  else {
    __int16 v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

void createSwitchOp<mlir::pdl_interp::SwitchOperandCountOp,mlir::pdl_to_pdl_interp::UnsignedAnswer,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  __p = 0;
  uint64_t v56 = a2;
  uint64_t v57 = a1;
  unint64_t v53 = 0;
  int v54 = 0;
  BOOL v55 = 0;
  unsigned int v51 = 0;
  int v52 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    unint64_t v53 = operator new(4 * v4);
    int v54 = (char *)v53;
    BOOL v55 = (char *)v53 + 4 * v4;
    char v6 = (char *)operator new(8 * v4);
    uint64_t v7 = *(void **)(a4 + 24);
    char v8 = &v7[2 * v4];
    __p = v6;
    unsigned int v51 = v6;
    int v52 = &v6[8 * v4];
    while (1)
    {
      if (v6 < v52)
      {
        *(void *)char v6 = v7[1];
        v6 += 8;
        unsigned int v51 = v6;
        int v10 = *(_DWORD *)(*v7 + 8);
        char v12 = v54;
        uint64_t v11 = v55;
        if (v54 >= v55) {
          goto LABEL_27;
        }
        goto LABEL_3;
      }
      uint64_t v13 = (char *)__p;
      int64_t v14 = v6 - (unsigned char *)__p;
      uint64_t v15 = (v6 - (unsigned char *)__p) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        goto LABEL_61;
      }
      uint64_t v17 = v52 - (unsigned char *)__p;
      if ((v52 - (unsigned char *)__p) >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          goto LABEL_62;
        }
        uint64_t v19 = operator new(8 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      __int16 v20 = &v19[8 * v15];
      *(void *)__int16 v20 = v7[1];
      uint64_t v21 = v20 + 8;
      if (v6 == v13)
      {
        __p = &v19[8 * v15];
        int v52 = &v19[8 * v18];
LABEL_25:
        operator delete(v6);
        goto LABEL_26;
      }
      unint64_t v22 = v6 - 8 - v13;
      if (v22 < 0x168)
      {
        uint64_t v23 = v6;
        goto LABEL_21;
      }
      if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8]) {
        break;
      }
      if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        uint64_t v23 = v6;
        do
        {
LABEL_21:
          uint64_t v24 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v23 != v13);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - &v19[v14]) < 0x20)
      {
        uint64_t v23 = v6;
        goto LABEL_21;
      }
      uint64_t v42 = (v22 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v23 = &v6[-v43];
      v20 -= v43;
      unint64_t v44 = &v19[8 * v15 - 16];
      int v45 = (long long *)(v6 - 16);
      uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *unint64_t v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      char v6 = (char *)__p;
      __p = v20;
      int v52 = &v19[8 * v18];
      if (v6) {
        goto LABEL_25;
      }
LABEL_26:
      char v6 = v21;
      unsigned int v51 = v21;
      int v10 = *(_DWORD *)(*v7 + 8);
      char v12 = v54;
      uint64_t v11 = v55;
      if (v54 >= v55)
      {
LABEL_27:
        unint64_t v25 = (char *)v53;
        int64_t v26 = v12 - (unsigned char *)v53;
        uint64_t v27 = (v12 - (unsigned char *)v53) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
LABEL_61:
        }
          abort();
        uint64_t v29 = v11 - (unsigned char *)v53;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 62) {
LABEL_62:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v31 = operator new(4 * v30);
          uint64_t v32 = &v31[4 * v27];
          _DWORD *v32 = v10;
          uint64_t v9 = (uint64_t)(v32 + 1);
          if (v12 == v25) {
            goto LABEL_44;
          }
LABEL_38:
          unint64_t v33 = v12 - 4 - v25;
          if (v33 < 0x2C) {
            goto LABEL_65;
          }
          if ((unint64_t)(v12 - &v31[v26]) < 0x20) {
            goto LABEL_65;
          }
          uint64_t v34 = (v33 >> 2) + 1;
          uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v36 = &v12[-v35];
          uint64_t v32 = (_DWORD *)((char *)v32 - v35);
          uint64_t v37 = &v31[4 * v27 - 16];
          unsigned int v38 = v12 - 16;
          uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *uint64_t v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          char v12 = v36;
          if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_65:
            do
            {
              int v41 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--uint64_t v32 = v41;
            }
            while (v12 != v25);
          }
        }
        else
        {
          uint64_t v31 = 0;
          uint64_t v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v10;
          uint64_t v9 = 4 * v27 + 4;
          if (v12 != v25) {
            goto LABEL_38;
          }
        }
LABEL_44:
        unint64_t v53 = v32;
        BOOL v55 = &v31[4 * v30];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_4;
      }
LABEL_3:
      *(_DWORD *)char v12 = v10;
      uint64_t v9 = (uint64_t)(v12 + 4);
LABEL_4:
      int v54 = (char *)v9;
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_56;
      }
    }
    uint64_t v23 = v6;
    goto LABEL_21;
  }
LABEL_56:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v57);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperandCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v57, (uint64_t *)&v53, &v56, (uint64_t *)&__p);
  if (__p)
  {
    unsigned int v51 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    int v54 = (char *)v53;
    operator delete(v53);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchResultCountOp,mlir::pdl_to_pdl_interp::UnsignedAnswer,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  __p = 0;
  uint64_t v56 = a2;
  uint64_t v57 = a1;
  unint64_t v53 = 0;
  int v54 = 0;
  BOOL v55 = 0;
  unsigned int v51 = 0;
  int v52 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    unint64_t v53 = operator new(4 * v4);
    int v54 = (char *)v53;
    BOOL v55 = (char *)v53 + 4 * v4;
    char v6 = (char *)operator new(8 * v4);
    uint64_t v7 = *(void **)(a4 + 24);
    char v8 = &v7[2 * v4];
    __p = v6;
    unsigned int v51 = v6;
    int v52 = &v6[8 * v4];
    while (1)
    {
      if (v6 < v52)
      {
        *(void *)char v6 = v7[1];
        v6 += 8;
        unsigned int v51 = v6;
        int v10 = *(_DWORD *)(*v7 + 8);
        char v12 = v54;
        uint64_t v11 = v55;
        if (v54 >= v55) {
          goto LABEL_27;
        }
        goto LABEL_3;
      }
      uint64_t v13 = (char *)__p;
      int64_t v14 = v6 - (unsigned char *)__p;
      uint64_t v15 = (v6 - (unsigned char *)__p) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        goto LABEL_61;
      }
      uint64_t v17 = v52 - (unsigned char *)__p;
      if ((v52 - (unsigned char *)__p) >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          goto LABEL_62;
        }
        uint64_t v19 = operator new(8 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      __int16 v20 = &v19[8 * v15];
      *(void *)__int16 v20 = v7[1];
      uint64_t v21 = v20 + 8;
      if (v6 == v13)
      {
        __p = &v19[8 * v15];
        int v52 = &v19[8 * v18];
LABEL_25:
        operator delete(v6);
        goto LABEL_26;
      }
      unint64_t v22 = v6 - 8 - v13;
      if (v22 < 0x168)
      {
        uint64_t v23 = v6;
        goto LABEL_21;
      }
      if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8]) {
        break;
      }
      if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        uint64_t v23 = v6;
        do
        {
LABEL_21:
          uint64_t v24 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v23 != v13);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - &v19[v14]) < 0x20)
      {
        uint64_t v23 = v6;
        goto LABEL_21;
      }
      uint64_t v42 = (v22 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v23 = &v6[-v43];
      v20 -= v43;
      unint64_t v44 = &v19[8 * v15 - 16];
      int v45 = (long long *)(v6 - 16);
      uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *unint64_t v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      char v6 = (char *)__p;
      __p = v20;
      int v52 = &v19[8 * v18];
      if (v6) {
        goto LABEL_25;
      }
LABEL_26:
      char v6 = v21;
      unsigned int v51 = v21;
      int v10 = *(_DWORD *)(*v7 + 8);
      char v12 = v54;
      uint64_t v11 = v55;
      if (v54 >= v55)
      {
LABEL_27:
        unint64_t v25 = (char *)v53;
        int64_t v26 = v12 - (unsigned char *)v53;
        uint64_t v27 = (v12 - (unsigned char *)v53) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
LABEL_61:
        }
          abort();
        uint64_t v29 = v11 - (unsigned char *)v53;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 62) {
LABEL_62:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v31 = operator new(4 * v30);
          uint64_t v32 = &v31[4 * v27];
          _DWORD *v32 = v10;
          uint64_t v9 = (uint64_t)(v32 + 1);
          if (v12 == v25) {
            goto LABEL_44;
          }
LABEL_38:
          unint64_t v33 = v12 - 4 - v25;
          if (v33 < 0x2C) {
            goto LABEL_65;
          }
          if ((unint64_t)(v12 - &v31[v26]) < 0x20) {
            goto LABEL_65;
          }
          uint64_t v34 = (v33 >> 2) + 1;
          uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v36 = &v12[-v35];
          uint64_t v32 = (_DWORD *)((char *)v32 - v35);
          uint64_t v37 = &v31[4 * v27 - 16];
          unsigned int v38 = v12 - 16;
          uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *uint64_t v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          char v12 = v36;
          if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_65:
            do
            {
              int v41 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--uint64_t v32 = v41;
            }
            while (v12 != v25);
          }
        }
        else
        {
          uint64_t v31 = 0;
          uint64_t v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v10;
          uint64_t v9 = 4 * v27 + 4;
          if (v12 != v25) {
            goto LABEL_38;
          }
        }
LABEL_44:
        unint64_t v53 = v32;
        BOOL v55 = &v31[4 * v30];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_4;
      }
LABEL_3:
      *(_DWORD *)char v12 = v10;
      uint64_t v9 = (uint64_t)(v12 + 4);
LABEL_4:
      int v54 = (char *)v9;
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_56;
      }
    }
    uint64_t v23 = v6;
    goto LABEL_21;
  }
LABEL_56:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v57);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v57, (uint64_t *)&v53, &v56, (uint64_t *)&__p);
  if (__p)
  {
    unsigned int v51 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    int v54 = (char *)v53;
    operator delete(v53);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchOperationNameOp,mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  int v52 = 0;
  unint64_t v53 = 0;
  int v54 = 0;
  int v50 = 0;
  unsigned int v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    int v52 = operator new(8 * v4);
    unint64_t v53 = (char *)v52;
    int v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    int v50 = (char *)__p;
    unsigned int v51 = (char *)__p + 8 * v4;
    char v6 = *(uint64_t **)(a4 + 24);
    uint64_t v7 = &v6[2 * v4];
    while (1)
    {
      uint64_t v9 = v50;
      if (v50 < v51)
      {
        *(void *)int v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      uint64_t v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      unsigned int v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      int v50 = (char *)v10;
      uint64_t v28 = *v6;
      uint64_t v29 = v53;
      if (v53 >= v54)
      {
        unint64_t v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unsigned int v36 = operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          *uint64_t v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v29[-v40];
          uint64_t v37 = (void *)((char *)v37 - v40);
          uint64_t v42 = &v36[8 * v32 - 16];
          uint64_t v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *uint64_t v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          uint64_t v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--uint64_t v37 = v46;
            }
            while (v29 != v30);
          }
          uint64_t v29 = v52;
        }
        else
        {
          unsigned int v36 = 0;
          uint64_t v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        int v52 = v37;
        int v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)unint64_t v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      unint64_t v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    uint64_t v17 = operator new(8 * v16);
    unint64_t v18 = &v17[8 * v13];
    *unint64_t v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v22 = &v9[-v21];
    unint64_t v18 = (void *)((char *)v18 - v21);
    uint64_t v23 = &v17[8 * v13 - 16];
    uint64_t v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    uint64_t v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--unint64_t v18 = v27;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    int v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    unint64_t v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypesOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  int v52 = 0;
  unint64_t v53 = 0;
  int v54 = 0;
  int v50 = 0;
  unsigned int v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    int v52 = operator new(8 * v4);
    unint64_t v53 = (char *)v52;
    int v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    int v50 = (char *)__p;
    unsigned int v51 = (char *)__p + 8 * v4;
    char v6 = *(uint64_t **)(a4 + 24);
    uint64_t v7 = &v6[2 * v4];
    while (1)
    {
      uint64_t v9 = v50;
      if (v50 < v51)
      {
        *(void *)int v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      uint64_t v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      unsigned int v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      int v50 = (char *)v10;
      uint64_t v28 = *v6;
      uint64_t v29 = v53;
      if (v53 >= v54)
      {
        unint64_t v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unsigned int v36 = operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          *uint64_t v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v29[-v40];
          uint64_t v37 = (void *)((char *)v37 - v40);
          uint64_t v42 = &v36[8 * v32 - 16];
          uint64_t v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *uint64_t v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          uint64_t v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--uint64_t v37 = v46;
            }
            while (v29 != v30);
          }
          uint64_t v29 = v52;
        }
        else
        {
          unsigned int v36 = 0;
          uint64_t v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        int v52 = v37;
        int v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)unint64_t v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      unint64_t v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    uint64_t v17 = operator new(8 * v16);
    unint64_t v18 = &v17[8 * v13];
    *unint64_t v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v22 = &v9[-v21];
    unint64_t v18 = (void *)((char *)v18 - v21);
    uint64_t v23 = &v17[8 * v13 - 16];
    uint64_t v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    uint64_t v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--unint64_t v18 = v27;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    int v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    unint64_t v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypeOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  int v52 = 0;
  unint64_t v53 = 0;
  int v54 = 0;
  int v50 = 0;
  unsigned int v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    int v52 = operator new(8 * v4);
    unint64_t v53 = (char *)v52;
    int v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    int v50 = (char *)__p;
    unsigned int v51 = (char *)__p + 8 * v4;
    char v6 = *(uint64_t **)(a4 + 24);
    uint64_t v7 = &v6[2 * v4];
    while (1)
    {
      uint64_t v9 = v50;
      if (v50 < v51)
      {
        *(void *)int v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      uint64_t v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      unsigned int v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      int v50 = (char *)v10;
      uint64_t v28 = *v6;
      uint64_t v29 = v53;
      if (v53 >= v54)
      {
        unint64_t v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unsigned int v36 = operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          *uint64_t v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v29[-v40];
          uint64_t v37 = (void *)((char *)v37 - v40);
          uint64_t v42 = &v36[8 * v32 - 16];
          uint64_t v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *uint64_t v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          uint64_t v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--uint64_t v37 = v46;
            }
            while (v29 != v30);
          }
          uint64_t v29 = v52;
        }
        else
        {
          unsigned int v36 = 0;
          uint64_t v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        int v52 = v37;
        int v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)unint64_t v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      unint64_t v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    uint64_t v17 = operator new(8 * v16);
    unint64_t v18 = &v17[8 * v13];
    *unint64_t v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v22 = &v9[-v21];
    unint64_t v18 = (void *)((char *)v18 - v21);
    uint64_t v23 = &v17[8 * v13 - 16];
    uint64_t v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    uint64_t v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--unint64_t v18 = v27;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    int v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    unint64_t v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchAttributeOp,mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  int v52 = 0;
  unint64_t v53 = 0;
  int v54 = 0;
  int v50 = 0;
  unsigned int v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    int v52 = operator new(8 * v4);
    unint64_t v53 = (char *)v52;
    int v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    int v50 = (char *)__p;
    unsigned int v51 = (char *)__p + 8 * v4;
    char v6 = *(uint64_t **)(a4 + 24);
    uint64_t v7 = &v6[2 * v4];
    while (1)
    {
      uint64_t v9 = v50;
      if (v50 < v51)
      {
        *(void *)int v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      uint64_t v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      unsigned int v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      int v50 = (char *)v10;
      uint64_t v28 = *v6;
      uint64_t v29 = v53;
      if (v53 >= v54)
      {
        unint64_t v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          unsigned int v36 = operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          *uint64_t v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          int v41 = &v29[-v40];
          uint64_t v37 = (void *)((char *)v37 - v40);
          uint64_t v42 = &v36[8 * v32 - 16];
          uint64_t v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *uint64_t v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          uint64_t v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--uint64_t v37 = v46;
            }
            while (v29 != v30);
          }
          uint64_t v29 = v52;
        }
        else
        {
          unsigned int v36 = 0;
          uint64_t v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        int v52 = v37;
        int v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)unint64_t v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      unint64_t v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    uint64_t v17 = operator new(8 * v16);
    unint64_t v18 = &v17[8 * v13];
    *unint64_t v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v22 = &v9[-v21];
    unint64_t v18 = (void *)((char *)v18 - v21);
    uint64_t v23 = &v17[8 * v13 - 16];
    uint64_t v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    uint64_t v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--unint64_t v18 = v27;
      }
      while (v9 != v11);
    }
    uint64_t v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    int v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    unint64_t v53 = (char *)v52;
    operator delete(v52);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    int64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        uint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v98 = *(a2 - 1);
              uint64_t v99 = *v12;
              if (*(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v98) + 8) <= *(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v99) + 8)) {
                return result;
              }
              *int64_t v12 = v98;
              goto LABEL_173;
            case 3:
              uint64_t v100 = *(void *)(**(void **)a3 + 72);
              uint64_t v99 = *v12;
              uint64_t v101 = v12[1];
              unsigned int v102 = *(_DWORD *)(*(void *)(v100 + 16 * v101) + 8);
              uint64_t v103 = *(void *)(v100 + 16 * v99);
              uint64_t v104 = *(a2 - 1);
              unsigned int v105 = *(_DWORD *)(*(void *)(v100 + 16 * v104) + 8);
              if (v102 <= *(_DWORD *)(v103 + 8))
              {
                if (v105 > v102)
                {
                  v12[1] = v104;
                  *(a2 - 1) = v101;
                  uint64_t v161 = *v12;
                  uint64_t v160 = v12[1];
                  if (*(_DWORD *)(*(void *)(v100 + 16 * v160) + 8) > *(_DWORD *)(*(void *)(v100 + 16 * v161) + 8))
                  {
                    *int64_t v12 = v160;
                    v12[1] = v161;
                  }
                }
              }
              else
              {
                if (v105 <= v102)
                {
                  *int64_t v12 = v101;
                  v12[1] = v99;
                  uint64_t v168 = *(a2 - 1);
                  if (*(_DWORD *)(*(void *)(v100 + 16 * v168) + 8) <= *(_DWORD *)(v103 + 8)) {
                    return result;
                  }
                  v12[1] = v168;
                }
                else
                {
                  *int64_t v12 = v104;
                }
LABEL_173:
                *(a2 - 1) = v99;
              }
              break;
            case 4:
              uint64_t v106 = *(void *)(**(void **)a3 + 72);
            case 5:
              unint64_t v107 = v12 + 2;
              uint64_t v108 = v12 + 3;
              uint64_t v109 = *(a2 - 1);
              uint64_t v110 = v11[3];
              uint64_t v111 = *(void *)(**(void **)a3 + 72);
              if (*(_DWORD *)(*(void *)(v111 + 16 * v109) + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v110) + 8))
              {
                *uint64_t v108 = v109;
                *(a2 - 1) = v110;
                uint64_t v112 = *v108;
                uint64_t v113 = *v107;
                uint64_t v114 = *(void *)(v111 + 16 * v112);
                if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v113) + 8))
                {
                  *unint64_t v107 = v112;
                  *uint64_t v108 = v113;
                  uint64_t v115 = v11[1];
                  if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v115) + 8))
                  {
                    v11[1] = v112;
                    v11[2] = v115;
                    uint64_t v116 = *v11;
                    if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v116) + 8))
                    {
                      unsigned int *v11 = v112;
                      v11[1] = v116;
                    }
                  }
                }
              }
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 95)
        {
          uint64_t v117 = *(void *)a3;
          if (a5)
          {
            if (v12 != a2)
            {
              unint64_t v118 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v119 = 0;
                uint64_t v120 = *(void *)(*(void *)v117 + 72);
                uint64_t v121 = v12;
                do
                {
                  uint64_t v124 = *v121;
                  uint64_t v123 = v121[1];
                  uint64_t v121 = v118;
                  uint64_t v125 = *(void *)(v120 + 16 * v123);
                  if (*(_DWORD *)(v125 + 8) > *(_DWORD *)(*(void *)(v120 + 16 * v124) + 8))
                  {
                    uint64_t v126 = v119;
                    do
                    {
                      *(unsigned int *)((char *)v12 + v126 + 4) = v124;
                      if (!v126)
                      {
                        uint64_t v122 = v12;
                        goto LABEL_120;
                      }
                      uint64_t v124 = *(unsigned int *)((char *)v12 + v126 - 4);
                      v126 -= 4;
                    }
                    while (*(_DWORD *)(v125 + 8) > *(_DWORD *)(*(void *)(v120 + 16 * v124) + 8));
                    uint64_t v122 = (unsigned int *)((char *)v12 + v126 + 4);
LABEL_120:
                    *uint64_t v122 = v123;
                  }
                  unint64_t v118 = v121 + 1;
                  v119 += 4;
                }
                while (v121 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            uint64_t v162 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v163 = *(void *)(*(void *)v117 + 72);
              do
              {
                uint64_t v165 = *v11;
                uint64_t v164 = v11[1];
                uint64_t v11 = v162;
                uint64_t v166 = *(void *)(v163 + 16 * v164);
                if (*(_DWORD *)(v166 + 8) > *(_DWORD *)(*(void *)(v163 + 16 * v165) + 8))
                {
                  uint64_t v167 = v11;
                  do
                  {
                    *uint64_t v167 = v165;
                    uint64_t v165 = *(v167 - 2);
                    --v167;
                  }
                  while (*(_DWORD *)(v166 + 8) > *(_DWORD *)(*(void *)(v163 + 16 * v165) + 8));
                  *uint64_t v167 = v164;
                }
                uint64_t v162 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v127 = (unint64_t)(v14 - 2) >> 1;
            uint64_t v128 = *(void *)a3;
            int64_t v129 = v127;
            do
            {
              int64_t v130 = v129;
              if (v127 >= v129)
              {
                uint64_t v131 = (2 * v129) | 1;
                uint64_t v132 = &v12[v131];
                uint64_t v133 = *v132;
                if (2 * v130 + 2 < v14)
                {
                  uint64_t v134 = *(void *)(*(void *)v128 + 72);
                  if (*(unsigned int *)(*(void *)(v134 + 16 * v133) + 8) > (unint64_t)*(unsigned int *)(*(void *)(v134 + 16 * v132[1]) + 8))
                  {
                    uint64_t v133 = v132[1];
                    ++v132;
                    uint64_t v131 = 2 * v130 + 2;
                  }
                }
                else
                {
                  uint64_t v134 = *(void *)(*(void *)v128 + 72);
                }
                uint64_t v135 = &v12[v130];
                uint64_t v136 = *v135;
                uint64_t result = *(void *)(v134 + 16 * v136);
                if (*(_DWORD *)(*(void *)(v134 + 16 * v133) + 8) <= *(_DWORD *)(result + 8))
                {
                  do
                  {
                    uint64_t v137 = v132;
                    *uint64_t v135 = v133;
                    if (v127 < v131) {
                      break;
                    }
                    uint64_t v138 = (2 * v131) | 1;
                    uint64_t v132 = &v12[v138];
                    uint64_t v139 = 2 * v131 + 2;
                    uint64_t v133 = *v132;
                    if (v139 < v14
                      && *(unsigned int *)(*(void *)(v134 + 16 * v133) + 8) > (unint64_t)*(unsigned int *)(*(void *)(v134 + 16 * v132[1]) + 8))
                    {
                      uint64_t v133 = v132[1];
                      ++v132;
                      uint64_t v138 = v139;
                    }
                    uint64_t v135 = v137;
                    uint64_t v131 = v138;
                  }
                  while (*(_DWORD *)(*(void *)(v134 + 16 * v133) + 8) <= *(_DWORD *)(result + 8));
                  *uint64_t v137 = v136;
                  uint64_t v128 = *(void *)a3;
                }
              }
              int64_t v129 = v130 - 1;
            }
            while (v130);
            uint64_t v140 = (unint64_t)v13 >> 2;
            do
            {
              uint64_t v142 = 0;
              unsigned int v143 = *v12;
              uint64_t v144 = *(void *)a3;
              int64_t v145 = (unint64_t)(v140 - 2) >> 1;
              uint64_t v146 = v12;
              do
              {
                while (1)
                {
                  uint64_t v149 = &v146[v142];
                  unsigned int v150 = v149[1];
                  uint64_t v148 = v149 + 1;
                  uint64_t v147 = v150;
                  uint64_t v151 = (2 * v142) | 1;
                  uint64_t v142 = 2 * v142 + 2;
                  if (v142 < v140) {
                    break;
                  }
                  uint64_t v142 = v151;
                  *uint64_t v146 = v147;
                  uint64_t v146 = v148;
                  if (v151 > v145) {
                    goto LABEL_154;
                  }
                }
                uint64_t result = v148[1];
                if (*(_DWORD *)(*(void *)(*(void *)(*(void *)v144 + 72) + 16 * v147) + 8) <= *(_DWORD *)(*(void *)(*(void *)(*(void *)v144 + 72) + 16 * result) + 8))
                {
                  uint64_t v142 = v151;
                }
                else
                {
                  LODWORD(v147) = v148[1];
                  ++v148;
                }
                *uint64_t v146 = v147;
                uint64_t v146 = v148;
              }
              while (v142 <= v145);
LABEL_154:
              if (v148 == --a2)
              {
                *uint64_t v148 = v143;
              }
              else
              {
                *uint64_t v148 = *a2;
                *a2 = v143;
                uint64_t v152 = (char *)v148 - (char *)v12 + 4;
                if (v152 >= 5)
                {
                  unint64_t v153 = (((unint64_t)v152 >> 2) - 2) >> 1;
                  uint64_t v154 = &v12[v153];
                  uint64_t v155 = *v154;
                  uint64_t v156 = *v148;
                  uint64_t v157 = *(void *)(**(void **)a3 + 72);
                  uint64_t v158 = *(void *)(v157 + 16 * v156);
                  if (*(_DWORD *)(*(void *)(v157 + 16 * v155) + 8) > *(_DWORD *)(v158 + 8))
                  {
                    do
                    {
                      uint64_t v159 = v154;
                      *uint64_t v148 = v155;
                      if (!v153) {
                        break;
                      }
                      unint64_t v153 = (v153 - 1) >> 1;
                      uint64_t v154 = &v12[v153];
                      uint64_t v155 = *v154;
                      uint64_t result = *(unsigned int *)(v158 + 8);
                      uint64_t v148 = v159;
                    }
                    while (*(_DWORD *)(*(void *)(v157 + 16 * v155) + 8) > result);
                    *uint64_t v159 = v156;
                  }
                }
              }
            }
            while (v140-- > 2);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        unint64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = *(void *)(**(void **)a3 + 72);
        uint64_t v18 = *(a2 - 1);
        unsigned int v19 = *(_DWORD *)(*(void *)(v17 + 16 * v18) + 8);
        if ((unint64_t)v13 >= 0x201) {
          break;
        }
        uint64_t v24 = *v12;
        uint64_t v25 = *v16;
        unsigned int v26 = *(_DWORD *)(*(void *)(v17 + 16 * v24) + 8);
        uint64_t v27 = *(void *)(v17 + 16 * v25);
        if (v26 > *(_DWORD *)(v27 + 8))
        {
          if (v19 <= v26)
          {
            *unint64_t v16 = v24;
            *int64_t v12 = v25;
            uint64_t v45 = *(a2 - 1);
            if (*(_DWORD *)(*(void *)(v17 + 16 * v45) + 8) <= *(_DWORD *)(v27 + 8)) {
              goto LABEL_33;
            }
            *int64_t v12 = v45;
          }
          else
          {
            *unint64_t v16 = v18;
          }
          *(a2 - 1) = v25;
LABEL_33:
          --a4;
          uint64_t v32 = *v12;
          if (a5) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v19 <= v26) {
          goto LABEL_33;
        }
        *int64_t v12 = v18;
        *(a2 - 1) = v24;
        uint64_t v30 = *v12;
        uint64_t v31 = *v16;
        if (*(_DWORD *)(*(void *)(v17 + 16 * v30) + 8) <= *(_DWORD *)(*(void *)(v17 + 16 * v31) + 8)) {
          goto LABEL_33;
        }
        *unint64_t v16 = v30;
        *int64_t v12 = v31;
        --a4;
        uint64_t v32 = v31;
        if (a5) {
          goto LABEL_57;
        }
LABEL_56:
        uint64_t v67 = *(void *)(v17 + 16 * v32);
        unsigned int v68 = *(_DWORD *)(v67 + 8);
        if (*(_DWORD *)(*(void *)(v17 + 16 * *(v12 - 1)) + 8) > v68) {
          goto LABEL_57;
        }
        if (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * *(a2 - 1)) + 8))
        {
          unint64_t v89 = v12 + 1;
          do
          {
            int64_t v12 = v89;
            if (v89 >= a2) {
              break;
            }
            ++v89;
          }
          while (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * *v12) + 8));
        }
        else
        {
          do
          {
            unsigned int v88 = v12[1];
            ++v12;
          }
          while (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * v88) + 8));
        }
        uint64_t v90 = a2;
        if (v12 < a2)
        {
          uint64_t v90 = a2;
          do
            unsigned int v91 = *--v90;
          while (v68 > *(_DWORD *)(*(void *)(v17 + 16 * v91) + 8));
        }
        if (v12 < v90)
        {
          unsigned int v92 = *v12;
          unsigned int v93 = *v90;
          do
          {
            *int64_t v12 = v93;
            *uint64_t v90 = v92;
            unsigned int v94 = *(_DWORD *)(v67 + 8);
            do
            {
              unsigned int v95 = v12[1];
              ++v12;
              unsigned int v92 = v95;
            }
            while (v94 <= *(_DWORD *)(*(void *)(v17 + 16 * v95) + 8));
            do
            {
              unsigned int v96 = *--v90;
              unsigned int v93 = v96;
            }
            while (v94 > *(_DWORD *)(*(void *)(v17 + 16 * v96) + 8));
          }
          while (v12 < v90);
        }
        uint64_t v97 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          unsigned int *v11 = *v97;
        }
        a5 = 0;
        *uint64_t v97 = v32;
      }
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      unsigned int v22 = *(_DWORD *)(*(void *)(v17 + 16 * v20) + 8);
      uint64_t v23 = *(void *)(v17 + 16 * v21);
      if (v22 <= *(_DWORD *)(v23 + 8))
      {
        if (v19 > v22)
        {
          *unint64_t v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v16;
          uint64_t v29 = *v12;
          if (*(_DWORD *)(*(void *)(v17 + 16 * v28) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v29) + 8))
          {
            *int64_t v12 = v28;
            *unint64_t v16 = v29;
          }
        }
      }
      else
      {
        if (v19 <= v22)
        {
          *int64_t v12 = v20;
          *unint64_t v16 = v21;
          uint64_t v33 = *(a2 - 1);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v33) + 8) <= *(_DWORD *)(v23 + 8)) {
            goto LABEL_24;
          }
          *unint64_t v16 = v33;
        }
        else
        {
          *int64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      uint64_t v34 = &v12[v15];
      unsigned int v37 = *(v34 - 1);
      unint64_t v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v12[1];
      unsigned int v39 = *(_DWORD *)(*(void *)(v17 + 16 * v37) + 8);
      uint64_t v40 = *(void *)(v17 + 16 * v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(_DWORD *)(*(void *)(v17 + 16 * v41) + 8);
      if (v39 <= *(_DWORD *)(v40 + 8))
      {
        if (v42 > v39)
        {
          *unint64_t v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v12[1];
          if (*(_DWORD *)(*(void *)(v17 + 16 * v43) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v44) + 8))
          {
            v12[1] = v43;
            *unint64_t v35 = v44;
          }
        }
      }
      else
      {
        if (v42 <= v39)
        {
          v12[1] = v36;
          *unint64_t v35 = v38;
          uint64_t v46 = *(a2 - 2);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v46) + 8) <= *(_DWORD *)(v40 + 8)) {
            goto LABEL_38;
          }
          *unint64_t v35 = v46;
        }
        else
        {
          v12[1] = v41;
        }
        *(a2 - 2) = v38;
      }
LABEL_38:
      long long v47 = &v12[v15];
      unsigned int v50 = v47[1];
      int v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v12[2];
      unsigned int v52 = *(_DWORD *)(*(void *)(v17 + 16 * v50) + 8);
      uint64_t v53 = *(void *)(v17 + 16 * v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(_DWORD *)(*(void *)(v17 + 16 * v54) + 8);
      if (v52 <= *(_DWORD *)(v53 + 8))
      {
        if (v55 > v52)
        {
          *int v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v12[2];
          if (*(_DWORD *)(*(void *)(v17 + 16 * v56) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v57) + 8))
          {
            uint64_t v12[2] = v56;
            *int v48 = v57;
          }
        }
      }
      else
      {
        if (v55 <= v52)
        {
          uint64_t v12[2] = v49;
          *int v48 = v51;
          uint64_t v58 = *(a2 - 3);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v58) + 8) <= *(_DWORD *)(v53 + 8)) {
            goto LABEL_47;
          }
          *int v48 = v58;
        }
        else
        {
          uint64_t v12[2] = v54;
        }
        *(a2 - 3) = v51;
      }
LABEL_47:
      uint64_t v59 = *v16;
      uint64_t v60 = *v35;
      unsigned int v61 = *(_DWORD *)(*(void *)(v17 + 16 * v59) + 8);
      uint64_t v62 = *(void *)(v17 + 16 * v60);
      uint64_t v63 = *v48;
      uint64_t v64 = *(void *)(v17 + 16 * v63);
      uint64_t result = *(unsigned int *)(v64 + 8);
      if (v61 <= *(_DWORD *)(v62 + 8))
      {
        if (result <= v61) {
          goto LABEL_55;
        }
        *unint64_t v16 = v63;
        *int v48 = v59;
        int v48 = v16;
        LODWORD(v59) = v60;
        if (*(_DWORD *)(v64 + 8) > *(_DWORD *)(v62 + 8))
        {
LABEL_54:
          *unint64_t v35 = v63;
          *int v48 = v60;
LABEL_55:
          unsigned int v66 = *v12;
          *int64_t v12 = v59;
          *unint64_t v16 = v66;
          --a4;
          uint64_t v32 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v87 = *v12;
        *int64_t v12 = v63;
        *unint64_t v16 = v87;
        --a4;
        uint64_t v32 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (result > v61) {
        goto LABEL_54;
      }
      *unint64_t v35 = v59;
      *unint64_t v16 = v60;
      unint64_t v35 = v16;
      LODWORD(v59) = v63;
      if (*(_DWORD *)(v64 + 8) > *(_DWORD *)(v62 + 8)) {
        goto LABEL_54;
      }
      unsigned int v65 = *v12;
      *int64_t v12 = v60;
      *unint64_t v16 = v65;
      --a4;
      uint64_t v32 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v69 = 0;
      uint64_t v70 = *(void *)(**(void **)a3 + 72);
      uint64_t v71 = *(void *)(v70 + 16 * v32);
      unsigned int v72 = *(_DWORD *)(v71 + 8);
      do
        uint64_t v73 = v12[++v69];
      while (*(_DWORD *)(*(void *)(v70 + 16 * v73) + 8) > v72);
      uint64_t v74 = &v12[v69];
      int v75 = a2;
      if (v69 == 1)
      {
        int v75 = a2;
        do
        {
          if (v74 >= v75) {
            break;
          }
          unsigned int v77 = *--v75;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v77) + 8) <= v72);
      }
      else
      {
        do
          unsigned int v76 = *--v75;
        while (*(_DWORD *)(*(void *)(v70 + 16 * v76) + 8) <= v72);
      }
      if (v74 >= v75)
      {
        int v85 = v74 - 1;
        if (v74 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *int64_t v12 = *v85;
        goto LABEL_75;
      }
      unsigned int v78 = *v75;
      unsigned int v79 = v73;
      unint64_t v80 = v74;
      uint64_t v81 = v75;
      do
      {
        *unint64_t v80 = v78;
        *uint64_t v81 = v79;
        unsigned int v82 = *(_DWORD *)(v71 + 8);
        do
        {
          unsigned int v83 = v80[1];
          ++v80;
          unsigned int v79 = v83;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v83) + 8) > v82);
        do
        {
          unsigned int v84 = *--v81;
          unsigned int v78 = v84;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v84) + 8) <= v82);
      }
      while (v80 < v81);
      int v85 = v80 - 1;
      if (v80 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      unsigned int *v85 = v32;
      if (v74 < v75) {
        goto LABEL_78;
      }
      int64_t v12 = v85 + 1;
      if (result) {
        break;
      }
      if (!v86)
      {
LABEL_78:
        a5 = 0;
        int64_t v12 = v85 + 1;
      }
    }
    a2 = v85;
    if (!v86) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v8) + 8) > *(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = *(void *)(**(void **)a3 + 72);
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      unsigned int v13 = *(_DWORD *)(*(void *)(v10 + 16 * v12) + 8);
      uint64_t v14 = *(void *)(v10 + 16 * v11);
      uint64_t v15 = *(a2 - 1);
      unsigned int v16 = *(_DWORD *)(*(void *)(v10 + 16 * v15) + 8);
      if (v13 <= *(_DWORD *)(v14 + 8))
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(_DWORD *)(*(void *)(v10 + 16 * v40) + 8) > *(_DWORD *)(*(void *)(v10 + 16 * v41) + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v50 = *(a2 - 1);
        if (*(_DWORD *)(*(void *)(v10 + 16 * v50) + 8) > *(_DWORD *)(v14 + 8))
        {
          a1[1] = v50;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      return 1;
    case 5:
      uint64_t v30 = a1 + 2;
      uint64_t v31 = a1 + 3;
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = a1[3];
      uint64_t v34 = *(void *)(**(void **)a3 + 72);
      if (*(_DWORD *)(*(void *)(v34 + 16 * v32) + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v33) + 8)) {
        return 1;
      }
      _DWORD *v31 = v32;
      *(a2 - 1) = v33;
      uint64_t v35 = *v31;
      uint64_t v36 = *v30;
      uint64_t v37 = *(void *)(v34 + 16 * v35);
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v36) + 8)) {
        return 1;
      }
      _DWORD *v30 = v35;
      _DWORD *v31 = v36;
      uint64_t v38 = a1[1];
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v38) + 8)) {
        return 1;
      }
      a1[1] = v35;
      a1[2] = v38;
      uint64_t v39 = *a1;
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v39) + 8)) {
        return 1;
      }
      *a1 = v35;
      a1[1] = v39;
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v19 = a1[1];
      uint64_t v20 = *(void *)(**(void **)a3 + 72);
      uint64_t v21 = *a1;
      unsigned int v22 = *(_DWORD *)(*(void *)(v20 + 16 * v19) + 8);
      uint64_t v23 = *(void *)(v20 + 16 * v21);
      uint64_t v24 = *(void *)(v20 + 16 * v17);
      unsigned int v25 = *(_DWORD *)(v24 + 8);
      if (v22 <= *(_DWORD *)(v23 + 8))
      {
        if (v25 <= v22) {
          goto LABEL_25;
        }
        a1[1] = v17;
        *uint64_t v18 = v19;
        unsigned int v28 = *(_DWORD *)(v24 + 8);
        unsigned int v29 = *(_DWORD *)(v23 + 8);
        unsigned int v26 = a1;
        uint64_t v27 = a1 + 1;
      }
      else
      {
        unsigned int v26 = a1;
        uint64_t v27 = a1 + 2;
        if (v25 > v22) {
          goto LABEL_24;
        }
        *a1 = v19;
        a1[1] = v21;
        unsigned int v28 = *(_DWORD *)(v24 + 8);
        unsigned int v29 = *(_DWORD *)(v23 + 8);
        unsigned int v26 = a1 + 1;
        uint64_t v27 = a1 + 2;
      }
      if (v28 <= v29) {
        goto LABEL_25;
      }
LABEL_24:
      *unsigned int v26 = v17;
      *uint64_t v27 = v21;
LABEL_25:
      unsigned int v42 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v43 = 0;
      uint64_t v44 = 12;
      break;
  }
  while (1)
  {
    uint64_t v45 = *v42;
    uint64_t v46 = *v18;
    uint64_t v47 = *(void *)(v20 + 16 * v45);
    if (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(void *)(v20 + 16 * v46) + 8)) {
      break;
    }
LABEL_34:
    uint64_t v18 = v42;
    v44 += 4;
    if (++v42 == a2) {
      return 1;
    }
  }
  uint64_t v48 = v44;
  do
  {
    *(unsigned int *)((char *)a1 + v48) = v46;
    uint64_t v49 = v48 - 4;
    if (v48 == 4)
    {
      *a1 = v45;
      if (++v43 != 8) {
        goto LABEL_34;
      }
      return v42 + 1 == a2;
    }
    uint64_t v46 = *(unsigned int *)((char *)a1 + v48 - 8);
    v48 -= 4;
  }
  while (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(void *)(v20 + 16 * v46) + 8));
  *(unsigned int *)((char *)a1 + v49) = v45;
  if (++v43 != 8) {
    goto LABEL_34;
  }
  return v42 + 1 == a2;
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unsigned int v7 = *(_DWORD *)(*(void *)(a5 + 16 * v5) + 8);
  uint64_t v8 = *(void *)(a5 + 16 * v6);
  int v9 = *a3;
  unsigned int v10 = *(_DWORD *)(*(void *)(a5 + 16 * *a3) + 8);
  if (v7 <= *(_DWORD *)(v8 + 8))
  {
    if (v10 <= v7)
    {
      uint64_t v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    uint64_t v11 = *a2;
    uint64_t v12 = *result;
    if (*(_DWORD *)(*(void *)(a5 + 16 * v11) + 8) <= *(_DWORD *)(*(void *)(a5 + 16 * v12) + 8))
    {
      uint64_t v6 = v5;
      int v9 = v5;
      goto LABEL_14;
    }
    void *result = v11;
    *a2 = v12;
    uint64_t v6 = *a3;
  }
  else
  {
    if (v10 <= v7)
    {
      void *result = v5;
      *a2 = v6;
      int v9 = *a3;
      if (*(_DWORD *)(*(void *)(a5 + 16 * *a3) + 8) <= *(_DWORD *)(v8 + 8))
      {
        uint64_t v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      void *result = v9;
    }
    *a3 = v6;
  }
  int v9 = v6;
LABEL_14:
  uint64_t v13 = *a4;
  if (*(_DWORD *)(*(void *)(a5 + 16 * v13) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v6) + 8))
  {
    *a3 = v13;
    *a4 = v9;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(_DWORD *)(*(void *)(a5 + 16 * v14) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *result;
      if (*(_DWORD *)(*(void *)(a5 + 16 * v16) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v17) + 8))
      {
        void *result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *>,0u>>::try_emplace<mlir::Block *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  unsigned int v10 = (void *)(*(void *)a1 + 16 * v9);
  uint64_t v11 = *v10;
  if (v6 == *v10) {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  uint64_t v20 = 0;
  int v21 = 1;
  while (v11 != -4096)
  {
    if (v20) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v11 == -8192;
    }
    if (v22) {
      uint64_t v20 = v10;
    }
    int v23 = v9 + v21++;
    uint64_t v9 = v23 & (v7 - 1);
    unsigned int v10 = (void *)(v8 + 16 * v9);
    uint64_t v11 = *v10;
    if (v6 == *v10) {
      return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
    }
  }
  uint64_t v24 = (uint64_t)(v20 ? v20 : v10);
  int v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v7);
  int v26 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v24 = *(void *)a1 + 16 * v27;
  uint64_t v28 = *(void *)v24;
  if (v6 == *(void *)v24)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v6 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v32 = 0;
  int v33 = 1;
  while (v28 != -4096)
  {
    if (v32) {
      BOOL v34 = 0;
    }
    else {
      BOOL v34 = v28 == -8192;
    }
    if (v34) {
      uint64_t v32 = v24;
    }
    unsigned int v35 = v27 + v33++;
    unsigned int v27 = v35 & v26;
    uint64_t v24 = *(void *)a1 + 16 * (v35 & v26);
    uint64_t v28 = *(void *)v24;
    if (v6 == *(void *)v24) {
      goto LABEL_26;
    }
  }
  if (v32) {
    uint64_t v24 = v32;
  }
LABEL_6:
  uint64_t v13 = *(void *)v24;
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(void *)uint64_t v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  uint64_t v14 = (uint64_t *)(a1 + 24);
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  unsigned int v16 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v15;
  if (v15 >= v16)
  {
    uint64_t v29 = *a2;
    uint64_t v30 = *a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, (void *)(a1 + 40), v15 + 1, 16);
    uint64_t v31 = (void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 32));
    void *v31 = v29;
    v31[1] = v30;
    LODWORD(v15) = *(_DWORD *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v17 = *v14;
    uint64_t v18 = (uint64_t *)(*v14 + 16 * v15);
    *uint64_t v18 = *a2;
    v18[1] = *a3;
  }
  unsigned int v19 = v15 + 1;
  *(_DWORD *)(a1 + 32) = v19;
  return v17 + 16 * v19 - 16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperandCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operand_count", (const unsigned __int8 *)0x1F, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operand_count";
    v25[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 2;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperandCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_result_count", (const unsigned __int8 *)0x1E, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_result_count";
    v25[3] = 30;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 2;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchResultCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operation_name", (const unsigned __int8 *)0x20, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operation_name";
    v25[3] = 32;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *(uint64_t **)a4;
  uint64_t v17 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperationNameOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_types", (const unsigned __int8 *)0x17, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_types";
    v25[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypesOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_type", (const unsigned __int8 *)0x16, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_type";
    v25[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_attribute", (const unsigned __int8 *)0x1B, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_attribute";
    v25[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchAttributeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

double mlir::Region::getOps<mlir::pdl::OperationOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  uint64_t v4 = v10;
  *(void *)uint64_t v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        uint64_t v4 = *(ZinIrHalH13g **)v12)
  {
    uint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  uint64_t v17 = i;
  *(void *)uint64_t v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::RecordMatchOp,std::vector<mlir::Value> &,llvm::ArrayRef<mlir::Value>,mlir::SymbolRefAttr &,mlir::StringAttr &,mlir::ArrayAttr &,mlir::IntegerAttr,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  v30[38] = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  uint64_t v18 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.record_match", (const unsigned __int8 *)0x17, Context);
  if (!v19)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.record_match";
    v26[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v18);
  mlir::ValueRange::ValueRange(v29, *a3, (a3[1] - *a3) >> 3);
  mlir::ValueRange::ValueRange(v28, *(void *)a4, *(void *)(a4 + 8));
  mlir::pdl_interp::RecordMatchOp::build((uint64_t)a1, (uint64_t)v30, v29[0], v29[1], v28[0], v28[1], *a5, *a6, *a7, *a8, *a9);
  uint64_t v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((void *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v21;
}

void mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,char const(&)[23],mlir::FunctionType>(mlir::StringAttr **a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.func", (const unsigned __int8 *)0xF, Context);
  if (v10)
  {
    mlir::OperationState::OperationState(v17, a2, v9);
    size_t v11 = strlen(a3);
    mlir::pdl_interp::FuncOp::build(a1, (uint64_t)v17, (uint64_t)a3, v11, *a4, 0, 0);
  }
  __int16 v16 = 1283;
  v15[2] = (uint64_t)"pdl_interp.func";
  v15[3] = 15;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v14 = 259;
  llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
  llvm::report_fatal_error((llvm::Twine *)v17, 1);
}

char *anonymous namespace'::PatternLowering::generateRewriter(mlir::pdl::PatternOp,llvm::SmallVectorImpl<mlir::pdl_to_pdl_interp::Position *> &)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v23 = 0;
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(*(uint64_t **)a1, &v22, &v23);
  long long v6 = v23;
  if ((v5 & 1) == 0)
  {
    long long v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v22, &v22, v23);
    void *v6 = v22;
    v6[1] = 0;
LABEL_5:
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v22);
    uint64_t v9 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id) {
      char v10 = (void *)DefiningOp;
    }
    else {
      char v10 = 0;
    }
    uint64_t v23 = v10;
    if (v10)
    {
      uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v23);
      if (FastmathAttr)
      {
        size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>((mlir::MLIRContext **)v3, v23[3], &FastmathAttr);
LABEL_23:
        double result = (char *)v11 - 16;
        v6[1] = result;
        return result;
      }
    }
    else
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id) {
        uint64_t v12 = DefiningOp;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t FastmathAttr = v12;
      if (v12)
      {
        uint64_t v20 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&FastmathAttr);
        if (v20)
        {
          size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>((mlir::MLIRContext **)v3, *(void *)(FastmathAttr + 24), &v20);
          goto LABEL_23;
        }
      }
      else
      {
        if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id) {
          uint64_t v13 = DefiningOp;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v20 = v13;
        if (v13)
        {
          uint64_t v19 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v20);
          if (v19)
          {
            uint64_t v14 = *(void *)(v20 + 24);
            unint64_t v18 = *(void *)(v20 - 8) & 0xFFFFFFFFFFFFFFF8;
            size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>((mlir::OpBuilder *)v3, v14, (uint64_t *)&v18, &v19);
            goto LABEL_23;
          }
        }
      }
    }
    uint64_t v23 = 0;
    uint64_t v15 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(v3 + 200), &v22, &v23))uint64_t v15 = v23[1]; {
    uint64_t v16 = *(void *)(a1 + 16);
    }
    uint64_t v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 16), (void *)(v16 + 16), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(v16 + 8);
    }
    *(void *)(*(void *)v16 + 8 * v17) = v15;
    ++*(_DWORD *)(v16 + 8);
    mlir::Value::getLoc((mlir::Value *)&v22);
    mlir::Block::addArgument();
  }
  double result = (char *)v23[1];
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::TypeRange,mlir::StringAttr &,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v25[38] = *MEMORY[0x263EF8340];
  uint64_t v19 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v23 = 1283;
    unint64_t v22[2] = (uint64_t)"pdl_interp.apply_rewrite";
    void v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a4;
  mlir::ValueRange::ValueRange(v24, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v14, v13, v15, v24[0], v24[1]);
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void mlir::detail::FunctionOpInterfaceTrait<mlir::pdl_interp::FuncOp>::setType(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v3 + 48);
  char v5 = *(void **)(v4 + 16);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(v3 + 48);
  }
  if (v6)
  {
    uint64_t v12 = *(void *)(v4 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v12);
    if (Values)
    {
      uint64_t v11 = v4;
      goto LABEL_10;
    }
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  unint64_t v8 = v7 | v4 & 0xFFFFFFFFFFFFFF00;
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::FunctionOpInterface>(v8 + 32);
  if (!v9)
  {
    uint64_t Values = *(void *)(v8 + 24);
    uint64_t v11 = *(void *)(v3 + 48);
LABEL_10:
    uint64_t v9 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::FunctionOpInterface>(Values, v11);
  }
LABEL_12:
  mlir::function_interface_impl::setFunctionType(v3, v9, a2);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_types", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.create_types";
    v17[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateTypesOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::StringAttr,llvm::SmallVector<mlir::Value,2u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.apply_rewrite";
    v26[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v26, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  uint64_t NextResultAtOffset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v26, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v24, v26[0], v26[1]);
  uint64_t v16 = *a4;
  mlir::ValueRange::ValueRange(v23, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v24[0], v24[1], v16, v23[0], v23[1]);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id) {
    __int16 v18 = v17;
  }
  else {
    __int16 v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::EraseOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.erase", (const unsigned __int8 *)0x10, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.erase";
    v15[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateOperationOp,llvm::StringRef,llvm::SmallVector<mlir::Value,2u> &,BOOL &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::Value,4u> &,mlir::ArrayAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  v34[38] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_operation", (const unsigned __int8 *)0x1B, Context);
  if (!v18)
  {
    __int16 v30 = 1283;
    unint64_t v29[2] = (uint64_t)"pdl_interp.create_operation";
    v29[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v17);
  uint64_t v20 = *a3;
  uint64_t v19 = a3[1];
  mlir::ValueRange::ValueRange(v33, *(void *)a4, *(unsigned int *)(a4 + 8));
  char v21 = *a5;
  mlir::ValueRange::ValueRange(v32, *(void *)a6, *(unsigned int *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(void *)a7, *(unsigned int *)(a7 + 8));
  mlir::pdl_interp::CreateOperationOp::build(a1, (uint64_t)v34, v20, v19, v33[0], v33[1], v21, v22, v32[0], v32[1], v31[0], v31[1], *a8);
  __int16 v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id) {
    __int16 v24 = v23;
  }
  else {
    __int16 v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_results";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::GetResultsOp &>(mlir::MLIRContext **a1, uint64_t a2, void *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_value_type", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_value_type";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetValueTypeOp::build(a1, (uint64_t)v17, *a3 - 16);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type &,mlir::Value &,unsigned long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"pdl_interp.get_results";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5 | 0x100000000);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateRangeOp,mlir::pdl::RangeType,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_range", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.create_range";
    v18[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  char v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ReplaceOp,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.replace", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.replace";
    v18[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::ReplaceOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  char v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id;
}

int32x2_t **llvm::ScopedHashTableScope<mlir::pdl_to_pdl_interp::Position *,mlir::Value,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Position *,void>,llvm::MallocAllocator>::~ScopedHashTableScope(int32x2_t **result)
{
  unint64_t v1 = result;
  (*result)[3] = (int32x2_t)result[1];
  uint64_t v2 = (uint64_t *)result[2];
  if (v2)
  {
    uint64_t v7 = v2[1];
    char v8 = *result;
    if (!v7)
    {
      __int32 v12 = v8[2].i32[0];
      if (v12)
      {
        int32x2_t v13 = *v8;
        uint64_t v14 = v2[2];
        __int32 v15 = v12 - 1;
        LODWORD(v16) = ((v14 >> 4) ^ (v14 >> 9)) & (v12 - 1);
        __int16 v17 = (uint64_t *)(*(void *)v8 + 16 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          int v23 = 1;
          do
          {
            if (v18 == -4096) {
              goto LABEL_5;
            }
            int v24 = v16 + v23++;
            uint64_t v16 = v24 & v15;
            uint64_t v18 = *(void *)(*(void *)&v13 + 16 * v16);
          }
          while (v14 != v18);
          __int16 v17 = (uint64_t *)(*(void *)&v13 + 16 * v16);
        }
        *__int16 v17 = -8192;
        v8[1] = vadd_s32(v8[1], (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_5:
      v1[2] = (int32x2_t *)*v2;
      llvm::deallocate_buffer((llvm *)v2, (void *)0x20);
    }
    uint64_t v9 = v2 + 2;
    __int32 v10 = v8[2].i32[0];
    if (v10)
    {
      __int32 v3 = v10 - 1;
      unsigned int v4 = ((*v9 >> 4) ^ (*v9 >> 9)) & (v10 - 1);
      inserted = (uint64_t *)(*(void *)v8 + 16 * v4);
      uint64_t v6 = *inserted;
      if (*v9 == *inserted)
      {
LABEL_4:
        inserted[1] = v7;
        goto LABEL_5;
      }
      __int16 v19 = 0;
      int v20 = 1;
      while (v6 != -4096)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v6 == -8192;
        }
        if (v21) {
          __int16 v19 = inserted;
        }
        unsigned int v22 = v4 + v20++;
        unsigned int v4 = v22 & v3;
        inserted = (uint64_t *)(*(void *)v8 + 16 * (v22 & v3));
        uint64_t v6 = *inserted;
        if (*v9 == *inserted) {
          goto LABEL_4;
        }
      }
      if (v19) {
        uint64_t v11 = v19;
      }
      else {
        uint64_t v11 = inserted;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v8, v11, v9);
    uint64_t v7 = v2[1];
    goto LABEL_4;
  }
  return result;
}

double mlir::Region::getOps<mlir::pdl::PatternOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  unsigned int v4 = v10;
  *(void *)__int32 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        unsigned int v4 = *(ZinIrHalH13g **)v12)
  {
    char v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  __int16 v17 = i;
  *(void *)char v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id;
}

uint64_t mlir::pdl_to_pdl_interp::Position::getOperationDepth(uint64_t this)
{
  while (!this || *(_DWORD *)(this + 16))
  {
    this = *(void *)(this + 8);
    if (!this) {
      return this;
    }
  }
  return *(unsigned int *)(this + 32);
}

__n128 mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 3;
  *(void *)a1 = &unk_26C3622B8;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_26C3623B8;
  *(void *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_26C362298;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_26C362398;
  *(void *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 2;
  *(void *)a1 = &unk_26C362318;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(void *)(a1 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_26C362438;
  *(void *)(a1 + 8) = v3;
  return result;
}

BOOL mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(mlir::pdl_to_pdl_interp::OperationPosition *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && (*(_DWORD *)(v1 + 16) - 1) < 2;
}

void mlir::pdl_to_pdl_interp::AttributePosition::~AttributePosition(mlir::pdl_to_pdl_interp::AttributePosition *this)
{
}

void mlir::pdl_to_pdl_interp::OperandPosition::~OperandPosition(mlir::pdl_to_pdl_interp::OperandPosition *this)
{
}

void mlir::pdl_to_pdl_interp::OperandGroupPosition::~OperandGroupPosition(mlir::pdl_to_pdl_interp::OperandGroupPosition *this)
{
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::~PredicateBase()
{
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::~PredicateBase()
{
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::~PredicateBase()
{
}

void mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(uint64_t a1@<X0>, void *a2@<X8>)
{
  v30[80] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(a1 + 44);
  __int16 v28 = v30;
  uint64_t v29 = 0x1000000000;
  mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((a1 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v4), (uint64_t)&v21);
  int v20 = v26;
  if (v22 != v27)
  {
    ZinIrHalH13g::~ZinIrHalH13g(v22);
    char v5 = (llvm *)v20();
    buildPredicateList(v5);
  }
  if (v29)
  {
    long long v6 = v28;
    while (1)
    {
      uint64_t v7 = (long long *)v6[2];
      if (v7 != (long long *)v6[3]) {
        break;
      }
      v6 += 5;
      if (v6 == (void *)((char *)v28 + 40 * v29))
      {
        int64_t v9 = 40 * v29;
        __int32 v10 = (char *)operator new(v9);
        uint64_t v19 = (llvm **)v10;
        long long v18 = v10;
        uint64_t v16 = *(void *)v28;
        uint64_t v17 = *((void *)v28 + 1);
        if (*((void *)v28 + 2) != *((void *)v28 + 3)) {
          llvm::deallocate_buffer(0, 0);
        }
        if (v10 < &v10[v9])
        {
          *(void *)__int32 v10 = v16;
          *((void *)v10 + 1) = v17;
          *((void *)v10 + 2) = 0;
          *((_DWORD *)v10 + 6) = 0;
          *(void *)(v10 + 28) = 0;
        }
        else
        {
          unint64_t v11 = 1;
          if (0x999999999999999ALL * (v9 >> 3) > 1) {
            unint64_t v11 = 0x999999999999999ALL * (v9 >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * (v9 >> 3) >= 0x333333333333333) {
            unint64_t v11 = 0x666666666666666;
          }
          if (v11 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __int32 v12 = operator new(40 * v11);
          *__int32 v12 = v16;
          v12[1] = v17;
          uint64_t v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 6) = 0;
          *((_DWORD *)v12 + 7) = 0;
          *((_DWORD *)v12 + 8) = 0;
          int32x2_t v13 = (char *)v19;
          long long v14 = v12;
          if (v19 != (llvm **)v18)
          {
            do
            {
              *(_OWORD *)(v14 - 5) = *(_OWORD *)(v13 - 40);
              *(v14 - 3) = *((void *)v13 - 3);
              *((_DWORD *)v14 - 4) = *((_DWORD *)v13 - 4);
              *((_DWORD *)v13 - 4) = 0;
              *((_DWORD *)v14 - 3) = *((_DWORD *)v13 - 3);
              *((_DWORD *)v13 - 3) = 0;
              *((_DWORD *)v14 - 2) = *((_DWORD *)v13 - 2);
              v14 -= 5;
              *((void *)v13 - 3) = 0;
              *((_DWORD *)v13 - 2) = 0;
              v13 -= 40;
            }
            while (v13 != v18);
            llvm::deallocate_buffer(*(v19 - 3), (void *)(8 * *((unsigned int *)v19 - 2)));
          }
          if (v18) {
            operator delete(v18);
          }
        }
        llvm::deallocate_buffer(0, 0);
      }
    }
    long long v21 = *v7;
    unsigned int v22 = 0;
    int v23 = 0;
    v24[0] = 0;
    v24[1] = 0;
    int v25 = 0;
    buffer = llvm::allocate_buffer(0xE00uLL, (std::align_val_t)8uLL);
    void *buffer = -4096;
    buffer[1] = -4096;
    buffer[2] = 0;
    *((_DWORD *)buffer + 6) = 0;
    buffer[4] = 0;
    buffer[5] = 0;
    *((_DWORD *)buffer + 12) = 0;
    llvm::deallocate_buffer(0, 0);
  }
  *a2 = 0;
  foldSwitchToBool(a2);
  do
  {
    uint64_t v15 = *a2;
    a2 = (void *)(*a2 + 24);
  }
  while (v15);
  operator new();
}

void buildPredicateList(llvm *a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  v52[3] = a1;
  v52[0] = a1;
  v62[1] = 0;
  v62[0] = 0;
  LODWORD(v63) = 0;
  Body = (mlir::Region *)mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v52);
  mlir::Region::getOps<mlir::pdl::OperationOp>(Body, (uint64_t)&v65);
  *(_OWORD *)uint64_t v58 = v65;
  *(_OWORD *)uint64_t v59 = v66;
  long long v60 = v67;
  long long v61 = v68;
  uint64_t v2 = (ZinIrHalH13g *)v66;
  uint64_t v50 = (ZinIrHalH13g *)v69;
  if ((void)v66 == (void)v69)
  {
LABEL_69:
    mlir::pdl::PatternOp::getRewriter((mlir::pdl::PatternOp *)v52);
    *(void *)&long long v65 = v43;
    v58[0] = (void *)mlir::pdl::RewriteOp::getRoot((mlir::pdl::RewriteOp *)&v65);
    if (v58[0])
    {
      *(void *)&long long v65 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)v58, &v65))
      {
        *(void *)long long v65 = -8192;
        v62[1] = (llvm *)vadd_s32((int32x2_t)v62[1], (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    unsigned int v55 = v57;
    uint64_t v56 = 0x600000000;
    uint64_t v44 = (mlir::Region *)mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v52);
    mlir::Region::getOps<mlir::pdl::OperationOp>(v44, (uint64_t)&v65);
    *(_OWORD *)uint64_t v58 = v65;
    *(_OWORD *)uint64_t v59 = v66;
    long long v60 = v67;
    long long v61 = v68;
    uint64_t v45 = (ZinIrHalH13g *)v69;
LABEL_73:
    uint64_t v46 = v59[0];
    while (1)
    {
      if (v46 == v45) {
        llvm::deallocate_buffer(v62[0], (void *)(8 * v63));
      }
      ZinIrHalH13g::~ZinIrHalH13g(v46);
      *(void *)&long long v53 = (*((uint64_t (**)(void))&v61 + 1))() - 16;
      uint64_t v64 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v64)|| v64 == (char *)v62[0] + 8 * v63)
      {
        uint64_t v47 = v53;
        uint64_t v48 = v56;
        if (v56 >= (unint64_t)HIDWORD(v56))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
          uint64_t v48 = v56;
        }
        *((void *)v55 + v48) = v47;
        LODWORD(v56) = v56 + 1;
      }
      while (1)
      {
        mlir::Region::OpIterator::operator++((uint64_t *)v58);
        uint64_t v46 = v59[0];
        if (v59[0] == *((ZinIrHalH13g **)&v60 + 1)) {
          break;
        }
        uint64_t v49 = (unsigned int (*)(void))v61;
        ZinIrHalH13g::~ZinIrHalH13g(v59[0]);
        if (v49()) {
          goto LABEL_73;
        }
      }
    }
  }
LABEL_4:
  ZinIrHalH13g::~ZinIrHalH13g(v2);
  uint64_t v51 = (llvm *)(*((uint64_t (**)(void))&v61 + 1))();
  Operanduint64_t Values = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&v51);
  if (!v4) {
    goto LABEL_66;
  }
  uint64_t v5 = OperandValues;
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v54 = *(void *)(v5 + 32 * v7 + 24);
    uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
    int64_t v9 = *(int **)(DefiningOp[6] + 16);
    if (DefiningOp)
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id) {
        break;
      }
    }
    if (v9 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      uint64_t v64 = DefiningOp;
      uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v64);
      *(void *)&long long v53 = Input;
      int v24 = (int)v63;
      if (!v63)
      {
        int v37 = 0;
        goto LABEL_55;
      }
      unint64_t v25 = Input;
      uint64_t v26 = v62[0];
      {
        unint64_t v41 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v41 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v41;
      }
      unint64_t v27 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v25) ^ HIDWORD(v25));
      unint64_t v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v25) ^ (v27 >> 47) ^ v27);
      unsigned int v29 = (-348639895 * ((v28 >> 47) ^ v28)) & (v24 - 1);
      __int16 v30 = (void *)((char *)v26 + 8 * v29);
      uint64_t v31 = *v30;
      if ((void)v53 == *v30) {
        goto LABEL_7;
      }
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != -4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -8192;
        }
        if (v34) {
          uint64_t v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & (v24 - 1);
        __int16 v30 = (void *)((char *)v26 + 8 * v29);
        uint64_t v31 = *v30;
        if ((void)v53 == *v30) {
          goto LABEL_7;
        }
      }
      if (v32) {
        uint64_t v39 = v32;
      }
      else {
        uint64_t v39 = v30;
      }
      int v37 = (int)v63;
      if (4 * LODWORD(v62[1]) + 4 < (3 * v63))
      {
        if ((int)v63 + ~LODWORD(v62[1]) - HIDWORD(v62[1]) <= v63 >> 3) {
          goto LABEL_56;
        }
        ++LODWORD(v62[1]);
        if (*v39 == -4096)
        {
LABEL_43:
          *uint64_t v39 = v53;
          goto LABEL_7;
        }
      }
      else
      {
LABEL_55:
        v37 *= 2;
LABEL_56:
        llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v62, v37);
        unsigned int v55 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v55);
        uint64_t v39 = v55;
        ++LODWORD(v62[1]);
        if (*(void *)v55 == -4096) {
          goto LABEL_43;
        }
      }
      --HIDWORD(v62[1]);
      goto LABEL_43;
    }
LABEL_7:
    if (++v7 == v6)
    {
      do
      {
LABEL_66:
        mlir::Region::OpIterator::operator++((uint64_t *)v58);
        uint64_t v2 = v59[0];
        if (v59[0] == *((ZinIrHalH13g **)&v60 + 1)) {
          goto LABEL_3;
        }
        unsigned int v42 = (unsigned int (*)(void))v61;
        ZinIrHalH13g::~ZinIrHalH13g(v59[0]);
      }
      while (!v42());
      uint64_t v2 = v59[0];
LABEL_3:
      if (v2 == v50) {
        goto LABEL_69;
      }
      goto LABEL_4;
    }
  }
  uint64_t v64 = DefiningOp;
  uint64_t v10 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v64);
  *(void *)&long long v53 = v10;
  int v11 = (int)v63;
  if (v63)
  {
    unint64_t v12 = v10;
    int32x2_t v13 = v62[0];
    {
      unint64_t v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v40 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v40;
    }
    unint64_t v14 = 0x9DDFEA08EB382D69
        * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v12) ^ HIDWORD(v12));
    unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v14 >> 47) ^ v14);
    unsigned int v16 = (-348639895 * ((v15 >> 47) ^ v15)) & (v11 - 1);
    uint64_t v17 = (void *)((char *)v13 + 8 * v16);
    uint64_t v18 = *v17;
    if ((void)v53 == *v17) {
      goto LABEL_7;
    }
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -8192;
      }
      if (v21) {
        uint64_t v19 = v17;
      }
      unsigned int v22 = v16 + v20++;
      unsigned int v16 = v22 & (v11 - 1);
      uint64_t v17 = (void *)((char *)v13 + 8 * v16);
      uint64_t v18 = *v17;
      if ((void)v53 == *v17) {
        goto LABEL_7;
      }
    }
    if (v19) {
      uint64_t v38 = v19;
    }
    else {
      uint64_t v38 = v17;
    }
    int v36 = (int)v63;
    if (4 * LODWORD(v62[1]) + 4 < (3 * v63))
    {
      if ((int)v63 + ~LODWORD(v62[1]) - HIDWORD(v62[1]) > v63 >> 3)
      {
        ++LODWORD(v62[1]);
        if (*v38 == -4096)
        {
LABEL_6:
          *uint64_t v38 = v53;
          goto LABEL_7;
        }
LABEL_38:
        --HIDWORD(v62[1]);
        goto LABEL_6;
      }
LABEL_49:
      llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v62, v36);
      unsigned int v55 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v55);
      uint64_t v38 = v55;
      ++LODWORD(v62[1]);
      if (*(void *)v55 == -4096) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else
  {
    int v36 = 0;
  }
  v36 *= 2;
  goto LABEL_49;
}

uint64_t propagatePattern(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 == a4 || (uint64_t v6 = *(unsigned int *)(a2 + 32), !v6)) {
LABEL_16:
  }
    operator new();
  char v8 = a3;
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = v6 - 1;
  int v11 = (uint64_t *)(v9 + 8 * v6);
  while (1)
  {
    while (1)
    {
      uint64_t v12 = *v8;
      LODWORD(v13) = ((*v8 >> 4) ^ (*v8 >> 9)) & v10;
      unint64_t v14 = (uint64_t *)(v9 + 8 * v13);
      uint64_t v15 = *v14;
      if (*v14 != *v8) {
        break;
      }
      if (v14 != v11) {
        goto LABEL_12;
      }
LABEL_6:
      if (++v8 == a4) {
        goto LABEL_16;
      }
    }
    int v16 = 1;
    do
    {
      if (v15 == -4096) {
        goto LABEL_6;
      }
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & v10;
      uint64_t v15 = *(void *)(v9 + 8 * v13);
    }
    while (v15 != v12);
    if ((uint64_t *)(v9 + 8 * v13) == v11) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v18 = (void *)*a1;
    if (!*a1) {
      operator new();
    }
    if (v18[1] == *(void *)v12 && v18[2] == *(void *)(v12 + 8)) {
      break;
    }
    a1 = v18 + 3;
    if (v8 == a4) {
      goto LABEL_16;
    }
  }
  uint64_t v19 = *(void *)(v12 + 32);
  uint64_t v20 = *(unsigned int *)(v12 + 48);
  if (!v20) {
    goto LABEL_24;
  }
  LODWORD(v21) = ((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) & (v20 - 1);
  unsigned int v22 = (uint64_t *)(v19 + 16 * v21);
  uint64_t v23 = *v22;
  if (*v22 != *(void *)a2)
  {
    int v24 = 1;
    while (v23 != -4096)
    {
      int v25 = v21 + v24++;
      uint64_t v21 = v25 & (v20 - 1);
      uint64_t v23 = *(void *)(v19 + 16 * v21);
      if (v23 == *(void *)a2)
      {
        unsigned int v22 = (uint64_t *)(v19 + 16 * v21);
        goto LABEL_25;
      }
    }
LABEL_24:
    unsigned int v22 = (uint64_t *)(v19 + 16 * v20);
  }
LABEL_25:
  uint64_t v29 = v22[1];
  uint64_t v30 = 0;
  uint64_t v26 = llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>((uint64_t)(v18 + 6), &v29, &v30);
  uint64_t v27 = v30;
  uint64_t v30 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  return propagatePattern(v26 + 8, a2, v8 + 1, a4);
}

void *foldSwitchToBool(void *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    {
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v11)
      {
        uint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
        unint64_t v28 = 85;
        unint64_t v12 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
        if (v28 >= v12) {
          unint64_t v13 = v12;
        }
        else {
          unint64_t v13 = v28;
        }
        unint64_t v14 = &v27[v13];
        unint64_t v15 = v28 - v13;
        if (v28 - v13 >= 0x12) {
          uint64_t v16 = 18;
        }
        else {
          uint64_t v16 = v28 - v13;
        }
        unint64_t v17 = v15 - v16;
        if (v17 >= v17 - 1) {
          uint64_t v18 = v17 - 1;
        }
        else {
          uint64_t v18 = v17;
        }
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
        uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    if (v3 == v4[86])
    {
      uint64_t v8 = *(unsigned int *)(v1 + 80);
      if (v8)
      {
        uint64_t v9 = 16 * v8;
        uint64_t v10 = *(void *)(v1 + 72) + 8;
        do
        {
          foldSwitchToBool(v10);
          v10 += 16;
          v9 -= 16;
        }
        while (v9);
        if (*(_DWORD *)(v1 + 80) == 1) {
          operator new();
        }
      }
    }
    else
    {
      uint64_t v5 = *v2;
      uint64_t v6 = *(void *)(*v2 + 40);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      {
        uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
        if (v19)
        {
          uint64_t v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
          unint64_t v28 = 83;
          unint64_t v20 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
          if (v28 >= v20) {
            unint64_t v21 = v20;
          }
          else {
            unint64_t v21 = v28;
          }
          unsigned int v22 = &v27[v21];
          unint64_t v23 = v28 - v21;
          if (v28 - v21 >= 0x12) {
            uint64_t v24 = 18;
          }
          else {
            uint64_t v24 = v28 - v21;
          }
          unint64_t v25 = v23 - v24;
          if (v25 >= v25 - 1) {
            uint64_t v26 = v25 - 1;
          }
          else {
            uint64_t v26 = v25;
          }
          mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
          uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
        }
      }
      if (v6 == v7[84]) {
        foldSwitchToBool(v5 + 56);
      }
    }
    return (void *)foldSwitchToBool(*v2 + 24);
  }
  return result;
}

void *mlir::pdl_to_pdl_interp::SuccessNode::SuccessNode(void *result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a3;
    int v19 = result;
    uint64_t v16 = a4;
    uint64_t v17 = a2;
    uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v16;
    a2 = v17;
    int v8 = v7;
    a3 = v18;
    __n128 result = v19;
    if (v8)
    {
      unint64_t v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SuccessNode]";
      unint64_t v21 = 86;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v21;
      }
      int v11 = &v20[v10];
      unint64_t v12 = v21 - v10;
      if (v21 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v21 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v16;
      a2 = v17;
      a3 = v18;
      __n128 result = v19;
    }
  }
  uint64_t v5 = v4[88];
  uint64_t v6 = *a4;
  *a4 = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  result[4] = 0;
  result[5] = v5;
  result[6] = a2;
  char *result = &unk_26C3621F8;
  result[7] = a3;
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::SwitchNode::SwitchNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v15 = a3;
    uint64_t v16 = result;
    uint64_t v14 = a2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v14;
    a3 = v15;
    int v6 = v5;
    __n128 result = v16;
    if (v6)
    {
      uint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
      unint64_t v18 = 85;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v18;
      }
      unint64_t v9 = &v17[v8];
      unint64_t v10 = v18 - v8;
      if (v18 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v18 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v14;
      a3 = v15;
      __n128 result = v16;
    }
  }
  uint64_t v4 = v3[86];
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = 0;
  *(void *)__n128 result = &unk_26C3621B8;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 72) = result + 88;
  *(void *)(result + 80) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::MatcherNode::~MatcherNode(mlir::pdl_to_pdl_interp::MatcherNode *this)
{
  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::BoolNode::~BoolNode(mlir::pdl_to_pdl_interp::BoolNode *this)
{
  *(void *)this = &unk_26C362478;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_26C3621D8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26C362478;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_26C3621D8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::SuccessNode::~SuccessNode(mlir::pdl_to_pdl_interp::SuccessNode *this)
{
  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::SwitchNode::~SwitchNode(mlir::pdl_to_pdl_interp::SwitchNode *this)
{
  *(void *)this = &unk_26C3621B8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)&v4[v5];
      *(void *)&v4[v5] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 9);
  }
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_26C3621B8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)&v4[v5];
      *(void *)&v4[v5] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 9);
  }
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

void *sub_2117E4088()
{
  *unint64_t v0 = &unk_26C3621D8;
  uint64_t v1 = v0[4];
  v0[4] = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  uint64_t v2 = v0[3];
  v0[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return v0;
}

void sub_2117E41C8()
{
  *unint64_t v0 = &unk_26C3621D8;
  uint64_t v1 = v0[4];
  v0[4] = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  uint64_t v2 = v0[3];
  v0[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x21667D3C0);
}

void getTreePredicates(uint64_t **a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v107 = a2;
  v108[0] = 0;
  int v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v107, v108);
  unint64_t v10 = v108[0];
  if (v9)
  {
    uint64_t v11 = *(void **)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v107) + 48) + 16);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
    {
      return;
    }
    unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10[1]);
    unsigned int v17 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(a5);
    unint64_t v18 = (void *)a5;
    if (OperationDepth < v17) {
      unint64_t v18 = (void *)v10[1];
    }
    v108[0] = v18;
    uint64_t v19 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
    uint64_t v20 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    uint64_t v21 = v20;
    unint64_t v23 = a1[1];
    unint64_t v22 = (unint64_t)a1[2];
    if ((unint64_t)v23 < v22)
    {
      if (OperationDepth >= v17) {
        a5 = v10[1];
      }
      *unint64_t v23 = a5;
      v23[1] = v19;
      unint64_t v23[2] = v20;
      a1[1] = v23 + 3;
      return;
    }
    uint64_t v106 = a1;
    uint64_t v32 = (unint64_t *)*a1;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v23 - *a1);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v32) >> 3);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x555555555555555) {
        unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v37 = 24 * v36;
        uint64_t v38 = (char *)operator new(24 * v36);
        uint64_t v39 = (uint64_t *)&v38[24 * v33];
        if (OperationDepth >= v17) {
          a5 = v10[1];
        }
        *uint64_t v39 = a5;
        unint64_t v40 = v39 + 3;
        unint64_t v41 = &v38[v37];
        unsigned int v42 = &v38[24 * v33];
        *((void *)v42 + 1) = v19;
        *((void *)v42 + 2) = v21;
        if (v23 == (uint64_t *)v32)
        {
          uint64_t v43 = v106;
          *uint64_t v106 = v39;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v43 = v106;
          do
          {
            long long v44 = *(_OWORD *)(v23 - 3);
            uint64_t v45 = v39 - 3;
            *(v39 - 1) = *(v23 - 1);
            *(_OWORD *)(v39 - 3) = v44;
            v23 -= 3;
            v39 -= 3;
          }
          while (v23 != (uint64_t *)v32);
          *uint64_t v106 = v45;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32) {
            goto LABEL_43;
          }
        }
        operator delete(v32);
LABEL_43:
        v43[1] = v40;
        return;
      }
LABEL_125:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_124:
    abort();
  }
  uint64_t v24 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v107, (unint64_t *)&v107, v108[0]);
  *uint64_t v24 = v107;
  v24[1] = a5;
  int v25 = *(_DWORD *)(a5 + 16);
  if (a5 && v25 == 3)
  {
    v109[0] = v107;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v109);
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*a3);
    uint64_t v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    uint64_t v28 = v27;
    uint64_t v30 = a1[1];
    unint64_t v29 = (unint64_t)a1[2];
    if ((unint64_t)v30 < v29)
    {
      uint64_t *v30 = a5;
      v30[1] = IsNotNull;
      uint64_t v31 = v30 + 3;
      v30[2] = v27;
      goto LABEL_56;
    }
    uint64_t v46 = a1;
    uint64_t v47 = *a1;
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (v30 - *a1);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_124;
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v47) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x555555555555555) {
      unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_125;
    }
    uint64_t v52 = 24 * v51;
    long long v53 = (char *)operator new(24 * v51);
    uint64_t v54 = (uint64_t *)&v53[24 * v48];
    unsigned int v55 = &v53[v52];
    *uint64_t v54 = a5;
    v54[1] = IsNotNull;
    v54[2] = v28;
    uint64_t v31 = v54 + 3;
    if (v30 == v47)
    {
      a1 = v46;
      *uint64_t v46 = v54;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47) {
LABEL_55:
      }
        operator delete(v47);
    }
    else
    {
      a1 = v46;
      do
      {
        long long v56 = *(_OWORD *)(v30 - 3);
        uint64_t v57 = v54 - 3;
        *(v54 - 1) = *(v30 - 1);
        *(_OWORD *)(v54 - 3) = v56;
        v30 -= 3;
        v54 -= 3;
      }
      while (v30 != v47);
      *uint64_t v46 = v57;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47) {
        goto LABEL_55;
      }
    }
LABEL_56:
    a1[1] = v31;
    uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&DefiningOp);
    if (ValueType)
    {
      uint64_t v59 = ValueType;
      v108[0] = (void *)a5;
      uint64_t v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
      getTreePredicates(a1, v59, a3, a4, v60);
      return;
    }
    uint64_t FastmathAttr = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
    if (FastmathAttr)
    {
      v108[0] = FastmathAttr;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v88 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v88) {
        goto LABEL_85;
      }
      uint64_t v74 = a1;
      int v75 = (unint64_t *)*a1;
      unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v91 = v90 + 1;
      if (v90 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (void)v75) >> 3);
      if (2 * v92 > v91) {
        unint64_t v91 = 2 * v92;
      }
      if (v92 >= 0x555555555555555) {
        unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v93 = v91;
      }
      if (v93 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v94 = 24 * v93;
      unsigned int v95 = (char *)operator new(24 * v93);
      unsigned int v82 = (uint64_t *)&v95[24 * v90];
      unsigned int v83 = &v95[v94];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 != (uint64_t *)v75)
      {
        a1 = v74;
        do
        {
          long long v96 = *(_OWORD *)(v73 - 3);
          BOOL v86 = v82 - 3;
          *(v82 - 1) = *(v73 - 1);
          *(_OWORD *)(v82 - 3) = v96;
          v73 -= 3;
          v82 -= 3;
        }
        while (v73 != (uint64_t *)v75);
        goto LABEL_120;
      }
LABEL_119:
      BOOL v86 = v82;
      a1 = v74;
      goto LABEL_120;
    }
    return;
  }
  if (a5 && !v25)
  {
    getTreePredicates((unint64_t **)a1, (uint64_t)v107, (uint64_t **)a3, (uint64_t)a4, (mlir::pdl_to_pdl_interp::OperationPosition *)a5, 0);
    return;
  }
  if (v25 == 6)
  {
    v109[0] = v107;
    uint64_t v61 = mlir::Value::getDefiningOp((mlir::Value *)v109);
    if (v61
      && ((uint64_t v62 = *(void **)(*(void *)(v61 + 48) + 16),
           BOOL v63 = v62 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id,
           v62 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
        ? (uint64_t v64 = 0)
        : (uint64_t v64 = v61),
          uint64_t DefiningOp = v64,
          v63))
    {
      uint64_t v97 = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
      if (!v97) {
        return;
      }
      v108[0] = v97;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v98 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v98) {
        goto LABEL_85;
      }
      uint64_t v74 = a1;
      int v75 = (unint64_t *)*a1;
      unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v100 = v99 + 1;
      if (v99 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v75) >> 3);
      if (2 * v101 > v100) {
        unint64_t v100 = 2 * v101;
      }
      if (v101 >= 0x555555555555555) {
        unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v103 = 24 * v102;
      uint64_t v104 = (char *)operator new(24 * v102);
      unsigned int v82 = (uint64_t *)&v104[24 * v99];
      unsigned int v83 = &v104[v103];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 == (uint64_t *)v75) {
        goto LABEL_119;
      }
      a1 = v74;
      do
      {
        long long v105 = *(_OWORD *)(v73 - 3);
        BOOL v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v105;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
    else
    {
      uint64_t v65 = mlir::Value::getDefiningOp((mlir::Value *)v109);
      if (!v65) {
        return;
      }
      long long v66 = *(void **)(*(void *)(v65 + 48) + 16);
      BOOL v67 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id;
      long long v68 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id ? (uint64_t *)v65 : 0;
      uint64_t v114 = v68;
      if (!v67) {
        return;
      }
      long long v69 = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v114);
      if (!v69) {
        return;
      }
      v108[0] = v69;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v72 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v72)
      {
LABEL_85:
        *uint64_t v73 = a5;
        v73[1] = v70;
        unsigned int v84 = v73 + 3;
        v73[2] = v71;
LABEL_122:
        a1[1] = v84;
        return;
      }
      uint64_t v74 = a1;
      int v75 = (unint64_t *)*a1;
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (void)v75) >> 3);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v80 = 24 * v79;
      uint64_t v81 = (char *)operator new(24 * v79);
      unsigned int v82 = (uint64_t *)&v81[24 * v76];
      unsigned int v83 = &v81[v80];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 == (uint64_t *)v75) {
        goto LABEL_119;
      }
      a1 = v74;
      do
      {
        long long v85 = *(_OWORD *)(v73 - 3);
        BOOL v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v85;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
LABEL_120:
    *a1 = v86;
    a1[1] = v84;
    a1[2] = (uint64_t *)v83;
    if (v75) {
      operator delete(v75);
    }
    goto LABEL_122;
  }
  if (a5 && v25 == 1 || a5 && v25 == 2)
  {
    uint64_t v113 = a5;
    uint64_t v114 = v107;
    BOOL v112 = *(void *)(*(void *)(v107[1] & 0xFFFFFFFFFFFFFFF8) + 136) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
    uint64_t v89 = mlir::Value::getDefiningOp((mlir::Value *)&v114);
    v109[3] = a4;
    uint64_t DefiningOp = v89;
    char v111 = 0;
    v109[0] = &v113;
    v109[1] = (uint64_t *)a1;
    v109[2] = (uint64_t *)a3;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    v108[0] = a1;
    v108[1] = &v113;
    v108[2] = a3;
    v108[3] = &v112;
    v108[4] = a4;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
  }
}

void std::deque<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::Entry,std::allocator<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::Entry>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v6 = (void *)a1[1];
    uint64_t v5 = (char *)a1[2];
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)uint64_t v5 = v8;
      goto LABEL_95;
    }
    int v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        unint64_t v7 = (char *)a1[1];
      }
      uint64_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v37 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v37 = 1;
    }
    if (v37 >> 61) {
      goto LABEL_110;
    }
    unint64_t v38 = v37 >> 2;
    uint64_t v39 = 8 * v37;
    unint64_t v40 = (char *)operator new(8 * v37);
    unint64_t v41 = &v40[8 * v38];
    int64_t v43 = v5 - v7;
    BOOL v42 = v5 == v7;
    uint64_t v5 = v41;
    if (!v42)
    {
      uint64_t v5 = &v41[v43 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) >= 0x38)
      {
        unsigned int v95 = &v40[8 * v38];
        uint64_t v45 = v95;
        if ((unint64_t)(v95 - v7) >= 0x20)
        {
          uint64_t v96 = (v44 >> 3) + 1;
          uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v45 = &v41[v97];
          v7 += v97;
          unint64_t v98 = (long long *)(v6 + 3);
          unint64_t v99 = v95 + 16;
          uint64_t v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v101 = *v98;
            *(v99 - 1) = *(v98 - 1);
            *unint64_t v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        uint64_t v45 = &v40[8 * v38];
      }
      do
      {
        uint64_t v102 = *(void *)v7;
        v7 += 8;
        *(void *)uint64_t v45 = v102;
        v45 += 8;
      }
      while (v45 != v5);
    }
LABEL_91:
    *a1 = v40;
    a1[1] = v41;
    a1[2] = v5;
    a1[3] = &v40[v39];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v103 = v9;
LABEL_93:
    operator delete(v103);
    uint64_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  unint64_t v18 = (char *)*a1;
  unsigned int v17 = (char *)a1[1];
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = v20 - v17;
  uint64_t v22 = (v20 - v17) >> 3;
  uint64_t v23 = (uint64_t)&v19[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    uint64_t v24 = operator new(0x1000uLL);
    int v25 = v24;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v17 == v18)
    {
      unint64_t v72 = (v19 - v17) >> 2;
      if (v20 == v17) {
        unint64_t v72 = 1;
      }
      if (v72 >> 61) {
        goto LABEL_110;
      }
      unint64_t v73 = (v72 + 3) >> 2;
      uint64_t v74 = 8 * v72;
      int v75 = (char *)operator new(8 * v72);
      uint64_t v46 = &v75[8 * v73];
      unint64_t v76 = v46;
      if (v20 != v17)
      {
        unint64_t v76 = &v46[8 * v22];
        unint64_t v77 = &v75[8 * v73];
        unint64_t v78 = v17;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_113;
        }
        unint64_t v79 = &v75[8 * v73];
        unint64_t v77 = v79;
        unint64_t v78 = v17;
        if ((unint64_t)(v79 - v17) < 0x20) {
          goto LABEL_113;
        }
        unint64_t v80 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v77 = &v46[v81];
        unint64_t v78 = &v17[v81];
        unsigned int v82 = (long long *)(v17 + 16);
        unsigned int v83 = v79 + 16;
        uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v85 = *v82;
          *(v83 - 1) = *(v82 - 1);
          *unsigned int v83 = v85;
          v82 += 2;
          v83 += 2;
          v84 -= 4;
        }
        while (v84);
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            uint64_t v86 = *(void *)v78;
            v78 += 8;
            *(void *)unint64_t v77 = v86;
            v77 += 8;
          }
          while (v77 != v76);
        }
      }
      *a1 = v75;
      a1[1] = v46;
      a1[2] = v76;
      a1[3] = &v75[v74];
      if (v17)
      {
        operator delete(v17);
        uint64_t v46 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v46 = v17;
    }
    *((void *)v46 - 1) = v25;
    unsigned int v87 = (char *)a1[1];
    uint64_t v5 = (char *)a1[2];
    a1[1] = v87 - 8;
    uint64_t v8 = *((void *)v87 - 1);
    a1[1] = v87;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    unint64_t v88 = (char *)*a1;
    if ((unint64_t)v87 > *a1)
    {
      uint64_t v89 = (uint64_t)&v87[-*a1] >> 3;
      if (v89 >= -1) {
        uint64_t v90 = v89 + 1;
      }
      else {
        uint64_t v90 = v89 + 2;
      }
      uint64_t v91 = v90 >> 1;
      uint64_t v92 = -v91;
      unint64_t v93 = &v87[-8 * v91];
      int64_t v94 = v5 - v87;
      if (v5 != v87)
      {
        memmove(&v87[-8 * v91], v87, v5 - v87);
        unsigned int v87 = (char *)a1[1];
      }
      uint64_t v5 = &v93[v94];
      uint64_t v16 = &v87[8 * v92];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v104 = (v5 - v88) >> 2;
    if (v5 == v88) {
      unint64_t v104 = 1;
    }
    if (!(v104 >> 61))
    {
      unint64_t v105 = v104 >> 2;
      uint64_t v106 = 8 * v104;
      unint64_t v107 = (char *)operator new(8 * v104);
      uint64_t v108 = &v107[8 * v105];
      int64_t v109 = v5 - v87;
      BOOL v42 = v5 == v87;
      uint64_t v5 = v108;
      if (!v42)
      {
        uint64_t v5 = &v108[v109 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v110 = v109 - 8;
        if ((unint64_t)(v109 - 8) >= 0x38)
        {
          BOOL v112 = &v107[8 * v105];
          char v111 = v112;
          if ((unint64_t)(v112 - v87) >= 0x20)
          {
            uint64_t v113 = (v110 >> 3) + 1;
            uint64_t v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
            char v111 = &v108[v114];
            uint64_t v115 = &v87[v114];
            uint64_t v116 = (long long *)(v87 + 16);
            uint64_t v117 = v112 + 16;
            uint64_t v118 = v113 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v119 = *v116;
              *(v117 - 1) = *(v116 - 1);
              *uint64_t v117 = v119;
              v116 += 2;
              v117 += 2;
              v118 -= 4;
            }
            while (v118);
            unsigned int v87 = v115;
            if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          char v111 = &v107[8 * v105];
        }
        do
        {
          uint64_t v120 = *(void *)v87;
          v87 += 8;
          *(void *)char v111 = v120;
          v111 += 8;
        }
        while (v111 != v5);
      }
LABEL_108:
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = &v107[v106];
      if (!v88) {
        goto LABEL_94;
      }
      uint64_t v103 = v88;
      goto LABEL_93;
    }
LABEL_110:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v26 = v23 >> 2;
  if (v19 == v18) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_110;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  unint64_t v29 = &v28[8 * v22];
  uint64_t v30 = &v28[8 * v27];
  uint64_t v31 = operator new(0x1000uLL);
  uint64_t v32 = v31;
  if (v22 != v27) {
    goto LABEL_24;
  }
  if (v21 >= 1)
  {
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v29 -= 8 * (v33 >> 1);
LABEL_24:
    *(void *)unint64_t v29 = v31;
    unint64_t v34 = v29 + 8;
    if (v20 != v17) {
      goto LABEL_46;
    }
    goto LABEL_25;
  }
  if (v20 == v17) {
    unint64_t v47 = 1;
  }
  else {
    unint64_t v47 = v21 >> 2;
  }
  if (v47 >> 61) {
    goto LABEL_110;
  }
  uint64_t v48 = 8 * v47;
  unint64_t v49 = (char *)operator new(8 * v47);
  unint64_t v29 = &v49[8 * (v47 >> 2)];
  uint64_t v30 = &v49[v48];
  operator delete(v28);
  unint64_t v50 = (char *)a1[1];
  uint64_t v20 = (char *)a1[2];
  uint64_t v28 = v49;
  *(void *)unint64_t v29 = v32;
  unint64_t v34 = v29 + 8;
  if (v20 != v50)
  {
    while (1)
    {
LABEL_46:
      if (v29 == v28)
      {
        if (v34 >= v30)
        {
          unint64_t v57 = (v30 - v29) >> 2;
          if (v30 == v29) {
            unint64_t v57 = 1;
          }
          if (v57 >> 61) {
            goto LABEL_110;
          }
          unint64_t v58 = (v57 + 3) >> 2;
          uint64_t v59 = 8 * v57;
          uint64_t v60 = (char *)operator new(8 * v57);
          uint64_t v28 = v60;
          unint64_t v51 = &v60[8 * v58];
          int64_t v61 = v34 - v29;
          BOOL v42 = v34 == v29;
          unint64_t v34 = v51;
          if (!v42)
          {
            unint64_t v34 = &v51[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            BOOL v63 = &v60[8 * v58];
            uint64_t v64 = v29;
            if (v62 < 0x38) {
              goto LABEL_114;
            }
            BOOL v63 = &v60[8 * v58];
            uint64_t v64 = v29;
            if ((unint64_t)(v63 - v29) < 0x20) {
              goto LABEL_114;
            }
            uint64_t v65 = (v62 >> 3) + 1;
            uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v63 = &v51[v66];
            uint64_t v64 = &v29[v66];
            BOOL v67 = (long long *)(v29 + 16);
            long long v68 = &v60[8 * v58 + 16];
            uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v70 = *v67;
              *((_OWORD *)v68 - 1) = *(v67 - 1);
              *(_OWORD *)long long v68 = v70;
              v67 += 2;
              v68 += 32;
              v69 -= 4;
            }
            while (v69);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                uint64_t v71 = *(void *)v64;
                v64 += 8;
                *(void *)BOOL v63 = v71;
                v63 += 8;
              }
              while (v63 != v34);
            }
          }
          uint64_t v30 = &v60[v59];
          operator delete(v29);
        }
        else
        {
          uint64_t v53 = (v30 - v34) >> 3;
          if (v53 >= -1) {
            unint64_t v54 = v53 + 1;
          }
          else {
            unint64_t v54 = v53 + 2;
          }
          unsigned int v55 = &v34[8 * (v54 >> 1)];
          unint64_t v51 = &v55[-(v34 - v29)];
          size_t v56 = v34 - v29;
          BOOL v42 = v34 == v29;
          unint64_t v34 = v55;
          if (!v42) {
            memmove(v51, v29, v56);
          }
          uint64_t v28 = v29;
        }
      }
      else
      {
        unint64_t v51 = v29;
      }
      uint64_t v52 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v51 - 1) = v52;
      unint64_t v35 = v51 - 8;
      unint64_t v29 = v35;
      if (v20 == (char *)a1[1]) {
        goto LABEL_26;
      }
    }
  }
LABEL_25:
  unint64_t v35 = v29;
LABEL_26:
  unint64_t v36 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v34;
  a1[3] = v30;
  if (v36)
  {
    operator delete(v36);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    uint64_t v5 = &unk_267770000;
    {
      uint64_t v22 = result;
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      int v21 = a2;
      unint64_t v18 = v4;
      uint64_t v5 = &unk_267770000;
      unint64_t v4 = v18;
      a3 = v19;
      a2 = v21;
      a4 = v20;
      int v16 = v15;
      __n128 result = v22;
      if (v16)
      {
        unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v17 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v17;
        uint64_t v5 = (void *)&unk_267770000;
        unint64_t v4 = v18;
        a3 = v19;
        a2 = v21;
        __n128 result = v22;
        a4 = v20;
      }
    }
    uint64_t v6 = (v5[385] + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    unint64_t v8 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    int v9 = (void *)(result + 32 * v8);
    uint64_t v10 = *v9;
    if (*a3 == *v9)
    {
LABEL_4:
      *a4 = v9;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 1;
      while (v10 != -4096)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v10 == -8192;
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        int v14 = v8 + v12++;
        unint64_t v8 = v14 & (a2 - 1);
        int v9 = (void *)(result + 32 * v8);
        uint64_t v10 = *v9;
        if (*a3 == *v9) {
          goto LABEL_4;
        }
      }
      if (v11) {
        int v9 = v11;
      }
      *a4 = v9;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      BOOL v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *BOOL v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    int v16 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v17 = 32 * v3;
      unint64_t v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = *(void *)a1;
          int v20 = *(_DWORD *)(a1 + 16);
          uint64_t v29 = 0;
          uint64_t v21 = v29;
          unint64_t v22 = *(void *)v18;
          *(_DWORD *)(v29 + 24) = 0;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
          *(void *)uint64_t v21 = v22;
          *(void *)(v21 + 8) = *((void *)v18 + 1);
          *((void *)v18 + 1) = 0;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v18 + 4);
          *((_DWORD *)v18 + 4) = 0;
          LODWORD(v22) = *(_DWORD *)(v21 + 20);
          *(_DWORD *)(v21 + 20) = *((_DWORD *)v18 + 5);
          *((_DWORD *)v18 + 5) = v22;
          uint64_t v23 = *(unsigned int *)(v21 + 24);
          *(_DWORD *)(v21 + 24) = *((_DWORD *)v18 + 6);
          *((_DWORD *)v18 + 6) = v23;
          ++*(_DWORD *)(a1 + 8);
          llvm::deallocate_buffer(0, (void *)(24 * v23));
        }
        unint64_t v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    if (((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_25;
    }
    uint64_t v25 = ((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v25 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v26 = result + 4;
    uint64_t v27 = v25 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v26 - 4) = -4096;
      *uint64_t v26 = -4096;
      v26 += 8;
      v27 -= 2;
    }
    while (v27);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_25:
      uint64_t v28 = &result[4 * v24];
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v28);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    unint64_t v5 = &unk_267770000;
    {
      uint64_t v23 = result;
      int v20 = a3;
      uint64_t v21 = a4;
      int v22 = a2;
      unint64_t v19 = v4;
      unint64_t v5 = &unk_267770000;
      unint64_t v4 = v19;
      a3 = v20;
      a2 = v22;
      a4 = v21;
      int v17 = v16;
      __n128 result = v23;
      if (v17)
      {
        unint64_t v18 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v18 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v18;
        unint64_t v5 = (void *)&unk_267770000;
        unint64_t v4 = v19;
        a3 = v20;
        a2 = v22;
        __n128 result = v23;
        a4 = v21;
      }
    }
    uint64_t v6 = (v5[385] + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    int v8 = a2 - 1;
    unsigned int v9 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    uint64_t v10 = (void *)(result + 24 * v9);
    uint64_t v11 = *v10;
    if (*a3 == *v10)
    {
LABEL_4:
      *a4 = v10;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (void *)(result + 24 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*a3 == *v10) {
          goto LABEL_4;
        }
      }
      if (v12) {
        uint64_t v10 = v12;
      }
      *a4 = v10;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v18 = result;
      do
      {
        *unint64_t v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = v4;
          do
          {
            if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v22 = *(void *)a1;
              int v23 = *(_DWORD *)(a1 + 16);
              uint64_t v29 = 0;
              uint64_t v24 = v29;
              void *v29 = *(void *)v21;
              *(_OWORD *)(v24 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            uint64_t v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    unint64_t v19 = &result[3 * v10];
    do
    {
      *uint64_t v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      unsigned int v15 = result;
LABEL_27:
      uint64_t v28 = &result[3 * v13];
      do
      {
        void *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v28);
      return result;
    }
    unint64_t v25 = v14 / 0x18 + 1;
    unsigned int v15 = &result[3 * (v25 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v27 = result;
    do
    {
      *uint64_t v27 = -4096;
      v27[3] = -4096;
      v27 += 6;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_27;
    }
  }
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::Value,llvm::SmallVector<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::RootDepth,1u>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v24 = 0;
  uint64_t v3 = (char *)(a1 + 16);
  unint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v24);
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 40 * v6;
  do
  {
    unsigned int v10 = &v4[v7];
    unint64_t v11 = &v5[v7];
    *(void *)unsigned int v10 = *(void *)&v5[v7];
    uint64_t v12 = &v4[v7 + 24];
    *(void *)&v4[v7 + 8] = v12;
    unsigned int v13 = &v4[v7 + 8];
    *((void *)v10 + 2) = 0x100000000;
    if (v5 != v4)
    {
      unsigned int v14 = *((_DWORD *)v11 + 4);
      if (v14)
      {
        unsigned int v15 = (const void *)*((void *)v11 + 1);
        unint64_t v16 = &v5[v7];
        uint64_t v17 = (uint64_t)&v5[v7 + 24];
        if ((const void *)v17 != v15)
        {
          *(void *)unsigned int v13 = v15;
          int v9 = *((_DWORD *)v16 + 5);
          *((_DWORD *)v10 + 4) = v14;
          *((_DWORD *)v10 + 5) = v9;
          *((void *)v11 + 1) = v17;
          *((_DWORD *)v16 + 5) = 0;
LABEL_4:
          *((_DWORD *)v11 + 4) = 0;
          goto LABEL_5;
        }
        if (v14 < 2)
        {
          size_t v19 = 16;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v4[v7 + 8], &v4[v7 + 24], *((unsigned int *)v11 + 4), 16);
          uint64_t v18 = *((unsigned int *)v11 + 4);
          if (!v18)
          {
LABEL_14:
            *((_DWORD *)v10 + 4) = v14;
            goto LABEL_4;
          }
          unsigned int v15 = (const void *)*((void *)v11 + 1);
          uint64_t v12 = *(char **)v13;
          size_t v19 = 16 * v18;
        }
        memcpy(v12, v15, v19);
        goto LABEL_14;
      }
    }
LABEL_5:
    v7 += 40;
  }
  while (v8 != v7);
  unint64_t v5 = *(char **)a1;
  uint64_t v20 = *(unsigned int *)(a1 + 8);
  if (v20)
  {
    uint64_t v21 = 40 * v20;
    do
    {
      uint64_t v22 = *(char **)&v5[v21 - 32];
      if (&v5[v21 - 16] != v22) {
        free(v22);
      }
      v21 -= 40;
    }
    while (v21);
    unint64_t v5 = *(char **)a1;
  }
LABEL_21:
  int v23 = v24;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

void llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  unint64_t v2 = *(llvm **)a1;
  if (v1)
  {
    uint64_t v3 = 32 * v1;
    while ((*(void *)v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      unint64_t v2 = (llvm *)((char *)v2 + 32);
      v3 -= 32;
      if (!v3) {
        llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
      }
    }
    llvm::deallocate_buffer(*((llvm **)v2 + 1), (void *)(24 * *((unsigned int *)v2 + 6)));
  }
  llvm::deallocate_buffer(*(llvm **)a1, 0);
}

void sub_2117E5B48()
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v0 + 16) = v2;
  if (!v2) {
    JUMPOUT(0x2117E5B54);
  }
  JUMPOUT(0x2117E5B00);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>>(uint64_t result, void *a2)
{
  *(void *)(result + 8) = a2[1];
  if (*(_DWORD *)(result + 16))
  {
    unint64_t v2 = 0;
    do
    {
      *(void *)(*(void *)result + 32 * v2) = *(void *)(*a2 + 32 * v2);
      uint64_t v3 = *(void *)result + 32 * v2;
      if ((*(void *)v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        llvm::deallocate_buffer(0, 0);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(result + 16));
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::EqualToQuestion]";
      unint64_t v24 = 90;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      unint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::EqualToQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[64];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 19;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[60]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TrueAnswer]";
  unint64_t v14 = 85;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[68]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::IsNotNullQuestion]";
  unint64_t v14 = 92;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypePosition]";
      unint64_t v24 = 87;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[44];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 6;
  *(void *)(result + 24) = *a2;
  uint64_t v10 = *a2;
  *(void *)unint64_t result = &unk_26C362218;
  *(void *)(result + 8) = v10;
  return result;
}

void mlir::pdl_to_pdl_interp::TypePosition::~TypePosition(mlir::pdl_to_pdl_interp::TypePosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[66]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeQuestion]";
  unint64_t v14 = 92;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  int v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeAnswer]";
      unint64_t v24 = 90;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[50];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 21;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t getTreePredicates(unint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t a4, mlir::pdl_to_pdl_interp::OperationPosition *a5, uint64_t a6)
{
  uint64_t v204 = *MEMORY[0x263EF8340];
  uint64_t v194 = a2;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v194);
  v190 = a3;
  v191 = a1;
  if (*((_DWORD *)a5 + 8))
  {
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*a3);
    uint64_t v12 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*a3);
    uint64_t v13 = v12;
    uint64_t v15 = a1[1];
    unint64_t v14 = (unint64_t)a1[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a1;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - *a1);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v17) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v22 = 24 * v21;
      int v23 = (char *)operator new(24 * v21);
      unint64_t v24 = &v23[24 * v18];
      unint64_t v25 = &v23[v22];
      *(void *)unint64_t v24 = a5;
      *((void *)v24 + 1) = IsNotNull;
      *((void *)v24 + 2) = v13;
      unint64_t v16 = (unint64_t *)(v24 + 24);
      if (v15 == v17)
      {
        a1 = v191;
        *v191 = (unint64_t *)v24;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17) {
          goto LABEL_16;
        }
      }
      else
      {
        a1 = v191;
        do
        {
          long long v26 = *(_OWORD *)(v15 - 3);
          uint64_t v27 = (unint64_t *)(v24 - 24);
          *((void *)v24 - 1) = *(v15 - 1);
          *(_OWORD *)(v24 - 24) = v26;
          v15 -= 3;
          v24 -= 24;
        }
        while (v15 != v17);
        *v191 = v27;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17) {
          goto LABEL_16;
        }
      }
      operator delete(v17);
    }
    else
    {
      unint64_t *v15 = (unint64_t)a5;
      v15[1] = IsNotNull;
      unint64_t v16 = v15 + 3;
      v15[2] = v12;
    }
LABEL_16:
    a1[1] = v16;
  }
  mlir::pdl::OperationOp::getOpName((uint64_t)&DefiningOp, (uint64_t)&v201);
  if (!(_BYTE)v202) {
    goto LABEL_33;
  }
  __n128 v28 = v201;
  uint64_t v29 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(*v190);
  uint64_t v30 = *v190;
  mlir::OperationName::OperationName(&v196, v28.n128_u64[0], v28.n128_u64[1], v190[1]);
  uint64_t v31 = (unsigned __int8 **)v30;
  a1 = v191;
  uint64_t v32 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(v31, 0, 0, &v196);
  uint64_t v33 = v32;
  unint64_t v35 = v191[1];
  unint64_t v34 = (unint64_t)v191[2];
  if ((unint64_t)v35 >= v34)
  {
    unint64_t v37 = *v191;
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v35 - *v191);
    unint64_t v39 = v38 + 1;
    if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_171;
    }
    unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)v37) >> 3);
    if (2 * v40 > v39) {
      unint64_t v39 = 2 * v40;
    }
    if (v40 >= 0x555555555555555) {
      unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_172;
    }
    uint64_t v42 = 24 * v41;
    int64_t v43 = (char *)operator new(24 * v41);
    unint64_t v44 = &v43[24 * v38];
    uint64_t v45 = &v43[v42];
    *(void *)unint64_t v44 = a5;
    *((void *)v44 + 1) = v29;
    *((void *)v44 + 2) = v33;
    unint64_t v36 = (unint64_t *)(v44 + 24);
    if (v35 == (unint64_t *)v28.n128_u64[1])
    {
      a1 = v191;
      *v191 = (unint64_t *)v44;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37) {
        goto LABEL_32;
      }
    }
    else
    {
      a1 = v191;
      do
      {
        long long v46 = *(_OWORD *)(v35 - 3);
        unint64_t v47 = (unint64_t *)(v44 - 24);
        *((void *)v44 - 1) = *(v35 - 1);
        *(_OWORD *)(v44 - 24) = v46;
        v35 -= 3;
        v44 -= 24;
      }
      while (v35 != v37);
      *v191 = v47;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37) {
        goto LABEL_32;
      }
    }
    operator delete(v37);
  }
  else
  {
    *unint64_t v35 = (unint64_t)a5;
    v35[1] = v29;
    unint64_t v36 = v35 + 3;
    v35[2] = v32;
  }
LABEL_32:
  a1[1] = v36;
LABEL_33:
  uint64_t v183 = a6;
  Operanduint64_t Values = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&DefiningOp);
  unint64_t v189 = v48;
  mlir::ValueRange::ValueRange(v199.n128_u64, OperandValues, v48);
  __n128 v200 = v199;
  mlir::ValueRange::getTypes(&v200, &v201);
  uint64_t v49 = v201.n128_i64[1];
  long long v50 = v202;
  __n128 v196 = v201;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v189) {
      goto LABEL_80;
    }
    unsigned __int32 v51 = 0;
  }
  else
  {
    unsigned __int32 v51 = 0;
    do
    {
      if (*(_UNKNOWN **)(*(void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v196, v49) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
        ++v51;
      uint64_t v49 = ++v196.n128_u64[1];
    }
    while (v196.n128_u64[0] != (void)v50 || v49 != *((void *)&v50 + 1));
    if (v189 != v51)
    {
      if (!v51) {
        goto LABEL_80;
      }
      v201.n128_u32[0] = v51;
      uint64_t v59 = a1;
      uint64_t v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(*v190);
      uint64_t v61 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
      uint64_t v62 = v61;
      uint64_t v64 = v59[1];
      unint64_t v63 = (unint64_t)v59[2];
      if ((unint64_t)v64 < v63)
      {
        *uint64_t v64 = (unint64_t)a5;
        v64[1] = v60;
        unint64_t v58 = v64 + 3;
        v64[2] = v61;
        a1 = v59;
        goto LABEL_79;
      }
      uint64_t v65 = *v59;
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (v64 - *v59);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v65) >> 3);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v80 = 24 * v79;
      uint64_t v81 = (char *)operator new(24 * v79);
      unint64_t v72 = &v81[24 * v76];
      unint64_t v73 = &v81[v80];
      *(void *)unint64_t v72 = a5;
      *((void *)v72 + 1) = v60;
      *((void *)v72 + 2) = v62;
      unint64_t v58 = (unint64_t *)(v72 + 24);
      if (v64 != v65)
      {
        a1 = v191;
        do
        {
          long long v82 = *(_OWORD *)(v64 - 3);
          int v75 = v72 - 24;
          *((void *)v72 - 1) = *(v64 - 1);
          *(_OWORD *)(v72 - 24) = v82;
          v64 -= 3;
          v72 -= 24;
        }
        while (v64 != v65);
LABEL_77:
        *a1 = (unint64_t *)v75;
        a1[1] = v58;
        a1[2] = (unint64_t *)v73;
        if (v65) {
          operator delete(v65);
        }
        goto LABEL_79;
      }
LABEL_76:
      int v75 = v72;
      a1 = v191;
      goto LABEL_77;
    }
  }
  v201.n128_u32[0] = v51;
  uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(*v190);
  uint64_t v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  uint64_t v55 = v54;
  unint64_t v57 = v191[1];
  unint64_t v56 = (unint64_t)v191[2];
  if ((unint64_t)v57 >= v56)
  {
    uint64_t v65 = *v191;
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v57 - *v191);
    unint64_t v67 = v66 + 1;
    if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_171;
    }
    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v65) >> 3);
    if (2 * v68 > v67) {
      unint64_t v67 = 2 * v68;
    }
    if (v68 >= 0x555555555555555) {
      unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v69 = v67;
    }
    if (v69 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_172;
    }
    uint64_t v70 = 24 * v69;
    uint64_t v71 = (char *)operator new(24 * v69);
    unint64_t v72 = &v71[24 * v66];
    unint64_t v73 = &v71[v70];
    *(void *)unint64_t v72 = a5;
    *((void *)v72 + 1) = v53;
    *((void *)v72 + 2) = v55;
    unint64_t v58 = (unint64_t *)(v72 + 24);
    if (v57 != v65)
    {
      a1 = v191;
      do
      {
        long long v74 = *(_OWORD *)(v57 - 3);
        int v75 = v72 - 24;
        *((void *)v72 - 1) = *(v57 - 1);
        *(_OWORD *)(v72 - 24) = v74;
        v57 -= 3;
        v72 -= 24;
      }
      while (v57 != v65);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  *unint64_t v57 = (unint64_t)a5;
  v57[1] = v53;
  unint64_t v58 = v57 + 3;
  v57[2] = v54;
  a1 = v191;
LABEL_79:
  a1[1] = v58;
LABEL_80:
  Typeuint64_t Values = mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&DefiningOp);
  unint64_t v85 = v84;
  uint64_t v186 = TypeValues;
  mlir::ValueRange::ValueRange(v198.n128_u64, TypeValues, v84);
  __n128 v200 = v198;
  mlir::ValueRange::getTypes(&v200, &v201);
  uint64_t v86 = v201.n128_i64[1];
  long long v87 = v202;
  __n128 v196 = v201;
  unint64_t v188 = (unint64_t)a5;
  unint64_t v185 = v85;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v85) {
      goto LABEL_119;
    }
LABEL_92:
    v201.n128_u32[0] = v85;
    uint64_t v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(*v190);
    uint64_t v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
    unint64_t v93 = a1[1];
    unint64_t v92 = (unint64_t)a1[2];
    if ((unint64_t)v93 >= v92)
    {
      int64_t v94 = *a1;
      unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
      unint64_t v96 = v95 + 1;
      if (v95 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - (void)v94) >> 3);
        if (2 * v97 > v96) {
          unint64_t v96 = 2 * v97;
        }
        if (v97 >= 0x555555555555555) {
          unint64_t v98 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98 <= 0xAAAAAAAAAAAAAAALL)
        {
          uint64_t v99 = 24 * v98;
          uint64_t v100 = (char *)operator new(24 * v98);
          long long v101 = (unint64_t *)&v100[24 * v95];
          uint64_t v102 = &v100[v99];
          *long long v101 = v188;
          v101[1] = v90;
          v101[2] = v91;
          uint64_t v103 = v101 + 3;
          if (v93 != v94)
          {
            do
            {
              long long v104 = *(_OWORD *)(v93 - 3);
              unint64_t v105 = v101 - 3;
              *(v101 - 1) = *(v93 - 1);
              *(_OWORD *)(v101 - 3) = v104;
              v93 -= 3;
              v101 -= 3;
            }
            while (v93 != v94);
            goto LABEL_115;
          }
          goto LABEL_169;
        }
        goto LABEL_172;
      }
      goto LABEL_171;
    }
    goto LABEL_105;
  }
  unsigned __int32 v88 = 0;
  do
  {
    if (*(_UNKNOWN **)(*(void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v196, v86) + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      ++v88;
    uint64_t v86 = ++v196.n128_u64[1];
  }
  while (v196.n128_u64[0] != (void)v87 || v86 != *((void *)&v87 + 1));
  if (v85 == v88) {
    goto LABEL_92;
  }
  if (!v88) {
    goto LABEL_119;
  }
  v201.n128_u32[0] = v88;
  uint64_t v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(*v190);
  uint64_t v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  unint64_t v93 = a1[1];
  unint64_t v106 = (unint64_t)a1[2];
  if ((unint64_t)v93 >= v106)
  {
    int64_t v94 = *a1;
    unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
    unint64_t v108 = v107 + 1;
    if (v107 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (void)v94) >> 3);
      if (2 * v109 > v108) {
        unint64_t v108 = 2 * v109;
      }
      if (v109 >= 0x555555555555555) {
        unint64_t v110 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v111 = 24 * v110;
        BOOL v112 = (char *)operator new(24 * v110);
        long long v101 = (unint64_t *)&v112[24 * v107];
        uint64_t v102 = &v112[v111];
        *long long v101 = v188;
        v101[1] = v90;
        v101[2] = v91;
        uint64_t v103 = v101 + 3;
        if (v93 != v94)
        {
          do
          {
            long long v113 = *(_OWORD *)(v93 - 3);
            unint64_t v105 = v101 - 3;
            *(v101 - 1) = *(v93 - 1);
            *(_OWORD *)(v101 - 3) = v113;
            v93 -= 3;
            v101 -= 3;
          }
          while (v93 != v94);
LABEL_115:
          *a1 = v105;
          a1[1] = v103;
          a1[2] = (unint64_t *)v102;
          if (!v94)
          {
LABEL_117:
            a5 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
            goto LABEL_118;
          }
LABEL_116:
          operator delete(v94);
          goto LABEL_117;
        }
LABEL_169:
        *a1 = v101;
        a1[1] = v103;
        a1[2] = (unint64_t *)v102;
        if (!v94) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
LABEL_172:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_171:
    abort();
  }
LABEL_105:
  *unint64_t v93 = (unint64_t)a5;
  v93[1] = v90;
  uint64_t v103 = v93 + 3;
  v93[2] = v91;
LABEL_118:
  a1[1] = v103;
LABEL_119:
  uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
  Attributeuint64_t Values = mlir::pdl::OperationOp::getAttributeValues((mlir::pdl::OperationOp *)&DefiningOp);
  v196.n128_u64[0] = FastmathAttr;
  v196.n128_u64[1] = AttributeValues;
  uint64_t v197 = v116;
  uint64_t v117 = a5;
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  unint64_t v119 = v196.n128_u64[1];
  uint64_t result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  uint64_t v122 = (uint64_t *)(result + 8 * v121);
  uint64_t v187 = a4;
  uint64_t v123 = (unsigned __int8 ***)v190;
  if (v122 != Value)
  {
    if (v119 == v196.n128_u64[1])
    {
      uint64_t v133 = v197;
      uint64_t v134 = (uint64_t *)(v119 + 24);
      uint64_t v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      uint64_t v123 = (unsigned __int8 ***)v190;
      do
      {
        if (!v133) {
          break;
        }
        uint64_t v136 = *v134;
        v134 += 4;
        uint64_t v135 = v136;
        uint64_t v137 = *Value++;
        uint64_t v192 = v137;
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        uint64_t v140 = *v190;
        uint64_t v139 = (mlir::StringAttr *)v190[1];
        __int16 v203 = 261;
        v201.n128_u64[0] = AttrData;
        v201.n128_u64[1] = v141;
        uint64_t v195 = mlir::StringAttr::get(v139, (mlir::MLIRContext *)&v201);
        uint64_t v142 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v140, 0, 0, &v200, &v195);
        uint64_t result = getTreePredicates(v191, v135, v190, a4, v142);
        --v133;
      }
      while (Value != v122);
    }
    else
    {
      uint64_t v124 = (uint64_t *)(v119 + 24);
      uint64_t v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      uint64_t v123 = (unsigned __int8 ***)v190;
      do
      {
        uint64_t v126 = *v124;
        v124 += 4;
        uint64_t v125 = v126;
        uint64_t v127 = *Value++;
        uint64_t v192 = v127;
        uint64_t v128 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        int64_t v130 = *v190;
        int64_t v129 = (mlir::StringAttr *)v190[1];
        __int16 v203 = 261;
        v201.n128_u64[0] = v128;
        v201.n128_u64[1] = v131;
        uint64_t v195 = mlir::StringAttr::get(v129, (mlir::MLIRContext *)&v201);
        uint64_t v132 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v130, 0, 0, &v200, &v195);
        uint64_t result = getTreePredicates(v191, v125, v190, a4, v132);
      }
      while (Value != v122);
    }
  }
  unsigned int v143 = v123;
  unint64_t v144 = (unint64_t)v117;
  if (v189)
  {
    if (v189 == 1
      && (uint64_t v145 = *(void *)(OperandValues + 24),
          *(_UNKNOWN **)(*(void *)(*(void *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      if (*((_DWORD *)v117 + 8))
      {
        uint64_t result = mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(v117);
        if (!result) {
          goto LABEL_142;
        }
        uint64_t v145 = *(void *)(OperandValues + 24);
      }
      v201.n128_u64[0] = 0;
      v196.n128_u64[0] = (unint64_t)v117;
      v200.n128_u8[0] = 1;
      uint64_t v152 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
      uint64_t result = getTreePredicates(v191, v145, v123, a4, v152);
    }
    else
    {
      char v146 = 0;
      uint64_t v147 = 0;
      uint64_t v148 = OperandValues + 24;
      do
      {
        uint64_t v150 = *(void *)v148;
        uint64_t v151 = *(void **)(*(void *)(*(void *)(*(void *)v148 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v146 |= v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if ((v183 & 0xFF00000000) == 0 || v183 != v147)
        {
          if (v146)
          {
            v201.n128_u64[0] = v147 | 0x100000000;
            v196.n128_u64[0] = v144;
            v200.n128_u8[0] = v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
            uint64_t v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
          }
          else
          {
            v201.n128_u64[0] = v144;
            v196.n128_u32[0] = v147;
            uint64_t v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v123, 0, 0, &v201, (unsigned int *)&v196);
          }
          uint64_t result = getTreePredicates(v191, v150, v123, a4, v149);
        }
        ++v147;
        v148 += 32;
      }
      while (v189 != v147);
    }
  }
LABEL_142:
  unint64_t v153 = v191;
  unint64_t v154 = v185;
  if (v185)
  {
    if (v185 != 1
      || (uint64_t v155 = *(void *)(v186 + 24),
          *(_UNKNOWN **)(*(void *)(*(void *)(v155 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      int v156 = 0;
      uint64_t v157 = 0;
      while (1)
      {
        uint64_t v160 = *(void *)(v186 + 32 * v157 + 24);
        uint64_t v161 = *(void **)(*(void *)(*(void *)(v160 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v156 |= v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if (v156)
        {
          v201.n128_u64[0] = v157 | 0x100000000;
          v196.n128_u64[0] = v144;
          v200.n128_u8[0] = v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
          uint64_t v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v143, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
        }
        else
        {
          v201.n128_u64[0] = v144;
          v196.n128_u32[0] = v157;
          uint64_t v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v143, 0, 0, &v201, (unsigned int *)&v196);
        }
        unint64_t v163 = v162;
        uint64_t v164 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*v143);
        uint64_t v165 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v143);
        uint64_t v166 = v165;
        uint64_t v168 = v153[1];
        unint64_t v167 = (unint64_t)v153[2];
        if ((unint64_t)v168 >= v167) {
          break;
        }
        *uint64_t v168 = v163;
        v168[1] = v164;
        uint64_t v158 = v168 + 3;
        v168[2] = v165;
        unsigned int v143 = (unsigned __int8 ***)v190;
        unint64_t v144 = v188;
LABEL_147:
        v153[1] = v158;
        v201.n128_u64[0] = v163;
        uint64_t v159 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v143, 0, 0, &v201);
        uint64_t result = getTreePredicates(v153, v160, v143, v187, v159);
        if (++v157 == v154) {
          return result;
        }
      }
      uint64_t v169 = *v153;
      unint64_t v170 = 0xAAAAAAAAAAAAAAABLL * (v168 - *v153);
      unint64_t v171 = v170 + 1;
      if (v170 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - (void)v169) >> 3);
      if (2 * v172 > v171) {
        unint64_t v171 = 2 * v172;
      }
      if (v172 >= 0x555555555555555) {
        unint64_t v173 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v173 = v171;
      }
      if (v173 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v174 = 24 * v173;
      v175 = (char *)operator new(24 * v173);
      unint64_t v176 = (unint64_t *)&v175[24 * v170];
      *unint64_t v176 = v163;
      v176[1] = v164;
      v176[2] = v166;
      if (v168 == v169)
      {
        unint64_t v144 = v188;
        v181 = &v175[v174];
        uint64_t v158 = v176 + 3;
        unint64_t v153 = v191;
        *v191 = v176;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v181;
        if (!v169) {
          goto LABEL_164;
        }
      }
      else
      {
        v177 = &v175[24 * v170];
        unint64_t v144 = v188;
        do
        {
          long long v178 = *(_OWORD *)(v168 - 3);
          v179 = v177 - 24;
          *((void *)v177 - 1) = *(v168 - 1);
          *(_OWORD *)(v177 - 24) = v178;
          v168 -= 3;
          v177 -= 24;
        }
        while (v168 != v169);
        v180 = &v175[v174];
        uint64_t v158 = v176 + 3;
        unint64_t v153 = v191;
        *v191 = (unint64_t *)v179;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v180;
        if (!v169) {
          goto LABEL_164;
        }
      }
      operator delete(v169);
LABEL_164:
      unsigned int v143 = (unsigned __int8 ***)v190;
      unint64_t v154 = v185;
      goto LABEL_147;
    }
    v201.n128_u64[0] = 0;
    v196.n128_u64[0] = v144;
    v200.n128_u8[0] = 1;
    v201.n128_u64[0] = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
    uint64_t v182 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v123, 0, 0, &v201);
    return getTreePredicates(v191, v155, v123, a4, v182);
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  uint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[74]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameQuestion]";
  unint64_t v14 = 96;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v18 = a4;
    unint64_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameAnswer]";
      unint64_t v24 = 94;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[52];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  unint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 23;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[72]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion]";
  unint64_t v14 = 102;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _DWORD *a4)
{
  int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v18 = a4;
    unint64_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UnsignedAnswer]";
      unint64_t v24 = 89;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UnsignedAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[56];
  int v23 = a2;
  unint64_t v24 = a3;
  int v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  unint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, 37 * v22, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

_DWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (_DWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v10 = (_DWORD *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v10 + 4;
  _DWORD *v10 = 26;
  unint64_t v10[2] = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, _DWORD *))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[70]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountQuestion]";
  unint64_t v14 = 95;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[76]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountQuestion]";
  unint64_t v14 = 94;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  unint64_t v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[78]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion]";
  unint64_t v14 = 101;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, void *a5)
{
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    unint64_t v24 = a5;
    unint64_t v25 = a1;
    unint64_t v22 = a3;
    int v23 = a4;
    unint64_t v21 = a2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      uint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributePosition]";
      unint64_t v30 = 92;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      unint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[28];
  uint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ((v7 >> 4) ^ (v7 >> 9) | ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32))
     + ~((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  uint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(void *)(a2 + 32) == *(void *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;

  *(void *)&double result = mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  {
    unint64_t v22 = a5;
    int v23 = a6;
    uint64_t v20 = a3;
    unint64_t v21 = a4;
    uint64_t v19 = a2;
    a2 = v19;
    a3 = v20;
    a4 = v21;
    a5 = v22;
    a6 = v23;
    if (v11)
    {
      long long v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandGroupPosition]";
      unint64_t v27 = 95;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = v27;
      }
      unint64_t v14 = &v26[v13];
      unint64_t v15 = v27 - v13;
      if (v27 - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = v27 - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a2 = v19;
      a3 = v20;
      a4 = v21;
      a5 = v22;
      a6 = v23;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id;
  v29[0] = a2;
  v29[1] = a3;
  unint64_t v8 = *a5;
  long long v26 = *a4;
  unint64_t v27 = v8;
  v28[0] = *a6;
  unsigned int v9 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v26, (uint64_t)&v27, v28);
  v24[0] = &v26;
  v24[1] = v29;
  unint64_t v25 = &v26;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v7, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v25, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v24);
}

unint64_t llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(void *a1, uint64_t a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  {
    unint64_t v13 = a1;
    uint64_t v9 = a2;
    a2 = v9;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v13;
      a2 = v9;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v19 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v16[0] = v4;
  unint64_t v14 = 0;
  unint64_t v5 = llvm::hash_value<unsigned int>(a2);
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v14, (void *)v16 + 1, (unint64_t)v17, v5);
  unint64_t v15 = v14;
  uint64_t v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v16, (uint64_t *)&v15, v6, (unint64_t)v17, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v16, v15, v7, (char *)v17);
}

unint64_t llvm::hash_value<unsigned int>(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 4))
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    uint64_t v1 = &unk_267770000;
    {
      uint64_t v8 = a1;
      uint64_t v1 = &unk_267770000;
      int v5 = v4;
      a1 = v8;
      if (v5)
      {
        unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v6 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v6;
        uint64_t v1 = (void *)&unk_267770000;
        a1 = v8;
      }
    }
    uint64_t v12 = v1[385];
    LOBYTE(v9[0]) = 1;
    *(_DWORD *)((char *)v9 + 1) = *(_DWORD *)a1;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, (char *)v9 + 5, (char *)v10);
  }
  else
  {
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
    }
    unint64_t v3 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * llvm::hashing::detail::get_execution_seed(void)::seed) ^ ((0x9DDFEA08EB382D69
                                                                                           * llvm::hashing::detail::get_execution_seed(void)::seed) >> 47));
    return 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  }
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(void *a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 1 - v8;
      uint64_t v31 = (char *)a1 + 1 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 1 - v8;
    uint64_t v31 = (char *)a1 + 1 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, &__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  unint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 24) != *(void *)*a1) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)v2 + 12);
  if (*(unsigned char *)(a2 + 36)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a2 + 36) != 0) == (v4 != 0)) {
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    }
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2)) {
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 48;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 48 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 48;

  *(void *)&double result = mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, unsigned int *a5)
{
  unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v24 = a5;
    uint64_t v25 = a1;
    unint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v21 = a2;
    unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      unint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandPosition]";
      unint64_t v30 = 90;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      uint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[34];
  unint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  unint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;

  *(void *)&double result = mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  {
    unint64_t v22 = a5;
    uint64_t v23 = a6;
    uint64_t v20 = a3;
    uint64_t v21 = a4;
    uint64_t v19 = a2;
    a2 = v19;
    a3 = v20;
    a4 = v21;
    a5 = v22;
    a6 = v23;
    if (v11)
    {
      uint64_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultGroupPosition]";
      unint64_t v27 = 94;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = v27;
      }
      unint64_t v14 = &v26[v13];
      unint64_t v15 = v27 - v13;
      if (v27 - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = v27 - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a2 = v19;
      a3 = v20;
      a4 = v21;
      a5 = v22;
      a6 = v23;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id;
  v29[0] = a2;
  v29[1] = a3;
  unint64_t v8 = *a5;
  uint64_t v26 = *a4;
  unint64_t v27 = v8;
  v28[0] = *a6;
  unsigned int v9 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v26, (uint64_t)&v27, v28);
  v24[0] = &v26;
  v24[1] = v29;
  uint64_t v25 = &v26;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v7, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v25, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v24);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  unint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 24) != *(void *)*a1) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)v2 + 12);
  if (*(unsigned char *)(a2 + 36)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a2 + 36) != 0) == (v4 != 0)) {
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    }
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2)) {
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 48;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 48 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 48;
  *(_DWORD *)(v9 + 16) = 5;
  *(void *)unint64_t v9 = &unk_26C3622F8;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(void *)(v9 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(v9 + 24) = result;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_26C3623F8;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultGroupPosition::~ResultGroupPosition(mlir::pdl_to_pdl_interp::ResultGroupPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, unsigned int *a5)
{
  unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v24 = a5;
    uint64_t v25 = a1;
    unint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v21 = a2;
    unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      unint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultPosition]";
      unint64_t v30 = 89;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      uint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unsigned int v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[40];
  unint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  unint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 4;
  *(void *)unint64_t v9 = &unk_26C362258;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_26C362358;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultPosition::~ResultPosition(mlir::pdl_to_pdl_interp::ResultPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>(uint64_t *a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v12 = a1;
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[80]);
  }
  int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeQuestion]";
  unint64_t v14 = 87;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a4;
    unint64_t v19 = a1;
    uint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeAnswer]";
      unint64_t v24 = 85;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[54];
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 25;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(unsigned char *a1, uint64_t **a2)
{
  if (a1[8]) {
    return a1;
  }
  if (!*(void *)a1
    || *(void *)(*(void *)(*(void *)a1 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id)
  {
    return a1;
  }
  uint64_t v32 = *(void *)a1;
  unsigned int v6 = *a2;
  BOOL v5 = a2[1];
  uint64_t v7 = (uint64_t **)a2[2];
  uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v7);
  uint64_t v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v7);
  uint64_t v10 = v9;
  unint64_t v12 = (uint64_t *)v5[1];
  unint64_t v11 = v5[2];
  if ((unint64_t)v12 < v11)
  {
    *unint64_t v12 = *v6;
    v12[1] = IsNotNull;
    uint64_t v12[2] = v9;
    uint64_t v13 = v12 + 3;
    goto LABEL_20;
  }
  unint64_t v14 = (uint64_t *)*v5;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v5) >> 3);
  unint64_t v16 = v15 + 1;
  if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v19 = 24 * v18;
  uint64_t v20 = (char *)operator new(24 * v18);
  uint64_t v21 = &v20[24 * v15];
  uint64_t v22 = &v20[v19];
  *(void *)uint64_t v21 = *v6;
  *((void *)v21 + 1) = IsNotNull;
  *((void *)v21 + 2) = v10;
  uint64_t v13 = v21 + 24;
  if (v12 == v14)
  {
    uint64_t *v5 = (uint64_t)v21;
    v5[1] = (uint64_t)v13;
    v5[2] = (uint64_t)v22;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    long long v23 = *(_OWORD *)(v12 - 3);
    unint64_t v24 = v21 - 24;
    *((void *)v21 - 1) = *(v12 - 1);
    *(_OWORD *)(v21 - 24) = v23;
    v12 -= 3;
    v21 -= 24;
  }
  while (v12 != v14);
  uint64_t *v5 = (uint64_t)v24;
  v5[1] = (uint64_t)v13;
  v5[2] = (uint64_t)v22;
  if (v14) {
LABEL_19:
  }
    operator delete(v14);
LABEL_20:
  v5[1] = (uint64_t)v13;
  uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    uint64_t v26 = ValueType;
    unint64_t v27 = (unsigned __int8 ***)a2[2];
    uint64_t v28 = a2[3];
    unint64_t v29 = a2[1];
    uint64_t v33 = **a2;
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(unsigned char *a1, uint64_t **a2)
{
  if (a1[8]) {
    return a1;
  }
  if (!*(void *)a1
    || *(void *)(*(void *)(*(void *)a1 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id)
  {
    return a1;
  }
  uint64_t v32 = *(void *)a1;
  BOOL v5 = *a2;
  if (*(unsigned char *)(**a2 + 36))
  {
    uint64_t v7 = (char **)a2[1];
    unsigned int v6 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v6);
    uint64_t v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v6);
    uint64_t v10 = v9;
    unint64_t v12 = v7[1];
    unint64_t v11 = (unint64_t)v7[2];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = *v7;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *v7) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = 24 * v18;
      uint64_t v20 = (char *)operator new(24 * v18);
      uint64_t v21 = &v20[24 * v15];
      uint64_t v22 = &v20[v19];
      *(void *)uint64_t v21 = *v5;
      *((void *)v21 + 1) = IsNotNull;
      *((void *)v21 + 2) = v10;
      uint64_t v13 = v21 + 24;
      if (v12 == v14)
      {
        *uint64_t v7 = v21;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14) {
          goto LABEL_21;
        }
      }
      else
      {
        do
        {
          long long v23 = *(_OWORD *)(v12 - 24);
          unint64_t v24 = v21 - 24;
          *((void *)v21 - 1) = *((void *)v12 - 1);
          *(_OWORD *)(v21 - 24) = v23;
          v12 -= 24;
          v21 -= 24;
        }
        while (v12 != v14);
        *uint64_t v7 = v24;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14) {
          goto LABEL_21;
        }
      }
      operator delete(v14);
    }
    else
    {
      *(void *)unint64_t v12 = *v5;
      *((void *)v12 + 1) = IsNotNull;
      *((void *)v12 + 2) = v9;
      uint64_t v13 = v12 + 24;
    }
LABEL_21:
    v7[1] = v13;
  }
  uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    uint64_t v26 = ValueType;
    unint64_t v27 = (unsigned __int8 ***)a2[2];
    uint64_t v28 = a2[3];
    unint64_t v29 = a2[1];
    uint64_t v33 = **a2;
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(unsigned char *a1, uint64_t *a2)
{
  if (!a1[8]
    && *(void *)a1
    && *(void *)(*(void *)(*(void *)a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
  {
    uint64_t v74 = *(void *)a1;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v74);
    uint64_t v7 = *a2;
    unsigned int v6 = (void *)a2[1];
    int v8 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    uint64_t v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    uint64_t v11 = v10;
    uint64_t v13 = *(void **)(v7 + 8);
    unint64_t v12 = *(void *)(v7 + 16);
    unsigned int v72 = Index;
    if ((unint64_t)v13 < v12)
    {
      *uint64_t v13 = *v6;
      v13[1] = IsNotNull;
      unint64_t v13[2] = v10;
      unint64_t v14 = v13 + 3;
      goto LABEL_21;
    }
    unint64_t v15 = *(void **)v7;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)v7) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_57;
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_58;
    }
    uint64_t v20 = 24 * v19;
    uint64_t v21 = (char *)operator new(24 * v19);
    uint64_t v22 = &v21[24 * v16];
    long long v23 = &v21[v20];
    *(void *)uint64_t v22 = *v6;
    *((void *)v22 + 1) = IsNotNull;
    *((void *)v22 + 2) = v11;
    unint64_t v14 = v22 + 24;
    if (v13 == v15)
    {
      unsigned int Index = v72;
      *(void *)uint64_t v7 = v22;
      *(void *)(v7 + 8) = v14;
      *(void *)(v7 + 16) = v23;
      if (v15) {
LABEL_20:
      }
        operator delete(v15);
    }
    else
    {
      unsigned int Index = v72;
      do
      {
        long long v24 = *(_OWORD *)(v13 - 3);
        uint64_t v25 = v22 - 24;
        *((void *)v22 - 1) = *(v13 - 1);
        *(_OWORD *)(v22 - 24) = v24;
        v13 -= 3;
        v22 -= 24;
      }
      while (v13 != v15);
      *(void *)uint64_t v7 = v25;
      *(void *)(v7 + 8) = v14;
      *(void *)(v7 + 16) = v23;
      if (v15) {
        goto LABEL_20;
      }
    }
LABEL_21:
    *(void *)(v7 + 8) = v14;
    uint64_t v26 = *(unsigned __int8 ***)a2[2];
    uint64_t v76 = *(void *)a2[1];
    unsigned int v75 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v76) + 1;
    uint64_t v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v76, &v75);
    uint64_t v28 = *a2;
    unint64_t v29 = (uint64_t **)a2[2];
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    uint64_t v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    uint64_t v32 = v31;
    unint64_t v34 = *(uint64_t **)(v28 + 8);
    unint64_t v33 = *(void *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *unint64_t v34 = v27;
      v34[1] = v30;
      uint64_t v35 = v34 + 3;
      v34[2] = v31;
      goto LABEL_35;
    }
    uint64_t v36 = *(uint64_t **)v28;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(void *)v28) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_57;
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v36) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_58;
    }
    uint64_t v41 = v27;
    uint64_t v42 = 24 * v40;
    unint64_t v43 = (char *)operator new(24 * v40);
    unint64_t v44 = (uint64_t *)&v43[24 * v37];
    uint64_t v45 = &v43[v42];
    uint64_t v27 = v41;
    *unint64_t v44 = v41;
    v44[1] = v30;
    v44[2] = v32;
    uint64_t v35 = v44 + 3;
    if (v34 == v36)
    {
      unsigned int Index = v72;
      *(void *)uint64_t v28 = v44;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
LABEL_34:
      }
        operator delete(v36);
    }
    else
    {
      unsigned int Index = v72;
      do
      {
        long long v46 = *(_OWORD *)(v34 - 3);
        uint64_t v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(void *)uint64_t v28 = v47;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
        goto LABEL_34;
      }
    }
LABEL_35:
    *(void *)(v28 + 8) = v35;
    uint64_t v48 = (unsigned __int8 ***)a2[2];
    uint64_t v76 = v27;
    unsigned int v75 = Index;
    uint64_t v49 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v48, 0, 0, &v76, &v75);
    unint64_t v50 = (unsigned __int8 ***)a2[2];
    uint64_t v51 = *a2;
    uint64_t v76 = *(void *)a2[1];
    uint64_t v52 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v50, 0, 0, &v76);
    uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v50);
    uint64_t v54 = v53;
    unint64_t v56 = *(uint64_t **)(v51 + 8);
    unint64_t v55 = *(void *)(v51 + 16);
    if ((unint64_t)v56 < v55)
    {
      *unint64_t v56 = v49;
      v56[1] = v52;
      unint64_t v57 = v56 + 3;
      v56[2] = v53;
      goto LABEL_49;
    }
    unint64_t v58 = *(uint64_t **)v51;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v56 - *(void *)v51) >> 3);
    unint64_t v60 = v59 + 1;
    if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v73 = v27;
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v58) >> 3);
      if (2 * v61 > v60) {
        unint64_t v60 = 2 * v61;
      }
      if (v61 >= 0x555555555555555) {
        unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v63 = 24 * v62;
        uint64_t v64 = (char *)operator new(24 * v62);
        uint64_t v65 = (uint64_t *)&v64[24 * v59];
        unint64_t v66 = &v64[v63];
        *uint64_t v65 = v49;
        v65[1] = v52;
        v65[2] = v54;
        unint64_t v57 = v65 + 3;
        if (v56 == v58)
        {
          uint64_t v27 = v73;
          *(void *)uint64_t v51 = v65;
          *(void *)(v51 + 8) = v57;
          *(void *)(v51 + 16) = v66;
          if (!v58) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v27 = v73;
          do
          {
            long long v67 = *(_OWORD *)(v56 - 3);
            unint64_t v68 = v65 - 3;
            *(v65 - 1) = *(v56 - 1);
            *(_OWORD *)(v65 - 3) = v67;
            v56 -= 3;
            v65 -= 3;
          }
          while (v56 != v58);
          *(void *)uint64_t v51 = v68;
          *(void *)(v51 + 8) = v57;
          *(void *)(v51 + 16) = v66;
          if (!v58) {
            goto LABEL_49;
          }
        }
        operator delete(v58);
LABEL_49:
        *(void *)(v51 + 8) = v57;
        uint64_t v69 = *a2;
        uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v74);
        getTreePredicates(v69, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_58:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_57:
    abort();
  }
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(unsigned char *a1, uint64_t *a2)
{
  if (!a1[8]
    && *(void *)a1
    && *(void *)(*(void *)(*(void *)a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
  {
    uint64_t v76 = *(void *)a1;
    uint64_t Index = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&v76);
    if ((Index & 0xFF00000000) == 0) {
      goto LABEL_23;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = (void *)a2[1];
    int v8 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    uint64_t v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    uint64_t v11 = v10;
    uint64_t v13 = *(void **)(v6 + 8);
    unint64_t v12 = *(void *)(v6 + 16);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v73 = Index;
      unint64_t v15 = *(void **)v6;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)v6) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_59;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_60;
      }
      uint64_t v20 = 24 * v19;
      uint64_t v21 = (char *)operator new(24 * v19);
      uint64_t v22 = &v21[24 * v16];
      long long v23 = &v21[v20];
      *(void *)uint64_t v22 = *v7;
      *((void *)v22 + 1) = IsNotNull;
      *((void *)v22 + 2) = v11;
      unint64_t v14 = v22 + 24;
      if (v13 == v15)
      {
        uint64_t Index = v73;
        *(void *)uint64_t v6 = v22;
        *(void *)(v6 + 8) = v14;
        *(void *)(v6 + 16) = v23;
        if (!v15) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t Index = v73;
        do
        {
          long long v24 = *(_OWORD *)(v13 - 3);
          uint64_t v25 = v22 - 24;
          *((void *)v22 - 1) = *(v13 - 1);
          *(_OWORD *)(v22 - 24) = v24;
          v13 -= 3;
          v22 -= 24;
        }
        while (v13 != v15);
        *(void *)uint64_t v6 = v25;
        *(void *)(v6 + 8) = v14;
        *(void *)(v6 + 16) = v23;
        if (!v15) {
          goto LABEL_22;
        }
      }
      operator delete(v15);
    }
    else
    {
      *uint64_t v13 = *v7;
      v13[1] = IsNotNull;
      unint64_t v13[2] = v10;
      unint64_t v14 = v13 + 3;
    }
LABEL_22:
    *(void *)(v6 + 8) = v14;
LABEL_23:
    uint64_t v26 = *(unsigned __int8 ***)a2[2];
    uint64_t v79 = *(void *)a2[1];
    LODWORD(v78) = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v79) + 1;
    uint64_t v27 = (const char *)mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v79, (unsigned int *)&v78);
    uint64_t v28 = *a2;
    unint64_t v29 = (uint64_t **)a2[2];
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    uint64_t v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    uint64_t v32 = v31;
    unint64_t v34 = *(const char ***)(v28 + 8);
    unint64_t v33 = *(void *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *unint64_t v34 = v27;
      v34[1] = (const char *)v30;
      uint64_t v35 = v34 + 3;
      v34[2] = (const char *)v31;
      goto LABEL_37;
    }
    uint64_t v74 = Index;
    uint64_t v36 = *(const char ***)v28;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(void *)v28) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_59;
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v36) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_60;
    }
    uint64_t v41 = v27;
    uint64_t v42 = 24 * v40;
    unint64_t v43 = (char *)operator new(24 * v40);
    unint64_t v44 = (const char **)&v43[24 * v37];
    uint64_t v45 = &v43[v42];
    uint64_t v27 = v41;
    *unint64_t v44 = v41;
    v44[1] = (const char *)v30;
    v44[2] = (const char *)v32;
    uint64_t v35 = v44 + 3;
    if (v34 == v36)
    {
      uint64_t Index = v74;
      *(void *)uint64_t v28 = v44;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
LABEL_36:
      }
        operator delete(v36);
    }
    else
    {
      uint64_t Index = v74;
      do
      {
        long long v46 = *(_OWORD *)(v34 - 3);
        uint64_t v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(void *)uint64_t v28 = v47;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
        goto LABEL_36;
      }
    }
LABEL_37:
    *(void *)(v28 + 8) = v35;
    uint64_t v48 = (unsigned __int8 ***)a2[2];
    char v49 = *(unsigned char *)a2[3];
    unint64_t v78 = v27;
    uint64_t v79 = Index;
    char v77 = v49;
    uint64_t v50 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v48, 0, 0, &v78, (unint64_t *)&v79, &v77);
    uint64_t v51 = (unsigned __int8 ***)a2[2];
    uint64_t v52 = *a2;
    uint64_t v79 = *(void *)a2[1];
    uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v51, 0, 0, &v79);
    uint64_t v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v51);
    uint64_t v55 = v54;
    unint64_t v57 = *(uint64_t **)(v52 + 8);
    unint64_t v56 = *(void *)(v52 + 16);
    if ((unint64_t)v57 < v56)
    {
      *unint64_t v57 = v50;
      v57[1] = v53;
      unint64_t v58 = v57 + 3;
      v57[2] = v54;
      goto LABEL_51;
    }
    unint64_t v59 = *(uint64_t **)v52;
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v57 - *(void *)v52) >> 3);
    unint64_t v61 = v60 + 1;
    if (v60 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unsigned int v75 = v27;
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v59) >> 3);
      if (2 * v62 > v61) {
        unint64_t v61 = 2 * v62;
      }
      if (v62 >= 0x555555555555555) {
        unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v64 = 24 * v63;
        uint64_t v65 = (char *)operator new(24 * v63);
        unint64_t v66 = (uint64_t *)&v65[24 * v60];
        long long v67 = &v65[v64];
        *unint64_t v66 = v50;
        v66[1] = v53;
        v66[2] = v55;
        unint64_t v58 = v66 + 3;
        if (v57 == v59)
        {
          uint64_t v27 = v75;
          *(void *)uint64_t v52 = v66;
          *(void *)(v52 + 8) = v58;
          *(void *)(v52 + 16) = v67;
          if (!v59) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v27 = v75;
          do
          {
            long long v68 = *(_OWORD *)(v57 - 3);
            uint64_t v69 = v66 - 3;
            *(v66 - 1) = *(v57 - 1);
            *(_OWORD *)(v66 - 3) = v68;
            v57 -= 3;
            v66 -= 3;
          }
          while (v57 != v59);
          *(void *)uint64_t v52 = v69;
          *(void *)(v52 + 8) = v58;
          *(void *)(v52 + 16) = v67;
          if (!v59) {
            goto LABEL_51;
          }
        }
        operator delete(v59);
LABEL_51:
        *(void *)(v52 + 8) = v58;
        uint64_t v70 = *a2;
        uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v76);
        getTreePredicates(v70, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_60:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_59:
    abort();
  }
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, void *a4, unsigned int *a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v19 = a3;
  uint64_t v18 = a2;
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  a2 = v18;
  a3 = v19;
  uint64_t v6 = a4;
  a5 = v21;
  int v10 = v9;
  a1 = v22;
  if (!v10) {
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[38], v6, a5);
  }
  long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  unint64_t v24 = 92;
  unint64_t v11 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
  if (v24 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v24;
  }
  uint64_t v13 = &v23[v12];
  unint64_t v14 = v24 - v12;
  if (v24 - v12 >= 0x12) {
    uint64_t v15 = 18;
  }
  else {
    uint64_t v15 = v24 - v12;
  }
  unint64_t v16 = v14 - v15;
  if (v16 >= v16 - 1) {
    uint64_t v17 = v16 - 1;
  }
  else {
    uint64_t v17 = v16;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v22, v18, v19, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v21);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int *a6)
{
  uint64_t v6 = a4;
  uint64_t v22 = *MEMORY[0x263EF8340];
  v19[0] = a2;
  v19[1] = a3;
  uint64_t v7 = *a6;
  *(void *)&long long v18 = *a5;
  *((void *)&v18 + 1) = v7;
  LODWORD(v21) = 0;
  uint64_t v20 = 0;
  int v8 = &unk_267770000;
  {
    unint64_t v16 = a1;
    int v8 = &unk_267770000;
    int v13 = v12;
    uint64_t v6 = a4;
    a1 = v16;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      int v8 = (void *)&unk_267770000;
      uint64_t v6 = a4;
      a1 = v16;
    }
  }
  uint64_t v9 = __ROR8__(*(void *)((char *)&v18 + 4) + 12, 12);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * (v9 ^ ((0x9DDFEA08EB382D69 * (v8[385] ^ (unint64_t)v18 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                       * (v8[385] ^ v18 ^ v9)));
  uint64_t v17 = &v18;
  uint64_t v20 = &v18;
  uint64_t v21 = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v10 >> 47) ^ v10)) ^ DWORD1(v18), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    uint64_t v6 = &unk_267770000;
    {
      long long v23 = a3;
      uint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      uint64_t v6 = &unk_267770000;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        uint64_t v6 = (void *)&unk_267770000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (v6[385] + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    unsigned int v10 = v3 - 1;
    uint64_t v11 = v9 & (v3 - 1);
    int v12 = (void *)(v4 + 32 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        int v18 = v11 + v16++;
        uint64_t v11 = v18 & v10;
        int v12 = (void *)(v4 + 32 * v11);
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        int v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    unsigned int v10 = (void *)(32 * v3);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v10 + (void)v4);
    llvm::deallocate_buffer(v4, v10);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = (v11 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v12)
    {
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 + 1) & 0xFFFFFFFFFFFFFFELL;
      uint64_t v15 = &result[4 * v14];
      int v16 = result + 4;
      uint64_t v17 = v14;
      do
      {
        *(v16 - 4) = -4096;
        *int v16 = -4096;
        v16 += 8;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14) {
        return result;
      }
    }
    else
    {
      uint64_t v15 = result;
    }
    int v18 = &result[4 * v11];
    do
    {
      void *v15 = -4096;
      v15 += 4;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)result;
    uint64_t v7 = (v5 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v7)
    {
      unsigned int v10 = *(void **)result;
LABEL_8:
      uint64_t v13 = (void *)(v6 + 32 * v5);
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v13);
      goto LABEL_12;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (v7 + 1) & 0xFFFFFFFFFFFFFFELL;
    unsigned int v10 = (void *)(v6 + 32 * v9);
    uint64_t v11 = (void *)(v6 + 32);
    uint64_t v12 = v9;
    do
    {
      *(v11 - 4) = -4096;
      void *v11 = -4096;
      v11 += 8;
      v12 -= 2;
    }
    while (v12);
    if (v8 != v9) {
      goto LABEL_8;
    }
  }
LABEL_12:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v17 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)result, (unint64_t *)a2, &v17);
      uint64_t v14 = v17;
      unint64_t v15 = *(void *)a2;
      *(_DWORD *)(v17 + 24) = 0;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = v15;
      *(void *)(v14 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      LODWORD(v15) = *(_DWORD *)(v14 + 20);
      *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = v15;
      uint64_t v16 = *(unsigned int *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v16;
      ++*(_DWORD *)(v4 + 8);
      llvm::deallocate_buffer(0, (void *)(24 * v16));
    }
    a2 += 32;
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 9;
  *(void *)unint64_t v9 = &unk_26C362238;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_26C362338;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::UsersPosition::~UsersPosition(mlir::pdl_to_pdl_interp::UsersPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);

  JUMPOUT(0x21667D3C0);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 10;
  *(void *)unint64_t v9 = &unk_26C362278;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_26C362378;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ForEachPosition::~ForEachPosition(mlir::pdl_to_pdl_interp::ForEachPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  BOOL v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    int v18 = a4;
    int v19 = a1;
    uint64_t v16 = a2;
    unint64_t v17 = a3;
    BOOL v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
      unint64_t v24 = 99;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      unint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      BOOL v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[30];
  long long v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)7>::construct<mlir::Attribute>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)7>::construct<mlir::Attribute>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 7;
  *(void *)(result + 24) = *a2;
  *(void *)unint64_t result = &unk_26C362458;
  return result;
}

void mlir::pdl_to_pdl_interp::AttributeLiteralPosition::~AttributeLiteralPosition(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, long long *a4)
{
  {
    uint64_t v18 = a3;
    int v19 = a4;
    uint64_t v17 = a2;
    a2 = v17;
    a3 = v18;
    a4 = v19;
    if (v9)
    {
      *(void *)&long long v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
      *((void *)&v22 + 1) = 93;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v22 + 1) >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = *((void *)&v22 + 1);
      }
      uint64_t v12 = v22 + v11;
      unint64_t v13 = *((void *)&v22 + 1) - v11;
      if (*((void *)&v22 + 1) - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = *((void *)&v22 + 1) - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v12 + v14, v16);
      a2 = v17;
      a3 = v18;
      a4 = v19;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id;
  v25[0] = a2;
  v25[1] = a3;
  long long v6 = a4[1];
  long long v22 = *a4;
  long long v23 = v6;
  uint64_t v24 = *((void *)a4 + 4);
  unsigned int v7 = llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>((uint64_t)&v22, (uint64_t)&v23, (char *)&v24);
  v20[0] = &v22;
  v20[1] = v25;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

unint64_t llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    uint64_t v9 = a1;
    a1 = v9;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      a1 = v9;
    }
  }
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = llvm::hash_value(*(void **)a1, *(void *)(a1 + 8));
  unint64_t v12 = 0;
  unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8));
  long long v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, v5);
  unint64_t v13 = v12;
  unsigned int v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v14, (uint64_t *)&v13, v6, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v7, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(void *)(a2 + 16);
  if (v3 == *(void *)(*a1 + 8)
    && (!v3 || !memcmp(*(const void **)(a2 + 8), *(const void **)v2, v3))
    && (uint64_t v5 = *(void *)(a2 + 32), v5 == *(void *)(v2 + 24))
    && !memcmp(*(const void **)(a2 + 24), *(const void **)(v2 + 16), 8 * v5))
  {
    return *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(v2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, size_t a2)
{
  long long v3 = **a1;
  long long v4 = (*a1)[1];
  uint64_t v9 = *((void *)*a1 + 4);
  v8[0] = v3;
  v8[1] = v4;
  unint64_t v5 = mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(a2, (uint64_t *)v8);
  long long v6 = a1[1];
  if (*(void *)v6) {
    (*(void (**)(void, unint64_t))v6)(*((void *)v6 + 1), v5);
  }
  return v5;
}

unint64_t mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(size_t __sz, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
    uint64_t v7 = v6;
    if (v4 < 8)
    {
      uint64_t v8 = (unsigned char *)v6;
      uint64_t v9 = (char *)v5;
      goto LABEL_18;
    }
    uint64_t v8 = (unsigned char *)v6;
    uint64_t v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) < 0x20) {
      goto LABEL_18;
    }
    if (v4 >= 0x20)
    {
      unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v13 = (long long *)(v5 + 16);
      uint64_t v14 = (_OWORD *)(v6 + 16);
      unint64_t v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        _OWORD *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v10)
      {
LABEL_19:
        *(unsigned char *)(v6 + v4) = 0;
        uint64_t v11 = a2[3];
        if (v11) {
          goto LABEL_20;
        }
LABEL_7:
        uint64_t v12 = 0;
        goto LABEL_28;
      }
      if ((v4 & 0x18) == 0)
      {
        uint64_t v9 = (char *)(v5 + v10);
        uint64_t v8 = (unsigned char *)(v6 + v10);
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v8 = (unsigned char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v17 = (uint64_t *)(v5 + v10);
    uint64_t v18 = (void *)(v6 + v10);
    unint64_t v19 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v20 = *v17++;
      *v18++ = v20;
      v19 += 8;
    }
    while (v19);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_19;
    }
    do
    {
LABEL_18:
      char v21 = *v9++;
      *v8++ = v21;
    }
    while (v9 != (char *)(v5 + v4));
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  uint64_t v11 = a2[3];
  if (!v11) {
    goto LABEL_7;
  }
LABEL_20:
  uint64_t v22 = a2[2];
  uint64_t v23 = 8 * v11;
  uint64_t v24 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v11, 3);
  uint64_t v12 = v24;
  if ((unint64_t)(8 * v11 - 8) < 0x18)
  {
    unint64_t v25 = (void *)v24;
    uint64_t v26 = (uint64_t *)v22;
  }
  else
  {
    unint64_t v25 = (void *)v24;
    uint64_t v26 = (uint64_t *)v22;
    if ((unint64_t)(v24 - v22) >= 0x20)
    {
      unint64_t v27 = ((unint64_t)(v23 - 8) >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v25 = (void *)(v24 + v28);
      uint64_t v26 = (uint64_t *)(v22 + v28);
      unint64_t v29 = (long long *)(v22 + 16);
      uint64_t v30 = (_OWORD *)(v24 + 16);
      uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        _OWORD *v30 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
    }
  }
  do
  {
    uint64_t v33 = *v26++;
    *v25++ = v33;
  }
  while (v26 != (uint64_t *)(v22 + v23));
LABEL_28:
  char v34 = *((unsigned char *)a2 + 32);
  *(void *)(__sz + 80) += 48;
  if (*(void *)__sz) {
    BOOL v35 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 48 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v35 = 1;
  }
  if (v35)
  {
    unsigned int v36 = *(_DWORD *)(__sz + 24) >> 7;
    if (v36 >= 0x1E) {
      LOBYTE(v36) = 30;
    }
    uint64_t v37 = 4096 << v36;
    buffer = (char *)llvm::allocate_buffer(4096 << v36, (std::align_val_t)8uLL);
    uint64_t v39 = *(unsigned int *)(__sz + 24);
    if (v39 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v39) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v37];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)__sz = result + 48;
  *(_DWORD *)unint64_t result = 20;
  *(void *)(result + 8) = v7;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v12;
  *(void *)(result + 32) = v11;
  *(unsigned char *)(result + 40) = v34;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v18 = a4;
    unint64_t v19 = a1;
    long long v16 = a2;
    unint64_t v17 = a3;
    unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
      unint64_t v24 = 94;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      unint64_t v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[46];
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  char v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)8>::construct<mlir::Attribute>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)8>::construct<mlir::Attribute>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 8;
  *(void *)(result + 24) = *a2;
  *(void *)unint64_t result = &unk_26C362418;
  return result;
}

void mlir::pdl_to_pdl_interp::TypeLiteralPosition::~TypeLiteralPosition(mlir::pdl_to_pdl_interp::TypeLiteralPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  unint64_t v10 = (void *)(*(void *)a1 + 16 * v9);
  uint64_t v11 = *v10;
  if (v6 == *v10) {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v11 != -4096)
  {
    if (v18) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v11 == -8192;
    }
    if (v20) {
      uint64_t v18 = v10;
    }
    int v21 = v9 + v19++;
    uint64_t v9 = v21 & (v7 - 1);
    unint64_t v10 = (void *)(v8 + 16 * v9);
    uint64_t v11 = *v10;
    if (v6 == *v10) {
      return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
    }
  }
  uint64_t v22 = (uint64_t)(v18 ? v18 : v10);
  int v23 = *(_DWORD *)(a1 + 8);
  if (4 * v23 + 4 < 3 * v7)
  {
    if (v7 + ~v23 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v7);
  int v24 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v25 = v24 & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v22 = *(void *)a1 + 16 * v25;
  uint64_t v26 = *(void *)v22;
  if (v6 == *(void *)v22)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v6 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v27 = 0;
  int v28 = 1;
  while (v26 != -4096)
  {
    if (v27) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = v26 == -8192;
    }
    if (v29) {
      uint64_t v27 = v22;
    }
    unsigned int v30 = v25 + v28++;
    unsigned int v25 = v30 & v24;
    uint64_t v22 = *(void *)a1 + 16 * (v30 & v24);
    uint64_t v26 = *(void *)v22;
    if (v6 == *(void *)v22) {
      goto LABEL_26;
    }
  }
  if (v27) {
    uint64_t v22 = v27;
  }
LABEL_6:
  uint64_t v13 = *(void *)v22;
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(void *)uint64_t v22 = v6;
  *(_DWORD *)(v22 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(v22 + 8) = v14;
  uint64_t v31 = a3;
  long long v32 = a2;
  if (v14 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorTemplateBase<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<mlir::pdl_to_pdl_interp::Qualifier *&&>,std::tuple<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>&&>>(a1 + 24, (uint64_t)&std::piecewise_construct, &v32, &v31);
    unsigned int v17 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 24) + 16 * v14);
    void *v15 = *a2;
    uint64_t v16 = *a3;
    *a3 = 0;
    v15[1] = v16;
    unsigned int v17 = v14 + 1;
    *(_DWORD *)(a1 + 32) = v14 + 1;
  }
  return *(void *)(a1 + 24) + 16 * v17 - 16;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<mlir::pdl_to_pdl_interp::Qualifier *&&>,std::tuple<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>&&>>(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4)
{
  unint64_t v32 = 0;
  unsigned int v7 = (char *)(a1 + 16);
  uint64_t v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v32);
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v10 = 16 * v9;
  uint64_t v11 = &v8[16 * v9];
  unint64_t v12 = *a4;
  *(void *)uint64_t v11 = **a3;
  uint64_t v13 = *v12;
  *unint64_t v12 = 0;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = *(char **)a1;
  if (!v9) {
    goto LABEL_19;
  }
  unint64_t v15 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v15 < 7 || (v8 < &v14[v10] ? (BOOL v16 = v14 >= &v8[v10]) : (BOOL v16 = 1), !v16))
  {
    int v19 = v8;
    BOOL v20 = *(char **)a1;
    do
    {
LABEL_13:
      *(void *)int v19 = *(void *)v20;
      uint64_t v26 = *((void *)v20 + 1);
      *((void *)v20 + 1) = 0;
      *((void *)v19 + 1) = v26;
      v20 += 16;
      v19 += 16;
    }
    while (v20 != &v14[v10]);
    goto LABEL_14;
  }
  unint64_t v17 = v15 + 1;
  uint64_t v18 = (v15 + 1) & 0x1FFFFFFFFFFFFFFELL;
  int v19 = &v8[16 * v18];
  BOOL v20 = &v14[16 * v18];
  uint64_t v21 = v18;
  uint64_t v22 = v8;
  int v23 = *(char **)a1;
  do
  {
    long long v24 = *(_OWORD *)v23;
    long long v25 = *((_OWORD *)v23 + 1);
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 3) = 0;
    *(_OWORD *)uint64_t v22 = v24;
    *((_OWORD *)v22 + 1) = v25;
    v22 += 32;
    v23 += 32;
    v21 -= 2;
  }
  while (v21);
  if (v17 != v18) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v27 = *(void *)a1 - 8;
  do
  {
    uint64_t v28 = *(void *)(v27 + v10);
    *(void *)(v27 + v10) = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    v10 -= 16;
  }
  while (v10);
  uint64_t v14 = *(char **)a1;
LABEL_19:
  int v29 = v32;
  if (v14 != v7) {
    free(v14);
  }
  *(void *)a1 = v8;
  unsigned int v30 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v30;
  *(_DWORD *)(a1 + 12) = v29;
  return (uint64_t)&v8[16 * v30 - 16];
}

void mlir::pdl_to_pdl_interp::ExitNode::~ExitNode(mlir::pdl_to_pdl_interp::ExitNode *this)
{
  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C3621D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<anonymous namespace'::OrderedPredicate>>,anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<anonymous namespace'::OrderedPredicate>>::LookupBucketFor<anonymous namespace'::OrderedPredicate>(uint64_t result, int a2, void *a3, void *a4)
{
  if (a2)
  {
    {
      uint64_t v22 = result;
      int v21 = a2;
      BOOL v20 = a3;
      a3 = v20;
      a2 = v21;
      int v18 = v17;
      unint64_t result = v22;
      if (v18)
      {
        unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v19 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        a3 = v20;
        a2 = v21;
        unint64_t result = v22;
      }
    }
    uint64_t v4 = a3[1];
    uint64_t v5 = __ROR8__(v4 + 16, 16);
    unsigned int v6 = (a2 - 1) & ((-348639895
                    * ((((0x9DDFEA08EB382D69
                                      * (v5 ^ ((0x9DDFEA08EB382D69
                                              * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)))) >> 32) >> 15) ^ (-348639895 * (v5 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_DWORD *)a3 ^ v5)))))) ^ v4);
    unsigned int v7 = (void *)(result + 56 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*a3 != *v7 || v4 != v9)
    {
      uint64_t v11 = 0;
      int v12 = 1;
      do
      {
        if (v8 == -4096 && v9 == -4096) {
          break;
        }
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v9 == -8192;
        }
        if (v13 && v8 == -8192) {
          uint64_t v11 = v7;
        }
        unsigned int v15 = v6 + v12++;
        unsigned int v6 = v15 & (a2 - 1);
        unsigned int v7 = (void *)(result + 56 * v6);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
      }
      while (*a3 != *v7 || v4 != v9);
    }
    llvm::deallocate_buffer(0, 0);
  }
  *a4 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **,false>(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  v441 = (uint64_t **)result;
LABEL_2:
  unsigned int v7 = a2;
  v425 = a2 - 1;
  j = v441;
  while (1)
  {
    uint64_t v9 = j;
    uint64_t v10 = (char *)v7 - (char *)j;
    uint64_t v11 = v7 - j;
    v441 = v9;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v202 = (uint64_t)*(a2 - 1);
          __int16 v203 = *v9;
          uint64_t v204 = **v9;
          unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v204);
          unsigned int v206 = *(_DWORD *)(v204 + 16);
          unsigned int v207 = *(_DWORD *)v203[1];
          unsigned int v209 = *(_DWORD *)(v202 + 16);
          unsigned int v208 = *(_DWORD *)(v202 + 20);
          unsigned int v210 = *((_DWORD *)v203 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v202);
          unsigned int v211 = *((_DWORD *)v203 + 4);
          if (v211 < v209
            || v209 >= v211
            && ((unsigned int v212 = *((_DWORD *)v203 + 5), v212 < v208)
             || v208 >= v212
             && (result < OperationDepth
              || OperationDepth >= result
              && ((unsigned int v402 = *(_DWORD *)(*(void *)v202 + 16), v402 < v206)
               || v206 >= v402
               && ((unsigned int v403 = **(_DWORD **)(v202 + 8), v403 < v207)
                || (v207 >= v403 ? (BOOL v404 = *(_DWORD *)(v202 + 24) >= v210) : (BOOL v404 = 1), !v404))))))
          {
            v213 = *v9;
            *uint64_t v9 = *(a2 - 1);
            *(a2 - 1) = v213;
          }
          break;
        case 3:
          break;
        case 4:
          break;
        case 5:
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        unint64_t v405 = v10;
        int64_t v250 = (unint64_t)(v11 - 2) >> 1;
        int64_t v251 = v250;
        uint64_t v422 = v11;
        do
        {
          int64_t v253 = v251;
          if (v250 >= v251)
          {
            uint64_t v254 = (2 * v251) | 1;
            v255 = &v441[v254];
            uint64_t v256 = 2 * v251 + 2;
            if (v256 < v11)
            {
              v257 = *v255;
              v259 = v255 + 1;
              v258 = v255[1];
              uint64_t v260 = *v258;
              int64_t v261 = v251;
              uint64_t v262 = (2 * v251) | 1;
              unsigned int v435 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v258);
              unsigned int v427 = *(_DWORD *)(v260 + 16);
              unsigned int v412 = *(_DWORD *)v258[1];
              unsigned int v264 = *((_DWORD *)v257 + 4);
              unsigned int v263 = *((_DWORD *)v257 + 5);
              unsigned int v407 = *((_DWORD *)v258 + 6);
              unsigned int v265 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v257);
              v255 = &v441[v254];
              uint64_t v254 = v262;
              uint64_t v11 = v422;
              int64_t v253 = v261;
              unsigned int v266 = *((_DWORD *)v258 + 4);
              if (v266 < v264
                || v264 >= v266
                && ((unsigned int v267 = *((_DWORD *)v258 + 5), v267 < v263)
                 || v263 >= v267
                 && (v265 < v435
                  || v435 >= v265
                  && ((unsigned int v312 = *(_DWORD *)(*v257 + 16), v312 < v427)
                   || v427 >= v312
                   && ((unsigned int v313 = *(_DWORD *)v257[1], v313 < v412)
                    || (v412 >= v313 ? (BOOL v314 = *((_DWORD *)v257 + 6) >= v407) : (BOOL v314 = 1), !v314))))))
              {
                v255 = v259;
                uint64_t v254 = v256;
              }
            }
            int64_t v418 = v253;
            v436 = v255;
            v268 = *v255;
            v269 = v441[v253];
            uint64_t v270 = *v269;
            unsigned int v271 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v269);
            unsigned int v272 = *(_DWORD *)(v270 + 16);
            unsigned int v428 = *(_DWORD *)v269[1];
            unsigned int v274 = *((_DWORD *)v268 + 4);
            unsigned int v273 = *((_DWORD *)v268 + 5);
            unsigned int v275 = *((_DWORD *)v269 + 6);
            unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v268);
            int64_t v253 = v418;
            unsigned int v276 = *((_DWORD *)v269 + 4);
            if (v276 >= v274)
            {
              if (v274 < v276
                || (unsigned int v277 = *((_DWORD *)v269 + 5), v277 >= v273)
                && (v273 < v277
                 || result >= v271
                 && (v271 < result
                  || (unsigned int v315 = *(_DWORD *)(*v268 + 16), v315 >= v272)
                  && (v272 < v315
                   || (unsigned int v316 = *(_DWORD *)v268[1], v316 >= v428)
                   && (v428 >= v316 ? (BOOL v317 = *((_DWORD *)v268 + 6) >= v275) : (BOOL v317 = 1), v317)))))
              {
                v252 = v436;
                v429 = v441[v418];
                v441[v418] = *v436;
                while (v250 >= v254)
                {
                  v437 = v252;
                  uint64_t v278 = 2 * v254;
                  uint64_t v279 = (2 * v254) | 1;
                  uint64_t v280 = v279;
                  v281 = &v441[v279];
                  uint64_t v282 = v278 + 2;
                  if (v278 + 2 < v11)
                  {
                    v283 = *v281;
                    v285 = v281 + 1;
                    v284 = v281[1];
                    uint64_t v286 = *v284;
                    v287 = &v441[v279];
                    unsigned int v413 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v284);
                    unsigned int v408 = *(_DWORD *)(v286 + 16);
                    unsigned int v288 = *(_DWORD *)v284[1];
                    unsigned int v290 = *((_DWORD *)v283 + 4);
                    unsigned int v289 = *((_DWORD *)v283 + 5);
                    unsigned int v406 = *((_DWORD *)v284 + 6);
                    unsigned int v291 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v283);
                    unsigned int v292 = *((_DWORD *)v284 + 4);
                    if (v292 < v290
                      || (v281 = v287, v290 >= v292)
                      && ((unsigned int v308 = *((_DWORD *)v284 + 5), v308 < v289)
                       || v289 >= v308
                       && (v291 < v413
                        || v413 >= v291
                        && ((unsigned int v309 = *(_DWORD *)(*v283 + 16), v309 < v408)
                         || v408 >= v309
                         && ((unsigned int v310 = *(_DWORD *)v283[1], v310 < v288)
                          || (v288 >= v310 ? (BOOL v311 = *((_DWORD *)v283 + 6) >= v406) : (BOOL v311 = 1), !v311))))))
                    {
                      v281 = v285;
                      uint64_t v280 = v282;
                    }
                  }
                  uint64_t v293 = v280;
                  int64_t v294 = v250;
                  v295 = v281;
                  v296 = *v281;
                  uint64_t v297 = *v429;
                  unsigned int v298 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v429);
                  unsigned int v299 = *(_DWORD *)(v297 + 16);
                  unsigned int v300 = *(_DWORD *)v429[1];
                  unsigned int v302 = *((_DWORD *)v296 + 4);
                  unsigned int v301 = *((_DWORD *)v296 + 5);
                  unsigned int v414 = *((_DWORD *)v429 + 6);
                  unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v296);
                  unsigned int v303 = *((_DWORD *)v429 + 4);
                  if (v303 < v302)
                  {
                    v252 = v437;
                    int64_t v250 = v294;
                    uint64_t v11 = v422;
                    break;
                  }
                  BOOL v4 = v302 >= v303;
                  int64_t v250 = v294;
                  v252 = v295;
                  uint64_t v254 = v293;
                  uint64_t v11 = v422;
                  if (v4)
                  {
                    unsigned int v304 = *((_DWORD *)v429 + 5);
                    if (v304 < v301
                      || v301 >= v304
                      && (result < v298
                       || v298 >= result
                       && ((unsigned int v305 = *(_DWORD *)(*v296 + 16), v305 < v299)
                        || v299 >= v305
                        && ((unsigned int v306 = *(_DWORD *)v296[1], v306 < v300)
                         || (v300 >= v306 ? (BOOL v307 = *((_DWORD *)v296 + 6) >= v414) : (BOOL v307 = 1), !v307)))))
                    {
                      v252 = v437;
                      break;
                    }
                  }
                  *v437 = *v252;
                }
                *v252 = v429;
                int64_t v253 = v418;
              }
            }
          }
          int64_t v251 = v253 - 1;
        }
        while (v253);
        uint64_t v318 = v405 >> 3;
        do
        {
          uint64_t v320 = 0;
          v409 = *v441;
          int64_t v321 = (unint64_t)(v318 - 2) >> 1;
          v322 = v441;
          do
          {
            v323 = v322;
            v322 += v320 + 1;
            uint64_t v324 = 2 * v320;
            uint64_t v320 = (2 * v320) | 1;
            uint64_t v325 = v324 + 2;
            if (v324 + 2 < v318)
            {
              v326 = *v322;
              v327 = v322[1];
              v438 = v322 + 1;
              uint64_t v328 = *v327;
              uint64_t v329 = v318;
              v330 = v322;
              unsigned int v430 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v327);
              unsigned int v423 = *(_DWORD *)(v328 + 16);
              unsigned int v332 = *((_DWORD *)v326 + 4);
              unsigned int v331 = *((_DWORD *)v326 + 5);
              unsigned int v415 = *((_DWORD *)v327 + 6);
              unsigned int v419 = *(_DWORD *)v327[1];
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v326);
              uint64_t v318 = v329;
              unsigned int v333 = *((_DWORD *)v327 + 4);
              if (v333 < v332
                || (v322 = v330, v332 >= v333)
                && ((unsigned int v334 = *((_DWORD *)v327 + 5), v334 < v331)
                 || v331 >= v334
                 && (result < v430
                  || v430 >= result
                  && ((unsigned int v335 = *(_DWORD *)(*v326 + 16), v335 < v423)
                   || v423 >= v335
                   && ((unsigned int v336 = *(_DWORD *)v326[1], v336 < v419)
                    || (v419 >= v336 ? (BOOL v337 = *((_DWORD *)v326 + 6) >= v415) : (BOOL v337 = 1), !v337))))))
              {
                v322 = v438;
                uint64_t v320 = v325;
              }
            }
            *v323 = *v322;
          }
          while (v320 <= v321);
          v338 = a2 - 1;
          BOOL v5 = v322 == --a2;
          if (v5)
          {
            *v322 = v409;
          }
          else
          {
            *v322 = *v338;
            *v338 = v409;
            uint64_t v339 = (char *)v322 - (char *)v441 + 8;
            if (v339 >= 9)
            {
              unint64_t v340 = ((unint64_t)v339 >> 3) - 2;
              unint64_t v341 = v340 >> 1;
              v342 = &v441[v340 >> 1];
              v343 = *v342;
              v344 = *v322;
              uint64_t v345 = **v322;
              uint64_t v424 = v318;
              v346 = v322;
              unsigned int v347 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v345);
              unsigned int v348 = *(_DWORD *)(v345 + 16);
              unsigned int v439 = *(_DWORD *)v344[1];
              unsigned int v350 = *((_DWORD *)v343 + 4);
              unsigned int v349 = *((_DWORD *)v343 + 5);
              unsigned int v431 = *((_DWORD *)v344 + 6);
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v343);
              uint64_t v318 = v424;
              unsigned int v351 = *((_DWORD *)v344 + 4);
              if (v351 < v350
                || v350 >= v351
                && ((unsigned int v366 = *((_DWORD *)v344 + 5), v366 < v349)
                 || v349 >= v366
                 && (result < v347
                  || v347 >= result
                  && ((unsigned int v367 = *(_DWORD *)(*v343 + 16), v367 < v348)
                   || v348 >= v367
                   && ((unsigned int v368 = *(_DWORD *)v343[1], v368 < v439)
                    || (v439 >= v368 ? (BOOL v369 = *((_DWORD *)v343 + 6) >= v431) : (BOOL v369 = 1), !v369))))))
              {
                v352 = *v346;
                *v346 = *v342;
                if (v340 >= 2)
                {
                  while (1)
                  {
                    unint64_t v354 = v341 - 1;
                    unint64_t v341 = (v341 - 1) >> 1;
                    v353 = &v441[v341];
                    v355 = *v353;
                    uint64_t v356 = *v352;
                    unsigned int v357 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v352);
                    unsigned int v358 = *(_DWORD *)(v356 + 16);
                    unsigned int v440 = *(_DWORD *)v352[1];
                    unsigned int v359 = *((_DWORD *)v355 + 4);
                    unsigned int v360 = *((_DWORD *)v355 + 5);
                    unsigned int v432 = *((_DWORD *)v352 + 6);
                    unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v355);
                    unsigned int v361 = *((_DWORD *)v352 + 4);
                    if (v361 >= v359)
                    {
                      if (v359 < v361) {
                        break;
                      }
                      unsigned int v362 = *((_DWORD *)v352 + 5);
                      if (v362 >= v360)
                      {
                        if (v360 < v362) {
                          break;
                        }
                        if (result >= v357)
                        {
                          if (v357 < result) {
                            break;
                          }
                          unsigned int v363 = *(_DWORD *)(*v355 + 16);
                          if (v363 >= v358)
                          {
                            if (v358 < v363) {
                              break;
                            }
                            unsigned int v364 = *(_DWORD *)v355[1];
                            if (v364 >= v440 && (v440 < v364 || *((_DWORD *)v355 + 6) >= v432)) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    *v342 = *v353;
                    v342 = &v441[v341];
                    if (v354 <= 1) {
                      goto LABEL_377;
                    }
                  }
                }
                v353 = v342;
LABEL_377:
                *v353 = v352;
                uint64_t v318 = v424;
              }
            }
          }
        }
        while (v318-- > 2);
      }
      return result;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    BOOL v13 = &v9[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      uint64_t v420 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_22:
      uint64_t v35 = 0;
      unsigned int v36 = *v9;
      while (1)
      {
        uint64_t v37 = v9[v35 + 1];
        uint64_t v38 = *v36;
        unsigned int v39 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
        unsigned int v40 = *(_DWORD *)(v38 + 16);
        unsigned int v41 = *(_DWORD *)v36[1];
        unsigned int v43 = *((_DWORD *)v37 + 4);
        unsigned int v42 = *((_DWORD *)v37 + 5);
        unsigned int v44 = *((_DWORD *)v36 + 6);
        unsigned int v45 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v37);
        unsigned int v46 = *((_DWORD *)v36 + 4);
        if (v46 >= v43)
        {
          if (v43 < v46) {
            break;
          }
          unsigned int v47 = *((_DWORD *)v36 + 5);
          if (v47 >= v42)
          {
            if (v42 < v47) {
              break;
            }
            if (v45 >= v39)
            {
              if (v39 < v45) {
                break;
              }
              unsigned int v48 = *(_DWORD *)(*v37 + 16);
              if (v48 >= v40)
              {
                if (v40 < v48) {
                  break;
                }
                unsigned int v49 = *(_DWORD *)v37[1];
                if (v49 >= v41 && (v41 < v49 || *((_DWORD *)v37 + 6) >= v44)) {
                  break;
                }
              }
            }
          }
        }
        ++v35;
      }
      v416 = &v9[v35];
      unint64_t v433 = (unint64_t)&v9[v35 + 1];
      uint64_t v51 = a2 - 1;
      if (v35 * 8)
      {
        while (1)
        {
          uint64_t v54 = v51;
          uint64_t v70 = *v51;
          uint64_t v71 = *v36;
          unsigned int v72 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
          unsigned int v73 = *(_DWORD *)(v71 + 16);
          unsigned int v74 = *(_DWORD *)v36[1];
          unsigned int v75 = *((_DWORD *)v70 + 4);
          unsigned int v76 = *((_DWORD *)v70 + 5);
          unsigned int v77 = *((_DWORD *)v36 + 6);
          unsigned int v78 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v70);
          unsigned int v79 = *((_DWORD *)v36 + 4);
          if (v79 < v75) {
            break;
          }
          uint64_t v9 = v441;
          if (v75 >= v79)
          {
            unsigned int v80 = *((_DWORD *)v36 + 5);
            if (v80 < v76) {
              goto LABEL_77;
            }
            if (v76 >= v80)
            {
              if (v78 < v72) {
                goto LABEL_77;
              }
              if (v72 >= v78)
              {
                unsigned int v81 = *(_DWORD *)(*v70 + 16);
                if (v81 < v73) {
                  goto LABEL_77;
                }
                if (v73 >= v81)
                {
                  unsigned int v82 = *(_DWORD *)v70[1];
                  if (v82 < v74) {
                    goto LABEL_77;
                  }
                  if (v74 >= v82 && *((_DWORD *)v70 + 6) < v77) {
                    goto LABEL_77;
                  }
                }
              }
            }
          }
          uint64_t v51 = v54 - 1;
        }
      }
      else
      {
        uint64_t v52 = a2;
        if (v433 >= (unint64_t)a2) {
          goto LABEL_78;
        }
        for (i = a2 - 1; ; i = v52 - 1)
        {
          uint64_t v54 = i;
          uint64_t v55 = *i;
          uint64_t v56 = *v36;
          unsigned int v57 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
          unsigned int v58 = *(_DWORD *)(v56 + 16);
          unsigned int v59 = *(_DWORD *)v36[1];
          unsigned int v60 = *((_DWORD *)v55 + 4);
          unsigned int v61 = *((_DWORD *)v55 + 5);
          unsigned int v62 = *((_DWORD *)v36 + 6);
          unsigned int v63 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v55);
          unsigned int v64 = *((_DWORD *)v36 + 4);
          if (v64 < v60) {
            break;
          }
          uint64_t v9 = v441;
          if (v60 < v64) {
            goto LABEL_49;
          }
          unsigned int v65 = *((_DWORD *)v36 + 5);
          if (v65 < v61) {
            goto LABEL_77;
          }
          if (v61 < v65) {
            goto LABEL_49;
          }
          if (v63 < v57) {
            goto LABEL_77;
          }
          if (v57 < v63) {
            goto LABEL_49;
          }
          unsigned int v66 = *(_DWORD *)(*v55 + 16);
          if (v66 < v58) {
            goto LABEL_77;
          }
          if (v58 >= v66)
          {
            unsigned int v67 = *(_DWORD *)v55[1];
            if (v67 < v59) {
              goto LABEL_77;
            }
            BOOL v69 = v59 < v67 || *((_DWORD *)v55 + 6) >= v62;
            uint64_t v52 = v54;
            if (v433 >= (unint64_t)v54 || !v69) {
              goto LABEL_78;
            }
          }
          else
          {
LABEL_49:
            uint64_t v52 = v54;
            if (v433 >= (unint64_t)v54) {
              goto LABEL_78;
            }
          }
        }
      }
      uint64_t v9 = v441;
LABEL_77:
      uint64_t v52 = v54;
LABEL_78:
      unint64_t v84 = v416;
      if (v433 < (unint64_t)v52)
      {
        unint64_t v85 = (uint64_t **)v433;
        v417 = v52;
        uint64_t v86 = v52;
        do
        {
          long long v87 = *v85;
          *v85++ = *v86;
          *uint64_t v86 = v87;
          while (1)
          {
            unsigned __int32 v88 = *v85;
            uint64_t v89 = *v36;
            unsigned int v90 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
            unsigned int v91 = *(_DWORD *)(v89 + 16);
            unsigned int v92 = *(_DWORD *)v36[1];
            unsigned int v93 = *((_DWORD *)v88 + 4);
            unsigned int v94 = *((_DWORD *)v88 + 5);
            unsigned int v95 = *((_DWORD *)v36 + 6);
            unsigned int v96 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v88);
            unsigned int v97 = *((_DWORD *)v36 + 4);
            if (v97 >= v93)
            {
              if (v93 < v97) {
                break;
              }
              unsigned int v98 = *((_DWORD *)v36 + 5);
              if (v98 >= v94)
              {
                if (v94 < v98) {
                  break;
                }
                if (v96 >= v90)
                {
                  if (v90 < v96) {
                    break;
                  }
                  unsigned int v99 = *(_DWORD *)(*v88 + 16);
                  if (v99 >= v91)
                  {
                    if (v91 < v99) {
                      break;
                    }
                    unsigned int v100 = *(_DWORD *)v88[1];
                    if (v100 >= v92 && (v92 < v100 || *((_DWORD *)v88 + 6) >= v95)) {
                      break;
                    }
                  }
                }
              }
            }
            ++v85;
          }
          while (1)
          {
            uint64_t v103 = (uint64_t)*--v86;
            uint64_t v102 = v103;
            uint64_t v104 = *v36;
            unsigned int v105 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
            unsigned int v106 = *(_DWORD *)(v104 + 16);
            unsigned int v107 = *(_DWORD *)v36[1];
            unsigned int v108 = *(_DWORD *)(v103 + 16);
            unsigned int v109 = *(_DWORD *)(v103 + 20);
            unsigned int v110 = *((_DWORD *)v36 + 6);
            unsigned int v111 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v103);
            unsigned int v112 = *((_DWORD *)v36 + 4);
            if (v112 < v108) {
              break;
            }
            if (v108 >= v112)
            {
              unsigned int v113 = *((_DWORD *)v36 + 5);
              if (v113 < v109) {
                break;
              }
              if (v109 >= v113)
              {
                if (v111 < v105) {
                  break;
                }
                if (v105 >= v111)
                {
                  unsigned int v114 = *(_DWORD *)(*(void *)v102 + 16);
                  if (v114 < v106) {
                    break;
                  }
                  if (v106 >= v114)
                  {
                    unsigned int v115 = **(_DWORD **)(v102 + 8);
                    if (v115 < v107) {
                      break;
                    }
                    if (v107 >= v115 && *(_DWORD *)(v102 + 24) < v110) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        while (v85 < v86);
        unint64_t v84 = v85 - 1;
        uint64_t v9 = v441;
        uint64_t v52 = v417;
      }
      if (v84 != v9) {
        *uint64_t v9 = *v84;
      }
      *unint64_t v84 = v36;
      unsigned int v7 = a2;
      a3 = v420;
      if (v433 < (unint64_t)v52) {
        goto LABEL_117;
      }
      j = v84 + 1;
      if (result)
      {
        a2 = v84;
        if (v117) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v117)
      {
LABEL_117:
        a4 = 0;
        j = v84 + 1;
      }
    }
    else
    {
      uint64_t v14 = v9 + 1;
      uint64_t v15 = v12;
      BOOL v16 = &v9[v15];
      int v17 = &v9[v15 - 1];
      int v18 = &v14[v15];
      unint64_t v19 = v17;
      uint64_t v9 = v441;
      BOOL v20 = *v441;
      *v441 = *v16;
      *BOOL v16 = v20;
      uint64_t v420 = a3 - 1;
      if (a4) {
        goto LABEL_22;
      }
LABEL_11:
      uint64_t v21 = (uint64_t)*(v9 - 1);
      uint64_t v22 = *v9;
      uint64_t v23 = **v9;
      unsigned int v24 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v23);
      unsigned int v25 = *(_DWORD *)(v23 + 16);
      unsigned int v26 = *(_DWORD *)v22[1];
      unsigned int v28 = *(_DWORD *)(v21 + 16);
      unsigned int v27 = *(_DWORD *)(v21 + 20);
      unsigned int v29 = *((_DWORD *)v22 + 6);
      unsigned int v30 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v21);
      unsigned int v31 = *((_DWORD *)v22 + 4);
      if (v31 < v28) {
        goto LABEL_22;
      }
      if (v28 >= v31)
      {
        unsigned int v32 = *((_DWORD *)v22 + 5);
        if (v32 < v27) {
          goto LABEL_22;
        }
        if (v27 >= v32)
        {
          if (v30 < v24) {
            goto LABEL_22;
          }
          if (v24 >= v30)
          {
            unsigned int v33 = *(_DWORD *)(*(void *)v21 + 16);
            if (v33 < v25) {
              goto LABEL_22;
            }
            if (v25 >= v33)
            {
              unsigned int v34 = **(_DWORD **)(v21 + 8);
              if (v34 < v26 || v26 >= v34 && *(_DWORD *)(v21 + 24) < v29) {
                goto LABEL_22;
              }
            }
          }
        }
      }
      uint64_t v118 = *v9;
      unint64_t v119 = *v425;
      uint64_t v120 = **v425;
      unsigned int v121 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v120);
      unsigned int v122 = *(_DWORD *)(v120 + 16);
      unsigned int v123 = *(_DWORD *)v119[1];
      unsigned int v125 = *((_DWORD *)v118 + 4);
      unsigned int v124 = *((_DWORD *)v118 + 5);
      unsigned int v126 = *((_DWORD *)v119 + 6);
      unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
      unsigned int v127 = *((_DWORD *)v119 + 4);
      if (v127 < v125
        || v125 >= v127
        && ((unsigned int v199 = *((_DWORD *)v119 + 5), v199 < v124)
         || v124 >= v199
         && (result < v121
          || v121 >= result
          && ((unsigned int v200 = *(_DWORD *)(*v118 + 16), v200 < v122)
           || v122 >= v200 && ((unsigned int v201 = *(_DWORD *)v118[1], v201 < v123) || v123 >= v201 && *((_DWORD *)v118 + 6) < v126)))))
      {
        for (j = v441 + 1; ; ++j)
        {
          uint64_t v128 = *j;
          uint64_t v129 = **j;
          unsigned int v130 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v129);
          unsigned int v131 = *(_DWORD *)(v129 + 16);
          unsigned int v132 = *(_DWORD *)v128[1];
          unsigned int v134 = *((_DWORD *)v118 + 4);
          unsigned int v133 = *((_DWORD *)v118 + 5);
          unsigned int v135 = *((_DWORD *)v128 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v136 = *((_DWORD *)v128 + 4);
          if (v136 < v134) {
            break;
          }
          if (v134 >= v136)
          {
            unsigned int v137 = *((_DWORD *)v128 + 5);
            if (v137 < v133) {
              break;
            }
            if (v133 >= v137)
            {
              if (result < v130) {
                break;
              }
              if (v130 >= result)
              {
                unsigned int v138 = *(_DWORD *)(*v118 + 16);
                if (v138 < v131) {
                  break;
                }
                if (v131 >= v138)
                {
                  unsigned int v139 = *(_DWORD *)v118[1];
                  if (v139 < v132) {
                    break;
                  }
                  if (v132 >= v139 && *((_DWORD *)v118 + 6) < v135) {
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_134:
        unint64_t v141 = a2;
      }
      else
      {
        for (j = v441 + 1; ; ++j)
        {
          unint64_t v141 = a2;
          if (j >= a2) {
            break;
          }
          uint64_t v186 = *j;
          uint64_t v187 = **j;
          unsigned int v188 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v187);
          unsigned int v189 = *(_DWORD *)(v187 + 16);
          unsigned int v190 = *(_DWORD *)v186[1];
          unsigned int v192 = *((_DWORD *)v118 + 4);
          unsigned int v191 = *((_DWORD *)v118 + 5);
          unsigned int v193 = *((_DWORD *)v186 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v194 = *((_DWORD *)v186 + 4);
          if (v194 < v192) {
            goto LABEL_134;
          }
          if (v192 >= v194)
          {
            unsigned int v195 = *((_DWORD *)v186 + 5);
            if (v195 < v191) {
              goto LABEL_134;
            }
            if (v191 >= v195)
            {
              if (result < v188) {
                goto LABEL_134;
              }
              if (v188 >= result)
              {
                unsigned int v196 = *(_DWORD *)(*v118 + 16);
                if (v196 < v189) {
                  goto LABEL_134;
                }
                if (v189 >= v196)
                {
                  unsigned int v197 = *(_DWORD *)v118[1];
                  if (v197 < v190) {
                    goto LABEL_134;
                  }
                  if (v190 >= v197 && *((_DWORD *)v118 + 6) < v193) {
                    goto LABEL_134;
                  }
                }
              }
            }
          }
        }
      }
      k = v141;
      if (j < v141)
      {
        for (k = a2 - 1; ; --k)
        {
          unsigned int v143 = *k;
          uint64_t v144 = **k;
          unsigned int v145 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v144);
          unsigned int v146 = *(_DWORD *)(v144 + 16);
          unsigned int v147 = *(_DWORD *)v143[1];
          unsigned int v149 = *((_DWORD *)v118 + 4);
          unsigned int v148 = *((_DWORD *)v118 + 5);
          unsigned int v150 = *((_DWORD *)v143 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v151 = *((_DWORD *)v143 + 4);
          if (v151 >= v149)
          {
            if (v149 < v151) {
              break;
            }
            unsigned int v152 = *((_DWORD *)v143 + 5);
            if (v152 >= v148)
            {
              if (v148 < v152) {
                break;
              }
              if (result >= v145)
              {
                if (v145 < result) {
                  break;
                }
                unsigned int v153 = *(_DWORD *)(*v118 + 16);
                if (v153 >= v146)
                {
                  if (v146 < v153) {
                    break;
                  }
                  unsigned int v154 = *(_DWORD *)v118[1];
                  if (v154 >= v147 && (v147 < v154 || *((_DWORD *)v118 + 6) >= v150)) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
      while (j < k)
      {
        int v156 = *j;
        *j++ = *k;
        *k = v156;
        while (1)
        {
          uint64_t v157 = *j;
          uint64_t v158 = **j;
          unsigned int v159 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v158);
          unsigned int v160 = *(_DWORD *)(v158 + 16);
          unsigned int v161 = *(_DWORD *)v157[1];
          unsigned int v163 = *((_DWORD *)v118 + 4);
          unsigned int v162 = *((_DWORD *)v118 + 5);
          unsigned int v164 = *((_DWORD *)v157 + 6);
          unsigned int v165 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v166 = *((_DWORD *)v157 + 4);
          if (v166 < v163) {
            break;
          }
          if (v163 >= v166)
          {
            unsigned int v167 = *((_DWORD *)v157 + 5);
            if (v167 < v162) {
              break;
            }
            if (v162 >= v167)
            {
              if (v165 < v159) {
                break;
              }
              if (v159 >= v165)
              {
                unsigned int v168 = *(_DWORD *)(*v118 + 16);
                if (v168 < v160) {
                  break;
                }
                if (v160 >= v168)
                {
                  unsigned int v169 = *(_DWORD *)v118[1];
                  if (v169 < v161) {
                    break;
                  }
                  if (v161 >= v169 && *((_DWORD *)v118 + 6) < v164) {
                    break;
                  }
                }
              }
            }
          }
          ++j;
        }
        while (1)
        {
          do
          {
            uint64_t v172 = (uint64_t)*--k;
            uint64_t v171 = v172;
            uint64_t v173 = *(void *)v172;
            unsigned int v174 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v172);
            unsigned int v175 = *(_DWORD *)(v173 + 16);
            unsigned int v176 = **(_DWORD **)(v172 + 8);
            unsigned int v178 = *((_DWORD *)v118 + 4);
            unsigned int v177 = *((_DWORD *)v118 + 5);
            unsigned int v179 = *(_DWORD *)(v172 + 24);
            unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
            unsigned int v180 = *(_DWORD *)(v172 + 16);
          }
          while (v180 < v178);
          if (v178 < v180) {
            break;
          }
          unsigned int v181 = *(_DWORD *)(v171 + 20);
          if (v181 >= v177)
          {
            if (v177 < v181) {
              break;
            }
            if (result >= v174)
            {
              if (v174 < result) {
                break;
              }
              unsigned int v182 = *(_DWORD *)(*v118 + 16);
              if (v182 >= v175)
              {
                if (v175 < v182) {
                  break;
                }
                unsigned int v183 = *(_DWORD *)v118[1];
                if (v183 >= v176 && (v176 < v183 || *((_DWORD *)v118 + 6) >= v179)) {
                  break;
                }
              }
            }
          }
        }
      }
      unint64_t v185 = j - 1;
      BOOL v4 = j - 1 >= v441;
      BOOL v5 = j - 1 == v441;
      if (j - 1 != v441) {
        *v441 = *v185;
      }
      a4 = 0;
      *unint64_t v185 = v118;
      unsigned int v7 = a2;
      a3 = v420;
    }
  }
  v214 = v9 + 1;
  BOOL v216 = v9 == a2 || v214 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v216)
    {
      do
      {
        v371 = v441;
        v370 = v214;
        v373 = *v441;
        v372 = v441[1];
        uint64_t v374 = **v441;
        unsigned int v375 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v374);
        unsigned int v376 = *(_DWORD *)(v374 + 16);
        unsigned int v377 = *(_DWORD *)v373[1];
        unsigned int v379 = *((_DWORD *)v372 + 4);
        unsigned int v378 = *((_DWORD *)v372 + 5);
        unsigned int v380 = *((_DWORD *)v373 + 6);
        unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v372);
        unsigned int v381 = *((_DWORD *)v373 + 4);
        v441 = v370;
        if (v381 < v379
          || v379 >= v381
          && ((unsigned int v382 = *((_DWORD *)v373 + 5), v382 < v378)
           || v378 >= v382
           && (result < v375
            || v375 >= result
            && ((unsigned int v399 = *(_DWORD *)(*v372 + 16), v399 < v376)
             || v376 >= v399
             && ((unsigned int v400 = *(_DWORD *)v372[1], v400 < v377)
              || (v377 >= v400 ? (BOOL v401 = *((_DWORD *)v372 + 6) >= v380) : (BOOL v401 = 1), !v401))))))
        {
          v383 = *v370;
          while (1)
          {
            do
            {
              v384 = v371;
              v371[1] = *v371;
              uint64_t v386 = (uint64_t)*--v371;
              uint64_t v385 = v386;
              uint64_t v387 = *(void *)v386;
              unsigned int v388 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v386);
              unsigned int v389 = *(_DWORD *)(v387 + 16);
              unsigned int v390 = **(_DWORD **)(v386 + 8);
              unsigned int v392 = *((_DWORD *)v383 + 4);
              unsigned int v391 = *((_DWORD *)v383 + 5);
              unsigned int v393 = *(_DWORD *)(v386 + 24);
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v383);
              unsigned int v394 = *(_DWORD *)(v386 + 16);
            }
            while (v394 < v392);
            if (v392 < v394) {
              break;
            }
            unsigned int v395 = *(_DWORD *)(v385 + 20);
            if (v395 >= v391)
            {
              if (v391 < v395) {
                break;
              }
              if (result >= v388)
              {
                if (v388 < result) {
                  break;
                }
                unsigned int v396 = *(_DWORD *)(*v383 + 16);
                if (v396 >= v389)
                {
                  if (v389 < v396) {
                    break;
                  }
                  unsigned int v397 = *(_DWORD *)v383[1];
                  if (v397 >= v390 && (v390 < v397 || *((_DWORD *)v383 + 6) >= v393)) {
                    break;
                  }
                }
              }
            }
          }
          *v384 = v383;
          v370 = v441;
        }
        v214 = v370 + 1;
      }
      while (v370 + 1 != a2);
    }
    return result;
  }
  if (v216) {
    return result;
  }
  uint64_t v217 = 0;
  v218 = v441;
  while (2)
  {
    v426 = v214;
    v221 = *v218;
    v220 = v218[1];
    uint64_t v222 = **v218;
    unsigned int v223 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v222);
    unsigned int v224 = *(_DWORD *)(v222 + 16);
    unsigned int v225 = *(_DWORD *)v221[1];
    unsigned int v226 = *((_DWORD *)v220 + 4);
    unsigned int v227 = *((_DWORD *)v220 + 5);
    unsigned int v228 = *((_DWORD *)v221 + 6);
    unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v220);
    unsigned int v229 = *((_DWORD *)v221 + 4);
    if (v229 >= v226)
    {
      if (v226 < v229) {
        goto LABEL_242;
      }
      unsigned int v230 = *((_DWORD *)v221 + 5);
      if (v230 >= v227)
      {
        if (v227 < v230) {
          goto LABEL_242;
        }
        if (result >= v223)
        {
          if (v223 < result) {
            goto LABEL_242;
          }
          unsigned int v247 = *(_DWORD *)(*v220 + 16);
          if (v247 >= v224)
          {
            if (v224 < v247) {
              goto LABEL_242;
            }
            unsigned int v248 = *(_DWORD *)v220[1];
            if (v248 >= v225 && (v225 < v248 || *((_DWORD *)v220 + 6) >= v228)) {
              goto LABEL_242;
            }
          }
        }
      }
    }
    v231 = v218[1];
    v218[1] = *v218;
    v232 = v441;
    v219 = v441;
    if (v218 == v441) {
      goto LABEL_241;
    }
    uint64_t v421 = v217;
    uint64_t v233 = v217;
    while (2)
    {
      v234 = (uint64_t **)((char *)v232 + v233);
      uint64_t v235 = *(uint64_t *)((char *)v232 + v233 - 8);
      uint64_t v236 = *(void *)v235;
      unsigned int v237 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v235);
      unsigned int v238 = *(_DWORD *)(v236 + 16);
      unsigned int v239 = **(_DWORD **)(v235 + 8);
      unsigned int v241 = *((_DWORD *)v231 + 4);
      unsigned int v240 = *((_DWORD *)v231 + 5);
      unsigned int v434 = *(_DWORD *)(v235 + 24);
      unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v231);
      unsigned int v242 = *(_DWORD *)(v235 + 16);
      if (v242 < v241) {
        goto LABEL_248;
      }
      if (v241 < v242) {
        goto LABEL_263;
      }
      unsigned int v243 = *(_DWORD *)(v235 + 20);
      if (v243 < v240) {
        goto LABEL_248;
      }
      if (v240 < v243) {
        goto LABEL_263;
      }
      if (result < v237) {
        goto LABEL_248;
      }
      if (v237 < result) {
        goto LABEL_263;
      }
      unsigned int v244 = *(_DWORD *)(*v231 + 16);
      if (v244 < v238)
      {
LABEL_248:
        --v218;
        void *v234 = *(v234 - 1);
        v233 -= 8;
        v232 = v441;
        if (!v233)
        {
          v219 = v441;
          goto LABEL_240;
        }
        continue;
      }
      break;
    }
    if (v238 >= v244)
    {
      unsigned int v245 = *(_DWORD *)v231[1];
      if (v245 >= v239 && (v239 < v245 || *((_DWORD *)v231 + 6) >= v434))
      {
LABEL_263:
        v219 = v218;
        goto LABEL_240;
      }
      goto LABEL_248;
    }
    v219 = (uint64_t **)((char *)v441 + v233);
LABEL_240:
    uint64_t v217 = v421;
LABEL_241:
    *v219 = v231;
LABEL_242:
    v218 = v426;
    v214 = v426 + 1;
    v217 += 8;
    if (v426 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **,0>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8 = *a5;
  uint64_t v9 = *a4;
  uint64_t v10 = **a4;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10);
  unsigned int v12 = *(_DWORD *)(v10 + 16);
  unsigned int v65 = *(_DWORD *)v9[1];
  unsigned int v14 = *((_DWORD *)v8 + 4);
  unsigned int v13 = *((_DWORD *)v8 + 5);
  unsigned int v15 = *((_DWORD *)v9 + 6);
  uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v8);
  unsigned int v17 = *((_DWORD *)v9 + 4);
  if (v17 < v14
    || v14 >= v17
    && ((unsigned int v54 = *((_DWORD *)v9 + 5), v54 < v13)
     || v13 >= v54
     && (result < OperationDepth
      || OperationDepth >= result
      && ((unsigned int v55 = *(_DWORD *)(*v8 + 16), v55 < v12)
       || v12 >= v55
       && ((unsigned int v56 = *(_DWORD *)v8[1], v56 < v65) || (v65 >= v56 ? (v57 = *((_DWORD *)v8 + 6) >= v15) : (v57 = 1), !v57))))))
  {
    int v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    unint64_t v19 = *a4;
    BOOL v20 = *a3;
    uint64_t v21 = **a3;
    unsigned int v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    unsigned int v23 = *(_DWORD *)(v21 + 16);
    unsigned int v24 = *(_DWORD *)v20[1];
    unsigned int v26 = *((_DWORD *)v19 + 4);
    unsigned int v25 = *((_DWORD *)v19 + 5);
    unsigned int v27 = *((_DWORD *)v20 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    unsigned int v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((unsigned int v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((unsigned int v63 = *(_DWORD *)(*v19 + 16), v63 < v23)
         || v23 >= v63 && ((unsigned int v64 = *(_DWORD *)v19[1], v64 < v24) || v24 >= v64 && *((_DWORD *)v19 + 6) < v27)))))
    {
      unsigned int v30 = *a3;
      *a3 = *a4;
      *a4 = v30;
      unsigned int v31 = *a3;
      unsigned int v32 = *a2;
      uint64_t v33 = **a2;
      unsigned int v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      unsigned int v35 = *(_DWORD *)(v33 + 16);
      unsigned int v36 = *(_DWORD *)v32[1];
      unsigned int v38 = *((_DWORD *)v31 + 4);
      unsigned int v37 = *((_DWORD *)v31 + 5);
      unsigned int v39 = *((_DWORD *)v32 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((unsigned int v41 = *((_DWORD *)v32 + 5), v41 < v37)
         || v37 >= v41
         && (result < v34
          || v34 >= result
          && ((unsigned int v61 = *(_DWORD *)(*v31 + 16), v61 < v35)
           || v35 >= v61 && ((unsigned int v62 = *(_DWORD *)v31[1], v62 < v36) || v36 >= v62 && *((_DWORD *)v31 + 6) < v39)))))
      {
        unsigned int v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
        unsigned int v43 = *a2;
        unsigned int v44 = *a1;
        uint64_t v45 = **a1;
        unsigned int v46 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v45);
        unsigned int v47 = *(_DWORD *)(v45 + 16);
        unsigned int v48 = *(_DWORD *)v44[1];
        unsigned int v50 = *((_DWORD *)v43 + 4);
        unsigned int v49 = *((_DWORD *)v43 + 5);
        unsigned int v51 = *((_DWORD *)v44 + 6);
        uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v43);
        unsigned int v52 = *((_DWORD *)v44 + 4);
        if (v52 < v50
          || v50 >= v52
          && ((unsigned int v58 = *((_DWORD *)v44 + 5), v58 < v49)
           || v49 >= v58
           && (result < v46
            || v46 >= result
            && ((unsigned int v59 = *(_DWORD *)(*v43 + 16), v59 < v47)
             || v47 >= v59 && ((unsigned int v60 = *(_DWORD *)v43[1], v60 < v48) || v48 >= v60 && *((_DWORD *)v43 + 6) < v51)))))
        {
          uint64_t v53 = *a1;
          *a1 = *a2;
          *a2 = v53;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = a2;
  BOOL v4 = a1;
  BOOL v5 = *a2;
  unsigned int v6 = *a1;
  uint64_t v7 = **a1;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
  unsigned int v9 = *(_DWORD *)(v7 + 16);
  unsigned int v10 = *(_DWORD *)v6[1];
  unsigned int v11 = *((_DWORD *)v5 + 4);
  unsigned int v12 = *((_DWORD *)v5 + 5);
  unsigned int v13 = *((_DWORD *)v6 + 6);
  unsigned int v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v5);
  unsigned int v15 = *((_DWORD *)v6 + 4);
  if (v15 >= v11
    && (v11 < v15
     || (unsigned int v43 = *((_DWORD *)v6 + 5), v43 >= v12)
     && (v12 < v43
      || v14 >= OperationDepth
      && (OperationDepth < v14
       || (unsigned int v44 = *(_DWORD *)(*v5 + 16), v44 >= v9)
       && (v9 < v44
        || (unsigned int v45 = *(_DWORD *)v5[1], v45 >= v10) && (v10 >= v45 ? (v46 = *((_DWORD *)v5 + 6) >= v13) : (v46 = 1), v46))))))
  {
    BOOL v16 = *a3;
    unsigned int v17 = *v3;
    uint64_t v18 = **v3;
    unsigned int v19 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v18);
    unsigned int v20 = *(_DWORD *)(v18 + 16);
    unsigned int v21 = *(_DWORD *)v17[1];
    unsigned int v22 = *((_DWORD *)v16 + 4);
    unsigned int v23 = *((_DWORD *)v16 + 5);
    unsigned int v24 = *((_DWORD *)v17 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v16);
    unsigned int v26 = *((_DWORD *)v17 + 4);
    if (v26 < v22
      || v22 >= v26
      && ((unsigned int v27 = *((_DWORD *)v17 + 5), v27 < v23)
       || v23 >= v27
       && (result < v19
        || v19 >= result
        && ((unsigned int v70 = *(_DWORD *)(*v16 + 16), v70 < v20)
         || v20 >= v70 && ((unsigned int v71 = *(_DWORD *)v16[1], v71 < v21) || v21 >= v71 && *((_DWORD *)v16 + 6) < v24)))))
    {
      unsigned int v28 = *v3;
      char *v3 = *a3;
      *a3 = v28;
      unsigned int v29 = *v3;
      unsigned int v30 = *v4;
      uint64_t v31 = **v4;
      unsigned int v32 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v31);
      unsigned int v33 = *(_DWORD *)(v31 + 16);
      unsigned int v34 = *(_DWORD *)v30[1];
      unsigned int v36 = *((_DWORD *)v29 + 4);
      unsigned int v35 = *((_DWORD *)v29 + 5);
      unsigned int v37 = *((_DWORD *)v30 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v29);
      unsigned int v38 = *((_DWORD *)v30 + 4);
      if (v38 < v36) {
        goto LABEL_47;
      }
      if (v36 < v38) {
        return result;
      }
      unsigned int v39 = *((_DWORD *)v30 + 5);
      if (v39 < v35) {
        goto LABEL_47;
      }
      if (v35 < v39) {
        return result;
      }
      if (result < v32) {
        goto LABEL_47;
      }
      if (v32 < result) {
        return result;
      }
      unsigned int v40 = *(_DWORD *)(*v29 + 16);
      if (v40 < v33) {
        goto LABEL_47;
      }
      if (v33 < v40) {
        return result;
      }
      unsigned int v41 = *(_DWORD *)v29[1];
      if (v41 < v34) {
        goto LABEL_47;
      }
      if (v34 < v41) {
        return result;
      }
      unsigned int v42 = *((_DWORD *)v29 + 6);
      goto LABEL_66;
    }
  }
  else
  {
    unsigned int v47 = *a3;
    unsigned int v48 = *v3;
    uint64_t v49 = **v3;
    unsigned int v50 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v49);
    unsigned int v51 = *(_DWORD *)(v49 + 16);
    unsigned int v52 = *(_DWORD *)v48[1];
    unsigned int v53 = *((_DWORD *)v47 + 4);
    unsigned int v54 = *((_DWORD *)v47 + 5);
    unsigned int v74 = *((_DWORD *)v48 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v47);
    unsigned int v55 = *((_DWORD *)v48 + 4);
    if (v55 < v53)
    {
      uint64_t v3 = a3;
LABEL_47:
      BOOL v69 = *v4;
      uint64_t *v4 = *v3;
      char *v3 = v69;
      return result;
    }
    if (v53 >= v55)
    {
      unsigned int v65 = *((_DWORD *)v48 + 5);
      if (v65 < v54
        || v54 >= v65
        && (result < v50
         || v50 >= result
         && ((unsigned int v66 = *(_DWORD *)(*v47 + 16), v66 < v51)
          || v51 >= v66 && ((unsigned int v67 = *(_DWORD *)v47[1], v67 < v52) || v52 >= v67 && *((_DWORD *)v47 + 6) < v74))))
      {
LABEL_46:
        uint64_t v3 = a3;
        goto LABEL_47;
      }
    }
    unsigned int v56 = *v4;
    uint64_t *v4 = *v3;
    char *v3 = v56;
    BOOL v57 = *a3;
    uint64_t v58 = *v56;
    unsigned int v59 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v56);
    unsigned int v60 = *(_DWORD *)(v58 + 16);
    unsigned int v61 = *(_DWORD *)v56[1];
    unsigned int v62 = *((_DWORD *)v57 + 4);
    unsigned int v63 = *((_DWORD *)v57 + 5);
    unsigned int v37 = *((_DWORD *)v56 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v57);
    unsigned int v64 = *((_DWORD *)v56 + 4);
    if (v64 < v62)
    {
      BOOL v4 = v3;
      uint64_t v3 = a3;
      goto LABEL_47;
    }
    if (v62 < v64) {
      return result;
    }
    unsigned int v68 = *((_DWORD *)v56 + 5);
    if (v68 < v63)
    {
LABEL_45:
      BOOL v4 = v3;
      goto LABEL_46;
    }
    if (v63 >= v68)
    {
      if (result < v59) {
        goto LABEL_45;
      }
      if (v59 >= result)
      {
        unsigned int v72 = *(_DWORD *)(*v57 + 16);
        if (v72 < v60) {
          goto LABEL_45;
        }
        if (v60 >= v72)
        {
          unsigned int v73 = *(_DWORD *)v57[1];
          if (v73 < v61) {
            goto LABEL_45;
          }
          if (v61 >= v73)
          {
            unsigned int v42 = *((_DWORD *)v57 + 6);
            BOOL v4 = v3;
            uint64_t v3 = a3;
LABEL_66:
            if (v42 >= v37) {
              return result;
            }
            goto LABEL_47;
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2 - a1;
  BOOL result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v5 = (uint64_t)*(a2 - 1);
      unsigned int v6 = *a1;
      uint64_t v7 = **a1;
      unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
      unsigned int v9 = *(_DWORD *)(v7 + 16);
      unsigned int v10 = *(_DWORD *)v6[1];
      unsigned int v11 = *(_DWORD *)(v5 + 16);
      unsigned int v12 = *(_DWORD *)(v5 + 20);
      unsigned int v13 = *((_DWORD *)v6 + 6);
      unsigned int v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v5);
      unsigned int v15 = *((_DWORD *)v6 + 4);
      if (v15 < v11
        || v11 >= v15
        && ((unsigned int v51 = *((_DWORD *)v6 + 5), v51 < v12)
         || v12 >= v51
         && (v14 < OperationDepth
          || OperationDepth >= v14
          && ((unsigned int v52 = *(_DWORD *)(*(void *)v5 + 16), v52 < v9)
           || v9 >= v52
           && ((unsigned int v53 = **(_DWORD **)(v5 + 8), v53 < v10)
            || (v10 >= v53 ? (BOOL v54 = *(_DWORD *)(v5 + 24) >= v13) : (BOOL v54 = 1), !v54))))))
      {
        BOOL v16 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v16;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      unsigned int v17 = a1 + 2;
      uint64_t v18 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v58 = 0;
      int v56 = 0;
      unsigned int v55 = v2;
      break;
  }
  do
  {
    BOOL v57 = v18;
    unsigned int v20 = *v18;
    unsigned int v21 = *v17;
    uint64_t v22 = **v17;
    unsigned int v23 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v22);
    unsigned int v24 = *(_DWORD *)(v22 + 16);
    unsigned int v25 = *(_DWORD *)v21[1];
    unsigned int v26 = *((_DWORD *)v20 + 4);
    unsigned int v27 = *((_DWORD *)v20 + 5);
    unsigned int v28 = *((_DWORD *)v21 + 6);
    unsigned int v29 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v20);
    unsigned int v30 = *((_DWORD *)v21 + 4);
    if (v30 >= v26)
    {
      if (v26 < v30
        || (unsigned int v47 = *((_DWORD *)v21 + 5), v47 >= v27)
        && (v27 < v47
         || v29 >= v23
         && (v23 < v29
          || (unsigned int v48 = *(_DWORD *)(*v20 + 16), v48 >= v24)
          && (v24 < v48
           || (unsigned int v49 = *(_DWORD *)v20[1], v49 >= v25)
           && (v25 >= v49 ? (BOOL v50 = *((_DWORD *)v20 + 6) >= v28) : (BOOL v50 = 1), v50)))))
      {
        unsigned int v19 = v57;
        goto LABEL_8;
      }
    }
    unsigned int v19 = v57;
    uint64_t v31 = *v57;
    *BOOL v57 = *v17;
    unsigned int v32 = a1;
    if (v17 == a1) {
      goto LABEL_44;
    }
    uint64_t v33 = v58;
    while (1)
    {
      uint64_t v34 = *(uint64_t *)((char *)a1 + v33 + 8);
      uint64_t v35 = *(void *)v34;
      unsigned int v36 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v34);
      unsigned int v37 = *(_DWORD *)(v35 + 16);
      unsigned int v38 = **(_DWORD **)(v34 + 8);
      unsigned int v40 = *((_DWORD *)v31 + 4);
      unsigned int v39 = *((_DWORD *)v31 + 5);
      unsigned int v59 = *(_DWORD *)(v34 + 24);
      unsigned int v41 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v42 = *(_DWORD *)(v34 + 16);
      if (v42 >= v40)
      {
        if (v40 < v42) {
          goto LABEL_42;
        }
        unsigned int v43 = *(_DWORD *)(v34 + 20);
        if (v43 >= v39)
        {
          if (v39 < v43) {
            goto LABEL_42;
          }
          if (v41 >= v36)
          {
            if (v36 < v41) {
              goto LABEL_42;
            }
            unsigned int v44 = *(_DWORD *)(*v31 + 16);
            if (v44 >= v37) {
              break;
            }
          }
        }
      }
LABEL_12:
      --v17;
      *(uint64_t **)((char *)a1 + v33 + 16) = *(uint64_t **)((char *)a1 + v33 + 8);
      v33 -= 8;
      if (v33 == -16)
      {
        unsigned int v32 = a1;
        goto LABEL_43;
      }
    }
    if (v37 >= v44)
    {
      unsigned int v45 = *(_DWORD *)v31[1];
      if (v45 >= v38 && (v38 < v45 || *((_DWORD *)v31 + 6) >= v59))
      {
        unsigned int v32 = (uint64_t **)((char *)a1 + v33 + 16);
        goto LABEL_43;
      }
      goto LABEL_12;
    }
LABEL_42:
    unsigned int v32 = v17;
LABEL_43:
    uint64_t v2 = v55;
    unsigned int v19 = v57;
LABEL_44:
    uint64_t *v32 = v31;
    if (++v56 == 8) {
      return v19 + 1 == v2;
    }
LABEL_8:
    unsigned int v17 = v19;
    v58 += 8;
    uint64_t v18 = v19 + 1;
  }
  while (v19 + 1 != v2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a3;
  uint64_t v9 = **a3;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v9);
  unsigned int v11 = *(_DWORD *)(v9 + 16);
  unsigned int v50 = *(_DWORD *)v8[1];
  unsigned int v13 = *((_DWORD *)v7 + 4);
  unsigned int v12 = *((_DWORD *)v7 + 5);
  unsigned int v14 = *((_DWORD *)v8 + 6);
  uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v7);
  unsigned int v16 = *((_DWORD *)v8 + 4);
  if (v16 < v13
    || v13 >= v16
    && ((unsigned int v17 = *((_DWORD *)v8 + 5), v17 < v12)
     || v12 >= v17
     && (result < OperationDepth
      || OperationDepth >= result
      && ((unsigned int v47 = *(_DWORD *)(*v7 + 16), v47 < v11)
       || v11 >= v47
       && ((unsigned int v48 = *(_DWORD *)v7[1], v48 < v50) || (v50 >= v48 ? (v49 = *((_DWORD *)v7 + 6) >= v14) : (v49 = 1), !v49))))))
  {
    uint64_t v18 = *a3;
    *a3 = *a4;
    *a4 = v18;
    unsigned int v19 = *a3;
    unsigned int v20 = *a2;
    uint64_t v21 = **a2;
    unsigned int v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    unsigned int v23 = *(_DWORD *)(v21 + 16);
    unsigned int v24 = *(_DWORD *)v20[1];
    unsigned int v26 = *((_DWORD *)v19 + 4);
    unsigned int v25 = *((_DWORD *)v19 + 5);
    unsigned int v27 = *((_DWORD *)v20 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    unsigned int v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((unsigned int v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((unsigned int v45 = *(_DWORD *)(*v19 + 16), v45 < v23)
         || v23 >= v45 && ((unsigned int v46 = *(_DWORD *)v19[1], v46 < v24) || v24 >= v46 && *((_DWORD *)v19 + 6) < v27)))))
    {
      unsigned int v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      uint64_t v31 = *a2;
      unsigned int v32 = *a1;
      uint64_t v33 = **a1;
      unsigned int v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      unsigned int v35 = *(_DWORD *)(v33 + 16);
      unsigned int v36 = *(_DWORD *)v32[1];
      unsigned int v38 = *((_DWORD *)v31 + 4);
      unsigned int v37 = *((_DWORD *)v31 + 5);
      unsigned int v39 = *((_DWORD *)v32 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((unsigned int v42 = *((_DWORD *)v32 + 5), v42 < v37)
         || v37 >= v42
         && (result < v34
          || v34 >= result
          && ((unsigned int v43 = *(_DWORD *)(*v31 + 16), v43 < v35)
           || v35 >= v43 && ((unsigned int v44 = *(_DWORD *)v31[1], v44 < v36) || v36 >= v44 && *((_DWORD *)v31 + 6) < v39)))))
      {
        unsigned int v41 = *a1;
        *a1 = *a2;
        *a2 = v41;
      }
    }
  }
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::OptimalBranching::OptimalBranching(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v3 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  int v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::solve(mlir::pdl_to_pdl_interp::OptimalBranching *this)
{
  v252[6] = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  if (!*((void *)this + 5)) {
    goto LABEL_15;
  }
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3 > 4 * *((_DWORD *)this + 10) && v3 >= 0x41)
  {
    llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this + 32);
LABEL_15:
    int64_t v250 = 0;
    char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)this + 3, &v250);
    unsigned int v13 = v250;
    if ((v12 & 1) == 0)
    {
      unsigned int v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v2, (uint64_t)this + 24, (unint64_t *)this + 3, v250);
      *unsigned int v13 = *((void *)this + 3);
      v13[1] = 0;
    }
    v13[1] = 0;
    unsigned int v238 = 0;
    uint64_t v239 = 0;
    unsigned int v240 = 0;
    int v14 = *((_DWORD *)this + 2);
    if (!v14) {
      goto LABEL_160;
    }
    unint64_t v15 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    unint64_t v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
    llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v238, (((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8)) + 1);
    if (!*((_DWORD *)this + 2)) {
      goto LABEL_160;
    }
    uint64_t v17 = *((unsigned int *)this + 4);
    if (v17)
    {
      uint64_t v18 = 32 * v17;
      unsigned int v19 = *(unint64_t **)this;
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 4;
        v18 -= 32;
        if (!v18) {
          goto LABEL_160;
        }
      }
    }
    else
    {
      unsigned int v19 = *(unint64_t **)this;
    }
    uint64_t v20 = *(void *)this + 32 * v17;
    if (v19 == (unint64_t *)v20) {
      goto LABEL_160;
    }
    int v21 = 0;
LABEL_27:
    unint64_t v237 = *v19;
    int64_t v250 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v237, &v250))goto LABEL_157; {
    if (v239)
    }
    {
      unsigned int v22 = v240;
      if (v240 > 4 * (int)v239 && v240 >= 0x41)
      {
        int v23 = 1 << (33 - __clz(v239 - 1));
        if (v23 <= 64) {
          int v24 = 64;
        }
        else {
          int v24 = v23;
        }
        if (v24 == v240)
        {
          uint64_t v239 = 0;
          unsigned int v25 = v238;
          uint64_t v26 = (v240 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (!v26)
          {
            unsigned int v29 = v238;
LABEL_54:
            unsigned int v40 = (llvm *)((char *)v25 + 16 * v22);
            do
            {
              *(void *)unsigned int v29 = -4096;
              unsigned int v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v40);
            goto LABEL_56;
          }
          uint64_t v27 = v26 + 1;
          uint64_t v28 = (v26 + 1) & 0x1FFFFFFFFFFFFFFELL;
          unsigned int v29 = (llvm *)((char *)v238 + 16 * v28);
          unsigned int v30 = (void *)((char *)v238 + 16);
          uint64_t v31 = v28;
          do
          {
            *(v30 - 2) = -4096;
            void *v30 = -4096;
            v30 += 4;
            v31 -= 2;
          }
          while (v31);
          if (v27 != v28) {
            goto LABEL_54;
          }
LABEL_56:
          while (1)
          {
            uint64_t v41 = *(void *)this;
            int v42 = *((_DWORD *)this + 4);
            int v229 = v21;
            if (!v42) {
              break;
            }
            unint64_t v43 = v237;
            {
              unint64_t v102 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v102 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v102;
            }
            unint64_t v44 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v43) ^ HIDWORD(v43));
            unint64_t v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v44 >> 47) ^ v44);
            unint64_t v46 = (-348639895 * ((v45 >> 47) ^ v45)) & (v42 - 1);
            unsigned int v47 = (uint64_t *)(v41 + 32 * v46);
            uint64_t v48 = *v47;
            if (v237 != *v47)
            {
              int v49 = 1;
              while (v48 != -4096)
              {
                int v50 = v46 + v49++;
                unint64_t v46 = v50 & (v42 - 1);
                uint64_t v48 = *(void *)(v41 + 32 * v46);
                if (v237 == v48)
                {
                  unsigned int v47 = (uint64_t *)(v41 + 32 * v46);
                  goto LABEL_65;
                }
              }
              uint64_t v41 = *(void *)this;
              uint64_t v51 = *((unsigned int *)this + 4);
              goto LABEL_64;
            }
LABEL_65:
            int v52 = *((_DWORD *)this + 12);
            if (!v52)
            {
              unsigned int v66 = 0;
LABEL_130:
              v66 *= 2;
LABEL_131:
              llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)v2, v66);
              int64_t v250 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v237, &v250);
              unsigned int v60 = v250;
              ++*((_DWORD *)this + 10);
              if (*v60 == -4096) {
                goto LABEL_81;
              }
LABEL_80:
              --*((_DWORD *)this + 11);
              goto LABEL_81;
            }
            uint64_t v53 = *((void *)this + 4);
            unint64_t v54 = v237;
            {
              unint64_t v103 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v103 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v103;
            }
            unint64_t v55 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v54) ^ HIDWORD(v54));
            unint64_t v56 = 0x9DDFEA08EB382D69 * (HIDWORD(v54) ^ (v55 >> 47) ^ v55);
            int v57 = -348639895 * ((v56 >> 47) ^ v56);
            int v58 = v52 - 1;
            unsigned int v59 = v57 & (v52 - 1);
            unsigned int v60 = (unint64_t *)(v53 + 16 * v59);
            unint64_t v61 = *v60;
            if (v237 == *v60) {
              goto LABEL_82;
            }
            unsigned int v62 = 0;
            int v63 = 1;
            while (v61 != -4096)
            {
              if (v62) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v61 == -8192;
              }
              if (v64) {
                unsigned int v62 = v60;
              }
              unsigned int v65 = v59 + v63++;
              unsigned int v59 = v65 & v58;
              unsigned int v60 = (unint64_t *)(v53 + 16 * v59);
              unint64_t v61 = *v60;
              if (v237 == *v60) {
                goto LABEL_82;
              }
            }
            if (v62) {
              unsigned int v60 = v62;
            }
            unsigned int v66 = *((_DWORD *)this + 12);
            int v101 = *((_DWORD *)this + 10);
            if (4 * v101 + 4 >= 3 * v66) {
              goto LABEL_130;
            }
            if (v66 + ~v101 - *((_DWORD *)this + 11) <= v66 >> 3) {
              goto LABEL_131;
            }
            ++*((_DWORD *)this + 10);
            if (*v60 != -4096) {
              goto LABEL_80;
            }
LABEL_81:
            *unsigned int v60 = v237;
            v60[1] = 0;
LABEL_82:
            if (!*((_DWORD *)v47 + 4)) {
              goto LABEL_100;
            }
            uint64_t v67 = *((unsigned int *)v47 + 6);
            if (v67)
            {
              uint64_t v68 = 24 * v67;
              uint64_t v69 = v47[1];
              while ((*(void *)v69 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v69 += 24;
                v68 -= 24;
                if (!v68) {
                  goto LABEL_100;
                }
              }
            }
            else
            {
              uint64_t v69 = v47[1];
            }
            uint64_t v70 = v47[1] + 24 * v67;
            if (v69 == v70)
            {
LABEL_100:
              unsigned int v71 = 0;
            }
            else
            {
              unsigned int v71 = 0;
              unsigned int v72 = 0;
              unint64_t v73 = v60[1];
              do
              {
                unsigned int v74 = *(_DWORD *)(v69 + 8);
                if (!v73 || v74 < v71 || v71 >= v74 && *(_DWORD *)(v69 + 12) < v72)
                {
                  unint64_t v73 = *(void *)v69;
                  v60[1] = *(void *)v69;
                  unsigned int v72 = *(_DWORD *)(v69 + 12);
                  unsigned int v71 = v74;
                }
                do
                {
                  v69 += 24;
                  if (v69 == v70) {
                    goto LABEL_101;
                  }
                }
                while ((*(void *)v69 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v69 != v70);
            }
LABEL_101:
            unsigned int v75 = v240;
            if (!v240)
            {
              int v85 = 0;
              goto LABEL_137;
            }
            unsigned int v76 = v2;
            unint64_t v77 = v237;
            unsigned int v78 = v238;
            {
              unint64_t v104 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v104 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v104;
            }
            unint64_t v79 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v77) ^ HIDWORD(v77));
            unint64_t v80 = 0x9DDFEA08EB382D69 * (HIDWORD(v77) ^ (v79 >> 47) ^ v79);
            unsigned int v81 = v75 - 1;
            unsigned int v82 = (-348639895 * ((v80 >> 47) ^ v80)) & (v75 - 1);
            unsigned int v83 = (unint64_t *)((char *)v78 + 16 * v82);
            unint64_t v84 = *v83;
            if (v237 != *v83)
            {
              unsigned int v97 = 0;
              int v98 = 1;
              while (v84 != -4096)
              {
                if (v97) {
                  BOOL v99 = 0;
                }
                else {
                  BOOL v99 = v84 == -8192;
                }
                if (v99) {
                  unsigned int v97 = v83;
                }
                unsigned int v100 = v82 + v98++;
                unsigned int v82 = v100 & v81;
                unsigned int v83 = (unint64_t *)((char *)v78 + 16 * (v100 & v81));
                unint64_t v84 = *v83;
                uint64_t v2 = v76;
                if (v237 == *v83) {
                  goto LABEL_110;
                }
              }
              if (v97) {
                unsigned int v83 = v97;
              }
              int v85 = v240;
              uint64_t v2 = v76;
              if (4 * (int)v239 + 4 < 3 * v240)
              {
                if (v240 + ~v239 - HIDWORD(v239) <= v240 >> 3) {
                  goto LABEL_138;
                }
                LODWORD(v239) = v239 + 1;
                if (*v83 == -4096)
                {
LABEL_109:
                  *unsigned int v83 = v237;
                  *((_DWORD *)v83 + 2) = 0;
                  goto LABEL_110;
                }
              }
              else
              {
LABEL_137:
                v85 *= 2;
LABEL_138:
                llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v238, v85);
                int64_t v250 = 0;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v237, &v250);
                unsigned int v83 = v250;
                LODWORD(v239) = v239 + 1;
                if (*v250 == -4096) {
                  goto LABEL_109;
                }
              }
              --HIDWORD(v239);
              goto LABEL_109;
            }
            uint64_t v2 = v76;
LABEL_110:
            *((_DWORD *)v83 + 2) = v71;
            unint64_t v86 = v60[1];
            unint64_t v237 = v86;
            int v21 = v71 + v229;
            int v87 = *((_DWORD *)this + 12);
            if (v87)
            {
              uint64_t v88 = *((void *)this + 4);
              {
                unint64_t v105 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v105 = 0xFF51AFD7ED558CCDLL;
                }
                llvm::hashing::detail::get_execution_seed(void)::seed = v105;
              }
              unint64_t v89 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v86) ^ HIDWORD(v86));
              unint64_t v90 = 0x9DDFEA08EB382D69 * (HIDWORD(v86) ^ (v89 >> 47) ^ v89);
              int v91 = -348639895 * ((v90 >> 47) ^ v90);
              int v92 = v87 - 1;
              unsigned int v93 = v91 & (v87 - 1);
              uint64_t v94 = *(void *)(v88 + 16 * v93);
              if (v237 == v94)
              {
LABEL_156:
                int64_t v250 = 0;
                if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v237, &v250))
                {
                  do
                  {
LABEL_157:
                    v19 += 4;
                    if (v19 == (unint64_t *)v20) {
                      goto LABEL_160;
                    }
                  }
                  while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000);
                  if (v19 == (unint64_t *)v20) {
LABEL_160:
                  }
                    llvm::deallocate_buffer(v238, (void *)(16 * v240));
                  goto LABEL_27;
                }
                unint64_t v106 = v237;
                int64_t v250 = v252;
                uint64_t v251 = 0x600000000;
                unint64_t v107 = v237;
                while (1)
                {
LABEL_163:
                  uint64_t v108 = v251;
                  if (v251 >= (unint64_t)HIDWORD(v251))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v250, v252, v251 + 1, 8);
                    uint64_t v108 = v251;
                  }
                  v250[v108] = v107;
                  LODWORD(v251) = v251 + 1;
                  int v109 = *((_DWORD *)this + 12);
                  if (!v109) {
                    goto LABEL_162;
                  }
                  uint64_t v110 = *((void *)this + 4);
                  {
                    unint64_t v117 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override) {
                      unint64_t v117 = 0xFF51AFD7ED558CCDLL;
                    }
                    llvm::hashing::detail::get_execution_seed(void)::seed = v117;
                  }
                  unint64_t v111 = 0x9DDFEA08EB382D69
                       * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v107) ^ HIDWORD(v107));
                  unint64_t v112 = 0x9DDFEA08EB382D69 * (HIDWORD(v107) ^ (v111 >> 47) ^ v111);
                  unint64_t v113 = (-348639895 * ((v112 >> 47) ^ v112)) & (v109 - 1);
                  uint64_t v114 = *(void *)(v110 + 16 * v113);
                  if (v107 != v114) {
                    break;
                  }
LABEL_168:
                  unint64_t v107 = *(void *)(v110 + 16 * v113 + 8);
                  if (v106 == v107)
                  {
LABEL_178:
                    v235[0] = 0;
                    v235[1] = 0;
                    int v236 = 0;
                    v232 = 0;
                    uint64_t v233 = 0;
                    unsigned int v234 = 0;
                    unint64_t v248 = *v250;
                    unsigned int v243 = v250;
                    v249 = &v250[v251];
                    llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>((uint64_t)v246, &v243, &v249);
                    unsigned int v243 = 0;
                    uint64_t v244 = 0;
                    unsigned int v245 = 0;
                    if (!*((_DWORD *)this + 2)) {
                      goto LABEL_351;
                    }
                    uint64_t v118 = *((unsigned int *)this + 4);
                    if (v118)
                    {
                      uint64_t v119 = 32 * v118;
                      uint64_t v120 = *(int32x2_t **)this;
                      while ((*(void *)v120 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v120 += 4;
                        v119 -= 32;
                        if (!v119) {
                          goto LABEL_351;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v120 = *(int32x2_t **)this;
                    }
                    uint64_t v121 = *(void *)this + 32 * v118;
                    if (v120 == (int32x2_t *)v121) {
                      goto LABEL_351;
                    }
                    unint64_t v122 = (unint64_t)*v120;
                    while (2)
                    {
                      unint64_t v242 = v122;
                      v249 = 0;
                      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v246, &v242, &v249))
                      {
                        unsigned int v123 = v249;
                        unsigned int v124 = v246[0];
                        uint64_t v125 = v247;
                      }
                      else
                      {
                        unsigned int v124 = v246[0];
                        uint64_t v125 = v247;
                        unsigned int v123 = (unint64_t *)((char *)v246[0] + 8 * v247);
                      }
                      unsigned int v126 = v125;
                      if (v123 != (unint64_t *)((char *)v124 + 8 * v125))
                      {
                        v249 = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v242, &v249))int v127 = *((_DWORD *)v249 + 2); {
                        else
                        }
                          int v127 = 0;
                        unsigned int v132 = (llvm *)v120[1];
                        uint64_t v133 = v120[3].u32[0];
                        if (!v120[2].i32[0]) {
LABEL_347:
                        }
                          llvm::deallocate_buffer(v132, (void *)(24 * v133));
                        unsigned int v134 = (char *)v120[1];
                        if (v133)
                        {
                          uint64_t v135 = 0;
                          while ((*(void *)((char *)v132 + v135) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v135 += 24;
                            if (24 * v133 == v135) {
                              goto LABEL_347;
                            }
                          }
                          unsigned int v134 = (char *)v132 + v135;
                        }
                        unsigned int v163 = (char *)v132 + 24 * v133;
                        if (v134 == v163) {
                          goto LABEL_347;
                        }
                        unint64_t v164 = *(void *)v134;
                        while (2)
                        {
                          unint64_t v241 = v164;
                          unsigned int v165 = v246[0];
                          unsigned int v166 = v247;
                          if (v247)
                          {
                            {
                              int v228 = v127;
                              int v127 = v228;
                              if (v213)
                              {
                                unint64_t v214 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override) {
                                  unint64_t v214 = 0xFF51AFD7ED558CCDLL;
                                }
                                llvm::hashing::detail::get_execution_seed(void)::seed = v214;
                                int v127 = v228;
                              }
                            }
                            unint64_t v168 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                            unint64_t v167 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v168 >> 47) ^ v168);
                            unint64_t v164 = v241;
                            LODWORD(v168) = (-348639895 * ((v167 >> 47) ^ v167)) & (v166 - 1);
                            unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v168);
                            uint64_t v170 = *v169;
                            if (v241 == *v169)
                            {
LABEL_256:
                              unsigned int v165 = v246[0];
                              uint64_t v171 = v247;
                              goto LABEL_259;
                            }
                            int v209 = 1;
                            while (v170 != -4096)
                            {
                              int v210 = v168 + v209++;
                              unint64_t v168 = v210 & (v166 - 1);
                              uint64_t v170 = *((void *)v165 + v168);
                              if (v241 == v170)
                              {
                                unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v168);
                                goto LABEL_256;
                              }
                            }
                            unsigned int v165 = v246[0];
                            uint64_t v171 = v247;
                          }
                          else
                          {
                            uint64_t v171 = 0;
                          }
                          unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v171);
LABEL_259:
                          if (v169 == (uint64_t *)((char *)v165 + 8 * v171))
                          {
                            unsigned int v225 = v2;
                            unsigned int v223 = *((_DWORD *)v134 + 3);
                            int v227 = v127;
                            unsigned int v231 = *((_DWORD *)v134 + 2) - v127;
                            unsigned int v172 = v245;
                            if (v245)
                            {
                              uint64_t v173 = v243;
                              {
                                unint64_t v215 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override) {
                                  unint64_t v215 = 0xFF51AFD7ED558CCDLL;
                                }
                                llvm::hashing::detail::get_execution_seed(void)::seed = v215;
                              }
                              unint64_t v174 = 0x9DDFEA08EB382D69
                                   * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                              unint64_t v175 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v174 >> 47) ^ v174);
                              LODWORD(v174) = -348639895 * ((v175 >> 47) ^ v175);
                              unsigned int v176 = v172 - 1;
                              unint64_t v164 = v241;
                              unsigned int v177 = v174 & (v172 - 1);
                              unsigned int v178 = &v173[3 * v177];
                              unint64_t v179 = *v178;
                              if (v241 == *v178)
                              {
LABEL_263:
                                if (v178 != &v243[3 * v245])
                                {
                                  unsigned int v180 = *((_DWORD *)v178 + 2);
                                  if (v231 >= v180)
                                  {
                                    int v127 = v227;
                                    if (v180 < v231 || *((_DWORD *)v178 + 3) <= v223) {
                                      goto LABEL_300;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                int v211 = 1;
                                while (v179 != -4096)
                                {
                                  unsigned int v212 = v177 + v211++;
                                  unsigned int v177 = v212 & v176;
                                  unsigned int v178 = &v173[3 * (v212 & v176)];
                                  unint64_t v179 = *v178;
                                  if (v241 == *v178) {
                                    goto LABEL_263;
                                  }
                                }
                              }
                            }
                            unsigned int v181 = v234;
                            if (!v234)
                            {
                              int v193 = 0;
                              goto LABEL_321;
                            }
                            unsigned int v182 = v232;
                            {
                              unint64_t v216 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override) {
                                unint64_t v216 = 0xFF51AFD7ED558CCDLL;
                              }
                              llvm::hashing::detail::get_execution_seed(void)::seed = v216;
                            }
                            unint64_t v183 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                            unint64_t v184 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v183 >> 47) ^ v183);
                            unsigned int v185 = v181 - 1;
                            unsigned int v186 = (-348639895 * ((v184 >> 47) ^ v184)) & (v181 - 1);
                            uint64_t v187 = (unint64_t *)((char *)v182 + 16 * v186);
                            unint64_t v188 = *v187;
                            if (v241 != *v187)
                            {
                              unsigned int v189 = 0;
                              int v190 = 1;
                              while (v188 != -4096)
                              {
                                if (v189) {
                                  BOOL v191 = 0;
                                }
                                else {
                                  BOOL v191 = v188 == -8192;
                                }
                                if (v191) {
                                  unsigned int v189 = v187;
                                }
                                unsigned int v192 = v186 + v190++;
                                unsigned int v186 = v192 & v185;
                                uint64_t v187 = (unint64_t *)((char *)v182 + 16 * (v192 & v185));
                                unint64_t v188 = *v187;
                                if (v241 == *v187) {
                                  goto LABEL_282;
                                }
                              }
                              if (v189) {
                                uint64_t v187 = v189;
                              }
                              int v193 = v234;
                              if (4 * (int)v233 + 4 >= 3 * v234)
                              {
LABEL_321:
                                v193 *= 2;
LABEL_322:
                                llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)&v232, v193);
                                v249 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v232, &v241, &v249);
                                uint64_t v187 = v249;
                                LODWORD(v233) = v233 + 1;
                                if (*v249 == -4096) {
                                  goto LABEL_281;
                                }
LABEL_280:
                                --HIDWORD(v233);
                                goto LABEL_281;
                              }
                              if (v234 + ~v233 - HIDWORD(v233) <= v234 >> 3) {
                                goto LABEL_322;
                              }
                              LODWORD(v233) = v233 + 1;
                              if (*v187 != -4096) {
                                goto LABEL_280;
                              }
LABEL_281:
                              *uint64_t v187 = v241;
                              v187[1] = 0;
                            }
LABEL_282:
                            v187[1] = v242;
                            unsigned int v194 = v245;
                            if (!v245)
                            {
                              int v207 = 0;
                              goto LABEL_327;
                            }
                            unsigned int v195 = v243;
                            unint64_t v196 = v241;
                            {
                              unint64_t v217 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override) {
                                unint64_t v217 = 0xFF51AFD7ED558CCDLL;
                              }
                              llvm::hashing::detail::get_execution_seed(void)::seed = v217;
                            }
                            unint64_t v197 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v196) ^ HIDWORD(v196));
                            unint64_t v198 = 0x9DDFEA08EB382D69 * (HIDWORD(v196) ^ (v197 >> 47) ^ v197);
                            unsigned int v199 = v194 - 1;
                            unsigned int v200 = (-348639895 * ((v198 >> 47) ^ v198)) & (v194 - 1);
                            unsigned int v201 = &v195[3 * v200];
                            unint64_t v202 = *v201;
                            if (v241 != *v201)
                            {
                              __int16 v203 = 0;
                              int v204 = 1;
                              while (v202 != -4096)
                              {
                                if (v203) {
                                  BOOL v205 = 0;
                                }
                                else {
                                  BOOL v205 = v202 == -8192;
                                }
                                if (v205) {
                                  __int16 v203 = v201;
                                }
                                unsigned int v206 = v200 + v204++;
                                unsigned int v200 = v206 & v199;
                                unsigned int v201 = &v195[3 * (v206 & v199)];
                                unint64_t v202 = *v201;
                                if (v241 == *v201) {
                                  goto LABEL_299;
                                }
                              }
                              if (v203) {
                                unsigned int v201 = v203;
                              }
                              int v207 = v245;
                              if (4 * (int)v244 + 4 >= 3 * v245)
                              {
LABEL_327:
                                v207 *= 2;
LABEL_328:
                                llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow((uint64_t)&v243, v207);
                                v249 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)&v243, &v241, &v249);
                                unsigned int v201 = v249;
                                LODWORD(v244) = v244 + 1;
                                if (*v249 == -4096) {
                                  goto LABEL_298;
                                }
LABEL_297:
                                --HIDWORD(v244);
                                goto LABEL_298;
                              }
                              if (v245 + ~v244 - HIDWORD(v244) <= v245 >> 3) {
                                goto LABEL_328;
                              }
                              LODWORD(v244) = v244 + 1;
                              if (*v201 != -4096) {
                                goto LABEL_297;
                              }
LABEL_298:
                              unint64_t v208 = v241;
                              v201[1] = 0;
                              v201[2] = 0;
                              *unsigned int v201 = v208;
                            }
LABEL_299:
                            *((_DWORD *)v201 + 2) = v231;
                            *((_DWORD *)v201 + 3) = v223;
                            uint64_t v2 = v225;
                            int v127 = v227;
                          }
LABEL_300:
                          v134 += 24;
                          if (v134 == v163) {
                            goto LABEL_346;
                          }
                          while (1)
                          {
                            unint64_t v164 = *(void *)v134;
                            if ((*(void *)v134 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                              break;
                            }
                            v134 += 24;
                            if (v134 == v163) {
                              goto LABEL_346;
                            }
                          }
                          if (v134 == v163)
                          {
LABEL_346:
                            unsigned int v132 = (llvm *)v120[1];
                            uint64_t v133 = v120[3].u32[0];
                            goto LABEL_347;
                          }
                          continue;
                        }
                      }
                      uint64_t v128 = (uint64_t *)&v120[1];
                      if (!v120[2].i32[0]) {
                        goto LABEL_348;
                      }
                      uint64_t v129 = v120[3].u32[0];
                      if (v129)
                      {
                        uint64_t v130 = 24 * v129;
                        unsigned int v131 = (void *)v120[1];
                        while ((*v131 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          v131 += 3;
                          v130 -= 24;
                          if (!v130) {
                            goto LABEL_348;
                          }
                        }
                      }
                      else
                      {
                        unsigned int v131 = (void *)v120[1];
                      }
                      uint64_t v136 = *(void *)&v120[1] + 24 * v129;
                      if (v131 == (void *)v136) {
                        goto LABEL_348;
                      }
                      unsigned int v137 = 0;
                      unsigned int v138 = 0;
                      unint64_t v139 = 0;
LABEL_209:
                      unint64_t v140 = *v131;
                      unint64_t v141 = v246[0];
                      if (v126)
                      {
                        {
                          unint64_t v226 = v139;
                          unsigned int v230 = v128;
                          unsigned int v224 = v138;
                          unsigned int v222 = v137;
                          unsigned int v137 = v222;
                          unsigned int v138 = v224;
                          unint64_t v139 = v226;
                          uint64_t v128 = v230;
                          if (v152)
                          {
                            unint64_t v153 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override) {
                              unint64_t v153 = 0xFF51AFD7ED558CCDLL;
                            }
                            llvm::hashing::detail::get_execution_seed(void)::seed = v153;
                            unsigned int v137 = v222;
                            unsigned int v138 = v224;
                            unint64_t v139 = v226;
                            uint64_t v128 = v230;
                          }
                        }
                        unint64_t v142 = 0x9DDFEA08EB382D69
                             * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v140) ^ HIDWORD(v140));
                        unint64_t v143 = 0x9DDFEA08EB382D69 * (HIDWORD(v140) ^ (v142 >> 47) ^ v142);
                        LODWORD(v143) = (-348639895 * ((v143 >> 47) ^ v143)) & (v126 - 1);
                        uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v143);
                        uint64_t v145 = *v144;
                        if (*v144 == v140)
                        {
LABEL_212:
                          unint64_t v141 = v246[0];
                          unsigned int v126 = v247;
                          uint64_t v146 = v247;
                          goto LABEL_219;
                        }
                        int v147 = 1;
                        while (v145 != -4096)
                        {
                          int v148 = v143 + v147++;
                          unint64_t v143 = v148 & (v126 - 1);
                          uint64_t v145 = *((void *)v141 + v143);
                          if (v145 == v140)
                          {
                            uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v143);
                            goto LABEL_212;
                          }
                        }
                        unint64_t v141 = v246[0];
                        unsigned int v126 = v247;
                      }
                      uint64_t v146 = v126;
                      uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v126);
LABEL_219:
                      if (v144 != (uint64_t *)((char *)v141 + 8 * v146))
                      {
                        unsigned int v149 = *((_DWORD *)v131 + 2);
                        if (v139 && v149 >= v137)
                        {
                          if (v137 < v149 || (unsigned int v151 = *((_DWORD *)v131 + 3), v151 >= v138))
                          {
LABEL_230:
                            unsigned int v150 = (void *)v136;
                            if (v131 + 3 != (void *)v136)
                            {
                              unsigned int v150 = v131 + 3;
                              do
                              {
                                if ((*v150 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                                  goto LABEL_235;
                                }
                                v150 += 3;
                              }
                              while (v150 != (void *)v136);
                              unsigned int v150 = (void *)v136;
                            }
LABEL_235:
                            *unsigned int v131 = -8192;
                            v120[2] = vadd_s32(v120[2], (int32x2_t)0x1FFFFFFFFLL);
                            goto LABEL_236;
                          }
                        }
                        else
                        {
                          unsigned int v151 = *((_DWORD *)v131 + 3);
                        }
                        unint64_t v139 = v140;
                        unsigned int v138 = v151;
                        unsigned int v137 = *((_DWORD *)v131 + 2);
                        goto LABEL_230;
                      }
                      unsigned int v150 = v131 + 3;
                      if (v131 + 3 == (void *)v136) {
                        goto LABEL_244;
                      }
                      while ((*v150 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v150 += 3;
                        if (v150 == (void *)v136) {
                          goto LABEL_244;
                        }
                      }
LABEL_236:
                      unsigned int v131 = v150;
                      if (v150 == (void *)v136)
                      {
LABEL_244:
                        if (v139)
                        {
                          unsigned int v154 = v137;
                          unsigned int v155 = v138;
                          unint64_t v156 = v139;
                          v249 = 0;
                          uint64_t v157 = (uint64_t)v128;
                          char v158 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v128, &v248, &v249);
                          unsigned int v159 = v249;
                          if ((v158 & 1) == 0)
                          {
                            unsigned int v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(v157, (uint64_t)&v248, &v248, v249);
                            unint64_t v160 = v248;
                            v159[1] = 0;
                            v159[2] = 0;
                            *unsigned int v159 = v160;
                          }
                          *((_DWORD *)v159 + 2) = v154;
                          *((_DWORD *)v159 + 3) = v155;
                          v249 = 0;
                          char v161 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v235, &v242, &v249);
                          unsigned int v162 = v249;
                          if ((v161 & 1) == 0)
                          {
                            unsigned int v162 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v235, (uint64_t)&v242, &v242, v249);
                            *unsigned int v162 = v242;
                            v162[1] = 0;
                          }
                          v162[1] = v156;
                        }
                        do
                        {
LABEL_348:
                          v120 += 4;
                          if (v120 == (int32x2_t *)v121) {
                            goto LABEL_351;
                          }
                          unint64_t v122 = (unint64_t)*v120;
                        }
                        while ((*(void *)v120 | 0x1000) == 0xFFFFFFFFFFFFF000);
                        if (v120 == (int32x2_t *)v121)
                        {
LABEL_351:
                          v249 = 0;
                          int v218 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v248, &v249);
                          v219 = v249;
                          if (v218)
                          {
                            v220 = (llvm *)v249[1];
                          }
                          else
                          {
                            v219 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v248, &v248, v249);
                            v220 = 0;
                            unint64_t v221 = v248;
                            v219[1] = 0;
                            v219[2] = 0;
                            unint64_t *v219 = v221;
                            *((_DWORD *)v219 + 6) = 0;
                          }
                          llvm::deallocate_buffer(v220, (void *)(24 * *((unsigned int *)v219 + 6)));
                        }
                        continue;
                      }
                      goto LABEL_209;
                    }
                  }
                }
                int v115 = 1;
                while (v114 != -4096)
                {
                  int v116 = v113 + v115++;
                  unint64_t v113 = v116 & (v109 - 1);
                  uint64_t v114 = *(void *)(v110 + 16 * v113);
                  if (v107 == v114) {
                    goto LABEL_168;
                  }
                }
LABEL_162:
                unint64_t v107 = 0;
                if (!v106) {
                  goto LABEL_178;
                }
                goto LABEL_163;
              }
              int v95 = 1;
              while (v94 != -4096)
              {
                unsigned int v96 = v93 + v95++;
                unsigned int v93 = v96 & v92;
                uint64_t v94 = *(void *)(v88 + 16 * (v96 & v92));
                if (v237 == v94) {
                  goto LABEL_156;
                }
              }
            }
          }
          uint64_t v51 = 0;
LABEL_64:
          unsigned int v47 = (uint64_t *)(v41 + 32 * v51);
          goto LABEL_65;
        }
LABEL_42:
        llvm::deallocate_buffer(v238, (void *)(16 * v22));
      }
    }
    else
    {
      if (!HIDWORD(v239)) {
        goto LABEL_56;
      }
      unsigned int v22 = v240;
      if (v240 > 0x40) {
        goto LABEL_42;
      }
    }
    if (v22)
    {
      unsigned int v32 = v238;
      uint64_t v33 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v33)
      {
        uint64_t v34 = v33 + 1;
        uint64_t v35 = (v33 + 1) & 0x1FFFFFFFFFFFFFFELL;
        unsigned int v36 = (llvm *)((char *)v238 + 16 * v35);
        unsigned int v37 = (void *)((char *)v238 + 16);
        uint64_t v38 = v35;
        do
        {
          *(v37 - 2) = -4096;
          *unsigned int v37 = -4096;
          v37 += 4;
          v38 -= 2;
        }
        while (v38);
        if (v34 == v35) {
          goto LABEL_52;
        }
      }
      else
      {
        unsigned int v36 = v238;
      }
      unsigned int v39 = (llvm *)((char *)v32 + 16 * v22);
      do
      {
        *(void *)unsigned int v36 = -4096;
        unsigned int v36 = (llvm *)((char *)v36 + 16);
      }
      while (v36 != v39);
    }
LABEL_52:
    uint64_t v239 = 0;
    goto LABEL_56;
  }
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v8 = (void *)(v4 + 16 * v7);
      uint64_t v9 = (void *)(v4 + 16);
      uint64_t v10 = v7;
      do
      {
        *(v9 - 2) = -4096;
        *uint64_t v9 = -4096;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v8 = (void *)*v2;
    }
    unsigned int v11 = (void *)(v4 + 16 * v3);
    do
    {
      *uint64_t v8 = -4096;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_14:
  *((void *)this + 5) = 0;
  goto LABEL_15;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::preOrderTraversal(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  v61[0] = 0;
  v61[1] = 0;
  unsigned int v62 = 0;
  if (!a3)
  {
    *a4 = 0;
    a4[2] = 0;
    a4[1] = 0;
    uint64_t v33 = a4 + 1;
    unsigned int v32 = (char *)operator new(0x10uLL);
    *(void *)unsigned int v32 = *(void *)(a1 + 24);
    *((void *)v32 + 1) = 0;
    uint64_t v34 = v32 + 16;
    *a4 = v32;
    *uint64_t v33 = v32 + 16;
    int v58 = a4 + 2;
    a4[2] = v32 + 16;
    goto LABEL_36;
  }
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 32);
  uint64_t v8 = &a2[a3];
  int v57 = (uint64_t *)(a1 + 32);
  unint64_t v56 = v8;
  while (1)
  {
    unint64_t v60 = *v6;
    if (*(void *)(a1 + 24) == v60) {
      goto LABEL_5;
    }
    int v63 = 0;
    int v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v7, &v60, &v63);
    unint64_t v11 = 0;
    if (v10) {
      unint64_t v11 = v63[1];
    }
    unint64_t v59 = v11;
    int v63 = 0;
    char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v59, &v63);
    unsigned int v13 = v63;
    if ((v12 & 1) == 0)
    {
      unsigned int v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v59, &v59, v63);
      *unsigned int v13 = v59;
      v13[1] = 0;
      unint64_t v13[2] = 0;
      v13[3] = 0;
    }
    unint64_t v15 = (char *)v13[2];
    unint64_t v14 = v13[3];
    if ((unint64_t)v15 >= v14) {
      break;
    }
    *(void *)unint64_t v15 = v60;
    uint64_t v9 = (uint64_t)(v15 + 8);
LABEL_4:
    unint64_t v13[2] = v9;
LABEL_5:
    if (++v6 == v8)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (a3 >> 60) {
LABEL_70:
      }
        abort();
      unsigned int v32 = (char *)operator new(16 * a3);
      a4[2] = &v32[16 * a3];
      int v58 = a4 + 2;
      a4[1] = v32;
      uint64_t v33 = a4 + 1;
      *a4 = v32;
      *(void *)unsigned int v32 = *(void *)(a1 + 24);
      *((void *)v32 + 1) = 0;
      uint64_t v34 = v32 + 16;
LABEL_36:
      uint64_t v35 = 0;
      *uint64_t v33 = v34;
      while (2)
      {
        unint64_t v60 = *(void *)&v32[16 * v35];
        int v63 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v60, &v63))
        {
          unsigned int v37 = (uint64_t *)v63[1];
          unsigned int v36 = (uint64_t *)v63[2];
          if (v37 == v36) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v60, &v60, v63);
          unsigned int v37 = 0;
          *uint64_t v38 = v60;
          v38[1] = 0;
          v38[2] = 0;
          void v38[3] = 0;
          unsigned int v36 = (uint64_t *)v38[2];
          if (!v36) {
            goto LABEL_38;
          }
        }
        unsigned int v39 = *v58;
LABEL_45:
        while (1)
        {
          uint64_t v41 = *v37;
          if (v34 >= v39) {
            break;
          }
          unint64_t v40 = v60;
          *(void *)uint64_t v34 = v41;
          *((void *)v34 + 1) = v40;
          v34 += 16;
          *uint64_t v33 = v34;
          if (++v37 == v36) {
            goto LABEL_37;
          }
        }
        uint64_t v42 = (v34 - v32) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          goto LABEL_70;
        }
        if ((v39 - v32) >> 3 > v43) {
          unint64_t v43 = (v39 - v32) >> 3;
        }
        if ((unint64_t)(v39 - v32) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v43 >> 60) {
          goto LABEL_71;
        }
        uint64_t v44 = 16 * v43;
        unint64_t v45 = (char *)operator new(16 * v43);
        unint64_t v46 = v60;
        unsigned int v47 = &v45[16 * v42];
        *(void *)unsigned int v47 = v41;
        *((void *)v47 + 1) = v46;
        if (v34 == v32)
        {
          int v49 = &v45[16 * v42];
          unsigned int v39 = &v45[v44];
          uint64_t v34 = v47 + 16;
          *a4 = v47;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v48 = &v45[16 * v42];
          do
          {
            int v49 = v48 - 16;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v34 - 1);
            v34 -= 16;
            v48 -= 16;
          }
          while (v34 != v32);
          unsigned int v39 = &v45[v44];
          uint64_t v34 = v47 + 16;
          *a4 = v49;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32) {
LABEL_56:
          }
            operator delete(v32);
        }
        unsigned int v32 = v49;
        *uint64_t v33 = v34;
        if (++v37 == v36)
        {
LABEL_37:
          unsigned int v32 = *a4;
LABEL_38:
          if (++v35 >= (unint64_t)((v34 - v32) >> 4))
          {
            int v50 = v61[0];
            if (v62)
            {
              uint64_t v51 = (void *)((char *)v61[0] + 16);
              uint64_t v52 = 32 * v62;
              do
              {
                if ((*(v51 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  uint64_t v53 = (void *)*(v51 - 1);
                  if (v53)
                  {
                    *uint64_t v51 = v53;
                    operator delete(v53);
                  }
                }
                v51 += 4;
                v52 -= 32;
              }
              while (v52);
              int v50 = v61[0];
              unint64_t v54 = (void *)(32 * v62);
            }
            else
            {
              unint64_t v54 = 0;
            }
            llvm::deallocate_buffer(v50, v54);
          }
          continue;
        }
        goto LABEL_45;
      }
    }
  }
  unint64_t v16 = (char *)v13[1];
  uint64_t v17 = (v15 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_70;
  }
  uint64_t v19 = v14 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
LABEL_71:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    int v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    *(void *)unsigned int v22 = v60;
    uint64_t v9 = (uint64_t)(v22 + 8);
    if (v15 == v16) {
      goto LABEL_30;
    }
  }
  else
  {
    int v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    *(void *)(8 * v17) = v60;
    uint64_t v9 = 8 * v17 + 8;
    if (v15 == v16)
    {
LABEL_30:
      v13[1] = v22;
      unint64_t v13[2] = v9;
      v13[3] = &v21[8 * v20];
      uint64_t v7 = v57;
      if (v15) {
        operator delete(v15);
      }
      uint64_t v8 = v56;
      goto LABEL_4;
    }
  }
  unint64_t v23 = v15 - 8 - v16;
  if (v23 < 0x58) {
    goto LABEL_74;
  }
  if ((unint64_t)(v16 - v21) < 0x20) {
    goto LABEL_74;
  }
  uint64_t v24 = (v23 >> 3) + 1;
  uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v26 = &v15[-v25];
  v22 -= v25;
  uint64_t v27 = &v21[8 * v17 - 16];
  uint64_t v28 = (long long *)(v15 - 16);
  uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v30 = *v28;
    *((_OWORD *)v27 - 1) = *(v28 - 1);
    *(_OWORD *)uint64_t v27 = v30;
    v27 -= 32;
    v28 -= 2;
    v29 -= 4;
  }
  while (v29);
  unint64_t v15 = v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_74:
    do
    {
      uint64_t v31 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v15 != v16);
  }
  unint64_t v15 = (char *)v13[1];
  goto LABEL_30;
}

uint64_t llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>(uint64_t a1, void *a2, void *a3)
{
  if (*a3 == *a2
    || (unint64_t v6 = (((uint64_t)(*a3 - *a2) >> 3) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 3) - 1) >> 1),
        unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        BOOL v9 = __CFADD__(v8, 1),
        int v10 = v8 + 1,
        v9))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    unint64_t v14 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    LODWORD(v15) = (((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v15;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v15, (std::align_val_t)8uLL);
    *(void *)a1 = buffer;
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v19 = (char *)buffer;
      if (v18 < 3) {
        goto LABEL_16;
      }
      unint64_t v20 = v18 + 1;
      uint64_t v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      int v21 = buffer + 1;
      int64x2_t v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21[-1] = v22;
        *int v21 = v22;
        v21 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        uint64_t v24 = &buffer->i8[8 * v17];
        do
        {
          *(void *)uint64_t v19 = -4096;
          v19 += 8;
        }
        while (v19 != v24);
      }
    }
  }
  unint64_t v11 = (void *)*a2;
  char v12 = (void *)*a3;
  while (v11 != v12)
  {
    uint64_t v25 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v11, &v25) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v11, v11, v25) = *v11; {
    ++v11;
    }
  }
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(a1, v7);
    BOOL v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      unsigned int v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *unsigned int v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unint64_t v15 = &result[4 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    unint64_t v16 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v17 = 32 * v3;
      unint64_t v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          uint64_t v19 = v25;
          void *v25 = *(void *)v18;
          v19[1] = 0;
          void v19[2] = 0;
          v19[3] = 0;
          *(_OWORD *)(v19 + 1) = *(_OWORD *)((char *)v18 + 8);
          v19[3] = *((void *)v18 + 3);
          *((void *)v18 + 1) = 0;
          *((void *)v18 + 2) = 0;
          *((void *)v18 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        unint64_t v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[4 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    int64x2_t v22 = result + 4;
    uint64_t v23 = v21 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 4) = -4096;
      void *v22 = -4096;
      v22 += 8;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_23:
      uint64_t v24 = &result[4 * v20];
      do
      {
        void *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v24);
    }
  }
  return result;
}

mlir::Block *mlir::collect_regions::detail::verifyShouldAddToQueue(mlir::Block *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t result = *(mlir::Block **)(a4 + 16);
  if (result)
  {
    uint64_t result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      unsigned __int8 v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a4, a5);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
      uint64_t v23 = v11;
      if (*(unsigned char *)(a4 + 47))
      {
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v23);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(a4, AttrData, v13);
        if (v15)
        {
LABEL_8:
          if (InherentAttr) {
            unsigned __int8 v10 = 0;
          }
          uint64_t ParentOp = *(mlir::Block **)(a4 + 16);
          if (ParentOp) {
            uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          }
          if (ParentOp != a1) {
            unsigned __int8 v10 = 0;
          }
          uint64_t v17 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
          int v18 = v10 & (*(void *)(*(void *)(a4 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) & ~(*(unsigned __int8 (**)(void, uint64_t))(**(void **)(a4 + 48) + 32))(*(void *)(a4 + 48), v17);
          if (a1 == (mlir::Block *)a4) {
            int v19 = 0;
          }
          else {
            int v19 = v18;
          }
          uint64_t v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a4 + 48) + 32))(*(void *)(a4 + 48), v20);
          uint64_t v22 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
          return (mlir::Block *)(v19 & ((v21 | (*(unsigned int (**)(void, uint64_t))(**(void **)(a4 + 48)
                                                                                               + 32))(*(void *)(a4 + 48), v22)) ^ 1));
        }
        uint64_t v11 = v23;
      }
      uint64_t InherentAttr = mlir::DictionaryAttr::get(a4 + 56, v11);
      goto LABEL_8;
    }
  }
  return result;
}

void mlir::collect_regions::detail::buildLiveInsLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, int a6)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v6 = *((unsigned int *)a4 + 2);
  if (v6)
  {
    uint64_t v9 = a3;
    uint64_t v12 = *a4;
    unint64_t v56 = (void *)(a1 + 16);
    uint64_t v57 = (uint64_t)&(*a4)[v6];
    unint64_t v54 = (void *)(a3 + 16);
    unint64_t v55 = (void *)(a2 + 16);
    while (1)
    {
      uint64_t v13 = *v12;
      uint64_t v14 = *(void *)(*v12 + 24);
      unint64_t v15 = *(unsigned int *)(v9 + 8);
      if (v15 >= *(unsigned int *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v54, v15 + 1, 8);
        unint64_t v15 = *(unsigned int *)(v9 + 8);
      }
      *(void *)(*(void *)v9 + 8 * v15) = v14;
      ++*(_DWORD *)(v9 + 8);
      if ((*(unsigned char *)(v13 + 46) & 0x80) != 0)
      {
        uint64_t v16 = *(unsigned int *)(v13 + 68);
        if (v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *(void *)(v13 + 72);
          do
          {
            uint64_t NextResultAtOffset = *(void *)(v18 + 32 * v17 + 24);
            if ((~*(_DWORD *)(NextResultAtOffset + 8) & 7) == 0)
            {
LABEL_20:
              uint64_t v27 = *(void **)a1;
              uint64_t v28 = *(unsigned int *)(a1 + 8);
              uint64_t v29 = *(void **)a1;
              if (v28)
              {
                uint64_t v30 = 8 * v28;
                uint64_t v29 = *(void **)a1;
                while (*v29 != NextResultAtOffset)
                {
                  ++v29;
                  v30 -= 8;
                  if (!v30)
                  {
                    uint64_t v29 = &v27[v28];
                    break;
                  }
                }
              }
              if (v28 == v29 - v27)
              {
                uint64_t v31 = NextResultAtOffset;
                if (v28 >= *(_DWORD *)(a1 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v56, v28 + 1, 8);
                  uint64_t v28 = *(unsigned int *)(a1 + 8);
                  uint64_t v27 = *(void **)a1;
                }
                v27[v28] = v31;
                ++*(_DWORD *)(a1 + 8);
              }
              goto LABEL_10;
            }
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
            uint64_t v20 = *a5;
            uint64_t v21 = *((unsigned int *)a5 + 4);
            if (v21)
            {
              LODWORD(v22) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v21 - 1);
              uint64_t v23 = (uint64_t *)(v20 + 8 * v22);
              uint64_t v24 = *v23;
              if (*v23 == DefiningOp) {
                goto LABEL_19;
              }
              int v25 = 1;
              while (v24 != -4096)
              {
                int v26 = v22 + v25++;
                uint64_t v22 = v26 & (v21 - 1);
                uint64_t v24 = *(void *)(v20 + 8 * v22);
                if (v24 == DefiningOp)
                {
                  uint64_t v23 = (uint64_t *)(v20 + 8 * v22);
                  goto LABEL_19;
                }
              }
            }
            uint64_t v23 = (uint64_t *)(v20 + 8 * v21);
LABEL_19:
            if (v23 == (uint64_t *)(v20 + 8 * v21)) {
              goto LABEL_20;
            }
LABEL_10:
            ++v17;
          }
          while (v17 != v16);
        }
      }
      uint64_t v32 = *(unsigned int *)(v13 + 36);
      uint64_t v33 = v32 ? v13 - 16 : 0;
      if (v32) {
        break;
      }
LABEL_3:
      ++v12;
      uint64_t v9 = a3;
      if (v12 == (uint64_t *)v57) {
        return;
      }
    }
    uint64_t v34 = 0;
    while (1)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v33, v34);
      uint64_t v35 = *(void **)NextResultAtOffset;
      if (*(void *)NextResultAtOffset)
      {
        uint64_t v36 = *((unsigned int *)a5 + 4);
        if (v36)
        {
          uint64_t v37 = *a5;
          unsigned int v38 = v36 - 1;
          uint64_t v39 = *a5 + 8 * v36;
          do
          {
            uint64_t v40 = v35[2];
            LODWORD(v41) = ((v40 >> 4) ^ (v40 >> 9)) & v38;
            uint64_t v42 = (uint64_t *)(v37 + 8 * v41);
            uint64_t v43 = *v42;
            if (*v42 != v40)
            {
              int v45 = 1;
              while (v43 != -4096)
              {
                int v46 = v41 + v45++;
                uint64_t v41 = v46 & v38;
                uint64_t v43 = *(void *)(v37 + 8 * v41);
                if (v43 == v40)
                {
                  uint64_t v42 = (uint64_t *)(v37 + 8 * v41);
                  goto LABEL_39;
                }
              }
              goto LABEL_50;
            }
LABEL_39:
            BOOL v44 = v42 == (uint64_t *)v39;
            if (v42 == (uint64_t *)v39) {
              break;
            }
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
          if (a6) {
            goto LABEL_51;
          }
LABEL_52:
          if (v44)
          {
            int v49 = *(void **)a2;
            uint64_t v50 = *(unsigned int *)(a2 + 8);
            uint64_t v51 = *(void **)a2;
            if (v50)
            {
              uint64_t v52 = 8 * v50;
              uint64_t v51 = *(void **)a2;
              while (*v51 != NextResultAtOffset)
              {
                ++v51;
                v52 -= 8;
                if (!v52)
                {
                  uint64_t v51 = &v49[v50];
                  break;
                }
              }
            }
            if (v50 == v51 - v49)
            {
              uint64_t v53 = NextResultAtOffset;
              if (v50 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v55, v50 + 1, 8);
                uint64_t v50 = *(unsigned int *)(a2 + 8);
                int v49 = *(void **)a2;
              }
              v49[v50] = v53;
              ++*(_DWORD *)(a2 + 8);
            }
          }
          goto LABEL_34;
        }
LABEL_50:
        BOOL v44 = 1;
        if ((a6 & 1) == 0) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!a6) {
          goto LABEL_34;
        }
        BOOL v44 = 0;
      }
LABEL_51:
      uint64_t v47 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
      uint64_t v48 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v47 + 48) + 32))(*(void *)(v47 + 48), v48) & 1) == 0) {
        goto LABEL_52;
      }
LABEL_34:
      if (++v34 == v32) {
        goto LABEL_3;
      }
    }
  }
}

void mlir::collectRegions(ZinIrHalH13g *a1, ZinIrHalH13g *a2, void *a3)
{
  v67[9] = *MEMORY[0x263EF8340];
  v43[0] = a1;
  v43[1] = a2;
  uint64_t v42 = a3;
  uint64_t v4 = a3[1];
  int v38 = 0;
  uint64_t v40 = 0;
  uint64_t v37 = &unk_26C35CE20;
  uint64_t v39 = 0;
  int v41 = 0;
  *(void *)(v4 + 8) = &v37;
  *(void *)&long long v22 = mlir::SymbolRefAttr::get(a1, a2);
  v56[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v56);
  v36[2] = (*(uint64_t (**)(void *))(*a3 + 16))(a3);
  (*(void (**)(void *__return_ptr, void *))(*a3 + 56))(v36, a3);
  unsigned int v62 = &v65;
  int v64 = 6;
  unint64_t v59 = &v61;
  *(void *)unint64_t v60 = 0x600000000;
  char v35 = 1;
  unsigned int v63 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 0;
  uint64_t v33 = v42;
  uint64_t v34 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x600000000;
  v56[0] = (uint64_t)v43;
  v56[1] = (uint64_t)&v42;
  v56[2] = (uint64_t)&v22;
  v56[3] = (uint64_t)v57;
  mlir::detail::walk<mlir::ForwardIterator>(v43[0], (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>, (uint64_t)v56, 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v5 = *((void *)v43[0] + 2);
    ZinIrHalH13g::~ZinIrHalH13g(v43[0]);
    *(void *)(v4 + 16) = v5;
    *(void *)(v4 + 24) = v6;
    int v7 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((unint64_t)v24 >> 9));
    if ((void)v23 == *((void *)&v22 + 1))
    {
      unsigned int v8 = 0;
      unsigned __int8 v10 = 0;
      uint64_t v9 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((*((void *)&v24 + 1) + (void)v24) >> 9));
    }
    else
    {
      unsigned int v8 = &(*v7)[v24 & 0x1FF];
      uint64_t v9 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((*((void *)&v24 + 1) + (void)v24) >> 9));
      unsigned __int8 v10 = &(*v9)[(*((void *)&v24 + 1) + v24) & 0x1FF];
    }
    v56[0] = (uint64_t)&v62;
    std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(v7, v8, v9, v10, v56);
    (*(void (**)(uint64_t *__return_ptr))(*v42 + 80))(v56);
    v66[0] = v67;
    v67[0] = "placement";
    v67[1] = 9;
    v66[1] = (uint64_t *)0x200000001;
    mlir::ConversionTarget::setDialectAction(v56, (uint64_t)v67, 1, 2);
    if (v66[0] != v67) {
      free(v66[0]);
    }
    uint64_t v53 = &v55;
    uint64_t v54 = 0x600000000;
    uint64_t v50 = &v52;
    uint64_t v51 = 0x600000000;
    v66[0] = (uint64_t *)v62;
    v13[0] = (llvm *)((char *)v62 + 8 * v63);
    llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)v21, v66, (uint64_t **)v13);
    mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v59, (uint64_t **)&v62, (uint64_t *)v21, 0);
    v48[0] = &v49;
    v48[1] = (void *)0x600000000;
    v46[0] = &v47;
    v46[1] = (void *)0x600000000;
    uint64_t v11 = v42;
    mlir::ValueRange::ValueRange(v45, (uint64_t)v50, v51);
    (*(void (**)(void *, unint64_t, unint64_t, void **))(*v11 + 192))(v11, v45[0], v45[1], v48);
    uint64_t v12 = v42;
    mlir::ValueRange::ValueRange(v44, (uint64_t)v53, v54);
    (*(void (**)(void *, unint64_t, unint64_t, void **))(*v12 + 192))(v12, v44[0], v44[1], v46);
    v13[1] = 0;
    v13[0] = 0;
    int v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    mlir::FusedLoc::get((uint64_t **)v59, (mlir::MLIRContext *)v60[0], 0, *(mlir::UnknownLoc **)v4);
  }
  if (v57[0] != v58) {
    free(v57[0]);
  }
  llvm::deallocate_buffer(v30, (void *)(8 * v32));
}

uint64_t sub_2117F3E60()
{
  return 1;
}

void mlir::anonymous namespace'::eraseOpsWeCannotConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  v247[0] = 0;
  v247[1] = 0;
  unsigned int v248 = 0;
  v245[0] = 0;
  v245[1] = 0;
  unsigned int v246 = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  if (v11)
  {
    uint64_t v13 = *(uint64_t **)a1;
    uint64_t v237 = *(void *)a1 + 8 * v11;
    while (1)
    {
      uint64_t v14 = *v13;
      uint64_t v244 = *v13;
      uint64_t v15 = *(void *)a7;
      uint64_t v16 = *(unsigned int *)(a7 + 16);
      if (v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v18 = (uint64_t *)(v15 + 8 * v17);
        uint64_t v19 = *v18;
        if (*v18 != v14)
        {
          int v20 = 1;
          do
          {
            if (v19 == -4096) {
              goto LABEL_10;
            }
            int v21 = v17 + v20++;
            uint64_t v17 = v21 & (v16 - 1);
            uint64_t v19 = *(void *)(v15 + 8 * v17);
          }
          while (v19 != v14);
          uint64_t v18 = (uint64_t *)(v15 + 8 * v17);
        }
      }
      else
      {
LABEL_10:
        uint64_t v18 = (uint64_t *)(v15 + 8 * v16);
      }
      if (v18 == (uint64_t *)(v15 + 8 * v16)) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v14, a7) & 1) == 0) {
        break;
      }
      if (++v13 == (uint64_t *)v237) {
        goto LABEL_167;
      }
    }
    uint64_t v14 = v244;
LABEL_14:
    uint64_t v22 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v14 + 48) + 32))(*(void *)(v14 + 48), v22) & 1) == 0)
    {
      int v23 = *(_DWORD *)(a7 + 16);
      if (v23)
      {
        uint64_t v24 = *(void *)a7;
        unsigned int v25 = v23 - 1;
        LODWORD(v26) = ((v244 >> 4) ^ (v244 >> 9)) & (v23 - 1);
        uint64_t v27 = (uint64_t *)(*(void *)a7 + 8 * v26);
        uint64_t v28 = *v27;
        if (v244 != *v27)
        {
          int v136 = 1;
          do
          {
            if (v28 == -4096) {
              goto LABEL_18;
            }
            int v137 = v26 + v136++;
            uint64_t v26 = v137 & v25;
            uint64_t v28 = *(void *)(v24 + 8 * v26);
          }
          while (v244 != v28);
          uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
        }
        *uint64_t v27 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
LABEL_18:
    if ((*(unsigned char *)(v244 + 46) & 0x80) != 0)
    {
      uint64_t v29 = *(unsigned int *)(v244 + 68);
      if (v29)
      {
        uint64_t v30 = 0;
        uint64_t v31 = *(void *)(v244 + 72);
        do
        {
          uint64_t v37 = *(void **)(v31 + 32 * v30 + 24);
          __p[0] = v37;
          int v38 = (void *)*v37;
          if (*v37)
          {
            while (v244 == v38[2])
            {
              int v38 = (void *)*v38;
              if (!v38) {
                goto LABEL_29;
              }
            }
          }
          else
          {
LABEL_29:
            *(void *)&long long v249 = v37;
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v249);
            if (DefiningOp)
            {
              uint64_t v40 = DefiningOp;
              uint64_t v41 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v40 + 48) + 32))(*(void *)(v40 + 48), v41))
              {
                uint64_t v42 = mlir::Value::getDefiningOp((mlir::Value *)__p);
                uint64_t v43 = v42;
                uint64_t v44 = *(void *)a7;
                uint64_t v34 = *(unsigned int *)(a7 + 16);
                unsigned int v45 = v42 >> 4;
                if (v34)
                {
                  LODWORD(v46) = (v45 ^ (v42 >> 9)) & (v34 - 1);
                  uint64_t v47 = (uint64_t *)(v44 + 8 * v46);
                  uint64_t v48 = *v47;
                  if (*v47 != v42)
                  {
                    int v49 = 1;
                    do
                    {
                      if (v48 == -4096) {
                        goto LABEL_37;
                      }
                      int v50 = v46 + v49++;
                      uint64_t v46 = v50 & (v34 - 1);
                      uint64_t v48 = *(void *)(v44 + 8 * v46);
                    }
                    while (v48 != v42);
                    uint64_t v47 = (uint64_t *)(v44 + 8 * v46);
                  }
                }
                else
                {
LABEL_37:
                  uint64_t v47 = (uint64_t *)(v44 + 8 * v34);
                }
                if (v47 != (uint64_t *)(v44 + 8 * v34))
                {
                  mlir::Operation::removeAttr(v42, *a6);
                  uint64_t v44 = *(void *)a7;
                  LODWORD(v34) = *(_DWORD *)(a7 + 16);
                }
                if (v34)
                {
                  unsigned int v51 = v34 - 1;
                  LODWORD(v34) = (v34 - 1) & (v45 ^ (v43 >> 9));
                  uint64_t v36 = (uint64_t *)(v44 + 8 * v34);
                  uint64_t v35 = *v36;
                  if (v43 != *v36)
                  {
                    int v33 = 1;
                    do
                    {
                      if (v35 == -4096) {
                        goto LABEL_25;
                      }
                      int v32 = v34 + v33++;
                      uint64_t v34 = v32 & v51;
                      uint64_t v35 = *(void *)(v44 + 8 * v34);
                    }
                    while (v43 != v35);
                    uint64_t v36 = (uint64_t *)(v44 + 8 * v34);
                  }
                  *uint64_t v36 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
          }
LABEL_25:
          ++v30;
        }
        while (v30 != v29);
      }
    }
    long long v242 = 0u;
    unsigned long long v243 = 0u;
    *(_OWORD *)__p = 0u;
    v239[0] = 0;
    v239[1] = 0;
    unsigned int v240 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    uint64_t v53 = *((void *)&v243 + 1);
    unint64_t v52 = v243;
    *(void *)(*(void *)((char *)__p[1] + ((((void)v243 + *((void *)&v243 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v243 + *((void *)&v243 + 1)) & 0x1FF)) = v244;
    *((void *)&v243 + 1) = v53 + 1;
    if (v53 == -1) {
      goto LABEL_111;
    }
    uint64_t v54 = (char *)__p[1];
LABEL_48:
    uint64_t v56 = *(void *)(*(void *)&v54[(v52 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v52 & 0x1FF));
    if ((*(unsigned char *)(v56 + 46) & 0x80) == 0 || (uint64_t v57 = *(unsigned int *)(v56 + 68), !v57))
    {
LABEL_99:
      char v96 = 0;
      goto LABEL_100;
    }
    uint64_t v58 = 0;
    uint64_t v59 = *(void *)(v56 + 72);
    while (1)
    {
      *(void *)&long long v249 = *(void *)(v59 + 32 * v58 + 24);
      *(void *)&v254[0] = 0;
      uint64_t v64 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
      *(void *)&v254[0] = v64;
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v66 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v65 + 48) + 32))(*(void *)(v65 + 48), v66) & 1) == 0)
        {
          uint64_t v67 = *(void *)&v254[0];
          uint64_t v68 = *(void *)a7;
          uint64_t v69 = *(unsigned int *)(a7 + 16);
          int v70 = LODWORD(v254[0]) >> 4;
          if (v69)
          {
            LODWORD(v71) = (v70 ^ (LODWORD(v254[0]) >> 9)) & (v69 - 1);
            unsigned int v72 = (uint64_t *)(v68 + 8 * v71);
            uint64_t v73 = *v72;
            if (*v72 != *(void *)&v254[0])
            {
              int v74 = 1;
              do
              {
                if (v73 == -4096) {
                  goto LABEL_61;
                }
                int v75 = v71 + v74++;
                uint64_t v71 = v75 & (v69 - 1);
                uint64_t v73 = *(void *)(v68 + 8 * v71);
              }
              while (v73 != *(void *)&v254[0]);
              unsigned int v72 = (uint64_t *)(v68 + 8 * v71);
            }
          }
          else
          {
LABEL_61:
            unsigned int v72 = (uint64_t *)(v68 + 8 * v69);
          }
          if (v72 != (uint64_t *)(v68 + 8 * v69))
          {
            char v96 = 1;
LABEL_100:
            uint64_t v54 = (char *)__p[1];
            uint64_t v97 = *((void *)&v243 + 1) - 1;
            unint64_t v52 = v243 + 1;
            unsigned long long v243 = __PAIR128__(*((unint64_t *)&v243 + 1), (uint64_t)v243 + 1) + __PAIR128__(-1, 0);
            if (v52 >= 0x400)
            {
              operator delete(*(void **)__p[1]);
              uint64_t v54 = (char *)__p[1] + 8;
              unint64_t v52 = v243 - 512;
              __p[1] = (char *)__p[1] + 8;
              *(void *)&unsigned long long v243 = v243 - 512;
              uint64_t v97 = *((void *)&v243 + 1);
            }
            BOOL v94 = v97 == 0;
            char v55 = v96 ^ 1;
            if (v94) {
              char v55 = 0;
            }
            if (v55) {
              goto LABEL_48;
            }
            if (v96)
            {
              uint64_t v98 = v244;
              uint64_t v99 = *(unsigned int *)(v244 + 36);
              uint64_t v100 = v244 - 16;
              if (v99) {
                uint64_t v101 = v244 - 16;
              }
              else {
                uint64_t v101 = 0;
              }
              uint64_t v256 = v101;
              uint64_t v257 = v99;
              mlir::ResultRange::use_begin(&v256, (uint64_t *)v254);
              uint64_t v102 = *(unsigned int *)(v98 + 36);
              if (v102) {
                uint64_t v103 = v100;
              }
              else {
                uint64_t v103 = 0;
              }
              uint64_t v256 = v103;
              uint64_t v257 = v102;
              mlir::ResultRange::use_end(&v256, v252);
              uint64_t v104 = v255;
              uint64_t v251 = v255;
              long long v249 = v254[0];
              long long v250 = v254[1];
              uint64_t v105 = v253;
              while (2)
              {
                if (v104 == v105) {
                  goto LABEL_159;
                }
                uint64_t v256 = *(void *)(v104 + 16);
                uint64_t v119 = v256;
                uint64_t v120 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
                if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v119 + 48) + 32))(*(void *)(v119 + 48), v120) & 1) == 0)
                {
                  uint64_t v121 = *(void *)a7;
                  uint64_t v116 = *(unsigned int *)(a7 + 16);
                  if (v116)
                  {
                    LODWORD(v122) = ((v256 >> 4) ^ (v256 >> 9)) & (v116 - 1);
                    unsigned int v123 = (uint64_t *)(v121 + 8 * v122);
                    uint64_t v124 = *v123;
                    if (*v123 != v256)
                    {
                      int v125 = 1;
                      do
                      {
                        if (v124 == -4096) {
                          goto LABEL_137;
                        }
                        int v126 = v122 + v125++;
                        uint64_t v122 = v126 & (v116 - 1);
                        uint64_t v124 = *(void *)(v121 + 8 * v122);
                      }
                      while (v124 != v256);
                      unsigned int v123 = (uint64_t *)(v121 + 8 * v122);
                    }
                  }
                  else
                  {
LABEL_137:
                    unsigned int v123 = (uint64_t *)(v121 + 8 * v116);
                  }
                  if (v123 != (uint64_t *)(v121 + 8 * v116))
                  {
                    mlir::Operation::removeAttr(v256, *a6);
                    if (!v246)
                    {
                      unsigned int v134 = 0;
                      goto LABEL_151;
                    }
                    unsigned int v127 = ((v256 >> 4) ^ (v256 >> 9)) & (v246 - 1);
                    uint64_t v128 = (uint64_t *)((char *)v245[0] + 8 * v127);
                    uint64_t v129 = *v128;
                    if (v256 != *v128)
                    {
                      uint64_t v130 = 0;
                      int v131 = 1;
                      while (v129 != -4096)
                      {
                        if (v130) {
                          BOOL v132 = 0;
                        }
                        else {
                          BOOL v132 = v129 == -8192;
                        }
                        if (v132) {
                          uint64_t v130 = v128;
                        }
                        unsigned int v133 = v127 + v131++;
                        unsigned int v127 = v133 & (v246 - 1);
                        uint64_t v128 = (uint64_t *)((char *)v245[0] + 8 * v127);
                        uint64_t v129 = *v128;
                        if (v256 == *v128) {
                          goto LABEL_152;
                        }
                      }
                      if (v130) {
                        unsigned int v134 = v130;
                      }
                      else {
                        unsigned int v134 = v128;
                      }
LABEL_151:
                      llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v245, v134, &v256);
                    }
LABEL_152:
                    uint64_t v121 = *(void *)a7;
                    LODWORD(v116) = *(_DWORD *)(a7 + 16);
                  }
                  if (v116)
                  {
                    unsigned int v135 = v116 - 1;
                    LODWORD(v116) = ((v256 >> 4) ^ (v256 >> 9)) & (v116 - 1);
                    uint64_t v118 = (uint64_t *)(v121 + 8 * v116);
                    uint64_t v117 = *v118;
                    if (v256 != *v118)
                    {
                      int v115 = 1;
                      do
                      {
                        if (v117 == -4096) {
                          goto LABEL_128;
                        }
                        int v114 = v116 + v115++;
                        uint64_t v116 = v114 & v135;
                        uint64_t v117 = *(void *)(v121 + 8 * v116);
                      }
                      while (v256 != v117);
                      uint64_t v118 = (uint64_t *)(v121 + 8 * v116);
                    }
                    *uint64_t v118 = -8192;
                    *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                  }
                }
LABEL_128:
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v254);
                uint64_t v104 = v255;
                continue;
              }
            }
LABEL_111:
            if (v248)
            {
              unsigned int v106 = ((v244 >> 4) ^ (v244 >> 9)) & (v248 - 1);
              unint64_t v107 = (uint64_t *)(v247[0] + 8 * v106);
              uint64_t v108 = *v107;
              if (v244 != *v107)
              {
                int v109 = 0;
                int v110 = 1;
                while (v108 != -4096)
                {
                  if (v109) {
                    BOOL v111 = 0;
                  }
                  else {
                    BOOL v111 = v108 == -8192;
                  }
                  if (v111) {
                    int v109 = v107;
                  }
                  unsigned int v112 = v106 + v110++;
                  unsigned int v106 = v112 & (v248 - 1);
                  unint64_t v107 = (uint64_t *)(v247[0] + 8 * v106);
                  uint64_t v108 = *v107;
                  if (v244 == *v107) {
                    goto LABEL_159;
                  }
                }
                if (v109) {
                  unint64_t v113 = v109;
                }
                else {
                  unint64_t v113 = v107;
                }
LABEL_123:
                llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v247, v113, &v244);
              }
LABEL_159:
              llvm::deallocate_buffer(v239[0], (void *)(8 * v240));
            }
            unint64_t v113 = 0;
            goto LABEL_123;
          }
          if (v248)
          {
            LODWORD(v76) = (v248 - 1) & (v70 ^ (LODWORD(v254[0]) >> 9));
            unint64_t v77 = (uint64_t *)(v247[0] + 8 * v76);
            uint64_t v78 = *v77;
            if (*v77 != *(void *)&v254[0])
            {
              int v79 = 1;
              do
              {
                if (v78 == -4096) {
                  goto LABEL_69;
                }
                int v80 = v76 + v79++;
                uint64_t v76 = v80 & (v248 - 1);
                uint64_t v78 = *(void *)(v247[0] + 8 * v76);
              }
              while (v78 != *(void *)&v254[0]);
              unint64_t v77 = (uint64_t *)(v247[0] + 8 * v76);
            }
          }
          else
          {
LABEL_69:
            unint64_t v77 = (uint64_t *)(v247[0] + 8 * v248);
          }
          if (v77 == (uint64_t *)(v247[0] + 8 * v248))
          {
            unsigned int v81 = v240;
            if (v240)
            {
              LODWORD(v82) = (v240 - 1) & (v70 ^ (LODWORD(v254[0]) >> 9));
              unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v82);
              uint64_t v84 = *(void *)v83;
              if (*(void *)v83 != *(void *)&v254[0])
              {
                int v85 = 1;
                do
                {
                  if (v84 == -4096) {
                    goto LABEL_77;
                  }
                  int v86 = v82 + v85++;
                  uint64_t v82 = v86 & (v240 - 1);
                  uint64_t v84 = *((void *)v239[0] + v82);
                }
                while (v84 != *(void *)&v254[0]);
                unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v82);
              }
            }
            else
            {
LABEL_77:
              unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v240);
            }
            if (v83 == (llvm *)((char *)v239[0] + 8 * v240))
            {
              int v87 = (char *)__p[1];
              if ((void *)v242 == __p[1]) {
                unint64_t v88 = 0;
              }
              else {
                unint64_t v88 = (((void)v242 - (unint64_t)__p[1]) << 6) - 1;
              }
              uint64_t v89 = *((void *)&v243 + 1);
              unint64_t v90 = *((void *)&v243 + 1) + v243;
              if (v88 == *((void *)&v243 + 1) + (void)v243)
              {
                std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                uint64_t v89 = *((void *)&v243 + 1);
                int v87 = (char *)__p[1];
                unint64_t v90 = v243 + *((void *)&v243 + 1);
                uint64_t v67 = *(void *)&v254[0];
                unsigned int v81 = v240;
              }
              *(void *)(*(void *)&v87[(v90 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v90 & 0x1FF)) = v67;
              *((void *)&v243 + 1) = v89 + 1;
              if (!v81)
              {
                int v91 = 0;
LABEL_86:
                llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v239, v91, (uint64_t *)v254);
                goto LABEL_52;
              }
              unsigned int v60 = v81 - 1;
              unsigned int v61 = ((LODWORD(v254[0]) >> 4) ^ (LODWORD(v254[0]) >> 9)) & v60;
              unsigned int v62 = (uint64_t *)((char *)v239[0] + 8 * v61);
              uint64_t v63 = *v62;
              if (*(void *)&v254[0] != *v62)
              {
                int v92 = 0;
                int v93 = 1;
                while (v63 != -4096)
                {
                  if (v92) {
                    BOOL v94 = 0;
                  }
                  else {
                    BOOL v94 = v63 == -8192;
                  }
                  if (v94) {
                    int v92 = v62;
                  }
                  unsigned int v95 = v61 + v93++;
                  unsigned int v61 = v95 & v60;
                  unsigned int v62 = (uint64_t *)((char *)v239[0] + 8 * v61);
                  uint64_t v63 = *v62;
                  if (*(void *)&v254[0] == *v62) {
                    goto LABEL_52;
                  }
                }
                if (v92) {
                  int v91 = v92;
                }
                else {
                  int v91 = v62;
                }
                goto LABEL_86;
              }
            }
          }
        }
      }
LABEL_52:
      if (++v58 == v57) {
        goto LABEL_99;
      }
    }
  }
LABEL_167:
  unsigned int v138 = (uint64_t **)a1;
  mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, (uint64_t **)a1, (uint64_t *)a7, 0);
  uint64_t v139 = *(unsigned int *)(a1 + 8);
  if (!v139) {
    goto LABEL_274;
  }
  char v232 = 0;
  int v140 = a9;
  unint64_t v141 = *(uint64_t **)a1;
  uint64_t v142 = *(void *)a1 + 8 * v139;
  uint64_t v233 = v142;
  while (1)
  {
    uint64_t v143 = *v141;
    uint64_t v144 = *(void *)a7;
    uint64_t v145 = *(unsigned int *)(a7 + 16);
    if (v145)
    {
      LODWORD(v146) = ((v143 >> 4) ^ (v143 >> 9)) & (v145 - 1);
      int v147 = (uint64_t *)(v144 + 8 * v146);
      uint64_t v148 = *v147;
      if (*v147 != v143)
      {
        int v149 = 1;
        do
        {
          if (v148 == -4096) {
            goto LABEL_177;
          }
          int v150 = v146 + v149++;
          uint64_t v146 = v150 & (v145 - 1);
          uint64_t v148 = *(void *)(v144 + 8 * v146);
        }
        while (v148 != v143);
        int v147 = (uint64_t *)(v144 + 8 * v146);
      }
    }
    else
    {
LABEL_177:
      int v147 = (uint64_t *)(v144 + 8 * v145);
    }
    if (v147 == (uint64_t *)(v144 + 8 * v145) || v140 == 0) {
      goto LABEL_170;
    }
    uint64_t v152 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v143 + 48) + 32))(*(void *)(v143 + 48), v152))goto LABEL_170; {
    if ((*(unsigned char *)(v143 + 46) & 0x80) != 0 && (uint64_t v153 = *(unsigned int *)(v143 + 68), v153))
    }
    {
      uint64_t v154 = 0;
      uint64_t v155 = *(void *)(v143 + 72);
      while (1)
      {
        uint64_t v157 = *(void *)(v155 + 32 * v154 + 24);
        *(void *)&long long v249 = v157;
        uint64_t v158 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
        if (!v158
          || (uint64_t v159 = v158,
              uint64_t v160 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(void, uint64_t))(**(void **)(v159 + 48) + 32))(*(void *)(v159 + 48), v160) & 1) == 0))
        {
          char v161 = *(void **)a3;
          uint64_t v162 = *(unsigned int *)(a3 + 8);
          if (v162)
          {
            uint64_t v163 = 8 * v162;
            unint64_t v156 = *(void **)a3;
            do
            {
              if (*v156 == v157) {
                goto LABEL_187;
              }
              ++v156;
              v163 -= 8;
            }
            while (v163);
            unint64_t v156 = &v161[v162];
          }
          else
          {
            unint64_t v156 = *(void **)a3;
          }
LABEL_187:
          if (v162 == v156 - v161) {
            break;
          }
        }
        if (++v154 == v153) {
          goto LABEL_196;
        }
      }
      int v236 = 0;
    }
    else
    {
LABEL_196:
      int v236 = 1;
    }
    uint64_t v164 = *(unsigned int *)(v143 + 36);
    uint64_t v165 = v164 ? v143 - 16 : 0;
    if (!v164) {
      break;
    }
    uint64_t v166 = 0;
    do
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v165, v166);
      unsigned int v172 = *(void **)a4;
      uint64_t v173 = *(unsigned int *)(a4 + 8);
      if (v173)
      {
        uint64_t v174 = 8 * v173;
        unint64_t v167 = *(void **)a4;
        do
        {
          if (*v167 == NextResultAtOffset) {
            goto LABEL_204;
          }
          ++v167;
          v174 -= 8;
        }
        while (v174);
        unint64_t v167 = &v172[v173];
      }
      else
      {
        unint64_t v167 = *(void **)a4;
      }
LABEL_204:
      uint64_t v168 = v167 - v172;
      BOOL v169 = v168 == v173;
      ++v166;
    }
    while (v168 != v173 && v166 != v164);
    uint64_t v175 = *(unsigned int *)(v143 + 36);
    if (!v175) {
      goto LABEL_216;
    }
    uint64_t v176 = v143 - 16;
    int v140 = a9;
    uint64_t v142 = v233;
LABEL_217:
    *(void *)&v254[0] = v176;
    *((void *)&v254[0] + 1) = v175;
    mlir::ResultRange::use_begin((uint64_t *)v254, (uint64_t *)__p);
    uint64_t v177 = *(unsigned int *)(v143 + 36);
    if (v177) {
      uint64_t v178 = v143 - 16;
    }
    else {
      uint64_t v178 = 0;
    }
    *(void *)&v254[0] = v178;
    *((void *)&v254[0] + 1) = v177;
    mlir::ResultRange::use_end((uint64_t *)v254, v252);
    uint64_t v179 = v243;
    uint64_t v251 = v243;
    long long v249 = *(_OWORD *)__p;
    long long v250 = v242;
    uint64_t v180 = v253;
    if ((void)v243 == v253)
    {
      BOOL v190 = 0;
    }
    else
    {
      do
      {
        uint64_t v181 = *(void *)a7;
        uint64_t v182 = *(unsigned int *)(a7 + 16);
        if (v182)
        {
          uint64_t v183 = *(void *)(v179 + 16);
          LODWORD(v184) = ((v183 >> 4) ^ (v183 >> 9)) & (v182 - 1);
          unsigned int v185 = (uint64_t *)(v181 + 8 * v184);
          uint64_t v186 = *v185;
          if (*v185 != v183)
          {
            int v187 = 1;
            do
            {
              if (v186 == -4096) {
                goto LABEL_227;
              }
              int v188 = v184 + v187++;
              uint64_t v184 = v188 & (v182 - 1);
              uint64_t v186 = *(void *)(v181 + 8 * v184);
            }
            while (v186 != v183);
            unsigned int v185 = (uint64_t *)(v181 + 8 * v184);
          }
        }
        else
        {
LABEL_227:
          unsigned int v185 = (uint64_t *)(v181 + 8 * v182);
        }
        unsigned int v189 = (uint64_t *)(v181 + 8 * v182);
        BOOL v190 = v185 != v189;
        if (v185 != v189) {
          break;
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
        uint64_t v179 = v243;
      }
      while ((void)v243 != v180);
    }
    unsigned int v138 = (uint64_t **)a1;
    if ((v236 | (!v169 && !v190)) == 1)
    {
      if ((*(unsigned char *)(v143 + 46) & 0x80) != 0)
      {
        uint64_t v191 = *(unsigned int *)(v143 + 68);
        if (v191)
        {
          uint64_t v192 = 0;
          uint64_t v193 = *(void *)(v143 + 72);
          do
          {
            v239[0] = *(llvm **)(v193 + 32 * v192 + 24);
            *(llvm **)&long long v249 = v239[0];
            uint64_t v199 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
            if (v199)
            {
              uint64_t v200 = v199;
              uint64_t v201 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v200 + 48) + 32))(*(void *)(v200 + 48), v201))
              {
                uint64_t v202 = mlir::Value::getDefiningOp((mlir::Value *)v239);
                uint64_t v203 = v202;
                uint64_t v204 = *(unsigned int *)(v202 + 36);
                uint64_t v205 = v202 - 16;
                if (v204) {
                  uint64_t v206 = v202 - 16;
                }
                else {
                  uint64_t v206 = 0;
                }
                *(void *)&v254[0] = v206;
                *((void *)&v254[0] + 1) = v204;
                mlir::ResultRange::use_begin((uint64_t *)v254, (uint64_t *)__p);
                uint64_t v207 = *(unsigned int *)(v203 + 36);
                if (v207) {
                  uint64_t v208 = v205;
                }
                else {
                  uint64_t v208 = 0;
                }
                *(void *)&v254[0] = v208;
                *((void *)&v254[0] + 1) = v207;
                mlir::ResultRange::use_end((uint64_t *)v254, v252);
                uint64_t v209 = v243;
                uint64_t v251 = v243;
                long long v249 = *(_OWORD *)__p;
                long long v250 = v242;
                uint64_t v210 = v253;
                while (v209 != v210)
                {
                  uint64_t v212 = *(void *)(v209 + 16);
                  if (v143 != v212)
                  {
                    uint64_t v213 = *(void *)a7;
                    uint64_t v214 = *(unsigned int *)(a7 + 16);
                    if (v214)
                    {
                      LODWORD(v215) = (v214 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                      int v211 = (uint64_t *)(v213 + 8 * v215);
                      uint64_t v216 = *v211;
                      if (*v211 != v212)
                      {
                        int v217 = 1;
                        do
                        {
                          if (v216 == -4096) {
                            goto LABEL_250;
                          }
                          int v218 = v215 + v217++;
                          uint64_t v215 = v218 & (v214 - 1);
                          uint64_t v216 = *(void *)(v213 + 8 * v215);
                        }
                        while (v216 != v212);
                        int v211 = (uint64_t *)(v213 + 8 * v215);
                      }
                    }
                    else
                    {
LABEL_250:
                      int v211 = (uint64_t *)(v213 + 8 * v214);
                    }
                    if (v211 != (uint64_t *)(v213 + 8 * v214)) {
                      goto LABEL_240;
                    }
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
                  uint64_t v209 = v243;
                }
                int v219 = *(_DWORD *)(a7 + 16);
                if (v219)
                {
                  uint64_t v220 = *(void *)a7;
                  unsigned int v221 = v219 - 1;
                  LODWORD(v196) = (v219 - 1) & ((v203 >> 4) ^ (v203 >> 9));
                  unint64_t v198 = (uint64_t *)(*(void *)a7 + 8 * v196);
                  uint64_t v197 = *v198;
                  if (v203 != *v198)
                  {
                    int v195 = 1;
                    do
                    {
                      if (v197 == -4096) {
                        goto LABEL_240;
                      }
                      int v194 = v196 + v195++;
                      uint64_t v196 = v194 & v221;
                      uint64_t v197 = *(void *)(v220 + 8 * v196);
                    }
                    while (v203 != v197);
                    unint64_t v198 = (uint64_t *)(v220 + 8 * v196);
                  }
                  *unint64_t v198 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
LABEL_240:
            ++v192;
          }
          while (v192 != v191);
        }
      }
      int v222 = *(_DWORD *)(a7 + 16);
      if (v222)
      {
        uint64_t v223 = *(void *)a7;
        unsigned int v224 = v222 - 1;
        LODWORD(v225) = (v222 - 1) & ((v143 >> 4) ^ (v143 >> 9));
        unint64_t v226 = (uint64_t *)(*(void *)a7 + 8 * v225);
        uint64_t v227 = *v226;
        unsigned int v138 = (uint64_t **)a1;
        int v140 = a9;
        uint64_t v142 = v233;
        if (v143 != *v226)
        {
          int v228 = 1;
          do
          {
            if (v227 == -4096) {
              goto LABEL_267;
            }
            int v229 = v225 + v228++;
            uint64_t v225 = v229 & v224;
            uint64_t v227 = *(void *)(v223 + 8 * v225);
          }
          while (v143 != v227);
          unint64_t v226 = (uint64_t *)(v223 + 8 * v225);
        }
        *unint64_t v226 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
LABEL_267:
        char v232 = 1;
      }
      else
      {
        char v232 = 1;
        unsigned int v138 = (uint64_t **)a1;
        int v140 = a9;
        uint64_t v142 = v233;
      }
    }
LABEL_170:
    if (++v141 == (uint64_t *)v142)
    {
      if (v232)
      {
        mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, v138, (uint64_t *)a7, 0);
      }
LABEL_274:
      llvm::deallocate_buffer(v245[0], (void *)(8 * v246));
    }
  }
  BOOL v169 = 0;
LABEL_216:
  int v140 = a9;
  uint64_t v142 = v233;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  goto LABEL_217;
}

void sub_2117F4F70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,llvm *a32,uint64_t a33,unsigned int a34)
{
}

uint64_t sub_2117F4F84()
{
  return v0 & 1;
}

uint64_t mlir::anonymous namespace'::preserveOutputsAndEraseUnusedOps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int32x2_t *a8)
{
  v96[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a5 + 8))
  {
    uint64_t v12 = *(unsigned int *)(a5 + 16);
    if (v12 <= 4 * *(_DWORD *)(a5 + 8) || v12 < 0x41)
    {
      if (v12)
      {
        uint64_t v13 = *(int64x2_t **)a5;
        unint64_t v14 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v15 = *(int64x2_t **)a5;
        if (v14 < 3) {
          goto LABEL_10;
        }
        unint64_t v16 = v14 + 1;
        uint64_t v15 = (int64x2_t *)((char *)v13 + 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v17 = v13 + 1;
        int64x2_t v18 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17[-1] = v18;
          *uint64_t v17 = v18;
          v17 += 2;
          v19 -= 4;
        }
        while (v19);
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          int v20 = (int64x2_t *)((char *)v13 + 8 * v12);
          do
          {
            v15->i64[0] = -4096;
            uint64_t v15 = (int64x2_t *)((char *)v15 + 8);
          }
          while (v15 != v20);
        }
      }
      *(void *)(a5 + 8) = 0;
    }
    else
    {
      llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::shrink_and_clear(a5);
    }
  }
  *(void *)&long long v90 = &v91;
  *((void *)&v90 + 1) = 0x600000000;
  uint64_t v21 = *(unsigned int *)(a4 + 8);
  if (!v21)
  {
    *(void *)&long long v95 = v96;
    *((void *)&v95 + 1) = 0x400000000;
    unsigned int v40 = *(_DWORD *)(a4 + 8);
    if (v40)
    {
      unsigned int v38 = 0;
      goto LABEL_56;
    }
    goto LABEL_119;
  }
  uint64_t v22 = &v91;
  int v23 = *(void **)a4;
  uint64_t v24 = *(void *)a4 + 8 * v21;
  do
  {
    *(void *)&long long v95 = *v23;
    *(void *)&v88[0] = 0;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v95);
    *(void *)&v88[0] = DefiningOp;
    if (DefiningOp)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a2 + 144))(a2, DefiningOp, a8))
      {
        uint64_t v31 = v95;
        uint64_t v32 = DWORD2(v90);
        if (DWORD2(v90) >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, &v91, DWORD2(v90) + 1, 8);
          uint64_t v32 = DWORD2(v90);
        }
        *(void *)(v90 + 8 * v32) = v31;
        ++DWORD2(v90);
      }
      else
      {
        int v25 = *(_DWORD *)(a5 + 16);
        if (v25)
        {
          int v26 = v25 - 1;
          unsigned int v27 = ((LODWORD(v88[0]) >> 4) ^ (LODWORD(v88[0]) >> 9)) & v26;
          uint64_t v28 = (uint64_t *)(*(void *)a5 + 8 * v27);
          uint64_t v29 = *v28;
          if (*(void *)&v88[0] == *v28) {
            goto LABEL_17;
          }
          uint64_t v34 = 0;
          int v35 = 1;
          while (v29 != -4096)
          {
            if (v34) {
              BOOL v36 = 0;
            }
            else {
              BOOL v36 = v29 == -8192;
            }
            if (v36) {
              uint64_t v34 = v28;
            }
            unsigned int v37 = v27 + v35++;
            unsigned int v27 = v37 & v26;
            uint64_t v28 = (uint64_t *)(*(void *)a5 + 8 * v27);
            uint64_t v29 = *v28;
            if (*(void *)&v88[0] == *v28) {
              goto LABEL_17;
            }
          }
          if (v34) {
            int v33 = v34;
          }
          else {
            int v33 = v28;
          }
        }
        else
        {
          int v33 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(a5, v33, (uint64_t *)v88);
      }
    }
LABEL_17:
    ++v23;
  }
  while (v23 != (void *)v24);
  unsigned int v38 = DWORD2(v90);
  uint64_t v39 = (long long *)v90;
  *(void *)&long long v95 = v96;
  *((void *)&v95 + 1) = 0x400000000;
  if (DWORD2(v90))
  {
    if ((long long *)v90 == &v91)
    {
      unsigned int v41 = DWORD2(v90);
      if (DWORD2(v90) < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v96, DWORD2(v90), 8),
            unsigned int v41 = DWORD2(v90),
            uint64_t v22 = (long long *)v90,
            DWORD2(v90)))
      {
        memcpy((void *)v95, v22, 8 * v41);
        uint64_t v22 = (long long *)v90;
      }
      DWORD2(v95) = v38;
    }
    else
    {
      long long v95 = v90;
      *(void *)&long long v90 = &v91;
      HIDWORD(v90) = 0;
    }
    DWORD2(v90) = 0;
    uint64_t v39 = v22;
    if (v22 != &v91)
    {
LABEL_49:
      free(v39);
      unsigned int v38 = DWORD2(v95);
    }
  }
  else if ((long long *)v90 != &v91)
  {
    goto LABEL_49;
  }
  unsigned int v40 = *(_DWORD *)(a4 + 8);
  if (v38 != v40)
  {
LABEL_56:
    if (&v95 == (long long *)a4) {
      goto LABEL_68;
    }
    if (v40 >= v38)
    {
      if (v38) {
        memmove(*(void **)a4, (const void *)v95, 8 * v38);
      }
      goto LABEL_67;
    }
    if (*(_DWORD *)(a4 + 12) >= v38)
    {
      if (v40)
      {
        uint64_t v45 = v40;
        memmove(*(void **)a4, (const void *)v95, 8 * v40);
        goto LABEL_65;
      }
    }
    else
    {
      *(_DWORD *)(a4 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 8);
    }
    uint64_t v45 = 0;
LABEL_65:
    if (v45 != DWORD2(v95)) {
      memcpy((void *)(*(void *)a4 + 8 * v45), (const void *)(v95 + 8 * v45), 8 * DWORD2(v95) - 8 * v45);
    }
LABEL_67:
    *(_DWORD *)(a4 + 8) = v38;
LABEL_68:
    if (!*(_DWORD *)(a5 + 8)) {
      goto LABEL_119;
    }
    uint64_t v46 = *(unsigned int *)(a5 + 16);
    if (v46)
    {
      uint64_t v47 = 8 * v46;
      uint64_t v48 = *(int64x2_t **)a5;
      while ((v48->i64[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        uint64_t v48 = (int64x2_t *)((char *)v48 + 8);
        v47 -= 8;
        if (!v47) {
          goto LABEL_119;
        }
      }
    }
    else
    {
      uint64_t v48 = *(int64x2_t **)a5;
    }
    uint64_t v49 = *(void *)a5 + 8 * v46;
    if (v48 == (int64x2_t *)v49) {
      goto LABEL_119;
    }
    int v50 = 0;
    while (1)
    {
      unsigned int v51 = (unsigned int *)v48->i64[0];
      int32x2_t v52 = *a8;
      uint64_t v53 = a8[2].u32[0];
      if (v53)
      {
        LODWORD(v54) = ((v51 >> 4) ^ (v51 >> 9)) & (v53 - 1);
        char v55 = (unsigned int **)(*(void *)&v52 + 8 * v54);
        uint64_t v56 = *v55;
        if (*v55 == v51) {
          goto LABEL_84;
        }
        int v57 = 1;
        while (v56 != (unsigned int *)-4096)
        {
          int v58 = v54 + v57++;
          uint64_t v54 = v58 & (v53 - 1);
          uint64_t v56 = *(unsigned int **)(*(void *)&v52 + 8 * v54);
          if (v56 == v51)
          {
            char v55 = (unsigned int **)(*(void *)&v52 + 8 * v54);
            goto LABEL_84;
          }
        }
      }
      char v55 = (unsigned int **)(*(void *)&v52 + 8 * v53);
LABEL_84:
      if (v55 != (unsigned int **)(*(void *)&v52 + 8 * v53))
      {
        int v85 = v50;
        uint64_t v59 = v51[9];
        if (v59) {
          uint64_t v60 = (uint64_t)(v51 - 4);
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t v86 = v60;
        uint64_t v87 = v59;
        mlir::ResultRange::use_begin(&v86, (uint64_t *)v88);
        uint64_t v61 = v51[9];
        if (v61) {
          uint64_t v62 = (uint64_t)(v51 - 4);
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v86 = v62;
        uint64_t v87 = v61;
        uint64_t v63 = mlir::ResultRange::use_end(&v86, v93);
        uint64_t v64 = v89;
        uint64_t v92 = v89;
        long long v90 = v88[0];
        long long v91 = v88[1];
        uint64_t v65 = v94;
        if (v89 == v94)
        {
LABEL_101:
          __int32 v74 = a8[2].i32[0];
          if (v74)
          {
            int32x2_t v75 = *a8;
            __int32 v76 = v74 - 1;
            LODWORD(v77) = (v74 - 1) & ((v51 >> 4) ^ (v51 >> 9));
            uint64_t v78 = (unsigned int **)(*(void *)a8 + 8 * v77);
            int v79 = *v78;
            if (v51 != *v78)
            {
              int v82 = 1;
              do
              {
                if (v79 == (unsigned int *)-4096) {
                  goto LABEL_104;
                }
                int v83 = v77 + v82++;
                uint64_t v77 = v83 & v76;
                int v79 = *(unsigned int **)(*(void *)&v75 + 8 * v77);
              }
              while (v51 != v79);
              uint64_t v78 = (unsigned int **)(*(void *)&v75 + 8 * v77);
            }
            *uint64_t v78 = (unsigned int *)-8192;
            a8[1] = vadd_s32(a8[1], (int32x2_t)0x1FFFFFFFFLL);
          }
LABEL_104:
          int v80 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v63);
          uint64_t v81 = *((void *)v80 + 4);
          if ((unint64_t)(*((void *)v80 + 3) - v81) > 5)
          {
            *(_WORD *)(v81 + 4) = 2661;
            *(_DWORD *)uint64_t v81 = 1935766117;
            *((void *)v80 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v80, "erase\n", 6uLL);
          }
          mlir::Operation::dump((mlir::Operation *)v51);
        }
        while (1)
        {
          int32x2_t v66 = *a8;
          uint64_t v67 = a8[2].u32[0];
          if (v67)
          {
            uint64_t v68 = *(void *)(v64 + 16);
            LODWORD(v69) = ((v68 >> 4) ^ (v68 >> 9)) & (v67 - 1);
            int v70 = (uint64_t *)(*(void *)&v66 + 8 * v69);
            uint64_t v71 = *v70;
            if (*v70 == v68) {
              goto LABEL_99;
            }
            int v72 = 1;
            while (v71 != -4096)
            {
              int v73 = v69 + v72++;
              uint64_t v69 = v73 & (v67 - 1);
              uint64_t v71 = *(void *)(*(void *)&v66 + 8 * v69);
              if (v71 == v68)
              {
                int v70 = (uint64_t *)(*(void *)&v66 + 8 * v69);
                goto LABEL_99;
              }
            }
          }
          int v70 = (uint64_t *)(*(void *)&v66 + 8 * v67);
LABEL_99:
          if (v70 != (uint64_t *)(*(void *)&v66 + 8 * v67))
          {
            int v50 = v85;
            break;
          }
          uint64_t v63 = mlir::ResultRange::UseIterator::operator++((uint64_t *)v88);
          uint64_t v64 = v89;
          if (v89 == v65) {
            goto LABEL_101;
          }
        }
      }
      uint64_t v48 = (int64x2_t *)((char *)v48 + 8);
      if (v48 != (int64x2_t *)v49)
      {
        while ((v48->i64[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          uint64_t v48 = (int64x2_t *)((char *)v48 + 8);
          if (v48 == (int64x2_t *)v49) {
            goto LABEL_119;
          }
        }
        if (v48 != (int64x2_t *)v49) {
          continue;
        }
      }
      goto LABEL_119;
    }
  }
  if (v38)
  {
    uint64_t v42 = (void *)v95;
    uint64_t v43 = *(void **)a4;
    uint64_t v44 = 8 * v38;
    while (*v42 == *v43)
    {
      ++v42;
      ++v43;
      v44 -= 8;
      if (!v44) {
        goto LABEL_119;
      }
    }
    goto LABEL_56;
  }
LABEL_119:
  if ((void *)v95 != v96) {
    free((void *)v95);
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::placement::ReplacedOps,std::string &,mlir::Operation *&,llvm::SmallVector<mlir::Operation *,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &>(mlir::StringAttr **a1, uint64_t a2, void *a3, mlir::SymbolRefAttr **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v24 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.replaced_ops", (const unsigned __int8 *)0x16, Context);
  if (v16)
  {
    mlir::OperationState::OperationState(v31, a2, v15);
    int v17 = *((char *)a3 + 23);
    uint64_t v18 = a3[1];
    if (v17 >= 0)
    {
      uint64_t v19 = v17;
    }
    else
    {
      a3 = (void *)*a3;
      uint64_t v19 = v18;
    }
    int v20 = *a4;
    uint64_t v21 = *(void *)a5;
    uint64_t v22 = *(unsigned int *)(a5 + 8);
    mlir::ValueRange::ValueRange(v30, *(void *)a6, *(unsigned int *)(a6 + 8));
    mlir::ValueRange::ValueRange(v29, *(void *)a7, *(unsigned int *)(a7 + 8));
    mlir::placement::ReplacedOps::build(a1, (mlir::Attribute *)v31, a3, v19, v20, v21, v22, v23, v30[0], v30[1], v29[0], v29[1]);
  }
  __int16 v28 = 1283;
  uint64_t v27[2] = (uint64_t)"placement.replaced_ops";
  v27[3] = 22;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v26 = 259;
  llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
  llvm::report_fatal_error((llvm::Twine *)v31, 1);
}

void mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(int32x2_t *this, mlir::Operation *a2, mlir::Operation *a3, const mlir::ConversionTarget *a4)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  v40[0] = 0;
  v40[1] = 0;
  unsigned int v41 = 0;
  v39[0] = (uint64_t)v40;
  uint64_t ParentOp = (mlir::Block *)*((void *)a3 + 2);
  if (ParentOp) {
    uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  v39[0] = (uint64_t)v40;
  v39[1] = (uint64_t)&v42;
  if (!this[3].i32[0]) {
    goto LABEL_41;
  }
  uint64_t v8 = this[4].u32[0];
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    unsigned __int8 v10 = (void *)this[2];
    while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    unsigned __int8 v10 = (void *)this[2];
  }
  uint64_t v11 = *(void *)&this[2] + 8 * v8;
  if (v10 == (void *)v11) {
    goto LABEL_41;
  }
LABEL_11:
  v39[0] = 0;
  uint64_t v12 = (mlir::Operation *)*v10;
  v39[0] = *v10;
  if (v41)
  {
    LODWORD(v13) = (v41 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    unint64_t v14 = (llvm *)((char *)v40[0] + 8 * v13);
    uint64_t v15 = *(mlir::Operation **)v14;
    if (*(mlir::Operation **)v14 != v12)
    {
      int v16 = 1;
      do
      {
        if (v15 == (mlir::Operation *)-4096) {
          goto LABEL_17;
        }
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v41 - 1);
        uint64_t v15 = (mlir::Operation *)*((void *)v40[0] + v13);
      }
      while (v15 != v12);
      unint64_t v14 = (llvm *)((char *)v40[0] + 8 * v13);
    }
  }
  else
  {
LABEL_17:
    unint64_t v14 = (llvm *)((char *)v40[0] + 8 * v41);
  }
  if (v14 != (llvm *)((char *)v40[0] + 8 * v41))
  {
    if ((unsigned __int16)mlir::ConversionTarget::isLegal(a4, v12) > 0xFFu) {
      goto LABEL_34;
    }
    uint64_t v18 = v39[0];
    uint64_t v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v18 + 48) + 32))(*(void *)(v18 + 48), v19)) {
      goto LABEL_34;
    }
  }
  if (v44)
  {
    unsigned int v20 = ((LODWORD(v39[0]) >> 4) ^ (LODWORD(v39[0]) >> 9)) & (v44 - 1);
    uint64_t v21 = &v42[v20];
    uint64_t v22 = *v21;
    if (v39[0] == *v21) {
      goto LABEL_34;
    }
    uint64_t v23 = 0;
    int v24 = 1;
    while (v22 != -4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == -8192;
      }
      if (v25) {
        uint64_t v23 = v21;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & (v44 - 1);
      uint64_t v21 = &v42[v20];
      uint64_t v22 = *v21;
      if (v39[0] == *v21)
      {
        do
        {
LABEL_34:
          if (++v10 == (void *)v11) {
            goto LABEL_41;
          }
        }
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v10 == (void *)v11)
        {
LABEL_41:
          if (v43)
          {
            if (v44)
            {
              uint64_t v28 = 8 * v44;
              uint64_t v29 = v42;
              while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                ++v29;
                v28 -= 8;
                if (!v28) {
                  goto LABEL_61;
                }
              }
            }
            else
            {
              uint64_t v29 = v42;
            }
            uint64_t v30 = &v42[v44];
            if (v29 != v30)
            {
              __int32 v31 = this[4].i32[0];
              __int32 v32 = v31 - 1;
              do
              {
                if (!v31) {
                  goto LABEL_53;
                }
                int32x2_t v33 = this[2];
                LODWORD(v34) = ((*v29 >> 4) ^ (*v29 >> 9)) & v32;
                int v35 = (uint64_t *)(*(void *)&v33 + 8 * v34);
                uint64_t v36 = *v35;
                if (*v29 == *v35) {
                  goto LABEL_52;
                }
                int v37 = 1;
                while (v36 != -4096)
                {
                  int v38 = v34 + v37++;
                  uint64_t v34 = v38 & v32;
                  uint64_t v36 = *(void *)(*(void *)&v33 + 8 * v34);
                  if (*v29 == v36)
                  {
                    int v35 = (uint64_t *)(*(void *)&v33 + 8 * v34);
LABEL_52:
                    *int v35 = -8192;
                    this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
                    goto LABEL_53;
                  }
                }
                do
                {
LABEL_53:
                  if (++v29 == v30) {
                    goto LABEL_61;
                  }
                }
                while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v29 != v30);
            }
          }
LABEL_61:
          llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
        }
        goto LABEL_11;
      }
    }
    if (v23) {
      unsigned int v27 = v23;
    }
    else {
      unsigned int v27 = v21;
    }
  }
  else
  {
    unsigned int v27 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)&v42, v27, v39);
  goto LABEL_34;
}

void sub_2117F5C74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, llvm *a15, uint64_t a16, unsigned int a17)
{
}

void mlir::anonymous namespace'::BuildContext::rollbackCreatedOps(mlir::_anonymous_namespace_::BuildContext *this)
{
  v34[6] = *MEMORY[0x263EF8340];
  __int32 v32 = v34;
  uint64_t v33 = 0x600000000;
  uint64_t v2 = (int64x2_t **)((char *)this + 16);
  if (*((_DWORD *)this + 6))
  {
    uint64_t v3 = *((unsigned int *)this + 8);
    if (v3)
    {
      uint64_t v4 = 8 * v3;
      uint64_t v5 = (uint64_t *)*((void *)this + 2);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      uint64_t v5 = (uint64_t *)*((void *)this + 2);
    }
    uint64_t v6 = *((void *)this + 2) + 8 * v3;
    if (v5 != (uint64_t *)v6)
    {
LABEL_9:
      uint64_t v7 = *v5;
      uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v7 + 48) + 32))(*(void *)(v7 + 48), v8))
      {
        uint64_t v31 = v7;
        llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>((uint64_t)&v32, (uint64_t)v32, &v31);
      }
      else
      {
        uint64_t v9 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
          uint64_t v9 = v33;
        }
        *((void *)v32 + v9) = v7;
        LODWORD(v33) = v33 + 1;
      }
      while (++v5 != (uint64_t *)v6)
      {
        if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v5 != (uint64_t *)v6) {
            goto LABEL_9;
          }
          break;
        }
      }
      if (v33)
      {
        unsigned __int8 v10 = (char *)v32;
        uint64_t v11 = (char *)v32 + 8 * v33;
        do
        {
          uint64_t v13 = (unsigned int *)*((void *)v11 - 1);
          v11 -= 8;
          uint64_t v12 = (mlir::Operation *)v13;
          uint64_t v14 = v13[9];
          uint64_t v15 = (uint64_t)(v13 - 4);
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          if (v14)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              uint64_t NextResultAtOffset = (void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v16, i);
              while (1)
              {
                uint64_t v19 = *NextResultAtOffset;
                if (!*NextResultAtOffset) {
                  break;
                }
                unsigned int v20 = (void *)v19[1];
                if (v20)
                {
                  *unsigned int v20 = *v19;
                  if (*v19) {
                    *(void *)(*v19 + 8) = v19[1];
                  }
                }
                *uint64_t v19 = 0;
                v19[1] = 0;
                v19[3] = 0;
              }
            }
          }
          mlir::Operation::erase(v12);
        }
        while (v11 != v10);
      }
    }
  }
LABEL_32:
  int v21 = *((_DWORD *)this + 6);
  if (v21 || *((_DWORD *)this + 7))
  {
    uint64_t v22 = *((unsigned int *)this + 8);
    if (v22 <= 4 * v21 || v22 < 0x41)
    {
      if (v22)
      {
        uint64_t v23 = *v2;
        unint64_t v24 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        BOOL v25 = *v2;
        if (v24 < 3) {
          goto LABEL_42;
        }
        unint64_t v26 = v24 + 1;
        BOOL v25 = (int64x2_t *)((char *)v23 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
        unsigned int v27 = v23 + 1;
        int64x2_t v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v28;
          *unsigned int v27 = v28;
          v27 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          uint64_t v30 = (int64x2_t *)((char *)v23 + 8 * v22);
          do
          {
            v25->i64[0] = -4096;
            BOOL v25 = (int64x2_t *)((char *)v25 + 8);
          }
          while (v25 != v30);
        }
      }
      *((void *)this + 3) = 0;
    }
    else
    {
      llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::shrink_and_clear((uint64_t)v2);
    }
  }
  if (v32 != v34) {
    free(v32);
  }
}

llvm::BitVector *llvm::BitVector::BitVector(llvm::BitVector *this, int a2, uint64_t a3)
{
  int v3 = a3;
  unsigned int v6 = a2 + 63;
  uint64_t v7 = (a2 + 63) >> 6;
  unint64_t v8 = a3 << 63 >> 63;
  uint64_t v9 = (char *)this + 16;
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 3) = 6;
  if (v6 < 0x1C0)
  {
    if (v6 >= 0x40)
    {
      uint64_t v15 = (unint64_t *)((char *)this + 16);
      uint64_t v16 = v6 >> 6;
      if (v6 < 0x100) {
        goto LABEL_19;
      }
      uint64_t v15 = (unint64_t *)&v9[8 * (v7 & 0x3FFFFFC)];
      uint64_t v16 = v7 & 3;
      int64x2_t v17 = vdupq_n_s64(v8);
      uint64_t v18 = (int64x2_t *)((char *)this + 32);
      uint64_t v19 = v7 & 0x3FFFFFC;
      do
      {
        v18[-1] = v17;
        *uint64_t v18 = v17;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if ((v7 & 0x3FFFFFC) != v7)
      {
LABEL_19:
        do
        {
          *v15++ = v8;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, v9, v6 >> 6, 8);
    uint64_t v10 = 0;
    uint64_t v9 = *(char **)this;
    uint64_t v11 = 8 * (v7 & 0x3FFFFFC);
    uint64_t v12 = v7 & 3;
    int64x2_t v13 = vdupq_n_s64(v8);
    do
    {
      uint64_t v14 = (int64x2_t *)&v9[v10];
      int64x2_t *v14 = v13;
      v14[1] = v13;
      v10 += 32;
    }
    while (v11 != v10);
    if ((v7 & 0x3FFFFFC) != v7)
    {
      do
      {
        *(void *)&v9[v11] = v8;
        v11 += 8;
        --v12;
      }
      while (v12);
    }
  }
  *((_DWORD *)this + 2) = v7;
  *((_DWORD *)this + 16) = a2;
  if (v3 && (a2 & 0x3F) != 0) {
    *(void *)&v9[8 * v7 - 8] &= ~(-1 << (a2 & 0x3F));
  }
  return this;
}

unint64_t *mlir::TypeRange::TypeRange<llvm::MutableArrayRef<mlir::BlockArgument>>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v5[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v5, a2, (a3 - a2) >> 3);
  mlir::TypeRange::TypeRange(a1, v5[0], v5[1]);
  return a1;
}

uint64_t *mlir::Operation::getOperandTypes@<X0>(mlir::Operation *this@<X0>, uint64_t *a2@<X8>)
{
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v2 = *((void *)this + 9);
    uint64_t v3 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  v5[0] = v2;
  v5[1] = v3;
  return mlir::OperandRange::getTypes(v5, a2);
}

unint64_t *mlir::TypeRange::TypeRange<mlir::OperandRange>(unint64_t *a1, void *a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v4, *a2 + 32 * a2[1], a2[3] - a2[1]);
  mlir::TypeRange::TypeRange(a1, v4[0], v4[1]);
  return a1;
}

uint64_t llvm::dyn_cast<mlir::FunctionOpInterface,mlir::Operation>(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a1)) {
    return 0;
  }
  if (v1) {
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v1);
  }
  return v1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::StartTimer,mlir::placement::TimerHandleType,mlir::FlatSymbolRefAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.start_timer", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"placement.start_timer";
    _OWORD v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::placement::StartTimer::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.host_type_cast", (const unsigned __int8 *)0x18, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"placement.host_type_cast";
    _OWORD v17[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<mlir::Value*,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_0,mlir::Value>,void>(void *a1, uint64_t a2, unint64_t **a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  uint64_t v5 = *(unint64_t **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v6 = *a3;
  uint64_t v7 = (uint64_t)*a3 - *(void *)a2;
  if ((unint64_t)v7 < 0x21)
  {
    unsigned int v8 = 0;
    if (v5 == v6) {
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 >> 3, 8);
    unsigned int v8 = *((_DWORD *)a1 + 2);
    if (v5 == v6) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = (unint64_t *)(*a1 + 8 * v8);
  do
  {
    unint64_t v10 = *v5;
    unint64_t v12 = *v5;
    uint64_t v13 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v12, &v13)&& v13 != *(void *)v4 + 16 * *(unsigned int *)(v4 + 16))
    {
      unint64_t v10 = *(void *)(v13 + 8);
    }
    *v9++ = v10;
    ++v5;
  }
  while (v5 != v6);
  unsigned int v8 = *((_DWORD *)a1 + 2);
LABEL_11:
  *((_DWORD *)a1 + 2) = v8 + ((unint64_t)v7 >> 3);
  return a1;
}

uint64_t mlir::Operation::getAttr(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(unsigned char *)(a1 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7))
  {
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  }
  return result;
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  __int16 v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::Operation::setAttr(a1, v9, a4);
}

void *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_1,mlir::Value>,void>(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  int v9 = v7 - v5;
  if ((unint64_t)(v7 - v5) < 5)
  {
    unsigned int v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 - v5, 8);
    unsigned int v10 = *((_DWORD *)a1 + 2);
  }
  if (v4 != v8 || v7 != v5)
  {
    unint64_t v12 = (uint64_t *)(*a1 + 8 * v10);
    uint64_t v13 = v7 - 1;
    do
    {
      uint64_t v14 = v5;
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5);
      uint64_t v17 = NextResultAtOffset;
      uint64_t v18 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, (unint64_t *)&v17, &v18)&& v18 != *(void *)v6 + 16 * *(unsigned int *)(v6 + 16))
      {
        uint64_t NextResultAtOffset = *(void *)(v18 + 8);
      }
      *v12++ = NextResultAtOffset;
      uint64_t v5 = v14 + 1;
    }
    while (v4 != v8 || v13 != v14);
    unsigned int v10 = *((_DWORD *)a1 + 2);
  }
  *((_DWORD *)a1 + 2) = v10 + v9;
  return a1;
}

uint64_t mlir::Operation::replaceAllUsesWith<llvm::SmallVector<mlir::Value,4u> &>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  if (v2) {
    uint64_t v3 = result - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(uint64_t ***)a2;
    uint64_t v8 = *(void *)a2 + 8 * v4;
    do
    {
      uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v6);
      int v9 = *(uint64_t **)result;
      if (*(void *)result)
      {
        unsigned int v10 = *v7;
        do
        {
          __int16 v11 = (uint64_t *)v9[1];
          if (v11)
          {
            uint64_t *v11 = *v9;
            if (*v9) {
              *(void *)(*v9 + 8) = v9[1];
            }
          }
          v9[3] = (uint64_t)v10;
          uint64_t v12 = *v10;
          *int v9 = *v10;
          v9[1] = (uint64_t)v10;
          if (v12) {
            *(void *)(v12 + 8) = v9;
          }
          uint64_t *v10 = (uint64_t)v9;
          int v9 = *(uint64_t **)result;
        }
        while (*(void *)result);
      }
      if (++v6 == v2) {
        break;
      }
      ++v7;
    }
    while (v7 != (uint64_t **)v8);
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::StopTimer,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.stop_timer", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"placement.stop_timer";
    _OWORD v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  int v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::anonymous namespace'::moveErasedOpsAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = *(void *)a2 + 8 * v5;
  uint64_t v7 = *(void **)a2;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = 8 * v5;
    while (*(void *)(*(void *)(v4 + v8) + 16) == v9)
    {
      v8 += 8;
      if (v10 == v8)
      {
        uint64_t v7 = (void *)v6;
        goto LABEL_17;
      }
    }
    uint64_t v7 = (void *)(v4 + v8);
  }
  __int16 v11 = v7 + 1;
  if (v7 != (void *)v6 && v11 != (void *)v6)
  {
    do
    {
      if (*(void *)(*v11 + 16) == *(void *)(v101 + 16)) {
        *v7++ = *v11;
      }
      ++v11;
    }
    while (v11 != (void *)v6);
    uint64_t v4 = *(void *)a2;
  }
LABEL_17:
  unint64_t v13 = ((unint64_t)v7 - v4) >> 3;
  unint64_t v14 = 126 - 2 * __clz(v13);
  *(_DWORD *)(a2 + 8) = v13;
  if (v13) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  __int16 v16 = (mlir::Block **)v101;
  v99[0] = 0;
  v99[1] = 0;
  unsigned int v100 = 0;
  long long v97 = 0u;
  unsigned long long v98 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
  unsigned int v17 = v100;
  uint64_t v18 = *((void *)&v98 + 1);
  *(void *)(*(void *)((char *)__p[1] + ((((void)v98 + *((void *)&v98 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v98 + *((void *)&v98 + 1)) & 0x1FF)) = v101;
  uint64_t v19 = v18 + 1;
  *((void *)&v98 + 1) = v19;
  if (v17)
  {
    unsigned int v20 = v17 - 1;
    unsigned int v21 = ((v101 >> 4) ^ (v101 >> 9)) & v20;
    uint64_t v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
    uint64_t v23 = *v22;
    if (v101 == *v22) {
      goto LABEL_33;
    }
    unint64_t v24 = 0;
    int v25 = 1;
    while (v23 != -4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == -8192;
      }
      if (v26) {
        unint64_t v24 = v22;
      }
      unsigned int v27 = v21 + v25++;
      unsigned int v21 = v27 & v20;
      uint64_t v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
      uint64_t v23 = *v22;
      if (v101 == *v22) {
        goto LABEL_33;
      }
    }
    if (v24) {
      int64x2_t v28 = v24;
    }
    else {
      int64x2_t v28 = v22;
    }
  }
  else
  {
    int64x2_t v28 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v28, &v101);
  uint64_t v19 = *((void *)&v98 + 1);
LABEL_33:
  if (v19)
  {
    uint64_t v29 = (char *)__p[1];
    unint64_t v30 = v98;
    do
    {
      uint64_t v31 = *(void *)(*(void *)&v29[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
      uint64_t v32 = *(unsigned int *)(v31 + 36);
      if (v32) {
        uint64_t v33 = v31 - 16;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v105 = v33;
      uint64_t v106 = v32;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      uint64_t v34 = *(unsigned int *)(v31 + 36);
      if (v34) {
        uint64_t v35 = v31 - 16;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v105 = v35;
      uint64_t v106 = v34;
      mlir::ResultRange::use_end(&v105, v94);
      uint64_t v36 = v104;
      uint64_t v93 = v104;
      long long v91 = v102;
      long long v92 = v103;
      uint64_t v37 = v95;
      while (v36 != v37)
      {
        uint64_t v42 = *(void *)(v36 + 16);
        uint64_t v105 = v42;
        if (*(_UNKNOWN **)(*(void *)(v42 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
        {
          unsigned int v44 = (char *)__p[1];
          if ((void *)v97 == __p[1]) {
            unint64_t v45 = 0;
          }
          else {
            unint64_t v45 = (((void)v97 - (unint64_t)__p[1]) << 6) - 1;
          }
          uint64_t v46 = *((void *)&v98 + 1);
          unint64_t v47 = *((void *)&v98 + 1) + v98;
          if (v45 == *((void *)&v98 + 1) + (void)v98)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            uint64_t v46 = *((void *)&v98 + 1);
            unsigned int v44 = (char *)__p[1];
            unint64_t v47 = v98 + *((void *)&v98 + 1);
            uint64_t v42 = v105;
          }
          *(void *)(*(void *)&v44[(v47 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v47 & 0x1FF)) = v42;
          *((void *)&v98 + 1) = v46 + 1;
          unsigned int v43 = v100;
          if (!v100)
          {
LABEL_55:
            uint64_t v48 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v43 = v100;
          if (!v100) {
            goto LABEL_55;
          }
        }
        unsigned int v38 = v43 - 1;
        unsigned int v39 = ((v105 >> 4) ^ (v105 >> 9)) & v38;
        unsigned int v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
        uint64_t v41 = *v40;
        if (v105 == *v40) {
          goto LABEL_44;
        }
        uint64_t v49 = 0;
        int v50 = 1;
        while (v41 != -4096)
        {
          if (v49) {
            BOOL v51 = 0;
          }
          else {
            BOOL v51 = v41 == -8192;
          }
          if (v51) {
            uint64_t v49 = v40;
          }
          unsigned int v52 = v39 + v50++;
          unsigned int v39 = v52 & v38;
          unsigned int v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
          uint64_t v41 = *v40;
          if (v105 == *v40) {
            goto LABEL_44;
          }
        }
        if (v49) {
          uint64_t v48 = v49;
        }
        else {
          uint64_t v48 = v40;
        }
LABEL_56:
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v48, &v105);
LABEL_44:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        uint64_t v36 = v104;
      }
      BOOL v53 = mlir::Operation::isBeforeInBlock(v16, *(mlir::Operation **)(*(void *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v98 & 0x1FF)));
      uint64_t v29 = (char *)__p[1];
      if (v53) {
        __int16 v16 = *(mlir::Block ***)(*(void *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
      }
                               + 8 * (v98 & 0x1FF));
      uint64_t v54 = *((void *)&v98 + 1) - 1;
      unint64_t v30 = v98 + 1;
      unsigned long long v98 = __PAIR128__(*((unint64_t *)&v98 + 1), (uint64_t)v98 + 1) + __PAIR128__(-1, 0);
      if (v30 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        uint64_t v54 = *((void *)&v98 + 1);
        uint64_t v29 = (char *)__p[1] + 8;
        unint64_t v30 = v98 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(void *)&unsigned long long v98 = v98 - 512;
      }
    }
    while (v54);
  }
  uint64_t v55 = *(unsigned int *)(a2 + 8);
  if (v55)
  {
    uint64_t v56 = *(mlir::Operation ***)a2;
    uint64_t v57 = *(void *)a2 + 8 * v55;
    do
    {
      int v58 = *v56;
      if (mlir::Operation::isBeforeInBlock(v16, *v56)) {
        break;
      }
      if ((*((unsigned char *)v58 + 46) & 0x80) == 0 || (uint64_t v59 = *((unsigned int *)v58 + 17), !v59))
      {
LABEL_75:
        int v58 = (mlir::Operation *)v16;
        goto LABEL_76;
      }
      uint64_t v60 = 0;
      uint64_t v61 = *((void *)v58 + 9);
      while (1)
      {
        uint64_t v90 = *(void *)(v61 + 32 * v60 + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v90);
        uint64_t v63 = DefiningOp;
        if (v100)
        {
          LODWORD(v64) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v100 - 1);
          uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v64);
          uint64_t v66 = *(void *)v65;
          if (*(void *)v65 != DefiningOp)
          {
            int v67 = 1;
            do
            {
              if (v66 == -4096) {
                goto LABEL_87;
              }
              int v68 = v64 + v67++;
              uint64_t v64 = v68 & (v100 - 1);
              uint64_t v66 = *((void *)v99[0] + v64);
            }
            while (v66 != DefiningOp);
            uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v64);
          }
        }
        else
        {
LABEL_87:
          uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v100);
        }
        if (v65 != (llvm *)((char *)v99[0] + 8 * v100)) {
          break;
        }
        if (++v60 == v59) {
          goto LABEL_75;
        }
      }
      uint64_t v69 = *(unsigned int *)(DefiningOp + 36);
      if (v69) {
        uint64_t v70 = DefiningOp - 16;
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v105 = v70;
      uint64_t v106 = v69;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      uint64_t v71 = *(unsigned int *)(v63 + 36);
      if (v71) {
        uint64_t v72 = v63 - 16;
      }
      else {
        uint64_t v72 = 0;
      }
      uint64_t v105 = v72;
      uint64_t v106 = v71;
      mlir::ResultRange::use_end(&v105, v94);
      uint64_t v73 = v104;
      uint64_t v93 = v104;
      long long v91 = v102;
      long long v92 = v103;
      uint64_t v74 = v95;
      while (v73 != v74)
      {
        uint64_t v78 = *(void *)(v73 + 16);
        uint64_t v105 = v78;
        if (v100)
        {
          unsigned int v75 = (v100 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          __int32 v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
          uint64_t v77 = *v76;
          if (v78 == *v76) {
            goto LABEL_99;
          }
          int v80 = 0;
          int v81 = 1;
          while (v77 != -4096)
          {
            if (v80) {
              BOOL v82 = 0;
            }
            else {
              BOOL v82 = v77 == -8192;
            }
            if (v82) {
              int v80 = v76;
            }
            unsigned int v83 = v75 + v81++;
            unsigned int v75 = v83 & (v100 - 1);
            __int32 v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
            uint64_t v77 = *v76;
            if (v78 == *v76) {
              goto LABEL_99;
            }
          }
          if (v80) {
            int v79 = v80;
          }
          else {
            int v79 = v76;
          }
        }
        else
        {
          int v79 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v79, &v105);
LABEL_99:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        uint64_t v73 = v104;
      }
      mlir::Operation::moveAfter((uint64_t *)v58, (mlir::Operation *)v16);
LABEL_76:
      ++v56;
      __int16 v16 = (mlir::Block **)v58;
    }
    while (v56 != (mlir::Operation **)v57);
  }
  uint64_t v84 = (void **)__p[1];
  int v85 = (void **)v97;
  *((void *)&v98 + 1) = 0;
  unint64_t v86 = v97 - (unint64_t)__p[1];
  if ((unint64_t)v97 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      int v85 = (void **)v97;
      uint64_t v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      unint64_t v86 = v97 - (void)v84;
    }
    while ((void)v97 - (void)v84 > 0x10uLL);
  }
  unint64_t v87 = v86 >> 3;
  if (v87 == 1)
  {
    uint64_t v88 = 256;
  }
  else
  {
    if (v87 != 2)
    {
LABEL_124:
      if (v84 != v85)
      {
        do
        {
          uint64_t v89 = *v84++;
          operator delete(v89);
        }
        while (v84 != v85);
        if ((void *)v97 != __p[1]) {
          *(void *)&long long v97 = v97 + (((unint64_t)__p[1] - v97 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      llvm::deallocate_buffer(v99[0], (void *)(8 * v100));
    }
    uint64_t v88 = 512;
  }
  *(void *)&unsigned long long v98 = v88;
  goto LABEL_124;
}

uint64_t std::function<void ()(mlir::Operation *,mlir::Operation *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  uint64_t v5 = (mlir::_anonymous_namespace_::BuildContext *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t mlir::anonymous namespace'::BuildContext::commitChanges(uint64_t this)
{
  if (*(void *)(this + 24))
  {
    uint64_t v1 = (int64x2_t **)(this + 16);
    uint64_t v2 = *(unsigned int *)(this + 32);
    if (v2 <= 4 * *(_DWORD *)(this + 24) || v2 < 0x41)
    {
      if (v2)
      {
        uint64_t v3 = *v1;
        unint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v5 = *v1;
        if (v4 < 3) {
          goto LABEL_10;
        }
        unint64_t v6 = v4 + 1;
        uint64_t v5 = (int64x2_t *)((char *)v3 + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v7 = v3 + 1;
        int64x2_t v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v9 = v6 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v7[-1] = v8;
          *uint64_t v7 = v8;
          v7 += 2;
          v9 -= 4;
        }
        while (v9);
        if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          uint64_t v10 = (int64x2_t *)((char *)v3 + 8 * v2);
          do
          {
            v5->i64[0] = -4096;
            uint64_t v5 = (int64x2_t *)((char *)v5 + 8);
          }
          while (v5 != v10);
        }
      }
      *(void *)(this + 24) = 0;
    }
    else
    {
      return llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::shrink_and_clear(this + 16);
    }
  }
  return this;
}

void mlir::IRMapping::~IRMapping(llvm **this)
{
}

void sub_2117F71A8()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_2117F71BC()
{
  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_2117F71D0()
{
  return v0;
}

void mlir::anonymous namespace'::BuildContext::~BuildContext(llvm **this)
{
  *this = (llvm *)&unk_26C35CE20;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)&unk_26C35CE20;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_2117F7228()
{
  return v0;
}

void mlir::legalizeRegions(mlir::ForwardIterator *a1, uint64_t a2)
{
  v39[1] = *MEMORY[0x263EF8340];
  uint64_t v34 = a1;
  uint64_t v33 = a2;
  uint64_t v3 = *(mlir::ForwardIterator ***)(a2 + 8);
  v38[0] = v39;
  v38[1] = 0x100000000;
  uint64_t v31 = (mlir::Operation **)&v33;
  uint64_t v32 = 0;
  uint64_t v29 = (mlir::Operation **)&v31;
  uint64_t v30 = 0;
  v36[1] = 0x500000000;
  v21[0] = 0;
  v21[1] = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  BOOL v26 = 0;
  uint64_t v27 = 0;
  unsigned int v28 = 0;
  unint64_t v13 = v3;
  unint64_t v14 = &v33;
  uint64_t v15 = v21;
  uint64_t v35 = &v13;
  v36[0] = &v37;
  mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v35, 1);
  unint64_t v13 = &v34;
  unint64_t v14 = v38;
  uint64_t v15 = v21;
  __int16 v16 = &v33;
  unsigned int v17 = v36;
  uint64_t v18 = v3;
  uint64_t v19 = &v31;
  unsigned int v20 = &v29;
  uint64_t v35 = &v13;
  if (mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v35, 1))
  {
    uint64_t v4 = *(void *)((((unint64_t)v34
                     + 16 * (((unint64_t)*((unsigned int *)v34 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v34 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v34 + 10)
                   + 8);
    if (v4) {
      uint64_t v5 = (mlir::ForwardIterator *)(v4 - 8);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = (mlir::ForwardIterator *)*((void *)v5 + 5);
    v3[2] = v5;
    void v3[3] = v6;
    if (v32)
    {
      uint64_t v7 = v31;
      uint64_t v8 = 8 * v32;
      do
      {
        uint64_t v9 = *v7++;
        mlir::OpBuilder::insert((mlir::OpBuilder *)v3, v9);
        v8 -= 8;
      }
      while (v8);
    }
    if (v30)
    {
      uint64_t v10 = v29;
      uint64_t v11 = 8 * v30;
      do
      {
        uint64_t v12 = *v10++;
        mlir::Operation::erase(v12);
        v11 -= 8;
      }
      while (v11);
    }
  }
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
}

void sub_2117F7404(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
}

void sub_2117F7418(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,llvm *a21,uint64_t a22,unsigned int a23)
{
}

uint64_t mlir::collectRegions(mlir::ForwardIterator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  if (a3 && *(unsigned char *)(a3 + 1))
  {
    if (*(unsigned char *)(a3 + 2))
    {
      uint64_t v5 = (llvm *)(*(uint64_t (**)(uint64_t, mlir::ForwardIterator *))(*(void *)v17 + 120))(v17, a1);
      float v7 = v6;
      uint64_t v8 = (llvm::raw_ostream *)llvm::dbgs(v5);
      uint64_t v9 = v8;
      uint64_t v10 = (void *)*((void *)v8 + 4);
      if (*((void *)v8 + 3) - (void)v10 > 0xDuLL)
      {
        qmemcpy(v10, "Module Cost0: ", 14);
        *((void *)v8 + 4) += 14;
      }
      else
      {
        uint64_t v9 = llvm::raw_ostream::write(v8, "Module Cost0: ", 0xEuLL);
      }
      std::to_string(&__p, v7 * 1000.0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v13 = llvm::raw_ostream::write(v9, (const char *)p_p, size);
      unint64_t v14 = (_DWORD *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 3uLL)
      {
        _DWORD *v14 = 175336736;
        *((void *)v13 + 4) += 4;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_19:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::raw_ostream::write(v13, " ms\n", 4uLL);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_19;
        }
      }
    }
    return 1;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
  uint64_t v18 = &__p;
  uint64_t result = mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v18, 1);
  if (result) {
    mlir::legalizeRegions(a1, v17);
  }
  return result;
}

void sub_2117F76B8()
{
  JUMPOUT(0x21667D3C0);
}

uint64_t *mlir::anonymous namespace'::BuildContext::notifyOperationInserted(mlir::_anonymous_namespace_::BuildContext *this, mlir::Operation *a2)
{
  uint64_t v15 = a2;
  uint64_t v4 = *((void *)this + 2);
  uint64_t result = (uint64_t *)((char *)this + 16);
  uint64_t v3 = v4;
  int v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    int v6 = v5 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (mlir::Operation **)(v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      return result;
    }
    uint64_t v10 = 0;
    int v11 = 1;
    while (v9 != (mlir::Operation *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (mlir::Operation *)-8192;
      }
      if (v12) {
        uint64_t v10 = (uint64_t *)v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (mlir::Operation **)(v3 + 8 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        return result;
      }
    }
    if (v10) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = (uint64_t *)v8;
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v14, (uint64_t *)&v15);
}

uint64_t llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  if (*a3 == *a2
    || (unint64_t v6 = (*a3 - *a2 - 1) | ((unint64_t)(*a3 - *a2 - 1) >> 1),
        unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        BOOL v9 = __CFADD__(v8, 1),
        int v10 = v8 + 1,
        v9))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    unint64_t v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    LODWORD(v25) = (((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v25;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v25, (std::align_val_t)8uLL);
    *(void *)a1 = buffer;
    *(void *)(a1 + 8) = 0;
    uint64_t v27 = *(unsigned int *)(a1 + 16);
    if (v27)
    {
      unint64_t v28 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v29 = (char *)buffer;
      if (v28 < 3) {
        goto LABEL_30;
      }
      unint64_t v30 = v28 + 1;
      uint64_t v29 = &buffer->i8[8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v31 = buffer + 1;
      int64x2_t v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31[-1] = v32;
        int64x2_t *v31 = v32;
        v31 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        uint64_t v34 = &buffer->i8[8 * v27];
        do
        {
          *(void *)uint64_t v29 = -4096;
          v29 += 8;
        }
        while (v29 != v34);
      }
    }
  }
  int v11 = *a2;
  BOOL v12 = *a3;
  if (v11 != v12)
  {
    while (1)
    {
      int v17 = *(_DWORD *)(a1 + 16);
      if (!v17) {
        break;
      }
      int v13 = v17 - 1;
      unsigned int v14 = ((*v11 >> 4) ^ (*v11 >> 9)) & v13;
      uint64_t v15 = (uint64_t *)(*(void *)a1 + 8 * v14);
      uint64_t v16 = *v15;
      if (*v11 != *v15)
      {
        uint64_t v19 = 0;
        int v20 = 1;
        while (v16 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v16 == -8192;
          }
          if (v21) {
            uint64_t v19 = v15;
          }
          unsigned int v22 = v14 + v20++;
          unsigned int v14 = v22 & v13;
          uint64_t v15 = (uint64_t *)(*(void *)a1 + 8 * v14);
          uint64_t v16 = *v15;
          if (*v11 == *v15) {
            goto LABEL_8;
          }
        }
        if (v19) {
          uint64_t v18 = v19;
        }
        else {
          uint64_t v18 = v15;
        }
        goto LABEL_11;
      }
LABEL_8:
      if (++v11 == v12) {
        return a1;
      }
    }
    uint64_t v18 = 0;
LABEL_11:
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(a1, v18, v11);
    goto LABEL_8;
  }
  return a1;
}

void mlir::anonymous namespace'::eraseOpsFromRegion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *(void **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(void *)a1 + 8 * v7;
  BOOL v9 = (void *)v8;
  if (v7)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = *((unsigned int *)a2 + 4);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *a2 + 8 * v11;
    unsigned int v14 = *(void **)a1;
    while (1)
    {
      uint64_t v15 = *v14;
      if (!v11) {
        break;
      }
      LODWORD(v16) = ((v15 >> 4) ^ (v15 >> 9)) & v12;
      int v17 = (uint64_t *)(v10 + 8 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v15)
      {
        if (v17 == (uint64_t *)v13) {
          goto LABEL_12;
        }
      }
      else
      {
        int v19 = 1;
        do
        {
          if (v18 == -4096) {
            goto LABEL_12;
          }
          int v20 = v16 + v19++;
          uint64_t v16 = v20 & v12;
          uint64_t v18 = *(void *)(v10 + 8 * v16);
        }
        while (v18 != v15);
        if (v10 + 8 * v16 == v13)
        {
LABEL_12:
          unint64_t v6 = v14;
          break;
        }
      }
      if (++v14 == (void *)v8) {
        goto LABEL_33;
      }
    }
    uint64_t v21 = *(unsigned int *)(a3 + 8);
    if (v21 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a3 + 8);
    }
    *(void *)(*(void *)a3 + 8 * v21) = v15;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v6 != (void *)v8)
  {
    unsigned int v22 = v6 + 1;
    if (v6 + 1 != (void *)v8)
    {
      BOOL v9 = v6;
      while (1)
      {
        uint64_t v23 = *v22;
        uint64_t v24 = *a2;
        uint64_t v25 = *((unsigned int *)a2 + 4);
        if (!v25) {
          goto LABEL_27;
        }
        LODWORD(v26) = ((v23 >> 4) ^ (v23 >> 9)) & (v25 - 1);
        uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
        uint64_t v28 = *v27;
        if (*v27 != v23) {
          break;
        }
LABEL_28:
        if (v27 == (uint64_t *)(v24 + 8 * v25))
        {
          unint64_t v31 = *(unsigned int *)(a3 + 8);
          if (v31 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31 + 1, 8);
            unint64_t v31 = *(unsigned int *)(a3 + 8);
          }
          *(void *)(*(void *)a3 + 8 * v31) = v23;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          *v9++ = v23;
        }
        if (++v22 == (uint64_t *)v8) {
          goto LABEL_33;
        }
      }
      int v29 = 1;
      while (v28 != -4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & (v25 - 1);
        uint64_t v28 = *(void *)(v24 + 8 * v26);
        if (v28 == v23)
        {
          uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
          goto LABEL_28;
        }
      }
LABEL_27:
      uint64_t v27 = (uint64_t *)(v24 + 8 * v25);
      goto LABEL_28;
    }
    BOOL v9 = v6;
  }
LABEL_33:
  *(_DWORD *)(a1 + 8) = ((unint64_t)v9 - *(void *)a1) >> 3;
}

uint64_t mlir::emitOptionalWarning<char const(&)[37],llvm::StringRef &>(uint64_t a1, char a2, char *a3, void ***a4)
{
  v12[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitWarning(a1, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, a3);
    __int16 v10 = 261;
    unint64_t v6 = a4[1];
    v9[0] = *a4;
    v9[1] = v6;
    mlir::Diagnostic::operator<<((uint64_t)v12, v9);
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t result = *a1;
  int v3 = *((_DWORD *)result + 4);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v6 = (uint64_t *)(*result + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      return result;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unint64_t v6 = (uint64_t *)(*result + 8 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        return result;
      }
    }
    if (v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v6;
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v12, &v13);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = a2;
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (uint64_t *)(*(void *)v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_14;
    }
    BOOL v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        BOOL v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (uint64_t *)(*(void *)v3 + 8 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_14;
      }
    }
    if (v10) {
      unsigned int v14 = v10;
    }
    else {
      unsigned int v14 = v8;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v3, v14, &v27);
  uint64_t v5 = v27;
LABEL_14:
  uint64_t v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 48) + 32))(*(void *)(v5 + 48), v15);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t *)a1[1];
  int v17 = *((_DWORD *)result + 4);
  if (v17)
  {
    int v18 = v17 - 1;
    unsigned int v19 = ((v27 >> 4) ^ (v27 >> 9)) & v18;
    int v20 = (uint64_t *)(*result + 8 * v19);
    uint64_t v21 = *v20;
    if (v27 == *v20) {
      return result;
    }
    unsigned int v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        unsigned int v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      int v20 = (uint64_t *)(*result + 8 * v19);
      uint64_t v21 = *v20;
      if (v27 == *v20) {
        return result;
      }
    }
    if (v22) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = v20;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v26, &v27);
}

uint64_t llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v6 == a2)
  {
    uint64_t v10 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v5 = *(void *)a1;
    }
    *(void *)(v5 + 8 * v6) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    return *(void *)a1 + 8 * v11 - 8;
  }
  else
  {
    uint64_t v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
    *(void *)(v5 + 8 * v6) = *(void *)(v5 + 8 * v6 - 8);
    uint64_t v9 = *(void *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (void)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *uint64_t v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,false>(uint64_t result, mlir::Block ***a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v88 = a2;
    uint64_t v89 = a2 - 2;
    unsigned int v11 = a2 - 3;
    BOOL v12 = (mlir::Operation **)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)v9);
                if (result)
                {
                  uint64_t v41 = *(mlir::Operation **)v9;
                  *(void *)unint64_t v9 = *(a2 - 1);
                  *(a2 - 1) = (mlir::Block **)v41;
                }
                break;
              case 3:
                break;
              case 4:
                uint64_t v42 = (mlir::Block ***)(v9 + 16);
                uint64_t result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(v9 + 16));
                if (result)
                {
                  unsigned int v43 = *v42;
                  *uint64_t v42 = *(a2 - 1);
                  *(a2 - 1) = v43;
                  uint64_t result = mlir::Operation::isBeforeInBlock(*v42, *(mlir::Operation **)(v9 + 8));
                  if (result)
                  {
                    uint64_t v45 = *(void *)(v9 + 8);
                    unsigned int v44 = *(mlir::Block ***)(v9 + 16);
                    uint64_t v46 = *(mlir::Operation **)v9;
                    *(void *)(v9 + 8) = v44;
                    *(void *)(v9 + 16) = v45;
                    uint64_t result = mlir::Operation::isBeforeInBlock(v44, v46);
                    if (result) {
                      *(int8x16_t *)unint64_t v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unint64_t v47 = v9 + 8;
            BOOL v49 = (mlir::Block ***)v9 == a2 || v47 == (void)a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v9;
                do
                {
                  uint64_t v54 = *(mlir::Operation **)v51;
                  BOOL v53 = *(mlir::Block ***)(v51 + 8);
                  unint64_t v51 = v47;
                  uint64_t result = mlir::Operation::isBeforeInBlock(v53, v54);
                  if (result)
                  {
                    uint64_t v55 = *(mlir::Block ***)v51;
                    uint64_t v56 = v50;
                    do
                    {
                      *(void *)(v9 + v56 + 8) = *(void *)(v9 + v56);
                      if (!v56)
                      {
                        unsigned int v52 = (void *)v9;
                        goto LABEL_78;
                      }
                      uint64_t result = mlir::Operation::isBeforeInBlock(v55, *(mlir::Operation **)(v9 + v56 - 8));
                      v56 -= 8;
                    }
                    while ((result & 1) != 0);
                    unsigned int v52 = (void *)(v9 + v56 + 8);
LABEL_78:
                    *unsigned int v52 = v55;
                  }
                  unint64_t v47 = v51 + 8;
                  v50 += 8;
                }
                while ((mlir::Block ***)(v51 + 8) != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unsigned int v83 = *(mlir::Operation **)v9;
                BOOL v82 = *(mlir::Block ***)(v9 + 8);
                unint64_t v9 = v47;
                uint64_t result = mlir::Operation::isBeforeInBlock(v82, v83);
                if (result)
                {
                  uint64_t v84 = *(mlir::Operation **)v9;
                  int v85 = (void *)v9;
                  do
                  {
                    unint64_t v86 = v85;
                    uint64_t v87 = *--v85;
                    *unint64_t v86 = v87;
                    uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v84, (mlir::Operation *)*(v86 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v85 = v84;
                }
                unint64_t v47 = v9 + 8;
              }
              while ((mlir::Block ***)(v9 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((mlir::Block ***)v9 != a2)
            {
              int64_t v57 = (unint64_t)(v14 - 2) >> 1;
              int64_t v90 = v57;
              do
              {
                int64_t v58 = v57;
                if (v90 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  unint64_t v60 = v9 + 8 * v59;
                  if (2 * v57 + 2 < v14
                    && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *(mlir::Operation **)(v60 + 8)))
                  {
                    v60 += 8;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  uint64_t v61 = (mlir::Operation **)(v9 + 8 * v58);
                  uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *v61);
                  if ((result & 1) == 0)
                  {
                    uint64_t v62 = *v61;
                    do
                    {
                      uint64_t v63 = (mlir::Operation **)v60;
                      *uint64_t v61 = *(mlir::Operation **)v60;
                      if (v90 < v59) {
                        break;
                      }
                      uint64_t v64 = (2 * v59) | 1;
                      unint64_t v60 = v9 + 8 * v64;
                      uint64_t v65 = 2 * v59 + 2;
                      if (v65 < v14
                        && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *(mlir::Operation **)(v60 + 8)))
                      {
                        v60 += 8;
                        uint64_t v64 = v65;
                      }
                      uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, v62);
                      uint64_t v61 = v63;
                      uint64_t v59 = v64;
                    }
                    while (!result);
                    *uint64_t v63 = v62;
                    a2 = v88;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v66 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = *(mlir::Operation **)v9;
                uint64_t v72 = (void *)v9;
                do
                {
                  uint64_t v73 = (mlir::Block ***)&v72[v70 + 1];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 < v66)
                  {
                    uint64_t result = mlir::Operation::isBeforeInBlock(*v73, (mlir::Operation *)v72[v70 + 2]);
                    if (result)
                    {
                      ++v73;
                      uint64_t v74 = v75;
                    }
                  }
                  *uint64_t v72 = *v73;
                  uint64_t v72 = v73;
                  uint64_t v70 = v74;
                }
                while (v74 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                __int32 v76 = v69 - 1;
                if (v73 == v76)
                {
                  int v67 = v76;
                  *uint64_t v73 = (mlir::Block **)v71;
                }
                else
                {
                  *uint64_t v73 = *v76;
                  int v67 = v76;
                  uint64_t *v76 = (mlir::Block **)v71;
                  uint64_t v77 = (uint64_t)v73 - v9 + 8;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                    int v79 = (mlir::Block ***)(v9 + 8 * v78);
                    uint64_t result = mlir::Operation::isBeforeInBlock(*v79, (mlir::Operation *)*v73);
                    if (result)
                    {
                      int v80 = *v73;
                      do
                      {
                        int v81 = v79;
                        *uint64_t v73 = *v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        int v79 = (mlir::Block ***)(v9 + 8 * v78);
                        uint64_t result = mlir::Operation::isBeforeInBlock(*v79, (mlir::Operation *)v80);
                        uint64_t v73 = v81;
                      }
                      while ((result & 1) != 0);
                      *int v81 = v80;
                    }
                  }
                }
                BOOL v68 = v66-- <= 2;
                a2 = v67;
              }
              while (!v68);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = (mlir::Block ***)(v9 + 8 * ((unint64_t)v14 >> 1));
          if ((unint64_t)v13 < 0x401) {
            break;
          }
          uint64_t v17 = 8 * v15;
          int v18 = *(mlir::Operation **)v9;
          *(void *)unint64_t v9 = *(void *)(v9 + v17);
          *(void *)(v9 + v17) = v18;
          a2 = v88;
          --a3;
          if (a4) {
            goto LABEL_12;
          }
LABEL_11:
          if (mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v9 - 8), *(mlir::Operation **)v9)) {
            goto LABEL_12;
          }
          int64x2_t v32 = *(mlir::Operation **)v9;
          uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v9, (mlir::Operation *)*v10);
          if (result)
          {
            BOOL v12 = (mlir::Operation **)v9;
            do
            {
              uint64_t v33 = v12[1];
              ++v12;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unint64_t v34 = v9 + 8;
            do
            {
              BOOL v12 = (mlir::Operation **)v34;
              if (v34 >= (unint64_t)a2) {
                break;
              }
              v34 += 8;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, *v12);
            }
            while (!result);
          }
          uint64_t v35 = (mlir::Operation **)a2;
          if (v12 < (mlir::Operation **)a2)
          {
            uint64_t v35 = (mlir::Operation **)a2;
            do
            {
              uint64_t v36 = *--v35;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v35)
          {
            uint64_t v37 = *v12;
            *BOOL v12 = *v35;
            *uint64_t v35 = v37;
            do
            {
              unsigned int v38 = v12[1];
              ++v12;
            }
            while (!mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v38));
            do
            {
              unsigned int v39 = *--v35;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v39);
            }
            while ((result & 1) != 0);
          }
          unsigned int v40 = v12 - 1;
          BOOL v4 = (unint64_t)(v12 - 1) >= v9;
          BOOL v5 = v12 - 1 == (mlir::Operation **)v9;
          if (v12 - 1 != (mlir::Operation **)v9) {
            *(void *)unint64_t v9 = *v40;
          }
          a4 = 0;
          uint64_t *v40 = v32;
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v19 = 0;
        int v20 = *(mlir::Operation **)v9;
        do
        {
          BOOL v21 = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v9 + v19 + 8), v20);
          v19 += 8;
        }
        while (v21);
        unint64_t v22 = v9 + v19;
        if (v19 == 8)
        {
          a2 = v88;
          do
          {
            if (v22 >= (unint64_t)a2) {
              break;
            }
            BOOL v24 = *--a2;
          }
          while (!mlir::Operation::isBeforeInBlock(v24, v20));
        }
        else
        {
          do
            int v23 = *--a2;
          while (!mlir::Operation::isBeforeInBlock(v23, v20));
        }
        if (v22 >= (unint64_t)a2)
        {
          int v30 = (mlir::Block ***)(v22 - 8);
          if (v22 - 8 == v9) {
            goto LABEL_30;
          }
LABEL_29:
          *(void *)unint64_t v9 = *v30;
          goto LABEL_30;
        }
        unsigned int v25 = (mlir::Block ***)(v9 + v19);
        uint64_t v26 = a2;
        do
        {
          uint64_t v27 = *v25;
          int64x2_t *v25 = *v26;
          *uint64_t v26 = v27;
          do
          {
            uint64_t v28 = v25[1];
            ++v25;
          }
          while (mlir::Operation::isBeforeInBlock(v28, v20));
          do
            int v29 = *--v26;
          while (!mlir::Operation::isBeforeInBlock(v29, v20));
        }
        while (v25 < v26);
        int v30 = v25 - 1;
        if (v30 != (mlir::Block ***)v9) {
          goto LABEL_29;
        }
LABEL_30:
        int64x2_t *v30 = (mlir::Block **)v20;
        BOOL v4 = v22 >= (unint64_t)a2;
        a2 = v88;
        if (v4) {
          break;
        }
LABEL_34:
        a4 = 0;
        BOOL v12 = (mlir::Operation **)(v30 + 1);
      }
      BOOL v12 = (mlir::Operation **)(v30 + 1);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,0>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3, mlir::Block ***a4, mlir::Block ***a5)
{
  if (mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3))
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2))
    {
      unsigned int v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (mlir::Operation::isBeforeInBlock(*a2, *a1))
      {
        BOOL v12 = *a1;
        *a1 = (mlir::Operation *)*a2;
        *a2 = (mlir::Block **)v12;
      }
    }
  }
  BOOL result = mlir::Operation::isBeforeInBlock(*a5, (mlir::Operation *)*a4);
  if (result)
  {
    uint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
      if (result)
      {
        uint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = mlir::Operation::isBeforeInBlock(*a2, *a1);
        if (result)
        {
          uint64_t v17 = *a1;
          *a1 = (mlir::Operation *)*a2;
          *a2 = (mlir::Block **)v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3)
{
  BOOL v6 = mlir::Operation::isBeforeInBlock(*a2, *a1);
  BOOL result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
  if (v6)
  {
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = (mlir::Operation *)*a3;
      *a3 = (mlir::Block **)v8;
    }
    else
    {
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v8;
      BOOL result = mlir::Operation::isBeforeInBlock(*a3, v8);
      if (result)
      {
        unsigned int v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = mlir::Operation::isBeforeInBlock(*a2, *a1);
    if (result)
    {
      uint64_t v10 = *a1;
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(uint64_t a1, mlir::Block ***a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)a1))
      {
        BOOL v6 = *(mlir::Operation **)a1;
        *(void *)a1 = *(a2 - 1);
        *(a2 - 1) = (mlir::Block **)v6;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      unint64_t v15 = (mlir::Block ***)(a1 + 16);
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(a1 + 16)))
      {
        uint64_t v16 = *v15;
        uint64_t *v15 = *(a2 - 1);
        *(a2 - 1) = v16;
        if (mlir::Operation::isBeforeInBlock(*v15, *(mlir::Operation **)(a1 + 8)))
        {
          uint64_t v18 = *(void *)(a1 + 8);
          uint64_t v17 = *(mlir::Block ***)(a1 + 16);
          uint64_t v19 = *(mlir::Operation **)a1;
          *(void *)(a1 + 8) = v17;
          *(void *)(a1 + 16) = v18;
          if (mlir::Operation::isBeforeInBlock(v17, v19)) {
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      uint64_t v7 = (mlir::Operation **)(a1 + 16);
      uint64_t v8 = (mlir::Block ***)(a1 + 24);
      if ((mlir::Block ***)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (mlir::Operation::isBeforeInBlock(*v8, *v7))
    {
      BOOL v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = a1 + v13;
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16)
        {
          unsigned int v11 = (mlir::Block ***)a1;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v12, *(mlir::Operation **)(v14 + 8)));
      unsigned int v11 = (mlir::Block ***)(a1 + v13 + 24);
LABEL_7:
      uint64_t *v11 = v12;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = (mlir::Operation **)v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

void mlir::ConversionTarget::~ConversionTarget(mlir::ConversionTarget *this)
{
  *(void *)this = &unk_26C3620B8;
  uint64_t v2 = (char *)this + 120;
  uint64_t v3 = (char *)*((void *)this + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 96);
  if (*((_DWORD *)this + 21))
  {
    uint64_t v4 = *((unsigned int *)this + 20);
    if (v4)
    {
      uint64_t v5 = 0;
      do
      {
        BOOL v6 = *(llvm **)(*((void *)this + 9) + v5);
        if (v6 != (llvm *)-8 && v6 != 0) {
          llvm::deallocate_buffer(v6, (void *)(*(void *)v6 + 17));
        }
        v5 += 8;
      }
      while (8 * v4 != v5);
    }
  }
  free(*((void **)this + 9));
  uint64_t v8 = (llvm *)*((void *)this + 6);
  uint64_t v9 = *((unsigned int *)this + 16);
  if (v9)
  {
    int v10 = (void *)((char *)v8 + 8);
    uint64_t v11 = 40 * v9;
    do
    {
      if ((*(void *)v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        BOOL v12 = (void *)*((void *)v8 + 4);
        if ((void *)((char *)v8 + 8) == v12)
        {
          (*(void (**)(void *))(*((void *)v8 + 1) + 32))((void *)v8 + 1);
        }
        else if (v12)
        {
          (*(void (**)(void *))(*v12 + 40))(v12);
        }
      }
      uint64_t v8 = (llvm *)((char *)v8 + 40);
      v10 += 5;
      v11 -= 40;
    }
    while (v11);
    uint64_t v8 = (llvm *)*((void *)this + 6);
    uint64_t v13 = 40 * *((unsigned int *)this + 16);
  }
  else
  {
    uint64_t v13 = 0;
  }
  llvm::deallocate_buffer(v8, (void *)v13);
}

{
  mlir::ConversionTarget::~ConversionTarget(this);
}

uint64_t sub_2117F8D4C()
{
  return v0;
}

void sub_2117F8D74()
{
  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(llvm **)(*(void *)a1 + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
        {
          uint64_t v6 = *(void *)v4;
          uint64_t v7 = (void *)*((void *)v4 + 4);
          if (v7 == (void *)((char *)v4 + 8))
          {
            (*(void (**)(void *))(*((void *)v4 + 1) + 32))((void *)v4 + 1);
          }
          else if (v7)
          {
            (*(void (**)(void *))(*v7 + 40))(v7);
          }
          llvm::deallocate_buffer(v4, (void *)(v6 + 41));
        }
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void mlir::OpBuilder::create<mlir::ModuleOp>(uint64_t a1, uint64_t a2)
{
  v12[38] = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  int Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (v6)
  {
    mlir::OperationState::OperationState(v12, a2, v5);
    mlir::ModuleOp::build(a1, (mlir::OperationState *)v12);
  }
  __int16 v11 = 1283;
  unint64_t v10[2] = (uint64_t)"builtin.module";
  _OWORD v10[3] = 14;
       "e dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v9 = 259;
  llvm::operator+(v10, (uint64_t *)&v8, (uint64_t)v12);
  llvm::report_fatal_error((llvm::Twine *)v12, 1);
}

void mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    __int16 v9 = *(void **)(v6 + 32);
    int v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      BOOL v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        __int16 v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

BOOL llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (llvm *)a2;
  if (!mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(void *)(*(void *)a1 + 8), **(void **)(a1 + 8), a2, *(void *)(a1 + 16) + 48))goto LABEL_141; {
  uint64_t v4 = *(void *)(a1 + 16);
  }
  (*(void (**)(void))(**(void **)(v4 + 120) + 16))(*(void *)(v4 + 120));
  if ((*((unsigned char *)v2 + 46) & 0x80) == 0 || (uint64_t v5 = *((unsigned int *)v2 + 17), !v5))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    v141[0] = v2;
LABEL_6:
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 8);
    if (v9 == v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = ((v9 - v10) << 6) - 1;
    }
    uint64_t v12 = *(void *)(v8 + 40);
    unint64_t v13 = v12 + *(void *)(v8 + 32);
    if (v11 == v13)
    {
      std::deque<mlir::Operation *>::__add_back_capacity(v8);
      uint64_t v12 = *(void *)(v8 + 40);
      uint64_t v10 = *(void *)(v8 + 8);
      unint64_t v13 = *(void *)(v8 + 32) + v12;
    }
    *(void *)(*(void *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v2;
    *(void *)(v8 + 40) = v12 + 1;
    uint64_t v14 = *(void *)(v8 + 48);
    int v15 = *(_DWORD *)(v8 + 64);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = v16 & ((v2 >> 4) ^ (v2 >> 9));
      uint64_t v18 = (uint64_t *)(v14 + 8 * v17);
      uint64_t v19 = (llvm *)*v18;
      if ((llvm *)*v18 == v2)
      {
LABEL_146:
        uint64_t v127 = (*(uint64_t (**)(void))(**(void **)(v8 + 120) + 16))(*(void *)(v8 + 120));
        uint64_t I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*(void *)(v8 + 120) + 8), *(_DWORD *)(v8 + 128));
        mlir::Operation::setAttr((uint64_t)v2, v127, I32IntegerAttr);
        return *(void *)(*(void *)(a1 + 16) + 40) < *(void *)(**(void **)(a1 + 8) + 16);
      }
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != (llvm *)-4096)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == (llvm *)-8192;
        }
        if (v22) {
          uint64_t v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t v18 = (uint64_t *)(v14 + 8 * v17);
        uint64_t v19 = (llvm *)*v18;
        if ((llvm *)*v18 == v2) {
          goto LABEL_146;
        }
      }
      if (v20) {
        int v126 = v20;
      }
      else {
        int v126 = v18;
      }
    }
    else
    {
      int v126 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v8 + 48, v126, (uint64_t *)v141);
    uint64_t v2 = v141[0];
    goto LABEL_146;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)v2 + 9);
  while (1)
  {
    BOOL v24 = *(_DWORD **)(v7 + 32 * v6 + 24);
    uint64_t v146 = v24;
    if ((~v24[2] & 7) == 0) {
      goto LABEL_22;
    }
    __p[0] = v24;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)__p);
    if (DefiningOp)
    {
      uint64_t v26 = DefiningOp;
      uint64_t v27 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v26 + 48) + 32))(*(void *)(v26 + 48), v27)) {
        goto LABEL_22;
      }
    }
    uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&v146);
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)(v4 + 48);
    uint64_t v31 = *(unsigned int *)(v4 + 64);
    if (v31)
    {
      LODWORD(v32) = ((v28 >> 4) ^ (v28 >> 9)) & (v31 - 1);
      uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
      uint64_t v34 = *v33;
      if (*v33 == v28) {
        goto LABEL_33;
      }
      int v35 = 1;
      while (v34 != -4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        uint64_t v34 = *(void *)(v30 + 8 * v32);
        if (v34 == v28)
        {
          uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
          goto LABEL_33;
        }
      }
    }
    uint64_t v33 = (uint64_t *)(v30 + 8 * v31);
LABEL_33:
    if (v33 == (uint64_t *)(v30 + 8 * v31)) {
      break;
    }
LABEL_22:
    if (++v6 == v5)
    {
      int v129 = *((_DWORD *)v2 + 11);
      uint64_t v8 = *(void *)(a1 + 16);
      v141[0] = v2;
      if ((v129 & 0x800000) != 0)
      {
        uint64_t v130 = *((unsigned int *)v2 + 17);
        if (v130)
        {
          int v131 = (uint64_t *)(*((void *)v2 + 9) + 24);
          do
          {
            uint64_t v147 = *v131;
            uint64_t v134 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
            if (v134)
            {
              unsigned int v135 = (mlir::Operation *)v134;
              uint64_t v136 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void *, uint64_t))(**((void **)v135 + 6) + 32))(*((void **)v135 + 6), v136))
              {
                (*(void (**)(void))(**(void **)(v8 + 120) + 16))(*(void *)(v8 + 120));
                int v137 = *(_OWORD **)(*(void *)(v8 + 120) + 8);
                long long v138 = v137[1];
                *(_OWORD *)std::string __p = *v137;
                long long v144 = v138;
                uint64_t v139 = (void *)*((void *)v135 - 2);
                if (!v139 || *v139)
                {
                  uint64_t v132 = *((void *)v2 + 2);
                  ZinIrHalH13g::~ZinIrHalH13g(v2);
                  *(void *)&long long v144 = v132;
                  *((void *)&v144 + 1) = v133;
                  mlir::OpBuilder::clone((uint64_t **)__p, v135);
                }
              }
            }
            v131 += 4;
            --v130;
          }
          while (v130);
        }
      }
      goto LABEL_6;
    }
  }
  int v37 = *(_DWORD *)(v4 + 112);
  if (!v37) {
    goto LABEL_40;
  }
  uint64_t v38 = *(void *)(v4 + 96);
  int v39 = v37 - 1;
  unsigned int v40 = v39 & ((v28 >> 4) ^ (v28 >> 9));
  uint64_t v41 = *(void *)(v38 + 8 * v40);
  if (v41 != v28)
  {
    int v42 = 1;
    while (v41 != -4096)
    {
      unsigned int v43 = v40 + v42++;
      unsigned int v40 = v43 & v39;
      uint64_t v41 = *(void *)(v38 + 8 * v40);
      if (v41 == v28) {
        goto LABEL_141;
      }
    }
LABEL_40:
    long long v144 = 0u;
    unsigned long long v145 = 0u;
    *(_OWORD *)std::string __p = 0u;
    v141[0] = 0;
    v141[1] = 0;
    unsigned int v142 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    uint64_t v45 = *((void *)&v145 + 1);
    unint64_t v44 = v145;
    *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v145 + 1) + (void)v145) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((void *)&v145 + 1) + v145) & 0x1FF)) = v29;
    *((void *)&v145 + 1) = v45 + 1;
    if (v45 == -1) {
      goto LABEL_118;
    }
    uint64_t v46 = (char *)__p[1];
    while (2)
    {
      uint64_t v47 = *(void *)(*(void *)&v46[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
      int v48 = *(_DWORD *)(v47 + 44);
      if ((v48 & 0x7FFFFF) != 0)
      {
        uint64_t v49 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v47 + 48) + 32))(*(void *)(v47 + 48), v49))
        {
          int v48 = *(_DWORD *)(v47 + 44);
          goto LABEL_46;
        }
LABEL_102:
        int v99 = 1;
      }
      else
      {
LABEL_46:
        if ((v48 & 0x800000) != 0)
        {
          uint64_t v50 = *(unsigned int *)(v47 + 68);
          if (v50)
          {
            uint64_t v51 = 0;
            uint64_t v52 = *(void *)(v47 + 72);
            while (2)
            {
              uint64_t v147 = *(void *)(v52 + 32 * v51 + 24);
              uint64_t v140 = 0;
              uint64_t v58 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
              uint64_t v140 = v58;
              if (v58)
              {
                uint64_t v59 = v58;
                uint64_t v60 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v59 + 48) + 32))(*(void *)(v59 + 48), v60) & 1) == 0)
                {
                  uint64_t v61 = v140;
                  if (*(_UNKNOWN **)(*(void *)(v140 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
                  {
                    uint64_t v62 = *(void *)(v4 + 48);
                    uint64_t v63 = *(unsigned int *)(v4 + 64);
                    unsigned int v64 = v140 >> 4;
                    if (v63)
                    {
                      LODWORD(v65) = (v63 - 1) & (v64 ^ (v140 >> 9));
                      uint64_t v66 = (uint64_t *)(v62 + 8 * v65);
                      uint64_t v67 = *v66;
                      if (*v66 != v140)
                      {
                        int v68 = 1;
                        do
                        {
                          if (v67 == -4096) {
                            goto LABEL_60;
                          }
                          int v69 = v65 + v68++;
                          uint64_t v65 = v69 & (v63 - 1);
                          uint64_t v67 = *(void *)(v62 + 8 * v65);
                        }
                        while (v67 != v140);
                        uint64_t v66 = (uint64_t *)(v62 + 8 * v65);
                      }
                    }
                    else
                    {
LABEL_60:
                      uint64_t v66 = (uint64_t *)(v62 + 8 * v63);
                    }
                    if (v66 != (uint64_t *)(v62 + 8 * v63)) {
                      goto LABEL_102;
                    }
                    int v70 = *(_DWORD *)(v4 + 112);
                    if (v70)
                    {
                      uint64_t v71 = *(void *)(v4 + 96);
                      int v72 = v70 - 1;
                      unsigned int v73 = v72 & (v64 ^ (v140 >> 9));
                      uint64_t v74 = *(void *)(v71 + 8 * v73);
                      if (v74 == v140) {
                        goto LABEL_102;
                      }
                      int v75 = 1;
                      while (v74 != -4096)
                      {
                        unsigned int v76 = v73 + v75++;
                        unsigned int v73 = v76 & v72;
                        uint64_t v74 = *(void *)(v71 + 8 * v73);
                        if (v74 == v140) {
                          goto LABEL_102;
                        }
                      }
                    }
                    unsigned int v77 = v142;
                    if (v142)
                    {
                      LODWORD(v78) = (v142 - 1) & (v64 ^ (v140 >> 9));
                      int v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      uint64_t v80 = *(void *)v79;
                      if (*(void *)v79 != v140)
                      {
                        int v81 = 1;
                        do
                        {
                          if (v80 == -4096) {
                            goto LABEL_74;
                          }
                          int v82 = v78 + v81++;
                          uint64_t v78 = v82 & (v142 - 1);
                          uint64_t v80 = *((void *)v141[0] + v78);
                        }
                        while (v80 != v140);
                        int v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      }
                    }
                    else
                    {
LABEL_74:
                      int v79 = (llvm *)((char *)v141[0] + 8 * v142);
                    }
                    if (v79 == (llvm *)((char *)v141[0] + 8 * v142))
                    {
                      int v83 = *(_DWORD *)(v4 + 88);
                      if (!v83) {
                        goto LABEL_77;
                      }
                      uint64_t v53 = *(void *)(v4 + 72);
                      unsigned int v54 = v64 ^ (v140 >> 9);
                      int v55 = v83 - 1;
                      unsigned int v56 = (v83 - 1) & v54;
                      uint64_t v57 = *(void *)(v53 + 8 * v56);
                      if (v57 != v140)
                      {
                        int v97 = 1;
                        while (v57 != -4096)
                        {
                          unsigned int v98 = v56 + v97++;
                          unsigned int v56 = v98 & v55;
                          uint64_t v57 = *(void *)(v53 + 8 * v56);
                          if (v57 == v140) {
                            goto LABEL_50;
                          }
                        }
LABEL_77:
                        uint64_t v84 = (char *)__p[1];
                        if ((void *)v144 == __p[1]) {
                          unint64_t v85 = 0;
                        }
                        else {
                          unint64_t v85 = (((void)v144 - (unint64_t)__p[1]) << 6) - 1;
                        }
                        uint64_t v86 = *((void *)&v145 + 1);
                        unint64_t v87 = *((void *)&v145 + 1) + v145;
                        if (v85 == *((void *)&v145 + 1) + (void)v145)
                        {
                          std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                          uint64_t v86 = *((void *)&v145 + 1);
                          uint64_t v84 = (char *)__p[1];
                          unint64_t v87 = v145 + *((void *)&v145 + 1);
                          uint64_t v61 = v140;
                          unsigned int v77 = v142;
                        }
                        *(void *)(*(void *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v61;
                        *((void *)&v145 + 1) = v86 + 1;
                        if (v77)
                        {
                          unsigned int v88 = v77 - 1;
                          unsigned int v89 = ((v140 >> 4) ^ (v140 >> 9)) & v88;
                          int64_t v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                          uint64_t v91 = *v90;
                          if (v140 == *v90) {
                            goto LABEL_50;
                          }
                          long long v92 = 0;
                          int v93 = 1;
                          while (v91 != -4096)
                          {
                            if (v92) {
                              BOOL v94 = 0;
                            }
                            else {
                              BOOL v94 = v91 == -8192;
                            }
                            if (v94) {
                              long long v92 = v90;
                            }
                            unsigned int v95 = v89 + v93++;
                            unsigned int v89 = v95 & v88;
                            int64_t v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                            uint64_t v91 = *v90;
                            if (v140 == *v90) {
                              goto LABEL_50;
                            }
                          }
                          if (v92) {
                            char v96 = v92;
                          }
                          else {
                            char v96 = v90;
                          }
                        }
                        else
                        {
                          char v96 = 0;
                        }
                        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v141, v96, &v140);
                      }
                    }
                  }
                }
              }
LABEL_50:
              if (++v51 == v50) {
                break;
              }
              continue;
            }
          }
        }
        int v99 = 0;
      }
      uint64_t v46 = (char *)__p[1];
      uint64_t v100 = *((void *)&v145 + 1) - 1;
      unint64_t v44 = v145 + 1;
      unsigned long long v145 = __PAIR128__(*((unint64_t *)&v145 + 1), (uint64_t)v145 + 1) + __PAIR128__(-1, 0);
      if (v44 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        uint64_t v46 = (char *)__p[1] + 8;
        unint64_t v44 = v145 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(void *)&unsigned long long v145 = v145 - 512;
        uint64_t v100 = *((void *)&v145 + 1);
      }
      if (((v100 != 0) & ~v99) == 0)
      {
        if (v99)
        {
          uint64_t v147 = v29;
          int v101 = *(_DWORD *)(v4 + 112);
          if (!v101)
          {
            uint64_t v122 = 0;
            goto LABEL_133;
          }
          uint64_t v102 = *(void *)(v4 + 96);
          int v103 = v101 - 1;
          unsigned int v104 = v103 & ((v29 >> 4) ^ (v29 >> 9));
          uint64_t v105 = (uint64_t *)(v102 + 8 * v104);
          uint64_t v106 = *v105;
          if (*v105 != v29)
          {
            unint64_t v107 = 0;
            int v108 = 1;
            while (v106 != -4096)
            {
              if (v107) {
                BOOL v109 = 0;
              }
              else {
                BOOL v109 = v106 == -8192;
              }
              if (v109) {
                unint64_t v107 = v105;
              }
              unsigned int v110 = v104 + v108++;
              unsigned int v104 = v110 & v103;
              uint64_t v105 = (uint64_t *)(v102 + 8 * v104);
              uint64_t v106 = *v105;
              if (*v105 == v29) {
                goto LABEL_134;
              }
            }
            if (v107) {
              uint64_t v122 = v107;
            }
            else {
              uint64_t v122 = v105;
            }
LABEL_133:
            llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v4 + 96, v122, &v147);
          }
          goto LABEL_134;
        }
LABEL_118:
        uint64_t v147 = v29;
        int v111 = *(_DWORD *)(v4 + 88);
        if (v111)
        {
          uint64_t v112 = *(void *)(v4 + 72);
          int v113 = v111 - 1;
          unsigned int v114 = v113 & ((v29 >> 4) ^ (v29 >> 9));
          int v115 = (uint64_t *)(v112 + 8 * v114);
          uint64_t v116 = *v115;
          if (*v115 == v29) {
            goto LABEL_134;
          }
          uint64_t v117 = 0;
          int v118 = 1;
          while (v116 != -4096)
          {
            if (v117) {
              BOOL v119 = 0;
            }
            else {
              BOOL v119 = v116 == -8192;
            }
            if (v119) {
              uint64_t v117 = v115;
            }
            unsigned int v120 = v114 + v118++;
            unsigned int v114 = v120 & v113;
            int v115 = (uint64_t *)(v112 + 8 * v114);
            uint64_t v116 = *v115;
            if (*v115 == v29) {
              goto LABEL_134;
            }
          }
          if (v117) {
            uint64_t v121 = v117;
          }
          else {
            uint64_t v121 = v115;
          }
        }
        else
        {
          uint64_t v121 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v4 + 72, v121, &v147);
LABEL_134:
        llvm::deallocate_buffer(v141[0], (void *)(8 * v142));
      }
      continue;
    }
  }
LABEL_141:
  uint64_t v123 = *(void *)(a1 + 24);
  uint64_t v124 = *(unsigned int *)(v123 + 8);
  if (v124 >= *(_DWORD *)(v123 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v123, (void *)(v123 + 16), v124 + 1, 8);
    LODWORD(v124) = *(_DWORD *)(v123 + 8);
  }
  *(void *)(*(void *)v123 + 8 * v124) = v2;
  ++*(_DWORD *)(v123 + 8);
  return 1;
}

void mlir::anonymous namespace'::RegionQueue::pushFront(mlir::_anonymous_namespace_::RegionQueue *this, mlir::Operation *a2)
{
  uint64_t v2 = a2;
  BOOL v22 = a2;
  unint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    std::deque<mlir::Operation *>::__add_front_capacity((uint64_t)this);
    unint64_t v4 = *((void *)this + 4);
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (*((void *)this + 2) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(void *)(v7 - 8) = v2;
  uint64_t v8 = *((void *)this + 5) + 1;
  *((void *)this + 4) = v4 - 1;
  *((void *)this + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  int v10 = *((_DWORD *)this + 16);
  if (!v10)
  {
    uint64_t v19 = 0;
LABEL_20:
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)this + 48, v19, (uint64_t *)&v22);
    uint64_t v2 = v22;
    goto LABEL_21;
  }
  int v11 = v10 - 1;
  unsigned int v12 = ((v2 >> 4) ^ (v2 >> 9)) & v11;
  unint64_t v13 = (uint64_t *)(v9 + 8 * v12);
  uint64_t v14 = (mlir::Operation *)*v13;
  if ((mlir::Operation *)*v13 != v2)
  {
    int v15 = 0;
    int v16 = 1;
    while (v14 != (mlir::Operation *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (mlir::Operation *)-8192;
      }
      if (v17) {
        int v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      unint64_t v13 = (uint64_t *)(v9 + 8 * v12);
      uint64_t v14 = (mlir::Operation *)*v13;
      if ((mlir::Operation *)*v13 == v2) {
        goto LABEL_21;
      }
    }
    if (v15) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v13;
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v20 = (*(uint64_t (**)(void))(**((void **)this + 15) + 16))(*((void *)this + 15));
  uint64_t I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*((void *)this + 15) + 8), *((_DWORD *)this + 32));
  mlir::Operation::setAttr((uint64_t)v2, v20, I32IntegerAttr);
}

void std::deque<mlir::Operation *>::__add_front_capacity(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 8);
  BOOL v3 = *(char **)(a1 + 16);
  if (v3 == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)(v4 - (*(void *)(a1 + 40) + v5)) >= 0x200)
  {
    *(void *)(a1 + 32) = v5 + 512;
    unsigned int v43 = (void *)*((void *)v3 - 1);
    *(void *)(a1 + 16) = v3 - 8;
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    return;
  }
  uint64_t v6 = *(char **)(a1 + 24);
  uint64_t v7 = *(char **)a1;
  uint64_t v8 = (uint64_t)&v6[-*(void *)a1];
  if (v3 - v2 < (unint64_t)v8)
  {
    if (v2 == v7)
    {
      unsigned int v43 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v43);
      uint64_t v13 = *(void *)(a1 + 16);
      unsigned int v43 = *(void **)(v13 - 8);
      *(void *)(a1 + 16) = v13 - 8;
    }
    else
    {
      unsigned int v43 = operator new(0x1000uLL);
    }
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
      *(void *)(a1 + 32) = 256;
    }
    else {
      *(void *)(a1 + 32) += 512;
    }
    return;
  }
  if (v6 == v7) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v8 >> 2;
  }
  if (v9 >> 61) {
LABEL_54:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int v10 = (char *)operator new(8 * v9);
  int v11 = operator new(0x1000uLL);
  if (v9)
  {
    unsigned int v12 = &v10[8 * v9];
  }
  else
  {
    uint64_t v14 = (char *)operator new(8uLL);
    unsigned int v12 = v14 + 8;
    operator delete(v10);
    uint64_t v2 = *(char **)(a1 + 8);
    BOOL v3 = *(char **)(a1 + 16);
    int v10 = v14;
  }
  *(void *)int v10 = v11;
  int v15 = v10 + 8;
  int v16 = v10;
  if (v2 != v3)
  {
    while (1)
    {
      if (v15 == v12)
      {
        if (v10 <= v16)
        {
          unint64_t v27 = (v15 - v16) >> 2;
          if (v15 == v16) {
            unint64_t v27 = 1;
          }
          if (v27 >> 61) {
            goto LABEL_54;
          }
          unint64_t v28 = v27 >> 2;
          uint64_t v29 = 8 * v27;
          uint64_t v30 = (char *)operator new(8 * v27);
          uint64_t v31 = v30;
          BOOL v17 = &v30[8 * v28];
          uint64_t v20 = v17;
          int64_t v32 = v15 - v10;
          if (v15 != v10)
          {
            uint64_t v20 = &v17[v32 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v33 = v32 - 8;
            if (v33 < 0x38 || (unint64_t)(&v30[8 * v28] - v10) < 0x20)
            {
              uint64_t v34 = &v30[8 * v28];
              int v35 = v10;
              goto LABEL_44;
            }
            uint64_t v37 = (v33 >> 3) + 1;
            uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v34 = &v17[v38];
            int v35 = &v10[v38];
            int v39 = (long long *)(v10 + 16);
            unsigned int v40 = &v30[8 * v28 + 16];
            uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v42 = *v39;
              *((_OWORD *)v40 - 1) = *(v39 - 1);
              *(_OWORD *)unsigned int v40 = v42;
              v39 += 2;
              v40 += 32;
              v41 -= 4;
            }
            while (v41);
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_44:
                uint64_t v36 = *(void *)v35;
                v35 += 8;
                *(void *)uint64_t v34 = v36;
                v34 += 8;
              }
              while (v34 != v20);
            }
          }
          int v15 = &v30[v29];
          if (v16) {
            operator delete(v16);
          }
          int v16 = v31;
          goto LABEL_28;
        }
        uint64_t v22 = (v10 - v16) >> 3;
        if (v22 >= -1) {
          uint64_t v23 = v22 + 1;
        }
        else {
          uint64_t v23 = v22 + 2;
        }
        uint64_t v24 = v23 >> 1;
        unsigned int v25 = &v10[-8 * (v23 >> 1)];
        uint64_t v26 = v15;
        if (v15 != v10)
        {
          memmove(v25, v10, v15 - v10);
          uint64_t v26 = v10;
        }
        uint64_t v20 = &v25[v15 - v10];
        BOOL v17 = &v26[-8 * v24];
      }
      else
      {
        BOOL v17 = v10;
        uint64_t v20 = v15;
        int v15 = v12;
      }
LABEL_28:
      unsigned int v12 = v15;
      uint64_t v21 = *(void *)v2;
      v2 += 8;
      *(void *)uint64_t v20 = v21;
      unsigned int v18 = v20 + 8;
      int v15 = v18;
      int v10 = v17;
      if (v2 == *(char **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
  BOOL v17 = v10;
  unsigned int v18 = v10 + 8;
LABEL_22:
  uint64_t v19 = *(void **)a1;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v12;
  if (v18 - v17 == 8)
  {
    *(void *)(a1 + 32) = 256;
    if (!v19) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 512;
    if (!v19) {
      return;
    }
  }

  operator delete(v19);
}

void std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      unsigned int v22 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v23 = *v7;
        if (v22 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v22 + 1, 8);
          unsigned int v22 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v22) = v23;
        unsigned int v22 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v22;
        ++v7;
      }
      while (v7 != a4);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)(*a1 + 512);
    if ((uint64_t *)v11 != a2)
    {
      unsigned int v12 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v13 = *v7;
        if (v12 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v12 + 1, 8);
          unsigned int v12 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v12) = v13;
        unsigned int v12 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v12;
        ++v7;
      }
      while (v7 != (uint64_t *)v11);
    }
    *a5 = v8;
    for (uint64_t i = (uint64_t *)(a1 + 1); i != (uint64_t *)a3; ++i)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *i;
      unsigned int v17 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v18 = *(void *)(v16 + v15);
        if (v17 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v17 + 1, 8);
          unsigned int v17 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v17) = v18;
        unsigned int v17 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v17;
        v15 += 8;
      }
      while (v15 != 4096);
      *a5 = v8;
    }
    uint64_t v19 = *a3;
    if (*a3 != a4)
    {
      unsigned int v20 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v21 = *v19;
        if (v20 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v20 + 1, 8);
          unsigned int v20 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v20) = v21;
        unsigned int v20 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v20;
        ++v19;
      }
      while (v19 != a4);
    }
  }
  *a5 = v8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = a2 - 1;
    uint64_t v140 = a2;
    unint64_t v141 = a2 - 2;
    long long v138 = a2 - 3;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = v11;
        uint64_t v12 = (char *)a2 - (char *)v11;
        uint64_t v13 = a2 - v11;
        if (v5 || !v4)
        {
          switch(v13)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v66 = *(a2 - 1);
              uint64_t v144 = *v9;
              uint64_t v145 = v66;
              uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
              int v68 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
              uint64_t result = mlir::Operation::isBeforeInBlock(DefiningOp, v68);
              if (result)
              {
                uint64_t v69 = *v9;
                *unint64_t v9 = *(a2 - 1);
                *(a2 - 1) = v69;
              }
              break;
            case 3:
              uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v9 + 1, v10);
              break;
            case 4:
              uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v9 + 1, v9 + 2, v10);
              break;
            case 5:
              uint64_t result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(v9, v9 + 1, v9 + 2, v9 + 3, v10);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v12 <= 191)
        {
          int v70 = v9 + 1;
          BOOL v72 = v9 == a2 || v70 == a2;
          if (a4)
          {
            if (!v72)
            {
              uint64_t v73 = 0;
              uint64_t v74 = v9;
              do
              {
                uint64_t v77 = *v74;
                uint64_t v76 = v74[1];
                uint64_t v74 = v70;
                uint64_t v144 = v77;
                uint64_t v145 = v76;
                uint64_t v78 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                int v79 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                uint64_t result = mlir::Operation::isBeforeInBlock(v78, v79);
                if (result)
                {
                  uint64_t v80 = *v74;
                  uint64_t v81 = v73;
                  do
                  {
                    *(uint64_t *)((char *)v9 + v81 + 8) = *(uint64_t *)((char *)v9 + v81);
                    if (!v81)
                    {
                      int v75 = v9;
                      goto LABEL_70;
                    }
                    uint64_t v144 = *(uint64_t *)((char *)v9 + v81 - 8);
                    uint64_t v145 = v80;
                    int v82 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                    int v83 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                    uint64_t result = mlir::Operation::isBeforeInBlock(v82, v83);
                    v81 -= 8;
                  }
                  while ((result & 1) != 0);
                  int v75 = (uint64_t *)((char *)v9 + v81 + 8);
LABEL_70:
                  *int v75 = v80;
                  a2 = v140;
                }
                int v70 = v74 + 1;
                v73 += 8;
              }
              while (v74 + 1 != a2);
            }
          }
          else if (!v72)
          {
            do
            {
              uint64_t v129 = *v9;
              uint64_t v128 = v9[1];
              unint64_t v9 = v70;
              uint64_t v144 = v129;
              uint64_t v145 = v128;
              uint64_t v130 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
              int v131 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
              uint64_t result = mlir::Operation::isBeforeInBlock(v130, v131);
              if (result)
              {
                uint64_t v132 = *v9;
                uint64_t v133 = v9;
                do
                {
                  uint64_t v134 = v133;
                  uint64_t v135 = *--v133;
                  *uint64_t v134 = v135;
                  uint64_t v144 = *(v134 - 2);
                  uint64_t v145 = v132;
                  uint64_t v136 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  int v137 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v136, v137);
                }
                while ((result & 1) != 0);
                *uint64_t v133 = v132;
              }
              int v70 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v84 = (unint64_t)(v13 - 2) >> 1;
            int64_t v142 = v84;
            do
            {
              int64_t v85 = v84;
              if (v142 >= v84)
              {
                uint64_t v86 = (2 * v84) | 1;
                unint64_t v87 = &v9[v86];
                if (2 * v84 + 2 < v13)
                {
                  uint64_t v88 = *v87;
                  uint64_t v144 = v87[1];
                  uint64_t v145 = v88;
                  unsigned int v89 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  int64_t v90 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  BOOL v91 = mlir::Operation::isBeforeInBlock(v89, v90);
                  if (v91) {
                    ++v87;
                  }
                  a2 = v140;
                  if (v91) {
                    uint64_t v86 = 2 * v85 + 2;
                  }
                }
                long long v92 = &v9[v85];
                uint64_t v93 = *v87;
                uint64_t v144 = *v92;
                uint64_t v145 = v93;
                BOOL v94 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                unsigned int v95 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                uint64_t result = mlir::Operation::isBeforeInBlock(v94, v95);
                if ((result & 1) == 0)
                {
                  int64_t v139 = v85;
                  uint64_t v96 = *v92;
                  do
                  {
                    uint64_t v100 = v87;
                    *long long v92 = *v87;
                    if (v142 < v86) {
                      break;
                    }
                    uint64_t v101 = (2 * v86) | 1;
                    unint64_t v87 = &v9[v101];
                    if (2 * v86 + 2 < v13)
                    {
                      uint64_t v102 = *v87;
                      uint64_t v144 = v87[1];
                      uint64_t v145 = v102;
                      int v103 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                      unsigned int v104 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                      if (mlir::Operation::isBeforeInBlock(v103, v104))
                      {
                        ++v87;
                        uint64_t v101 = 2 * v86 + 2;
                      }
                    }
                    uint64_t v97 = *v87;
                    uint64_t v144 = v96;
                    uint64_t v145 = v97;
                    unsigned int v98 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                    int v99 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                    uint64_t result = mlir::Operation::isBeforeInBlock(v98, v99);
                    long long v92 = v100;
                    uint64_t v86 = v101;
                  }
                  while (!result);
                  *uint64_t v100 = v96;
                  int64_t v85 = v139;
                  a2 = v140;
                }
              }
              int64_t v84 = v85 - 1;
            }
            while (v85);
            uint64_t v105 = (unint64_t)v12 >> 3;
            do
            {
              uint64_t v108 = 0;
              uint64_t v143 = *v9;
              BOOL v109 = v9;
              do
              {
                unsigned int v110 = &v109[v108 + 1];
                uint64_t v111 = (2 * v108) | 1;
                uint64_t v112 = 2 * v108 + 2;
                if (v112 < v105)
                {
                  uint64_t v113 = *v110;
                  uint64_t v144 = v110[1];
                  uint64_t v145 = v113;
                  unsigned int v114 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  int v115 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v114, v115);
                  if (result)
                  {
                    ++v110;
                    uint64_t v111 = v112;
                  }
                }
                *BOOL v109 = *v110;
                BOOL v109 = v110;
                uint64_t v108 = v111;
              }
              while (v111 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
              uint64_t v116 = a2 - 1;
              if (v110 == a2 - 1)
              {
                uint64_t v106 = a2 - 1;
                *unsigned int v110 = v143;
              }
              else
              {
                *unsigned int v110 = *v116;
                uint64_t v106 = a2 - 1;
                *uint64_t v116 = v143;
                uint64_t v117 = (char *)v110 - (char *)v9 + 8;
                if (v117 >= 9)
                {
                  unint64_t v118 = (((unint64_t)v117 >> 3) - 2) >> 1;
                  BOOL v119 = &v9[v118];
                  uint64_t v120 = *v119;
                  uint64_t v144 = *v110;
                  uint64_t v145 = v120;
                  uint64_t v121 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  uint64_t v122 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v121, v122);
                  if (result)
                  {
                    uint64_t v123 = *v110;
                    do
                    {
                      uint64_t v124 = v119;
                      *unsigned int v110 = *v119;
                      if (!v118) {
                        break;
                      }
                      unint64_t v118 = (v118 - 1) >> 1;
                      BOOL v119 = &v9[v118];
                      uint64_t v125 = *v119;
                      uint64_t v144 = v123;
                      uint64_t v145 = v125;
                      int v126 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                      uint64_t v127 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                      uint64_t result = mlir::Operation::isBeforeInBlock(v126, v127);
                      unsigned int v110 = v124;
                    }
                    while ((result & 1) != 0);
                    *uint64_t v124 = v123;
                  }
                }
              }
              BOOL v107 = v105-- <= 2;
              a2 = v106;
            }
            while (!v107);
          }
          return result;
        }
        unint64_t v14 = (unint64_t)v13 >> 1;
        uint64_t v15 = &v9[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401) {
          break;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v15, v10);
        uint64_t v16 = v14;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9 + 1, &v9[v16 - 1], v141);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9 + 2, &v9[v16 + 1], v138);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(&v9[v16 - 1], v15, &v9[v16 + 1]);
        uint64_t v17 = *v9;
        *unint64_t v9 = v9[v16];
        v9[v16] = v17;
        --a3;
        if (a4) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t v18 = *(v9 - 1);
        uint64_t v144 = *v9;
        uint64_t v145 = v18;
        uint64_t v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        unsigned int v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        if (mlir::Operation::isBeforeInBlock(v19, v20)) {
          goto LABEL_12;
        }
        uint64_t v45 = *v9;
        uint64_t v144 = *v10;
        uint64_t v145 = v45;
        uint64_t v46 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        uint64_t v47 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        uint64_t result = mlir::Operation::isBeforeInBlock(v46, v47);
        if (result)
        {
          uint64_t v11 = v9;
          do
          {
            uint64_t v48 = v11[1];
            ++v11;
            uint64_t v144 = v48;
            uint64_t v145 = v45;
            uint64_t v49 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v50 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v49, v50);
          }
          while ((result & 1) == 0);
        }
        else
        {
          uint64_t v51 = v9 + 1;
          do
          {
            uint64_t v11 = v51;
            if (v51 >= a2) {
              break;
            }
            ++v51;
            uint64_t v144 = *v11;
            uint64_t v145 = v45;
            uint64_t v52 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v53 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v52, v53);
          }
          while (!result);
        }
        unsigned int v54 = a2;
        if (v11 < a2)
        {
          unsigned int v54 = a2;
          do
          {
            uint64_t v55 = *--v54;
            uint64_t v144 = v55;
            uint64_t v145 = v45;
            unsigned int v56 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v57 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v56, v57);
          }
          while ((result & 1) != 0);
        }
        while (v11 < v54)
        {
          uint64_t v58 = *v11;
          uint64_t *v11 = *v54;
          *unsigned int v54 = v58;
          do
          {
            uint64_t v59 = v11[1];
            ++v11;
            uint64_t v144 = v59;
            uint64_t v145 = v45;
            uint64_t v60 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v61 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
          }
          while (!mlir::Operation::isBeforeInBlock(v60, v61));
          do
          {
            uint64_t v62 = *--v54;
            uint64_t v144 = v62;
            uint64_t v145 = v45;
            uint64_t v63 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            unsigned int v64 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v63, v64);
          }
          while ((result & 1) != 0);
        }
        uint64_t v65 = v11 - 1;
        BOOL v4 = v11 - 1 >= v9;
        BOOL v5 = v11 - 1 == v9;
        if (v11 - 1 != v9) {
          *unint64_t v9 = *v65;
        }
        a4 = 0;
        *uint64_t v65 = v45;
      }
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v15, v9, v10);
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v21 = 0;
      uint64_t v22 = *v9;
      do
      {
        uint64_t v23 = v9[v21 + 1];
        uint64_t v144 = v22;
        uint64_t v145 = v23;
        uint64_t v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        unsigned int v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        ++v21;
      }
      while (mlir::Operation::isBeforeInBlock(v24, v25));
      uint64_t v26 = &v9[v21];
      unint64_t v27 = v140;
      BOOL v5 = v21 == 1;
      a2 = v140;
      if (v5)
      {
        unint64_t v27 = v140;
        do
        {
          if (v26 >= v27) {
            break;
          }
          uint64_t v31 = *--v27;
          uint64_t v144 = v22;
          uint64_t v145 = v31;
          int64_t v32 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          unint64_t v33 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v32, v33));
      }
      else
      {
        do
        {
          uint64_t v28 = *--v27;
          uint64_t v144 = v22;
          uint64_t v145 = v28;
          uint64_t v29 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          uint64_t v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v29, v30));
      }
      if (v26 >= v27)
      {
        unsigned int v43 = v26 - 1;
        if (v26 - 1 == v9) {
          goto LABEL_30;
        }
LABEL_29:
        *unint64_t v9 = *v43;
        goto LABEL_30;
      }
      uint64_t v34 = v26;
      int v35 = v27;
      do
      {
        uint64_t v36 = *v34;
        *uint64_t v34 = *v35;
        *int v35 = v36;
        do
        {
          uint64_t v37 = v34[1];
          ++v34;
          uint64_t v144 = v22;
          uint64_t v145 = v37;
          uint64_t v38 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          int v39 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (mlir::Operation::isBeforeInBlock(v38, v39));
        do
        {
          uint64_t v40 = *--v35;
          uint64_t v144 = v22;
          uint64_t v145 = v40;
          uint64_t v41 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          long long v42 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v41, v42));
      }
      while (v34 < v35);
      unsigned int v43 = v34 - 1;
      a2 = v140;
      if (v43 != v9) {
        goto LABEL_29;
      }
LABEL_30:
      *unsigned int v43 = v22;
      if (v26 < v27) {
        goto LABEL_33;
      }
      BOOL v44 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v43);
      uint64_t v11 = v43 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v43 + 1, a2);
      if (result) {
        break;
      }
      if (!v44)
      {
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(v9, v43, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v43 + 1;
      }
    }
    a2 = v43;
    if (!v44) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  uint64_t v27 = *a4;
  uint64_t v28 = v10;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
  uint64_t v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
  BOOL result = mlir::Operation::isBeforeInBlock(DefiningOp, v12);
  if (result)
  {
    uint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a4;
    uint64_t v27 = *a3;
    uint64_t v28 = v15;
    uint64_t v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
    uint64_t v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
    BOOL result = mlir::Operation::isBeforeInBlock(v16, v17);
    if (result)
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a3;
      uint64_t v27 = *a2;
      uint64_t v28 = v19;
      unsigned int v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
      uint64_t v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      BOOL result = mlir::Operation::isBeforeInBlock(v20, v21);
      if (result)
      {
        uint64_t v22 = *a2;
        *a2 = *a3;
        *a3 = v22;
        uint64_t v23 = *a2;
        uint64_t v27 = *a1;
        uint64_t v28 = v23;
        uint64_t v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
        unsigned int v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
        BOOL result = mlir::Operation::isBeforeInBlock(v24, v25);
        if (result)
        {
          uint64_t v26 = *a1;
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v6;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
  uint64_t v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
  BOOL v9 = mlir::Operation::isBeforeInBlock(DefiningOp, v8);
  uint64_t v10 = *a3;
  if (v9)
  {
    uint64_t v25 = *a2;
    uint64_t v26 = v10;
    uint64_t v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    uint64_t v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    BOOL result = mlir::Operation::isBeforeInBlock(v11, v12);
    uint64_t v14 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v14;
      uint64_t v22 = *a3;
      uint64_t v25 = v14;
      uint64_t v26 = v22;
      uint64_t v23 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      uint64_t v24 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      BOOL result = mlir::Operation::isBeforeInBlock(v23, v24);
      if (!result) {
        return result;
      }
      uint64_t v14 = *a2;
      *a2 = *a3;
    }
    *a3 = v14;
  }
  else
  {
    uint64_t v25 = *a2;
    uint64_t v26 = v10;
    uint64_t v15 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    uint64_t v16 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    BOOL result = mlir::Operation::isBeforeInBlock(v15, v16);
    if (result)
    {
      uint64_t v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      uint64_t v18 = *a2;
      uint64_t v25 = *a1;
      uint64_t v26 = v18;
      uint64_t v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      unsigned int v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      BOOL result = mlir::Operation::isBeforeInBlock(v19, v20);
      if (result)
      {
        uint64_t v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v22 = *a1;
      uint64_t v23 = v6;
      uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
      uint64_t v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      if (mlir::Operation::isBeforeInBlock(DefiningOp, v8))
      {
        uint64_t v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v22 = *v10;
    uint64_t v23 = v15;
    uint64_t v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
    uint64_t v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    if (mlir::Operation::isBeforeInBlock(v16, v17))
    {
      uint64_t v18 = *v11;
      uint64_t v19 = v12;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          uint64_t v14 = a1;
          goto LABEL_7;
        }
        uint64_t v22 = *(uint64_t *)((char *)a1 + v19 + 8);
        uint64_t v23 = v18;
        unsigned int v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
        uint64_t v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
        v19 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v20, v21));
      uint64_t v14 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_7:
      uint64_t *v14 = v18;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v21 = *a3;
  uint64_t v22 = v8;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
  uint64_t v10 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
  BOOL result = mlir::Operation::isBeforeInBlock(DefiningOp, v10);
  if (result)
  {
    uint64_t v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    uint64_t v13 = *a3;
    uint64_t v21 = *a2;
    uint64_t v22 = v13;
    uint64_t v14 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    uint64_t v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
    BOOL result = mlir::Operation::isBeforeInBlock(v14, v15);
    if (result)
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v21 = *a1;
      uint64_t v22 = v17;
      uint64_t v18 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      uint64_t v19 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
      BOOL result = mlir::Operation::isBeforeInBlock(v18, v19);
      if (result)
      {
        uint64_t v20 = *a1;
        *a1 = *a2;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_6>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_7>(unsigned char **a1, uint64_t a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4)) {
    return 1;
  }
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v5)) {
    return 1;
  }
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v6)) {
    return 1;
  }
  uint64_t result = 0;
  **a1 = 0;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_8>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

mlir::Block *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_9>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t result = (mlir::Block *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4);
  if ((result & 1) == 0)
  {
    uint64_t result = mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(void *)(*(void *)a1 + 8), **(void **)(a1 + 8), a2, 0);
    if ((_BYTE)result) {
      **(unsigned char **)(a1 + 16) = 1;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_10>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, ZinIrHalH13g *this)
{
  if (this
    && *(_UNKNOWN **)(*((void *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    BOOL v3 = *a1;
    uint64_t v29 = this;
    uint64_t v4 = *v3;
    uint64_t v5 = *v3 + 16;
    long long v28 = *(_OWORD *)v5;
    uint64_t v6 = *((void *)this + 2);
    ZinIrHalH13g::~ZinIrHalH13g(this);
    *(void *)uint64_t v5 = v6;
    *(void *)(v4 + 24) = v7;
    uint64_t v8 = *(void *)v3[1];
    uint64_t v9 = *((void *)this + 3);
    uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v29);
    uint64_t v11 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v29) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v12 = *v11;
    unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v14 = *(unsigned int *)(v12 + 16);
    if (!v14) {
      goto LABEL_12;
    }
    uint64_t v15 = *(void **)(v12 + 8);
    uint64_t v16 = &v15[2 * v14];
    do
    {
      unint64_t v17 = v14 >> 1;
      uint64_t v18 = &v15[2 * (v14 >> 1)];
      unint64_t v20 = *v18;
      uint64_t v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13) {
        uint64_t v15 = v19;
      }
      else {
        unint64_t v14 = v17;
      }
    }
    while (v14);
    if (v15 != v16 && *v15 == v13) {
      uint64_t v21 = v15[1];
    }
    else {
LABEL_12:
    }
      uint64_t v21 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 136))(v8, v9, Input, v11, v21, v3[2]);
    uint64_t v22 = v3[2];
    uint64_t v23 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v29);
    uint64_t v30 = v23;
    v31[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v22, (unint64_t *)&v30, v31)&& v31[0] != *(void *)v22 + 16 * *(unsigned int *)(v22 + 16))
    {
      uint64_t v23 = *(void *)(v31[0] + 8);
    }
    uint64_t v30 = v23;
    uint64_t v24 = v29;
    uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v30);
    uint64_t v26 = *((unsigned int *)v24 + 9);
    uint64_t v27 = (uint64_t)v24 - 16;
    if (!v26) {
      uint64_t v27 = 0;
    }
    v31[0] = v27;
    v31[1] = v26;
    mlir::ResultRange::replaceAllUsesWith(v31, DefiningOp);
    mlir::Operation::erase(v29);
    if (v4)
    {
      if ((void)v28)
      {
        *(_OWORD *)uint64_t v5 = v28;
      }
      else
      {
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
      }
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, mlir::Operation *a2)
{
  v67[19] = *MEMORY[0x263EF8340];
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2)
    || !a2)
  {
    return 1;
  }
  InterfaceFor = (mlir::Operation *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  uint64_t v5 = *a1;
  v58[0] = a2;
  v58[1] = InterfaceFor;
  mlir::SymbolTable::getSymbolUses(a2, **(mlir::Operation ***)v5, (uint64_t)&__p);
  if (!v57)
  {
    unint64_t v17 = "Operation has no symbol table uses";
    goto LABEL_59;
  }
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58);
  *(_DWORD *)(*(void *)(v5 + 8) + 8) = 0;
  if (!v57)
  {
    uint64_t v50 = (unint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_82;
  }
  uint64_t v7 = ArgOperands;
  uint64_t v8 = (char *)__p;
  uint64_t v9 = v56;
  if (__p != v56)
  {
    do
    {
      uint64_t v10 = *(void *)v8;
      if (*(_UNKNOWN **)(*(void *)(*(void *)v8 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
      {
        uint64_t v11 = *(void *)(v5 + 8);
        unint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v12 >= *(unsigned int *)(v11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v5 + 8), (void *)(v11 + 16), v12 + 1, 8);
          unint64_t v12 = *(unsigned int *)(v11 + 8);
        }
        *(void *)(*(void *)v11 + 8 * v12) = v10;
        ++*(_DWORD *)(v11 + 8);
      }
      v8 += 16;
    }
    while (v8 != v9);
  }
  uint64_t v13 = *(void *)(v5 + 16);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 || *(_DWORD *)(v13 + 12))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 > 4 * v14 && v15 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(v13);
      goto LABEL_31;
    }
    if (!v15) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void **)v13;
    uint64_t v19 = (v15 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v19)
    {
      uint64_t v20 = v19 + 1;
      uint64_t v21 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v22 = &v18[2 * v21];
      uint64_t v23 = v18 + 2;
      uint64_t v24 = v21;
      do
      {
        *(v23 - 2) = -4096;
        *uint64_t v23 = -4096;
        v23 += 4;
        v24 -= 2;
      }
      while (v24);
      if (v20 == v21) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v22 = *(void **)v13;
    }
    uint64_t v25 = &v18[2 * v15];
    do
    {
      void *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v25);
LABEL_30:
    *(void *)(v13 + 8) = 0;
  }
LABEL_31:
  uint64_t v26 = mlir::TargetLegalizerInterface::legalizeBody((uint64_t)v58, **(void **)(v5 + 8), *(unsigned int *)(*(void *)(v5 + 8) + 8), **(void **)(v5 + 24), *(void *)(v5 + 16));
  if (!v26)
  {
    unint64_t v17 = "Legalization failed";
LABEL_59:
    uint64_t v60 = (void **)v17;
    __int16 v61 = 259;
    mlir::OpState::emitOpError((uint64_t *)v58, &v60, (uint64_t)&v62);
    if (v62) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    }
    goto LABEL_70;
  }
  uint64_t v27 = v26;
  mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v58);
  uint64_t v28 = *(void *)(v5 + 8);
  uint64_t v29 = *(unsigned int *)(v28 + 8);
  if (v29)
  {
    uint64_t v30 = *(unsigned int ***)v28;
    uint64_t v31 = *(void *)v28 + 8 * v29;
    uint64_t v53 = v31;
    uint64_t v54 = v7;
    while (1)
    {
      int64_t v32 = *v30;
      *(_DWORD *)(*(void *)(v5 + 32) + 8) = 0;
      uint64_t v33 = v32[9];
      uint64_t v34 = v33 ? (uint64_t)(v32 - 4) : 0;
      if (v33) {
        break;
      }
LABEL_34:
      if (++v30 == (unsigned int **)v31) {
        goto LABEL_74;
      }
    }
    char v35 = 0;
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v36);
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v60 = (void **)NextResultAtOffset;
      uint64_t v62 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v38, (unint64_t *)&v60, &v62)|| v62 == *(void *)v38 + 16 * *(unsigned int *)(v38 + 16))
      {
        break;
      }
      uint64_t v40 = *(uint64_t **)(v62 + 8);
      if (!v40) {
        break;
      }
      if (v40 != (uint64_t *)NextResultAtOffset)
      {
        while (1)
        {
          uint64_t v41 = *(uint64_t **)NextResultAtOffset;
          if (!*(void *)NextResultAtOffset) {
            break;
          }
          long long v42 = (uint64_t *)v41[1];
          if (v42)
          {
            *long long v42 = *v41;
            if (*v41) {
              *(void *)(*v41 + 8) = v41[1];
            }
          }
          v41[3] = (uint64_t)v40;
          v41[1] = (uint64_t)v40;
          uint64_t v43 = *v40;
          *uint64_t v41 = *v40;
          if (v43) {
            *(void *)(v43 + 8) = v41;
          }
          uint64_t *v40 = (uint64_t)v41;
        }
        char v35 = 1;
      }
      if (++v36 == v33)
      {
        uint64_t v31 = v53;
        uint64_t v7 = v54;
        if (v35) {
          mlir::Operation::erase((mlir::Operation *)v32);
        }
        goto LABEL_34;
      }
    }
    uint64_t v60 = (void **)"Result has no mapping in the valueMap (result #";
    __int16 v61 = 259;
    mlir::Operation::emitOpError((uint64_t)v32, &v60, (uint64_t)&v62);
    uint64_t v44 = *(void *)(NextResultAtOffset + 8) & 7;
    if (NextResultAtOffset && v44 == 6) {
      uint64_t v44 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
    }
    if (!v62)
    {
LABEL_70:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v63);
      uint64_t v16 = 0;
      if (!v57) {
        return v16;
      }
      goto LABEL_71;
    }
    LODWORD(v59[0]) = 5;
    v59[1] = v44;
    uint64_t v45 = (char *)v59;
    unint64_t v46 = v64;
    if (v65 < v66) {
      goto LABEL_67;
    }
    uint64_t v50 = &v64;
    unint64_t v51 = v65 + 1;
    if (v64 > (unint64_t)v59 || v64 + 24 * v65 <= (unint64_t)v59)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
      uint64_t v45 = (char *)v59;
      unint64_t v46 = v64;
      goto LABEL_67;
    }
LABEL_82:
    uint64_t v52 = (char *)v59 - v46;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, v67, v51, 24);
    unint64_t v46 = v64;
    uint64_t v45 = &v52[v64];
LABEL_67:
    unint64_t v47 = v46 + 24 * v65;
    long long v48 = *(_OWORD *)v45;
    *(void *)(v47 + 16) = *((void *)v45 + 2);
    *(_OWORD *)unint64_t v47 = v48;
    ++v65;
    if (v62)
    {
      mlir::Diagnostic::operator<<((uint64_t)v63, ")");
      if (v62) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
      }
    }
    goto LABEL_70;
  }
LABEL_74:
  if (v27 != v7) {
    mlir::Operation::cloneWithoutRegions(v58[0]);
  }
  uint64_t v16 = 1;
  if (v57)
  {
LABEL_71:
    if (__p)
    {
      unsigned int v56 = (char *)__p;
      operator delete(__p);
    }
  }
  return v16;
}

ZinIrHalH13g *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::legalizeRegions(mlir::ModuleOp,mlir::RegionOpCreator *)::$_1::operator() const(mlir::TargetLegalizerInterface)::{lambda(mlir::Operation *)#1}>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t result = (ZinIrHalH13g *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t ***)a1;
    uint64_t v6 = *(mlir::IRMapping **)(a1 + 8);
    return mlir::OpBuilder::clone(v5, a2, v6);
  }
  return result;
}

uint64_t mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void **)(v6 + 32);
    uint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      unint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        uint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_(void ****a1, ZinIrHalH13g *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    {
      uint64_t v5 = *a1;
      InterfaceFor = (ZinIrHalH13g *)mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      unint64_t v7 = **v5;
      uint64_t v8 = 0;
      mlir::collectRegions(a2, InterfaceFor, v7);
    }
  }
  return result;
}

uint64_t mlir::RegionOpCreator::getRegionCall(void *a1, uint64_t a2, mlir::Operation **a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v109 = *MEMORY[0x263EF8340];
  p_p = a5;
  uint64_t v107 = 0;
  if (a6)
  {
    int v79 = a3;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t v88 = (void *)mlir::ValueRange::dereference_iterator(&p_p, v11);
      uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v88);
      unint64_t v14 = (mlir::Block **)DefiningOp;
      if (v12 == 0 && DefiningOp != 0) {
        uint64_t v15 = DefiningOp;
      }
      else {
        uint64_t v15 = v12;
      }
      if ((v12 != 0 || DefiningOp == 0) && DefiningOp)
      {
        if (mlir::Operation::isBeforeInBlock((mlir::Block **)v12, DefiningOp)) {
          uint64_t v15 = (mlir::Operation *)v14;
        }
        else {
          uint64_t v15 = v12;
        }
      }
      uint64_t v16 = (void *)*v88;
      unint64_t v12 = v15;
      if (*v88) {
        break;
      }
LABEL_12:
      uint64_t v11 = ++v107;
      if (p_p == a5 && v11 == a6)
      {
        uint64_t v9 = a2;
        uint64_t v10 = a1;
        a3 = v79;
        if (v12) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    while (1)
    {
      uint64_t v17 = (mlir::Operation *)v16[2];
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17))
      {
        if (v17) {
          uint64_t InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17);
        }
        else {
          uint64_t InterfaceFor = 0;
        }
        long long v92 = v17;
        uint64_t v93 = InterfaceFor;
        if (v17)
        {
          uint64_t v102 = &v104;
          uint64_t v103 = 0x400000000;
          mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)&v92, (uint64_t)&v102);
          uint64_t v19 = (uint64_t **)v102;
          if (v103)
          {
            uint64_t v20 = 40 * v103 - 40;
            do
            {
              uint64_t v21 = *v19;
              v19 += 5;
              uint64_t v22 = *v21;
              BOOL v24 = v22 == mlir::TypeID::get<mlir::MemoryEffects::Write>();
              BOOL v23 = v24;
              BOOL v24 = v24 || v20 == 0;
              v20 -= 40;
            }
            while (!v24);
            uint64_t v19 = (uint64_t **)v102;
            if (v102 != &v104) {
LABEL_30:
            }
              free(v19);
          }
          else
          {
            BOOL v23 = 0;
            if (v102 != &v104) {
              goto LABEL_30;
            }
          }
          if (v23 && mlir::Operation::isBeforeInBlock(v14, v17)) {
            unint64_t v12 = v17;
          }
        }
      }
      else
      {
        long long v92 = 0;
        uint64_t v93 = 0;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_12;
      }
    }
  }
LABEL_38:
  unint64_t v12 = *a3;
LABEL_39:
  uint64_t v25 = v10[1];
  uint64_t v26 = (_OWORD *)(v25 + 16);
  long long v82 = *(_OWORD *)(v25 + 16);
  uint64_t v27 = *((void *)v12 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  uint64_t v29 = *(void *)(v28 + 8);
  *(void *)(v25 + 16) = v27;
  *(void *)(v25 + 24) = v29;
  uint64_t v30 = *((void *)v12 + 3);
  uint64_t v31 = v10;
  uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t, std::string *, uint64_t))(*v10 + 152))(v10, v30, v9, a5, a6);
  uint64_t v33 = v32;
  uint64_t v34 = *(unsigned int *)(v32 + 36);
  if (v34) {
    char v35 = (void *)(v32 - 16);
  }
  else {
    char v35 = 0;
  }
  uint64_t v102 = v35;
  uint64_t v103 = 0;
  uint64_t v104 = a7;
  uint64_t v105 = 0;
  if (!v34)
  {
    uint64_t v50 = &unk_211EF3000;
LABEL_59:
    if ((void)v82)
    {
      *uint64_t v26 = v82;
    }
    else
    {
      *(void *)uint64_t v26 = 0;
      *(void *)(v25 + 24) = 0;
    }
    goto LABEL_62;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = v35;
  do
  {
    if (v104 == a7 && v37 == a8) {
      break;
    }
    uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v38, v36);
    uint64_t v42 = mlir::ValueRange::dereference_iterator(&v104, v105);
    uint64_t v88 = NextResultAtOffset;
    if ((NextResultAtOffset[1] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v43 = v42;
      uint64_t v44 = (mlir::OpBuilder *)v31[1];
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v88);
      p_p = (std::string *)(*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(v44, Loc, (uint64_t *)&p_p, (uint64_t *)&v88);
      unint64_t v46 = v88;
      uint64_t v47 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&__p);
      long long v92 = v46;
      p_p = 0;
      char v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      uint64_t v49 = (std::string::__raw *)p_p;
      if ((v48 & 1) == 0)
      {
        uint64_t v49 = (std::string::__raw *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a9, (uint64_t)&v92, (unint64_t *)&v92, p_p);
        v49->__words[0] = (std::string::size_type)v92;
        v49->__words[1] = 0;
      }
      v49->__words[1] = v47;
    }
    uint64_t v38 = v102;
    uint64_t v36 = v103 + 1;
    uint64_t v37 = v105 + 1;
    ++v103;
    ++v105;
  }
  while (v102 != v35 || v36 != v34);
  uint64_t v50 = (void *)&unk_211EF3000;
  if (v25) {
    goto LABEL_59;
  }
LABEL_62:
  uint64_t v101 = 0;
  uint64_t v102 = &v104;
  uint64_t v103 = v50[486];
  uint64_t v100 = a7;
  if (a8)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v31;
    while (1)
    {
      long long v92 = (void *)mlir::ValueRange::dereference_iterator(&v100, v51);
      p_p = 0;
      int v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      std::string::size_type size = 0;
      if (v53 && p_p != (std::string *)(*(void *)a9 + 16 * *(unsigned int *)(a9 + 16))) {
        std::string::size_type size = p_p->__r_.__value_.__l.__size_;
      }
      std::string::size_type v99 = size;
      uint64_t v55 = mlir::Value::getDefiningOp((mlir::Value *)&v99);
      uint64_t v56 = v55;
      if (*(unsigned char *)(v55 + 47)
        && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v55, (uint64_t)"name", 4), (_BYTE)v58))
      {
        if (!InherentAttr) {
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t InherentAttr = mlir::DictionaryAttr::get(v56 + 56, "name", 4uLL);
        if (!InherentAttr)
        {
LABEL_74:
          uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v52[1], v58);
          uint64_t v61 = UnitAttr;
          int v62 = v103;
          if (v103 >= HIDWORD(v103))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
            *((void *)v102 + v103) = v61;
            int v63 = v103 + 1;
          }
          else
          {
            *((void *)v102 + v103) = UnitAttr;
            int v63 = v62 + 1;
          }
          LODWORD(v103) = v63;
          goto LABEL_91;
        }
      }
      if (v99 && (*(void *)(v99 + 8) & 7) == 6) {
        unsigned int v59 = *(_DWORD *)(v99 + 16) + 6;
      }
      else {
        unsigned int v59 = *(void *)(v99 + 8) & 7;
      }
      uint64_t v98 = InherentAttr;
      unint64_t v64 = (mlir::StringAttr **)v52[1];
      uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v98);
      __int16 v91 = 773;
      uint64_t v88 = AttrData;
      uint64_t v89 = v66;
      int64_t v90 = ":";
      std::to_string(&v87, v59);
      char v67 = v91;
      if ((_BYTE)v91)
      {
        if (v91 == 1)
        {
          long long v92 = &v87;
          char v68 = 1;
          char v67 = 4;
        }
        else
        {
          if (HIBYTE(v91) != 1) {
            char v67 = 2;
          }
          uint64_t v69 = &v88;
          if (HIBYTE(v91) == 1) {
            uint64_t v69 = (void **)v88;
          }
          long long v92 = v69;
          uint64_t v93 = v89;
          BOOL v94 = &v87;
          char v68 = 4;
        }
      }
      else
      {
        char v68 = 1;
      }
      char v95 = v67;
      char v96 = v68;
      llvm::Twine::str((llvm::Twine *)&v92, &__p);
      __int16 v108 = 260;
      p_p = &__p;
      uint64_t StringAttr = mlir::Builder::getStringAttr(v64, (mlir::MLIRContext *)&p_p);
      uint64_t v71 = StringAttr;
      int v72 = v103;
      if (v103 >= HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
        *((void *)v102 + v103) = v71;
        int v72 = v103;
      }
      else
      {
        *((void *)v102 + v103) = StringAttr;
      }
      LODWORD(v103) = v72 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_91;
      }
      operator delete(v87.__r_.__value_.__l.__data_);
LABEL_91:
      uint64_t v51 = ++v101;
      if (v100 == a7 && v51 == a8)
      {
        uint64_t v73 = (uint64_t *)v102;
        uint64_t v74 = v103;
        goto LABEL_99;
      }
    }
  }
  uint64_t v74 = 0;
  uint64_t v73 = &v104;
  uint64_t v52 = v31;
LABEL_99:
  uint64_t ArrayAttr = mlir::Builder::getArrayAttr((mlir::MLIRContext **)v52[1], (uint64_t)v73, v74);
  int Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v33 + 24));
  __int16 v108 = 261;
  p_p = (std::string *)"output_names";
  uint64_t v107 = 12;
  uint64_t v77 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&p_p);
  mlir::Operation::setAttr(v33, v77, ArrayAttr);
  if (v102 != &v104) {
    free(v102);
  }
  return v33;
}

uint64_t mlir::RegionOpCreator::isOpCompatible(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mlir::RegionOpCreator::replaceOutOfRegionUses()
{
  return 1;
}

uint64_t mlir::RegionOpCreator::getHostReshape()
{
  return 0;
}

uint64_t mlir::RegionOpCreator::getHostCast()
{
  return 0;
}

void mlir::RegionOpCreator::getPromotedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a4 + 8) = 0;
  uint64_t v13 = a2;
  uint64_t v14 = 0;
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(a4 + 16);
    do
    {
      uint64_t v10 = mlir::ValueRange::dereference_iterator(&v13, v8);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 184))(a1, *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v9, v12 + 1, 8);
        unint64_t v12 = *(unsigned int *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v12) = v11;
      ++*(_DWORD *)(a4 + 8);
      uint64_t v8 = ++v14;
    }
    while (v13 != a2 || v8 != a3);
  }
}

{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)(a4 + 8) = 0;
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)(a4 + 16);
    do
    {
      uint64_t v10 = mlir::TypeRange::dereference_iterator(a2, v8);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 184))(a1, v10);
      unint64_t v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v9, v12 + 1, 8);
        unint64_t v12 = *(unsigned int *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v12) = v11;
      ++*(_DWORD *)(a4 + 8);
      ++v8;
    }
    while (a3 != v8);
  }
}

uint64_t mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void **)(v6 + 32);
    uint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      unint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        uint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::MemoryEffects::Write>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
      unint64_t v11 = 76;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[417];
}

uint64_t mlir::minimalLegalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a2 + 8 * a3;
    do
    {
      uint64_t v8 = *(unsigned int *)(*(void *)v6 + 36);
      if (v8) {
        uint64_t v9 = *(void *)v6 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, i);
          uint64_t v16 = NextResultAtOffset;
          uint64_t v17 = 0;
          char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v16, &v17);
          uint64_t v13 = v17;
          if ((v12 & 1) == 0)
          {
            uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v16, (unint64_t *)&v16, v17);
            *uint64_t v13 = v16;
            v13[1] = 0;
          }
          v13[1] = NextResultAtOffset;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1)
    || !a1)
  {
    return 0;
  }
  uint64_t InterfaceFor = mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(InterfaceFor + 16))(InterfaceFor, a1);
}

uint64_t mlir::TargetLegalizerInterface::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (**(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), *(void *)a1, a2, a3, a4, a5);
}

uint64_t mlir::TargetLegalizerInterface::setFunctionType(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(a1[1] + 24))(a1[1], *a1, a2);
}

uint64_t mlir::TargetLegalizerInterface::getBody(mlir::TargetLegalizerInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 32))(*((void *)this + 1), *(void *)this);
}

float mlir::getDeviceInfo@<S0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_DWORD *)(a3 + 48) = 978433816;
  *(_DWORD *)(a3 + 52) = a1;
  *(unsigned char *)a3 = 1;
  *(_DWORD *)(a3 + 36) = a2;
  if (a1 < 5)
  {
    if (a1 == 3)
    {
      *(_DWORD *)(a3 + 4) = 1072399647;
      *(_DWORD *)(a3 + 32) = 1112014848;
      *(void *)(a3 + 40) = 0x4248000041A3D70ALL;
      if ((uint64_t)a2 < 6)
      {
        uint64_t v3 = 0x424800003FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0xA) {
        goto LABEL_19;
      }
      if (a2 <= 0x14)
      {
LABEL_25:
        *(_DWORD *)(a3 + 32) = 1128792064;
        int v4 = 1120403456;
LABEL_28:
        *(_DWORD *)(a3 + 44) = v4;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x43480000406B851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0x28)
      {
LABEL_30:
        *(_DWORD *)(a3 + 32) = 1137180672;
        int v5 = 1120403456;
LABEL_33:
        *(_DWORD *)(a3 + 44) = v5;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x43C80000406B851FLL;
        goto LABEL_37;
      }
      *(_DWORD *)(a3 + 32) = 1145569280;
      int v6 = 1120403456;
    }
    else
    {
      if (a1 == 4)
      {
        *(_DWORD *)(a3 + 4) = 1072399647;
        *(_DWORD *)(a3 + 32) = 1112014848;
        *(void *)(a3 + 40) = 0x4248000041A3D70ALL;
        uint64_t v3 = 0x424800003FEB851FLL;
        if ((uint64_t)a2 < 7) {
          goto LABEL_37;
        }
        if (a2 > 0xA)
        {
          if (a2 > 0x14)
          {
            if (a2 > 0x28) {
              goto LABEL_37;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_19:
        *(_DWORD *)(a3 + 32) = 1120403456;
        *(_DWORD *)(a3 + 44) = 1120403456;
        uint64_t v3 = 0x42C800003FEB851FLL;
        goto LABEL_37;
      }
      *(_DWORD *)(a3 + 4) = 1072399647;
      *(_DWORD *)(a3 + 32) = 1107846758;
      *(void *)(a3 + 40) = 0x4208666641591EB8;
      if ((uint64_t)a2 < 6)
      {
        uint64_t v3 = 0x420866663FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0xA)
      {
        *(_DWORD *)(a3 + 32) = 1116235366;
        *(_DWORD *)(a3 + 44) = 1116235366;
        uint64_t v3 = 0x428866663FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0x14)
      {
        *(_DWORD *)(a3 + 32) = 1128792064;
        int v4 = 1116235366;
        goto LABEL_28;
      }
      if (a2 <= 0x28)
      {
        *(_DWORD *)(a3 + 32) = 1137180672;
        int v5 = 1116235366;
        goto LABEL_33;
      }
      *(_DWORD *)(a3 + 32) = 1145569280;
      int v6 = 1116235366;
    }
    *(_DWORD *)(a3 + 44) = v6;
    *(_DWORD *)(a3 + 4) = 1089176863;
    uint64_t v3 = 0x4448000040EB851FLL;
    goto LABEL_37;
  }
  *(_DWORD *)(a3 + 4) = 1072399647;
  *(_DWORD *)(a3 + 32) = 1115291648;
  *(void *)(a3 + 40) = 0x427A000041A3D70ALL;
  uint64_t v3 = 0x427A00003FEB851FLL;
  if ((uint64_t)a2 >= 7)
  {
    if (a2 > 0xA)
    {
      if (a2 > 0x14)
      {
        if (a2 <= 0x28)
        {
          *(_DWORD *)(a3 + 32) = 1140457472;
          *(_DWORD *)(a3 + 44) = 1123680256;
          *(_DWORD *)(a3 + 4) = 1080788255;
          uint64_t v3 = 0x43FA0000406B851FLL;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 32) = 1132068864;
        *(_DWORD *)(a3 + 44) = 1123680256;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x437A0000406B851FLL;
      }
    }
    else
    {
      *(_DWORD *)(a3 + 32) = 1123680256;
      *(_DWORD *)(a3 + 44) = 1123680256;
      uint64_t v3 = 0x42FA00003FEB851FLL;
    }
  }
LABEL_37:
  float v7 = (float)(uint64_t)a2 * 0.33;
  *(float *)(a3 + 8) = *(float *)&v3 + *(float *)&v3;
  *(void *)(a3 + 12) = v3;
  *(float *)(a3 + 20) = v7;
  *(float *)(a3 + 24) = v7;
  float result = v7 * 0.25;
  *(float *)(a3 + 28) = v7 * 0.25;
  return result;
}

void mlir::placement::PlacementDialect::PlacementDialect(mlir::placement::PlacementDialect *this, mlir::MLIRContext *a2)
{
  *(void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"placement", 9, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id) = &unk_26C3803E8;
  mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>();
}

void mlir::placement::PlacementDialect::~PlacementDialect(llvm **this)
{
}

void sub_2117FD110()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>()
{
}

uint64_t mlir::placement::RegionTypeAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned int v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v5);
}

uint64_t mlir::placement::RegionTypeAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 152))(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (!mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v13))
    {
LABEL_28:
      uint64_t v6 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
      __int16 v19 = 259;
      (*(void (**)(uint64_t *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v15, a1, v6, &v17);
      if (v15) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v16);
      return 0;
    }
    if (v14 != 3)
    {
LABEL_16:
      __int16 v12 = 257;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(void *)a1 + 24))(&v17, a1, v2, v11);
      if (v17)
      {
        mlir::Diagnostic::operator<<((uint64_t)v18, "expected ");
        if (v17)
        {
          mlir::Diagnostic::operator<<((uint64_t)v18, "::mlir::placement::RegionType");
          if (v17)
          {
            mlir::Diagnostic::operator<<((uint64_t)v18, " to be one of: ");
            if (v17)
            {
              mlir::Diagnostic::operator<<((uint64_t)v18, "GPU");
              if (v17)
              {
                mlir::Diagnostic::operator<<((uint64_t)v18, ", ");
                if (v17)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v18, "ANE");
                  if (v17)
                  {
                    mlir::Diagnostic::operator<<((uint64_t)v18, ", ");
                    if (v17) {
                      mlir::Diagnostic::operator<<((uint64_t)v18, "CPU");
                    }
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
      if (v17) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
      goto LABEL_28;
    }
    if (*(_WORD *)v13 == 20551 && *(unsigned char *)(v13 + 2) == 85)
    {
      unsigned int v8 = 0;
    }
    else if (*(_WORD *)v13 == 20033 && *(unsigned char *)(v13 + 2) == 69)
    {
      unsigned int v8 = 1;
    }
    else
    {
      if (*(_WORD *)v13 != 20547 || *(unsigned char *)(v13 + 2) != 85) {
        goto LABEL_16;
      }
      unsigned int v8 = 2;
    }
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 168))(a1))
    {
      int Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      v11[0] = v8;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      uint64_t v17 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
      v18[0] = Context;
      return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v17, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, v11);
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::RegionTypeAttr::print(mlir::placement::RegionTypeAttr *this, mlir::AsmPrinter *a2)
{
  mlir::Attribute::getContext(this);
  int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    unsigned char *v5 = 60;
    ++*((void *)v4 + 4);
  }
  int v6 = *(_DWORD *)(*(void *)this + 8);
  if (!v6)
  {
    BOOL v7 = 0;
    uint64_t v9 = "GPU";
LABEL_14:
    size_t v8 = 3;
    goto LABEL_15;
  }
  if (v6 == 2)
  {
    BOOL v7 = 0;
    uint64_t v9 = "CPU";
    goto LABEL_14;
  }
  BOOL v7 = v6 != 1;
  if (v6 == 1) {
    size_t v8 = 3;
  }
  else {
    size_t v8 = 0;
  }
  if (v6 == 1) {
    uint64_t v9 = "ANE";
  }
  else {
    uint64_t v9 = &byte_211F4AA5D;
  }
LABEL_15:
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (void *)*((void *)v10 + 4);
  if (v8 <= *((void *)v10 + 3) - (void)v11)
  {
    if (!v7)
    {
      memcpy(v11, v9, v8);
      *((void *)v10 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v9, v8);
  }
  float result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v13)
  {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  else
  {
    *uint64_t v13 = 62;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  uint64_t v18 = a2;
  uint64_t v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  unint64_t v22[2] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = v5;
  v22[0] = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(void *)a2 + 608))(a2, &v20))
  {
    *(_WORD *)uint64_t v22 = 256;
    if (!v22[2]) {
      unint64_t v22[2] = 1;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (void **)"region_type";
  uint64_t v16 = 11;
  if (v22[2]) {
    goto LABEL_14;
  }
  uint64_t v6 = v21;
  if (v21)
  {
    if (v21 == 11 && *v20 == 0x745F6E6F69676572 && *(void *)((char *)v20 + 3) == 0x657079745F6E6F69)
    {
      uint64_t v8 = mlir::placement::RegionTypeAttr::parse(a2);
      uint64_t v6 = 0;
      uint64_t v9 = 0;
      v22[0] = v8 != 0;
      *(_WORD *)&v22[1] = 257;
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  (*(void (**)(mlir::AsmParser *, void ***, uint64_t))(*(void *)v18 + 616))(v18, &v15, 1);
  if (v22[2])
  {
LABEL_14:
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = v21;
LABEL_26:
  uint64_t v8 = 0;
  uint64_t v9 = (void **)v20;
  *(_WORD *)uint64_t v22 = 0;
  unint64_t v22[2] = 1;
LABEL_15:
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v18) <= 0xFFu)
  {
    __int16 v14 = 257;
    (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(void *)a2 + 24))(&v18, a2, v4, v13);
    if (v18)
    {
      if (v18)
      {
        __int16 v17 = 261;
        uint64_t v15 = v9;
        uint64_t v16 = v6;
        mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
        if (v18)
        {
          if (v18)
          {
            uint64_t v10 = *(void ***)(a1 + 8);
            uint64_t v11 = *(void *)(a1 + 16);
            __int16 v17 = 261;
            uint64_t v15 = v10;
            uint64_t v16 = v11;
            mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
            if (v18)
            {
              if (v18) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
              }
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v19);
    return 0;
  }
  return v8;
}

void mlir::placement::PlacementDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 0xA)
    {
      *(_DWORD *)(v5 + 7) = 1701869940;
      *(void *)uint64_t v5 = *(void *)"region_type";
      *((void *)v4 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v4, "region_type", 0xBuLL);
    }
    mlir::placement::RegionTypeAttr::print((mlir::placement::RegionTypeAttr *)&v6, a3);
  }
}

uint64_t mlir::placement::TimerHandleType::get(mlir::placement::TimerHandleType *this, mlir::MLIRContext *a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v5[1] = &v6;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v4);
}

uint64_t mlir::placement::TimerHandleType::parse(mlir::placement::TimerHandleType *this, mlir::AsmParser *a2)
{
  v15[23] = *MEMORY[0x263EF8340];
  mlir::AsmParser::getContext(this);
  (*(void (**)(mlir::placement::TimerHandleType *))(*(void *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(void *)this + 152))(this))
  {
    __int16 v11 = 257;
    if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, const char *, uint64_t, uint64_t *))(*(void *)this + 368))(this, "handle", 6, v10))
    {
      if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(void *)this + 136))(this))
      {
        v10[0] = 0;
        char v3 = mlir::AsmParser::parseInteger<unsigned long long>((uint64_t)this, v10);
        uint64_t v4 = *(void *)this;
        if (v3)
        {
          uint64_t v5 = v10[0];
          if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(v4 + 168))(this))
          {
            int Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(this);
            uint64_t v12 = v5;
            uint64_t v13 = Context;
            TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
            v10[0] = (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
            v10[1] = (uint64_t)&v13;
            return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v12);
          }
        }
        else
        {
          uint64_t v9 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(v4 + 40))(this);
          __int16 v11 = 259;
          (*(void (**)(uint64_t *__return_ptr, mlir::placement::TimerHandleType *, uint64_t, uint64_t *))(*(void *)this + 24))(&v14, this, v9, v10);
          if (v14) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
        }
      }
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::TimerHandleType::print(mlir::placement::TimerHandleType *this, mlir::AsmPrinter *a2)
{
  mlir::Attribute::getContext(this);
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    unsigned char *v5 = 60;
    ++*((void *)v4 + 4);
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 25964;
    *(_DWORD *)uint64_t v7 = 1684955496;
    *((void *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "handle", 6uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "=", 1uLL);
  }
  else
  {
    unsigned char *v11 = 61;
    ++*((void *)v10 + 4);
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  unint64_t v14 = *(void *)(*(void *)this + 8);
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v15, v14);
  float result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v17 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v17)
  {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  else
  {
    *__int16 v17 = 62;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseType(uint64_t a1, mlir::placement::TimerHandleType *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(void *)a2 + 40))(a2);
  uint64_t v19 = a2;
  uint64_t v5 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(void *)a2 + 40))(a2);
  unint64_t v23[2] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = v5;
  v23[0] = 0;
  if (!(*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, uint64_t *))(*(void *)a2 + 608))(a2, &v21))
  {
    *(_WORD *)uint64_t v23 = 256;
    if (!v23[2]) {
      unint64_t v23[2] = 1;
    }
    goto LABEL_14;
  }
  uint64_t v16 = (void **)"timer";
  uint64_t v17 = 5;
  if (v23[2]) {
    goto LABEL_14;
  }
  uint64_t v7 = v22;
  if (v22)
  {
    if (v22 == 5 && *(_DWORD *)v21 == 1701669236 && *(unsigned char *)(v21 + 4) == 114)
    {
      uint64_t v9 = mlir::placement::TimerHandleType::parse(a2, v6);
      uint64_t v7 = 0;
      uint64_t v10 = 0;
      v23[0] = v9 != 0;
      *(_WORD *)&v23[1] = 257;
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  (*(void (**)(mlir::placement::TimerHandleType *, void ***, uint64_t))(*(void *)v19 + 616))(v19, &v16, 1);
  if (v23[2])
  {
LABEL_14:
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = v22;
LABEL_26:
  uint64_t v9 = 0;
  uint64_t v10 = (void **)v21;
  *(_WORD *)uint64_t v23 = 0;
  unint64_t v23[2] = 1;
LABEL_15:
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v19) <= 0xFFu)
  {
    __int16 v15 = 257;
    (*(void (**)(mlir::placement::TimerHandleType **__return_ptr, mlir::placement::TimerHandleType *, uint64_t, char *))(*(void *)a2 + 24))(&v19, a2, v4, v14);
    if (v19)
    {
      if (v19)
      {
        __int16 v18 = 261;
        uint64_t v16 = v10;
        uint64_t v17 = v7;
        mlir::Diagnostic::operator<<((uint64_t)&v20, &v16);
        if (v19)
        {
          if (v19)
          {
            __int16 v11 = *(void ***)(a1 + 8);
            uint64_t v12 = *(void *)(a1 + 16);
            __int16 v18 = 261;
            uint64_t v16 = v11;
            uint64_t v17 = v12;
            mlir::Diagnostic::operator<<((uint64_t)&v20, &v16);
            if (v19)
            {
              if (v19) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
              }
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v20);
    return 0;
  }
  return v9;
}

void mlir::placement::PlacementDialect::printType(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 4)
    {
      *(unsigned char *)(v5 + 4) = 114;
      *(_DWORD *)uint64_t v5 = 1701669236;
      *((void *)v4 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v4, "timer", 5uLL);
    }
    mlir::placement::TimerHandleType::print((mlir::placement::TimerHandleType *)&v6, a3);
  }
}

uint64_t mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "placement.ane_io_cast", 21, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(uint64_t a1, void **a2, void **a3, void **a4, unsigned int a5)
{
  v47[19] = *MEMORY[0x263EF8340];
  int v39 = a2;
  unint64_t v6 = *a2;
  uint64_t v7 = (void *)*((void *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *((unsigned int *)v6 + 4);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = (void *)v6[1];
    uint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      unint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      __int16 v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = (void **)v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    uint64_t v42 = a2;
    __int16 v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v27 = *((unsigned int *)v6 + 4);
    if (!v27) {
      goto LABEL_34;
    }
    uint64_t v28 = (void *)v6[1];
    uint64_t v29 = &v28[2 * v27];
    do
    {
      unint64_t v30 = v27 >> 1;
      uint64_t v31 = &v28[2 * (v27 >> 1)];
      unint64_t v33 = *v31;
      uint64_t v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26) {
        uint64_t v28 = v32;
      }
      else {
        unint64_t v27 = v30;
      }
    }
    while (v27);
    if (v28 != v29 && *v28 == v26) {
      uint64_t v17 = (void **)v28[1];
    }
    else {
LABEL_34:
    }
      uint64_t v17 = 0;
    v37[0] = a2;
    __int16 v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      int v40 = 5;
      uint64_t v41 = a5;
      uint64_t v20 = &v40;
      unint64_t v21 = v44;
      if (v45 >= v46)
      {
        unint64_t v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          uint64_t v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          unint64_t v21 = v44;
          uint64_t v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          uint64_t v20 = &v40;
          unint64_t v21 = v44;
        }
      }
      unint64_t v22 = v21 + 24 * v45;
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      ++v45;
      if (v42) {
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be tensor of any type values or memref of any type values or index, but got ");
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ANEIOCast::verify(mlir::placement::ANEIOCast *this)
{
  v8[23] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(*(void *)(*(void *)this + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
    || (*(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return 1;
  }
  __int16 v6 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, &v5, (uint64_t)&v7);
  if (v7) {
    mlir::Diagnostic::operator<<((uint64_t)v8, "invalid conversion");
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v7);
  if (v7) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return v3;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "placement.memref_to_tensor", 26, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave(mlir::placement::detail::MemrefToTensorGenericAdaptorBase *this)
{
  uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  uint64_t v3 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end(this);
  uint64_t v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v3, **(void **)(*((void *)this + 1) + 96));
  if ((v5 & 1) != 0 && (uint64_t v6 = *((void *)v4 + 1)) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = *(void **)(*(void *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v6 = 0;
    }
    uint64_t v16 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue((uint64_t)&v16, (llvm::APInt *)&v14);
      if (v15 >= 0x41) {
        uint64_t v11 = v14;
      }
      else {
        uint64_t v11 = (uint64_t *)&v14;
      }
      uint64_t v12 = *v11;
      uint64_t v7 = *v11 & 0xFFFFFF00;
      if (v15 >= 0x41 && v14) {
        MEMORY[0x21667D390]();
      }
      uint64_t v9 = v12;
      uint64_t v8 = 0x100000000;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  return v8 | v7 | v9;
}

uint64_t mlir::placement::MemrefToTensorAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v42[23] = *MEMORY[0x263EF8340];
  uint64_t v40 = *a1;
  uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v5 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v6 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v7 = (void *)*((void *)Value + 1);
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7)) {
        goto LABEL_33;
      }
      uint64_t v8 = *v7;
      unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v10 = *(unsigned int *)(v8 + 16);
      if (!v10) {
        goto LABEL_20;
      }
      uint64_t v11 = *(void **)(v8 + 8);
      uint64_t v12 = &v11[2 * v10];
      do
      {
        unint64_t v13 = v10 >> 1;
        unint64_t v14 = &v11[2 * (v10 >> 1)];
        unint64_t v16 = *v14;
        unsigned int v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9) {
          uint64_t v11 = v15;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v10);
      if (v11 != v12 && *v11 == v9) {
        uint64_t v17 = v11[1];
      }
      else {
LABEL_20:
      }
        uint64_t v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      uint64_t v19 = Type;
      if (!Type) {
        goto LABEL_30;
      }
      uint64_t v20 = *Type;
      unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v22 = *(unsigned int *)(v20 + 16);
      if (!v22) {
        goto LABEL_30;
      }
      long long v23 = *(void **)(v20 + 8);
      uint64_t v24 = &v23[2 * v22];
      do
      {
        unint64_t v25 = v22 >> 1;
        unint64_t v26 = &v23[2 * (v22 >> 1)];
        unint64_t v28 = *v26;
        unint64_t v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21) {
          long long v23 = v27;
        }
        else {
          unint64_t v22 = v25;
        }
      }
      while (v22);
      if (v23 != v24 && *v23 == v21) {
        uint64_t v29 = v23[1];
      }
      else {
LABEL_30:
      }
        uint64_t v29 = 0;
      uint64_t v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v41);
      if (v30 != 1
        || (uint64_t v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        uint64_t v32 = "'placement.memref_to_tensor' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v32 = "'placement.memref_to_tensor' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    uint64_t v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    uint64_t v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32)) {
      return 1;
    }
  }
  uint64_t v32 = "'placement.memref_to_tensor' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  __int16 v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::MemrefToTensor::getShapeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (mlir::DenseIntElementsAttr::classof(*((void *)v9 + 1))) {
    return v11;
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getResultElementTypeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getInterleaveAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), **(void **)(*((void *)*this + 6) + 96));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v72 = a6;
  LOBYTE(v73) = 0;
  char v74 = 0;
  uint64_t v75 = a9;
  uint64_t v76 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74) {
      char v74 = 0;
    }
    mlir::OperationName::OperationName(&v73, "placement.memref_to_tensor", 26, Context);
    char v74 = 1;
  }
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  if (a5)
  {
    uint64_t v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::MemrefToTensorAdaptor::verify(&v72, v15))
    {
      uint64_t v69 = v77;
      uint64_t v70 = 0;
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&v69, 0);
      v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v68[1] = a2;
      if (v68[0])
      {
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
        Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v68);
        unint64_t v20 = v18;
        uint64_t v69 = v71;
        uint64_t v70 = 0x500000000;
        size_t v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          unsigned int v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v70) = v22 + (v21 >> 3);
            uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            unint64_t v28 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            uint64_t v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(void *)(*(void *)(v73 + 96) + 8));
            if (v30)
            {
              uint64_t v31 = *((void *)v29 + 1);
              if (v31)
              {
                uint64_t v32 = *(void **)(*(void *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t v31 = 0;
                }
                v67[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v67);
                }
              }
            }
            uint64_t v33 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            uint64_t v34 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            unint64_t v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(void *)(*(void *)(v73 + 96) + 16));
            if ((v36 & 1) == 0
              || (uint64_t v37 = *((void *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((void *)v35 + 1)))
            {
LABEL_47:
              uint64_t v49 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
              uint64_t v50 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
              uint64_t v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(void **)(v73 + 96));
              if (v52)
              {
                uint64_t v53 = *((void *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v54 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
                    uint64_t v55 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
                    uint64_t v56 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v54, v55, *(void *)(*(void *)(v73 + 96) + 16));
                    if ((v57 & 1) == 0
                      || (uint64_t v58 = *((void *)v56 + 1)) == 0
                      || (mlir::DenseIntElementsAttr::classof(v58) & 1) == 0)
                    {
                      uint64_t v59 = v70;
                      if ((v70 & 0xFFFFFFFE) != 4)
                      {
                        uint64_t v63 = mlir::UnrankedTensorType::get(OperandRange);
                        goto LABEL_58;
                      }
                      uint64_t Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v72);
                      uint64_t v61 = 16;
                      if (v59 == 4) {
                        uint64_t v61 = 8;
                      }
                      int v62 = v69;
                      *(uint64_t *)((char *)v69 + v61) /= Interleave;
                      v62[v59 - 1] *= Interleave;
                    }
                  }
                }
              }
              uint64_t v63 = mlir::RankedTensorType::get((uint64_t)v69, v70, OperandRange, 0);
LABEL_58:
              uint64_t v64 = v63;
              unsigned int v65 = *(_DWORD *)(a11 + 8);
              if (v65 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65 + 1, 8);
                unsigned int v65 = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v65) = v64;
              ++*(_DWORD *)(a11 + 8);
              if (v69 != v71) {
                free(v69);
              }
              return 1;
            }
            v67[0] = v37;
            v67[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              LOBYTE(Shape) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
            }
            else
            {
              uint64_t RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              uint64_t v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
              unint64_t v20 = NumElements;
              LODWORD(v70) = 0;
              if (NumElements <= HIDWORD(v70))
              {
                unsigned int v42 = 0;
                BOOL v66 = RawStringData == v39 && isSplat == Shape;
                int v44 = v66;
                if (v66 && !NumElements)
                {
LABEL_46:
                  LODWORD(v70) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, NumElements, 8);
                unsigned int v42 = v70;
                BOOL v43 = RawStringData == v39 && isSplat == Shape;
                int v44 = v43;
              }
            }
            else
            {
              int v44 = 0;
              unsigned int v42 = 0;
            }
            uint64_t v45 = 0;
            unsigned int v46 = (char *)v69 + 8 * v42;
            do
            {
              if ((_BYTE)Shape) {
                uint64_t v47 = 0;
              }
              else {
                uint64_t v47 = v45;
              }
              *(void *)&v46[8 * v45] = *(void *)(RawStringData + 8 * v47);
              BOOL v43 = v20 - 1 == v45++;
              if (v43) {
                int v48 = v44;
              }
              else {
                int v48 = 0;
              }
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, (uint64_t)(8 * v18) >> 3, 8);
          unsigned int v22 = v70;
          if (!v20) {
            goto LABEL_17;
          }
        }
        memcpy((char *)v69 + 8 * v22, Shape, v21);
        unsigned int v22 = v70;
        goto LABEL_17;
      }
    }
  }
  uint64_t v23 = mlir::Float32Type::get(this, a2);
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::MemrefToTensor::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v27[2] = *MEMORY[0x263EF8340];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  char __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v13 = *a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v20 = __src;
  }
  uint64_t v21 = v26;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::placement::MemrefToTensor::verifyInvariantsImpl(mlir::placement::MemrefToTensor *this)
{
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v4;
    do
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v11 = *(void *)this;
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == NumNeededNEs)
      {
        uint64_t v6 = (void **)*((void *)Value + 1);
      }
      else
      {
        uint64_t v12 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        uint64_t v11 = *(void *)this;
        if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) == v12)
        {
          uint64_t v7 = *((void *)Value + 1);
        }
        else
        {
          uint64_t v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          uint64_t v11 = *(void *)this;
          if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == v13) {
            uint64_t v8 = (void **)*((void *)Value + 1);
          }
        }
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v11 = *(void *)this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (void **)"shape", 5)
    || !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*(void *)this, v7, (void **)"resultElementType", (void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*(void *)this, v6, (void **)"interleave", (void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v14 = *(void *)this - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(uint64_t a1, void **a2, void **a3, uint64_t a4)
{
  v41[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2)) {
    goto LABEL_25;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = (void *)v8[1];
  uint64_t v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    uint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      uint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_11:
  }
    uint64_t v17 = 0;
  uint64_t v37 = a2;
  uint64_t v38 = v17;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v37);
  int v19 = Type;
  if (!Type) {
    goto LABEL_21;
  }
  uint64_t v20 = *Type;
  unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v22 = *(unsigned int *)(v20 + 16);
  if (!v22) {
    goto LABEL_21;
  }
  unint64_t v23 = *(void **)(v20 + 8);
  uint64_t v24 = &v23[2 * v22];
  do
  {
    unint64_t v25 = v22 >> 1;
    uint64_t v26 = &v23[2 * (v22 >> 1)];
    unint64_t v28 = *v26;
    unint64_t v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21) {
      unint64_t v23 = v27;
    }
    else {
      unint64_t v22 = v25;
    }
  }
  while (v22);
  if (v23 != v24 && *v23 == v21) {
    uint64_t v29 = v23[1];
  }
  else {
LABEL_21:
  }
    uint64_t v29 = 0;
  uint64_t v40 = v19;
  v41[0] = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v40);
  if (v30 == 1)
  {
    uint64_t v34 = a2;
    v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
    v35[1] = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
      return 1;
    }
  }
LABEL_25:
  __int16 v39 = 257;
  mlir::Operation::emitOpError(a1, &v37, (uint64_t)&v40);
  if (v40)
  {
    mlir::Diagnostic::operator<<((uint64_t)v41, "attribute '");
    if (v40)
    {
      __int16 v39 = 261;
      uint64_t v37 = a3;
      uint64_t v38 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v41, &v37);
      if (v40) {
        mlir::Diagnostic::operator<<((uint64_t)v41, "' failed to satisfy constraint: ui64 elements attribute of rank 1");
      }
    }
  }
  uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v32;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  v11[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    uint64_t v10 = a2;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
    return 1;
  }
  __int16 v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      __int16 v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10) {
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: any type attribute");
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(uint64_t a1, void **a2, void **a3, void **a4)
{
  v12[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  __int16 v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      __int16 v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value) {
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit unsigned integer attribute");
      }
    }
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v39[19] = *MEMORY[0x263EF8340];
  uint64_t v31 = a2;
  uint64_t v9 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_13;
  }
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v9 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v13 = *(void **)(v9 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    unint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  uint64_t v34 = a2;
  v35[0] = v19;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  if (mlir::isStrided(a2)) {
    return 1;
  }
LABEL_13:
  __int16 v30 = 261;
  v29[0] = a3;
  v29[1] = a4;
  mlir::Operation::emitOpError(a1, v29, (uint64_t)&v34);
  if (v34)
  {
    mlir::Diagnostic::operator<<((uint64_t)v35, " #");
    if (v34)
    {
      int v32 = 5;
      uint64_t v33 = a5;
      unint64_t v21 = &v32;
      unint64_t v22 = v36;
      if (v37 >= v38)
      {
        unint64_t v27 = v37 + 1;
        if (v36 <= (unint64_t)&v32 && v36 + 24 * v37 > (unint64_t)&v32)
        {
          unint64_t v28 = (char *)&v32 - v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          unint64_t v22 = v36;
          unint64_t v21 = (int *)&v28[v36];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          unint64_t v21 = &v32;
          unint64_t v22 = v36;
        }
      }
      unint64_t v23 = v22 + 24 * v37;
      long long v24 = *(_OWORD *)v21;
      *(void *)(v23 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v23 = v24;
      ++v37;
      if (v34) {
        mlir::Diagnostic::operator<<((uint64_t)v35, " must be strided memref of any type values, but got ");
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v34, &v31);
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
  if (v34) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
  return v20;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v38[19] = *MEMORY[0x263EF8340];
  uint64_t v30 = a2;
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void **)(*(void *)a2 + 136);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *(unsigned int *)(v5 + 16);
    if (!v10) {
      goto LABEL_14;
    }
    unint64_t v11 = *(void **)(v5 + 8);
    unint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      uint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      unint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        unint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    uint64_t v33 = a2;
    v34[0] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    return 1;
  }
  else
  {
    __int16 v29 = 261;
    v28[0] = a3;
    v28[1] = a4;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)&v33);
    if (v33)
    {
      mlir::Diagnostic::operator<<((uint64_t)v34, " #");
      if (v33)
      {
        int v31 = 5;
        uint64_t v32 = a5;
        uint64_t v20 = &v31;
        unint64_t v21 = v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= (unint64_t)&v31 && v35 + 24 * v36 > (unint64_t)&v31)
          {
            unint64_t v27 = (char *)&v31 - v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v21 = v35;
            uint64_t v20 = (int *)&v27[v35];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v20 = &v31;
            unint64_t v21 = v35;
          }
        }
        unint64_t v22 = v21 + 24 * v36;
        long long v23 = *(_OWORD *)v20;
        *(void *)(v22 + 16) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v22 = v23;
        ++v36;
        if (v33) {
          mlir::Diagnostic::operator<<((uint64_t)v34, " must be tensor of any type values, but got ");
        }
      }
    }
    uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v33, &v30);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
    if (v33) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
  }
  return v18;
}

mlir::Operation *mlir::placement::MemrefToTensor::verify(mlir::Operation **this)
{
  v91[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  uint64_t v79 = v2;
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)v2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v78[0] = (uint64_t)v3;
  v78[1] = v4;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v79)
    || !v3
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    goto LABEL_23;
  }
  Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v7 -= 8;
      if (!v7) {
        goto LABEL_8;
      }
    }
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v8 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v8, v9);
  uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
  v87[0] = ShapeAttr != 0;
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    uint64_t RawStringData = 0;
    if (isValidIntOrFloat < 2) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v15 = 0;
    unint64_t v13 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    do
    {
      if (isSplat) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v15;
      }
      if (isSplat) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v15 + 1;
      }
      v16 *= *(void *)(RawStringData + 8 * v18);
      v17 *= *(void *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v13);
    uint64_t v14 = v17 * v16;
    goto LABEL_91;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
  char isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
  if (!isValidIntOrFloat)
  {
    uint64_t v14 = 1;
    goto LABEL_92;
  }
  if (isValidIntOrFloat >= 2) {
    goto LABEL_13;
  }
LABEL_11:
  unint64_t v13 = 0;
  uint64_t v14 = 1;
  do
  {
    if (isSplat) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v13;
    }
    v14 *= *(void *)(RawStringData + 8 * v52);
    ++v13;
LABEL_91:
    ;
  }
  while (isValidIntOrFloat != v13);
LABEL_92:
  if (NumElements != v14)
  {
    __int16 v85 = 257;
    mlir::Operation::emitOpError((uint64_t)v2, (void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "Input shape ");
    }
    uint64_t v53 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&ShapeAttr, v78);
    uint64_t v54 = (uint64_t)v53;
    if (*v53)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v53 + 1), " (");
      if (*(void *)v54)
      {
        uint64_t v55 = v54 + 24;
        unint64_t v56 = *(void *)(v54 + 24);
        LODWORD(v75) = 5;
        uint64_t v76 = NumElements;
        uint64_t v57 = *(unsigned int *)(v54 + 32);
        uint64_t v58 = &v75;
        if (v57 >= *(_DWORD *)(v54 + 36))
        {
          unint64_t v69 = v57 + 1;
          BOOL v70 = v56 + 24 * v57 > (unint64_t)&v75;
          if (v56 <= (unint64_t)&v75 && v70)
          {
            uint64_t v73 = (char *)&v75 - v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            unint64_t v56 = *(void *)(v54 + 24);
            uint64_t v58 = (void ***)&v73[v56];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            unint64_t v56 = *(void *)(v54 + 24);
            uint64_t v58 = &v75;
          }
        }
        uint64_t v59 = v56 + 24 * *(unsigned int *)(v54 + 32);
        long long v60 = *(_OWORD *)v58;
        *(void *)(v59 + 16) = v58[2];
        *(_OWORD *)uint64_t v59 = v60;
        ++*(_DWORD *)(v54 + 32);
        if (*(void *)v54) {
          mlir::Diagnostic::operator<<(v54 + 8, " elements) is not compatible with shape attribute ");
        }
      }
    }
    uint64_t v80 = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
    BOOL v81 = v80 != 0;
    uint64_t v61 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &v80);
    uint64_t v62 = (uint64_t)v61;
    if (*v61)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v61 + 1), " (");
      if (*(void *)v62)
      {
        uint64_t v63 = v62 + 24;
        unint64_t v64 = *(void *)(v62 + 24);
        LODWORD(v75) = 2;
        uint64_t v76 = v14;
        uint64_t v65 = *(unsigned int *)(v62 + 32);
        BOOL v66 = &v75;
        if (v65 >= *(_DWORD *)(v62 + 36))
        {
          unint64_t v71 = v65 + 1;
          BOOL v72 = v64 + 24 * v65 > (unint64_t)&v75;
          if (v64 <= (unint64_t)&v75 && v72)
          {
            char v74 = (char *)&v75 - v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            unint64_t v64 = *(void *)(v62 + 24);
            BOOL v66 = (void ***)&v74[v64];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            unint64_t v64 = *(void *)(v62 + 24);
            BOOL v66 = &v75;
          }
        }
        uint64_t v67 = v64 + 24 * *(unsigned int *)(v62 + 32);
        long long v68 = *(_OWORD *)v66;
        *(void *)(v67 + 16) = v66[2];
        *(_OWORD *)uint64_t v67 = v68;
        ++*(_DWORD *)(v62 + 32);
        if (*(void *)v62) {
          mlir::Diagnostic::operator<<(v62 + 8, " elements)");
        }
      }
    }
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v62);
    if (ShapeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v79)
    || !v78[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    return (mlir::Operation *)1;
  }
  uint64_t v20 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_30;
      }
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue((uint64_t)&InterleaveAttr, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v87[0]) >= 0x41) {
      p_uint64_t ShapeAttr = (uint64_t *)ShapeAttr;
    }
    else {
      p_uint64_t ShapeAttr = &ShapeAttr;
    }
    uint64_t v24 = *(unsigned int *)p_ShapeAttr;
    if (LODWORD(v87[0]) >= 0x41 && ShapeAttr) {
      MEMORY[0x21667D390]();
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    __int16 v85 = 257;
    mlir::Operation::emitOpError((uint64_t)v2, (void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "interleave factor not supported");
    }
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
  InterleaveAttr = v84;
  uint64_t v83 = 0x400000000;
  unint64_t v26 = (unsigned char *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  uint64_t v27 = mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  unsigned int v28 = 0;
  uint64_t v30 = (unsigned char *)(v27 + 8 * v29);
  LODWORD(v83) = 0;
  unint64_t v31 = (v30 - v26) >> 3;
  if (v31 > HIDWORD(v83))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v84, v31, 8);
    unsigned int v28 = v83;
  }
  if (v30 != v26)
  {
    memcpy((char *)InterleaveAttr + 8 * v28, v26, v30 - v26);
    unsigned int v28 = v83;
  }
  uint64_t v32 = v28 + ((unint64_t)(v30 - v26) >> 3);
  LODWORD(v83) = v28 + ((unint64_t)(v30 - v26) >> 3);
  if ((unint64_t)(v32 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int16 v77 = 257;
    mlir::Operation::emitOpError((uint64_t)v2, &v75, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "Interleave can only be applied on 4D or 5D tensor");
    }
LABEL_70:
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    int v36 = 0;
    goto LABEL_73;
  }
  uint64_t v75 = (void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (v75)
  {
    mlir::IntegerAttr::getValue((uint64_t)&v75, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v87[0]) >= 0x41) {
      uint64_t v33 = (uint64_t *)ShapeAttr;
    }
    else {
      uint64_t v33 = &ShapeAttr;
    }
    uint64_t v34 = *(unsigned int *)v33;
    if (LODWORD(v87[0]) >= 0x41 && ShapeAttr) {
      MEMORY[0x21667D390](ShapeAttr);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  BOOL v35 = v32 == 4;
  int v36 = 1;
  if (v35) {
    uint64_t v37 = 1;
  }
  else {
    uint64_t v37 = 2;
  }
  if (*((void *)InterleaveAttr + v37) % v34)
  {
    __int16 v77 = 257;
    mlir::Operation::emitOpError((uint64_t)v2, &v75, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v87, "channel ");
      if (ShapeAttr)
      {
        uint64_t v38 = *((void *)InterleaveAttr + v37);
        LODWORD(v80) = 2;
        BOOL v81 = v38;
        __int16 v39 = &v80;
        unint64_t v40 = v88;
        if (v89 >= v90)
        {
          unint64_t v48 = v89 + 1;
          if (v88 <= (unint64_t)&v80 && v88 + 24 * v89 > (unint64_t)&v80)
          {
            uint64_t v50 = (char *)&v80 - v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            unint64_t v40 = v88;
            __int16 v39 = (uint64_t *)&v50[v88];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            __int16 v39 = &v80;
            unint64_t v40 = v88;
          }
        }
        unint64_t v41 = v40 + 24 * v89;
        long long v42 = *(_OWORD *)v39;
        *(void *)(v41 + 16) = v39[2];
        *(_OWORD *)unint64_t v41 = v42;
        ++v89;
        if (ShapeAttr)
        {
          mlir::Diagnostic::operator<<((uint64_t)v87, " must be a multiple of interleave ");
          if (ShapeAttr)
          {
            LODWORD(v80) = 2;
            BOOL v81 = v34;
            BOOL v43 = &v80;
            unint64_t v44 = v88;
            if (v89 >= v90)
            {
              unint64_t v49 = v89 + 1;
              if (v88 <= (unint64_t)&v80 && v88 + 24 * v89 > (unint64_t)&v80)
              {
                uint64_t v51 = (char *)&v80 - v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                unint64_t v44 = v88;
                BOOL v43 = (uint64_t *)&v51[v88];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                BOOL v43 = &v80;
                unint64_t v44 = v88;
              }
            }
            unint64_t v45 = v44 + 24 * v89;
            long long v46 = *(_OWORD *)v43;
            *(void *)(v45 + 16) = v43[2];
            *(_OWORD *)unint64_t v45 = v46;
            ++v89;
          }
        }
      }
    }
    goto LABEL_70;
  }
LABEL_73:
  if (InterleaveAttr != v84) {
    free(InterleaveAttr);
  }
  if (v36) {
    return (mlir::Operation *)1;
  }
  return v2;
}

uint64_t mlir::placement::RegionCall::getCallee(mlir::Operation **this)
{
  uint64_t MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MaxValueAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::RegionCall::getRegionType(mlir::Operation **this)
{
  return *(unsigned int *)(mlir::anec::ClampedRelu::getMinValueAttr(this) + 8);
}

void mlir::placement::RegionCall::build(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr *a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a3);
  }
  else {
    uint64_t InterfaceFor = 0;
  }
  unsigned int v28 = (const char *)a3;
  uint64_t v29 = InterfaceFor;
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v28);
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands);
  uint64_t v15 = v13;
  size_t v16 = 8 * (void)v13;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + ((8 * (uint64_t)v13) >> 3);
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), Results, v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + (v16 >> 3);
  uint64_t v19 = mlir::SymbolRefAttr::get(a3, v13);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v30 = 261;
  unsigned int v28 = "callee";
  uint64_t v29 = 6;
  uint64_t v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v28);
  ZinMirCacheTensors::ZinMirCacheTensors(&v31, v21, v19);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  uint64_t v22 = *a1;
  LODWORD(v31) = a4;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v22);
  unsigned int v28 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  uint64_t v29 = (uint64_t)v22;
  uint64_t v24 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v28, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (unsigned int *)&v31);
  char v25 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v30 = 261;
  unsigned int v28 = "region_type";
  uint64_t v29 = 11;
  uint64_t v26 = mlir::StringAttr::get(v25, (mlir::MLIRContext *)&v28);
  ZinMirCacheTensors::ZinMirCacheTensors(&v31, v26, v24);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  mlir::OperationState::addOperands(a2, a5, a6);
}

void mlir::placement::RegionCall::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  mlir::OperationState::addOperands(a2, a7, a8);
  ZinMirCacheTensors::ZinMirCacheTensors(&v16, **(void **)(*(void *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  ZinMirCacheTensors::ZinMirCacheTensors(&v16, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  if (a4 + v13 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v13, 8);
    uint64_t v13 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a2 + 64) + 8 * v13;
    do
    {
      *(void *)(v15 + 8 * v14) = mlir::TypeRange::dereference_iterator(a3, v14);
      ++v14;
    }
    while (a4 != v14);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + a4;
}

uint64_t mlir::placement::RegionCall::verifyInvariantsImpl(mlir::placement::RegionCall *this)
{
  v24[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)(*(void *)(*(void *)this + 48) + 96) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
    {
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (v6)
    {
      uint64_t v8 = *((void *)Value + 1);
      while (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
        v6 -= 16;
        if (!v6) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = *((void *)Value + 1);
      if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*(void *)this, v8, (void **)"callee", (void **)6))
      {
        uint64_t v12 = *(void *)this;
        if (!v11
          || *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
        {
LABEL_29:
          if ((*(unsigned char *)(v12 + 46) & 0x80) != 0 && (uint64_t v14 = *(unsigned int *)(v12 + 68), v14))
          {
            uint64_t v15 = 0;
            uint64_t v16 = *(void *)(v12 + 72) + 24;
            while (mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*(void *)this, (void **)(*(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", (void **)7, v15))
            {
              ++v15;
              v16 += 32;
              if (v14 == v15)
              {
                uint64_t v12 = *(void *)this;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            uint64_t v17 = *(unsigned int *)(v12 + 36);
            if (*(_DWORD *)(v12 + 36)) {
              uint64_t v18 = v12 - 16;
            }
            else {
              uint64_t v18 = 0;
            }
            if (!v17) {
              return 1;
            }
            uint64_t v19 = 0;
            uint64_t v9 = 1;
            while (1)
            {
              uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v19);
              if (!mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", (void **)6, v19))break; {
              if (v17 == ++v19)
              }
                return v9;
            }
          }
          return 0;
        }
        __int16 v22 = 257;
        mlir::Operation::emitOpError(v12, v21, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v24, "attribute '");
          if (AttrDictionary)
          {
            __int16 v22 = 261;
            v21[0] = (void **)"region_type";
            v21[1] = (void **)11;
            mlir::Diagnostic::operator<<((uint64_t)v24, v21);
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v24, "' failed to satisfy constraint: Available region types");
            }
          }
        }
        char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
        if (v13)
        {
          uint64_t v12 = *(void *)this;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_13:
    uint64_t v7 = "requires attribute 'region_type'";
  }
  else
  {
LABEL_8:
    uint64_t v7 = "requires attribute 'callee'";
  }
  v21[0] = (void **)v7;
  __int16 v22 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v21, (uint64_t)&AttrDictionary);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  v16[23] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 1;
  }
  uint64_t v7 = *(void **)(*(void *)a2 + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  uint64_t v9 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id ? a2 : 0;
  uint64_t v15 = v9;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
    if (!v10) {
      return 1;
    }
  }
  __int16 v14 = 257;
  mlir::Operation::emitOpError(a1, v13, (uint64_t)&v15);
  if (v15)
  {
    mlir::Diagnostic::operator<<((uint64_t)v16, "attribute '");
    if (v15)
    {
      __int16 v14 = 261;
      v13[0] = a3;
      v13[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v16, v13);
      if (v15) {
        mlir::Diagnostic::operator<<((uint64_t)v16, "' failed to satisfy constraint: flat symbol reference attribute");
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
  if (v15) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v11;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(uint64_t a1, void **a2, void **a3, void **a4, unsigned int a5)
{
  v47[19] = *MEMORY[0x263EF8340];
  __int16 v39 = a2;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)*((void *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *((unsigned int *)v6 + 4);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = (void *)v6[1];
    uint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      __int16 v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = (void **)v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    long long v42 = a2;
    uint64_t v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v27 = *((unsigned int *)v6 + 4);
    if (!v27) {
      goto LABEL_34;
    }
    unsigned int v28 = (void *)v6[1];
    uint64_t v29 = &v28[2 * v27];
    do
    {
      unint64_t v30 = v27 >> 1;
      uint64_t v31 = &v28[2 * (v27 >> 1)];
      unint64_t v33 = *v31;
      uint64_t v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26) {
        unsigned int v28 = v32;
      }
      else {
        unint64_t v27 = v30;
      }
    }
    while (v27);
    if (v28 != v29 && *v28 == v26) {
      uint64_t v17 = (void **)v28[1];
    }
    else {
LABEL_34:
    }
      uint64_t v17 = 0;
    v37[0] = a2;
    uint64_t v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      int v40 = 5;
      uint64_t v41 = a5;
      uint64_t v20 = &v40;
      unint64_t v21 = v44;
      if (v45 >= v46)
      {
        unint64_t v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          int v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          unint64_t v21 = v44;
          uint64_t v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          uint64_t v20 = &v40;
          unint64_t v21 = v44;
        }
      }
      unint64_t v22 = v21 + 24 * v45;
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      ++v45;
      if (v42) {
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ReplacedOps::getResAttrsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

void mlir::placement::ReplacedOps::build(mlir::StringAttr **a1, mlir::Attribute *a2, void *a3, uint64_t a4, mlir::SymbolRefAttr *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  v36[8] = *MEMORY[0x263EF8340];
  void v36[2] = a9;
  void v36[3] = a10;
  uint64_t v17 = *a1;
  mlir::TypeRange::TypeRange(v36, a9, a10);
  mlir::TypeRange::TypeRange(v35, a11, a12);
  uint64_t v18 = mlir::FunctionType::get(v17, v36[0], v36[1], v35[0], v35[1]);
  uint64_t v19 = *(void *)(*(void *)(*((void *)a2 + 1) + 96) + 8);
  uint64_t v20 = mlir::TypeAttr::get(v18);
  ZinMirCacheTensors::ZinMirCacheTensors(&v31, v19, v20);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v31, v32);
  __int16 v30 = 261;
  unsigned int v28 = a3;
  uint64_t v29 = a4;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)&v28);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v33) = 261;
  uint64_t v31 = "sym_name";
  uint64_t v32 = 8;
  uint64_t v23 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v31);
  ZinMirCacheTensors::ZinMirCacheTensors(v34, v23, StringAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, v34[0], v34[1]);
  uint64_t v25 = mlir::SymbolRefAttr::get(a5, v24);
  unint64_t v26 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v33) = 261;
  uint64_t v31 = "replaced_by";
  uint64_t v32 = 11;
  uint64_t v27 = mlir::StringAttr::get(v26, (mlir::MLIRContext *)&v31);
  ZinMirCacheTensors::ZinMirCacheTensors(&v28, v27, v25);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v28, v29);
  mlir::OperationState::addRegion(a2);
}

void sub_211801A90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
}

void sub_211801AA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
}

void sub_211801AB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((void)v64)
  {
    *(_OWORD *)uint64_t v63 = v64;
  }
  else
  {
    *(void *)uint64_t v63 = 0;
    *(void *)(v63 + 8) = 0;
  }
  if (v66 != v65) {
    free(v66);
  }
}

uint64_t mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>(uint64_t result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v19 = *a2;
  uint64_t v20 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  unint64_t v21 = *a3;
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = (uint64_t *)result;
    uint64_t v9 = 0;
    char v10 = &v5[(void)v6];
    do
    {
      uint64_t v14 = mlir::ValueRange::dereference_iterator(&v19, v9);
      uint64_t v15 = *v21;
      uint64_t v17 = v14;
      uint64_t v18 = 0;
      float result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v8, (unint64_t *)&v17, &v18);
      unint64_t v16 = v18;
      if ((result & 1) == 0)
      {
        float result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v17, (unint64_t *)&v17, v18);
        unint64_t v16 = (void *)result;
        *(void *)float result = v17;
        *(void *)(result + 8) = 0;
      }
      v16[1] = v15;
      uint64_t v9 = v20 + 1;
      uint64_t v11 = v21 + 1;
      uint64_t v20 = v9;
      ++v21;
    }
    while ((v9 != v4 || v19 != v3) && v11 != v10);
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.live_outs", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"placement.live_outs";
    _OWORD v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::placement::ReplacedOps::verifyInvariantsImpl(mlir::placement::ReplacedOps *this)
{
  v44[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    char v8 = "requires attribute 'function_type'";
LABEL_16:
    v37[0] = (void **)v8;
    __int16 v38 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v37, (uint64_t)&AttrDictionary);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    return v14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 16 * v4;
  while (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(void **)(*(void *)(*(void *)this + 48) + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value)) {
      uint64_t v6 = *((void *)Value + 1);
    }
    uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (!v7)
  {
LABEL_15:
    char v8 = "requires attribute 'replaced_by'";
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  char v10 = (void **)*((void *)Value + 1);
  while (1)
  {
    uint64_t v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9));
    uint64_t v13 = *(void *)this;
    if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == NumNeededNEs) {
      break;
    }
    v9 += 16;
    if (v7 == v9) {
      goto LABEL_15;
    }
  }
  uint64_t v16 = *((void *)v11 + 1);
  uint64_t v17 = 0;
  for (uint64_t i = v7 - v9; i; i -= 16)
  {
    uint64_t v29 = MirInfoChannelAssignment::GetNumNeededNEs(v11);
    uint64_t v13 = *(void *)this;
    if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 24) == v29) {
      uint64_t v17 = *((void *)v11 + 1);
    }
    uint64_t v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(v13, v16, (void **)"replaced_by", (void **)0xB))return 0; {
  if (v10)
  }
  {
    uint64_t v19 = *(void *)this;
    if (*((_UNKNOWN **)*v10 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
      || (unint64_t AttrDictionary = (unint64_t)v10,
          *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
      || (v37[0] = v10,
          *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
    {
      __int16 v38 = 257;
      mlir::Operation::emitOpError(v19, v37, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v40, "attribute '");
        if (AttrDictionary)
        {
          __int16 v38 = 261;
          v37[0] = (void **)"function_type";
          v37[1] = (void **)13;
          mlir::Diagnostic::operator<<((uint64_t)v40, v37);
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v40, "' failed to satisfy constraint: type attribute of function type");
          }
        }
      }
      char v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
      if (!v20) {
        return 0;
      }
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*(void *)this, v6, (void **)"arg_attrs", (void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*(void *)this, v17, (void **)"res_attrs", (void **)9))
  {
    return 0;
  }
  uint64_t v21 = *(void *)this;
  unint64_t v22 = ((*(void *)this
        + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *(unsigned int *)(*(void *)this + 40);
  uint64_t v23 = *(void *)(v22 + 8);
  if (v23 != v22 && *(void *)(v23 + 8) == v22) {
    return 1;
  }
  v37[0] = (void **)"region #";
  __int16 v38 = 259;
  mlir::Operation::emitOpError(v21, v37, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = 0;
    uint64_t v24 = v35;
    unint64_t v25 = v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= (unint64_t)v35 && v41 + 24 * v42 > (unint64_t)v35)
      {
        uint64_t v32 = (char *)v35 - v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v25 = v41;
        uint64_t v24 = (void ***)&v32[v41];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v24 = v35;
        unint64_t v25 = v41;
      }
    }
    unint64_t v26 = v25 + 24 * v42;
    long long v27 = *(_OWORD *)v24;
    *(void *)(v26 + 16) = v24[2];
    *(_OWORD *)unint64_t v26 = v27;
    ++v42;
    BOOL v28 = AttrDictionary == 0;
  }
  else
  {
    BOOL v28 = 1;
  }
  __int16 v34 = 1283;
  v33[0] = " ('";
  unint64_t v33[2] = "body";
  v33[3] = 4;
  v35[0] = (void **)v33;
  unint64_t v35[2] = (void **)"') ";
  __int16 v36 = 770;
  if (!v28)
  {
    mlir::Diagnostic::operator<<((uint64_t)v40, v35);
    if (AttrDictionary) {
      mlir::Diagnostic::operator<<((uint64_t)v40, "failed to verify constraint: region with 1 blocks");
    }
  }
  char v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  return v30 != 0;
}

BOOL mlir::placement::ReplacedOpsLiveOuts::parse(uint64_t a1, uint64_t a2)
{
  v10[16] = *MEMORY[0x263EF8340];
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v7[0] = &v8;
  v7[1] = (void *)0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  BOOL v5 = (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v9, 0, 1, 0xFFFFFFFFLL)&& ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v7)&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v9, (uint64_t)v7, v4, a2 + 16) != 0;
  if (v7[0] != &v8) {
    free(v7[0]);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v5;
}

void mlir::placement::ReplacedOpsLiveOuts::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  uint64_t v6 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v7 = *((unsigned int *)v6 + 17);
    uint64_t v8 = *((void *)v6 + 9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>((uint64_t)a2, v8, 0, v8, v7);
  __int16 v39 = v41;
  uint64_t v40 = 0x200000000;
  uint64_t v9 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v9);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v9 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v12, v39, v40);
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    unsigned char *v14 = 32;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    *uint64_t v16 = 58;
    ++*((void *)v15 + 4);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    *uint64_t v18 = 32;
  }
  uint64_t v19 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v20 = *((unsigned int *)v19 + 17);
    uint64_t v21 = *((void *)v19 + 9);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  v34[0] = v21;
  v34[1] = v20;
  mlir::OperandRange::getTypes(v34, (uint64_t *)&AttrDictionary);
  unint64_t v23 = AttrDictionary;
  uint64_t v22 = v36;
  uint64_t v24 = v37;
  uint64_t v25 = v38;
  if (AttrDictionary != v37 || v36 != v38)
  {
    unint64_t v26 = AttrDictionary + 32 * v36;
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(v26 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23 != v24 || v22 + 1 != v25)
    {
      uint64_t v27 = v25 - v22 - 2;
      BOOL v28 = (uint64_t *)(v26 + 56);
      do
      {
        uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        char v30 = (_WORD *)*((void *)v29 + 4);
        if (*((void *)v29 + 3) - (void)v30 > 1uLL)
        {
          _WORD *v30 = 8236;
          *((void *)v29 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v29, ", ", 2uLL);
        }
        uint64_t v31 = *v28;
        v28 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8);
        BOOL v33 = v27-- != 0;
      }
      while (v23 != v24 || v33);
    }
  }
  if (v39 != v41) {
    free(v39);
  }
}

void mlir::placement::StartTimer::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ZinMirCacheTensors::ZinMirCacheTensors(v7, **(void **)(*(void *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, v7[0], v7[1]);
  uint64_t v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::placement::StartTimer::verifyInvariantsImpl(mlir::placement::StartTimer *this)
{
  v14[23] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)(*(void *)(*(void *)this + 48) + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*(void *)this, Value[1], (void **)"replaced_ops_ref", (void **)0x10))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v8 = *(void *)this - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    uint64_t v11 = (void **)"requires attribute 'replaced_ops_ref'";
    __int16 v12 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v11, (uint64_t)&AttrDictionary);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  v25[19] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id) {
    return 1;
  }
  __int16 v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  mlir::Operation::emitOpError(a1, v15, (uint64_t)&v20);
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)v21, " #");
    if (v20)
    {
      int v18 = 5;
      uint64_t v19 = a5;
      uint64_t v6 = &v18;
      unint64_t v7 = v22;
      if (v23 >= v24)
      {
        unint64_t v13 = v23 + 1;
        if (v22 <= (unint64_t)&v18 && v22 + 24 * v23 > (unint64_t)&v18)
        {
          uint64_t v14 = (char *)&v18 - v22;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          unint64_t v7 = v22;
          uint64_t v6 = (int *)&v14[v22];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          uint64_t v6 = &v18;
          unint64_t v7 = v22;
        }
      }
      unint64_t v8 = v7 + 24 * v23;
      long long v9 = *(_OWORD *)v6;
      *(void *)(v8 + 16) = *((void *)v6 + 2);
      *(_OWORD *)unint64_t v8 = v9;
      ++v23;
      if (v20) {
        mlir::Diagnostic::operator<<((uint64_t)v21, " must be , but got ");
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v20, &v17);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  return v11;
}

uint64_t mlir::placement::TensorToMemrefAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v42[23] = *MEMORY[0x263EF8340];
  uint64_t v40 = *a1;
  uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (**(void **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v5 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        uint64_t v6 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        unint64_t v7 = (void *)*((void *)Value + 1);
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7)) {
        goto LABEL_33;
      }
      uint64_t v8 = *v7;
      unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v10 = *(unsigned int *)(v8 + 16);
      if (!v10) {
        goto LABEL_20;
      }
      uint64_t v11 = *(void **)(v8 + 8);
      __int16 v12 = &v11[2 * v10];
      do
      {
        unint64_t v13 = v10 >> 1;
        uint64_t v14 = &v11[2 * (v10 >> 1)];
        unint64_t v16 = *v14;
        uint64_t v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9) {
          uint64_t v11 = v15;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v10);
      if (v11 != v12 && *v11 == v9) {
        uint64_t v17 = v11[1];
      }
      else {
LABEL_20:
      }
        uint64_t v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      uint64_t v19 = Type;
      if (!Type) {
        goto LABEL_30;
      }
      uint64_t v20 = *Type;
      unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v22 = *(unsigned int *)(v20 + 16);
      if (!v22) {
        goto LABEL_30;
      }
      unsigned int v23 = *(void **)(v20 + 8);
      unsigned int v24 = &v23[2 * v22];
      do
      {
        unint64_t v25 = v22 >> 1;
        unint64_t v26 = &v23[2 * (v22 >> 1)];
        unint64_t v28 = *v26;
        uint64_t v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21) {
          unsigned int v23 = v27;
        }
        else {
          unint64_t v22 = v25;
        }
      }
      while (v22);
      if (v23 != v24 && *v23 == v21) {
        uint64_t v29 = v23[1];
      }
      else {
LABEL_30:
      }
        uint64_t v29 = 0;
      uint64_t v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v41);
      if (v30 != 1
        || (uint64_t v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        uint64_t v32 = "'placement.tensor_to_memref' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v32 = "'placement.tensor_to_memref' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    uint64_t v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    uint64_t v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32)) {
      return 1;
    }
  }
  uint64_t v32 = "'placement.tensor_to_memref' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  __int16 v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::TensorToMemref::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v67 = a6;
  LOBYTE(v68) = 0;
  char v69 = 0;
  uint64_t v70 = a9;
  uint64_t v71 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69) {
      char v69 = 0;
    }
    mlir::OperationName::OperationName(&v68, "placement.tensor_to_memref", 26, Context);
    char v69 = 1;
  }
  BOOL v72 = a4;
  uint64_t v73 = a5;
  if (a5)
  {
    uint64_t v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::TensorToMemrefAdaptor::verify(&v67, v15))
    {
      long long v64 = v72;
      uint64_t v65 = 0;
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&v64, 0);
      v63[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v63[1] = a2;
      if (v63[0])
      {
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v63);
        unint64_t v20 = v18;
        long long v64 = v66;
        uint64_t v65 = 0x500000000;
        size_t v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          unsigned int v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v65) = v22 + (v21 >> 3);
            uint64_t Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            unint64_t v28 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            uint64_t v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(void *)(*(void *)(v68 + 96) + 8));
            if (v30)
            {
              uint64_t v31 = *((void *)v29 + 1);
              if (v31)
              {
                uint64_t v32 = *(void **)(*(void *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t v31 = 0;
                }
                v62[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v62);
                }
              }
            }
            uint64_t v33 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            __int16 v34 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            unint64_t v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(void *)(*(void *)(v68 + 96) + 16));
            if ((v36 & 1) == 0
              || (uint64_t v37 = *((void *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((void *)v35 + 1)))
            {
LABEL_47:
              unint64_t v49 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
              uint64_t v50 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
              uint64_t v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(void **)(v68 + 96));
              if (v52)
              {
                uint64_t v53 = *((void *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v54 = v65;
                    if ((v65 & 0xFFFFFFFE) != 4)
                    {
                      uint64_t v58 = mlir::UnrankedTensorType::get(OperandRange);
                      goto LABEL_55;
                    }
                    uint64_t Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v67);
                    uint64_t v56 = 16;
                    if (v54 == 4) {
                      uint64_t v56 = 8;
                    }
                    uint64_t v57 = (uint64_t *)v64;
                    *(void *)((char *)v64 + v56) *= Interleave;
                    v57[v54 - 1] /= Interleave;
                  }
                }
              }
              uint64_t v58 = mlir::MemRefType::get((uint64_t *)v64, (mlir::AffineMap *)v65, OperandRange, 0, 0, 0);
LABEL_55:
              uint64_t v59 = v58;
              unsigned int v60 = *(_DWORD *)(a11 + 8);
              if (v60 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v60 + 1, 8);
                unsigned int v60 = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v60) = v59;
              ++*(_DWORD *)(a11 + 8);
              if (v64 != v66) {
                free(v64);
              }
              return 1;
            }
            v62[0] = v37;
            v62[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              LOBYTE(Shape) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
            }
            else
            {
              uint64_t RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              uint64_t v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
              unint64_t v20 = NumElements;
              LODWORD(v65) = 0;
              if (NumElements <= HIDWORD(v65))
              {
                unsigned int v42 = 0;
                BOOL v61 = RawStringData == v39 && isSplat == Shape;
                int v44 = v61;
                if (v61 && !NumElements)
                {
LABEL_46:
                  LODWORD(v65) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, NumElements, 8);
                unsigned int v42 = v65;
                BOOL v43 = RawStringData == v39 && isSplat == Shape;
                int v44 = v43;
              }
            }
            else
            {
              int v44 = 0;
              unsigned int v42 = 0;
            }
            uint64_t v45 = 0;
            unsigned int v46 = (char *)v64 + 8 * v42;
            do
            {
              if ((_BYTE)Shape) {
                uint64_t v47 = 0;
              }
              else {
                uint64_t v47 = v45;
              }
              *(void *)&v46[8 * v45] = *(void *)(RawStringData + 8 * v47);
              BOOL v43 = v20 - 1 == v45++;
              if (v43) {
                int v48 = v44;
              }
              else {
                int v48 = 0;
              }
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, (uint64_t)(8 * v18) >> 3, 8);
          unsigned int v22 = v65;
          if (!v20) {
            goto LABEL_17;
          }
        }
        memcpy((char *)v64 + 8 * v22, Shape, v21);
        unsigned int v22 = v65;
        goto LABEL_17;
      }
    }
  }
  uint64_t v23 = mlir::Float32Type::get(this, a2);
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::TensorToMemref::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v27[2] = *MEMORY[0x263EF8340];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  char __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v13 = *a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::TensorToMemref::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v20 = __src;
  }
  uint64_t v21 = v26;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::placement::TensorToMemref::verifyInvariantsImpl(mlir::placement::TensorToMemref *this)
{
  uint64_t v2 = *(unsigned char **)this;
  if (v2[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 56);
  }
  uint64_t Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v4;
    do
    {
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      uint64_t v11 = *(void *)this;
      if (**(void **)(*(void *)(*(void *)this + 48) + 96) == NumNeededNEs)
      {
        uint64_t v6 = (void **)*((void *)Value + 1);
      }
      else
      {
        uint64_t v12 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        uint64_t v11 = *(void *)this;
        if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8) == v12)
        {
          uint64_t v7 = *((void *)Value + 1);
        }
        else
        {
          uint64_t v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          uint64_t v11 = *(void *)this;
          if (*(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16) == v13) {
            uint64_t v8 = (void **)*((void *)Value + 1);
          }
        }
      }
      uint64_t Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v11 = *(void *)this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (void **)"shape", 5)
    || !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*(void *)this, v7, (void **)"resultElementType", (void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*(void *)this, v6, (void **)"interleave", (void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v14 = *(void *)this - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

mlir::Operation *mlir::placement::TensorToMemref::verify(mlir::Operation **this)
{
  v102[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = *this;
  unsigned int v90 = v3;
  uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)v3 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v89[0] = (uint64_t)v4;
  v89[1] = v5;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v90)
    || !v4
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    goto LABEL_23;
  }
  Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v8 -= 8;
      if (!v8) {
        goto LABEL_8;
      }
    }
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v9 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v9, v10);
  uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
  v98[0] = ShapeAttr != 0;
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    uint64_t RawStringData = 0;
    if (isValidIntOrFloat < 2) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v15 = 0;
    unint64_t v14 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    do
    {
      if (isSplat) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v15;
      }
      if (isSplat) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v15 + 1;
      }
      v16 *= *(void *)(RawStringData + 8 * v18);
      v17 *= *(void *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v14);
    uint64_t v2 = v17 * v16;
    goto LABEL_121;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
  unsigned __int8 isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
  if (!isValidIntOrFloat)
  {
    uint64_t v2 = 1;
    goto LABEL_122;
  }
  if (isValidIntOrFloat >= 2) {
    goto LABEL_13;
  }
LABEL_11:
  unint64_t v14 = 0;
  uint64_t v2 = 1;
  do
  {
    if (isSplat) {
      unint64_t v63 = 0;
    }
    else {
      unint64_t v63 = v14;
    }
    v2 *= *(void *)(RawStringData + 8 * v63);
    ++v14;
LABEL_121:
    ;
  }
  while (isValidIntOrFloat != v14);
LABEL_122:
  if (NumElements != v2)
  {
    __int16 v96 = 257;
    mlir::Operation::emitOpError((uint64_t)v3, (void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "Input shape ");
    }
    long long v64 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&ShapeAttr, v89);
    uint64_t v65 = (uint64_t)v64;
    if (*v64)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v64 + 1), " (");
      if (*(void *)v65)
      {
        uint64_t v66 = v65 + 24;
        unint64_t v67 = *(void *)(v65 + 24);
        LODWORD(v86) = 5;
        BOOL v87 = NumElements;
        uint64_t v68 = *(unsigned int *)(v65 + 32);
        char v69 = &v86;
        if (v68 >= *(_DWORD *)(v65 + 36))
        {
          unint64_t v80 = v68 + 1;
          BOOL v81 = v67 + 24 * v68 > (unint64_t)&v86;
          if (v67 <= (unint64_t)&v86 && v81)
          {
            int64_t v84 = (char *)&v86 - v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            unint64_t v67 = *(void *)(v65 + 24);
            char v69 = (void ***)&v84[v67];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            unint64_t v67 = *(void *)(v65 + 24);
            char v69 = &v86;
          }
        }
        uint64_t v70 = v67 + 24 * *(unsigned int *)(v65 + 32);
        long long v71 = *(_OWORD *)v69;
        *(void *)(v70 + 16) = v69[2];
        *(_OWORD *)uint64_t v70 = v71;
        ++*(_DWORD *)(v65 + 32);
        if (*(void *)v65) {
          mlir::Diagnostic::operator<<(v65 + 8, " elements) is not compatible with shape attribute ");
        }
      }
    }
    uint64_t v91 = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    BOOL v92 = v91 != 0;
    BOOL v72 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &v91);
    uint64_t v73 = (uint64_t)v72;
    if (*v72)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v72 + 1), " (");
      if (*(void *)v73)
      {
        uint64_t v74 = v73 + 24;
        unint64_t v75 = *(void *)(v73 + 24);
        LODWORD(v86) = 2;
        BOOL v87 = v2;
        uint64_t v76 = *(unsigned int *)(v73 + 32);
        __int16 v77 = &v86;
        if (v76 >= *(_DWORD *)(v73 + 36))
        {
          unint64_t v82 = v76 + 1;
          BOOL v83 = v75 + 24 * v76 > (unint64_t)&v86;
          if (v75 <= (unint64_t)&v86 && v83)
          {
            __int16 v85 = (char *)&v86 - v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            unint64_t v75 = *(void *)(v73 + 24);
            __int16 v77 = (void ***)&v85[v75];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            unint64_t v75 = *(void *)(v73 + 24);
            __int16 v77 = &v86;
          }
        }
        uint64_t v78 = v75 + 24 * *(unsigned int *)(v73 + 32);
        long long v79 = *(_OWORD *)v77;
        *(void *)(v78 + 16) = v77[2];
        *(_OWORD *)uint64_t v78 = v79;
        ++*(_DWORD *)(v73 + 32);
        if (*(void *)v73) {
          mlir::Diagnostic::operator<<(v73 + 8, " elements)");
        }
      }
    }
    uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v73);
    if (ShapeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v90)
    || !v89[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    return (mlir::Operation *)1;
  }
  unint64_t v20 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_30;
      }
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue((uint64_t)&InterleaveAttr, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v98[0]) >= 0x41) {
      p_uint64_t ShapeAttr = (uint64_t *)ShapeAttr;
    }
    else {
      p_uint64_t ShapeAttr = &ShapeAttr;
    }
    uint64_t v24 = *(unsigned int *)p_ShapeAttr;
    if (LODWORD(v98[0]) >= 0x41 && ShapeAttr) {
      MEMORY[0x21667D390]();
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    __int16 v96 = 257;
    mlir::Operation::emitOpError((uint64_t)v3, (void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "interleave factor not supported");
    }
    uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
  InterleaveAttr = v95;
  uint64_t v94 = 0x400000000;
  if (mlir::placement::MemrefToTensor::getShapeAttr(&v90))
  {
    uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v98[0] = ShapeAttr != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0))
    {
      uint64_t v26 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
      unsigned __int8 isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
      mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v86 = (void **)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    BOOL v87 = v86 != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&v86, 8, 1, 0))
    {
      uint64_t v34 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v86);
      int v35 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v86);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      unint64_t v36 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v86);
      uint64_t v2 = v36;
      LODWORD(v94) = 0;
      if (v36 <= HIDWORD(v94))
      {
        unsigned int v37 = 0;
        BOOL v58 = v26 == v34 && v35 == isSplat;
        int v39 = v58;
        if (v58 && !v36)
        {
LABEL_70:
          unsigned int v33 = v37 + v2;
          goto LABEL_71;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v36, 8);
        unsigned int v37 = v94;
        BOOL v38 = v26 == v34 && v35 == isSplat;
        int v39 = v38;
      }
    }
    else
    {
      int v39 = 0;
      unsigned int v37 = 0;
    }
    uint64_t v40 = 0;
    uint64_t v41 = (char *)InterleaveAttr + 8 * v37;
    do
    {
      if (isSplat) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v40;
      }
      *(void *)&v41[8 * v40] = *(void *)(v26 + 8 * v42);
      BOOL v38 = v2 - 1 == v40++;
      if (v38) {
        int v43 = v39;
      }
      else {
        int v43 = 0;
      }
    }
    while (v43 != 1);
    goto LABEL_70;
  }
  uint64_t v27 = (unsigned char *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  uint64_t v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  unsigned int v29 = 0;
  uint64_t v31 = (unsigned char *)(v28 + 8 * v30);
  LODWORD(v94) = 0;
  unint64_t v32 = (v31 - v27) >> 3;
  if (v32 > HIDWORD(v94))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v32, 8);
    unsigned int v29 = v94;
  }
  if (v31 != v27)
  {
    memcpy((char *)InterleaveAttr + 8 * v29, v27, v31 - v27);
    unsigned int v29 = v94;
  }
  unsigned int v33 = v29 + ((unint64_t)(v31 - v27) >> 3);
LABEL_71:
  LODWORD(v94) = v33;
  uint64_t v44 = v33;
  if ((unint64_t)v33 - 6 > 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v86 = (void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
    if (v86)
    {
      mlir::IntegerAttr::getValue((uint64_t)&v86, (llvm::APInt *)&ShapeAttr);
      if (LODWORD(v98[0]) >= 0x41) {
        uint64_t v45 = (uint64_t *)ShapeAttr;
      }
      else {
        uint64_t v45 = &ShapeAttr;
      }
      uint64_t v46 = *(unsigned int *)v45;
      if (LODWORD(v98[0]) >= 0x41 && ShapeAttr) {
        MEMORY[0x21667D390](ShapeAttr);
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    if (!(*((void *)InterleaveAttr + v44 - 1) % v46))
    {
      int v56 = 1;
      goto LABEL_93;
    }
    __int16 v88 = 257;
    mlir::Operation::emitOpError((uint64_t)v3, &v86, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v98, "width ");
      if (ShapeAttr)
      {
        uint64_t v47 = *((void *)InterleaveAttr + v44 - 1);
        LODWORD(v91) = 2;
        BOOL v92 = v47;
        int v48 = &v91;
        unint64_t v49 = v99;
        if (v100 >= v101)
        {
          unint64_t v59 = v100 + 1;
          if (v99 <= (unint64_t)&v91 && v99 + 24 * v100 > (unint64_t)&v91)
          {
            BOOL v61 = (char *)&v91 - v99;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            unint64_t v49 = v99;
            int v48 = (uint64_t *)&v61[v99];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            int v48 = &v91;
            unint64_t v49 = v99;
          }
        }
        unint64_t v50 = v49 + 24 * v100;
        long long v51 = *(_OWORD *)v48;
        *(void *)(v50 + 16) = v48[2];
        *(_OWORD *)unint64_t v50 = v51;
        ++v100;
        if (ShapeAttr)
        {
          mlir::Diagnostic::operator<<((uint64_t)v98, " must be a multiple of interleave ");
          if (ShapeAttr)
          {
            LODWORD(v91) = 2;
            BOOL v92 = v46;
            char v52 = &v91;
            unint64_t v53 = v99;
            if (v100 >= v101)
            {
              unint64_t v60 = v100 + 1;
              if (v99 <= (unint64_t)&v91 && v99 + 24 * v100 > (unint64_t)&v91)
              {
                uint64_t v62 = (char *)&v91 - v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                unint64_t v53 = v99;
                char v52 = (uint64_t *)&v62[v99];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                char v52 = &v91;
                unint64_t v53 = v99;
              }
            }
            unint64_t v54 = v53 + 24 * v100;
            long long v55 = *(_OWORD *)v52;
            *(void *)(v54 + 16) = v52[2];
            *(_OWORD *)unint64_t v54 = v55;
            ++v100;
          }
        }
      }
    }
  }
  else
  {
    __int16 v88 = 257;
    mlir::Operation::emitOpError((uint64_t)v3, &v86, (uint64_t)&ShapeAttr);
    if (ShapeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "Interleave can only be applied on 4D or 5D tensor");
    }
  }
  uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
  if (ShapeAttr) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
  int v56 = 0;
LABEL_93:
  if (InterleaveAttr != v95) {
    free(InterleaveAttr);
  }
  if (v56) {
    return (mlir::Operation *)1;
  }
  return v3;
}

uint64_t mlir::placement::anonymous namespace'::isCompatibleMemrefTensorOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 1;
  if (a2 && a4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 - 1;
    uint64_t v9 = a4 - 1;
    while (1)
    {
      uint64_t v10 = (uint64_t *)mlir::TypeRange::dereference_iterator(a1, v7);
      uint64_t v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v7);
      v23[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v10);
      v23[1] = v12;
      uint64_t v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v11);
      v22[0] = v13;
      v22[1] = v14;
      BOOL v15 = !v23[0] || v13 == 0;
      if (v15) {
        break;
      }
      Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v23);
      uint64_t v18 = v17;
      uint64_t v19 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
      if (v18 != v20 || memcmp(Shape, v19, 8 * v18)) {
        break;
      }
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
      BOOL v15 = OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
      uint64_t result = v15;
      if (v15 && v8 != v7)
      {
        BOOL v15 = v9 == v7++;
        if (!v15) {
          continue;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::MemrefToTensor::fold(mlir::Operation **a1)
{
  uint64_t v12 = *(void *)(*((void *)*a1 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v3 = DefiningOp;
  uint64_t v4 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
  uint64_t v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
     ? (mlir::Operation *)DefiningOp
     : 0;
  uint64_t v13 = v6;
  if (!v5) {
    return 0;
  }
  unint64_t v8 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*a1 + 9)) {
    uint64_t v9 = (uint64_t)*a1 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0);
  uint64_t result = 0;
  if (v8 == (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(a1);
    if (InterleaveAttr == mlir::placement::MemrefToTensor::getInterleaveAttr(&v13)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(a1)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v13))
    {
      return *(void *)(*(void *)(v3 + 72) + 24) | 4;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::ReplacedOps::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 24));
}

uint64_t mlir::placement::RegionCall::verifySymbolUses(mlir::placement::RegionCall *this, mlir::SymbolTableCollection *a2)
{
  v74[23] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"callee", 6), v6))
  {
    uint64_t v7 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = mlir::DictionaryAttr::get(v4 + 56, "callee", 6uLL);
    if (!v7)
    {
LABEL_10:
      uint64_t v11 = "requires a 'callee' symbol reference attribute";
      goto LABEL_11;
    }
  }
  unint64_t v8 = *(void **)(*(void *)v7 + 136);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v73 = v10;
  if (!v9) {
    goto LABEL_10;
  }
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v73);
  uint64_t v15 = v14 ? 0 : v7;
  uint64_t v69 = v15;
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *(mlir::SymbolTable **)this, v15);
  if (!v16)
  {
    __int16 v68 = 257;
    mlir::OpState::emitOpError((uint64_t *)this, v67, (uint64_t)&v73);
    if (v73) {
      mlir::Diagnostic::operator<<((uint64_t)v74, "'");
    }
    uint64_t Value = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69);
    uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    if (!v73) {
      goto LABEL_75;
    }
    __int16 v72 = 261;
    uint64_t Value = AttrData;
    uint64_t v71 = v28;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73) {
      goto LABEL_75;
    }
    unsigned int v29 = "' does not reference a valid function";
    goto LABEL_74;
  }
  uint64_t v17 = v16;
  uint64_t v18 = *(void **)(*(void *)(v16 + 48) + 16);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    int v26 = 1;
  }
  else if (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    int v26 = 0;
  }
  else
  {
    int v26 = 2 * (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id);
  }
  if (*(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8) != v26)
  {
    __int16 v68 = 257;
    mlir::OpState::emitOpError((uint64_t *)this, v67, (uint64_t)&v73);
    if (v73) {
      mlir::Diagnostic::operator<<((uint64_t)v74, "failed: callee of type '");
    }
    if (v73)
    {
      BOOL v38 = (void **)(&off_26418D0D8)[v26];
      __int16 v72 = 261;
      uint64_t Value = v38;
      uint64_t v71 = 3;
      mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
      if (v73) {
        mlir::Diagnostic::operator<<((uint64_t)v74, "' does not match the call region type ('");
      }
    }
    uint64_t v39 = *(int *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8);
    if (v39 > 2)
    {
      uint64_t v41 = 0;
      uint64_t v40 = &byte_211F4AA5D;
    }
    else
    {
      uint64_t v40 = (&off_26418D0D8)[v39];
      uint64_t v41 = 3;
    }
    if (!v73) {
      goto LABEL_75;
    }
    __int16 v72 = 261;
    uint64_t Value = (void **)v40;
    uint64_t v71 = v41;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73) {
      goto LABEL_75;
    }
    unsigned int v29 = "')";
LABEL_74:
    mlir::Diagnostic::operator<<((uint64_t)v74, v29);
LABEL_75:
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    goto LABEL_13;
  }
  v66[0] = v17;
  v66[1] = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v17);
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v66);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    if (!Kind) {
      goto LABEL_55;
    }
LABEL_105:
    uint64_t v11 = "incorrect number of operands for callee";
    goto LABEL_11;
  }
  if (Kind != *(_DWORD *)(*(void *)this + 68)) {
    goto LABEL_105;
  }
LABEL_55:
  int v31 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if (v31)
  {
    unint64_t v32 = 0;
    int v33 = v31;
    uint64_t v34 = 24;
    while (1)
    {
      unint64_t v35 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (void)v32) != v35) {
        break;
      }
      unint64_t v32 = (void **)((char *)v32 + 1);
      v34 += 32;
      if (v33 == v32) {
        goto LABEL_59;
      }
    }
    uint64_t Value = (void **)"operand type mismatch: expected operand type ";
    __int16 v72 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &Value, (uint64_t)&v73);
    uint64_t v64 = *(void *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (void)v32);
    uint64_t v42 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v73, &v64);
    uint64_t v43 = (uint64_t)v42;
    if (*v42) {
      mlir::Diagnostic::operator<<((uint64_t)(v42 + 1), ", but provided ");
    }
    unint64_t v63 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>(v43, (uint64_t *)&v63);
    uint64_t v45 = (uint64_t)v44;
    if (*v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v44 + 1), " for operand number ");
      if (*(void *)v45)
      {
        uint64_t v46 = v45 + 24;
        unint64_t v47 = *(void *)(v45 + 24);
        LODWORD(v67[0]) = 5;
        v67[1] = v32;
        uint64_t v48 = *(unsigned int *)(v45 + 32);
        unint64_t v49 = v67;
        if (v48 >= *(_DWORD *)(v45 + 36))
        {
          unint64_t v60 = v48 + 1;
          BOOL v61 = v47 + 24 * v48 > (unint64_t)v67;
          if (v47 <= (unint64_t)v67 && v61)
          {
            uint64_t v62 = (char *)v67 - v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            unint64_t v47 = *(void *)(v45 + 24);
            unint64_t v49 = (void ***)&v62[v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            unint64_t v47 = *(void *)(v45 + 24);
            unint64_t v49 = v67;
          }
        }
        uint64_t v50 = v47 + 24 * *(unsigned int *)(v45 + 32);
        long long v51 = *(_OWORD *)v49;
        *(void *)(v50 + 16) = v49[2];
        *(_OWORD *)uint64_t v50 = v51;
        ++*(_DWORD *)(v45 + 32);
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v45);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    goto LABEL_13;
  }
LABEL_59:
  if (mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands) == *(_DWORD *)(*(void *)this + 36))
  {
    uint64_t NumResults = mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands);
    if (NumResults)
    {
      uint64_t v12 = NumResults;
      unint64_t v37 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) == v37)
      {
        if (v12 == 1) {
          return v12;
        }
        unint64_t v52 = *(void *)(*(void *)this - 24) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8) == v52)
        {
          if (v12 == 2) {
            return 1;
          }
          unint64_t v53 = *(void *)(*(void *)this - 40) & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 16) == v53)
          {
            if (v12 == 3) {
              return 1;
            }
            unint64_t v54 = *(void *)(*(void *)this - 56) & 0xFFFFFFFFFFFFFFF8;
            if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 24) == v54)
            {
              if (v12 == 4) {
                return 1;
              }
              unint64_t v55 = *(void *)(*(void *)this - 72) & 0xFFFFFFFFFFFFFFF8;
              if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 32) == v55)
              {
                if (v12 == 5) {
                  return 1;
                }
                unint64_t v56 = *(void *)(*(void *)this - 88) & 0xFFFFFFFFFFFFFFF8;
                if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 40) == v56)
                {
                  int v57 = v12 - 6;
                  if (v12 == 6) {
                    return 1;
                  }
                  uint64_t v58 = 0;
                  while (1)
                  {
                    unint64_t v59 = *(void *)(*(void *)this - 24 * (v58 + 1) - 88) & 0xFFFFFFFFFFFFFFF8;
                    if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8 * v58 + 48) != v59) {
                      break;
                    }
                    ++v58;
                    uint64_t v12 = 1;
                    if (v57 == v58) {
                      return v12;
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t Value = (void **)"result type mismatch";
      __int16 v72 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, &Value, (uint64_t)&v73);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v73);
      return v12;
    }
    return 1;
  }
  uint64_t v11 = "incorrect number of results for callee";
LABEL_11:
  uint64_t Value = (void **)v11;
  __int16 v72 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &Value, (uint64_t)&v73);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
  if (v73) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
  }
LABEL_13:
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v74);
  return v12;
}

float mlir::placement::RegionCall::getExecutionCost(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"callee", 6), !v4)) {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "callee", 6uLL);
  }
  uint64_t v5 = InherentAttr;
  if (InherentAttr)
  {
    char v6 = *(void **)(*(void *)InherentAttr + 136);
    BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
      unint64_t v8 = (float *)InherentAttr;
    }
    else {
      unint64_t v8 = 0;
    }
    v22[0] = v8;
    if (v7)
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v22);
      if (v9) {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  uint64_t ParentOp = (mlir::Block *)*a1;
  do
  {
    uint64_t ParentOp = (mlir::Block *)*((void *)ParentOp + 2);
    if (!ParentOp) {
      break;
    }
    uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (!ParentOp) {
      break;
    }
  }
  while (*(_UNKNOWN **)(*((void *)ParentOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  mlir::SymbolTable::lookupSymbolIn((uint64_t)ParentOp, v5);
  float v25 = 0.0;
  int v11 = *(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)a1) + 8);
  if (v11)
  {
    float result = 0.0;
    if (v11 == 1) {
      return 0.0008;
    }
  }
  else
  {
    int v24 = 1317060348;
    int v23 = 1132462080;
    v22[0] = &v25;
    v22[1] = (float *)&v23;
    void v22[2] = (float *)&v24;
    uint64_t v13 = *a1;
    if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0)
    {
      uint64_t v14 = *(unsigned int *)(v13 + 68);
      if (v14)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v13 + 72) + 24);
        do
        {
          uint64_t v16 = *v15;
          v15 += 4;
          mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, v16);
          --v14;
        }
        while (v14);
        uint64_t v13 = *a1;
      }
    }
    uint64_t v17 = *(unsigned int *)(v13 + 36);
    uint64_t v18 = v13 - 16;
    if (v17) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v17)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
        mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, NextResultAtOffset);
      }
    }
    return v25;
  }
  return result;
}

float mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(float **a1, uint64_t a2)
{
  char v3 = (uint64_t *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = *v3;
  unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v6 = *(unsigned int *)(v4 + 16);
  if (!v6) {
    goto LABEL_10;
  }
  BOOL v7 = *(void **)(v4 + 8);
  unint64_t v8 = &v7[2 * v6];
  do
  {
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = &v7[2 * (v6 >> 1)];
    unint64_t v12 = *v10;
    int v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5) {
      BOOL v7 = v11;
    }
    else {
      unint64_t v6 = v9;
    }
  }
  while (v6);
  if (v7 != v8 && *v7 == v5) {
    uint64_t v13 = v7[1];
  }
  else {
LABEL_10:
  }
    uint64_t v13 = 0;
  v22[0] = v3;
  v22[1] = v13;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22))
  {
LABEL_17:
    float v20 = 32768.0;
    goto LABEL_18;
  }
  Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v16 -= 8;
      if (!v16) {
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  unsigned int v17 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
  uint64_t v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
  float v20 = (float)v17 * (float)mlir::ShapedType::getNumElements(v18, v19);
LABEL_18:
  float result = (float)((float)(v20 / *a1[1]) / *a1[2]) + **a1;
  **a1 = result;
  return result;
}

void mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::MemrefToTensor>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::RegionCall>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::placement::TensorToMemref>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(void *a1, uint64_t a2)
{
  v13[6] = *MEMORY[0x263EF8340];
  int v11 = v13;
  uint64_t v12 = 0x300000000;
  uint64_t v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::ANEIOCast>::getEffects;
  unint64_t v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.ane_io_cast", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id, (uint64_t)&v11);
  unint64_t v6 = v11;
  if (v12)
  {
    uint64_t v7 = 16 * v12;
    unint64_t v8 = (void **)((char *)v11 + 8);
    do
    {
      unint64_t v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    unint64_t v6 = v11;
  }
  if (v6 != v13) {
    free(v6);
  }
  *a1 = &unk_26C322448;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v11 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        unint64_t v8 = v10;
      }
      else {
        unint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  BOOL v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        unint64_t v8 = v10;
      }
      else {
        unint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase((uint64_t)v13, this);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v12 = *(void *)(*((void *)this + 9) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
      && (uint64_t v9 = *(void *)(*(void *)(result + 72) + 24),
          (*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((void *)this - 1) & 0xFFFFFFFFFFFFFFF8))
      && (uint64_t v10 = v9 | 4, (v9 | 4uLL) >= 8))
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v11 = 104;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[318];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::placement::ANEIOCast::verify((mlir::placement::ANEIOCast *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(a1, (void **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36)) {
    uint64_t v6 = a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(a1, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HostTypeConversion<Empty>]";
      unint64_t v11 = 90;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[90];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9)) {
    uint64_t v6 = (uint64_t)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return 1;
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneResult<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::placement::MemrefToTensor>,mlir::OpTrait::ZeroSuccessors<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneOperand<mlir::placement::MemrefToTensor>,mlir::OpTrait::OpInvariants<mlir::placement::MemrefToTensor>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::OpTrait::HostTypeConversion<mlir::placement::MemrefToTensor>,mlir::InferTypeOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::MemrefToTensor>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::MemrefToTensor::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v23[23] = *MEMORY[0x263EF8340];
  uint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8; {
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  }
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  {
    uint64_t v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.memref_to_tensor";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    uint64_t v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    uint64_t v13 = 0;
  }
LABEL_9:
  if (v19 != v21) {
    free(v19);
  }
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::placement::MemrefToTensor::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      unint64_t v11 = 110;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[431];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::placement::MemrefToTensor::verifyInvariantsImpl((mlir::placement::MemrefToTensor *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::MemrefToTensor::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::RegionCall>,mlir::OpTrait::VariadicResults<mlir::placement::RegionCall>,mlir::OpTrait::ZeroSuccessors<mlir::placement::RegionCall>,mlir::OpTrait::VariadicOperands<mlir::placement::RegionCall>,mlir::OpTrait::OpInvariants<mlir::placement::RegionCall>,mlir::OpTrait::RegionOp<mlir::placement::RegionCall>,mlir::SymbolUserOpInterface::Trait<mlir::placement::RegionCall>,mlir::MinimumAlignmentInterface::Trait<mlir::placement::RegionCall>,mlir::ExecutionCostOpInterface::Trait<mlir::placement::RegionCall>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolUserOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v4 = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment;
  v4[1] = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment;
  unint64_t v5 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v6 = mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost;
  unint64_t v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses(int a1, uint64_t a2, mlir::SymbolTableCollection *a3)
{
  uint64_t v4 = a2;
  return mlir::placement::RegionCall::verifySymbolUses((mlir::placement::RegionCall *)&v4, a3);
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface>()
{
  uint64_t v0 = &unk_267772000;
  {
    uint64_t v0 = (void *)&unk_267772000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      unint64_t v11 = 77;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      unint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267772000;
    }
  }
  return v0[53];
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment()
{
  return 0x4000;
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment()
{
  return 0x4000;
}

float mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::placement::RegionCall::getExecutionCost(&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>()
{
  uint64_t v0 = &unk_267771000;
  {
    uint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v11 = 87;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[437];
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>()
{
  uint64_t v0 = &unk_267772000;
  {
    uint64_t v0 = (void *)&unk_267772000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      unint64_t v11 = 91;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = (void *)&unk_267772000;
    }
  }
  return v0[57];
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface::Trait<Empty>]";
      unint64_t v11 = 95;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[98];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
  {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::placement::RegionCall::verifyInvariantsImpl((mlir::placement::RegionCall *)&v5) != 0;
}

uint64_t mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOps::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::printAssembly(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  void *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes;
  unint64_t v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr;
  unint64_t v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);

  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>((uint64_t)a1);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::anec::A11Legacy::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::placement::ReplacedOps::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(void **)(*(void *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 24));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  do
  {
    unint64_t v7 = v4 >> 1;
    __int16 v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    char v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      unint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != (void *)v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_9:
  }
    uint64_t v11 = 0;
  v2[5] = v11;
  unint64_t v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)a1 + 16 * v13;
  do
  {
    unint64_t v16 = v13 >> 1;
    uint64_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    uint64_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      uint64_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != (void *)v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_18:
  }
    uint64_t v20 = 0;
  v2[6] = v20;
  unint64_t v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();

  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v11);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  uint64_t v10 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v10);
  mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  uint64_t FunctionTypeAttr = *(void *)(*(void *)(*((void *)a2 + 6) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
  mlir::function_interface_impl::printFunctionOp(a3, (uint64_t)a2, InterfaceFor, 0, AttrData, v9, **(void **)(*((void *)a2 + 6) + 96), *(void *)(*(void *)(*((void *)a2 + 6) + 96) + 24));
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(mlir::Operation *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && (uint64_t v8 = a1, mlir::placement::ReplacedOps::verifyInvariantsImpl((mlir::placement::ReplacedOps *)&v8))
    && mlir::detail::verifySymbol(a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(mlir::Operation *a1)
{
  v58[19] = *MEMORY[0x263EF8340];
  long long v51 = a1;
  uint64_t ArgAttrsAttr = mlir::anec::A11Legacy::getArgAttrsAttr(&v51);
  if (ArgAttrsAttr)
  {
    uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v51);
    uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    unsigned int v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    uint64_t v3 = v2;
    if (v4 != v2)
    {
      __int16 v49 = 257;
      mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_59;
      }
      LODWORD(v52) = 5;
      *((void *)&v52 + 1) = v28;
      unsigned int v29 = (char *)&v52;
      unint64_t v30 = v55;
      if (v56 < v57) {
        goto LABEL_50;
      }
      unint64_t v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52) {
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        uint64_t v5 = v5;
        if (!v6) {
          break;
        }
        if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
          uint64_t v6 = 0;
        }
        uint64_t v47 = v6;
        if (!v6) {
          goto LABEL_65;
        }
        uint64_t Value = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        uint64_t v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (long long *)v8)
        {
          uint64_t v9 = (long long *)v8;
          do
          {
            long long v52 = *Value;
            uint64_t FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
            uint64_t AttrData = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (unint64_t v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              uint64_t v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            uint64_t NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, mlir::Operation *, void, void, void, void))(*(void *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((void *)&v52 + 1)))return 0; {
            }
              }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if (v5 == v2) {
          goto LABEL_19;
        }
      }
      uint64_t v47 = 0;
LABEL_65:
      __int16 v49 = 257;
      mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
LABEL_19:
  uint64_t ArgAttrsAttr = mlir::placement::ReplacedOps::getResAttrsAttr(&v51);
  if (!ArgAttrsAttr) {
    goto LABEL_37;
  }
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v51);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  unsigned int v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  uint64_t v3 = v16;
  if (v17 != v16)
  {
    __int16 v49 = 257;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_59;
    }
    LODWORD(v52) = 5;
    *((void *)&v52 + 1) = v32;
    unsigned int v29 = (char *)&v52;
    unint64_t v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      unint64_t v33 = v30 + 24 * v56;
      long long v34 = *(_OWORD *)v29;
      *(void *)(v33 + 16) = *((void *)v29 + 2);
      *(_OWORD *)unint64_t v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((void *)&v52 + 1) = v3;
          unint64_t v35 = (char *)&v52;
          unint64_t v36 = v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              uint64_t v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v36 = v55;
              unint64_t v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v35 = (char *)&v52;
              unint64_t v36 = v55;
            }
          }
          unint64_t v37 = v36 + 24 * v56;
          long long v38 = *(_OWORD *)v35;
          *(void *)(v37 + 16) = *((void *)v35 + 2);
          *(_OWORD *)unint64_t v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      }
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    unint64_t v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      unsigned int v29 = (char *)&v52;
      unint64_t v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    uint64_t v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    unint64_t v30 = v55;
    unsigned int v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      uint64_t v5 = v5;
      if (!v18) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
        uint64_t v18 = 0;
      }
      uint64_t v47 = v18;
      if (!v18) {
        goto LABEL_68;
      }
      unint64_t v19 = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      uint64_t v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (long long *)v20)
      {
        unint64_t v21 = (long long *)v20;
        while (1)
        {
          long long v52 = *v19;
          uint64_t FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
          uint64_t v22 = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23) {
            break;
          }
          int v24 = v22;
          float v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1) {
            break;
          }
          uint64_t v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, mlir::Operation *, void, void, void, void))(*(void *)v26 + 88))(v26, v51, 0, v5, v52, *((void *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21) {
            goto LABEL_36;
          }
        }
        uint64_t v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if (v5 == v16) {
        goto LABEL_37;
      }
    }
    uint64_t v47 = 0;
LABEL_68:
    __int16 v49 = 257;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_71;
    }
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(void *)&long long v52 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    uint64_t v42 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    uint64_t v43 = (uint64_t)v42;
    if (*v42) {
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    }
    if (FunctionTypeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    }
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    uint64_t v39 = "expects one region";
LABEL_58:
    v48[0] = (void **)v39;
    __int16 v49 = 259;
    mlir::OpState::emitOpError((uint64_t *)&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody(&v51);
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::foldHook()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  unint64_t v4 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v4 & 4) != 0)
    {
      if ((v4 & 2) != 0) {
        unsigned int v1 = (llvm *)v3;
      }
      else {
        unsigned int v1 = v3[0];
      }
      (*(void (**)(llvm *))((v4 & 0xFFFFFFFFFFFFFFF8) + 16))(v1);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v3[0], v3[1]);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  BOOL v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        uint64_t v8 = v10;
      }
      else {
        uint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOpsLiveOuts::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  char v8 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10;
      }
      else {
        uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10[0];
      }
      (*(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v5, v6, v7);
    }
    if ((v8 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::placement::ReplacedOpsLiveOuts::print(&v7, a3);
}

BOOL mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleT"
            "ype>::Impl<Empty>]";
      unint64_t v11 = 126;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v0[112];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::StartTimer::verifyInvariantsImpl((mlir::placement::StartTimer *)&v7);
}

uint64_t mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                         + 2) & 0xFFFFFFFFFFFFFFF8)
                                       + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = (uint64_t *)v7;
      }
      else {
        uint64_t v5 = (uint64_t *)v7[0];
      }
      (*(void (**)(uint64_t *, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0) {
        uint64_t v7 = v8;
      }
      else {
        uint64_t v7 = (llvm **)v8[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6((uint64_t)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x263EF8340];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::TensorToMemref>,mlir::OpTrait::OneResult<mlir::placement::TensorToMemref>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::placement::TensorToMemref>,mlir::OpTrait::ZeroSuccessors<mlir::placement::TensorToMemref>,mlir::OpTrait::OneOperand<mlir::placement::TensorToMemref>,mlir::OpTrait::OpInvariants<mlir::placement::TensorToMemref>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::OpTrait::HostTypeConversion<mlir::placement::TensorToMemref>,mlir::InferTypeOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::TensorToMemref>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::getEffects;
  unint64_t v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  unint64_t v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  unint64_t v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();

  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::TensorToMemref::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v23[23] = *MEMORY[0x263EF8340];
  unint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  if (!mlir::placement::TensorToMemref::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8; {
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  }
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  {
    uint64_t v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.tensor_to_memref";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    uint64_t v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    uint64_t v13 = 0;
  }
LABEL_9:
  if (v19 != v21) {
    free(v19);
  }
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::placement::TensorToMemref::verifyInvariantsImpl((mlir::placement::TensorToMemref *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::TensorToMemref::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v24, 0, sizeof(v24));
  uint64_t v22 = v24;
  int v23 = 0;
  uint64_t v11 = a1;
  uint64_t v12 = v14;
  uint64_t v13 = 0x300000000;
  unint64_t v16 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v15[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v17 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSD_6detail21RegionTypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v18 = &v10;
  unint64_t v19 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  uint64_t v20 = &v9;
  unint64_t v21 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (uint64_t)&v11);
  char v3 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        uint64_t v4 = v15;
      }
      else {
        uint64_t v4 = (llvm **)v15[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v5 = v12;
  if (v13)
  {
    uint64_t v6 = 16 * v13;
    uint64_t v7 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v12;
  }
  if (v5 != v14) {
    free(v5);
  }
  mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unsigned int v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v7);
}

void mlir::Dialect::addType<mlir::placement::TimerHandleType>(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v24, 0, sizeof(v24));
  uint64_t v22 = v24;
  int v23 = 0;
  uint64_t v11 = a1;
  uint64_t v12 = v14;
  uint64_t v13 = 0x300000000;
  unint64_t v16 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v15[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v17 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSD_6detail22TimerHandleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v18 = &v10;
  unint64_t v19 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v20 = &v9;
  unint64_t v21 = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (uint64_t)&v11);
  char v3 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        uint64_t v4 = v15;
      }
      else {
        uint64_t v4 = (llvm **)v15[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v5 = v12;
  if (v13)
  {
    uint64_t v6 = 16 * v13;
    unsigned int v7 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v12;
  }
  if (v5 != v14) {
    free(v5);
  }
  mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  mlir::StorageUniquer::registerParametricStorageTypeImpl();
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unint64_t v2 = *(void *)(a2 + 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unint64_t v7 = v2;
  char v9 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v7);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = a4;
  v17[0] = a2;
  v17[1] = a3;
  unsigned int v16 = *a5;
  uint64_t v6 = &unk_267770000;
  {
    uint64_t v13 = a1;
    uint64_t v6 = &unk_267770000;
    int v10 = v9;
    uint64_t v5 = a4;
    a1 = v13;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      uint64_t v6 = (void *)&unk_267770000;
      uint64_t v5 = a4;
      a1 = v13;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * (v6[385] ^ v16 ^ ((0x9DDFEA08EB382D69 * (((8 * v16) | 4) ^ v6[385] ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                              * (((8 * v16) | 4) ^ v6[385] ^ v16)));
  v14[0] = &v16;
  v14[1] = v17;
  unsigned int v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v7 >> 47) ^ v7), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::placement::detail::RegionTypeAttrStorage::construct(a2, *(int **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::placement::detail::RegionTypeAttrStorage::construct(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(void *)(a1 + 80) += 16;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 16;
  *(void *)unint64_t result = 0;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  unint64_t v17 = *a5;
  uint64_t v6 = &unk_267770000;
  {
    uint64_t v14 = a1;
    uint64_t v6 = &unk_267770000;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      uint64_t v6 = (void *)&unk_267770000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  unint64_t v7 = v6[385] ^ HIDWORD(v17);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * v17 + 8) ^ v7);
  v15[0] = &v17;
  v15[1] = v18;
  unsigned int v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v3 = mlir::placement::detail::TimerHandleTypeStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::placement::detail::TimerHandleTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(a1 + 80) += 16;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t result = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = result + 2;
  void *result = 0;
  result[1] = v3;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::AsmParser::parseInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  v10[23] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = mlir::AsmParser::parseOptionalInteger<unsigned long long>(a1, a2);
  if ((unsigned __int16)v5 <= 0xFFu)
  {
    unint64_t v7 = "expected integer value";
    __int16 v8 = 259;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v9, a1, v4, &v7);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v9);
    if (v9) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v9);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v10);
  }
  return v5;
}

uint64_t mlir::AsmParser::parseOptionalInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v18 = 1;
  unint64_t v17 = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 352))(a1, &v17);
  if (v5 < 0x100u || v5 == 0)
  {
    unsigned __int8 v7 = v5;
    int v8 = HIBYTE(v5);
    goto LABEL_26;
  }
  llvm::APInt::sextOrTrunc((uint64_t)&v17, 0x40u, (uint64_t)&v19);
  unsigned int v9 = v20[0];
  if (v20[0] >= 0x41)
  {
    unsigned int v11 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v19);
    unint64_t v12 = v19;
    if (v11 <= 0x40)
    {
      *a2 = *v19;
    }
    else
    {
      uint64_t v10 = -1;
      *a2 = -1;
      if (!v12) {
        goto LABEL_14;
      }
    }
    MEMORY[0x21667D390]();
    uint64_t v10 = *a2;
  }
  else
  {
    uint64_t v10 = (uint64_t)v19;
    *a2 = (uint64_t)v19;
  }
LABEL_14:
  v20[0] = v18;
  if (v18 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19);
  }
  if (v18) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
  }
  else {
    unint64_t v13 = 0;
  }
  unint64_t v19 = (void *)(v13 & v10);
  if (v19 == v17)
  {
    unsigned __int8 v7 = 1;
  }
  else
  {
    unsigned int v15 = "integer value too large";
    __int16 v16 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v19, a1, v4, &v15);
    if (v19) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
    unsigned __int8 v7 = 0;
  }
  int v8 = 1;
LABEL_26:
  if (v18 >= 0x41 && v17) {
    MEMORY[0x21667D390](v17, 0x1000C8000313F17);
  }
  return v7 | (v8 << 8);
}

uint64_t mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unsigned int v11 = (llvm::raw_ostream *)result;
  if (a2 != a4 || a3 != a5)
  {
    uint64_t v12 = a2 + 32 * a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 160))(a1, *(void *)(v12 + 24));
    if (a2 != a4 || a3 + 1 != a5)
    {
      uint64_t v13 = a5 - a3 - 2;
      uint64_t v14 = (uint64_t *)(v12 + 56);
      do
      {
        uint64_t v15 = v13;
        __int16 v16 = (_WORD *)*((void *)v11 + 4);
        if (*((void *)v11 + 3) - (void)v16 > 1uLL)
        {
          *__int16 v16 = 8236;
          *((void *)v11 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v11, ", ", 2uLL);
        }
        uint64_t v17 = *v14;
        v14 += 4;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v17);
        uint64_t v13 = v15 - 1;
      }
      while (a2 != a4 || v15);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void mlir::detail::PDLByteCodePattern::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v33[16] = *MEMORY[0x263EF8340];
  uint64_t v26 = a1;
  __int16 Benefit = mlir::pdl_interp::RecordMatchOp::getBenefit((mlir::pdl_interp::RecordMatchOp *)&v26);
  mlir::PatternBenefit::PatternBenefit(&v25, Benefit);
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(v26 + 24));
  __dst = v33;
  unint64_t v32 = 0x800000000;
  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v26);
  if (!InputAttributeNames) {
    goto LABEL_9;
  }
  uint64_t Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  uint64_t v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  uint64_t v12 = (char *)(v10 + 8 * v11);
  uint64_t v28 = v30;
  uint64_t v29 = 0x800000000;
  unint64_t v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) < 0x41)
  {
    uint64_t v14 = 0;
    int v16 = 0;
    uint64_t v15 = v30;
    if (v12 == Value)
    {
LABEL_4:
      unint64_t v17 = v16 + (v13 >> 3);
      LODWORD(v29) = v16 + (v13 >> 3);
      if (v15 != v30) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, (uint64_t)v13 >> 3, 16);
    uint64_t v14 = v29;
    uint64_t v15 = v28;
    int v16 = v29;
    if (v12 == Value) {
      goto LABEL_4;
    }
  }
  unint64_t v19 = &v15[16 * v14];
  do
  {
    uint64_t v20 = *(void *)Value;
    Value += 8;
    uint64_t v27 = v20;
    *unint64_t v19 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v27);
    v19[1] = v21;
    v19 += 2;
  }
  while (Value != v12);
  uint64_t v15 = v28;
  unint64_t v17 = v29 + (v13 >> 3);
  LODWORD(v29) = v29 + (v13 >> 3);
  if (v28 != v30)
  {
LABEL_5:
    if (__dst != v33)
    {
      free(__dst);
      uint64_t v15 = v28;
      LODWORD(v17) = v29;
    }
    __dst = v15;
    unint64_t v32 = __PAIR64__(HIDWORD(v29), v17);
    uint64_t v28 = v30;
    uint64_t v29 = 0;
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v22 = v32;
  if (v32 >= v17)
  {
    if (v17) {
      memmove(__dst, v30, 16 * v17);
    }
    goto LABEL_28;
  }
  if (HIDWORD(v32) < v17)
  {
    LODWORD(v32) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v33, v17, 16);
    uint64_t v22 = 0;
    uint64_t v23 = v29;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v32)
  {
    memmove(__dst, v30, 16 * v32);
    uint64_t v23 = v29;
    if (v22 == v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v22 = 0;
  uint64_t v23 = v29;
  if (v29) {
LABEL_27:
  }
    memcpy((char *)__dst + 16 * v22, &v28[16 * v22], 16 * v23 - 16 * v22);
LABEL_28:
  LODWORD(v32) = v17;
  LODWORD(v29) = 0;
  if (v28 != v30) {
    free(v28);
  }
LABEL_9:
  mlir::pdl_interp::RecordMatchOp::getRootKind((uint64_t)&v26, (uint64_t)&v28);
  if (v30[0])
  {
    mlir::Pattern::Pattern(a4, (uint64_t)v28, v29, v25, Context, __dst, v32);
    *(_DWORD *)(a4 + 88) = a3;
    *(void *)(a4 + 96) = a2;
    unsigned int v18 = __dst;
    if (__dst == v33) {
      return;
    }
    goto LABEL_11;
  }
  mlir::Pattern::Pattern(a4, v25, Context, __dst, v32);
  *(_DWORD *)(a4 + 88) = a3;
  *(void *)(a4 + 96) = a2;
  unsigned int v18 = __dst;
  if (__dst != v33) {
LABEL_11:
  }
    free(v18);
}

uint64_t mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(uint64_t result, unsigned int a2, __int16 a3)
{
  *(_WORD *)(*(void *)(result + 168) + 2 * a2) = a3;
  return result;
}

void *mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(void *this)
{
  unsigned int v1 = this;
  uint64_t v2 = this[9];
  for (uint64_t i = this[10]; i != v2; i -= 16)
  {
    uint64_t v4 = *(void *)(i - 16);
    this = (void *)v4;
    if (v4) {
      this = (void *)MEMORY[0x21667D390](this, 0x20C8093837F09);
    }
  }
  v1[10] = v2;
  uint64_t v5 = v1[15];
  for (uint64_t j = v1[16]; j != v5; j -= 16)
  {
    uint64_t v7 = *(void *)(j - 16);
    this = (void *)v7;
    if (v7) {
      this = (void *)MEMORY[0x21667D390](this, 0x20C8093837F09);
    }
  }
  v1[16] = v5;
  return this;
}

void mlir::detail::PDLByteCode::PDLByteCode(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a3 + 8)) {
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(a1, a3);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 112;
  *(_OWORD *)(a1 + 96) = xmmword_211F0C2D0;
  *(void *)(a1 + 240) = a1 + 264;
  *(_OWORD *)(a1 + 248) = xmmword_211F0C2D0;
  *(void *)(a1 + 392) = a1 + 408;
  *(void *)(a1 + 400) = 0x2000000000;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3778) = 0u;
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  int v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v43[2] = (void *)0x1000000000;
  v44[0] = 0;
  v44[1] = 0;
  unint64_t v44[2] = (void *)0x1000000000;
  v44[3] = 0;
  v44[4] = 0;
  v44[6] = 0;
  v44[7] = 0;
  v44[5] = (void *)0x1000000000;
  int v45 = 0;
  __int16 v46 = 0;
  int v50 = 0;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = a1 + 64;
  uint64_t v52 = a1 + 88;
  uint64_t v53 = a1 + 240;
  uint64_t v54 = a1 + 392;
  uint64_t v55 = a1 + 3784;
  uint64_t v56 = a1 + 3786;
  uint64_t v57 = a1 + 3788;
  uint64_t v58 = a1 + 3790;
  uint64_t v59 = a1 + 3792;
  uint64_t v60 = a4;
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(unsigned int *)(a5 + 8);
  if (v8)
  {
    unsigned int v9 = *(uint64_t **)a5;
    uint64_t v10 = a6;
    if (*v7) {
      BOOL v11 = *v7 == -8;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      do
      {
        uint64_t v13 = v9[1];
        ++v9;
        uint64_t v12 = v13;
        if (v13) {
          BOOL v14 = v12 == -8;
        }
        else {
          BOOL v14 = 1;
        }
      }
      while (v14);
    }
    uint64_t v15 = &v7[v8];
    if (v9 == v15)
    {
LABEL_23:
      uint64_t v21 = *(uint64_t **)v10;
      uint64_t v22 = *(unsigned int *)(v10 + 8);
      if (v22)
      {
        uint64_t v23 = *(uint64_t **)v10;
        if (*v21) {
          BOOL v24 = *v21 == -8;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24)
        {
          do
          {
            uint64_t v26 = v23[1];
            ++v23;
            uint64_t v25 = v26;
            if (v26) {
              BOOL v27 = v25 == -8;
            }
            else {
              BOOL v27 = 1;
            }
          }
          while (v27);
        }
        uint64_t v28 = &v21[v22];
        if (v23 == v28) {
LABEL_43:
        }
      }
      else
      {
        uint64_t v23 = *(uint64_t **)v10;
        uint64_t v28 = &v21[v22];
        if (v21 == v28) {
          goto LABEL_43;
        }
      }
      uint64_t v29 = 0;
      uint64_t v30 = *v23;
      do
      {
        unint64_t v31 = *(const unsigned __int8 **)v30;
        v61[0] = v29;
        llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v43, (int8x16_t *)(v30 + 40), v31, v61);
        do
        {
          uint64_t v32 = v23[1];
          ++v23;
          uint64_t v30 = v32;
          if (v32) {
            BOOL v33 = v30 == -8;
          }
          else {
            BOOL v33 = 1;
          }
        }
        while (v33);
        ++v29;
      }
      while (v23 != v28);
      goto LABEL_43;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)a5;
    uint64_t v10 = a6;
    uint64_t v15 = &v7[v8];
    if (v7 == v15) {
      goto LABEL_23;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = *v9;
  do
  {
    unsigned int v18 = *(const unsigned __int8 **)v17;
    v61[0] = v16;
    llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v44, (int8x16_t *)(v17 + 40), v18, v61);
    do
    {
      uint64_t v19 = v9[1];
      ++v9;
      uint64_t v17 = v19;
      if (v19) {
        BOOL v20 = v17 == -8;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (v20);
    ++v16;
  }
  while (v9 != v15);
  goto LABEL_23;
}

void sub_21180D820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
}

uint64_t sub_21180D834()
{
  return v0;
}

void anonymous namespace'::Generator::generate(uint64_t *a1, unsigned int *a2)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  uint64_t v4 = (mlir::Attribute *)(a2 + 6);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  LOWORD(v117) = 261;
  *(void *)&long long v115 = "matcher";
  *((void *)&v115 + 1) = 7;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v115);
  uint64_t v7 = mlir::SymbolTable::lookupSymbolIn(a2, v6);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(void *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id) {
      uint64_t v8 = (unsigned int *)v7;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  char v95 = v8;
  unsigned int v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
  LOWORD(v117) = 261;
  *(void *)&long long v115 = "rewriters";
  *((void *)&v115 + 1) = 9;
  uint64_t v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v115);
  uint64_t v11 = mlir::SymbolTable::lookupSymbolIn(a2, v10);
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  mlir::Region::getOps<mlir::pdl_interp::FuncOp>((mlir::Region *)(((v12+ 64+ 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v12 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v12 + 40)), (uint64_t)&v115);
  long long v105 = v115;
  *(_OWORD *)uint64_t v106 = v116;
  long long v107 = v117;
  long long v108 = v118;
  uint64_t v13 = (ZinIrHalH13g *)v116;
  uint64_t v93 = v119;
  uint64_t v94 = a1;
  if ((ZinIrHalH13g *)v116 == v119) {
    goto LABEL_119;
  }
  while (1)
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    BOOL v14 = (unsigned int *)(*((uint64_t (**)(void))&v108 + 1))();
    v103[0] = (llvm *)v14;
    LOWORD(v101[0]) = 0;
    LOWORD(v98[0]) = 0;
    LOWORD(v125) = 0;
    uint64_t v121 = a1;
    uint64_t v122 = v101;
    uint64_t v123 = v98;
    uint64_t v124 = &v125;
    unint64_t v15 = v14[11];
    if ((v15 & 0x7FFFFF) != 0)
    {
      uint64_t v16 = (void *)((((unint64_t)&v14[4 * ((v15 >> 23) & 1) + 17] + ((v15 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v14[10]);
      if ((void *)*v16 != v16) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (MEMORY[0])
      {
LABEL_18:
        uint64_t v17 = v16[1];
        if (v17) {
          uint64_t v18 = v17 - 8;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(unint64_t **)(v18 + 48);
        BOOL v20 = *(unint64_t **)(v18 + 56);
        if (v20 == v19) {
          goto LABEL_22;
        }
        while (2)
        {
          unint64_t v29 = *v19;
          unint64_t v112 = *v19;
          uint64_t v30 = (uint64_t)v121;
          __int16 v31 = (*(_WORD *)v122)++;
          int v32 = *(_DWORD *)(v30 + 16);
          if (!v32)
          {
            unsigned int v45 = 0;
            goto LABEL_87;
          }
          uint64_t v33 = *(void *)v30;
          {
            unint64_t v77 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v77 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v77;
          }
          unint64_t v34 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v29) ^ HIDWORD(v29));
          unint64_t v35 = 0x9DDFEA08EB382D69 * (HIDWORD(v29) ^ (v34 >> 47) ^ v34);
          int v36 = -348639895 * ((v35 >> 47) ^ v35);
          unint64_t v37 = v112;
          unsigned int v38 = v36 & (v32 - 1);
          int v39 = (llvm *)(v33 + 16 * v38);
          uint64_t v40 = *(void *)v39;
          if (v112 != *(void *)v39)
          {
            uint64_t v41 = 0;
            int v42 = 1;
            while (v40 != -4096)
            {
              if (v41) {
                BOOL v43 = 0;
              }
              else {
                BOOL v43 = v40 == -8192;
              }
              if (v43) {
                uint64_t v41 = v39;
              }
              unsigned int v44 = v38 + v42++;
              unsigned int v38 = v44 & (v32 - 1);
              int v39 = (llvm *)(v33 + 16 * v38);
              uint64_t v40 = *(void *)v39;
              if (v112 == *(void *)v39) {
                goto LABEL_50;
              }
            }
            if (v41) {
              uint64_t v73 = v41;
            }
            else {
              uint64_t v73 = v39;
            }
            unsigned int v45 = *(_DWORD *)(v30 + 16);
            int v74 = *(_DWORD *)(v30 + 8);
            if (4 * v74 + 4 >= 3 * v45)
            {
LABEL_87:
              v45 *= 2;
LABEL_88:
              llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(v30, v45);
              uint64_t v120 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, &v112, &v120);
              uint64_t v73 = v120;
              ++*(_DWORD *)(v30 + 8);
              if (*(void *)v73 == -4096) {
                goto LABEL_49;
              }
LABEL_48:
              --*(_DWORD *)(v30 + 12);
              goto LABEL_49;
            }
            if (v45 + ~v74 - *(_DWORD *)(v30 + 12) <= v45 >> 3) {
              goto LABEL_88;
            }
            ++*(_DWORD *)(v30 + 8);
            if (*(void *)v73 != -4096) {
              goto LABEL_48;
            }
LABEL_49:
            *(void *)uint64_t v73 = v112;
            *((_WORD *)v73 + 4) = v31;
            unint64_t v37 = v112;
          }
LABEL_50:
          unint64_t v46 = *(void *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
            unint64_t v46 = 0;
          }
          unint64_t v96 = v46;
          if (!v46) {
            goto LABEL_32;
          }
          uint64_t v47 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v96) + 136);
          if (v47 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
          {
            if (v47 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
              goto LABEL_32;
            }
            uint64_t v48 = (uint64_t *)(v30 + 24);
            uint64_t v49 = *(void *)(v30 + 24);
            __int16 v50 = (*(_WORD *)v124)++;
            int v51 = *(_DWORD *)(v30 + 40);
            if (v51)
            {
              unint64_t v52 = v112;
              {
                unint64_t v79 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v79 = 0xFF51AFD7ED558CCDLL;
                }
                llvm::hashing::detail::get_execution_seed(void)::seed = v79;
              }
              unint64_t v53 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v52) ^ HIDWORD(v52));
              unint64_t v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v52) ^ (v53 >> 47) ^ v53);
              unsigned int v55 = (-348639895 * ((v54 >> 47) ^ v54)) & (v51 - 1);
              uint64_t v56 = (llvm *)(v49 + 16 * v55);
              uint64_t v57 = *(void *)v56;
              if (v112 != *(void *)v56)
              {
                uint64_t v58 = 0;
                int v59 = 1;
                while (v57 != -4096)
                {
                  if (v58) {
                    BOOL v60 = 0;
                  }
                  else {
                    BOOL v60 = v57 == -8192;
                  }
                  if (v60) {
                    uint64_t v58 = v56;
                  }
                  unsigned int v61 = v55 + v59++;
                  unsigned int v55 = v61 & (v51 - 1);
                  uint64_t v56 = (llvm *)(v49 + 16 * v55);
                  uint64_t v57 = *(void *)v56;
                  if (v112 == *(void *)v56) {
                    goto LABEL_32;
                  }
                }
                goto LABEL_90;
              }
LABEL_32:
              if (++v19 == v20) {
                goto LABEL_22;
              }
              continue;
            }
LABEL_79:
            unsigned int v72 = 0;
            goto LABEL_94;
          }
          break;
        }
        uint64_t v48 = (uint64_t *)(v30 + 24);
        uint64_t v62 = *(void *)(v30 + 24);
        __int16 v50 = (*(_WORD *)v123)++;
        int v63 = *(_DWORD *)(v30 + 40);
        if (!v63) {
          goto LABEL_79;
        }
        unint64_t v64 = v112;
        {
          unint64_t v78 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v78 = 0xFF51AFD7ED558CCDLL;
          }
          llvm::hashing::detail::get_execution_seed(void)::seed = v78;
        }
        unint64_t v65 = 0x9DDFEA08EB382D69
            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v64) ^ HIDWORD(v64));
        unint64_t v66 = 0x9DDFEA08EB382D69 * (HIDWORD(v64) ^ (v65 >> 47) ^ v65);
        unsigned int v67 = (-348639895 * ((v66 >> 47) ^ v66)) & (v63 - 1);
        uint64_t v56 = (llvm *)(v62 + 16 * v67);
        uint64_t v68 = *(void *)v56;
        if (v112 == *(void *)v56) {
          goto LABEL_32;
        }
        uint64_t v58 = 0;
        int v69 = 1;
        while (v68 != -4096)
        {
          if (v58) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v68 == -8192;
          }
          if (v70) {
            uint64_t v58 = v56;
          }
          unsigned int v71 = v67 + v69++;
          unsigned int v67 = v71 & (v63 - 1);
          uint64_t v56 = (llvm *)(v62 + 16 * v67);
          uint64_t v68 = *(void *)v56;
          if (v112 == *(void *)v56) {
            goto LABEL_32;
          }
        }
LABEL_90:
        if (v58) {
          unint64_t v75 = v58;
        }
        else {
          unint64_t v75 = v56;
        }
        unsigned int v72 = *(_DWORD *)(v30 + 40);
        int v76 = *(_DWORD *)(v30 + 32);
        if (4 * v76 + 4 < 3 * v72)
        {
          if (v72 + ~v76 - *(_DWORD *)(v30 + 36) <= v72 >> 3) {
            goto LABEL_95;
          }
          ++*(_DWORD *)(v30 + 32);
          if (*(void *)v75 == -4096)
          {
LABEL_31:
            *(void *)unint64_t v75 = v112;
            *((_WORD *)v75 + 4) = v50;
            goto LABEL_32;
          }
        }
        else
        {
LABEL_94:
          v72 *= 2;
LABEL_95:
          llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow((uint64_t)v48, v72);
          uint64_t v120 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v48, &v112, &v120);
          unint64_t v75 = v120;
          ++*(_DWORD *)(v30 + 32);
          if (*(void *)v75 == -4096) {
            goto LABEL_31;
          }
        }
        --*(_DWORD *)(v30 + 36);
        goto LABEL_31;
      }
    }
LABEL_22:
    unint64_t Body = mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v103);
    uint64_t v120 = (llvm *)&v121;
    uint64_t v22 = *(void *)(Body + 8);
    a1 = v94;
    if (v22 != Body)
    {
      unint64_t v23 = Body;
      do
      {
        uint64_t v24 = v22 - 8;
        if (!v22) {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (ZinIrHalH13g *)(v24 + 32);
        uint64_t v26 = *(ZinIrHalH13g **)(v24 + 40);
        if (v26 != (ZinIrHalH13g *)(v24 + 32))
        {
          do
          {
            BOOL v27 = (ZinIrHalH13g *)*((void *)v26 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v26);
            uint64_t v26 = v27;
          }
          while (v27 != v25);
        }
        uint64_t v22 = *(void *)(v22 + 8);
      }
      while (v22 != v23);
    }
    unint64_t v80 = (_WORD *)v94[27];
    if (LOWORD(v101[0]) <= (unsigned __int16)*v80)
    {
      __int16 v81 = (__int16)v98[0];
      unint64_t v82 = (_WORD *)v94[29];
      if (LOWORD(v98[0]) <= (unsigned __int16)*v82)
      {
LABEL_111:
        __int16 v83 = v125;
        int64_t v84 = (_WORD *)v94[30];
        if ((unsigned __int16)v125 <= (unsigned __int16)*v84) {
          goto LABEL_113;
        }
LABEL_112:
        *int64_t v84 = v83;
        goto LABEL_113;
      }
    }
    else
    {
      *unint64_t v80 = v101[0];
      __int16 v81 = (__int16)v98[0];
      unint64_t v82 = (_WORD *)v94[29];
      if (LOWORD(v98[0]) <= (unsigned __int16)*v82) {
        goto LABEL_111;
      }
    }
    *unint64_t v82 = v81;
    __int16 v83 = v125;
    int64_t v84 = (_WORD *)v94[30];
    if ((unsigned __int16)v125 > (unsigned __int16)*v84) {
      goto LABEL_112;
    }
    do
    {
LABEL_113:
      mlir::Region::OpIterator::operator++((uint64_t *)&v105);
      uint64_t v13 = v106[0];
      if (v106[0] == *((ZinIrHalH13g **)&v107 + 1)) {
        goto LABEL_13;
      }
      __int16 v85 = (unsigned int (*)(void))v108;
      ZinIrHalH13g::~ZinIrHalH13g(v106[0]);
    }
    while (!v85());
    uint64_t v13 = v106[0];
LABEL_13:
    if (v13 == v93)
    {
LABEL_119:
      v103[0] = 0;
      v103[1] = 0;
      int v104 = 0;
      v101[0] = 0;
      v101[1] = 0;
      int v102 = 0;
      int v100 = 0;
      unsigned int v114 = 0;
      buffer = (uint64_t *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
      long long v113 = xmmword_211ED27E0;
      uint64_t *buffer = (uint64_t)v103;
      buffer[1] = (uint64_t)&v100;
      buffer[2] = (uint64_t)&v112;
      buffer[3] = (uint64_t)v101;
      unint64_t v112 = (unint64_t)buffer;
      uint64_t v109 = v111;
      uint64_t v110 = 0;
      v111[0] = 0;
      v111[1] = 1;
      uint64_t v87 = v95[10];
      unint64_t v88 = (unint64_t)&v95[4 * (((unint64_t)v95[11] >> 23) & 1)]
          + (((unint64_t)v95[11] >> 21) & 0x7F8);
      long long v105 = 0uLL;
      v106[0] = 0;
      v106[1] = (ZinIrHalH13g *)((char *)&v107 + 8);
      *(void *)&long long v107 = 0x400000000;
      v98[0] = 0;
      v98[1] = 0;
      int v99 = 0;
      uint64_t v89 = *(void *)(((v88 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v87 + 8);
      if (v89) {
        uint64_t v90 = v89 - 8;
      }
      else {
        uint64_t v90 = 0;
      }
      unint64_t v97 = **(void **)(v90 + 48);
      *(void *)&long long v115 = 0;
      char v91 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a1, &v97, &v115);
      BOOL v92 = (void *)v115;
      if ((v91 & 1) == 0)
      {
        BOOL v92 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a1, (uint64_t)&v97, &v97, (void *)v115);
        *BOOL v92 = v97;
        *((_WORD *)v92 + 4) = 0;
      }
      *((_WORD *)v92 + 4) = 0;
      mlir::Liveness::Liveness((mlir::Liveness *)&v96, (mlir::Operation *)v95);
    }
  }
}

void mlir::detail::PDLByteCode::initializeMutableState(mlir::detail::PDLByteCode *this, mlir::detail::PDLByteCodeMutableState *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned __int16 *)this + 1892);
  *(void *)&long long __x = 0;
  unint64_t v5 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)a2 + 1) = *(void *)a2 + 8 * v4;
    }
  }
  else
  {
    std::vector<void const*>::__append((unint64_t *)a2, v4 - v5, (const double *)&__x);
  }
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 4);
  unint64_t v8 = *((unsigned __int16 *)this + 1893);
  unint64_t v9 = (v7 - v6) >> 4;
  if (v8 <= v9)
  {
    if (v8 < v9)
    {
      uint64_t v10 = v6 + 16 * v8;
      while (v7 != v10)
      {
        uint64_t v12 = *(void *)(v7 - 16);
        v7 -= 16;
        uint64_t v11 = v12;
        if (v12) {
          MEMORY[0x21667D390](v11, 0x20C8093837F09);
        }
      }
      *((void *)a2 + 4) = v10;
    }
  }
  else
  {
    std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append((char **)a2 + 3, v8 - v9);
  }
  unint64_t v13 = *((unsigned __int16 *)this + 1894);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  uint64_t v14 = *((void *)a2 + 6);
  unint64_t v15 = (*((void *)a2 + 7) - v14) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15) {
      *((void *)a2 + 7) = v14 + 16 * v13;
    }
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 6, v13 - v15, &__x);
  }
  unint64_t v16 = *((unsigned __int16 *)this + 1895);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  uint64_t v17 = *((void *)a2 + 12);
  unint64_t v18 = (*((void *)a2 + 13) - v17) >> 4;
  if (v16 <= v18)
  {
    if (v16 < v18) {
      *((void *)a2 + 13) = v17 + 16 * v16;
    }
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 12, v16 - v18, &__x);
  }
  uint64_t v19 = *((void *)a2 + 18);
  uint64_t v20 = *((void *)a2 + 19);
  unint64_t v21 = *((unsigned __int16 *)this + 1896);
  LODWORD(__x) = 0;
  unint64_t v22 = (v20 - v19) >> 2;
  if (v21 <= v22)
  {
    if (v21 < v22) {
      *((void *)a2 + 19) = v19 + 4 * v21;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)a2 + 6, v21 - v22, (std::vector<unsigned int>::const_reference)&__x);
  }
  unint64_t v23 = *((unsigned int *)this + 100);
  uint64_t v24 = (unsigned char *)*((void *)a2 + 21);
  if (v23 > (uint64_t)(*((void *)a2 + 23) - (void)v24) >> 1)
  {
    uint64_t v25 = (unsigned char *)*((void *)a2 + 22);
    uint64_t v26 = (char *)operator new(2 * v23);
    uint64_t v27 = v25 - v24;
    uint64_t v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    unint64_t v29 = v28;
    if (v25 == v24) {
      goto LABEL_34;
    }
    if ((unint64_t)(v27 - 2) >= 0x1E)
    {
      unint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFFELL)] - v26) >= 0x20)
      {
        uint64_t v30 = v27 >> 1;
        unint64_t v31 = ((unint64_t)(v27 - 2) >> 1) + 1;
        unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v33 = &v25[-v32];
        unint64_t v29 = &v28[-v32];
        unint64_t v34 = &v26[2 * v30 - 16];
        unint64_t v35 = (long long *)(v25 - 16);
        unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)unint64_t v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 16;
        }
        while (v36);
        uint64_t v25 = v33;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_34:
          *((void *)a2 + 21) = v29;
          *((void *)a2 + 22) = v28;
          *((void *)a2 + 23) = &v26[2 * v23];
          if (v24)
          {
            operator delete(v24);
            LODWORD(v23) = *((_DWORD *)this + 100);
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      unint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      __int16 v38 = *((_WORD *)v25 - 1);
      v25 -= 2;
      *((_WORD *)v29 - 1) = v38;
      v29 -= 2;
    }
    while (v25 != v24);
    goto LABEL_34;
  }
LABEL_36:
  if (v23)
  {
    uint64_t v39 = *((void *)this + 49);
    uint64_t v40 = v39 + 104 * v23;
    uint64_t v41 = (char *)*((void *)a2 + 22);
    while (1)
    {
      __int16 v43 = *(_WORD *)(v39 + 12);
      unint64_t v44 = *((void *)a2 + 23);
      if ((unint64_t)v41 >= v44) {
        break;
      }
      *(_WORD *)uint64_t v41 = v43;
      uint64_t v42 = (uint64_t)(v41 + 2);
LABEL_39:
      *((void *)a2 + 22) = v42;
      v39 += 104;
      uint64_t v41 = (char *)v42;
      if (v39 == v40) {
        return;
      }
    }
    unsigned int v45 = (char *)*((void *)a2 + 21);
    uint64_t v46 = v41 - v45;
    if (v41 - v45 <= -3) {
      abort();
    }
    uint64_t v47 = v46 >> 1;
    unint64_t v48 = v44 - (void)v45;
    if (v48 <= (v46 >> 1) + 1) {
      unint64_t v49 = v47 + 1;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v48 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v50 = v49;
    }
    if (v50)
    {
      if (v50 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v51 = operator new(2 * v50);
      unint64_t v52 = &v51[2 * v47];
      *unint64_t v52 = v43;
      uint64_t v42 = (uint64_t)(v52 + 1);
      if (v41 == v45) {
        goto LABEL_56;
      }
    }
    else
    {
      int v51 = 0;
      unint64_t v52 = (_WORD *)(2 * v47);
      *(_WORD *)(2 * v47) = v43;
      uint64_t v42 = 2 * v47 + 2;
      if (v41 == v45) {
        goto LABEL_56;
      }
    }
    unint64_t v53 = v41 - 2 - v45;
    if (v53 >= 0x5E)
    {
      if (&v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v53 & 0xFFFFFFFFFFFFFFFELL)] > &v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2])
      {
        unint64_t v54 = v41;
      }
      else if (&v41[-(v53 & 0xFFFFFFFFFFFFFFFELL) - 2] > v41 - 2)
      {
        unint64_t v54 = v41;
      }
      else if (v41 - v51 - (v46 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        uint64_t v56 = (v53 >> 1) + 1;
        unint64_t v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v54 = &v41[-v57];
        unint64_t v52 = (_WORD *)((char *)v52 - v57);
        uint64_t v58 = &v51[2 * v47 - 16];
        int v59 = v41 - 16;
        unint64_t v60 = v56 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          _OWORD *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 16;
        }
        while (v60);
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v54 = v41;
      }
    }
    else
    {
      unint64_t v54 = v41;
    }
    do
    {
      __int16 v55 = *((_WORD *)v54 - 1);
      v54 -= 2;
      *--unint64_t v52 = v55;
    }
    while (v54 != v45);
LABEL_56:
    *((void *)a2 + 21) = v52;
    *((void *)a2 + 22) = v42;
    *((void *)a2 + 23) = &v51[2 * v50];
    if (v45) {
      operator delete(v45);
    }
    goto LABEL_39;
  }
}

void mlir::detail::PDLByteCode::match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v41[30] = *MEMORY[0x263EF8340];
  **(void **)a5 = a2;
  uint64_t v6 = *(void **)a5;
  uint64_t v7 = (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3;
  uint64_t v8 = *(void *)(a5 + 24);
  uint64_t v9 = (*(void *)(a5 + 32) - v8) >> 4;
  uint64_t v10 = *(void *)(a5 + 48);
  uint64_t v11 = (*(void *)(a5 + 56) - v10) >> 4;
  uint64_t v12 = a5 + 72;
  uint64_t v13 = *(void *)(a5 + 96);
  uint64_t v14 = (*(void *)(a5 + 104) - v13) >> 4;
  uint64_t v15 = a5 + 120;
  uint64_t v16 = *(void *)(a5 + 144);
  uint64_t v17 = (*(void *)(a5 + 152) - v16) >> 2;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = (*(void *)(a1 + 72) - v18) >> 3;
  uint64_t v20 = *(unsigned __int16 **)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v22 = *(void *)(a5 + 168);
  uint64_t v23 = (*(void *)(a5 + 176) - v22) >> 1;
  uint64_t v24 = *(void *)(a1 + 392);
  uint64_t v25 = *(unsigned int *)(a1 + 400);
  uint64_t v26 = *(void *)(a1 + 3736);
  uint64_t v27 = (*(void *)(a1 + 3744) - v26) >> 5;
  uint64_t v28 = *(void *)(a1 + 3760);
  uint64_t v29 = (*(void *)(a1 + 3768) - v28) >> 5;
  __int16 v38 = v20;
  uint64_t v39 = v41;
  uint64_t v40 = 0x600000000;
  v41[6] = v6;
  v41[7] = v7;
  v41[8] = v8;
  v41[9] = v9;
  v41[10] = v10;
  v41[11] = v11;
  v41[12] = v12;
  v41[13] = v13;
  v41[14] = v14;
  v41[15] = v15;
  v41[16] = v16;
  v41[17] = v17;
  v41[18] = v18;
  v41[19] = v19;
  v41[20] = v20;
  v41[21] = v21;
  v41[22] = v22;
  v41[23] = v23;
  void v41[24] = v24;
  v41[25] = v25;
  v41[26] = v26;
  v41[27] = v27;
  v41[28] = v28;
  v41[29] = v29;
  uint64_t v30 = *(void *)a4;
  unint64_t v31 = *(unsigned int *)(a4 + 8);
  if (!v31)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (void *)(v30 + 120 * v31), v31, 0, 0);
    unint64_t v36 = v39;
    if (v39 == v41) {
      return;
    }
    goto LABEL_6;
  }
  unint64_t v32 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  unint64_t v33 = v31;
  while (1)
  {
    unint64_t v34 = operator new(120 * v33, v32);
    if (v34) {
      break;
    }
    BOOL v35 = v33 > 1;
    v33 >>= 1;
    if (!v35) {
      goto LABEL_5;
    }
  }
  long long v37 = v34;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (void *)(v30 + 120 * v31), v31, v34, v33);
  operator delete(v37);
  unint64_t v36 = v39;
  if (v39 != v41) {
LABEL_6:
  }
    free(v36);
}

uint64_t anonymous namespace'::ByteCodeExecutor::execute(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v428[2] = *MEMORY[0x263EF8340];
  unsigned int v408 = a1 + 9;
  uint64_t v6 = a1 + 21;
  uint64_t v401 = (uint64_t)(a1 + 1);
  unsigned int v400 = a1 + 3;
  unint64_t v405 = (mlir::OpBuilder *)(a2 + 8);
  unsigned int v402 = a1 + 23;
  unsigned int v407 = a1 + 21;
  while (1)
  {
    uint64_t v14 = *a1;
    uint64_t v16 = *a1 + 1;
    int v15 = **a1;
    *a1 = v16;
    uint64_t result = 1;
    switch(v15)
    {
      case 0:
        *a1 = v14 + 2;
        unint64_t v4 = v14[1];
        uint64_t v93 = a1[29];
        __src[0] = &v410;
        __src[1] = (void *)0x1000000000;
        int v94 = *(*a1)++;
        v426[0] = __src[0];
        v426[1] = (void *)LODWORD(__src[1]);
        uint64_t v95 = *(void *)&v93[16 * v4 + 12];
        if (!v95) {
          goto LABEL_503;
        }
        unint64_t v96 = &(*a1)[2
                   * (v94 == ((*(unsigned __int8 (**)(uint64_t, uint64_t, void **))(*(void *)v95 + 48))(v95, a2, v426) != 0))];
        *a1 = v96;
        *a1 = &a1[23][*(unsigned int *)v96];
        unint64_t v97 = __src[0];
        if (__src[0] != &v410) {
          goto LABEL_81;
        }
        continue;
      case 1:
        *a1 = v14 + 2;
        unint64_t v4 = v14[1];
        uint64_t v98 = a1[31];
        v426[0] = v427;
        v426[1] = (void *)0x1000000000;
        unint64_t v99 = *(*a1)++;
        __src[0] = &v410;
        __src[1] = (void *)0x300000000;
        unsigned int v412 = v414;
        uint64_t v413 = 0x300000000;
        v416 = v418;
        uint64_t v417 = 0x300000000;
        unsigned int v419 = v421;
        uint64_t v420 = 0x300000000;
        unsigned int v423 = &v425;
        uint64_t v424 = 0x300000000;
        if (v99 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v412, v414, v99, 16);
          if (HIDWORD(v417) < v99) {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v416, v418, v99, 16);
          }
        }
        v428[0] = (unint64_t)v426[0];
        v428[1] = LODWORD(v426[1]);
        uint64_t v315 = *(void *)&v98[16 * v4 + 12];
        if (!v315) {
LABEL_503:
        }
          std::__throw_bad_function_call[abi:nn180100]();
        char v316 = (*(uint64_t (**)(uint64_t, uint64_t, void **, unint64_t *))(*(void *)v315 + 48))(v315, a2, __src, v428);
        if (!LODWORD(__src[1])) {
          goto LABEL_315;
        }
        BOOL v317 = (long long **)__src[0];
        uint64_t v318 = 16 * LODWORD(__src[1]);
        do
        {
          int v325 = *((_DWORD *)v317 + 2);
          if (v325 == 5)
          {
            v319 = a1[16];
            uint64_t v320 = 8 * **a1;
            long long v321 = **v317;
            ++*a1;
            *(_OWORD *)&v319[v320] = v321;
            v322 = a1[16];
LABEL_309:
            v323 = &v322[v320];
            goto LABEL_310;
          }
          if (v325 == 3)
          {
            v326 = a1[13];
            uint64_t v320 = 8 * **a1;
            long long v327 = **v317;
            ++*a1;
            *(_OWORD *)&v326[v320] = v327;
            v322 = a1[13];
            goto LABEL_309;
          }
          v323 = (unsigned __int16 *)*v317;
LABEL_310:
          uint64_t v324 = *(*a1)++;
          *(void *)&a1[9][4 * v324] = v323;
          v317 += 2;
          v318 -= 16;
        }
        while (v318);
LABEL_315:
        if (v420)
        {
          unint64_t v4 = (unint64_t)v419;
          uint64_t v328 = 16 * v420;
          do
          {
            while (1)
            {
              uint64_t v329 = a1[15];
              v330 = (void *)*((void *)v329 + 1);
              if ((unint64_t)v330 < *((void *)v329 + 2)) {
                break;
              }
              *((void *)v329 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[15], v4);
              v4 += 16;
              v328 -= 16;
              if (!v328) {
                goto LABEL_320;
              }
            }
            void *v330 = 0;
            v330[1] = 0;
            *(_OWORD *)v330 = *(_OWORD *)v4;
            *(void *)unint64_t v4 = 0;
            *(void *)(v4 + 8) = 0;
            v4 += 16;
            *((void *)v329 + 1) = v330 + 2;
            v328 -= 16;
          }
          while (v328);
        }
LABEL_320:
        if (v424)
        {
          unint64_t v4 = (unint64_t)v423;
          uint64_t v331 = 16 * v424;
          do
          {
            while (1)
            {
              unsigned int v332 = a1[18];
              unsigned int v333 = (void *)*((void *)v332 + 1);
              if ((unint64_t)v333 < *((void *)v332 + 2)) {
                break;
              }
              *((void *)v332 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[18], v4);
              v4 += 16;
              v331 -= 16;
              if (!v331) {
                goto LABEL_325;
              }
            }
            *unsigned int v333 = 0;
            v333[1] = 0;
            *(_OWORD *)unsigned int v333 = *(_OWORD *)v4;
            *(void *)unint64_t v4 = 0;
            *(void *)(v4 + 8) = 0;
            v4 += 16;
            *((void *)v332 + 1) = v333 + 2;
            v331 -= 16;
          }
          while (v331);
        }
LABEL_325:
        mlir::PDLResultList::~PDLResultList((mlir::PDLResultList *)__src);
        if (v426[0] != v427) {
          free(v426[0]);
        }
        if (v316) {
          continue;
        }
        return 0;
      case 2:
        unsigned int v102 = v14[2];
        unsigned int v101 = v14 + 2;
        unint64_t v100 = v102;
        *a1 = v101;
        unint64_t v103 = *(v101 - 1);
        int v104 = a1[10];
        if ((unint64_t)v104 <= v103) {
          long long v105 = v6;
        }
        else {
          long long v105 = v408;
        }
        if ((unint64_t)v104 <= v103) {
          uint64_t v106 = a1[10];
        }
        else {
          uint64_t v106 = 0;
        }
        uint64_t v107 = *(void *)&(*v105)[4 * (v103 - (void)v106)];
        *a1 = v101 + 1;
        if ((unint64_t)v104 <= v100) {
          long long v108 = v6;
        }
        else {
          long long v108 = v408;
        }
        if ((unint64_t)v104 > v100) {
          int v104 = 0;
        }
        uint64_t v109 = &v101[2 * (v107 != *(void *)&(*v108)[4 * (v100 - (void)v104)]) + 1];
        *a1 = v109;
        uint64_t v42 = *(unsigned int *)v109;
        goto LABEL_460;
      case 3:
        unsigned int v112 = v14[3];
        uint64_t v111 = v14 + 3;
        unint64_t v110 = v112;
        int v113 = *(v111 - 2);
        *a1 = v111;
        unint64_t v114 = *(v111 - 1);
        long long v115 = a1[10];
        if ((unint64_t)v115 <= v114) {
          long long v116 = v6;
        }
        else {
          long long v116 = v408;
        }
        if ((unint64_t)v115 <= v114) {
          long long v117 = a1[10];
        }
        else {
          long long v117 = 0;
        }
        long long v118 = *(uint64_t **)&(*v116)[4 * (v114 - (void)v117)];
        *a1 = v111 + 1;
        if ((unint64_t)v115 <= v110) {
          BOOL v119 = v6;
        }
        else {
          BOOL v119 = v408;
        }
        if ((unint64_t)v115 > v110) {
          long long v115 = 0;
        }
        uint64_t v120 = *(uint64_t **)&(*v119)[4 * (v110 - (void)v115)];
        if (v113 != 3)
        {
          unint64_t v4 = v118[1];
          if (v4 != v120[1]) {
            goto LABEL_464;
          }
          unsigned int v334 = (void *)*v120;
          unsigned int v335 = (void *)*v118;
          __src[0] = (void *)*v118;
          __src[1] = 0;
          v426[0] = v334;
          v426[1] = 0;
          if (v4)
          {
            unsigned int v336 = 0;
            while (1)
            {
              uint64_t v337 = mlir::ValueRange::dereference_iterator(__src, (uint64_t)v336);
              if (v337 != mlir::ValueRange::dereference_iterator(v426, (uint64_t)v426[1])) {
                goto LABEL_464;
              }
              unsigned int v336 = ++__src[1];
              v338 = ++v426[1];
              if (__src[0] == v335 && v336 == (void *)v4) {
                break;
              }
              if (v426[0] == v334 && v338 == (void *)v4) {
                goto LABEL_464;
              }
            }
            if (v426[0] != v334)
            {
LABEL_464:
              uint64_t v379 = 2;
LABEL_465:
              uint64_t v123 = &(*a1)[v379];
              *a1 = v123;
              goto LABEL_459;
            }
          }
          else
          {
            v338 = 0;
          }
          BOOL v307 = v338 != (void *)v4;
          uint64_t v379 = 2;
          if (!v307) {
            uint64_t v379 = 0;
          }
          goto LABEL_465;
        }
        uint64_t v121 = v118[1];
        if (v121 == v120[1])
        {
          if (std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(*v118, 0, *v118, v121, *v120, 0, *v120, v121))
          {
            uint64_t v122 = 0;
          }
          else
          {
            uint64_t v122 = 2;
          }
          uint64_t v123 = &(*a1)[v122];
          *a1 = v123;
        }
        else
        {
          uint64_t v123 = v111 + 3;
          *a1 = v111 + 3;
        }
LABEL_459:
        uint64_t v42 = *(unsigned int *)v123;
LABEL_460:
        __int16 v43 = a1[23];
LABEL_461:
        *a1 = &v43[v42];
        continue;
      case 4:
        goto LABEL_391;
      case 5:
        *a1 = v14 + 2;
        uint64_t v124 = *(void *)&a1[9][4 * v14[1]];
        unsigned int v125 = *((_DWORD *)v14 + 1);
        unint64_t v60 = v14 + 5;
        *a1 = v14 + 5;
        int v126 = *(_DWORD *)(v124 + 44);
        if (v14[4])
        {
          if ((v126 & 0x800000) != 0) {
            unsigned int v127 = *(_DWORD *)(v124 + 68);
          }
          else {
            unsigned int v127 = 0;
          }
          BOOL v128 = v127 < v125;
        }
        else
        {
          if ((v126 & 0x800000) != 0) {
            int v341 = *(_DWORD *)(v124 + 68);
          }
          else {
            int v341 = 0;
          }
          BOOL v128 = v341 != v125;
        }
        uint64_t v64 = 2 * v128;
        goto LABEL_364;
      case 6:
        unsigned int v131 = v14[2];
        uint64_t v130 = v14 + 2;
        uint64_t v129 = v131;
        *a1 = v130;
        unint64_t v132 = (unint64_t)a1[10];
        uint64_t v133 = *(void *)&a1[9][4 * *(v130 - 1)];
        *a1 = v130 + 1;
        uint64_t v134 = v408;
        if (v132 > v131) {
          unint64_t v132 = 0;
        }
        else {
          uint64_t v134 = v6;
        }
        uint64_t v135 = &v130[2 * (*(void *)(v133 + 48) != *(void *)&(*v134)[4 * (v129 - v132)]) + 1];
        *a1 = v135;
        uint64_t v42 = *(unsigned int *)v135;
        goto LABEL_460;
      case 7:
        *a1 = v14 + 2;
        unsigned int v136 = *((_DWORD *)v14 + 1);
        unsigned int v137 = *(_DWORD *)(*(void *)&a1[9][4 * v14[1]] + 36);
        BOOL v307 = v137 == v136;
        BOOL v138 = v137 < v136;
        unsigned int v139 = !v307;
        uint64_t v140 = 2 * v139;
        uint64_t v141 = 2 * v138;
        if (!v14[4]) {
          uint64_t v141 = v140;
        }
        int64_t v142 = &v14[v141 + 5];
        *a1 = v142;
        uint64_t v42 = *(unsigned int *)v142;
        goto LABEL_460;
      case 8:
        unsigned int v145 = v14[2];
        uint64_t v144 = v14 + 2;
        uint64_t v143 = v145;
        *a1 = v144;
        unint64_t v146 = (unint64_t)a1[10];
        uint64_t v147 = *(uint64_t **)&a1[9][4 * *(v144 - 1)];
        *a1 = v144 + 1;
        uint64_t v148 = v408;
        if (v146 > v145)
        {
          unint64_t v149 = 0;
        }
        else
        {
          uint64_t v148 = v6;
          unint64_t v149 = v146;
        }
        v426[0] = *(void **)&(*v148)[4 * (v143 - v149)];
        uint64_t Value = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v426);
        uint64_t v151 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v426);
        uint64_t v153 = (void **)(v151 + 8 * v152);
        uint64_t v154 = v147[1];
        if (v154 != v153 - Value) {
          goto LABEL_449;
        }
        unint64_t v4 = 0;
        if (!v154) {
          goto LABEL_445;
        }
        uint64_t v155 = *v147;
        while (Value != v153)
        {
          unint64_t v156 = mlir::TypeRange::dereference_iterator(v155, v4);
          __src[0] = *Value;
          if (v156 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
          {
            uint64_t v377 = 2;
            uint64_t v6 = v407;
            goto LABEL_450;
          }
          ++v4;
          ++Value;
          uint64_t v6 = v407;
          if (v154 == v4) {
            goto LABEL_446;
          }
        }
        uint64_t Value = v153;
LABEL_445:
        if (v4 != v154)
        {
LABEL_449:
          uint64_t v377 = 2;
          goto LABEL_450;
        }
LABEL_446:
        uint64_t v377 = 2;
        if (Value == v153) {
          uint64_t v377 = 0;
        }
LABEL_450:
        unsigned int v378 = &(*a1)[v377];
        *a1 = v378;
        uint64_t v42 = *(unsigned int *)v378;
        goto LABEL_460;
      case 9:
        *a1 = v14 + 2;
        ++*(_DWORD *)&a1[19][2 * v14[1]];
        uint64_t v24 = *((unsigned int *)a1 + 4);
        *a1 = *(unsigned __int16 **)&a1[1][4 * v24 - 4];
        *((_DWORD *)a1 + 4) = v24 - 1;
        continue;
      case 10:
        uint64_t v25 = v14[1];
        uint64_t v26 = v14[2];
        *a1 = v14 + 4;
        unint64_t v27 = v14[3];
        uint64_t v28 = a1[10];
        uint64_t v29 = v408;
        if ((unint64_t)v28 > v27) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v29 = v6;
        }
        v428[0] = *(void *)&(*v29)[4 * (v27 - (void)v28)];
        unint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v428);
        uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v428);
        if (v30 + 8 * v31 != v4) {
          operator new[]();
        }
        mlir::ValueRange::ValueRange((unint64_t *)__src, 0, 0);
        *(_OWORD *)&a1[13][8 * v26] = *(_OWORD *)__src;
        uint64_t v6 = v407;
        *(void *)&a1[9][4 * v25] = &a1[13][8 * v26];
        continue;
      case 11:
        uint64_t v157 = v14[1];
        *a1 = v14 + 3;
        unint64_t v158 = v14[2];
        uint64_t v159 = a1[10];
        unint64_t v4 = (unint64_t)v408;
        if ((unint64_t)v159 <= v158) {
          uint64_t v160 = v6;
        }
        else {
          uint64_t v160 = v408;
        }
        if ((unint64_t)v159 > v158) {
          uint64_t v159 = 0;
        }
        mlir::OperationState::OperationState(__src, a4, *(void *)&(*v160)[4 * (v158 - (void)v159)]);
        char v161 = *a1 + 1;
        int v162 = **a1;
        *a1 = v161;
        if (v162)
        {
          do
          {
            uint64_t v165 = *a1;
            unint64_t v166 = (*a1)[1];
            ++*a1;
            unsigned int v169 = *v165;
            unint64_t v167 = v165 + 2;
            uint64_t v168 = v169;
            unint64_t v170 = (unint64_t)a1[10];
            BOOL v171 = v170 > v169;
            if (v170 <= v169) {
              unsigned int v172 = v6;
            }
            else {
              unsigned int v172 = v408;
            }
            if (v171) {
              uint64_t v173 = 0;
            }
            else {
              uint64_t v173 = a1[10];
            }
            uint64_t v174 = *(void *)&(*v172)[4 * (v168 - (void)v173)];
            *a1 = v167;
            if (v170 <= v166) {
              uint64_t v175 = v6;
            }
            else {
              uint64_t v175 = v408;
            }
            if (v170 <= v166) {
              unint64_t v176 = v170;
            }
            else {
              unint64_t v176 = 0;
            }
            uint64_t v177 = *(void *)&(*v175)[4 * (v166 - v176)];
            if (v177)
            {
              ZinMirCacheTensors::ZinMirCacheTensors(v426, v174, v177);
              mlir::NamedAttrList::push_back((uint64_t)v415, (uint64_t)v426[0], (uint64_t)v426[1]);
            }
            --v162;
          }
          while (v162);
          int v163 = *(*a1)++;
          if (!v163) {
            goto LABEL_277;
          }
        }
        else
        {
          int v164 = *v161;
          int v163 = v164;
          *a1 = v161 + 1;
          if (!v164) {
            goto LABEL_277;
          }
        }
        if (v163 == 0xFFFF)
        {
          v296 = *(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *, void *, unint64_t, uint64_t *))mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>((uint64_t)__src[1] + 32);
          uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)__src);
          unsigned int v298 = __src[0];
          mlir::ValueRange::ValueRange((unint64_t *)v426, v410, v411);
          unsigned int v299 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)__src);
          unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v415, v299);
          unsigned int v301 = v423;
          mlir::ValueRange::ValueRange(v428, v421[2], v422);
          unsigned int v302 = v298;
          unsigned int v303 = v301;
          uint64_t v6 = v407;
          unint64_t v4 = (unint64_t)v408;
          if (!v296(Context, v302, 1, v426[0], v426[1], Dictionary, v303)) {
            goto LABEL_278;
          }
        }
        else
        {
          int v342 = 0;
          do
          {
            while (1)
            {
              v343 = *a1;
              int v344 = **a1;
              *a1 += 2;
              unint64_t v345 = v343[1];
              if (v344 != 2) {
                break;
              }
              v346 = a1[10];
              if ((unint64_t)v346 <= v345) {
                unsigned int v347 = v6;
              }
              else {
                unsigned int v347 = (void *)v4;
              }
              if ((unint64_t)v346 > v345) {
                v346 = 0;
              }
              uint64_t v348 = *(void *)(*v347 + 8 * (v345 - (void)v346));
              uint64_t v349 = v413;
              if (v413 >= (unint64_t)HIDWORD(v413))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v412, v414, v413 + 1, 8);
                uint64_t v349 = v413;
              }
              *(void *)&v412[8 * v349] = v348;
              LODWORD(v413) = v413 + 1;
              if (++v342 == v163) {
                goto LABEL_277;
              }
            }
            unsigned int v350 = *(uint64_t **)(*(void *)v4 + 8 * v345);
            uint64_t v351 = *v350;
            uint64_t v352 = v350[1];
            int v353 = v413;
            unint64_t v354 = v352 + v413;
            if (v354 > HIDWORD(v413))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v412, v414, v354, 8);
              int v353 = v413;
            }
            if (v352)
            {
              uint64_t v355 = 0;
              uint64_t v356 = &v412[8 * v353];
              do
              {
                *(void *)&v356[8 * v355] = mlir::TypeRange::dereference_iterator(v351, v355);
                ++v355;
              }
              while (v352 != v355);
              int v353 = v413;
              uint64_t v6 = v407;
              unint64_t v4 = (unint64_t)v408;
            }
            LODWORD(v413) = v353 + v352;
            ++v342;
          }
          while (v342 != v163);
        }
LABEL_277:
        *(void *)(*(void *)v4 + 8 * v157) = mlir::OpBuilder::create(v405, (const mlir::OperationState *)__src);
LABEL_278:
        mlir::OperationState::~OperationState((mlir::OperationState *)__src);
        continue;
      case 12:
        uint64_t v178 = v14[1];
        uint64_t v179 = v14[2];
        __src[0] = &v410;
        __src[1] = (void *)0x600000000;
        *a1 = v14 + 4;
        int v180 = v14[3];
        if (!v14[3]) {
          goto LABEL_281;
        }
        unsigned int v181 = 0;
        int v182 = 0;
        unint64_t v4 = (unint64_t)v408;
        do
        {
          while (1)
          {
            uint64_t v183 = *a1;
            int v184 = **a1;
            *a1 += 2;
            unint64_t v185 = v183[1];
            if (v184 != 2) {
              break;
            }
            uint64_t v186 = a1[10];
            int v187 = v407;
            if ((unint64_t)v186 > v185)
            {
              int v187 = (void *)v4;
              uint64_t v186 = 0;
            }
            uint64_t v188 = *(void *)(*v187 + 8 * (v185 - (void)v186));
            if (v181 >= HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v410, v181 + 1, 8);
              unsigned int v181 = __src[1];
            }
            *((void *)__src[0] + v181) = v188;
            unsigned int v181 = ++LODWORD(__src[1]);
            if (++v182 == v180) {
              goto LABEL_279;
            }
          }
          unsigned int v189 = *(uint64_t **)(*(void *)v4 + 8 * v185);
          uint64_t v190 = *v189;
          uint64_t v191 = v189[1];
          unint64_t v192 = v191 + v181;
          if (v192 > HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v410, v192, 8);
            unsigned int v181 = __src[1];
          }
          if (v191)
          {
            uint64_t v193 = 0;
            int v194 = (char *)__src[0] + 8 * v181;
            do
            {
              *(void *)&v194[8 * v193] = mlir::TypeRange::dereference_iterator(v190, v193);
              ++v193;
            }
            while (v191 != v193);
            unsigned int v181 = __src[1];
            unint64_t v4 = (unint64_t)v408;
          }
          v181 += v191;
          LODWORD(__src[1]) = v181;
          ++v182;
        }
        while (v182 != v180);
LABEL_279:
        if (v181) {
          operator new[]();
        }
LABEL_281:
        mlir::ValueRange::ValueRange((unint64_t *)v426, 0, 0);
        *(_OWORD *)&a1[13][8 * v179] = *(_OWORD *)v426;
        *(void *)&a1[9][4 * v178] = &a1[13][8 * v179];
        if (__src[0] != &v410) {
          free(__src[0]);
        }
        uint64_t v6 = v407;
        continue;
      case 13:
        uint64_t v32 = v14[1];
        *a1 = v14 + 3;
        uint64_t v33 = v14[2];
        __src[0] = &v410;
        __src[1] = (void *)0x600000000;
        if (LODWORD(__src[1])) {
          operator new[]();
        }
        mlir::ValueRange::ValueRange((unint64_t *)v426, 0, 0);
        *(_OWORD *)&a1[16][8 * v33] = *(_OWORD *)v426;
        *(void *)&a1[9][4 * v32] = &a1[16][8 * v33];
        if (__src[0] != &v410) {
          free(__src[0]);
        }
        uint64_t v6 = v407;
        continue;
      case 14:
        *a1 = v14 + 2;
        (*(void (**)(uint64_t, void))(*(void *)a2 + 40))(a2, *(void *)&a1[9][4 * v14[1]]);
        continue;
      case 15:
        *a1 = v14 + 2;
        unint64_t v195 = v14[1];
        uint64_t v196 = a1[10];
        if ((unint64_t)v196 <= v195) {
          uint64_t v197 = v6;
        }
        else {
          uint64_t v197 = v408;
        }
        if ((unint64_t)v196 > v195) {
          uint64_t v196 = 0;
        }
        unint64_t v198 = *(void **)&(*v197)[4 * (v195 - (void)v196)];
        unint64_t v199 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v200 = v14[4];
        if (v198)
        {
          if (v198[1] <= v199) {
            uint64_t v201 = 0;
          }
          else {
            uint64_t v201 = *(void *)(*v198 + 8 * v199);
          }
          *(void *)&(*v408)[4 * v200] = v201;
        }
        else
        {
          *(void *)&(*v408)[4 * v200] = 0;
        }
        continue;
      case 16:
        *a1 = v14 + 2;
        uint64_t v202 = a1[9];
        uint64_t v203 = *(uint64_t **)&v202[4 * v14[1]];
        unint64_t v204 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v205 = v14[4];
        if (v203)
        {
          if (v203[1] <= v204) {
            *(void *)&v202[4 * v205] = 0;
          }
          else {
            *(void *)&(*v408)[4 * v205] = mlir::TypeRange::dereference_iterator(*v203, v204);
          }
        }
        else
        {
          *(void *)&v202[4 * v205] = 0;
        }
        continue;
      case 17:
        *a1 = v14 + 2;
        uint64_t v206 = a1[9];
        uint64_t v207 = *(void **)&v206[4 * v14[1]];
        unint64_t v208 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v209 = v14[4];
        if (!v207) {
          goto LABEL_192;
        }
        if (v207[1] <= v208)
        {
          *(void *)&v206[4 * v209] = 0;
        }
        else
        {
          uint64_t v207 = (void *)mlir::ValueRange::dereference_iterator(v207, v208);
          uint64_t v206 = *v408;
LABEL_192:
          *(void *)&v206[4 * v209] = v207;
        }
        continue;
      case 18:
        return result;
      case 19:
        uint64_t v34 = v14[1];
        uint64_t v35 = v14[2];
        unint64_t v36 = v14 + 5;
        *a1 = v14 + 5;
        uint64_t v37 = v14[4];
        __int16 v38 = a1[19];
        uint64_t v39 = &a1[11][8 * v34];
        unint64_t v40 = *(unsigned int *)&v38[2 * v37];
        if (*((void *)v39 + 1) <= v40)
        {
          *(_DWORD *)&v38[2 * v37] = 0;
          *a1 = v36;
          uint64_t v42 = *(unsigned int *)v36;
          __int16 v43 = *v402;
        }
        else
        {
          *(void *)&a1[9][4 * v35] = *(void *)(*(void *)v39 + 8 * v40);
          unint64_t v41 = *((unsigned int *)a1 + 4);
          if (v41 >= *((unsigned int *)a1 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v401, v400, v41 + 1, 8);
            unint64_t v41 = *((unsigned int *)a1 + 4);
          }
          *(void *)&a1[1][4 * v41] = v14;
          ++*((_DWORD *)a1 + 4);
          uint64_t v42 = 2;
          __int16 v43 = *a1;
        }
        goto LABEL_461;
      case 20:
        unsigned int v212 = v14[3];
        int v211 = v14 + 3;
        uint64_t v210 = v212;
        unint64_t v4 = *(v211 - 2);
        *a1 = v211;
        unint64_t v213 = (unint64_t)a1[10];
        uint64_t v214 = *(void *)&a1[9][4 * *(v211 - 1)];
        *a1 = v211 + 1;
        uint64_t v215 = v408;
        if (v213 > v212)
        {
          unint64_t v216 = 0;
        }
        else
        {
          uint64_t v215 = v6;
          unint64_t v216 = v213;
        }
        int v217 = *(void **)&(*v215)[4 * (v210 - v216)];
        __src[0] = v217;
        if (!*(unsigned char *)(v214 + 47)) {
          goto LABEL_199;
        }
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__src);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(v214, AttrData, v219);
        if (!v221)
        {
          int v217 = __src[0];
LABEL_199:
          uint64_t InherentAttr = mlir::DictionaryAttr::get(v214 + 56, (uint64_t)v217);
        }
        *(void *)&(*v408)[4 * v4] = InherentAttr;
        continue;
      case 21:
        uint64_t v44 = v14[1];
        *a1 = v14 + 3;
        unint64_t v45 = v14[2];
        uint64_t v46 = a1[10];
        uint64_t v47 = v408;
        if ((unint64_t)v46 > v45) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v47 = v6;
        }
        unint64_t v4 = *(void *)&(*v47)[4 * (v45 - (void)v46)];
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v4 + 8))
        {
          unint64_t v48 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v4 + 8);
          __src[0] = (void *)v4;
          __src[1] = v48;
          if (v4)
          {
            uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)__src);
            goto LABEL_359;
          }
        }
        else
        {
          LOBYTE(v4) = 0;
          __src[0] = 0;
          __src[1] = 0;
        }
        uint64_t canMapOperands = 0;
LABEL_359:
        *(void *)&(*v408)[4 * v44] = canMapOperands;
        continue;
      case 22:
        uint64_t v222 = v14[1];
        if (v14[2] == 4)
        {
          *a1 = v14 + 4;
          __src[0] = *(void **)&a1[9][4 * v14[3]];
          if (__src[0])
          {
            uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)__src);
            unint64_t v4 = (unint64_t)v408;
            goto LABEL_443;
          }
          uint64_t DefiningOp = 0;
LABEL_432:
          unint64_t v4 = (unint64_t)v408;
          goto LABEL_443;
        }
        *a1 = v14 + 4;
        uint64_t DefiningOp = *(void **)&a1[9][4 * v14[3]];
        if (!DefiningOp) {
          goto LABEL_432;
        }
        unint64_t v4 = (unint64_t)v408;
        if (DefiningOp[1])
        {
          __src[0] = (void *)mlir::ValueRange::dereference_iterator(DefiningOp, 0);
          uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)__src);
        }
        else
        {
          uint64_t DefiningOp = 0;
        }
LABEL_443:
        *(void *)(*(void *)v4 + 8 * v222) = DefiningOp;
        continue;
      case 23:
      case 24:
      case 25:
      case 26:
        unsigned int v20 = v14[2];
        uint64_t v19 = v14 + 2;
        uint64_t v18 = v20;
        *a1 = v19;
        uint64_t v21 = a1[9];
        uint64_t v22 = *(void *)&v21[4 * *(v19 - 1)];
        *a1 = v19 + 1;
        if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
        {
          uint64_t v23 = (v15 - 23);
          if (*(_DWORD *)(v22 + 68) <= v23) {
            *(void *)&v21[4 * v18] = 0;
          }
          else {
            *(void *)&v21[4 * v18] = *(void *)(*(void *)(v22 + 72) + 32 * v23 + 24);
          }
        }
        else
        {
          *(void *)&v21[4 * v18] = 0;
        }
        continue;
      case 27:
        unsigned int v226 = v14[4];
        uint64_t v225 = v14 + 4;
        uint64_t v224 = v226;
        uint64_t v227 = *(unsigned int *)(v225 - 3);
        *a1 = v225;
        int v228 = a1[9];
        uint64_t v229 = *(void *)&v228[4 * *(v225 - 1)];
        *a1 = v225 + 1;
        if ((*(unsigned char *)(v229 + 46) & 0x80) != 0)
        {
          if (*(_DWORD *)(v229 + 68) <= v227) {
            *(void *)&v228[4 * v224] = 0;
          }
          else {
            *(void *)&v228[4 * v224] = *(void *)(*(void *)(v229 + 72) + 32 * v227 + 24);
          }
        }
        else
        {
          *(void *)&v228[4 * v224] = 0;
        }
        continue;
      case 28:
        unsigned int v232 = v14[4];
        unsigned int v231 = v14 + 4;
        uint64_t v230 = v232;
        unint64_t v233 = *(unsigned int *)(v231 - 3);
        *a1 = v231;
        uint64_t v234 = *(void *)&a1[9][4 * *(v231 - 1)];
        *a1 = v231 + 1;
        if ((*(unsigned char *)(v234 + 46) & 0x80) != 0)
        {
          uint64_t v235 = *(void *)(v234 + 72);
          unint64_t v4 = *(unsigned int *)(v234 + 68);
          int v236 = a1[16];
          if (v233 == -1) {
            goto LABEL_474;
          }
        }
        else
        {
          uint64_t v235 = 0;
          unint64_t v4 = 0;
          int v236 = a1[16];
          if (v233 == -1) {
            goto LABEL_474;
          }
        }
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>((void *)(v234 + 48)))
        {
          BOOL v358 = v4 >= v233;
          v4 -= v233;
          if (!v358) {
            goto LABEL_478;
          }
          v235 += 32 * v233;
          goto LABEL_474;
        }
        if (*(unsigned char *)(v234 + 47)
          && (uint64_t v237 = mlir::Operation::getInherentAttr(v234, (uint64_t)"operandSegmentSizes", 19), v238))
        {
          unint64_t v4 = v237;
          if (!v237) {
            goto LABEL_478;
          }
        }
        else
        {
          unint64_t v4 = mlir::DictionaryAttr::get(v234 + 56, "operandSegmentSizes", 0x13uLL);
          if (!v4) {
            goto LABEL_478;
          }
        }
        BOOL v361 = mlir::detail::DenseArrayAttrImpl<int>::classof((void *)v4);
        if (v361) {
          unsigned int v362 = (void *)v4;
        }
        else {
          unsigned int v362 = 0;
        }
        __src[0] = v362;
        if (v361)
        {
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v363 > v233)
          {
            uint64_t v364 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
            v365 = (int *)(v364 + 4 * v233);
            if (v233)
            {
              unint64_t v366 = (v233 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v366 < 7)
              {
                unsigned int v367 = 0;
                unsigned int v368 = (int *)v364;
                goto LABEL_471;
              }
              unint64_t v381 = v366 + 1;
              uint64_t v382 = (v366 + 1) & 0x7FFFFFFFFFFFFFF8;
              unsigned int v368 = (int *)(v364 + 4 * v382);
              v383 = (int32x4_t *)(v364 + 16);
              int32x4_t v384 = 0uLL;
              uint64_t v385 = v382;
              int32x4_t v386 = 0uLL;
              do
              {
                int32x4_t v384 = vaddq_s32(v383[-1], v384);
                int32x4_t v386 = vaddq_s32(*v383, v386);
                v383 += 2;
                v385 -= 8;
              }
              while (v385);
              unsigned int v367 = vaddvq_s32(vaddq_s32(v386, v384));
              if (v381 != v382)
              {
                do
                {
LABEL_471:
                  int v387 = *v368++;
                  v367 += v387;
                }
                while (v368 != v365);
              }
              uint64_t v380 = v367;
            }
            else
            {
              uint64_t v380 = 0;
            }
            unint64_t v4 = *v365;
            v235 += 32 * v380;
LABEL_474:
            if (v230 != 0xFFFF)
            {
              mlir::ValueRange::ValueRange((unint64_t *)__src, v235, v4);
              unsigned int v388 = &v236[8 * v230];
              *(_OWORD *)unsigned int v388 = *(_OWORD *)__src;
              goto LABEL_479;
            }
            if (v4 == 1)
            {
              unsigned int v388 = *(unsigned __int16 **)(v235 + 24);
              goto LABEL_479;
            }
          }
        }
LABEL_478:
        unsigned int v388 = 0;
LABEL_479:
        uint64_t v6 = v407;
        uint64_t v389 = *(*a1)++;
        *(void *)&a1[9][4 * v389] = v388;
        continue;
      case 29:
      case 30:
      case 31:
      case 32:
        unsigned int v7 = v15 - 29;
        unsigned int v10 = v14[2];
        uint64_t v9 = v14 + 2;
        uint64_t v8 = v10;
        *a1 = v9;
        uint64_t v11 = a1[9];
        uint64_t v12 = *(void *)&v11[4 * *(v9 - 1)];
        *a1 = v9 + 1;
        uint64_t v13 = v12 - 16 * (v15 - 28);
        if (*(_DWORD *)(v12 + 36) <= v7) {
          uint64_t v13 = 0;
        }
        *(void *)&v11[4 * v8] = v13;
        continue;
      case 33:
        unsigned int v241 = v14[4];
        unsigned int v240 = v14 + 4;
        uint64_t v239 = v241;
        uint64_t v242 = *(unsigned int *)(v240 - 3);
        *a1 = v240;
        unsigned long long v243 = a1[9];
        uint64_t v244 = *(void *)&v243[4 * *(v240 - 1)];
        *a1 = v240 + 1;
        if (*(_DWORD *)(v244 + 36) <= v242)
        {
          *(void *)&v243[4 * v239] = 0;
        }
        else if (v242 > 5)
        {
          *(void *)&v243[4 * v239] = v244 - 24 * (v242 - 5) - 96;
        }
        else
        {
          *(void *)&v243[4 * v239] = v244 - 16 * v242 - 16;
        }
        continue;
      case 34:
        unsigned int v247 = v14[4];
        unsigned int v245 = v14 + 4;
        uint64_t v246 = v247;
        unint64_t v4 = *(unsigned int *)(v245 - 3);
        *a1 = v245;
        uint64_t v248 = *(void *)&a1[9][4 * *(v245 - 1)];
        *a1 = v245 + 1;
        unint64_t v249 = *(unsigned int *)(v248 + 36);
        long long v250 = a1[16];
        if (v249) {
          uint64_t NextResultAtOffset = v248 - 16;
        }
        else {
          uint64_t NextResultAtOffset = 0;
        }
        if (v4 == -1)
        {
          uint64_t v6 = v407;
          if (v246 != 0xFFFF) {
            goto LABEL_439;
          }
          goto LABEL_487;
        }
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>((void *)(v248 + 48)))
        {
          if (v249 < v4)
          {
            unsigned int v359 = 0;
            uint64_t v6 = v407;
            goto LABEL_490;
          }
          uint64_t v6 = v407;
          if (v4) {
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v4);
          }
          v249 -= v4;
          if (v246 != 0xFFFF)
          {
LABEL_439:
            mlir::ValueRange::ValueRange((unint64_t *)__src, NextResultAtOffset, v249);
            unsigned int v359 = &v250[8 * v246];
            *(_OWORD *)unsigned int v359 = *(_OWORD *)__src;
            goto LABEL_490;
          }
          goto LABEL_487;
        }
        if (*(unsigned char *)(v248 + 47)
          && (uint64_t v252 = mlir::Operation::getInherentAttr(v248, (uint64_t)"resultSegmentSizes", 18), v253))
        {
          uint64_t v254 = (void *)v252;
          uint64_t v6 = v407;
          if (!v252) {
            goto LABEL_489;
          }
        }
        else
        {
          uint64_t v254 = (void *)mlir::DictionaryAttr::get(v248 + 56, "resultSegmentSizes", 0x12uLL);
          uint64_t v6 = v407;
          if (!v254) {
            goto LABEL_489;
          }
        }
        BOOL v369 = mlir::detail::DenseArrayAttrImpl<int>::classof(v254);
        if (v369) {
          v370 = v254;
        }
        else {
          v370 = 0;
        }
        __src[0] = v370;
        if (v369)
        {
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v371 > v4)
          {
            uint64_t v372 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
            v373 = (int *)(v372 + 4 * v4);
            if (v4)
            {
              unint64_t v374 = (v4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v374 < 7)
              {
                unsigned int v375 = 0;
                unsigned int v376 = (int *)v372;
                goto LABEL_483;
              }
              unint64_t v390 = v374 + 1;
              uint64_t v391 = (v374 + 1) & 0x7FFFFFFFFFFFFFF8;
              unsigned int v376 = (int *)(v372 + 4 * v391);
              unsigned int v392 = (int32x4_t *)(v372 + 16);
              int32x4_t v393 = 0uLL;
              uint64_t v394 = v391;
              int32x4_t v395 = 0uLL;
              do
              {
                int32x4_t v393 = vaddq_s32(v392[-1], v393);
                int32x4_t v395 = vaddq_s32(*v392, v395);
                v392 += 2;
                v394 -= 8;
              }
              while (v394);
              unsigned int v375 = vaddvq_s32(vaddq_s32(v395, v393));
              if (v390 != v391)
              {
                do
                {
LABEL_483:
                  int v396 = *v376++;
                  v375 += v396;
                }
                while (v376 != v373);
              }
              LODWORD(v4) = *v373;
              if (v375) {
                uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v375);
              }
            }
            else
            {
              LODWORD(v4) = *v373;
            }
            unint64_t v249 = (int)v4;
            if (v246 != 0xFFFF) {
              goto LABEL_439;
            }
LABEL_487:
            if (v249 == 1)
            {
              unsigned int v359 = (unsigned __int16 *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
              goto LABEL_490;
            }
          }
        }
LABEL_489:
        unsigned int v359 = 0;
LABEL_490:
        uint64_t v397 = *(*a1)++;
        *(void *)&a1[9][4 * v397] = v359;
        continue;
      case 35:
        uint64_t v50 = v14[1];
        *a1 = v14 + 3;
        unint64_t v4 = (unint64_t)&a1[11][8 * v14[2]];
        *(void *)&a1[9][4 * v50] = v4;
        if (*(void *)v4) {
          MEMORY[0x21667D390](*(void *)v4, 0x20C8093837F09);
        }
        *(void *)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        int v51 = *a1;
        int v52 = **a1;
        *a1 += 2;
        uint64_t v53 = *(void *)&a1[9][4 * v51[1]];
        if (v52 == 4)
        {
          if (v53)
          {
            unint64_t v54 = *(void **)v53;
            if (*(void *)v53)
            {
              uint64_t v55 = 0;
              uint64_t v56 = -1;
              do
              {
                unint64_t v54 = (void *)*v54;
                ++v56;
                v55 += 8;
              }
              while (v54);
            }
            operator new[]();
          }
        }
        else if (v53)
        {
          __src[0] = &v410;
          __src[1] = (void *)0x600000000;
          unsigned int v304 = *(void **)v53;
          v426[0] = *(void **)v53;
          v426[1] = 0;
          unsigned int v305 = *(void **)(v53 + 8);
          if (!v305) {
LABEL_441:
          }
            operator new[]();
          unsigned int v306 = 0;
          while (2)
          {
            unsigned int v308 = (void *)mlir::ValueRange::dereference_iterator(v426, (uint64_t)v306);
            unsigned int v309 = (void *)*v308;
            if (*v308)
            {
              uint64_t v310 = 0;
              BOOL v311 = (void *)*v308;
              do
              {
                ++v310;
                BOOL v311 = (void *)*v311;
              }
              while (v311);
              uint64_t v312 = LODWORD(__src[1]);
              unint64_t v313 = v310 + LODWORD(__src[1]);
              if (v313 > HIDWORD(__src[1]))
              {
LABEL_296:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v410, v313, 8);
                uint64_t v312 = LODWORD(__src[1]);
              }
            }
            else
            {
              LODWORD(v310) = 0;
              uint64_t v312 = LODWORD(__src[1]);
              unint64_t v313 = LODWORD(__src[1]);
              if (LODWORD(__src[1]) > (unint64_t)HIDWORD(__src[1])) {
                goto LABEL_296;
              }
            }
            if (v309)
            {
              BOOL v314 = (char *)__src[0] + 8 * v312;
              do
              {
                *v314++ = v309[2];
                unsigned int v309 = (void *)*v309;
              }
              while (v309);
            }
            LODWORD(__src[1]) = v312 + v310;
            unsigned int v306 = ++v426[1];
            BOOL v307 = v426[0] == v304 && v306 == v305;
            if (v307) {
              goto LABEL_441;
            }
            continue;
          }
        }
        continue;
      case 36:
        uint64_t v57 = v14[1];
        *a1 = v14 + 3;
        uint64_t v58 = a1[9];
        unint64_t v59 = *(void *)&v58[4 * v14[2]];
        if (v59) {
          unint64_t v59 = *(void *)(v59 + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)&v58[4 * v57] = v59;
        continue;
      case 37:
        uint64_t v255 = v14[1];
        unint64_t v4 = v14[2];
        *a1 = v14 + 4;
        uint64_t v256 = a1[9];
        uint64_t v257 = *(__n128 **)&v256[4 * v14[3]];
        if (v257)
        {
          mlir::ValueRange::getTypes(v257, (__n128 *)__src);
          v258 = __src[0];
          v259 = __src[1];
          uint64_t v260 = v411;
          v426[0] = __src[0];
          v426[1] = __src[1];
          if (__src[1])
          {
            v258 = (void *)mlir::ValueRange::offset_base(v426, (uint64_t)__src[1]);
            v259 = v426[1];
          }
          mlir::TypeRange::TypeRange((unint64_t *)v426, (uint64_t)v258, v260 - (void)v259);
          *(_OWORD *)&a1[13][8 * v4] = *(_OWORD *)v426;
          *(void *)&a1[9][4 * v255] = &a1[13][8 * v4];
        }
        else
        {
          *(void *)&v256[4 * v255] = 0;
        }
        continue;
      case 38:
        unint64_t v60 = v14 + 2;
        *a1 = v14 + 2;
        unint64_t v61 = v14[1];
        uint64_t v62 = a1[10];
        uint64_t v63 = v408;
        if ((unint64_t)v62 > v61) {
          uint64_t v62 = 0;
        }
        else {
          uint64_t v63 = v6;
        }
        uint64_t v64 = 2 * (*(void *)&(*v63)[4 * (v61 - (void)v62)] == 0);
LABEL_364:
        *a1 = &v60[v64];
        uint64_t v42 = *(unsigned int *)&v60[v64];
        goto LABEL_460;
      case 39:
        LOWORD(v428[0]) = a1[25][v14[1]];
        int v261 = LOWORD(v428[0]);
        *a1 = v14 + 2;
        unint64_t v4 = (unint64_t)&a1[23][*((unsigned int *)v14 + 1)];
        if (v261 != 0xFFFF)
        {
          *a1 = v14 + 5;
          unint64_t v262 = v14[4];
          __src[0] = &v410;
          __src[1] = (void *)0x400000000;
          if (v262 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v410, v262, 8);
            unsigned int v263 = __src[1];
            goto LABEL_491;
          }
          unsigned int v263 = 0;
          unsigned int v360 = (uint64_t **)&v410;
          if (v262)
          {
            do
            {
LABEL_491:
              uint64_t v398 = *(*a1)++;
              uint64_t v399 = *(void *)(*(void *)&a1[9][4 * v398] + 24);
              if (v263 >= HIDWORD(__src[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v410, v263 + 1, 8);
                unsigned int v263 = __src[1];
              }
              *((void *)__src[0] + v263) = v399;
              unsigned int v263 = ++LODWORD(__src[1]);
              LODWORD(v262) = v262 - 1;
            }
            while (v262);
            unsigned int v360 = (uint64_t **)__src[0];
          }
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)v405, v360, (mlir::MLIRContext *)v263, 0);
        }
        *a1 = (unsigned __int16 *)v4;
        break;
      case 40:
        *a1 = v14 + 2;
        uint64_t v264 = *(void *)&a1[9][4 * v14[1]];
        __src[0] = &v410;
        __src[1] = (void *)0x1000000000;
        mlir::ValueRange::ValueRange((unint64_t *)v426, (uint64_t)__src[0], LODWORD(__src[1]));
        (*(void (**)(uint64_t, uint64_t, void *, void *))(*(void *)a2 + 24))(a2, v264, v426[0], v426[1]);
        unint64_t v97 = __src[0];
        if (__src[0] != &v410) {
LABEL_81:
        }
          free(v97);
        continue;
      case 41:
        *a1 = v14 + 2;
        unint64_t v65 = v14[1];
        unint64_t v66 = a1[10];
        if ((unint64_t)v66 <= v65) {
          unsigned int v67 = v6;
        }
        else {
          unsigned int v67 = v408;
        }
        if ((unint64_t)v66 <= v65) {
          uint64_t v68 = a1[10];
        }
        else {
          uint64_t v68 = 0;
        }
        unint64_t v4 = *(void *)&(*v67)[4 * (v65 - (void)v68)];
        *a1 = v14 + 3;
        unint64_t v69 = v14[2];
        if ((unint64_t)v66 <= v69) {
          BOOL v70 = v6;
        }
        else {
          BOOL v70 = v408;
        }
        if ((unint64_t)v66 > v69) {
          unint64_t v66 = 0;
        }
        __src[0] = *(void **)&(*v70)[4 * (v69 - (void)v66)];
        uint64_t v71 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v72 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v74 = v72 + 8 * v73;
        if (v74 == v71) {
          goto LABEL_458;
        }
        uint64_t v75 = -v71;
        while (*(void *)v71 != v4)
        {
          v71 += 8;
          v75 -= 8;
          if (v71 == v74) {
            goto LABEL_458;
          }
        }
        uint64_t v357 = (uint64_t)*a1 + ((-v75 - mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src)) >> 1);
        goto LABEL_435;
      case 42:
        *a1 = v14 + 2;
        unsigned int v291 = a1[10];
        uint64_t v292 = *(void *)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v293 = v14[2];
        int64_t v294 = v408;
        if ((unint64_t)v291 > v293) {
          unsigned int v291 = 0;
        }
        else {
          int64_t v294 = v6;
        }
        __src[0] = *(void **)&(*v294)[4 * (v293 - (void)v291)];
        uint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        if (isValidIntOrFloat)
        {
          uint64_t RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
          LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
          uint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        }
        else
        {
          uint64_t RawStringData = 0;
        }
        if ((*(unsigned char *)(v292 + 46) & 0x80) != 0) {
          int v91 = *(_DWORD *)(v292 + 68);
        }
        else {
          int v91 = 0;
        }
        if (!isValidIntOrFloat) {
          goto LABEL_458;
        }
        if ((_BYTE)v4) {
          goto LABEL_352;
        }
        uint64_t i = 0;
        while (RawStringData[i] != v91)
        {
          if (isValidIntOrFloat == ++i) {
            goto LABEL_458;
          }
        }
LABEL_434:
        uint64_t v357 = (uint64_t)&(*a1)[2 * i];
        goto LABEL_435;
      case 43:
        uint64_t v76 = v14[2];
        *a1 = v14 + 2;
        uint64_t v77 = *(void *)(*(void *)&a1[9][4 * v14[1]] + 48);
        uint64_t v16 = v14 + 3;
        *a1 = v14 + 3;
        if (!v76) {
          goto LABEL_391;
        }
        uint64_t v78 = 0;
        unint64_t v79 = a1[10];
        uint64_t v80 = -10 - 2 * v76;
        uint64_t v81 = v76 - 1;
        while (1)
        {
          *a1 = &v14[v78 + 4];
          unint64_t v82 = v14[v78 + 3];
          __int16 v83 = (unint64_t)v79 <= v82 ? v6 : v408;
          int64_t v84 = (unint64_t)v79 <= v82 ? v79 : 0;
          if (*(void *)&(*v83)[4 * (v82 - (void)v84)] == v77) {
            break;
          }
          v80 -= 4;
          --v81;
          ++v78;
          if (v81 == -1)
          {
            uint64_t v16 = &v14[v78 + 3];
            goto LABEL_391;
          }
        }
        uint64_t v16 = (unsigned __int16 *)((char *)v14 - v80);
        *a1 = (unsigned __int16 *)((char *)v14 - v80);
LABEL_391:
        uint64_t v42 = *(unsigned int *)v16;
        goto LABEL_460;
      case 44:
        *a1 = v14 + 2;
        __int16 v85 = a1[10];
        uint64_t v86 = *(void *)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v87 = v14[2];
        unint64_t v88 = v408;
        if ((unint64_t)v85 > v87) {
          __int16 v85 = 0;
        }
        else {
          unint64_t v88 = v6;
        }
        __src[0] = *(void **)&(*v88)[4 * (v87 - (void)v85)];
        mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        uint64_t RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
        LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        if (!NumElements) {
          goto LABEL_458;
        }
        int v91 = *(_DWORD *)(v86 + 36);
        if ((v4 & 1) == 0)
        {
          for (uint64_t i = 0; i != NumElements; ++i)
          {
            if (RawStringData[i] == v91) {
              goto LABEL_434;
            }
          }
          goto LABEL_458;
        }
LABEL_352:
        if (*RawStringData != v91) {
          goto LABEL_458;
        }
        uint64_t i = 0;
        goto LABEL_434;
      case 45:
        *a1 = v14 + 2;
        unint64_t v265 = v14[1];
        unsigned int v266 = a1[10];
        if ((unint64_t)v266 <= v265) {
          unsigned int v267 = v6;
        }
        else {
          unsigned int v267 = v408;
        }
        if ((unint64_t)v266 <= v265) {
          v268 = a1[10];
        }
        else {
          v268 = 0;
        }
        unint64_t v4 = *(void *)&(*v267)[4 * (v265 - (void)v268)];
        *a1 = v14 + 3;
        unint64_t v269 = v14[2];
        if ((unint64_t)v266 <= v269) {
          uint64_t v270 = v6;
        }
        else {
          uint64_t v270 = v408;
        }
        if ((unint64_t)v266 > v269) {
          unsigned int v266 = 0;
        }
        __src[0] = *(void **)&(*v270)[4 * (v269 - (void)v266)];
        unsigned int v271 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v272 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        unsigned int v274 = (void **)(v272 + 8 * v273);
        if (v274 == v271) {
          goto LABEL_458;
        }
        uint64_t v275 = 0;
        while (1)
        {
          __src[0] = *v271;
          if (v4 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src)) {
            break;
          }
          ++v271;
          v275 += 8;
          if (v271 == v274)
          {
LABEL_458:
            uint64_t v123 = *a1;
            goto LABEL_459;
          }
        }
        uint64_t v357 = (uint64_t)*a1 + (v275 >> 1);
LABEL_435:
        uint64_t v123 = (unsigned __int16 *)(v357 + 4);
        *a1 = v123;
        goto LABEL_459;
      case 46:
        *a1 = v14 + 2;
        unsigned int v276 = a1[10];
        unsigned int v277 = *(uint64_t **)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v278 = v14[2];
        uint64_t v279 = v408;
        if ((unint64_t)v276 > v278) {
          unsigned int v276 = 0;
        }
        else {
          uint64_t v279 = v6;
        }
        __src[0] = *(void **)&(*v279)[4 * (v278 - (void)v276)];
        uint64_t v280 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v281 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        if (!v277) {
          goto LABEL_458;
        }
        v283 = (void **)(v281 + 8 * v282);
        BOOL v404 = v280;
        if (v283 == v280) {
          goto LABEL_282;
        }
        while (2)
        {
          v426[0] = *v280;
          unint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v426);
          uint64_t v284 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v426);
          unint64_t v286 = v284 + 8 * v285;
          uint64_t v287 = v277[1];
          if (v287 != (uint64_t)(v286 - v4) >> 3) {
            goto LABEL_258;
          }
          uint64_t v288 = 0;
          if (v287)
          {
            uint64_t v289 = *v277;
            while (v4 != v286)
            {
              unint64_t v290 = mlir::TypeRange::dereference_iterator(v289, v288);
              __src[0] = *(void **)v4;
              if (v290 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src)) {
                goto LABEL_258;
              }
              ++v288;
              v4 += 8;
              if (v287 == v288) {
                goto LABEL_257;
              }
            }
            unint64_t v4 = v286;
          }
          if (v288 != v287) {
            goto LABEL_258;
          }
LABEL_257:
          if (v4 != v286)
          {
LABEL_258:
            if (++v280 == v283)
            {
LABEL_282:
              uint64_t v123 = *a1;
              goto LABEL_283;
            }
            continue;
          }
          break;
        }
        uint64_t v123 = (unsigned __int16 *)((char *)*a1 + (((char *)v280 - (char *)v404) >> 1) + 4);
        *a1 = v123;
LABEL_283:
        uint64_t v6 = v407;
        goto LABEL_459;
      default:
        continue;
    }
  }
}

uint64_t mlir::detail::PDLByteCode::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v47[30] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)(a3 + 104) + 96);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if (v9)
    {
      unsigned int v10 = *(uint64_t **)v8;
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *v10++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2);
        v11 -= 8;
      }
      while (v11);
    }
  }
  uint64_t v13 = *(unsigned int *)(a3 + 16);
  if (v13) {
    memmove(*(void **)a4, *(const void **)(a3 + 8), 8 * v13);
  }
  uint64_t v14 = *(void *)(a1 + 240);
  uint64_t v15 = *(void *)(a1 + 248);
  uint64_t v16 = *(void **)a4;
  uint64_t v17 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
  uint64_t v18 = *(void *)(a4 + 24);
  uint64_t v19 = (*(void *)(a4 + 32) - v18) >> 4;
  uint64_t v20 = *(void *)(a4 + 48);
  uint64_t v21 = (*(void *)(a4 + 56) - v20) >> 4;
  uint64_t v22 = a4 + 72;
  uint64_t v23 = *(void *)(a4 + 96);
  uint64_t v24 = (*(void *)(a4 + 104) - v23) >> 4;
  uint64_t v25 = a4 + 120;
  uint64_t v26 = *(void *)(a4 + 144);
  uint64_t v27 = (*(void *)(a4 + 152) - v26) >> 2;
  uint64_t v28 = *(void *)(a1 + 64);
  uint64_t v29 = (*(void *)(a1 + 72) - v28) >> 3;
  uint64_t v30 = *(void *)(a4 + 168);
  uint64_t v31 = (*(void *)(a4 + 176) - v30) >> 1;
  uint64_t v32 = *(void *)(a1 + 392);
  uint64_t v33 = *(unsigned int *)(a1 + 400);
  uint64_t v34 = *(void *)(a1 + 3736);
  uint64_t v35 = (*(void *)(a1 + 3744) - v34) >> 5;
  uint64_t v36 = *(void *)(a1 + 3760);
  uint64_t v37 = (*(void *)(a1 + 3768) - v36) >> 5;
  uint64_t v44 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(*(void *)(a3 + 104) + 88));
  unint64_t v45 = v47;
  uint64_t v46 = 0x600000000;
  v47[6] = v16;
  v47[7] = v17;
  v47[8] = v18;
  v47[9] = v19;
  v47[10] = v20;
  v47[11] = v21;
  v47[12] = v22;
  v47[13] = v23;
  v47[14] = v24;
  v47[15] = v25;
  v47[16] = v26;
  v47[17] = v27;
  v47[18] = v28;
  v47[19] = v29;
  void v47[20] = v14;
  v47[21] = v15;
  v47[22] = v30;
  v47[23] = v31;
  v47[24] = v32;
  v47[25] = v33;
  v47[26] = v34;
  v47[27] = v35;
  v47[28] = v36;
  v47[29] = v37;
  if (v8)
  {
    uint64_t v39 = *(unsigned int *)(v8 + 8);
    if (v39)
    {
      unint64_t v40 = *(uint64_t **)v8;
      uint64_t v41 = 8 * v39;
      do
      {
        uint64_t v42 = *v40++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 24))(v42, a2);
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (!(_BYTE)v38 && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2) & 1) == 0) {
    llvm::report_fatal_error((llvm *)"Native PDL Rewrite failed, but the pattern rewriter doesn't support recovery. Failable pattern rewrites should not be used with pattern rewriters that do not support them.", (const char *)1);
  }
  if (v45 != v47) {
    free(v45);
  }
  return v38;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 8;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v17 = v9[1];
        ++v9;
        uint64_t v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 8;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  buffer[4] = *a4;
  *uint64_t v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v13 = *v9 == -8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    do
    {
      uint64_t v15 = v9[1];
      ++v9;
      uint64_t v14 = v15;
      if (v15) {
        BOOL v16 = v14 == -8;
      }
      else {
        BOOL v16 = 1;
      }
    }
    while (v16);
  }
  return v9;
}

void anonymous namespace'::Generator::generate(uint64_t a1, Operation *a2, uint64_t *a3)
{
  uint64_t v564 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void **)(*((void *)a2 + 6) + 16);
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    Name = (int8x16_t *)mlir::pdl::ApplyNativeConstraintOp::getName((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    __int16 v8 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 72, Name, v7) + 8);
    uint64_t v9 = (void *)a3[3];
    uint64_t v10 = v9[1];
    if ((unint64_t)(v10 + 1) > v9[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v9 + 3, v10 + 1, 2);
      uint64_t v10 = v9[1];
    }
    *(_WORD *)(*v9 + 2 * v10) = 0;
    ++v9[1];
    uint64_t v11 = (void *)a3[3];
    uint64_t v12 = v11[1];
    if ((unint64_t)(v12 + 1) > v11[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v11 + 3, v12 + 1, 2);
      uint64_t v12 = v11[1];
    }
    *(_WORD *)(*v11 + 2 * v12) = v8;
    ++v11[1];
    uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&InputAttributeNames);
    uint64_t v15 = v13;
    BOOL v16 = (void *)a3[3];
    uint64_t v17 = v16[1];
    if ((unint64_t)(v17 + 1) > v16[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v16 + 3, v17 + 1, 2);
      *(_WORD *)(*v16 + 2 * v16[1]++) = v15;
      if (v15)
      {
LABEL_9:
        uint64_t v18 = (unint64_t *)(Inputs + 24);
        do
        {
          unint64_t v19 = *v18;
          v18 += 4;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      *(_WORD *)(*v16 + 2 * v17) = v13;
      ++v16[1];
      if (v13) {
        goto LABEL_9;
      }
    }
    __int16 IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    uint64_t v21 = (void *)a3[3];
    uint64_t v22 = v21[1];
    if ((unint64_t)(v22 + 1) > v21[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v21 + 3, v22 + 1, 2);
      uint64_t v22 = v21[1];
    }
    *(_WORD *)(*v21 + 2 * v22) = IsNegated;
    ++v21[1];
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v23 = *((void *)&v554 + 1);
    if (*((void *)&v554 + 1))
    {
      uint64_t v24 = (mlir::Block **)(v554 + 24);
      do
      {
        uint64_t v25 = *v24;
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v30 = (int8x16_t *)mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    __int16 v32 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 48, v30, v31) + 8);
    uint64_t v33 = (void *)a3[3];
    uint64_t v34 = v33[1];
    if ((unint64_t)(v34 + 1) > v33[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v33 + 3, v34 + 1, 2);
      uint64_t v34 = v33[1];
    }
    *(_WORD *)(*v33 + 2 * v34) = 1;
    ++v33[1];
    uint64_t v35 = (void *)a3[3];
    uint64_t v36 = v35[1];
    if ((unint64_t)(v36 + 1) > v35[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v35 + 3, v36 + 1, 2);
      uint64_t v36 = v35[1];
    }
    *(_WORD *)(*v35 + 2 * v36) = v32;
    ++v35[1];
    uint64_t v38 = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&Rewriter);
    uint64_t v39 = v37;
    unint64_t v40 = (void *)a3[3];
    uint64_t v41 = v40[1];
    if ((unint64_t)(v41 + 1) > v40[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v40 + 3, v41 + 1, 2);
      *(_WORD *)(*v40 + 2 * v40[1]++) = v39;
      if (v39)
      {
LABEL_48:
        uint64_t v42 = (unint64_t *)(v38 + 24);
        do
        {
          unint64_t v43 = *v42;
          v42 += 4;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      *(_WORD *)(*v40 + 2 * v41) = v37;
      ++v40[1];
      if (v37) {
        goto LABEL_48;
      }
    }
    uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&Rewriter);
    uint64_t v46 = v44;
    uint64_t v47 = (void *)a3[3];
    uint64_t v48 = v47[1];
    if ((unint64_t)(v48 + 1) > v47[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v47 + 3, v48 + 1, 2);
      *(_WORD *)(*v47 + 2 * v47[1]++) = v46;
      if (!v46) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v47 + 2 * v48) = v44;
      ++v47[1];
      if (!v44) {
        return;
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = (uint64_t *)(a1 + 24);
    do
    {
      uint64_t NextResultAtOffset = (Operation *)mlir::detail::OpResultImpl::getNextResultAtOffset(Results, v49);
      int v52 = NextResultAtOffset;
      if (*(_UNKNOWN **)(*(void *)(*((void *)NextResultAtOffset + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      {
        uint64_t InputAttributeNames = NextResultAtOffset;
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v50, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v53 = *(_WORD *)(v554 + 8);
        }
        else
        {
          unint64_t v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v50, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v53 = 0;
          *unint64_t v54 = InputAttributeNames;
          *((_WORD *)v54 + 4) = 0;
        }
        uint64_t v55 = (void *)a3[3];
        uint64_t v56 = v55[1];
        if ((unint64_t)(v56 + 1) > v55[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v55 + 3, v56 + 1, 2);
          uint64_t v56 = v55[1];
        }
        *(_WORD *)(*v55 + 2 * v56) = v53;
        ++v55[1];
      }
      uint64_t v57 = (void *)a3[3];
      uint64_t v58 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v52;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v58, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v59 = *(_WORD *)(v554 + 8);
      }
      else
      {
        unint64_t v60 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v58, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v59 = 0;
        *unint64_t v60 = InputAttributeNames;
        *((_WORD *)v60 + 4) = 0;
      }
      uint64_t v61 = v57[1];
      if ((unint64_t)(v61 + 1) > v57[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v57, v57 + 3, v61 + 1, 2);
        uint64_t v61 = v57[1];
      }
      *(_WORD *)(*v57 + 2 * v61) = v59;
      ++v57[1];
      ++v49;
    }
    while (v46 != v49);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id)
  {
    Rewriter = a2;
    uint64_t Input = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      unint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v65 = *((void *)&v554 + 1);
      uint64_t v64 = v554;
      unint64_t v66 = (void *)a3[3];
      uint64_t v67 = v66[1];
      if ((unint64_t)(v67 + 1) > v66[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v66 + 3, v67 + 1, 2);
        uint64_t v67 = v66[1];
      }
      *(_WORD *)(*v66 + 2 * v67) = 2;
      ++v66[1];
      uint64_t v68 = (void *)a3[3];
      unint64_t v69 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = Input;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v69, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v70 = *(_WORD *)(v554 + 8);
      }
      else
      {
        uint64_t v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v69, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v70 = 0;
        *uint64_t v90 = InputAttributeNames;
        *((_WORD *)v90 + 4) = 0;
      }
      uint64_t v91 = v68[1];
      if ((unint64_t)(v91 + 1) > v68[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v68, v68 + 3, v91 + 1, 2);
        uint64_t v91 = v68[1];
      }
      *(_WORD *)(*v68 + 2 * v91) = v70;
      ++v68[1];
      goto LABEL_136;
    }
    uint64_t v86 = (void *)a3[3];
    uint64_t v87 = v86[1];
    if ((unint64_t)(v87 + 1) > v86[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v86 + 3, v87 + 1, 2);
      uint64_t v87 = v86[1];
    }
    *(_WORD *)(*v86 + 2 * v87) = 3;
    ++v86[1];
    unint64_t v88 = *(void **)(*(void *)(*((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      __int16 v89 = 0;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v89 = 1;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(void *)&long long v554 = *((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        __int16 v89 = 3;
      }
      else {
        __int16 v89 = 5;
      }
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      __int16 v89 = 2;
    }
    else
    {
      __int16 v89 = 4 * (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    unsigned int v136 = (void *)a3[3];
    uint64_t v137 = v136[1];
    if ((unint64_t)(v137 + 1) > v136[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v136 + 3, v137 + 1, 2);
      uint64_t v137 = v136[1];
    }
    *(_WORD *)(*v136 + 2 * v137) = v89;
    ++v136[1];
    BOOL v138 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    unint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v65 = *((void *)&v554 + 1);
    uint64_t v64 = v554;
    unsigned int v139 = (void *)a3[3];
    uint64_t v140 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v138;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v140, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v141 = *(_WORD *)(v554 + 8);
    }
    else
    {
      int64_t v142 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v140, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v141 = 0;
      *int64_t v142 = InputAttributeNames;
      *((_WORD *)v142 + 4) = 0;
    }
    uint64_t v143 = v139[1];
    if ((unint64_t)(v143 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v139, v139 + 3, v143 + 1, 2);
      uint64_t v143 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v143) = v141;
LABEL_135:
    ++v139[1];
LABEL_136:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::BranchOp,void>::id)
  {
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, a2);
    uint64_t v71 = *((void *)&v554 + 1);
    uint64_t v72 = v554;
    uint64_t v73 = (void *)a3[3];
    uint64_t v74 = v73[1];
    if ((unint64_t)(v74 + 1) > v73[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v73 + 3, v74 + 1, 2);
      uint64_t v74 = v73[1];
    }
    *(_WORD *)(*v73 + 2 * v74) = 4;
    ++v73[1];
    if (v71)
    {
      uint64_t v75 = (mlir::Block **)(v72 + 24);
      do
      {
        uint64_t v76 = *v75;
        v75 += 4;
        --v71;
      }
      while (v71);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v77 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v79 = *((void *)&v554 + 1);
    uint64_t v80 = v554;
    uint64_t v81 = (void *)a3[3];
    uint64_t v82 = v81[1];
    if ((unint64_t)(v82 + 1) > v81[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v81 + 3, v82 + 1, 2);
      uint64_t v82 = v81[1];
    }
    *(_WORD *)(*v81 + 2 * v82) = 2;
    ++v81[1];
    __int16 v83 = (void *)a3[3];
    int64_t v84 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v77;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v84, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v85 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v99 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v84, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v85 = 0;
      *unint64_t v99 = InputAttributeNames;
      *((_WORD *)v99 + 4) = 0;
    }
    uint64_t v100 = v83[1];
    if ((unint64_t)(v100 + 1) > v83[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v83, v83 + 3, v100 + 1, 2);
      uint64_t v100 = v83[1];
    }
    *(_WORD *)(*v83 + 2 * v100) = v85;
    ++v83[1];
    unsigned int v101 = (void *)a3[3];
    uint64_t v103 = v101[1];
    if ((unint64_t)(v103 + 1) > v101[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v101, v101 + 3, v103 + 1, 2);
      *(_WORD *)(*v101 + 2 * v101[1]++) = v102;
      if (!v79) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v101 + 2 * v103) = v102;
      ++v101[1];
      if (!v79) {
        return;
      }
    }
    int v104 = (mlir::Block **)(v80 + 24);
    do
    {
      long long v105 = *v104;
      v104 += 4;
      --v79;
    }
    while (v79);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v92 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    int Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    __int16 InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v96 = *((void *)&v554 + 1);
    uint64_t v95 = v554;
    unint64_t v97 = a3;
    __int16 v98 = 5;
LABEL_108:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v106 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    uint64_t v107 = mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    mlir::OperationName::OperationName(&v552, v107, v108, *(void *)(a1 + 152));
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v109 = *((void *)&v554 + 1);
    uint64_t v110 = v554;
    uint64_t v111 = v552;
    unsigned int v112 = (void *)a3[3];
    uint64_t v113 = v112[1];
    if ((unint64_t)(v113 + 1) > v112[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v112 + 3, v113 + 1, 2);
      uint64_t v113 = v112[1];
    }
    *(_WORD *)(*v112 + 2 * v113) = 6;
    ++v112[1];
    unint64_t v114 = (void *)a3[3];
    long long v115 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v106;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v115, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v116 = *(_WORD *)(v554 + 8);
    }
    else
    {
      long long v117 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v115, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v116 = 0;
      *long long v117 = InputAttributeNames;
      *((_WORD *)v117 + 4) = 0;
    }
    uint64_t v118 = v114[1];
    if ((unint64_t)(v118 + 1) > v114[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v114, v114 + 3, v118 + 1, 2);
      uint64_t v118 = v114[1];
    }
    *(_WORD *)(*v114 + 2 * v118) = v116;
    ++v114[1];
    if (v109)
    {
      BOOL v119 = (mlir::Block **)(v110 + 24);
      do
      {
        uint64_t v120 = *v119;
        v119 += 4;
        --v109;
      }
      while (v109);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v92 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    int Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    __int16 InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v96 = *((void *)&v554 + 1);
    uint64_t v95 = v554;
    unint64_t v97 = a3;
    __int16 v98 = 7;
    goto LABEL_108;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v121 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    uint64_t Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v123 = *((void *)&v554 + 1);
    uint64_t v124 = v554;
    unsigned int v125 = (void *)a3[3];
    uint64_t v126 = v125[1];
    if ((unint64_t)(v126 + 1) > v125[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v125 + 3, v126 + 1, 2);
      uint64_t v126 = v125[1];
    }
    *(_WORD *)(*v125 + 2 * v126) = 2;
    ++v125[1];
    unsigned int v127 = (void *)a3[3];
    BOOL v128 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v121;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v128, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v129 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v144 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v128, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v129 = 0;
      *uint64_t v144 = InputAttributeNames;
      *((_WORD *)v144 + 4) = 0;
    }
    uint64_t v145 = v127[1];
    if ((unint64_t)(v145 + 1) > v127[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v127, v127 + 3, v145 + 1, 2);
      uint64_t v145 = v127[1];
    }
    *(_WORD *)(*v127 + 2 * v145) = v129;
    ++v127[1];
    unint64_t v146 = (void *)a3[3];
    uint64_t v148 = v146[1];
    if ((unint64_t)(v148 + 1) > v146[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v146, v146 + 3, v148 + 1, 2);
      *(_WORD *)(*v146 + 2 * v146[1]++) = v147;
      if (!v123) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v146 + 2 * v148) = v147;
      ++v146[1];
      if (!v123) {
        return;
      }
    }
    unint64_t v149 = (mlir::Block **)(v124 + 24);
    do
    {
      int v150 = *v149;
      v149 += 4;
      --v123;
    }
    while (v123);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v130 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    uint64_t v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v133 = *((void *)&v554 + 1);
    uint64_t v132 = v554;
    uint64_t v134 = a3;
    __int16 v135 = 8;
    goto LABEL_125;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id)
  {
    __int16 v151 = *(_WORD *)(a1 + 144);
    uint64_t v152 = (void *)a3[3];
    uint64_t v153 = v152[1];
    if ((unint64_t)(v153 + 1) > v152[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v152 + 3, v153 + 1, 2);
      uint64_t v153 = v152[1];
    }
    *(_WORD *)(*v152 + 2 * v153) = 9;
    ++v152[1];
    uint64_t v154 = (void *)a3[3];
    uint64_t v155 = v154[1];
    if ((unint64_t)(v155 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v155 + 1, 2);
      uint64_t v155 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v155) = v151 - 1;
    goto LABEL_151;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v156 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
LABEL_153:
    uint64_t InputAttributeNames = Result;
    *(void *)&long long v554 = 0;
    char v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&InputAttributeNames, &v554);
    uint64_t v160 = (void *)v554;
    if ((v159 & 1) == 0)
    {
      uint64_t v160 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      *uint64_t v160 = InputAttributeNames;
      *((_WORD *)v160 + 4) = 0;
    }
    *((_WORD *)v160 + 4) = v157;
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id)
  {
    v551 = a2;
    char v161 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v551);
    uint64_t v162 = mlir::pdl_interp::CreateOperationOp::getName((mlir::pdl_interp::CreateOperationOp *)&v551);
    mlir::OperationName::OperationName(&v550, v162, v163, *(void *)(a1 + 152));
    uint64_t v164 = v550;
    uint64_t v165 = (void *)a3[3];
    uint64_t v166 = v165[1];
    if ((unint64_t)(v166 + 1) > v165[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v165 + 3, v166 + 1, 2);
      uint64_t v166 = v165[1];
    }
    *(_WORD *)(*v165 + 2 * v166) = 11;
    ++v165[1];
    unint64_t v167 = (void *)a3[3];
    uint64_t v168 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v161;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v168, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v169 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v175 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v168, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v169 = 0;
      void *v175 = InputAttributeNames;
      *((_WORD *)v175 + 4) = 0;
    }
    uint64_t v176 = v167[1];
    if ((unint64_t)(v176 + 1) > v167[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v167, v167 + 3, v176 + 1, 2);
      uint64_t v176 = v167[1];
    }
    *(_WORD *)(*v167 + 2 * v176) = v169;
    ++v167[1];
    uint64_t InputOperands = mlir::pdl_interp::CreateOperationOp::getInputOperands((mlir::pdl_interp::CreateOperationOp *)&v551);
    uint64_t v179 = v177;
    int v180 = (void *)a3[3];
    uint64_t v181 = v180[1];
    if ((unint64_t)(v181 + 1) > v180[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v180 + 3, v181 + 1, 2);
      *(_WORD *)(*v180 + 2 * v180[1]++) = v179;
      if (v179)
      {
LABEL_169:
        int v182 = (unint64_t *)(InputOperands + 24);
        do
        {
          unint64_t v183 = *v182;
          v182 += 4;
          --v179;
        }
        while (v179);
      }
    }
    else
    {
      *(_WORD *)(*v180 + 2 * v181) = v177;
      ++v180[1];
      if (v177) {
        goto LABEL_169;
      }
    }
    uint64_t Offsets = mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v551);
    __int16 v186 = v185;
    *(void *)&long long v554 = Offsets;
    *((void *)&v554 + 1) = v185;
    int v187 = (void *)a3[3];
    uint64_t v188 = v187[1];
    if ((unint64_t)(v188 + 1) > v187[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v187 + 3, v188 + 1, 2);
      uint64_t v188 = v187[1];
    }
    *(_WORD *)(*v187 + 2 * v188) = v186;
    ++v187[1];
    uint64_t InputAttributeNames = (Operation *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v551);
    v549 = &v554;
    uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    uint64_t v190 = *(void *)v549;
    uint64_t v191 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    uint64_t v193 = (uint64_t *)(v191 + 8 * v192);
    if (v193 != Value)
    {
      uint64_t v195 = *(void *)v549;
      uint64_t v194 = *((void *)v549 + 1);
      uint64_t v196 = (Operation **)(v190 + 24);
      do
      {
        BOOL v198 = v194-- != 0;
        if (v190 == v195 && !v198) {
          break;
        }
        unint64_t v199 = *v196;
        uint64_t v200 = (void *)a3[3];
        uint64_t v202 = v200[1];
        if ((unint64_t)(v202 + 1) > v200[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v200, v200 + 3, v202 + 1, 2);
          uint64_t v202 = v200[1];
        }
        *(_WORD *)(*v200 + 2 * v202) = v201;
        ++v200[1];
        uint64_t v203 = (void *)a3[3];
        unint64_t v204 = (uint64_t *)a3[4];
        v552 = v199;
        Rewriter = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v204, (unint64_t *)&v552, &Rewriter))
        {
          __int16 v205 = *((_WORD *)Rewriter + 4);
        }
        else
        {
          uint64_t v206 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v204, (uint64_t)&v552, (unint64_t *)&v552, Rewriter);
          __int16 v205 = 0;
          *uint64_t v206 = v552;
          *((_WORD *)v206 + 4) = 0;
        }
        uint64_t v207 = v203[1];
        if ((unint64_t)(v207 + 1) > v203[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v203, v203 + 3, v207 + 1, 2);
          uint64_t v207 = v203[1];
        }
        *(_WORD *)(*v203 + 2 * v207) = v205;
        ++v203[1];
        ++Value;
        v196 += 4;
      }
      while (Value != v193);
    }
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v551))
    {
      uint64_t Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v551);
      uint64_t v211 = v209;
      unsigned int v212 = (void *)a3[3];
      uint64_t v213 = v212[1];
      if ((unint64_t)(v213 + 1) > v212[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v212 + 3, v213 + 1, 2);
        *(_WORD *)(*v212 + 2 * v212[1]++) = v211;
        if (!v211) {
          return;
        }
      }
      else
      {
        *(_WORD *)(*v212 + 2 * v213) = v209;
        ++v212[1];
        if (!v209) {
          return;
        }
      }
      uint64_t v214 = (unint64_t *)(Sizes + 24);
      do
      {
        unint64_t v215 = *v214;
        v214 += 4;
        --v211;
      }
      while (v211);
      return;
    }
    uint64_t v154 = (void *)a3[3];
    uint64_t v208 = v154[1];
    if ((unint64_t)(v208 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v208 + 1, 2);
      uint64_t v208 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v208) = -1;
LABEL_151:
    ++v154[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id)
  {
    unint64_t v170 = *((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    Rewriter = a2;
    *(void *)&long long v554 = v170;
    BOOL v171 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136);
    if (v171 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      unsigned int v172 = (void *)a3[3];
      uint64_t v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        __int16 v174 = 12;
        goto LABEL_204;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      __int16 v174 = 12;
    }
    else
    {
      if (v171 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        goto LABEL_205;
      }
      unsigned int v172 = (void *)a3[3];
      uint64_t v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        __int16 v174 = 13;
LABEL_204:
        *(_WORD *)(*v172 + 2 * v173) = v174;
        ++v172[1];
LABEL_205:
        uint64_t v220 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
        uint64_t InputAttributeNames = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
        char v221 = (uint64_t *)(a1 + 24);
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v221, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v222 = *(_WORD *)(v554 + 8);
        }
        else
        {
          uint64_t v223 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v221, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v222 = 0;
          *uint64_t v223 = InputAttributeNames;
          *((_WORD *)v223 + 4) = 0;
        }
        uint64_t v224 = (void *)a3[3];
        uint64_t v225 = (uint64_t *)a3[4];
        uint64_t InputAttributeNames = v220;
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v225, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v226 = *(_WORD *)(v554 + 8);
        }
        else
        {
          uint64_t v227 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v225, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v226 = 0;
          *uint64_t v227 = InputAttributeNames;
          *((_WORD *)v227 + 4) = 0;
        }
        uint64_t v228 = v224[1];
        if ((unint64_t)(v228 + 1) > v224[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v224, v224 + 3, v228 + 1, 2);
          uint64_t v228 = v224[1];
        }
        *(_WORD *)(*v224 + 2 * v228) = v226;
        ++v224[1];
        uint64_t v229 = (void *)a3[3];
        uint64_t v230 = v229[1];
        if ((unint64_t)(v230 + 1) > v229[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v229 + 3, v230 + 1, 2);
          uint64_t v230 = v229[1];
        }
        *(_WORD *)(*v229 + 2 * v230) = v222;
        ++v229[1];
        if ((*((unsigned char *)Rewriter + 46) & 0x80) != 0)
        {
          uint64_t v231 = *((void *)Rewriter + 9);
          uint64_t v232 = *((unsigned int *)Rewriter + 17);
          unint64_t v233 = (void *)a3[3];
          uint64_t v234 = v233[1];
          unint64_t v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2]) {
            goto LABEL_217;
          }
        }
        else
        {
          uint64_t v231 = 0;
          uint64_t v232 = 0;
          unint64_t v233 = (void *)a3[3];
          uint64_t v234 = v233[1];
          unint64_t v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
          {
LABEL_217:
            *(_WORD *)(*v233 + 2 * v234) = v232;
            ++v233[1];
            if (!v232) {
              return;
            }
LABEL_218:
            int v236 = (unint64_t *)(v231 + 24);
            do
            {
              unint64_t v237 = *v236;
              v236 += 4;
              --v232;
            }
            while (v232);
            return;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v233, v233 + 3, v235, 2);
        *(_WORD *)(*v233 + 2 * v233[1]++) = v232;
        if (!v232) {
          return;
        }
        goto LABEL_218;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      __int16 v174 = 13;
    }
    uint64_t v173 = v172[1];
    goto LABEL_204;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v216 = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    goto LABEL_153;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
  {
    Rewriter = a2;
    int v217 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    uint64_t InputAttributeNames = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    int v218 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v218, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v219 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v239 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v218, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v219 = 0;
      *uint64_t v239 = InputAttributeNames;
      *((_WORD *)v239 + 4) = 0;
    }
    uint64_t v240 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    unsigned int v241 = (void *)a3[3];
    uint64_t v242 = v241[1];
    if ((unint64_t)(v242 + 1) > v241[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v241 + 3, v242 + 1, 2);
      uint64_t v242 = v241[1];
    }
    *(_WORD *)(*v241 + 2 * v242) = 10;
    ++v241[1];
    unsigned long long v243 = (void *)a3[3];
    uint64_t v244 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v217;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v244, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v245 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v246 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v244, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v245 = 0;
      *uint64_t v246 = InputAttributeNames;
      *((_WORD *)v246 + 4) = 0;
    }
    uint64_t v247 = v243[1];
    if ((unint64_t)(v247 + 1) > v243[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v243, v243 + 3, v247 + 1, 2);
      uint64_t v247 = v243[1];
    }
    *(_WORD *)(*v243 + 2 * v247) = v245;
    ++v243[1];
    uint64_t v248 = (void *)a3[3];
    uint64_t v249 = v248[1];
    if ((unint64_t)(v249 + 1) > v248[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v248 + 3, v249 + 1, 2);
      uint64_t v249 = v248[1];
    }
    *(_WORD *)(*v248 + 2 * v249) = v219;
    ++v248[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unint64_t v238 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id)
  {
    Rewriter = a2;
    long long v250 = *(void **)(*(void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter)
                                            + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136);
    if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v251 = 15;
    }
    else if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    {
      __int16 v251 = 17;
    }
    else
    {
      __int16 v251 = 16 * (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    }
    unsigned int v274 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&Rewriter);
    unsigned int v276 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    unsigned int v277 = (void *)a3[3];
    uint64_t v278 = v277[1];
    if ((unint64_t)(v278 + 1) > v277[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v277 + 3, v278 + 1, 2);
      uint64_t v278 = v277[1];
    }
    *(_WORD *)(*v277 + 2 * v278) = v251;
    ++v277[1];
    uint64_t v279 = (void *)a3[3];
    uint64_t v280 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v274;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v280, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v281 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v282 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v280, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v281 = 0;
      *uint64_t v282 = InputAttributeNames;
      *((_WORD *)v282 + 4) = 0;
    }
    uint64_t v283 = v279[1];
    if ((unint64_t)(v283 + 1) > v279[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v279, v279 + 3, v283 + 1, 2);
      uint64_t v283 = v279[1];
    }
    *(_WORD *)(*v279 + 2 * v283) = v281;
    ++v279[1];
    uint64_t v284 = (void *)a3[3];
    uint64_t v285 = v284[1];
    if (v284[2] < (unint64_t)(v285 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v284 + 3, v285 + 2, 2);
      uint64_t v285 = v284[1];
    }
    *(_DWORD *)(*v284 + 2 * v285) = Index;
    v284[1] += 2;
    goto LABEL_287;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id)
  {
    uint64_t v154 = (void *)a3[3];
    uint64_t v252 = v154[1];
    if ((unint64_t)(v252 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v252 + 1, 2);
      uint64_t v252 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v252) = 18;
    goto LABEL_151;
  }
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v26 = *(void *)(mlir::func::FuncOp::getBody((mlir::func::FuncOp *)&Rewriter) + 8);
    if (v26) {
      uint64_t v27 = v26 - 8;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = **(Operation ***)(v27 + 48);
    uint64_t InputAttributeNames = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 24), (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v29 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v262 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1 + 24, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v29 = 0;
      *unint64_t v262 = InputAttributeNames;
      *((_WORD *)v262 + 4) = 0;
    }
    unsigned int v263 = (void *)a3[3];
    uint64_t v264 = v263[1];
    if ((unint64_t)(v264 + 1) > v263[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v263 + 3, v264 + 1, 2);
      uint64_t v264 = v263[1];
    }
    *(_WORD *)(*v263 + 2 * v264) = 19;
    ++v263[1];
    unint64_t v265 = (void *)a3[3];
    uint64_t v266 = v265[1];
    if ((unint64_t)(v266 + 1) > v265[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v265 + 3, v266 + 1, 2);
      uint64_t v266 = v265[1];
    }
    *(_WORD *)(*v265 + 2 * v266) = v29;
    ++v265[1];
    unsigned int v267 = (void *)a3[3];
    v268 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v28;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v268, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v269 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v270 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v268, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v269 = 0;
      *uint64_t v270 = InputAttributeNames;
      *((_WORD *)v270 + 4) = 0;
    }
    uint64_t v271 = v267[1];
    if ((unint64_t)(v271 + 1) > v267[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v267, v267 + 3, v271 + 1, 2);
      uint64_t v271 = v267[1];
    }
    *(_WORD *)(*v267 + 2 * v271) = v269;
    ++v267[1];
    uint64_t v272 = *(void **)(*(void *)(*((void *)v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      __int16 v273 = 0;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v273 = 1;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(void *)&long long v554 = *((void *)v28 + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        __int16 v273 = 3;
      }
      else {
        __int16 v273 = 5;
      }
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      __int16 v273 = 2;
    }
    else
    {
      __int16 v273 = 4 * (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    unint64_t v340 = (void *)a3[3];
    uint64_t v341 = v340[1];
    if ((unint64_t)(v341 + 1) > v340[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v340 + 3, v341 + 1, 2);
      uint64_t v341 = v340[1];
    }
    *(_WORD *)(*v340 + 2 * v341) = v273;
    ++v340[1];
    __int16 v342 = *(_WORD *)(a1 + 144);
    Successor = (mlir::Block *)mlir::pdl_interp::ForEachOp::getSuccessor((mlir::pdl_interp::ForEachOp *)&Rewriter);
    int v344 = (void *)a3[3];
    uint64_t v345 = v344[1];
    if ((unint64_t)(v345 + 1) > v344[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v344 + 3, v345 + 1, 2);
      uint64_t v345 = v344[1];
    }
    *(_WORD *)(*v344 + 2 * v345) = v342;
    ++v344[1];
    unsigned __int16 v346 = *(_WORD *)(a1 + 144) + 1;
    *(_WORD *)(a1 + 144) = v346;
    unsigned int v347 = *(unsigned __int16 **)(a1 + 248);
    if (*v347 < v346) {
      *unsigned int v347 = v346;
    }
    unint64_t Body = mlir::func::FuncOp::getBody((mlir::func::FuncOp *)&Rewriter);
    --*(_WORD *)(a1 + 144);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id)
  {
    Rewriter = a2;
    unint64_t v290 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    unsigned int v291 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    uint64_t v292 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    unint64_t v293 = (void *)a3[3];
    uint64_t v294 = v293[1];
    if ((unint64_t)(v294 + 1) > v293[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v293 + 3, v294 + 1, 2);
      uint64_t v294 = v293[1];
    }
    *(_WORD *)(*v293 + 2 * v294) = 20;
    ++v293[1];
    v295 = (void *)a3[3];
    v296 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v290;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v296, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v297 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v304 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v296, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v297 = 0;
      *unsigned int v304 = InputAttributeNames;
      *((_WORD *)v304 + 4) = 0;
    }
    uint64_t v305 = v295[1];
    if ((unint64_t)(v305 + 1) > v295[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v295, v295 + 3, v305 + 1, 2);
      uint64_t v305 = v295[1];
    }
    *(_WORD *)(*v295 + 2 * v305) = v297;
    ++v295[1];
    unsigned int v306 = (void *)a3[3];
    BOOL v307 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v291;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v307, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v308 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v309 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v307, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v308 = 0;
      *unsigned int v309 = InputAttributeNames;
      *((_WORD *)v309 + 4) = 0;
    }
    uint64_t v310 = v306[1];
    if ((unint64_t)(v310 + 1) > v306[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v306, v306 + 3, v310 + 1, 2);
      uint64_t v310 = v306[1];
    }
    *(_WORD *)(*v306 + 2 * v310) = v308;
    ++v306[1];
    uint64_t v287 = (void *)a3[3];
    uint64_t v311 = a3[4];
    uint64_t v312 = *(void *)(v311 + 120);
    __int16 v313 = **(_WORD **)(v311 + 216);
    unsigned int v314 = *(_DWORD *)(v311 + 136);
    if (v314)
    {
      unsigned int v315 = (v314 - 1) & ((v292 >> 4) ^ (v292 >> 9));
      char v316 = (uint64_t *)(v312 + 16 * v315);
      uint64_t v317 = *v316;
      if (*v316 == v292)
      {
LABEL_388:
        __int16 v288 = *((_WORD *)v316 + 4);
LABEL_389:
        uint64_t v384 = v287[1];
        if ((unint64_t)(v384 + 1) > v287[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v287, v287 + 3, v384 + 1, 2);
          uint64_t v384 = v287[1];
        }
        *(_WORD *)(*v287 + 2 * v384) = v288;
        ++v287[1];
        return;
      }
      uint64_t v318 = 0;
      int v319 = 1;
      while (v317 != -4096)
      {
        if (v318) {
          BOOL v320 = 0;
        }
        else {
          BOOL v320 = v317 == -8192;
        }
        if (v320) {
          uint64_t v318 = v316;
        }
        unsigned int v321 = v315 + v319++;
        unsigned int v315 = v321 & (v314 - 1);
        char v316 = (uint64_t *)(v312 + 16 * v315);
        uint64_t v317 = *v316;
        if (*v316 == v292) {
          goto LABEL_388;
        }
      }
      if (v318) {
        char v316 = v318;
      }
    }
    else
    {
      char v316 = 0;
    }
    uint64_t v324 = *(void *)(*(void *)(v311 + 184) + 8) - **(void **)(v311 + 184);
    int v325 = *(_DWORD *)(v311 + 128);
    if (4 * v325 + 4 >= 3 * v314)
    {
      v314 *= 2;
    }
    else if (v314 + ~v325 - *(_DWORD *)(v311 + 132) > v314 >> 3)
    {
      goto LABEL_329;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v311 + 120, v314);
    uint64_t v488 = *(void *)(v311 + 120);
    int v489 = *(_DWORD *)(v311 + 136) - 1;
    unsigned int v490 = v489 & ((v292 >> 4) ^ (v292 >> 9));
    char v316 = (uint64_t *)(v488 + 16 * v490);
    uint64_t v491 = *v316;
    if (*v316 == v292)
    {
      uint64_t v326 = v292;
      goto LABEL_330;
    }
    v544 = 0;
    int v545 = 1;
    while (v491 != -4096)
    {
      if (v544) {
        BOOL v546 = 0;
      }
      else {
        BOOL v546 = v491 == -8192;
      }
      if (v546) {
        v544 = v316;
      }
      unsigned int v547 = v490 + v545++;
      unsigned int v490 = v547 & v489;
      char v316 = (uint64_t *)(v488 + 16 * v490);
      uint64_t v491 = *v316;
      uint64_t v326 = v292;
      if (*v316 == v292) {
        goto LABEL_330;
      }
    }
    if (v544) {
      char v316 = v544;
    }
LABEL_329:
    uint64_t v326 = *v316;
LABEL_330:
    ++*(_DWORD *)(v311 + 128);
    if (v326 != -4096) {
      --*(_DWORD *)(v311 + 132);
    }
    *char v316 = v292;
    *((_WORD *)v316 + 4) = v313 + (v324 >> 3);
    long long v327 = *(uint64_t ***)(v311 + 184);
    uint64_t v329 = v327[1];
    unint64_t v328 = (unint64_t)v327[2];
    if ((unint64_t)v329 >= v328)
    {
      uint64_t v349 = *v327;
      uint64_t v350 = (char *)v329 - (char *)*v327;
      uint64_t v351 = v350 >> 3;
      unint64_t v352 = (v350 >> 3) + 1;
      if (v352 >> 61) {
        abort();
      }
      uint64_t v353 = v328 - (void)v349;
      if (v353 >> 2 > v352) {
        unint64_t v352 = v353 >> 2;
      }
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v354 = v352;
      }
      if (v354)
      {
        if (v354 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v355 = operator new(8 * v354);
      }
      else
      {
        uint64_t v355 = 0;
      }
      v373 = (uint64_t *)&v355[8 * v351];
      unint64_t v374 = (uint64_t *)&v355[8 * v354];
      uint64_t *v373 = v292;
      v330 = v373 + 1;
      if (v329 != v349)
      {
        unint64_t v375 = (char *)v329 - (char *)v349 - 8;
        if (v375 < 0x58) {
          goto LABEL_603;
        }
        if ((unint64_t)((char *)v329 - v355 - v350) < 0x20) {
          goto LABEL_603;
        }
        uint64_t v376 = (v375 >> 3) + 1;
        uint64_t v377 = 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v378 = &v329[v377 / 0xFFFFFFFFFFFFFFF8];
        v373 = (uint64_t *)((char *)v373 - v377);
        uint64_t v379 = &v355[8 * v351 - 16];
        uint64_t v380 = v329 - 2;
        uint64_t v381 = v376 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v382 = *(_OWORD *)v380;
          *(v379 - 1) = *((_OWORD *)v380 - 1);
          *uint64_t v379 = v382;
          v379 -= 2;
          v380 -= 4;
          v381 -= 4;
        }
        while (v381);
        uint64_t v329 = v378;
        if (v376 != (v376 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_603:
          do
          {
            uint64_t v383 = *--v329;
            *--v373 = v383;
          }
          while (v329 != v349);
        }
        uint64_t v329 = *v327;
      }
      uint64_t *v327 = v373;
      v327[1] = v330;
      v327[2] = v374;
      if (v329) {
        operator delete(v329);
      }
    }
    else
    {
      *uint64_t v329 = v292;
      v330 = v329 + 1;
    }
    v327[1] = v330;
    goto LABEL_388;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id)
  {
    Rewriter = a2;
    unsigned int v298 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    unsigned int v276 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    unsigned int v299 = (void *)a3[3];
    uint64_t v300 = v299[1];
    if ((unint64_t)(v300 + 1) > v299[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v299 + 3, v300 + 1, 2);
      uint64_t v300 = v299[1];
    }
    *(_WORD *)(*v299 + 2 * v300) = 21;
    ++v299[1];
    unsigned int v301 = (void *)a3[3];
    unsigned int v302 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v298;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v302, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v303 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v331 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v302, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v303 = 0;
      *uint64_t v331 = InputAttributeNames;
      *((_WORD *)v331 + 4) = 0;
    }
    uint64_t v332 = v301[1];
    if ((unint64_t)(v332 + 1) > v301[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v301, v301 + 3, v332 + 1, 2);
      uint64_t v332 = v301[1];
    }
    *(_WORD *)(*v301 + 2 * v332) = v303;
    ++v301[1];
LABEL_287:
    uint64_t v287 = (void *)a3[3];
    unint64_t v286 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v276;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v286, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v288 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v289 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v286, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v288 = 0;
      *uint64_t v289 = InputAttributeNames;
      *((_WORD *)v289 + 4) = 0;
    }
    goto LABEL_389;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unint64_t v322 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v554);
    unint64_t v323 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
LABEL_322:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unsigned int v333 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    unsigned int v334 = v333;
    if (v333 > 3)
    {
      uint64_t v364 = (void *)a3[3];
      uint64_t v365 = v364[1];
      if ((unint64_t)(v365 + 1) > v364[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v364 + 3, v365 + 1, 2);
        uint64_t v365 = v364[1];
      }
      *(_WORD *)(*v364 + 2 * v365) = 27;
      ++v364[1];
      unint64_t v366 = (void *)a3[3];
      v338 = v366 + 1;
      uint64_t v367 = v366[1];
      if (v366[2] < (unint64_t)(v367 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v366 + 3, v367 + 2, 2);
        uint64_t v367 = v366[1];
      }
      *(_DWORD *)(*v366 + 2 * v367) = v334;
      uint64_t v339 = 2;
    }
    else
    {
      __int16 v335 = v333 + 23;
      unsigned int v336 = (void *)a3[3];
      v338 = v336 + 1;
      uint64_t v337 = v336[1];
      if ((unint64_t)(v337 + 1) > v336[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v336 + 3, v337 + 1, 2);
        uint64_t v337 = v336[1];
      }
      *(_WORD *)(*v336 + 2 * v337) = v335;
      uint64_t v339 = 1;
    }
    goto LABEL_405;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v356 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    uint64_t v357 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v357 & 0xFF00000000) != 0) {
      int v358 = v357;
    }
    else {
      int v358 = -1;
    }
    unint64_t v359 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      unsigned int v360 = (void *)a3[3];
      uint64_t v361 = v360[1];
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
      {
LABEL_397:
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v362, 2);
        __int16 v363 = -1;
LABEL_442:
        uint64_t v361 = v360[1];
        goto LABEL_456;
      }
LABEL_366:
      __int16 v363 = -1;
      goto LABEL_456;
    }
    uint64_t InputAttributeNames = v356;
    unsigned int v388 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v388, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v398 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v388, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *uint64_t v398 = InputAttributeNames;
      *((_WORD *)v398 + 4) = 0;
    }
    unsigned int v360 = (void *)a3[3];
    uint64_t v361 = v360[1];
    unint64_t v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2]) {
      goto LABEL_456;
    }
LABEL_441:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v399, 2);
    goto LABEL_442;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unsigned int v368 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    unsigned int v369 = v368;
    if (v368 > 3)
    {
      uint64_t v389 = (void *)a3[3];
      uint64_t v390 = v389[1];
      if ((unint64_t)(v390 + 1) > v389[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v389 + 3, v390 + 1, 2);
        uint64_t v390 = v389[1];
      }
      *(_WORD *)(*v389 + 2 * v390) = 33;
      ++v389[1];
      uint64_t v391 = (void *)a3[3];
      v338 = v391 + 1;
      uint64_t v392 = v391[1];
      if (v391[2] < (unint64_t)(v392 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v391 + 3, v392 + 2, 2);
        uint64_t v392 = v391[1];
      }
      *(_DWORD *)(*v391 + 2 * v392) = v369;
      uint64_t v339 = 2;
    }
    else
    {
      __int16 v370 = v368 + 29;
      unint64_t v371 = (void *)a3[3];
      v338 = v371 + 1;
      uint64_t v372 = v371[1];
      if ((unint64_t)(v372 + 1) > v371[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v371 + 3, v372 + 1, 2);
        uint64_t v372 = v371[1];
      }
      *(_WORD *)(*v371 + 2 * v372) = v370;
      uint64_t v339 = 1;
    }
LABEL_405:
    *v338 += v339;
    unint64_t v393 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
    unint64_t v394 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v356 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    uint64_t v385 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v385 & 0xFF00000000) != 0) {
      int v386 = v385;
    }
    else {
      int v386 = -1;
    }
    unint64_t v387 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      unsigned int v360 = (void *)a3[3];
      uint64_t v361 = v360[1];
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2]) {
        goto LABEL_397;
      }
      goto LABEL_366;
    }
    uint64_t InputAttributeNames = v356;
    unsigned int v406 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v406, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      int64_t v418 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v406, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *int64_t v418 = InputAttributeNames;
      *((_WORD *)v418 + 4) = 0;
    }
    unsigned int v360 = (void *)a3[3];
    uint64_t v361 = v360[1];
    unint64_t v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2]) {
      goto LABEL_456;
    }
    goto LABEL_441;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id)
  {
    Rewriter = a2;
    int32x4_t v395 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    uint64_t InputAttributeNames = v395;
    int v396 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v396, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v397 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v407 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v396, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v397 = 0;
      *unsigned int v407 = InputAttributeNames;
      *((_WORD *)v407 + 4) = 0;
    }
    unsigned int v408 = (void *)a3[3];
    uint64_t v409 = v408[1];
    if ((unint64_t)(v409 + 1) > v408[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v408 + 3, v409 + 1, 2);
      uint64_t v409 = v408[1];
    }
    *(_WORD *)(*v408 + 2 * v409) = 35;
    ++v408[1];
    uint64_t v410 = (void *)a3[3];
    uint64_t v411 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v395;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v411, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v412 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v413 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v411, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v412 = 0;
      *uint64_t v413 = InputAttributeNames;
      *((_WORD *)v413 + 4) = 0;
    }
    uint64_t v414 = v410[1];
    if ((unint64_t)(v414 + 1) > v410[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v410, v410 + 3, v414 + 1, 2);
      uint64_t v414 = v410[1];
    }
    *(_WORD *)(*v410 + 2 * v414) = v412;
    ++v410[1];
    unsigned int v415 = (void *)a3[3];
    uint64_t v416 = v415[1];
    if ((unint64_t)(v416 + 1) > v415[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v415 + 3, v416 + 1, 2);
      uint64_t v416 = v415[1];
    }
    *(_WORD *)(*v415 + 2 * v416) = v397;
    ++v415[1];
    unint64_t v323 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    goto LABEL_322;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
  {
    Rewriter = a2;
    unsigned int v400 = *(void **)(*(void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    uint64_t v401 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    unsigned int v402 = v401;
    if (v400 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      uint64_t InputAttributeNames = v401;
      uint64_t v425 = (uint64_t *)(a1 + 24);
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v425, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v426 = *(_WORD *)(v554 + 8);
      }
      else
      {
        unint64_t v433 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v425, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v426 = 0;
        *unint64_t v433 = InputAttributeNames;
        *((_WORD *)v433 + 4) = 0;
      }
      uint64_t v356 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      unsigned int v434 = (void *)a3[3];
      uint64_t v435 = v434[1];
      if ((unint64_t)(v435 + 1) > v434[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v434 + 3, v435 + 1, 2);
        uint64_t v435 = v434[1];
      }
      *(_WORD *)(*v434 + 2 * v435) = 37;
      ++v434[1];
      v436 = (void *)a3[3];
      v437 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v402;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v437, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v438 = *(_WORD *)(v554 + 8);
      }
      else
      {
        unsigned int v439 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v437, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v438 = 0;
        *unsigned int v439 = InputAttributeNames;
        *((_WORD *)v439 + 4) = 0;
      }
      uint64_t v440 = v436[1];
      if ((unint64_t)(v440 + 1) > v436[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v436, v436 + 3, v440 + 1, 2);
        uint64_t v440 = v436[1];
      }
      *(_WORD *)(*v436 + 2 * v440) = v438;
      ++v436[1];
      unsigned int v360 = (void *)a3[3];
      uint64_t v441 = v360[1];
      if ((unint64_t)(v441 + 1) > v360[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v360 + 3, v441 + 1, 2);
        uint64_t v441 = v360[1];
      }
      *(_WORD *)(*v360 + 2 * v441) = v426;
      goto LABEL_457;
    }
    uint64_t v356 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    unsigned int v403 = (void *)a3[3];
    uint64_t v404 = v403[1];
    if ((unint64_t)(v404 + 1) > v403[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v403 + 3, v404 + 1, 2);
      uint64_t v404 = v403[1];
    }
    *(_WORD *)(*v403 + 2 * v404) = 36;
    ++v403[1];
    unsigned int v360 = (void *)a3[3];
    unint64_t v405 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v402;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v405, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v427 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v405, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *unsigned int v427 = InputAttributeNames;
      *((_WORD *)v427 + 4) = 0;
    }
    uint64_t v361 = v360[1];
    if ((unint64_t)(v361 + 1) > v360[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v361 + 1, 2);
      uint64_t v361 = v360[1];
    }
LABEL_456:
    *(_WORD *)(*v360 + 2 * v361) = v363;
LABEL_457:
    ++v360[1];
    v429 = (void *)a3[3];
    unsigned int v428 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v356;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v428, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v430 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v431 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v428, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v430 = 0;
      *unsigned int v431 = InputAttributeNames;
      *((_WORD *)v431 + 4) = 0;
    }
    uint64_t v432 = v429[1];
    if ((unint64_t)(v432 + 1) > v429[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v429, v429 + 3, v432 + 1, 2);
      uint64_t v432 = v429[1];
    }
    *(_WORD *)(*v429 + 2 * v432) = v430;
    ++v429[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t Filter = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v65 = *((void *)&v554 + 1);
    uint64_t v64 = v554;
    unsigned int v139 = (void *)a3[3];
    uint64_t v417 = v139[1];
    if ((unint64_t)(v417 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v139 + 3, v417 + 1, 2);
      uint64_t v417 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v417) = 38;
    goto LABEL_135;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id) {
    char v253 = a2;
  }
  else {
    char v253 = 0;
  }
  if (v253)
  {
    v552 = v253;
    uint64_t v254 = *(void *)(a1 + 208);
    uint64_t v255 = *(uint64_t **)(a1 + 256);
    int v256 = *((_DWORD *)v255 + 4);
    if (v256)
    {
      uint64_t v257 = *v255;
      unsigned int v258 = v256 - 1;
      uint64_t v259 = (v256 - 1) & ((v253 >> 4) ^ (v253 >> 9));
      uint64_t v260 = *(Operation **)(v257 + 16 * v259);
      if (v260 == v253)
      {
LABEL_259:
        uint64_t v261 = *(void *)(v257 + 16 * v259 + 8);
        goto LABEL_533;
      }
      int v502 = 1;
      while (v260 != (Operation *)-4096)
      {
        int v503 = v259 + v502++;
        uint64_t v259 = v503 & v258;
        uint64_t v260 = *(Operation **)(v257 + 16 * v259);
        if (v260 == v253) {
          goto LABEL_259;
        }
      }
    }
    uint64_t v261 = 0;
LABEL_533:
    int v504 = *(_DWORD *)(v254 + 8);
    Rewriter = (Operation *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v552);
    uint64_t InputAttributeNames = (Operation *)mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&Rewriter);
    uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
    v507 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 96, AttrData, v506);
    mlir::detail::PDLByteCodePattern::create((uint64_t)v253, v261, *(_DWORD *)(*v507 + 8), (uint64_t)&v554);
    unsigned int v508 = *(_DWORD *)(v254 + 8);
    if (v508 >= *(_DWORD *)(v254 + 12))
    {
      llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(v254, &v554);
      v517 = v560;
      if (v560 != &v563) {
LABEL_554:
      }
        free(v517);
LABEL_555:
      if (__src != v559) {
        free(__src);
      }
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, v552);
      uint64_t MatchedOps = mlir::pdl_interp::RecordMatchOp::getMatchedOps((mlir::pdl_interp::RecordMatchOp *)&v552);
      uint64_t v520 = v519;
      uint64_t v521 = *((void *)&v554 + 1);
      uint64_t v522 = v554;
      v523 = (void *)a3[3];
      uint64_t v524 = v523[1];
      if ((unint64_t)(v524 + 1) > v523[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v523 + 3, v524 + 1, 2);
        uint64_t v524 = v523[1];
      }
      *(_WORD *)(*v523 + 2 * v524) = 39;
      ++v523[1];
      v525 = (void *)a3[3];
      uint64_t v526 = v525[1];
      if ((unint64_t)(v526 + 1) > v525[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v525 + 3, v526 + 1, 2);
        *(_WORD *)(*v525 + 2 * v525[1]++) = v504;
        if (!v521) {
          goto LABEL_563;
        }
      }
      else
      {
        *(_WORD *)(*v525 + 2 * v526) = v504;
        ++v525[1];
        if (!v521) {
          goto LABEL_563;
        }
      }
      v527 = (mlir::Block **)(v522 + 24);
      do
      {
        v528 = *v527;
        v527 += 4;
        --v521;
      }
      while (v521);
LABEL_563:
      v529 = (void *)a3[3];
      uint64_t v530 = v529[1];
      if ((unint64_t)(v530 + 1) > v529[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v529 + 3, v530 + 1, 2);
        *(_WORD *)(*v529 + 2 * v529[1]++) = v520;
        if (v520)
        {
LABEL_565:
          v531 = (Operation **)(MatchedOps + 24);
          do
          {
            v532 = (void *)a3[3];
            v533 = (uint64_t *)a3[4];
            Rewriter = *v531;
            uint64_t InputAttributeNames = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v533, (unint64_t *)&Rewriter, &InputAttributeNames))
            {
              __int16 v534 = *((_WORD *)InputAttributeNames + 4);
            }
            else
            {
              v535 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v533, (uint64_t)&Rewriter, (unint64_t *)&Rewriter, InputAttributeNames);
              __int16 v534 = 0;
              void *v535 = Rewriter;
              *((_WORD *)v535 + 4) = 0;
            }
            uint64_t v536 = v532[1];
            if ((unint64_t)(v536 + 1) > v532[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v532, v532 + 3, v536 + 1, 2);
              uint64_t v536 = v532[1];
            }
            *(_WORD *)(*v532 + 2 * v536) = v534;
            ++v532[1];
            v531 += 4;
            --v520;
          }
          while (v520);
        }
      }
      else
      {
        *(_WORD *)(*v529 + 2 * v530) = v520;
        ++v529[1];
        if (v520) {
          goto LABEL_565;
        }
      }
      uint64_t v538 = mlir::pdl_interp::RecordMatchOp::getInputs((mlir::pdl_interp::RecordMatchOp *)&v552);
      uint64_t v539 = v537;
      v540 = (void *)a3[3];
      uint64_t v541 = v540[1];
      if ((unint64_t)(v541 + 1) > v540[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v540 + 3, v541 + 1, 2);
        *(_WORD *)(*v540 + 2 * v540[1]++) = v539;
        if (!v539) {
          return;
        }
      }
      else
      {
        *(_WORD *)(*v540 + 2 * v541) = v537;
        ++v540[1];
        if (!v537) {
          return;
        }
      }
      v542 = (unint64_t *)(v538 + 24);
      do
      {
        unint64_t v543 = *v542;
        v542 += 4;
        --v539;
      }
      while (v539);
      return;
    }
    uint64_t v509 = *(void *)v254 + 104 * v508;
    long long v510 = v554;
    *(void *)(v509 + 16) = v555;
    *(_OWORD *)uint64_t v509 = v510;
    v511 = (void *)(v509 + 40);
    *(void *)(v509 + 24) = v509 + 40;
    *(void *)(v509 + 32) = 0x200000000;
    unsigned int v512 = v557;
    if (!v557 || (long long *)v509 == &v554)
    {
LABEL_545:
      long long v515 = v559[1];
      *(void *)(v509 + 72) = v509 + 88;
      *(_OWORD *)(v509 + 56) = v515;
      *(void *)(v509 + 80) = 0;
      unsigned int v516 = v561;
      if (v561 && (long long *)v509 != &v554)
      {
        if (v560 == &v563)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 72, (void *)(v509 + 88), v561, 16);
          if (v561) {
            memcpy(*(void **)(v509 + 72), v560, 16 * v561);
          }
          *(_DWORD *)(v509 + 80) = v516;
        }
        else
        {
          *(void *)(v509 + 72) = v560;
          *(_DWORD *)(v509 + 80) = v516;
          *(_DWORD *)(v509 + 84) = v562;
          v560 = &v563;
          int v562 = 0;
        }
        unsigned int v561 = 0;
      }
      *(_OWORD *)(v509 + 88) = v563;
      ++*(_DWORD *)(v254 + 8);
      v517 = v560;
      if (v560 != &v563) {
        goto LABEL_554;
      }
      goto LABEL_555;
    }
    v513 = __src;
    if (__src != v559)
    {
      *(void *)(v509 + 24) = __src;
      *(_DWORD *)(v509 + 32) = v512;
      *(_DWORD *)(v509 + 36) = v558;
      char __src = v559;
      int v558 = 0;
LABEL_544:
      unsigned int v557 = 0;
      goto LABEL_545;
    }
    if (v557 < 3)
    {
      uint64_t v514 = v557;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 24, (void *)(v509 + 40), v557, 8);
      uint64_t v514 = v557;
      if (!v557)
      {
LABEL_543:
        *(_DWORD *)(v509 + 32) = v512;
        goto LABEL_544;
      }
      v513 = __src;
      v511 = *(void **)(v509 + 24);
    }
    memcpy(v511, v513, 8 * v514);
    goto LABEL_543;
  }
  if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id)
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id)
    {
      Rewriter = a2;
      v450 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      uint64_t v451 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v452 = *((void *)&v554 + 1);
      uint64_t v453 = v554;
      v454 = (void *)a3[3];
      uint64_t v455 = v454[1];
      if ((unint64_t)(v455 + 1) > v454[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v454 + 3, v455 + 1, 2);
        uint64_t v455 = v454[1];
      }
      *(_WORD *)(*v454 + 2 * v455) = 41;
      ++v454[1];
      v456 = (void *)a3[3];
      v457 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v450;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v457, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v458 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v468 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v457, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v458 = 0;
        void *v468 = InputAttributeNames;
        *((_WORD *)v468 + 4) = 0;
      }
      uint64_t v469 = v456[1];
      if ((unint64_t)(v469 + 1) > v456[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v456, v456 + 3, v469 + 1, 2);
        uint64_t v469 = v456[1];
      }
      *(_WORD *)(*v456 + 2 * v469) = v458;
      ++v456[1];
      if (v452)
      {
        v470 = (mlir::Block **)(v453 + 24);
        do
        {
          v471 = *v470;
          v470 += 4;
          --v452;
        }
        while (v452);
      }
      return;
    }
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id)
    {
      Rewriter = a2;
      v459 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      uint64_t v460 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v461 = *((void *)&v554 + 1);
      uint64_t v462 = v554;
      v463 = (void *)a3[3];
      uint64_t v464 = v463[1];
      if ((unint64_t)(v464 + 1) > v463[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v463 + 3, v464 + 1, 2);
        uint64_t v464 = v463[1];
      }
      *(_WORD *)(*v463 + 2 * v464) = 45;
      ++v463[1];
      v465 = (void *)a3[3];
      v466 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v459;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v466, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v467 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v472 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v466, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v467 = 0;
        void *v472 = InputAttributeNames;
        *((_WORD *)v472 + 4) = 0;
      }
      uint64_t v473 = v465[1];
      if ((unint64_t)(v473 + 1) > v465[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v465, v465 + 3, v473 + 1, 2);
        uint64_t v473 = v465[1];
      }
      *(_WORD *)(*v465 + 2 * v473) = v467;
      ++v465[1];
      if (v461)
      {
        v474 = (mlir::Block **)(v462 + 24);
        do
        {
          v475 = *v474;
          v474 += 4;
          --v461;
        }
        while (v461);
      }
      return;
    }
    if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id)
    {
      if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id)
      {
        uint64_t InputAttributeNames = a2;
        unint64_t v419 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
        uint64_t v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        uint64_t v422 = *((void *)&v554 + 1);
        uint64_t v421 = v554;
        unsigned int v423 = a3;
        __int16 v424 = 42;
      }
      else
      {
        if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id)
        {
          Rewriter = a2;
          *(void *)&long long v554 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
          v476 = (Operation **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          uint64_t v477 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          uint64_t v479 = v478;
          v480 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
          uint64_t v481 = *((void *)&v554 + 1);
          uint64_t v482 = v554;
          v483 = (void *)a3[3];
          uint64_t v484 = v483[1];
          if ((unint64_t)(v484 + 1) > v483[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v483 + 3, v484 + 1, 2);
            uint64_t v484 = v483[1];
          }
          *(_WORD *)(*v483 + 2 * v484) = 43;
          ++v483[1];
          v485 = (void *)a3[3];
          v486 = (uint64_t *)a3[4];
          uint64_t InputAttributeNames = v480;
          *(void *)&long long v554 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v486, (unint64_t *)&InputAttributeNames, &v554))
          {
            __int16 v487 = *(_WORD *)(v554 + 8);
          }
          else
          {
            v492 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v486, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
            __int16 v487 = 0;
            void *v492 = InputAttributeNames;
            *((_WORD *)v492 + 4) = 0;
          }
          v493 = (Operation **)(v477 + 8 * v479);
          uint64_t v494 = v485[1];
          if ((unint64_t)(v494 + 1) > v485[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v485, v485 + 3, v494 + 1, 2);
            uint64_t v494 = v485[1];
          }
          *(_WORD *)(*v485 + 2 * v494) = v487;
          ++v485[1];
          v495 = (void *)a3[3];
          uint64_t v496 = v495[1];
          if ((unint64_t)(v496 + 1) > v495[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v495 + 3, v496 + 1, 2);
            uint64_t v496 = v495[1];
          }
          *(_WORD *)(*v495 + 2 * v496) = (unint64_t)((char *)v493 - (char *)v476) >> 3;
          ++v495[1];
          while (v476 != v493)
          {
            v497 = *v476++;
            uint64_t InputAttributeNames = v497;
            uint64_t v498 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
            mlir::OperationName::OperationName(&v554, v498, v499, *(void *)(a1 + 152));
          }
          if (v481)
          {
            v500 = (mlir::Block **)(v482 + 24);
            do
            {
              v501 = *v500;
              v500 += 4;
              --v481;
            }
            while (v481);
          }
          return;
        }
        if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id) {
          return;
        }
        uint64_t InputAttributeNames = a2;
        unint64_t v419 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
        uint64_t v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        uint64_t v422 = *((void *)&v554 + 1);
        uint64_t v421 = v554;
        unsigned int v423 = a3;
        __int16 v424 = 44;
      }
      return;
    }
    uint64_t InputAttributeNames = a2;
    unint64_t v130 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    uint64_t v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v133 = *((void *)&v554 + 1);
    uint64_t v132 = v554;
    uint64_t v134 = a3;
    __int16 v135 = 46;
LABEL_125:
    return;
  }
  *(void *)&long long v554 = a2;
  unint64_t v442 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
  uint64_t Indices = mlir::memref::LoadOp::getIndices((mlir::memref::LoadOp *)&v554);
  uint64_t v445 = v443;
  v446 = (void *)a3[3];
  uint64_t v447 = v446[1];
  if ((unint64_t)(v447 + 1) > v446[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v446 + 3, v447 + 1, 2);
    *(_WORD *)(*v446 + 2 * v446[1]++) = v445;
    if (!v445) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v446 + 2 * v447) = v443;
    ++v446[1];
    if (!v443) {
      return;
    }
  }
  v448 = (unint64_t *)(Indices + 24);
  do
  {
    unint64_t v449 = *v448;
    v448 += 4;
    --v445;
  }
  while (v445);
}

void anonymous namespace'::Generator::generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[8] = *MEMORY[0x263EF8340];
  uint64_t v33 = a2;
  uint64_t v34 = v36;
  uint64_t v35 = 0x800000000;
  llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize((uint64_t)&v34, (uint64_t)&v33);
  unint64_t v5 = (char *)v34;
  if (!v35) {
    goto LABEL_44;
  }
  uint64_t v6 = (char *)v34 + 8 * v35;
  do
  {
    uint64_t v8 = *((void *)v6 - 1);
    v6 -= 8;
    uint64_t v7 = v8;
    uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 8);
    unsigned int v10 = *(_DWORD *)(a1 + 176);
    if (!v10) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    unsigned int v12 = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v13 = (void *)(v11 + 16 * v12);
    uint64_t v14 = *v13;
    if (v7 == *v13) {
      goto LABEL_20;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & (v10 - 1);
      uint64_t v13 = (void *)(v11 + 16 * v12);
      uint64_t v14 = *v13;
      if (v7 == *v13) {
        goto LABEL_20;
      }
    }
    uint64_t v23 = v15 ? v15 : v13;
    int v24 = *(_DWORD *)(a1 + 168);
    if (4 * v24 + 4 < 3 * v10)
    {
      if (v10 + ~v24 - *(_DWORD *)(a1 + 172) > v10 >> 3) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_27:
      v10 *= 2;
    }
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1 + 160, v10);
    uint64_t v25 = *(void *)(a1 + 160);
    int v26 = *(_DWORD *)(a1 + 176) - 1;
    unsigned int v27 = v26 & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v23 = (void *)(v25 + 16 * v27);
    uint64_t v28 = *v23;
    if (v7 == *v23)
    {
LABEL_29:
      ++*(_DWORD *)(a1 + 168);
      if (v7 == -4096) {
        goto LABEL_19;
      }
LABEL_18:
      --*(_DWORD *)(a1 + 172);
      goto LABEL_19;
    }
    __int16 v29 = 0;
    int v30 = 1;
    while (v28 != -4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v28 == -8192;
      }
      if (v31) {
        __int16 v29 = v23;
      }
      unsigned int v32 = v27 + v30++;
      unsigned int v27 = v32 & v26;
      uint64_t v23 = (void *)(v25 + 16 * (v32 & v26));
      uint64_t v28 = *v23;
      if (v7 == *v23) {
        goto LABEL_29;
      }
    }
    if (v29) {
      uint64_t v23 = v29;
    }
LABEL_17:
    uint64_t v19 = *v23;
    ++*(_DWORD *)(a1 + 168);
    if (v19 != -4096) {
      goto LABEL_18;
    }
LABEL_19:
    *uint64_t v23 = v7;
    *((_DWORD *)v23 + 2) = v9;
LABEL_20:
    uint64_t v20 = (ZinIrHalH13g *)(v7 + 32);
    for (uint64_t i = *(ZinIrHalH13g **)(v7 + 40); i != v20; uint64_t i = (ZinIrHalH13g *)*((void *)i + 1))
    {
      ZinIrHalH13g::~ZinIrHalH13g(i);
    }
  }
  while (v6 != v5);
  unint64_t v5 = (char *)v34;
LABEL_44:
  if (v5 != (char *)v36) {
    free(v5);
  }
}

uint64_t anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_3::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v13 = a2;
  unint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = *(_WORD **)(a1 + 8);
  __int16 v5 = (*v3)++;
  uint64_t v14 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v4, &v13, &v14);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v13, &v13, v14);
    *(void *)uint64_t result = v13;
    *(_WORD *)(result + 8) = v5;
  }
  unint64_t v7 = *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    unint64_t v7 = 0;
  }
  unint64_t v12 = v7;
  if (v7)
  {
    uint64_t result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    uint64_t v8 = *(void **)(*(void *)result + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      uint64_t v9 = v4 + 3;
      unsigned int v10 = *(_WORD **)(a1 + 16);
    }
    else
    {
      if (v8 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return result;
      }
      uint64_t v9 = v4 + 3;
      unsigned int v10 = *(_WORD **)(a1 + 24);
    }
    __int16 v11 = (*v10)++;
    uint64_t v14 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
      *(void *)uint64_t result = v13;
      *(_WORD *)(result + 8) = v11;
    }
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  unsigned int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unsigned int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      unint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *unint64_t v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          void *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    int v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      unsigned int v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          uint64_t v19 = v25;
          void *v25 = *(void *)v18;
          *((_WORD *)v19 + 4) = *((_WORD *)v18 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        unsigned int v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unsigned int v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v22 = result + 2;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      void *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      int v24 = &result[2 * v20];
      do
      {
        void *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2)
  {
    unint64_t v4 = (uint64_t *)result;
    for (uint64_t i = 0; i != v2; ++i)
    {
      unint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
    }
  }
  return result;
}

uint64_t *llvm::detail::UniqueFunctionBase<void,mlir::Operation *>::CallImpl<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_1>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  unint64_t v4 = (_DWORD *)result[1];
  int v6 = (*v4)++;
  unsigned int v7 = *(_DWORD *)(v5 + 16);
  unsigned int v8 = a2 >> 4;
  if (!v7) {
    goto LABEL_49;
  }
  unsigned int v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
  unsigned int v10 = (void *)(*(void *)v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a2) {
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11 != -4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v11 == -8192;
    }
    if (v14) {
      uint64_t v12 = v10;
    }
    unsigned int v15 = v9 + v13++;
    unsigned int v9 = v15 & (v7 - 1);
    unsigned int v10 = (void *)(*(void *)v5 + 16 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_17;
    }
  }
  uint64_t v36 = (uint64_t)(v12 ? v12 : v10);
  int v37 = *(_DWORD *)(v5 + 8);
  if (4 * v37 + 4 < 3 * v7)
  {
    if (v7 + ~v37 - *(_DWORD *)(v5 + 12) > v7 >> 3) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_49:
    v7 *= 2;
  }
  uint64_t result = llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v5, v7);
  int v38 = *(_DWORD *)(v5 + 16) - 1;
  unsigned int v39 = v38 & (v8 ^ (a2 >> 9));
  uint64_t v36 = *(void *)v5 + 16 * v39;
  uint64_t v40 = *(void *)v36;
  if (*(void *)v36 == a2)
  {
LABEL_51:
    ++*(_DWORD *)(v5 + 8);
    if (a2 == -4096) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v46 = 0;
  int v47 = 1;
  while (v40 != -4096)
  {
    if (v46) {
      BOOL v48 = 0;
    }
    else {
      BOOL v48 = v40 == -8192;
    }
    if (v48) {
      uint64_t v46 = v36;
    }
    unsigned int v49 = v39 + v47++;
    unsigned int v39 = v49 & v38;
    uint64_t v36 = *(void *)v5 + 16 * (v49 & v38);
    uint64_t v40 = *(void *)v36;
    if (*(void *)v36 == a2) {
      goto LABEL_51;
    }
  }
  if (v46) {
    uint64_t v36 = v46;
  }
LABEL_14:
  uint64_t v16 = *(void *)v36;
  ++*(_DWORD *)(v5 + 8);
  if (v16 != -4096) {
LABEL_15:
  }
    --*(_DWORD *)(v5 + 12);
LABEL_16:
  *(void *)uint64_t v36 = a2;
  *(_DWORD *)(v36 + 8) = v6;
LABEL_17:
  unint64_t v17 = *(unsigned int *)(a2 + 44);
  if ((v17 & 0x7FFFFF) != 0)
  {
    unint64_t v18 = ((a2 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    unint64_t v19 = v18 + 24 * (v17 & 0x7FFFFF);
    do
    {
      for (uint64_t i = *(void *)(v18 + 8); i != v18; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v21 = i - 8;
        if (!i) {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (ZinIrHalH13g *)(v21 + 32);
        for (uint64_t j = *(ZinIrHalH13g **)(v21 + 40); j != v22; uint64_t j = (ZinIrHalH13g *)*((void *)j + 1))
        {
          ZinIrHalH13g::~ZinIrHalH13g(j);
          uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(v3[2] + 24) & 0xFFFFFFFFFFFFFFF8))();
        }
      }
      v18 += 24;
    }
    while (v18 != v19);
  }
  uint64_t v24 = v3[3];
  uint64_t v25 = (_DWORD *)v3[1];
  int v26 = (*v25)++;
  unsigned int v27 = *(_DWORD *)(v24 + 16);
  if (!v27) {
    goto LABEL_57;
  }
  unsigned int v28 = (v27 - 1) & (v8 ^ (a2 >> 9));
  __int16 v29 = (void *)(*(void *)v24 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != a2)
  {
    unsigned int v32 = 0;
    int v33 = 1;
    while (v30 != -4096)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v30 == -8192;
      }
      if (v34) {
        unsigned int v32 = v29;
      }
      unsigned int v35 = v28 + v33++;
      unsigned int v28 = v35 & (v27 - 1);
      __int16 v29 = (void *)(*(void *)v24 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == a2) {
        return result;
      }
    }
    if (v32) {
      uint64_t v41 = (uint64_t)v32;
    }
    else {
      uint64_t v41 = (uint64_t)v29;
    }
    int v42 = *(_DWORD *)(v24 + 8);
    if (4 * v42 + 4 < 3 * v27)
    {
      if (v27 + ~v42 - *(_DWORD *)(v24 + 12) > v27 >> 3) {
        goto LABEL_33;
      }
      goto LABEL_58;
    }
LABEL_57:
    v27 *= 2;
LABEL_58:
    uint64_t result = llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v24, v27);
    int v43 = *(_DWORD *)(v24 + 16) - 1;
    unsigned int v44 = v43 & (v8 ^ (a2 >> 9));
    uint64_t v41 = *(void *)v24 + 16 * v44;
    uint64_t v45 = *(void *)v41;
    if (*(void *)v41 == a2)
    {
LABEL_59:
      ++*(_DWORD *)(v24 + 8);
      if (a2 == -4096) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    uint64_t v50 = 0;
    int v51 = 1;
    while (v45 != -4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v45 == -8192;
      }
      if (v52) {
        uint64_t v50 = v41;
      }
      unsigned int v53 = v44 + v51++;
      unsigned int v44 = v53 & v43;
      uint64_t v41 = *(void *)v24 + 16 * (v53 & v43);
      uint64_t v45 = *(void *)v41;
      if (*(void *)v41 == a2) {
        goto LABEL_59;
      }
    }
    if (v50) {
      uint64_t v41 = v50;
    }
LABEL_33:
    uint64_t v31 = *(void *)v41;
    ++*(_DWORD *)(v24 + 8);
    if (v31 == -4096)
    {
LABEL_35:
      *(void *)uint64_t v41 = a2;
      *(_DWORD *)(v41 + 8) = v26;
      return result;
    }
LABEL_34:
    --*(_DWORD *)(v24 + 12);
    goto LABEL_35;
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Block *)>::callback_fn<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2>(uint64_t a1, uint64_t a2)
{
  Liveness = mlir::Liveness::getLiveness(*(void *)a1, a2);
  int v33 = Liveness;
  long long v5 = *(_OWORD *)(a1 + 24);
  v30[0] = *(_OWORD *)(a1 + 8);
  v30[1] = v5;
  uint64_t v31 = *(void *)(a1 + 40);
  unsigned int v32 = &v33;
  uint64_t v6 = Liveness[2];
  uint64_t v7 = 24;
  if (v6 == Liveness[1]) {
    uint64_t v7 = 28;
  }
  uint64_t v8 = *(unsigned int *)((char *)Liveness + v7);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    unsigned int v10 = (unint64_t *)Liveness[2];
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unsigned int v10 = (unint64_t *)Liveness[2];
  }
  uint64_t v11 = (unint64_t *)(v6 + 8 * v8);
  if (v10 != v11)
  {
    unint64_t v12 = *v10;
LABEL_11:
    unint64_t v29 = v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v29);
    if (ParentRegion == (mlir::Block *)mlir::Block::getParent((mlir::Block *)a2))
    {
      unint64_t v14 = v29;
      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(a2 + 40));
    }
    while (++v10 != v11)
    {
      unint64_t v12 = *v10;
      if (*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != v11) {
          goto LABEL_11;
        }
        break;
      }
    }
  }
LABEL_16:
  if (mlir::Block::isEntryBlock((mlir::Block *)a2))
  {
    uint64_t v16 = *(unint64_t **)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 56) - (void)v16;
    if (v17)
    {
      uint64_t v18 = 8 * (v17 >> 3);
      do
      {
        unint64_t v19 = *v16++;
        ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(a2 + 40));
        v18 -= 8;
      }
      while (v18);
    }
  }
  uint64_t v21 = (ZinIrHalH13g *)(a2 + 32);
  for (uint64_t i = *(ZinIrHalH13g **)(a2 + 40); i != v21; uint64_t i = (ZinIrHalH13g *)*((void *)i + 1))
  {
    ZinIrHalH13g::~ZinIrHalH13g(i);
    uint64_t v24 = *(unsigned int *)(v23 + 36);
    if (v24) {
      uint64_t v25 = v23 - 16;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v24)
    {
      int v26 = (mlir::Block **)v23;
      for (uint64_t j = 0; j != v24; ++j)
      {
        unint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, j);
      }
    }
  }
}